
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008e38  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003a8  08008fc8  08008fc8  00009fc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009370  08009370  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009370  08009370  0000a370  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009378  08009378  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009378  08009378  0000a378  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800937c  0800937c  0000a37c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009380  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004d38  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004da4  20004da4  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000206a4  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000049e1  00000000  00000000  0002b740  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  00030128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001507  00000000  00000000  00031c68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00025963  00000000  00000000  0003316f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f559  00000000  00000000  00058ad2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de333  00000000  00000000  0007802b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015635e  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00007a4c  00000000  00000000  001563a4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0015ddf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008fb0 	.word	0x08008fb0

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008fb0 	.word	0x08008fb0

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;  // 新增CAN2句柄定义

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;  // 修改为6，实现500Kbps波特率
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;  // 时间段1：10个时间量子，采样点78.6%
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;   // 时间段2：3个时间量子，与CAN2保持一致
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f001 fb39 	bl	8001c64 <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f000 ff42 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000088 	.word	0x20000088
 8000604:	40006400 	.word	0x40006400

08000608 <CAN2_Demo_Task>:
  * @brief  CAN2纯监听任务函数 - 只接收不发送
  * @param  argument: 任务参数
  * @retval None
  */
void CAN2_Demo_Task(void *argument)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	b084      	sub	sp, #16
 800060c:	af00      	add	r7, sp, #0
 800060e:	6078      	str	r0, [r7, #4]
    uint32_t current_time;
    

    
    for(;;) {
        current_time = HAL_GetTick();
 8000610:	f001 fb1c 	bl	8001c4c <HAL_GetTick>
 8000614:	60f8      	str	r0, [r7, #12]
        
        // 静默运行，只在接收到数据时打印
        // 移除所有状态报告和诊断信息，专注于数据接收
        
        // 任务延时
        osDelay(100);  // 100ms
 8000616:	2064      	movs	r0, #100	@ 0x64
 8000618:	f004 ff18 	bl	800544c <osDelay>
    for(;;) {
 800061c:	bf00      	nop
 800061e:	e7f7      	b.n	8000610 <CAN2_Demo_Task+0x8>

08000620 <CAN_DualNode_Init>:
/**
  * @brief  Initialize CAN dual node communication
  * @retval HAL status
  */
HAL_StatusTypeDef CAN_DualNode_Init(void)
{
 8000620:	b580      	push	{r7, lr}
 8000622:	b082      	sub	sp, #8
 8000624:	af00      	add	r7, sp, #0
    HAL_StatusTypeDef status = HAL_OK;
 8000626:	2300      	movs	r3, #0
 8000628:	71fb      	strb	r3, [r7, #7]
    
    // CAN_DEBUG_PRINTF("Starting CAN dual node communication initialization...\r\n");
    
    // Configure CAN filter
    CAN_ConfigFilter();
 800062a:	f000 fb89 	bl	8000d40 <CAN_ConfigFilter>
    
    // Start CAN
    status = HAL_CAN_Start(&hcan1);
 800062e:	481b      	ldr	r0, [pc, #108]	@ (800069c <CAN_DualNode_Init+0x7c>)
 8000630:	f001 fcf2 	bl	8002018 <HAL_CAN_Start>
 8000634:	4603      	mov	r3, r0
 8000636:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000638:	79fb      	ldrb	r3, [r7, #7]
 800063a:	2b00      	cmp	r3, #0
 800063c:	d001      	beq.n	8000642 <CAN_DualNode_Init+0x22>
    {
        // CAN_DEBUG_PRINTF("CAN start failed: %d\r\n", status);
        return status;
 800063e:	79fb      	ldrb	r3, [r7, #7]
 8000640:	e027      	b.n	8000692 <CAN_DualNode_Init+0x72>
    }
    
    // Activate receive interrupt
    status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000642:	2102      	movs	r1, #2
 8000644:	4815      	ldr	r0, [pc, #84]	@ (800069c <CAN_DualNode_Init+0x7c>)
 8000646:	f001 ff1d 	bl	8002484 <HAL_CAN_ActivateNotification>
 800064a:	4603      	mov	r3, r0
 800064c:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800064e:	79fb      	ldrb	r3, [r7, #7]
 8000650:	2b00      	cmp	r3, #0
 8000652:	d001      	beq.n	8000658 <CAN_DualNode_Init+0x38>
    {
        // CAN_DEBUG_PRINTF("CAN receive interrupt activation failed: %d\r\n", status);
        return status;
 8000654:	79fb      	ldrb	r3, [r7, #7]
 8000656:	e01c      	b.n	8000692 <CAN_DualNode_Init+0x72>
    }
    
    // Activate transmit complete interrupt
    status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_TX_MAILBOX_EMPTY);
 8000658:	2101      	movs	r1, #1
 800065a:	4810      	ldr	r0, [pc, #64]	@ (800069c <CAN_DualNode_Init+0x7c>)
 800065c:	f001 ff12 	bl	8002484 <HAL_CAN_ActivateNotification>
 8000660:	4603      	mov	r3, r0
 8000662:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 8000664:	79fb      	ldrb	r3, [r7, #7]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d001      	beq.n	800066e <CAN_DualNode_Init+0x4e>
    {
        // CAN_DEBUG_PRINTF("CAN transmit interrupt activation failed: %d\r\n", status);
        return status;
 800066a:	79fb      	ldrb	r3, [r7, #7]
 800066c:	e011      	b.n	8000692 <CAN_DualNode_Init+0x72>
    }
    
    // Activate error interrupt
    status = HAL_CAN_ActivateNotification(&hcan1, CAN_IT_ERROR | CAN_IT_BUSOFF | CAN_IT_LAST_ERROR_CODE);
 800066e:	f44f 410c 	mov.w	r1, #35840	@ 0x8c00
 8000672:	480a      	ldr	r0, [pc, #40]	@ (800069c <CAN_DualNode_Init+0x7c>)
 8000674:	f001 ff06 	bl	8002484 <HAL_CAN_ActivateNotification>
 8000678:	4603      	mov	r3, r0
 800067a:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK)
 800067c:	79fb      	ldrb	r3, [r7, #7]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d001      	beq.n	8000686 <CAN_DualNode_Init+0x66>
    {
        // CAN_DEBUG_PRINTF("CAN error interrupt activation failed: %d\r\n", status);
        return status;
 8000682:	79fb      	ldrb	r3, [r7, #7]
 8000684:	e005      	b.n	8000692 <CAN_DualNode_Init+0x72>
    }
    
    // Initialize statistics
    CAN_ResetStats();
 8000686:	f000 faef 	bl	8000c68 <CAN_ResetStats>
    
    // Set initial state
    wcmcu_status = CAN_NODE_OFFLINE;
 800068a:	4b05      	ldr	r3, [pc, #20]	@ (80006a0 <CAN_DualNode_Init+0x80>)
 800068c:	2200      	movs	r2, #0
 800068e:	701a      	strb	r2, [r3, #0]
    // CAN_DEBUG_PRINTF("  - Data request (ID: 0x%03X)\r\n", CAN_DATA_REQUEST_ID);
    // CAN_DEBUG_PRINTF("  - Data response (ID: 0x%03X)\r\n", CAN_DATA_RESPONSE_ID);
    // CAN_DEBUG_PRINTF("  - Status message (ID: 0x%03X)\r\n", CAN_STATUS_ID);
    // CAN_DEBUG_PRINTF("  - Control command (ID: 0x%03X)\r\n", CAN_CONTROL_ID);
    
    return HAL_OK;
 8000690:	2300      	movs	r3, #0
}
 8000692:	4618      	mov	r0, r3
 8000694:	3708      	adds	r7, #8
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	20000088 	.word	0x20000088
 80006a0:	20000140 	.word	0x20000140

080006a4 <CAN_SendToWCMCU>:
  * @param  data: Data pointer
  * @param  len: Data length
  * @retval HAL status
  */
HAL_StatusTypeDef CAN_SendToWCMCU(uint32_t id, uint8_t* data, uint8_t len)
{
 80006a4:	b580      	push	{r7, lr}
 80006a6:	b086      	sub	sp, #24
 80006a8:	af00      	add	r7, sp, #0
 80006aa:	60f8      	str	r0, [r7, #12]
 80006ac:	60b9      	str	r1, [r7, #8]
 80006ae:	4613      	mov	r3, r2
 80006b0:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    
    // Check parameters
    if (data == NULL || len > 8)
 80006b2:	68bb      	ldr	r3, [r7, #8]
 80006b4:	2b00      	cmp	r3, #0
 80006b6:	d002      	beq.n	80006be <CAN_SendToWCMCU+0x1a>
 80006b8:	79fb      	ldrb	r3, [r7, #7]
 80006ba:	2b08      	cmp	r3, #8
 80006bc:	d901      	bls.n	80006c2 <CAN_SendToWCMCU+0x1e>
    {
        // CAN_DEBUG_PRINTF("Send parameter error\r\n");
        return HAL_ERROR;
 80006be:	2301      	movs	r3, #1
 80006c0:	e04b      	b.n	800075a <CAN_SendToWCMCU+0xb6>
    }
    
    // Configure transmit header
    TxHeader.StdId = id;
 80006c2:	4a28      	ldr	r2, [pc, #160]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006c4:	68fb      	ldr	r3, [r7, #12]
 80006c6:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = 0x00;
 80006c8:	4b26      	ldr	r3, [pc, #152]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006ca:	2200      	movs	r2, #0
 80006cc:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 80006ce:	4b25      	ldr	r3, [pc, #148]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006d0:	2200      	movs	r2, #0
 80006d2:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 80006d4:	4b23      	ldr	r3, [pc, #140]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = len;
 80006da:	79fb      	ldrb	r3, [r7, #7]
 80006dc:	4a21      	ldr	r2, [pc, #132]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006de:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 80006e0:	4b20      	ldr	r3, [pc, #128]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006e2:	2200      	movs	r2, #0
 80006e4:	751a      	strb	r2, [r3, #20]
    
    // Copy data
    memcpy(TxData, data, len);
 80006e6:	79fb      	ldrb	r3, [r7, #7]
 80006e8:	461a      	mov	r2, r3
 80006ea:	68b9      	ldr	r1, [r7, #8]
 80006ec:	481e      	ldr	r0, [pc, #120]	@ (8000768 <CAN_SendToWCMCU+0xc4>)
 80006ee:	f007 ff16 	bl	800851e <memcpy>
    
    // Send message
    status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80006f2:	4b1e      	ldr	r3, [pc, #120]	@ (800076c <CAN_SendToWCMCU+0xc8>)
 80006f4:	4a1c      	ldr	r2, [pc, #112]	@ (8000768 <CAN_SendToWCMCU+0xc4>)
 80006f6:	491b      	ldr	r1, [pc, #108]	@ (8000764 <CAN_SendToWCMCU+0xc0>)
 80006f8:	481d      	ldr	r0, [pc, #116]	@ (8000770 <CAN_SendToWCMCU+0xcc>)
 80006fa:	f001 fcd1 	bl	80020a0 <HAL_CAN_AddTxMessage>
 80006fe:	4603      	mov	r3, r0
 8000700:	74fb      	strb	r3, [r7, #19]
    
    if (status == HAL_OK)
 8000702:	7cfb      	ldrb	r3, [r7, #19]
 8000704:	2b00      	cmp	r3, #0
 8000706:	d125      	bne.n	8000754 <CAN_SendToWCMCU+0xb0>
    {
        // Print CAN1 transmit log
        printf("[CAN1-TX] ID:0x%03X, DLC:%d, Data:", (unsigned int)id, len);
 8000708:	79fb      	ldrb	r3, [r7, #7]
 800070a:	461a      	mov	r2, r3
 800070c:	68f9      	ldr	r1, [r7, #12]
 800070e:	4819      	ldr	r0, [pc, #100]	@ (8000774 <CAN_SendToWCMCU+0xd0>)
 8000710:	f007 fcdc 	bl	80080cc <iprintf>
        for (int i = 0; i < len && i < 8; i++) {
 8000714:	2300      	movs	r3, #0
 8000716:	617b      	str	r3, [r7, #20]
 8000718:	e00a      	b.n	8000730 <CAN_SendToWCMCU+0x8c>
            printf("%02X ", data[i]);
 800071a:	697b      	ldr	r3, [r7, #20]
 800071c:	68ba      	ldr	r2, [r7, #8]
 800071e:	4413      	add	r3, r2
 8000720:	781b      	ldrb	r3, [r3, #0]
 8000722:	4619      	mov	r1, r3
 8000724:	4814      	ldr	r0, [pc, #80]	@ (8000778 <CAN_SendToWCMCU+0xd4>)
 8000726:	f007 fcd1 	bl	80080cc <iprintf>
        for (int i = 0; i < len && i < 8; i++) {
 800072a:	697b      	ldr	r3, [r7, #20]
 800072c:	3301      	adds	r3, #1
 800072e:	617b      	str	r3, [r7, #20]
 8000730:	79fb      	ldrb	r3, [r7, #7]
 8000732:	697a      	ldr	r2, [r7, #20]
 8000734:	429a      	cmp	r2, r3
 8000736:	da02      	bge.n	800073e <CAN_SendToWCMCU+0x9a>
 8000738:	697b      	ldr	r3, [r7, #20]
 800073a:	2b07      	cmp	r3, #7
 800073c:	dded      	ble.n	800071a <CAN_SendToWCMCU+0x76>
        }
        printf("\r\n");
 800073e:	480f      	ldr	r0, [pc, #60]	@ (800077c <CAN_SendToWCMCU+0xd8>)
 8000740:	f007 fd34 	bl	80081ac <puts>
        
        CAN_UpdateTxStats();
 8000744:	f000 fb24 	bl	8000d90 <CAN_UpdateTxStats>
        last_send_time = CAN_GET_TIMESTAMP();
 8000748:	f001 fa80 	bl	8001c4c <HAL_GetTick>
 800074c:	4603      	mov	r3, r0
 800074e:	4a0c      	ldr	r2, [pc, #48]	@ (8000780 <CAN_SendToWCMCU+0xdc>)
 8000750:	6013      	str	r3, [r2, #0]
 8000752:	e001      	b.n	8000758 <CAN_SendToWCMCU+0xb4>
    }
    else
    {
        CAN_UpdateErrorStats();
 8000754:	f000 fb38 	bl	8000dc8 <CAN_UpdateErrorStats>
        // CAN_DEBUG_PRINTF("CAN message send failed: %d\r\n", status);
    }
    
    return status;
 8000758:	7cfb      	ldrb	r3, [r7, #19]
}
 800075a:	4618      	mov	r0, r3
 800075c:	3718      	adds	r7, #24
 800075e:	46bd      	mov	sp, r7
 8000760:	bd80      	pop	{r7, pc}
 8000762:	bf00      	nop
 8000764:	200000d8 	.word	0x200000d8
 8000768:	2000010c 	.word	0x2000010c
 800076c:	2000011c 	.word	0x2000011c
 8000770:	20000088 	.word	0x20000088
 8000774:	08008fc8 	.word	0x08008fc8
 8000778:	08008fec 	.word	0x08008fec
 800077c:	08008ff4 	.word	0x08008ff4
 8000780:	20000148 	.word	0x20000148

08000784 <CAN_SendDataResponse>:
  * @param  data: Response data
  * @param  len: Data length
  * @retval HAL status
  */
HAL_StatusTypeDef CAN_SendDataResponse(uint8_t* data, uint8_t len)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b084      	sub	sp, #16
 8000788:	af00      	add	r7, sp, #0
 800078a:	6078      	str	r0, [r7, #4]
 800078c:	460b      	mov	r3, r1
 800078e:	70fb      	strb	r3, [r7, #3]
    uint8_t response_data[CAN_DATA_RESPONSE_LEN];
    
    // Check length
    if (len > CAN_DATA_RESPONSE_LEN)
 8000790:	78fb      	ldrb	r3, [r7, #3]
 8000792:	2b08      	cmp	r3, #8
 8000794:	d901      	bls.n	800079a <CAN_SendDataResponse+0x16>
    {
        len = CAN_DATA_RESPONSE_LEN;
 8000796:	2308      	movs	r3, #8
 8000798:	70fb      	strb	r3, [r7, #3]
    }
    
    // Copy data
    memcpy(response_data, data, len);
 800079a:	78fa      	ldrb	r2, [r7, #3]
 800079c:	f107 0308 	add.w	r3, r7, #8
 80007a0:	6879      	ldr	r1, [r7, #4]
 80007a2:	4618      	mov	r0, r3
 80007a4:	f007 febb 	bl	800851e <memcpy>
    
    // If data is less than 8 bytes, fill with 0
    if (len < CAN_DATA_RESPONSE_LEN)
 80007a8:	78fb      	ldrb	r3, [r7, #3]
 80007aa:	2b07      	cmp	r3, #7
 80007ac:	d80a      	bhi.n	80007c4 <CAN_SendDataResponse+0x40>
    {
        memset(&response_data[len], 0, CAN_DATA_RESPONSE_LEN - len);
 80007ae:	78fb      	ldrb	r3, [r7, #3]
 80007b0:	f107 0208 	add.w	r2, r7, #8
 80007b4:	18d0      	adds	r0, r2, r3
 80007b6:	78fb      	ldrb	r3, [r7, #3]
 80007b8:	f1c3 0308 	rsb	r3, r3, #8
 80007bc:	461a      	mov	r2, r3
 80007be:	2100      	movs	r1, #0
 80007c0:	f007 fdd4 	bl	800836c <memset>
    }
    
    can_stats.data_resp_count++;
 80007c4:	4b08      	ldr	r3, [pc, #32]	@ (80007e8 <CAN_SendDataResponse+0x64>)
 80007c6:	695b      	ldr	r3, [r3, #20]
 80007c8:	3301      	adds	r3, #1
 80007ca:	4a07      	ldr	r2, [pc, #28]	@ (80007e8 <CAN_SendDataResponse+0x64>)
 80007cc:	6153      	str	r3, [r2, #20]
    
    return CAN_SendToWCMCU(CAN_DATA_RESPONSE_ID, response_data, CAN_DATA_RESPONSE_LEN);
 80007ce:	f107 0308 	add.w	r3, r7, #8
 80007d2:	2208      	movs	r2, #8
 80007d4:	4619      	mov	r1, r3
 80007d6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80007da:	f7ff ff63 	bl	80006a4 <CAN_SendToWCMCU>
 80007de:	4603      	mov	r3, r0
}
 80007e0:	4618      	mov	r0, r3
 80007e2:	3710      	adds	r7, #16
 80007e4:	46bd      	mov	sp, r7
 80007e6:	bd80      	pop	{r7, pc}
 80007e8:	20000120 	.word	0x20000120

080007ec <CAN_ProcessReceivedMessage>:
  * @param  header: Receive header
  * @param  data: Receive data
  * @retval None
  */
void CAN_ProcessReceivedMessage(CAN_RxHeaderTypeDef* header, uint8_t* data)
{
 80007ec:	b580      	push	{r7, lr}
 80007ee:	b084      	sub	sp, #16
 80007f0:	af00      	add	r7, sp, #0
 80007f2:	6078      	str	r0, [r7, #4]
 80007f4:	6039      	str	r1, [r7, #0]
    CAN_MessageType_t msg_type;
    
    // Update receive statistics
    CAN_UpdateRxStats();
 80007f6:	f000 fad9 	bl	8000dac <CAN_UpdateRxStats>
    can_stats.last_rx_time = CAN_GET_TIMESTAMP();
 80007fa:	f001 fa27 	bl	8001c4c <HAL_GetTick>
 80007fe:	4603      	mov	r3, r0
 8000800:	4a2d      	ldr	r2, [pc, #180]	@ (80008b8 <CAN_ProcessReceivedMessage+0xcc>)
 8000802:	61d3      	str	r3, [r2, #28]
    
    // Get message type
    msg_type = CAN_GetMessageType(header->StdId);
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4618      	mov	r0, r3
 800080a:	f000 f85b 	bl	80008c4 <CAN_GetMessageType>
 800080e:	4603      	mov	r3, r0
 8000810:	73fb      	strb	r3, [r7, #15]
    
    // Process according to message type
    switch(msg_type)
 8000812:	7bfb      	ldrb	r3, [r7, #15]
 8000814:	2b05      	cmp	r3, #5
 8000816:	d83f      	bhi.n	8000898 <CAN_ProcessReceivedMessage+0xac>
 8000818:	a201      	add	r2, pc, #4	@ (adr r2, 8000820 <CAN_ProcessReceivedMessage+0x34>)
 800081a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800081e:	bf00      	nop
 8000820:	08000839 	.word	0x08000839
 8000824:	08000849 	.word	0x08000849
 8000828:	08000859 	.word	0x08000859
 800082c:	08000869 	.word	0x08000869
 8000830:	08000879 	.word	0x08000879
 8000834:	08000889 	.word	0x08000889
    {
        case CAN_MSG_HEARTBEAT:
            CAN_ProcessHeartbeat(data, header->DLC);
 8000838:	687b      	ldr	r3, [r7, #4]
 800083a:	691b      	ldr	r3, [r3, #16]
 800083c:	b2db      	uxtb	r3, r3
 800083e:	4619      	mov	r1, r3
 8000840:	6838      	ldr	r0, [r7, #0]
 8000842:	f000 f88b 	bl	800095c <CAN_ProcessHeartbeat>
            break;
 8000846:	e028      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        case CAN_MSG_DATA_REQUEST:
            CAN_ProcessDataRequest(data, header->DLC);
 8000848:	687b      	ldr	r3, [r7, #4]
 800084a:	691b      	ldr	r3, [r3, #16]
 800084c:	b2db      	uxtb	r3, r3
 800084e:	4619      	mov	r1, r3
 8000850:	6838      	ldr	r0, [r7, #0]
 8000852:	f000 f8b5 	bl	80009c0 <CAN_ProcessDataRequest>
            break;
 8000856:	e020      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        case CAN_MSG_DATA_RESPONSE:
            CAN_ProcessDataResponse(data, header->DLC);
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	691b      	ldr	r3, [r3, #16]
 800085c:	b2db      	uxtb	r3, r3
 800085e:	4619      	mov	r1, r3
 8000860:	6838      	ldr	r0, [r7, #0]
 8000862:	f000 f919 	bl	8000a98 <CAN_ProcessDataResponse>
            break;
 8000866:	e018      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        case CAN_MSG_STATUS:
            CAN_ProcessStatusMessage(data, header->DLC);
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	691b      	ldr	r3, [r3, #16]
 800086c:	b2db      	uxtb	r3, r3
 800086e:	4619      	mov	r1, r3
 8000870:	6838      	ldr	r0, [r7, #0]
 8000872:	f000 f971 	bl	8000b58 <CAN_ProcessStatusMessage>
            break;
 8000876:	e010      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        case CAN_MSG_CONTROL:
            CAN_ProcessControlCommand(data, header->DLC);
 8000878:	687b      	ldr	r3, [r7, #4]
 800087a:	691b      	ldr	r3, [r3, #16]
 800087c:	b2db      	uxtb	r3, r3
 800087e:	4619      	mov	r1, r3
 8000880:	6838      	ldr	r0, [r7, #0]
 8000882:	f000 f997 	bl	8000bb4 <CAN_ProcessControlCommand>
            break;
 8000886:	e008      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        case CAN_MSG_ERROR:
            CAN_ProcessErrorMessage(data, header->DLC);
 8000888:	687b      	ldr	r3, [r7, #4]
 800088a:	691b      	ldr	r3, [r3, #16]
 800088c:	b2db      	uxtb	r3, r3
 800088e:	4619      	mov	r1, r3
 8000890:	6838      	ldr	r0, [r7, #0]
 8000892:	f000 f9cf 	bl	8000c34 <CAN_ProcessErrorMessage>
            break;
 8000896:	e000      	b.n	800089a <CAN_ProcessReceivedMessage+0xae>
            
        default:
            // CAN_DEBUG_PRINTF("Received unknown message type: ID=0x%03X\r\n", (unsigned int)header->StdId);
            break;
 8000898:	bf00      	nop
    }
    
    // Update node status
    if (msg_type != CAN_MSG_UNKNOWN)
 800089a:	7bfb      	ldrb	r3, [r7, #15]
 800089c:	2b06      	cmp	r3, #6
 800089e:	d007      	beq.n	80008b0 <CAN_ProcessReceivedMessage+0xc4>
    {
        wcmcu_status = CAN_NODE_ONLINE;
 80008a0:	4b06      	ldr	r3, [pc, #24]	@ (80008bc <CAN_ProcessReceivedMessage+0xd0>)
 80008a2:	2201      	movs	r2, #1
 80008a4:	701a      	strb	r2, [r3, #0]
        last_heartbeat_time = CAN_GET_TIMESTAMP();
 80008a6:	f001 f9d1 	bl	8001c4c <HAL_GetTick>
 80008aa:	4603      	mov	r3, r0
 80008ac:	4a04      	ldr	r2, [pc, #16]	@ (80008c0 <CAN_ProcessReceivedMessage+0xd4>)
 80008ae:	6013      	str	r3, [r2, #0]
    }
}
 80008b0:	bf00      	nop
 80008b2:	3710      	adds	r7, #16
 80008b4:	46bd      	mov	sp, r7
 80008b6:	bd80      	pop	{r7, pc}
 80008b8:	20000120 	.word	0x20000120
 80008bc:	20000140 	.word	0x20000140
 80008c0:	20000144 	.word	0x20000144

080008c4 <CAN_GetMessageType>:
  * @brief  Get message type
  * @param  id: Message ID
  * @retval Message type
  */
CAN_MessageType_t CAN_GetMessageType(uint32_t id)
{
 80008c4:	b480      	push	{r7}
 80008c6:	b083      	sub	sp, #12
 80008c8:	af00      	add	r7, sp, #0
 80008ca:	6078      	str	r0, [r7, #4]
    switch(id)
 80008cc:	687b      	ldr	r3, [r7, #4]
 80008ce:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80008d2:	d038      	beq.n	8000946 <CAN_GetMessageType+0x82>
 80008d4:	687b      	ldr	r3, [r7, #4]
 80008d6:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 80008da:	d838      	bhi.n	800094e <CAN_GetMessageType+0x8a>
 80008dc:	687b      	ldr	r3, [r7, #4]
 80008de:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80008e2:	d02e      	beq.n	8000942 <CAN_GetMessageType+0x7e>
 80008e4:	687b      	ldr	r3, [r7, #4]
 80008e6:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 80008ea:	d830      	bhi.n	800094e <CAN_GetMessageType+0x8a>
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	f240 4256 	movw	r2, #1110	@ 0x456
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d029      	beq.n	800094a <CAN_GetMessageType+0x86>
 80008f6:	687b      	ldr	r3, [r7, #4]
 80008f8:	f240 4256 	movw	r2, #1110	@ 0x456
 80008fc:	4293      	cmp	r3, r2
 80008fe:	d826      	bhi.n	800094e <CAN_GetMessageType+0x8a>
 8000900:	687b      	ldr	r3, [r7, #4]
 8000902:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000906:	d01a      	beq.n	800093e <CAN_GetMessageType+0x7a>
 8000908:	687b      	ldr	r3, [r7, #4]
 800090a:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800090e:	d81e      	bhi.n	800094e <CAN_GetMessageType+0x8a>
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000916:	d010      	beq.n	800093a <CAN_GetMessageType+0x76>
 8000918:	687b      	ldr	r3, [r7, #4]
 800091a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800091e:	d816      	bhi.n	800094e <CAN_GetMessageType+0x8a>
 8000920:	687b      	ldr	r3, [r7, #4]
 8000922:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000926:	d004      	beq.n	8000932 <CAN_GetMessageType+0x6e>
 8000928:	687b      	ldr	r3, [r7, #4]
 800092a:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800092e:	d002      	beq.n	8000936 <CAN_GetMessageType+0x72>
 8000930:	e00d      	b.n	800094e <CAN_GetMessageType+0x8a>
    {
        case CAN_HEARTBEAT_ID:
            return CAN_MSG_HEARTBEAT;
 8000932:	2300      	movs	r3, #0
 8000934:	e00c      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_DATA_REQUEST_ID:
            return CAN_MSG_DATA_REQUEST;
 8000936:	2301      	movs	r3, #1
 8000938:	e00a      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_DATA_RESPONSE_ID:
            return CAN_MSG_DATA_RESPONSE;
 800093a:	2302      	movs	r3, #2
 800093c:	e008      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_STATUS_ID:
            return CAN_MSG_STATUS;
 800093e:	2303      	movs	r3, #3
 8000940:	e006      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_CONTROL_ID:
            return CAN_MSG_CONTROL;
 8000942:	2304      	movs	r3, #4
 8000944:	e004      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_ERROR_ID:
            return CAN_MSG_ERROR;
 8000946:	2305      	movs	r3, #5
 8000948:	e002      	b.n	8000950 <CAN_GetMessageType+0x8c>
        case CAN_WCMCU_TO_STM32_ID:
            return CAN_MSG_DATA_RESPONSE;  // Data sent by WCMCU is treated as response
 800094a:	2302      	movs	r3, #2
 800094c:	e000      	b.n	8000950 <CAN_GetMessageType+0x8c>
        default:
            return CAN_MSG_UNKNOWN;
 800094e:	2306      	movs	r3, #6
    }
}
 8000950:	4618      	mov	r0, r3
 8000952:	370c      	adds	r7, #12
 8000954:	46bd      	mov	sp, r7
 8000956:	f85d 7b04 	ldr.w	r7, [sp], #4
 800095a:	4770      	bx	lr

0800095c <CAN_ProcessHeartbeat>:
  * @param  data: Message data
  * @param  len: Data length
  * @retval None
  */
void CAN_ProcessHeartbeat(uint8_t* data, uint8_t len)
{
 800095c:	b480      	push	{r7}
 800095e:	b085      	sub	sp, #20
 8000960:	af00      	add	r7, sp, #0
 8000962:	6078      	str	r0, [r7, #4]
 8000964:	460b      	mov	r3, r1
 8000966:	70fb      	strb	r3, [r7, #3]
    if (len >= 4)
 8000968:	78fb      	ldrb	r3, [r7, #3]
 800096a:	2b03      	cmp	r3, #3
 800096c:	d920      	bls.n	80009b0 <CAN_ProcessHeartbeat+0x54>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	781b      	ldrb	r3, [r3, #0]
 8000972:	b21b      	sxth	r3, r3
 8000974:	021b      	lsls	r3, r3, #8
 8000976:	b21a      	sxth	r2, r3
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	3301      	adds	r3, #1
 800097c:	781b      	ldrb	r3, [r3, #0]
 800097e:	b21b      	sxth	r3, r3
 8000980:	4313      	orrs	r3, r2
 8000982:	b21b      	sxth	r3, r3
 8000984:	81fb      	strh	r3, [r7, #14]
        uint16_t counter = (data[2] << 8) | data[3];
 8000986:	687b      	ldr	r3, [r7, #4]
 8000988:	3302      	adds	r3, #2
 800098a:	781b      	ldrb	r3, [r3, #0]
 800098c:	b21b      	sxth	r3, r3
 800098e:	021b      	lsls	r3, r3, #8
 8000990:	b21a      	sxth	r2, r3
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	3303      	adds	r3, #3
 8000996:	781b      	ldrb	r3, [r3, #0]
 8000998:	b21b      	sxth	r3, r3
 800099a:	4313      	orrs	r3, r2
 800099c:	b21b      	sxth	r3, r3
 800099e:	81bb      	strh	r3, [r7, #12]
        
        if (magic == CAN_HEARTBEAT_MAGIC)
 80009a0:	89fb      	ldrh	r3, [r7, #14]
 80009a2:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 80009a6:	4293      	cmp	r3, r2
 80009a8:	d102      	bne.n	80009b0 <CAN_ProcessHeartbeat+0x54>
        {
            // CAN_DEBUG_PRINTF("Received WCMCU heartbeat: counter=%d\r\n", counter);
            wcmcu_status = CAN_NODE_ONLINE;
 80009aa:	4b04      	ldr	r3, [pc, #16]	@ (80009bc <CAN_ProcessHeartbeat+0x60>)
 80009ac:	2201      	movs	r2, #1
 80009ae:	701a      	strb	r2, [r3, #0]
        else
        {
            // CAN_DEBUG_PRINTF("Heartbeat message magic number error: 0x%04X\r\n", magic);
        }
    }
}
 80009b0:	bf00      	nop
 80009b2:	3714      	adds	r7, #20
 80009b4:	46bd      	mov	sp, r7
 80009b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009ba:	4770      	bx	lr
 80009bc:	20000140 	.word	0x20000140

080009c0 <CAN_ProcessDataRequest>:
  * @param  data: Message data
  * @param  len: Data length
  * @retval None
  */
void CAN_ProcessDataRequest(uint8_t* data, uint8_t len)
{
 80009c0:	b580      	push	{r7, lr}
 80009c2:	b086      	sub	sp, #24
 80009c4:	af00      	add	r7, sp, #0
 80009c6:	6078      	str	r0, [r7, #4]
 80009c8:	460b      	mov	r3, r1
 80009ca:	70fb      	strb	r3, [r7, #3]
    if (len >= 2)
 80009cc:	78fb      	ldrb	r3, [r7, #3]
 80009ce:	2b01      	cmp	r3, #1
 80009d0:	d95a      	bls.n	8000a88 <CAN_ProcessDataRequest+0xc8>
    {
        uint8_t req_type = data[0];
 80009d2:	687b      	ldr	r3, [r7, #4]
 80009d4:	781b      	ldrb	r3, [r3, #0]
 80009d6:	75fb      	strb	r3, [r7, #23]
        uint8_t req_param = data[1];
 80009d8:	687b      	ldr	r3, [r7, #4]
 80009da:	785b      	ldrb	r3, [r3, #1]
 80009dc:	75bb      	strb	r3, [r7, #22]
        
        // CAN_DEBUG_PRINTF("Received data request: type=%d, param=%d\r\n", req_type, req_param);
        
        // Send response according to request type
        uint8_t response_data[8];
        switch(req_type)
 80009de:	7dfb      	ldrb	r3, [r7, #23]
 80009e0:	2b01      	cmp	r3, #1
 80009e2:	d002      	beq.n	80009ea <CAN_ProcessDataRequest+0x2a>
 80009e4:	2b02      	cmp	r3, #2
 80009e6:	d021      	beq.n	8000a2c <CAN_ProcessDataRequest+0x6c>
 80009e8:	e03b      	b.n	8000a62 <CAN_ProcessDataRequest+0xa2>
        {
            case 0x01:  // Request system status
                response_data[0] = 0x01;  // Response type
 80009ea:	2301      	movs	r3, #1
 80009ec:	723b      	strb	r3, [r7, #8]
                response_data[1] = (uint8_t)wcmcu_status;
 80009ee:	4b28      	ldr	r3, [pc, #160]	@ (8000a90 <CAN_ProcessDataRequest+0xd0>)
 80009f0:	781b      	ldrb	r3, [r3, #0]
 80009f2:	727b      	strb	r3, [r7, #9]
                response_data[2] = (can_stats.tx_count >> 8) & 0xFF;
 80009f4:	4b27      	ldr	r3, [pc, #156]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 80009f6:	681b      	ldr	r3, [r3, #0]
 80009f8:	0a1b      	lsrs	r3, r3, #8
 80009fa:	b2db      	uxtb	r3, r3
 80009fc:	72bb      	strb	r3, [r7, #10]
                response_data[3] = can_stats.tx_count & 0xFF;
 80009fe:	4b25      	ldr	r3, [pc, #148]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 8000a00:	681b      	ldr	r3, [r3, #0]
 8000a02:	b2db      	uxtb	r3, r3
 8000a04:	72fb      	strb	r3, [r7, #11]
                response_data[4] = (can_stats.rx_count >> 8) & 0xFF;
 8000a06:	4b23      	ldr	r3, [pc, #140]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 8000a08:	685b      	ldr	r3, [r3, #4]
 8000a0a:	0a1b      	lsrs	r3, r3, #8
 8000a0c:	b2db      	uxtb	r3, r3
 8000a0e:	733b      	strb	r3, [r7, #12]
                response_data[5] = can_stats.rx_count & 0xFF;
 8000a10:	4b20      	ldr	r3, [pc, #128]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 8000a12:	685b      	ldr	r3, [r3, #4]
 8000a14:	b2db      	uxtb	r3, r3
 8000a16:	737b      	strb	r3, [r7, #13]
                response_data[6] = (can_stats.error_count >> 8) & 0xFF;
 8000a18:	4b1e      	ldr	r3, [pc, #120]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 8000a1a:	689b      	ldr	r3, [r3, #8]
 8000a1c:	0a1b      	lsrs	r3, r3, #8
 8000a1e:	b2db      	uxtb	r3, r3
 8000a20:	73bb      	strb	r3, [r7, #14]
                response_data[7] = can_stats.error_count & 0xFF;
 8000a22:	4b1c      	ldr	r3, [pc, #112]	@ (8000a94 <CAN_ProcessDataRequest+0xd4>)
 8000a24:	689b      	ldr	r3, [r3, #8]
 8000a26:	b2db      	uxtb	r3, r3
 8000a28:	73fb      	strb	r3, [r7, #15]
                break;
 8000a2a:	e027      	b.n	8000a7c <CAN_ProcessDataRequest+0xbc>
                
            case 0x02:  // Request timestamp
                {
                    uint32_t timestamp = CAN_GET_TIMESTAMP();
 8000a2c:	f001 f90e 	bl	8001c4c <HAL_GetTick>
 8000a30:	6138      	str	r0, [r7, #16]
                    response_data[0] = 0x02;  // Response type
 8000a32:	2302      	movs	r3, #2
 8000a34:	723b      	strb	r3, [r7, #8]
                    response_data[1] = (timestamp >> 24) & 0xFF;
 8000a36:	693b      	ldr	r3, [r7, #16]
 8000a38:	0e1b      	lsrs	r3, r3, #24
 8000a3a:	b2db      	uxtb	r3, r3
 8000a3c:	727b      	strb	r3, [r7, #9]
                    response_data[2] = (timestamp >> 16) & 0xFF;
 8000a3e:	693b      	ldr	r3, [r7, #16]
 8000a40:	0c1b      	lsrs	r3, r3, #16
 8000a42:	b2db      	uxtb	r3, r3
 8000a44:	72bb      	strb	r3, [r7, #10]
                    response_data[3] = (timestamp >> 8) & 0xFF;
 8000a46:	693b      	ldr	r3, [r7, #16]
 8000a48:	0a1b      	lsrs	r3, r3, #8
 8000a4a:	b2db      	uxtb	r3, r3
 8000a4c:	72fb      	strb	r3, [r7, #11]
                    response_data[4] = timestamp & 0xFF;
 8000a4e:	693b      	ldr	r3, [r7, #16]
 8000a50:	b2db      	uxtb	r3, r3
 8000a52:	733b      	strb	r3, [r7, #12]
                    response_data[5] = 0x00;
 8000a54:	2300      	movs	r3, #0
 8000a56:	737b      	strb	r3, [r7, #13]
                    response_data[6] = 0x00;
 8000a58:	2300      	movs	r3, #0
 8000a5a:	73bb      	strb	r3, [r7, #14]
                    response_data[7] = 0x00;
 8000a5c:	2300      	movs	r3, #0
 8000a5e:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000a60:	e00c      	b.n	8000a7c <CAN_ProcessDataRequest+0xbc>
                
            default:
                response_data[0] = 0xFF;  // Unknown request
 8000a62:	23ff      	movs	r3, #255	@ 0xff
 8000a64:	723b      	strb	r3, [r7, #8]
                response_data[1] = req_type;
 8000a66:	7dfb      	ldrb	r3, [r7, #23]
 8000a68:	727b      	strb	r3, [r7, #9]
                memset(&response_data[2], 0, 6);
 8000a6a:	f107 0308 	add.w	r3, r7, #8
 8000a6e:	3302      	adds	r3, #2
 8000a70:	2206      	movs	r2, #6
 8000a72:	2100      	movs	r1, #0
 8000a74:	4618      	mov	r0, r3
 8000a76:	f007 fc79 	bl	800836c <memset>
                break;
 8000a7a:	bf00      	nop
        }
        
        CAN_SendDataResponse(response_data, 8);
 8000a7c:	f107 0308 	add.w	r3, r7, #8
 8000a80:	2108      	movs	r1, #8
 8000a82:	4618      	mov	r0, r3
 8000a84:	f7ff fe7e 	bl	8000784 <CAN_SendDataResponse>
    }
}
 8000a88:	bf00      	nop
 8000a8a:	3718      	adds	r7, #24
 8000a8c:	46bd      	mov	sp, r7
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	20000140 	.word	0x20000140
 8000a94:	20000120 	.word	0x20000120

08000a98 <CAN_ProcessDataResponse>:
  * @param  data: 消息数据
  * @param  len: Data length
  * @retval None
  */
void CAN_ProcessDataResponse(uint8_t* data, uint8_t len)
{
 8000a98:	b480      	push	{r7}
 8000a9a:	b087      	sub	sp, #28
 8000a9c:	af00      	add	r7, sp, #0
 8000a9e:	6078      	str	r0, [r7, #4]
 8000aa0:	460b      	mov	r3, r1
 8000aa2:	70fb      	strb	r3, [r7, #3]
    //     printf("%02X ", data[i]);
    // }
    // printf("\r\n");
    
    // Parse response data
    if (len >= 1)
 8000aa4:	78fb      	ldrb	r3, [r7, #3]
 8000aa6:	2b00      	cmp	r3, #0
 8000aa8:	d050      	beq.n	8000b4c <CAN_ProcessDataResponse+0xb4>
    {
        uint8_t resp_type = data[0];
 8000aaa:	687b      	ldr	r3, [r7, #4]
 8000aac:	781b      	ldrb	r3, [r3, #0]
 8000aae:	75fb      	strb	r3, [r7, #23]
        switch(resp_type)
 8000ab0:	7dfb      	ldrb	r3, [r7, #23]
 8000ab2:	2b01      	cmp	r3, #1
 8000ab4:	d002      	beq.n	8000abc <CAN_ProcessDataResponse+0x24>
 8000ab6:	2b02      	cmp	r3, #2
 8000ab8:	d02e      	beq.n	8000b18 <CAN_ProcessDataResponse+0x80>
                }
                break;
                
            default:
                // CAN_DEBUG_PRINTF("Unknown response type: %d\r\n", resp_type);
                break;
 8000aba:	e047      	b.n	8000b4c <CAN_ProcessDataResponse+0xb4>
                if (len >= 8)
 8000abc:	78fb      	ldrb	r3, [r7, #3]
 8000abe:	2b07      	cmp	r3, #7
 8000ac0:	d941      	bls.n	8000b46 <CAN_ProcessDataResponse+0xae>
                    uint8_t node_status = data[1];
 8000ac2:	687b      	ldr	r3, [r7, #4]
 8000ac4:	785b      	ldrb	r3, [r3, #1]
 8000ac6:	73fb      	strb	r3, [r7, #15]
                    uint16_t tx_count = (data[2] << 8) | data[3];
 8000ac8:	687b      	ldr	r3, [r7, #4]
 8000aca:	3302      	adds	r3, #2
 8000acc:	781b      	ldrb	r3, [r3, #0]
 8000ace:	b21b      	sxth	r3, r3
 8000ad0:	021b      	lsls	r3, r3, #8
 8000ad2:	b21a      	sxth	r2, r3
 8000ad4:	687b      	ldr	r3, [r7, #4]
 8000ad6:	3303      	adds	r3, #3
 8000ad8:	781b      	ldrb	r3, [r3, #0]
 8000ada:	b21b      	sxth	r3, r3
 8000adc:	4313      	orrs	r3, r2
 8000ade:	b21b      	sxth	r3, r3
 8000ae0:	81bb      	strh	r3, [r7, #12]
                    uint16_t rx_count = (data[4] << 8) | data[5];
 8000ae2:	687b      	ldr	r3, [r7, #4]
 8000ae4:	3304      	adds	r3, #4
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	b21b      	sxth	r3, r3
 8000aea:	021b      	lsls	r3, r3, #8
 8000aec:	b21a      	sxth	r2, r3
 8000aee:	687b      	ldr	r3, [r7, #4]
 8000af0:	3305      	adds	r3, #5
 8000af2:	781b      	ldrb	r3, [r3, #0]
 8000af4:	b21b      	sxth	r3, r3
 8000af6:	4313      	orrs	r3, r2
 8000af8:	b21b      	sxth	r3, r3
 8000afa:	817b      	strh	r3, [r7, #10]
                    uint16_t error_count = (data[6] << 8) | data[7];
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	3306      	adds	r3, #6
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	b21b      	sxth	r3, r3
 8000b04:	021b      	lsls	r3, r3, #8
 8000b06:	b21a      	sxth	r2, r3
 8000b08:	687b      	ldr	r3, [r7, #4]
 8000b0a:	3307      	adds	r3, #7
 8000b0c:	781b      	ldrb	r3, [r3, #0]
 8000b0e:	b21b      	sxth	r3, r3
 8000b10:	4313      	orrs	r3, r2
 8000b12:	b21b      	sxth	r3, r3
 8000b14:	813b      	strh	r3, [r7, #8]
                break;
 8000b16:	e016      	b.n	8000b46 <CAN_ProcessDataResponse+0xae>
                if (len >= 5)
 8000b18:	78fb      	ldrb	r3, [r7, #3]
 8000b1a:	2b04      	cmp	r3, #4
 8000b1c:	d915      	bls.n	8000b4a <CAN_ProcessDataResponse+0xb2>
                    uint32_t wcmcu_time = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
 8000b1e:	687b      	ldr	r3, [r7, #4]
 8000b20:	3301      	adds	r3, #1
 8000b22:	781b      	ldrb	r3, [r3, #0]
 8000b24:	061a      	lsls	r2, r3, #24
 8000b26:	687b      	ldr	r3, [r7, #4]
 8000b28:	3302      	adds	r3, #2
 8000b2a:	781b      	ldrb	r3, [r3, #0]
 8000b2c:	041b      	lsls	r3, r3, #16
 8000b2e:	431a      	orrs	r2, r3
 8000b30:	687b      	ldr	r3, [r7, #4]
 8000b32:	3303      	adds	r3, #3
 8000b34:	781b      	ldrb	r3, [r3, #0]
 8000b36:	021b      	lsls	r3, r3, #8
 8000b38:	4313      	orrs	r3, r2
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	3204      	adds	r2, #4
 8000b3e:	7812      	ldrb	r2, [r2, #0]
 8000b40:	4313      	orrs	r3, r2
 8000b42:	613b      	str	r3, [r7, #16]
                break;
 8000b44:	e001      	b.n	8000b4a <CAN_ProcessDataResponse+0xb2>
                break;
 8000b46:	bf00      	nop
 8000b48:	e000      	b.n	8000b4c <CAN_ProcessDataResponse+0xb4>
                break;
 8000b4a:	bf00      	nop
        }
    }
}
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b56:	4770      	bx	lr

08000b58 <CAN_ProcessStatusMessage>:
  * @param  data: 消息数据
  * @param  len: Data length
  * @retval None
  */
void CAN_ProcessStatusMessage(uint8_t* data, uint8_t len)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0
 8000b5e:	6078      	str	r0, [r7, #4]
 8000b60:	460b      	mov	r3, r1
 8000b62:	70fb      	strb	r3, [r7, #3]
    if (len >= 6)
 8000b64:	78fb      	ldrb	r3, [r7, #3]
 8000b66:	2b05      	cmp	r3, #5
 8000b68:	d91e      	bls.n	8000ba8 <CAN_ProcessStatusMessage+0x50>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 8000b6a:	687b      	ldr	r3, [r7, #4]
 8000b6c:	781b      	ldrb	r3, [r3, #0]
 8000b6e:	b21b      	sxth	r3, r3
 8000b70:	021b      	lsls	r3, r3, #8
 8000b72:	b21a      	sxth	r2, r3
 8000b74:	687b      	ldr	r3, [r7, #4]
 8000b76:	3301      	adds	r3, #1
 8000b78:	781b      	ldrb	r3, [r3, #0]
 8000b7a:	b21b      	sxth	r3, r3
 8000b7c:	4313      	orrs	r3, r2
 8000b7e:	b21b      	sxth	r3, r3
 8000b80:	81fb      	strh	r3, [r7, #14]
        uint8_t status = data[2];
 8000b82:	687b      	ldr	r3, [r7, #4]
 8000b84:	789b      	ldrb	r3, [r3, #2]
 8000b86:	737b      	strb	r3, [r7, #13]
        uint16_t counter = (data[3] << 8) | data[4];
 8000b88:	687b      	ldr	r3, [r7, #4]
 8000b8a:	3303      	adds	r3, #3
 8000b8c:	781b      	ldrb	r3, [r3, #0]
 8000b8e:	b21b      	sxth	r3, r3
 8000b90:	021b      	lsls	r3, r3, #8
 8000b92:	b21a      	sxth	r2, r3
 8000b94:	687b      	ldr	r3, [r7, #4]
 8000b96:	3304      	adds	r3, #4
 8000b98:	781b      	ldrb	r3, [r3, #0]
 8000b9a:	b21b      	sxth	r3, r3
 8000b9c:	4313      	orrs	r3, r2
 8000b9e:	b21b      	sxth	r3, r3
 8000ba0:	817b      	strh	r3, [r7, #10]
        uint8_t runtime = data[5];
 8000ba2:	687b      	ldr	r3, [r7, #4]
 8000ba4:	795b      	ldrb	r3, [r3, #5]
 8000ba6:	727b      	strb	r3, [r7, #9]
        {
            // CAN_DEBUG_PRINTF("WCMCU status: %d, counter: %d, runtime: %d seconds\r\n", 
            //                status, counter, runtime);
        }
    }
}
 8000ba8:	bf00      	nop
 8000baa:	3714      	adds	r7, #20
 8000bac:	46bd      	mov	sp, r7
 8000bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bb2:	4770      	bx	lr

08000bb4 <CAN_ProcessControlCommand>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessControlCommand(uint8_t* data, uint8_t len)
{
 8000bb4:	b580      	push	{r7, lr}
 8000bb6:	b084      	sub	sp, #16
 8000bb8:	af00      	add	r7, sp, #0
 8000bba:	6078      	str	r0, [r7, #4]
 8000bbc:	460b      	mov	r3, r1
 8000bbe:	70fb      	strb	r3, [r7, #3]
    if (len >= 4)
 8000bc0:	78fb      	ldrb	r3, [r7, #3]
 8000bc2:	2b03      	cmp	r3, #3
 8000bc4:	d931      	bls.n	8000c2a <CAN_ProcessControlCommand+0x76>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 8000bc6:	687b      	ldr	r3, [r7, #4]
 8000bc8:	781b      	ldrb	r3, [r3, #0]
 8000bca:	b21b      	sxth	r3, r3
 8000bcc:	021b      	lsls	r3, r3, #8
 8000bce:	b21a      	sxth	r2, r3
 8000bd0:	687b      	ldr	r3, [r7, #4]
 8000bd2:	3301      	adds	r3, #1
 8000bd4:	781b      	ldrb	r3, [r3, #0]
 8000bd6:	b21b      	sxth	r3, r3
 8000bd8:	4313      	orrs	r3, r2
 8000bda:	b21b      	sxth	r3, r3
 8000bdc:	81fb      	strh	r3, [r7, #14]
        uint16_t cmd = (data[2] << 8) | data[3];
 8000bde:	687b      	ldr	r3, [r7, #4]
 8000be0:	3302      	adds	r3, #2
 8000be2:	781b      	ldrb	r3, [r3, #0]
 8000be4:	b21b      	sxth	r3, r3
 8000be6:	021b      	lsls	r3, r3, #8
 8000be8:	b21a      	sxth	r2, r3
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	3303      	adds	r3, #3
 8000bee:	781b      	ldrb	r3, [r3, #0]
 8000bf0:	b21b      	sxth	r3, r3
 8000bf2:	4313      	orrs	r3, r2
 8000bf4:	b21b      	sxth	r3, r3
 8000bf6:	81bb      	strh	r3, [r7, #12]
        
        if (magic == CAN_CONTROL_MAGIC)
 8000bf8:	89fb      	ldrh	r3, [r7, #14]
 8000bfa:	f649 22bc 	movw	r2, #39612	@ 0x9abc
 8000bfe:	4293      	cmp	r3, r2
 8000c00:	d113      	bne.n	8000c2a <CAN_ProcessControlCommand+0x76>
        {
            // CAN_DEBUG_PRINTF("Received control command: 0x%04X\r\n", cmd);
            
            // Process control command
            switch(cmd)
 8000c02:	89bb      	ldrh	r3, [r7, #12]
 8000c04:	2b03      	cmp	r3, #3
 8000c06:	d00c      	beq.n	8000c22 <CAN_ProcessControlCommand+0x6e>
 8000c08:	2b03      	cmp	r3, #3
 8000c0a:	dc0d      	bgt.n	8000c28 <CAN_ProcessControlCommand+0x74>
 8000c0c:	2b01      	cmp	r3, #1
 8000c0e:	d002      	beq.n	8000c16 <CAN_ProcessControlCommand+0x62>
 8000c10:	2b02      	cmp	r3, #2
 8000c12:	d003      	beq.n	8000c1c <CAN_ProcessControlCommand+0x68>
                    CAN_PrintNodeStatus();
                    break;
                    
                default:
                    // CAN_DEBUG_PRINTF("Unknown control command: 0x%04X\r\n", cmd);
                    break;
 8000c14:	e008      	b.n	8000c28 <CAN_ProcessControlCommand+0x74>
                    CAN_ResetStats();
 8000c16:	f000 f827 	bl	8000c68 <CAN_ResetStats>
                    break;
 8000c1a:	e006      	b.n	8000c2a <CAN_ProcessControlCommand+0x76>
                    CAN_PrintStats();
 8000c1c:	f000 f844 	bl	8000ca8 <CAN_PrintStats>
                    break;
 8000c20:	e003      	b.n	8000c2a <CAN_ProcessControlCommand+0x76>
                    CAN_PrintNodeStatus();
 8000c22:	f000 f855 	bl	8000cd0 <CAN_PrintNodeStatus>
                    break;
 8000c26:	e000      	b.n	8000c2a <CAN_ProcessControlCommand+0x76>
                    break;
 8000c28:	bf00      	nop
            }
        }
    }
}
 8000c2a:	bf00      	nop
 8000c2c:	3710      	adds	r7, #16
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <CAN_ProcessErrorMessage>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessErrorMessage(uint8_t* data, uint8_t len)
{
 8000c34:	b480      	push	{r7}
 8000c36:	b085      	sub	sp, #20
 8000c38:	af00      	add	r7, sp, #0
 8000c3a:	6078      	str	r0, [r7, #4]
 8000c3c:	460b      	mov	r3, r1
 8000c3e:	70fb      	strb	r3, [r7, #3]
    if (len >= 3)
 8000c40:	78fb      	ldrb	r3, [r7, #3]
 8000c42:	2b02      	cmp	r3, #2
 8000c44:	d908      	bls.n	8000c58 <CAN_ProcessErrorMessage+0x24>
    {
        uint8_t error_code = data[1];
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	785b      	ldrb	r3, [r3, #1]
 8000c4a:	73fb      	strb	r3, [r7, #15]
        uint8_t error_data = data[2];
 8000c4c:	687b      	ldr	r3, [r7, #4]
 8000c4e:	789b      	ldrb	r3, [r3, #2]
 8000c50:	73bb      	strb	r3, [r7, #14]
        
        // CAN_DEBUG_PRINTF("Received error message: code=0x%02X, data=0x%02X\r\n", 
        //                error_code, error_data);
        
        // Update node status
        wcmcu_status = CAN_NODE_ERROR;
 8000c52:	4b04      	ldr	r3, [pc, #16]	@ (8000c64 <CAN_ProcessErrorMessage+0x30>)
 8000c54:	2202      	movs	r2, #2
 8000c56:	701a      	strb	r2, [r3, #0]
    }
}
 8000c58:	bf00      	nop
 8000c5a:	3714      	adds	r7, #20
 8000c5c:	46bd      	mov	sp, r7
 8000c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c62:	4770      	bx	lr
 8000c64:	20000140 	.word	0x20000140

08000c68 <CAN_ResetStats>:
/**
  * @brief  Reset statistics
  * @retval None
  */
void CAN_ResetStats(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
    memset(&can_stats, 0, sizeof(can_stats));
 8000c6c:	2220      	movs	r2, #32
 8000c6e:	2100      	movs	r1, #0
 8000c70:	4809      	ldr	r0, [pc, #36]	@ (8000c98 <CAN_ResetStats+0x30>)
 8000c72:	f007 fb7b 	bl	800836c <memset>
    can_stats.start_time = CAN_GET_TIMESTAMP();
 8000c76:	f000 ffe9 	bl	8001c4c <HAL_GetTick>
 8000c7a:	4603      	mov	r3, r0
 8000c7c:	4a06      	ldr	r2, [pc, #24]	@ (8000c98 <CAN_ResetStats+0x30>)
 8000c7e:	6193      	str	r3, [r2, #24]
    
    heartbeat_counter = 0;
 8000c80:	4b06      	ldr	r3, [pc, #24]	@ (8000c9c <CAN_ResetStats+0x34>)
 8000c82:	2200      	movs	r2, #0
 8000c84:	601a      	str	r2, [r3, #0]
    data_request_counter = 0;
 8000c86:	4b06      	ldr	r3, [pc, #24]	@ (8000ca0 <CAN_ResetStats+0x38>)
 8000c88:	2200      	movs	r2, #0
 8000c8a:	601a      	str	r2, [r3, #0]
    status_counter = 0;
 8000c8c:	4b05      	ldr	r3, [pc, #20]	@ (8000ca4 <CAN_ResetStats+0x3c>)
 8000c8e:	2200      	movs	r2, #0
 8000c90:	601a      	str	r2, [r3, #0]
    
    // CAN_DEBUG_PRINTF("Statistics have been reset\r\n");
}
 8000c92:	bf00      	nop
 8000c94:	bd80      	pop	{r7, pc}
 8000c96:	bf00      	nop
 8000c98:	20000120 	.word	0x20000120
 8000c9c:	2000014c 	.word	0x2000014c
 8000ca0:	20000150 	.word	0x20000150
 8000ca4:	20000154 	.word	0x20000154

08000ca8 <CAN_PrintStats>:
/**
  * @brief  Print statistics
  * @retval None
  */
void CAN_PrintStats(void)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b082      	sub	sp, #8
 8000cac:	af00      	add	r7, sp, #0
    uint32_t elapsed = CAN_GET_TIMESTAMP() - can_stats.start_time;
 8000cae:	f000 ffcd 	bl	8001c4c <HAL_GetTick>
 8000cb2:	4602      	mov	r2, r0
 8000cb4:	4b05      	ldr	r3, [pc, #20]	@ (8000ccc <CAN_PrintStats+0x24>)
 8000cb6:	699b      	ldr	r3, [r3, #24]
 8000cb8:	1ad3      	subs	r3, r2, r3
 8000cba:	607b      	str	r3, [r7, #4]
    float success_rate = CAN_GetSuccessRate();
 8000cbc:	f000 f818 	bl	8000cf0 <CAN_GetSuccessRate>
 8000cc0:	ed87 0a00 	vstr	s0, [r7]
    // printf("Data requests: %lu\r\n", can_stats.data_req_count);
    // printf("Data responses: %lu\r\n", can_stats.data_resp_count);
    // printf("Communication success rate: %.2f%%\r\n", success_rate);
    // printf("Last receive time: %lu ms\r\n", can_stats.last_rx_time);
    // printf("========================\r\n\r\n");
}
 8000cc4:	bf00      	nop
 8000cc6:	3708      	adds	r7, #8
 8000cc8:	46bd      	mov	sp, r7
 8000cca:	bd80      	pop	{r7, pc}
 8000ccc:	20000120 	.word	0x20000120

08000cd0 <CAN_PrintNodeStatus>:
/**
  * @brief  Print node status
  * @retval None
  */
void CAN_PrintNodeStatus(void)
{
 8000cd0:	b490      	push	{r4, r7}
 8000cd2:	b084      	sub	sp, #16
 8000cd4:	af00      	add	r7, sp, #0
    const char* status_str[] = {"Offline", "Online", "Error", "Timeout"};
 8000cd6:	4b05      	ldr	r3, [pc, #20]	@ (8000cec <CAN_PrintNodeStatus+0x1c>)
 8000cd8:	463c      	mov	r4, r7
 8000cda:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000cdc:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // printf("WCMCU-230 Status: %s\r\n", status_str[wcmcu_status]);
    // printf("Last heartbeat time: %lu ms\r\n", last_heartbeat_time);
    // printf("Last send time: %lu ms\r\n", last_send_time);
    // printf("Current time: %lu ms\r\n", CAN_GET_TIMESTAMP());
    // printf("==================\r\n\r\n");
}
 8000ce0:	bf00      	nop
 8000ce2:	3710      	adds	r7, #16
 8000ce4:	46bd      	mov	sp, r7
 8000ce6:	bc90      	pop	{r4, r7}
 8000ce8:	4770      	bx	lr
 8000cea:	bf00      	nop
 8000cec:	08009018 	.word	0x08009018

08000cf0 <CAN_GetSuccessRate>:
/**
  * @brief  Get communication success rate
  * @retval Success rate (percentage)
  */
float CAN_GetSuccessRate(void)
{
 8000cf0:	b480      	push	{r7}
 8000cf2:	af00      	add	r7, sp, #0
    if (can_stats.tx_count == 0)
 8000cf4:	4b0f      	ldr	r3, [pc, #60]	@ (8000d34 <CAN_GetSuccessRate+0x44>)
 8000cf6:	681b      	ldr	r3, [r3, #0]
 8000cf8:	2b00      	cmp	r3, #0
 8000cfa:	d102      	bne.n	8000d02 <CAN_GetSuccessRate+0x12>
    {
        return 0.0f;
 8000cfc:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8000d38 <CAN_GetSuccessRate+0x48>
 8000d00:	e011      	b.n	8000d26 <CAN_GetSuccessRate+0x36>
    }
    
    return (float)can_stats.rx_count / can_stats.tx_count * 100.0f;
 8000d02:	4b0c      	ldr	r3, [pc, #48]	@ (8000d34 <CAN_GetSuccessRate+0x44>)
 8000d04:	685b      	ldr	r3, [r3, #4]
 8000d06:	ee07 3a90 	vmov	s15, r3
 8000d0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000d0e:	4b09      	ldr	r3, [pc, #36]	@ (8000d34 <CAN_GetSuccessRate+0x44>)
 8000d10:	681b      	ldr	r3, [r3, #0]
 8000d12:	ee07 3a90 	vmov	s15, r3
 8000d16:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000d1a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000d1e:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000d3c <CAN_GetSuccessRate+0x4c>
 8000d22:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000d26:	eeb0 0a67 	vmov.f32	s0, s15
 8000d2a:	46bd      	mov	sp, r7
 8000d2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d30:	4770      	bx	lr
 8000d32:	bf00      	nop
 8000d34:	20000120 	.word	0x20000120
 8000d38:	00000000 	.word	0x00000000
 8000d3c:	42c80000 	.word	0x42c80000

08000d40 <CAN_ConfigFilter>:
/**
  * @brief  Configure CAN filter
  * @retval None
  */
static void CAN_ConfigFilter(void)
{
 8000d40:	b580      	push	{r7, lr}
 8000d42:	b08a      	sub	sp, #40	@ 0x28
 8000d44:	af00      	add	r7, sp, #0
    CAN_FilterTypeDef sFilterConfig;
    
    // Configure filter to accept all messages
    sFilterConfig.FilterBank = 0;
 8000d46:	2300      	movs	r3, #0
 8000d48:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 8000d4a:	2300      	movs	r3, #0
 8000d4c:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 8000d52:	2300      	movs	r3, #0
 8000d54:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 8000d56:	2300      	movs	r3, #0
 8000d58:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 8000d62:	2300      	movs	r3, #0
 8000d64:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 8000d66:	2301      	movs	r3, #1
 8000d68:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 8000d6a:	230e      	movs	r3, #14
 8000d6c:	627b      	str	r3, [r7, #36]	@ 0x24
    
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK)
 8000d6e:	463b      	mov	r3, r7
 8000d70:	4619      	mov	r1, r3
 8000d72:	4806      	ldr	r0, [pc, #24]	@ (8000d8c <CAN_ConfigFilter+0x4c>)
 8000d74:	f001 f872 	bl	8001e5c <HAL_CAN_ConfigFilter>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <CAN_ConfigFilter+0x42>
    {
        Error_Handler();
 8000d7e:	f000 fb7f 	bl	8001480 <Error_Handler>
    }
}
 8000d82:	bf00      	nop
 8000d84:	3728      	adds	r7, #40	@ 0x28
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
 8000d8a:	bf00      	nop
 8000d8c:	20000088 	.word	0x20000088

08000d90 <CAN_UpdateTxStats>:
/**
  * @brief  Update transmit statistics
  * @retval None
  */
static void CAN_UpdateTxStats(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
    can_stats.tx_count++;
 8000d94:	4b04      	ldr	r3, [pc, #16]	@ (8000da8 <CAN_UpdateTxStats+0x18>)
 8000d96:	681b      	ldr	r3, [r3, #0]
 8000d98:	3301      	adds	r3, #1
 8000d9a:	4a03      	ldr	r2, [pc, #12]	@ (8000da8 <CAN_UpdateTxStats+0x18>)
 8000d9c:	6013      	str	r3, [r2, #0]
}
 8000d9e:	bf00      	nop
 8000da0:	46bd      	mov	sp, r7
 8000da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da6:	4770      	bx	lr
 8000da8:	20000120 	.word	0x20000120

08000dac <CAN_UpdateRxStats>:
/**
  * @brief  Update receive statistics
  * @retval None
  */
static void CAN_UpdateRxStats(void)
{
 8000dac:	b480      	push	{r7}
 8000dae:	af00      	add	r7, sp, #0
    can_stats.rx_count++;
 8000db0:	4b04      	ldr	r3, [pc, #16]	@ (8000dc4 <CAN_UpdateRxStats+0x18>)
 8000db2:	685b      	ldr	r3, [r3, #4]
 8000db4:	3301      	adds	r3, #1
 8000db6:	4a03      	ldr	r2, [pc, #12]	@ (8000dc4 <CAN_UpdateRxStats+0x18>)
 8000db8:	6053      	str	r3, [r2, #4]
}
 8000dba:	bf00      	nop
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc2:	4770      	bx	lr
 8000dc4:	20000120 	.word	0x20000120

08000dc8 <CAN_UpdateErrorStats>:
/**
  * @brief  Update error statistics
  * @retval None
  */
static void CAN_UpdateErrorStats(void)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	af00      	add	r7, sp, #0
    can_stats.error_count++;
 8000dcc:	4b04      	ldr	r3, [pc, #16]	@ (8000de0 <CAN_UpdateErrorStats+0x18>)
 8000dce:	689b      	ldr	r3, [r3, #8]
 8000dd0:	3301      	adds	r3, #1
 8000dd2:	4a03      	ldr	r2, [pc, #12]	@ (8000de0 <CAN_UpdateErrorStats+0x18>)
 8000dd4:	6093      	str	r3, [r2, #8]
}
 8000dd6:	bf00      	nop
 8000dd8:	46bd      	mov	sp, r7
 8000dda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dde:	4770      	bx	lr
 8000de0:	20000120 	.word	0x20000120

08000de4 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  CAN receive FIFO0 message pending callback
  * @param  hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	b084      	sub	sp, #16
 8000de8:	af00      	add	r7, sp, #0
 8000dea:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
 8000dec:	687b      	ldr	r3, [r7, #4]
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a25      	ldr	r2, [pc, #148]	@ (8000e88 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000df2:	4293      	cmp	r3, r2
 8000df4:	d143      	bne.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
    {
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8000df6:	4b25      	ldr	r3, [pc, #148]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000df8:	4a25      	ldr	r2, [pc, #148]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000dfa:	2100      	movs	r1, #0
 8000dfc:	6878      	ldr	r0, [r7, #4]
 8000dfe:	f001 fa1f 	bl	8002240 <HAL_CAN_GetRxMessage>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d13a      	bne.n	8000e7e <HAL_CAN_RxFifo0MsgPendingCallback+0x9a>
        {
            // Print CAN1 received message
            printf("[CAN1-RX] ID:0x%03X, DLC:%d, Data:", (unsigned int)RxHeader.StdId, RxHeader.DLC);
 8000e08:	4b21      	ldr	r3, [pc, #132]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e0a:	681b      	ldr	r3, [r3, #0]
 8000e0c:	4a20      	ldr	r2, [pc, #128]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e0e:	6912      	ldr	r2, [r2, #16]
 8000e10:	4619      	mov	r1, r3
 8000e12:	4820      	ldr	r0, [pc, #128]	@ (8000e94 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8000e14:	f007 f95a 	bl	80080cc <iprintf>
            for (int i = 0; i < RxHeader.DLC && i < 8; i++) {
 8000e18:	2300      	movs	r3, #0
 8000e1a:	60fb      	str	r3, [r7, #12]
 8000e1c:	e01c      	b.n	8000e58 <HAL_CAN_RxFifo0MsgPendingCallback+0x74>
                if (i == RxHeader.DLC - 1 || i == 7) {
 8000e1e:	4b1c      	ldr	r3, [pc, #112]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e20:	691b      	ldr	r3, [r3, #16]
 8000e22:	1e5a      	subs	r2, r3, #1
 8000e24:	68fb      	ldr	r3, [r7, #12]
 8000e26:	429a      	cmp	r2, r3
 8000e28:	d002      	beq.n	8000e30 <HAL_CAN_RxFifo0MsgPendingCallback+0x4c>
 8000e2a:	68fb      	ldr	r3, [r7, #12]
 8000e2c:	2b07      	cmp	r3, #7
 8000e2e:	d108      	bne.n	8000e42 <HAL_CAN_RxFifo0MsgPendingCallback+0x5e>
                    printf("%02X", RxData[i]);  // 最后一个字节不加空格
 8000e30:	4a16      	ldr	r2, [pc, #88]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000e32:	68fb      	ldr	r3, [r7, #12]
 8000e34:	4413      	add	r3, r2
 8000e36:	781b      	ldrb	r3, [r3, #0]
 8000e38:	4619      	mov	r1, r3
 8000e3a:	4817      	ldr	r0, [pc, #92]	@ (8000e98 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8000e3c:	f007 f946 	bl	80080cc <iprintf>
 8000e40:	e007      	b.n	8000e52 <HAL_CAN_RxFifo0MsgPendingCallback+0x6e>
                } else {
                    printf("%02X ", RxData[i]); // 其他字节后面加空格
 8000e42:	4a12      	ldr	r2, [pc, #72]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000e44:	68fb      	ldr	r3, [r7, #12]
 8000e46:	4413      	add	r3, r2
 8000e48:	781b      	ldrb	r3, [r3, #0]
 8000e4a:	4619      	mov	r1, r3
 8000e4c:	4813      	ldr	r0, [pc, #76]	@ (8000e9c <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8000e4e:	f007 f93d 	bl	80080cc <iprintf>
            for (int i = 0; i < RxHeader.DLC && i < 8; i++) {
 8000e52:	68fb      	ldr	r3, [r7, #12]
 8000e54:	3301      	adds	r3, #1
 8000e56:	60fb      	str	r3, [r7, #12]
 8000e58:	4b0d      	ldr	r3, [pc, #52]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e5a:	691a      	ldr	r2, [r3, #16]
 8000e5c:	68fb      	ldr	r3, [r7, #12]
 8000e5e:	429a      	cmp	r2, r3
 8000e60:	d902      	bls.n	8000e68 <HAL_CAN_RxFifo0MsgPendingCallback+0x84>
 8000e62:	68fb      	ldr	r3, [r7, #12]
 8000e64:	2b07      	cmp	r3, #7
 8000e66:	ddda      	ble.n	8000e1e <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
                }
            }
            printf("\r\n");
 8000e68:	480d      	ldr	r0, [pc, #52]	@ (8000ea0 <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 8000e6a:	f007 f99f 	bl	80081ac <puts>
            
            // Process dual node communication message
            CAN_ProcessReceivedMessage(&RxHeader, RxData);
 8000e6e:	4907      	ldr	r1, [pc, #28]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000e70:	4807      	ldr	r0, [pc, #28]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e72:	f7ff fcbb 	bl	80007ec <CAN_ProcessReceivedMessage>
            
            // Process loop test message
            CAN_LoopTest_ProcessSTM32Message(&RxHeader, RxData);
 8000e76:	4905      	ldr	r1, [pc, #20]	@ (8000e8c <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8000e78:	4805      	ldr	r0, [pc, #20]	@ (8000e90 <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8000e7a:	f000 f847 	bl	8000f0c <CAN_LoopTest_ProcessSTM32Message>
    //     else
    //     {
    //         printf("[CAN2-IRQ] Failed to get message from FIFO0\r\n");
    //     }
    // }
}
 8000e7e:	bf00      	nop
 8000e80:	3710      	adds	r7, #16
 8000e82:	46bd      	mov	sp, r7
 8000e84:	bd80      	pop	{r7, pc}
 8000e86:	bf00      	nop
 8000e88:	40006400 	.word	0x40006400
 8000e8c:	20000114 	.word	0x20000114
 8000e90:	200000f0 	.word	0x200000f0
 8000e94:	0800905c 	.word	0x0800905c
 8000e98:	08009080 	.word	0x08009080
 8000e9c:	08008fec 	.word	0x08008fec
 8000ea0:	08008ff4 	.word	0x08008ff4

08000ea4 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  CAN transmit mailbox 0 complete callback
  * @param  hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ea4:	b480      	push	{r7}
 8000ea6:	b083      	sub	sp, #12
 8000ea8:	af00      	add	r7, sp, #0
 8000eaa:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // Transmission complete handling
    }
}
 8000eac:	bf00      	nop
 8000eae:	370c      	adds	r7, #12
 8000eb0:	46bd      	mov	sp, r7
 8000eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eb6:	4770      	bx	lr

08000eb8 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  CAN transmit mailbox 1 complete callback
  * @param  hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000eb8:	b480      	push	{r7}
 8000eba:	b083      	sub	sp, #12
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // Transmission complete handling
    }
}
 8000ec0:	bf00      	nop
 8000ec2:	370c      	adds	r7, #12
 8000ec4:	46bd      	mov	sp, r7
 8000ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eca:	4770      	bx	lr

08000ecc <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  CAN transmit mailbox 2 complete callback
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8000ecc:	b480      	push	{r7}
 8000ece:	b083      	sub	sp, #12
 8000ed0:	af00      	add	r7, sp, #0
 8000ed2:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // Transmission complete handling
    }
}
 8000ed4:	bf00      	nop
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ede:	4770      	bx	lr

08000ee0 <HAL_CAN_ErrorCallback>:
  * @brief  CAN error callback
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b084      	sub	sp, #16
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
 8000ee8:	687b      	ldr	r3, [r7, #4]
 8000eea:	681b      	ldr	r3, [r3, #0]
 8000eec:	4a06      	ldr	r2, [pc, #24]	@ (8000f08 <HAL_CAN_ErrorCallback+0x28>)
 8000eee:	4293      	cmp	r3, r2
 8000ef0:	d105      	bne.n	8000efe <HAL_CAN_ErrorCallback+0x1e>
    {
        uint32_t error_code = HAL_CAN_GetError(hcan);
 8000ef2:	6878      	ldr	r0, [r7, #4]
 8000ef4:	f001 fcf3 	bl	80028de <HAL_CAN_GetError>
 8000ef8:	60f8      	str	r0, [r7, #12]
        // CAN_DEBUG_PRINTF("CAN Error: 0x%08lX\r\n", error_code);
        CAN_UpdateErrorStats();
 8000efa:	f7ff ff65 	bl	8000dc8 <CAN_UpdateErrorStats>
    }
}
 8000efe:	bf00      	nop
 8000f00:	3710      	adds	r7, #16
 8000f02:	46bd      	mov	sp, r7
 8000f04:	bd80      	pop	{r7, pc}
 8000f06:	bf00      	nop
 8000f08:	40006400 	.word	0x40006400

08000f0c <CAN_LoopTest_ProcessSTM32Message>:
  * @param  header: 接收头
  * @param  data: 接收数据
  * @retval None
  */
void CAN_LoopTest_ProcessSTM32Message(CAN_RxHeaderTypeDef* header, uint8_t* data)
{
 8000f0c:	b580      	push	{r7, lr}
 8000f0e:	b084      	sub	sp, #16
 8000f10:	af00      	add	r7, sp, #0
 8000f12:	6078      	str	r0, [r7, #4]
 8000f14:	6039      	str	r1, [r7, #0]
    if (header->StdId == LOOP_TEST_ID && waiting_for_response)
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	681b      	ldr	r3, [r3, #0]
 8000f1a:	f240 1223 	movw	r2, #291	@ 0x123
 8000f1e:	4293      	cmp	r3, r2
 8000f20:	d116      	bne.n	8000f50 <CAN_LoopTest_ProcessSTM32Message+0x44>
 8000f22:	4b0d      	ldr	r3, [pc, #52]	@ (8000f58 <CAN_LoopTest_ProcessSTM32Message+0x4c>)
 8000f24:	781b      	ldrb	r3, [r3, #0]
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d012      	beq.n	8000f50 <CAN_LoopTest_ProcessSTM32Message+0x44>
    {
        uint32_t current_time = HAL_GetTick();
 8000f2a:	f000 fe8f 	bl	8001c4c <HAL_GetTick>
 8000f2e:	60f8      	str	r0, [r7, #12]
        uint32_t loop_time = current_time - last_send_time;
 8000f30:	4b0a      	ldr	r3, [pc, #40]	@ (8000f5c <CAN_LoopTest_ProcessSTM32Message+0x50>)
 8000f32:	681b      	ldr	r3, [r3, #0]
 8000f34:	68fa      	ldr	r2, [r7, #12]
 8000f36:	1ad3      	subs	r3, r2, r3
 8000f38:	60bb      	str	r3, [r7, #8]
        
        waiting_for_response = 0;
 8000f3a:	4b07      	ldr	r3, [pc, #28]	@ (8000f58 <CAN_LoopTest_ProcessSTM32Message+0x4c>)
 8000f3c:	2200      	movs	r2, #0
 8000f3e:	701a      	strb	r2, [r3, #0]
        successful_loops++;
 8000f40:	4b07      	ldr	r3, [pc, #28]	@ (8000f60 <CAN_LoopTest_ProcessSTM32Message+0x54>)
 8000f42:	681b      	ldr	r3, [r3, #0]
 8000f44:	3301      	adds	r3, #1
 8000f46:	4a06      	ldr	r2, [pc, #24]	@ (8000f60 <CAN_LoopTest_ProcessSTM32Message+0x54>)
 8000f48:	6013      	str	r3, [r2, #0]
        last_receive_time = current_time;
 8000f4a:	4a06      	ldr	r2, [pc, #24]	@ (8000f64 <CAN_LoopTest_ProcessSTM32Message+0x58>)
 8000f4c:	68fb      	ldr	r3, [r7, #12]
 8000f4e:	6013      	str	r3, [r2, #0]
        // {
        //     printf("%02X ", data[i]);
        // }
        // printf("\r\n\r\n");
    }
}
 8000f50:	bf00      	nop
 8000f52:	3710      	adds	r7, #16
 8000f54:	46bd      	mov	sp, r7
 8000f56:	bd80      	pop	{r7, pc}
 8000f58:	20000160 	.word	0x20000160
 8000f5c:	20000158 	.word	0x20000158
 8000f60:	20000164 	.word	0x20000164
 8000f64:	2000015c 	.word	0x2000015c

08000f68 <CAN_TriggerSend_Init>:
/**
  * @brief  初始化触发式CAN发送模块
  * @retval HAL状态
  */
HAL_StatusTypeDef CAN_TriggerSend_Init(void)
{
 8000f68:	b580      	push	{r7, lr}
 8000f6a:	b082      	sub	sp, #8
 8000f6c:	af00      	add	r7, sp, #0
    // 启动串口单字符中断接收
    HAL_StatusTypeDef uart_status = HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 8000f6e:	2201      	movs	r2, #1
 8000f70:	490a      	ldr	r1, [pc, #40]	@ (8000f9c <CAN_TriggerSend_Init+0x34>)
 8000f72:	480b      	ldr	r0, [pc, #44]	@ (8000fa0 <CAN_TriggerSend_Init+0x38>)
 8000f74:	f003 f9b9 	bl	80042ea <HAL_UART_Receive_IT>
 8000f78:	4603      	mov	r3, r0
 8000f7a:	71fb      	strb	r3, [r7, #7]
    
    if (uart_status != HAL_OK)
 8000f7c:	79fb      	ldrb	r3, [r7, #7]
 8000f7e:	2b00      	cmp	r3, #0
 8000f80:	d004      	beq.n	8000f8c <CAN_TriggerSend_Init+0x24>
    {
        printf("[CAN-TRIGGER] Failed to start UART RX interrupt\r\n");
 8000f82:	4808      	ldr	r0, [pc, #32]	@ (8000fa4 <CAN_TriggerSend_Init+0x3c>)
 8000f84:	f007 f912 	bl	80081ac <puts>
        return HAL_ERROR;
 8000f88:	2301      	movs	r3, #1
 8000f8a:	e003      	b.n	8000f94 <CAN_TriggerSend_Init+0x2c>
    }
    
    printf("[CAN-TRIGGER] Init success! Send '1', '2', '3' to trigger CAN messages\r\n");
 8000f8c:	4806      	ldr	r0, [pc, #24]	@ (8000fa8 <CAN_TriggerSend_Init+0x40>)
 8000f8e:	f007 f90d 	bl	80081ac <puts>
    
    return HAL_OK;
 8000f92:	2300      	movs	r3, #0
}
 8000f94:	4618      	mov	r0, r3
 8000f96:	3708      	adds	r7, #8
 8000f98:	46bd      	mov	sp, r7
 8000f9a:	bd80      	pop	{r7, pc}
 8000f9c:	20000168 	.word	0x20000168
 8000fa0:	20000224 	.word	0x20000224
 8000fa4:	08009088 	.word	0x08009088
 8000fa8:	080090bc 	.word	0x080090bc

08000fac <CAN_TriggerSend_Task>:
  * @brief  触发式CAN发送任务
  * @param  argument: 任务参数
  * @retval None
  */
void CAN_TriggerSend_Task(void *argument)
{
 8000fac:	b580      	push	{r7, lr}
 8000fae:	b082      	sub	sp, #8
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	6078      	str	r0, [r7, #4]
    while (1) {
        // 触发式发送任务，主要逻辑在串口中断回调中处理
        // 这里只需要保持任务运行
        osDelay(100);
 8000fb4:	2064      	movs	r0, #100	@ 0x64
 8000fb6:	f004 fa49 	bl	800544c <osDelay>
 8000fba:	e7fb      	b.n	8000fb4 <CAN_TriggerSend_Task+0x8>

08000fbc <CAN_TriggerSend_SendMessage1>:
  * @brief  发送CAN消息1 (ID: 0x100)
  * @param  None
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_TriggerSend_SendMessage1(void)
{
 8000fbc:	b580      	push	{r7, lr}
 8000fbe:	b082      	sub	sp, #8
 8000fc0:	af00      	add	r7, sp, #0
    uint8_t data[8] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fc2:	f240 2301 	movw	r3, #513	@ 0x201
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	2300      	movs	r3, #0
 8000fca:	607b      	str	r3, [r7, #4]
    return CAN_TriggerSend_SendMessage(CAN_TRIGGER_MESSAGE1_ID, data, 8);
 8000fcc:	463b      	mov	r3, r7
 8000fce:	2208      	movs	r2, #8
 8000fd0:	4619      	mov	r1, r3
 8000fd2:	f44f 7080 	mov.w	r0, #256	@ 0x100
 8000fd6:	f000 f82d 	bl	8001034 <CAN_TriggerSend_SendMessage>
 8000fda:	4603      	mov	r3, r0
}
 8000fdc:	4618      	mov	r0, r3
 8000fde:	3708      	adds	r7, #8
 8000fe0:	46bd      	mov	sp, r7
 8000fe2:	bd80      	pop	{r7, pc}

08000fe4 <CAN_TriggerSend_SendMessage2>:
  * @brief  发送CAN消息2 (ID: 0x200)
  * @param  None
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_TriggerSend_SendMessage2(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b082      	sub	sp, #8
 8000fe8:	af00      	add	r7, sp, #0
    uint8_t data[8] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8000fea:	f240 2301 	movw	r3, #513	@ 0x201
 8000fee:	603b      	str	r3, [r7, #0]
 8000ff0:	2300      	movs	r3, #0
 8000ff2:	607b      	str	r3, [r7, #4]
    return CAN_TriggerSend_SendMessage(CAN_TRIGGER_MESSAGE2_ID, data, 8);
 8000ff4:	463b      	mov	r3, r7
 8000ff6:	2208      	movs	r2, #8
 8000ff8:	4619      	mov	r1, r3
 8000ffa:	f44f 7000 	mov.w	r0, #512	@ 0x200
 8000ffe:	f000 f819 	bl	8001034 <CAN_TriggerSend_SendMessage>
 8001002:	4603      	mov	r3, r0
}
 8001004:	4618      	mov	r0, r3
 8001006:	3708      	adds	r7, #8
 8001008:	46bd      	mov	sp, r7
 800100a:	bd80      	pop	{r7, pc}

0800100c <CAN_TriggerSend_SendMessage3>:
  * @brief  发送CAN消息3 (ID: 0x300)
  * @param  None
  * @retval HAL_StatusTypeDef
  */
HAL_StatusTypeDef CAN_TriggerSend_SendMessage3(void)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b082      	sub	sp, #8
 8001010:	af00      	add	r7, sp, #0
    uint8_t data[8] = {0x01, 0x02, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00};
 8001012:	f240 2301 	movw	r3, #513	@ 0x201
 8001016:	603b      	str	r3, [r7, #0]
 8001018:	2300      	movs	r3, #0
 800101a:	607b      	str	r3, [r7, #4]
    return CAN_TriggerSend_SendMessage(CAN_TRIGGER_MESSAGE3_ID, data, 8);
 800101c:	463b      	mov	r3, r7
 800101e:	2208      	movs	r2, #8
 8001020:	4619      	mov	r1, r3
 8001022:	f44f 7040 	mov.w	r0, #768	@ 0x300
 8001026:	f000 f805 	bl	8001034 <CAN_TriggerSend_SendMessage>
 800102a:	4603      	mov	r3, r0
}
 800102c:	4618      	mov	r0, r3
 800102e:	3708      	adds	r7, #8
 8001030:	46bd      	mov	sp, r7
 8001032:	bd80      	pop	{r7, pc}

08001034 <CAN_TriggerSend_SendMessage>:
  * @param  data: 数据指针
  * @param  dlc: 数据长度
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_TriggerSend_SendMessage(uint32_t message_id, uint8_t* data, uint8_t dlc)
{
 8001034:	b580      	push	{r7, lr}
 8001036:	b08e      	sub	sp, #56	@ 0x38
 8001038:	af00      	add	r7, sp, #0
 800103a:	60f8      	str	r0, [r7, #12]
 800103c:	60b9      	str	r1, [r7, #8]
 800103e:	4613      	mov	r3, r2
 8001040:	71fb      	strb	r3, [r7, #7]
    CAN_TxHeaderTypeDef tx_header;
    uint32_t tx_mailbox;
    
    // 配置发送头
    tx_header.StdId = message_id;
 8001042:	68fb      	ldr	r3, [r7, #12]
 8001044:	61bb      	str	r3, [r7, #24]
    tx_header.ExtId = 0x00;
 8001046:	2300      	movs	r3, #0
 8001048:	61fb      	str	r3, [r7, #28]
    tx_header.RTR = CAN_RTR_DATA;
 800104a:	2300      	movs	r3, #0
 800104c:	627b      	str	r3, [r7, #36]	@ 0x24
    tx_header.IDE = CAN_ID_STD;
 800104e:	2300      	movs	r3, #0
 8001050:	623b      	str	r3, [r7, #32]
    tx_header.DLC = dlc;
 8001052:	79fb      	ldrb	r3, [r7, #7]
 8001054:	62bb      	str	r3, [r7, #40]	@ 0x28
    tx_header.TransmitGlobalTime = DISABLE;
 8001056:	2300      	movs	r3, #0
 8001058:	f887 302c 	strb.w	r3, [r7, #44]	@ 0x2c
    
    // 发送CAN消息
    HAL_StatusTypeDef status = HAL_CAN_AddTxMessage(&hcan1, &tx_header, data, &tx_mailbox);
 800105c:	f107 0314 	add.w	r3, r7, #20
 8001060:	f107 0118 	add.w	r1, r7, #24
 8001064:	68ba      	ldr	r2, [r7, #8]
 8001066:	481d      	ldr	r0, [pc, #116]	@ (80010dc <CAN_TriggerSend_SendMessage+0xa8>)
 8001068:	f001 f81a 	bl	80020a0 <HAL_CAN_AddTxMessage>
 800106c:	4603      	mov	r3, r0
 800106e:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
    
    if (status == HAL_OK)
 8001072:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8001076:	2b00      	cmp	r3, #0
 8001078:	d123      	bne.n	80010c2 <CAN_TriggerSend_SendMessage+0x8e>
    {
        // 按照用户要求的格式打印日志
        printf("[CAN1-TX] ID:0x%03X, DLC:%d, Data:", message_id, dlc);
 800107a:	79fb      	ldrb	r3, [r7, #7]
 800107c:	461a      	mov	r2, r3
 800107e:	68f9      	ldr	r1, [r7, #12]
 8001080:	4817      	ldr	r0, [pc, #92]	@ (80010e0 <CAN_TriggerSend_SendMessage+0xac>)
 8001082:	f007 f823 	bl	80080cc <iprintf>
        for (int i = 0; i < dlc; i++)
 8001086:	2300      	movs	r3, #0
 8001088:	637b      	str	r3, [r7, #52]	@ 0x34
 800108a:	e012      	b.n	80010b2 <CAN_TriggerSend_SendMessage+0x7e>
        {
            printf("%02X", data[i]);
 800108c:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800108e:	68ba      	ldr	r2, [r7, #8]
 8001090:	4413      	add	r3, r2
 8001092:	781b      	ldrb	r3, [r3, #0]
 8001094:	4619      	mov	r1, r3
 8001096:	4813      	ldr	r0, [pc, #76]	@ (80010e4 <CAN_TriggerSend_SendMessage+0xb0>)
 8001098:	f007 f818 	bl	80080cc <iprintf>
            if (i < dlc - 1) printf(" ");
 800109c:	79fb      	ldrb	r3, [r7, #7]
 800109e:	3b01      	subs	r3, #1
 80010a0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010a2:	429a      	cmp	r2, r3
 80010a4:	da02      	bge.n	80010ac <CAN_TriggerSend_SendMessage+0x78>
 80010a6:	2020      	movs	r0, #32
 80010a8:	f007 f822 	bl	80080f0 <putchar>
        for (int i = 0; i < dlc; i++)
 80010ac:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80010ae:	3301      	adds	r3, #1
 80010b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80010b2:	79fb      	ldrb	r3, [r7, #7]
 80010b4:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80010b6:	429a      	cmp	r2, r3
 80010b8:	dbe8      	blt.n	800108c <CAN_TriggerSend_SendMessage+0x58>
        }
        printf("\r\n");
 80010ba:	480b      	ldr	r0, [pc, #44]	@ (80010e8 <CAN_TriggerSend_SendMessage+0xb4>)
 80010bc:	f007 f876 	bl	80081ac <puts>
 80010c0:	e006      	b.n	80010d0 <CAN_TriggerSend_SendMessage+0x9c>
    }
    else
    {
        printf("[CAN1-ERROR] Failed to send message - ID:0x%03X, Error:%d\r\n", message_id, status);
 80010c2:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80010c6:	461a      	mov	r2, r3
 80010c8:	68f9      	ldr	r1, [r7, #12]
 80010ca:	4808      	ldr	r0, [pc, #32]	@ (80010ec <CAN_TriggerSend_SendMessage+0xb8>)
 80010cc:	f006 fffe 	bl	80080cc <iprintf>
    }
    
    return status;
 80010d0:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
}
 80010d4:	4618      	mov	r0, r3
 80010d6:	3738      	adds	r7, #56	@ 0x38
 80010d8:	46bd      	mov	sp, r7
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000088 	.word	0x20000088
 80010e0:	08009104 	.word	0x08009104
 80010e4:	08009128 	.word	0x08009128
 80010e8:	08009130 	.word	0x08009130
 80010ec:	08009134 	.word	0x08009134

080010f0 <CAN_TriggerSend_ProcessChar>:
  * @brief  处理串口接收到的字符
  * @param  received_char: 接收到的字符
  * @retval None
  */
static void CAN_TriggerSend_ProcessChar(uint8_t received_char)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	71fb      	strb	r3, [r7, #7]
    switch (received_char)
 80010fa:	79fb      	ldrb	r3, [r7, #7]
 80010fc:	2b33      	cmp	r3, #51	@ 0x33
 80010fe:	d00c      	beq.n	800111a <CAN_TriggerSend_ProcessChar+0x2a>
 8001100:	2b33      	cmp	r3, #51	@ 0x33
 8001102:	dc0d      	bgt.n	8001120 <CAN_TriggerSend_ProcessChar+0x30>
 8001104:	2b31      	cmp	r3, #49	@ 0x31
 8001106:	d002      	beq.n	800110e <CAN_TriggerSend_ProcessChar+0x1e>
 8001108:	2b32      	cmp	r3, #50	@ 0x32
 800110a:	d003      	beq.n	8001114 <CAN_TriggerSend_ProcessChar+0x24>
            CAN_TriggerSend_SendMessage3();
            break;
            
        default:
            // 忽略其他字符
            break;
 800110c:	e008      	b.n	8001120 <CAN_TriggerSend_ProcessChar+0x30>
            CAN_TriggerSend_SendMessage1();
 800110e:	f7ff ff55 	bl	8000fbc <CAN_TriggerSend_SendMessage1>
            break;
 8001112:	e006      	b.n	8001122 <CAN_TriggerSend_ProcessChar+0x32>
            CAN_TriggerSend_SendMessage2();
 8001114:	f7ff ff66 	bl	8000fe4 <CAN_TriggerSend_SendMessage2>
            break;
 8001118:	e003      	b.n	8001122 <CAN_TriggerSend_ProcessChar+0x32>
            CAN_TriggerSend_SendMessage3();
 800111a:	f7ff ff77 	bl	800100c <CAN_TriggerSend_SendMessage3>
            break;
 800111e:	e000      	b.n	8001122 <CAN_TriggerSend_ProcessChar+0x32>
            break;
 8001120:	bf00      	nop
    }
}
 8001122:	bf00      	nop
 8001124:	3708      	adds	r7, #8
 8001126:	46bd      	mov	sp, r7
 8001128:	bd80      	pop	{r7, pc}
	...

0800112c <HAL_UART_RxCpltCallback>:
  * @brief  串口接收完成回调函数
  * @param  huart: UART句柄
  * @retval None
  */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800112c:	b580      	push	{r7, lr}
 800112e:	b082      	sub	sp, #8
 8001130:	af00      	add	r7, sp, #0
 8001132:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2)
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4a08      	ldr	r2, [pc, #32]	@ (800115c <HAL_UART_RxCpltCallback+0x30>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d109      	bne.n	8001152 <HAL_UART_RxCpltCallback+0x26>
    {
        // 处理接收到的字符
        CAN_TriggerSend_ProcessChar(uart_rx_char);
 800113e:	4b08      	ldr	r3, [pc, #32]	@ (8001160 <HAL_UART_RxCpltCallback+0x34>)
 8001140:	781b      	ldrb	r3, [r3, #0]
 8001142:	4618      	mov	r0, r3
 8001144:	f7ff ffd4 	bl	80010f0 <CAN_TriggerSend_ProcessChar>
        
        // 重新启动单字符接收
        HAL_UART_Receive_IT(&huart2, &uart_rx_char, 1);
 8001148:	2201      	movs	r2, #1
 800114a:	4905      	ldr	r1, [pc, #20]	@ (8001160 <HAL_UART_RxCpltCallback+0x34>)
 800114c:	4805      	ldr	r0, [pc, #20]	@ (8001164 <HAL_UART_RxCpltCallback+0x38>)
 800114e:	f003 f8cc 	bl	80042ea <HAL_UART_Receive_IT>
    }
 8001152:	bf00      	nop
 8001154:	3708      	adds	r7, #8
 8001156:	46bd      	mov	sp, r7
 8001158:	bd80      	pop	{r7, pc}
 800115a:	bf00      	nop
 800115c:	40004400 	.word	0x40004400
 8001160:	20000168 	.word	0x20000168
 8001164:	20000224 	.word	0x20000224

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116c:	f000 fd38 	bl	8001be0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001170:	f000 f868 	bl	8001244 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001174:	f000 f906 	bl	8001384 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001178:	f000 f8ce 	bl	8001318 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 800117c:	f000 fcdc 	bl	8001b38 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001180:	f7ff fa0c 	bl	800059c <MX_CAN1_Init>
  // MX_CAN2_Init();  // 禁用CAN2初始化
  /* USER CODE BEGIN 2 */
  // Initialize CAN1 Dual Node (接收功能)
  if (CAN_DualNode_Init() == HAL_OK) {
 8001184:	f7ff fa4c 	bl	8000620 <CAN_DualNode_Init>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d103      	bne.n	8001196 <main+0x2e>
    printf("[CAN1] Dual Node initialized - Ready to receive CAN messages\r\n");
 800118e:	481e      	ldr	r0, [pc, #120]	@ (8001208 <main+0xa0>)
 8001190:	f007 f80c 	bl	80081ac <puts>
 8001194:	e004      	b.n	80011a0 <main+0x38>
  } else {
    printf("[CAN1] Dual Node initialization failed!\r\n");
 8001196:	481d      	ldr	r0, [pc, #116]	@ (800120c <main+0xa4>)
 8001198:	f007 f808 	bl	80081ac <puts>
    Error_Handler();
 800119c:	f000 f970 	bl	8001480 <Error_Handler>
  }
  
  // Initialize CAN1 Trigger Send Module
  if (CAN_TriggerSend_Init() == HAL_OK) {
 80011a0:	f7ff fee2 	bl	8000f68 <CAN_TriggerSend_Init>
 80011a4:	4603      	mov	r3, r0
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d103      	bne.n	80011b2 <main+0x4a>
    printf("[CAN1] Trigger Send initialized - Send '1', '2', '3' to trigger messages\r\n");
 80011aa:	4819      	ldr	r0, [pc, #100]	@ (8001210 <main+0xa8>)
 80011ac:	f006 fffe 	bl	80081ac <puts>
 80011b0:	e004      	b.n	80011bc <main+0x54>
  } else {
    printf("[CAN1] Trigger send initialization failed!\r\n");
 80011b2:	4818      	ldr	r0, [pc, #96]	@ (8001214 <main+0xac>)
 80011b4:	f006 fffa 	bl	80081ac <puts>
    Error_Handler();
 80011b8:	f000 f962 	bl	8001480 <Error_Handler>
  }
  */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80011bc:	f004 f86a 	bl	8005294 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 80011c0:	4a15      	ldr	r2, [pc, #84]	@ (8001218 <main+0xb0>)
 80011c2:	210d      	movs	r1, #13
 80011c4:	200a      	movs	r0, #10
 80011c6:	f004 f95c 	bl	8005482 <osMessageQueueNew>
 80011ca:	4603      	mov	r3, r0
 80011cc:	4a13      	ldr	r2, [pc, #76]	@ (800121c <main+0xb4>)
 80011ce:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 80011d0:	4a13      	ldr	r2, [pc, #76]	@ (8001220 <main+0xb8>)
 80011d2:	2100      	movs	r1, #0
 80011d4:	4813      	ldr	r0, [pc, #76]	@ (8001224 <main+0xbc>)
 80011d6:	f004 f8a7 	bl	8005328 <osThreadNew>
 80011da:	4603      	mov	r3, r0
 80011dc:	4a12      	ldr	r2, [pc, #72]	@ (8001228 <main+0xc0>)
 80011de:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 80011e0:	4a12      	ldr	r2, [pc, #72]	@ (800122c <main+0xc4>)
 80011e2:	2100      	movs	r1, #0
 80011e4:	4812      	ldr	r0, [pc, #72]	@ (8001230 <main+0xc8>)
 80011e6:	f004 f89f 	bl	8005328 <osThreadNew>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4a11      	ldr	r2, [pc, #68]	@ (8001234 <main+0xcc>)
 80011ee:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 80011f0:	4a11      	ldr	r2, [pc, #68]	@ (8001238 <main+0xd0>)
 80011f2:	2100      	movs	r1, #0
 80011f4:	4811      	ldr	r0, [pc, #68]	@ (800123c <main+0xd4>)
 80011f6:	f004 f897 	bl	8005328 <osThreadNew>
 80011fa:	4603      	mov	r3, r0
 80011fc:	4a10      	ldr	r2, [pc, #64]	@ (8001240 <main+0xd8>)
 80011fe:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001200:	f004 f86c 	bl	80052dc <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001204:	bf00      	nop
 8001206:	e7fd      	b.n	8001204 <main+0x9c>
 8001208:	080091a4 	.word	0x080091a4
 800120c:	080091e4 	.word	0x080091e4
 8001210:	08009210 	.word	0x08009210
 8001214:	0800925c 	.word	0x0800925c
 8001218:	0800930c 	.word	0x0800930c
 800121c:	200001d0 	.word	0x200001d0
 8001220:	080092a0 	.word	0x080092a0
 8001224:	0800141d 	.word	0x0800141d
 8001228:	200001c4 	.word	0x200001c4
 800122c:	080092c4 	.word	0x080092c4
 8001230:	0800142f 	.word	0x0800142f
 8001234:	200001c8 	.word	0x200001c8
 8001238:	080092e8 	.word	0x080092e8
 800123c:	08001445 	.word	0x08001445
 8001240:	200001cc 	.word	0x200001cc

08001244 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	b094      	sub	sp, #80	@ 0x50
 8001248:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800124a:	f107 0320 	add.w	r3, r7, #32
 800124e:	2230      	movs	r2, #48	@ 0x30
 8001250:	2100      	movs	r1, #0
 8001252:	4618      	mov	r0, r3
 8001254:	f007 f88a 	bl	800836c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001258:	f107 030c 	add.w	r3, r7, #12
 800125c:	2200      	movs	r2, #0
 800125e:	601a      	str	r2, [r3, #0]
 8001260:	605a      	str	r2, [r3, #4]
 8001262:	609a      	str	r2, [r3, #8]
 8001264:	60da      	str	r2, [r3, #12]
 8001266:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001268:	2300      	movs	r3, #0
 800126a:	60bb      	str	r3, [r7, #8]
 800126c:	4b28      	ldr	r3, [pc, #160]	@ (8001310 <SystemClock_Config+0xcc>)
 800126e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001270:	4a27      	ldr	r2, [pc, #156]	@ (8001310 <SystemClock_Config+0xcc>)
 8001272:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001276:	6413      	str	r3, [r2, #64]	@ 0x40
 8001278:	4b25      	ldr	r3, [pc, #148]	@ (8001310 <SystemClock_Config+0xcc>)
 800127a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800127c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001280:	60bb      	str	r3, [r7, #8]
 8001282:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001284:	2300      	movs	r3, #0
 8001286:	607b      	str	r3, [r7, #4]
 8001288:	4b22      	ldr	r3, [pc, #136]	@ (8001314 <SystemClock_Config+0xd0>)
 800128a:	681b      	ldr	r3, [r3, #0]
 800128c:	4a21      	ldr	r2, [pc, #132]	@ (8001314 <SystemClock_Config+0xd0>)
 800128e:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001292:	6013      	str	r3, [r2, #0]
 8001294:	4b1f      	ldr	r3, [pc, #124]	@ (8001314 <SystemClock_Config+0xd0>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800129c:	607b      	str	r3, [r7, #4]
 800129e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80012a0:	2301      	movs	r3, #1
 80012a2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80012a4:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 80012a8:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012aa:	2302      	movs	r3, #2
 80012ac:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80012ae:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 80012b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80012b4:	2308      	movs	r3, #8
 80012b6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80012b8:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 80012bc:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80012be:	2302      	movs	r3, #2
 80012c0:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80012c2:	2304      	movs	r3, #4
 80012c4:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012c6:	f107 0320 	add.w	r3, r7, #32
 80012ca:	4618      	mov	r0, r3
 80012cc:	f001 fe24 	bl	8002f18 <HAL_RCC_OscConfig>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <SystemClock_Config+0x96>
  {
    Error_Handler();
 80012d6:	f000 f8d3 	bl	8001480 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80012da:	230f      	movs	r3, #15
 80012dc:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80012de:	2302      	movs	r3, #2
 80012e0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80012e2:	2300      	movs	r3, #0
 80012e4:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80012e6:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80012ea:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80012ec:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80012f0:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80012f2:	f107 030c 	add.w	r3, r7, #12
 80012f6:	2105      	movs	r1, #5
 80012f8:	4618      	mov	r0, r3
 80012fa:	f002 f885 	bl	8003408 <HAL_RCC_ClockConfig>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d001      	beq.n	8001308 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8001304:	f000 f8bc 	bl	8001480 <Error_Handler>
  }
}
 8001308:	bf00      	nop
 800130a:	3750      	adds	r7, #80	@ 0x50
 800130c:	46bd      	mov	sp, r7
 800130e:	bd80      	pop	{r7, pc}
 8001310:	40023800 	.word	0x40023800
 8001314:	40007000 	.word	0x40007000

08001318 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001318:	b580      	push	{r7, lr}
 800131a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800131c:	4b17      	ldr	r3, [pc, #92]	@ (800137c <MX_SPI1_Init+0x64>)
 800131e:	4a18      	ldr	r2, [pc, #96]	@ (8001380 <MX_SPI1_Init+0x68>)
 8001320:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001322:	4b16      	ldr	r3, [pc, #88]	@ (800137c <MX_SPI1_Init+0x64>)
 8001324:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001328:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800132a:	4b14      	ldr	r3, [pc, #80]	@ (800137c <MX_SPI1_Init+0x64>)
 800132c:	2200      	movs	r2, #0
 800132e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001330:	4b12      	ldr	r3, [pc, #72]	@ (800137c <MX_SPI1_Init+0x64>)
 8001332:	2200      	movs	r2, #0
 8001334:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001336:	4b11      	ldr	r3, [pc, #68]	@ (800137c <MX_SPI1_Init+0x64>)
 8001338:	2200      	movs	r2, #0
 800133a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800133c:	4b0f      	ldr	r3, [pc, #60]	@ (800137c <MX_SPI1_Init+0x64>)
 800133e:	2200      	movs	r2, #0
 8001340:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001342:	4b0e      	ldr	r3, [pc, #56]	@ (800137c <MX_SPI1_Init+0x64>)
 8001344:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001348:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 800134a:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <MX_SPI1_Init+0x64>)
 800134c:	2220      	movs	r2, #32
 800134e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <MX_SPI1_Init+0x64>)
 8001352:	2200      	movs	r2, #0
 8001354:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001356:	4b09      	ldr	r3, [pc, #36]	@ (800137c <MX_SPI1_Init+0x64>)
 8001358:	2200      	movs	r2, #0
 800135a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800135c:	4b07      	ldr	r3, [pc, #28]	@ (800137c <MX_SPI1_Init+0x64>)
 800135e:	2200      	movs	r2, #0
 8001360:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <MX_SPI1_Init+0x64>)
 8001364:	220a      	movs	r2, #10
 8001366:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001368:	4804      	ldr	r0, [pc, #16]	@ (800137c <MX_SPI1_Init+0x64>)
 800136a:	f002 fa9f 	bl	80038ac <HAL_SPI_Init>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001374:	f000 f884 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001378:	bf00      	nop
 800137a:	bd80      	pop	{r7, pc}
 800137c:	2000016c 	.word	0x2000016c
 8001380:	40013000 	.word	0x40013000

08001384 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001384:	b480      	push	{r7}
 8001386:	b085      	sub	sp, #20
 8001388:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800138a:	2300      	movs	r3, #0
 800138c:	60fb      	str	r3, [r7, #12]
 800138e:	4b17      	ldr	r3, [pc, #92]	@ (80013ec <MX_GPIO_Init+0x68>)
 8001390:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001392:	4a16      	ldr	r2, [pc, #88]	@ (80013ec <MX_GPIO_Init+0x68>)
 8001394:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001398:	6313      	str	r3, [r2, #48]	@ 0x30
 800139a:	4b14      	ldr	r3, [pc, #80]	@ (80013ec <MX_GPIO_Init+0x68>)
 800139c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800139e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80013a2:	60fb      	str	r3, [r7, #12]
 80013a4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013a6:	2300      	movs	r3, #0
 80013a8:	60bb      	str	r3, [r7, #8]
 80013aa:	4b10      	ldr	r3, [pc, #64]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013ac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ae:	4a0f      	ldr	r2, [pc, #60]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013b0:	f043 0301 	orr.w	r3, r3, #1
 80013b4:	6313      	str	r3, [r2, #48]	@ 0x30
 80013b6:	4b0d      	ldr	r3, [pc, #52]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013b8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	60bb      	str	r3, [r7, #8]
 80013c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013c2:	2300      	movs	r3, #0
 80013c4:	607b      	str	r3, [r7, #4]
 80013c6:	4b09      	ldr	r3, [pc, #36]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013c8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013ca:	4a08      	ldr	r2, [pc, #32]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013cc:	f043 0302 	orr.w	r3, r3, #2
 80013d0:	6313      	str	r3, [r2, #48]	@ 0x30
 80013d2:	4b06      	ldr	r3, [pc, #24]	@ (80013ec <MX_GPIO_Init+0x68>)
 80013d4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80013d6:	f003 0302 	and.w	r3, r3, #2
 80013da:	607b      	str	r3, [r7, #4]
 80013dc:	687b      	ldr	r3, [r7, #4]
  // MCP2515 related GPIO initialization code is commented - hardware removed
  // Set MCP2515 CS pin to high level (deselected state)
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
  */
  /* USER CODE END MX_GPIO_Init_2 */
}
 80013de:	bf00      	nop
 80013e0:	3714      	adds	r7, #20
 80013e2:	46bd      	mov	sp, r7
 80013e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013e8:	4770      	bx	lr
 80013ea:	bf00      	nop
 80013ec:	40023800 	.word	0x40023800

080013f0 <_write>:
  * @param  ptr: Data pointer
  * @param  len: Data length
  * @retval Number of bytes sent
  */
int _write(int file, char *ptr, int len)
{
 80013f0:	b580      	push	{r7, lr}
 80013f2:	b084      	sub	sp, #16
 80013f4:	af00      	add	r7, sp, #0
 80013f6:	60f8      	str	r0, [r7, #12]
 80013f8:	60b9      	str	r1, [r7, #8]
 80013fa:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	b29a      	uxth	r2, r3
 8001400:	f04f 33ff 	mov.w	r3, #4294967295
 8001404:	68b9      	ldr	r1, [r7, #8]
 8001406:	4804      	ldr	r0, [pc, #16]	@ (8001418 <_write+0x28>)
 8001408:	f002 fee4 	bl	80041d4 <HAL_UART_Transmit>
  return len;
 800140c:	687b      	ldr	r3, [r7, #4]
}
 800140e:	4618      	mov	r0, r3
 8001410:	3710      	adds	r7, #16
 8001412:	46bd      	mov	sp, r7
 8001414:	bd80      	pop	{r7, pc}
 8001416:	bf00      	nop
 8001418:	20000224 	.word	0x20000224

0800141c <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b082      	sub	sp, #8
 8001420:	af00      	add	r7, sp, #0
 8001422:	6078      	str	r0, [r7, #4]
    // uint32_t can2_state = HAL_CAN_GetState(&hcan2);
    // printf("CAN2 State: %lu\r\n", can2_state);
    
    // printf("\r\n");
    
    osDelay(10000);  // 10 second delay
 8001424:	f242 7010 	movw	r0, #10000	@ 0x2710
 8001428:	f004 f810 	bl	800544c <osDelay>
 800142c:	e7fa      	b.n	8001424 <StartDefaultTask+0x8>

0800142e <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 800142e:	b580      	push	{r7, lr}
 8001430:	b082      	sub	sp, #8
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  /* CAN1 trigger send task - UART command triggered CAN sending */
  CAN_TriggerSend_Task(argument);  // Trigger-based CAN1 message sending
 8001436:	6878      	ldr	r0, [r7, #4]
 8001438:	f7ff fdb8 	bl	8000fac <CAN_TriggerSend_Task>
  /* USER CODE END StartCANSendTask */
}
 800143c:	bf00      	nop
 800143e:	3708      	adds	r7, #8
 8001440:	46bd      	mov	sp, r7
 8001442:	bd80      	pop	{r7, pc}

08001444 <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b082      	sub	sp, #8
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    // Enable CAN2 task for status monitoring and hardware connection testing
    CAN2_Demo_Task(argument);  // Re-enabled - for status monitoring and connection testing
 800144c:	6878      	ldr	r0, [r7, #4]
 800144e:	f7ff f8db 	bl	8000608 <CAN2_Demo_Task>
    // CAN2_Test_Task();          // Keep disabled - CAN2 receive only
    
    osDelay(10);  // Reduce delay to ensure tasks run normally
 8001452:	200a      	movs	r0, #10
 8001454:	f003 fffa 	bl	800544c <osDelay>
    CAN2_Demo_Task(argument);  // Re-enabled - for status monitoring and connection testing
 8001458:	bf00      	nop
 800145a:	e7f7      	b.n	800144c <StartCANReceiveTask+0x8>

0800145c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800145c:	b580      	push	{r7, lr}
 800145e:	b082      	sub	sp, #8
 8001460:	af00      	add	r7, sp, #0
 8001462:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	681b      	ldr	r3, [r3, #0]
 8001468:	4a04      	ldr	r2, [pc, #16]	@ (800147c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800146a:	4293      	cmp	r3, r2
 800146c:	d101      	bne.n	8001472 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800146e:	f000 fbd9 	bl	8001c24 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001472:	bf00      	nop
 8001474:	3708      	adds	r7, #8
 8001476:	46bd      	mov	sp, r7
 8001478:	bd80      	pop	{r7, pc}
 800147a:	bf00      	nop
 800147c:	40010000 	.word	0x40010000

08001480 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001480:	b480      	push	{r7}
 8001482:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001484:	b672      	cpsid	i
}
 8001486:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001488:	bf00      	nop
 800148a:	e7fd      	b.n	8001488 <Error_Handler+0x8>

0800148c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	b082      	sub	sp, #8
 8001490:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001492:	2300      	movs	r3, #0
 8001494:	607b      	str	r3, [r7, #4]
 8001496:	4b12      	ldr	r3, [pc, #72]	@ (80014e0 <HAL_MspInit+0x54>)
 8001498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800149a:	4a11      	ldr	r2, [pc, #68]	@ (80014e0 <HAL_MspInit+0x54>)
 800149c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80014a0:	6453      	str	r3, [r2, #68]	@ 0x44
 80014a2:	4b0f      	ldr	r3, [pc, #60]	@ (80014e0 <HAL_MspInit+0x54>)
 80014a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80014a6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80014aa:	607b      	str	r3, [r7, #4]
 80014ac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014ae:	2300      	movs	r3, #0
 80014b0:	603b      	str	r3, [r7, #0]
 80014b2:	4b0b      	ldr	r3, [pc, #44]	@ (80014e0 <HAL_MspInit+0x54>)
 80014b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014b6:	4a0a      	ldr	r2, [pc, #40]	@ (80014e0 <HAL_MspInit+0x54>)
 80014b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80014bc:	6413      	str	r3, [r2, #64]	@ 0x40
 80014be:	4b08      	ldr	r3, [pc, #32]	@ (80014e0 <HAL_MspInit+0x54>)
 80014c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80014c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80014c6:	603b      	str	r3, [r7, #0]
 80014c8:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80014ca:	2200      	movs	r2, #0
 80014cc:	210f      	movs	r1, #15
 80014ce:	f06f 0001 	mvn.w	r0, #1
 80014d2:	f001 fac9 	bl	8002a68 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80014d6:	bf00      	nop
 80014d8:	3708      	adds	r7, #8
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
 80014de:	bf00      	nop
 80014e0:	40023800 	.word	0x40023800

080014e4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80014e4:	b580      	push	{r7, lr}
 80014e6:	b08c      	sub	sp, #48	@ 0x30
 80014e8:	af00      	add	r7, sp, #0
 80014ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014ec:	f107 031c 	add.w	r3, r7, #28
 80014f0:	2200      	movs	r2, #0
 80014f2:	601a      	str	r2, [r3, #0]
 80014f4:	605a      	str	r2, [r3, #4]
 80014f6:	609a      	str	r2, [r3, #8]
 80014f8:	60da      	str	r2, [r3, #12]
 80014fa:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	4a70      	ldr	r2, [pc, #448]	@ (80016c4 <HAL_CAN_MspInit+0x1e0>)
 8001502:	4293      	cmp	r3, r2
 8001504:	d15f      	bne.n	80015c6 <HAL_CAN_MspInit+0xe2>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001506:	4b70      	ldr	r3, [pc, #448]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	3301      	adds	r3, #1
 800150c:	4a6e      	ldr	r2, [pc, #440]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 800150e:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001510:	4b6d      	ldr	r3, [pc, #436]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	2b01      	cmp	r3, #1
 8001516:	d10d      	bne.n	8001534 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001518:	2300      	movs	r3, #0
 800151a:	61bb      	str	r3, [r7, #24]
 800151c:	4b6b      	ldr	r3, [pc, #428]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 800151e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001520:	4a6a      	ldr	r2, [pc, #424]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001522:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001526:	6413      	str	r3, [r2, #64]	@ 0x40
 8001528:	4b68      	ldr	r3, [pc, #416]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 800152a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800152c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001530:	61bb      	str	r3, [r7, #24]
 8001532:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001534:	2300      	movs	r3, #0
 8001536:	617b      	str	r3, [r7, #20]
 8001538:	4b64      	ldr	r3, [pc, #400]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 800153a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153c:	4a63      	ldr	r2, [pc, #396]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 800153e:	f043 0301 	orr.w	r3, r3, #1
 8001542:	6313      	str	r3, [r2, #48]	@ 0x30
 8001544:	4b61      	ldr	r3, [pc, #388]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001546:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001548:	f003 0301 	and.w	r3, r3, #1
 800154c:	617b      	str	r3, [r7, #20]
 800154e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001550:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001554:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001556:	2302      	movs	r3, #2
 8001558:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800155a:	2301      	movs	r3, #1
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800155e:	2303      	movs	r3, #3
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001562:	2309      	movs	r3, #9
 8001564:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001566:	f107 031c 	add.w	r3, r7, #28
 800156a:	4619      	mov	r1, r3
 800156c:	4858      	ldr	r0, [pc, #352]	@ (80016d0 <HAL_CAN_MspInit+0x1ec>)
 800156e:	f001 fb37 	bl	8002be0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001572:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001576:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001578:	2302      	movs	r3, #2
 800157a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800157c:	2300      	movs	r3, #0
 800157e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001580:	2303      	movs	r3, #3
 8001582:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001584:	2309      	movs	r3, #9
 8001586:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001588:	f107 031c 	add.w	r3, r7, #28
 800158c:	4619      	mov	r1, r3
 800158e:	4850      	ldr	r0, [pc, #320]	@ (80016d0 <HAL_CAN_MspInit+0x1ec>)
 8001590:	f001 fb26 	bl	8002be0 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8001594:	2200      	movs	r2, #0
 8001596:	2106      	movs	r1, #6
 8001598:	2013      	movs	r0, #19
 800159a:	f001 fa65 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 800159e:	2013      	movs	r0, #19
 80015a0:	f001 fa7e 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 80015a4:	2200      	movs	r2, #0
 80015a6:	2105      	movs	r1, #5
 80015a8:	2014      	movs	r0, #20
 80015aa:	f001 fa5d 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 80015ae:	2014      	movs	r0, #20
 80015b0:	f001 fa76 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 80015b4:	2200      	movs	r2, #0
 80015b6:	2105      	movs	r1, #5
 80015b8:	2016      	movs	r0, #22
 80015ba:	f001 fa55 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 80015be:	2016      	movs	r0, #22
 80015c0:	f001 fa6e 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 80015c4:	e079      	b.n	80016ba <HAL_CAN_MspInit+0x1d6>
  else if(hcan->Instance==CAN2)
 80015c6:	687b      	ldr	r3, [r7, #4]
 80015c8:	681b      	ldr	r3, [r3, #0]
 80015ca:	4a42      	ldr	r2, [pc, #264]	@ (80016d4 <HAL_CAN_MspInit+0x1f0>)
 80015cc:	4293      	cmp	r3, r2
 80015ce:	d174      	bne.n	80016ba <HAL_CAN_MspInit+0x1d6>
    __HAL_RCC_CAN2_CLK_ENABLE();
 80015d0:	2300      	movs	r3, #0
 80015d2:	613b      	str	r3, [r7, #16]
 80015d4:	4b3d      	ldr	r3, [pc, #244]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 80015d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d8:	4a3c      	ldr	r2, [pc, #240]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 80015da:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 80015de:	6413      	str	r3, [r2, #64]	@ 0x40
 80015e0:	4b3a      	ldr	r3, [pc, #232]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 80015e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 80015ec:	4b36      	ldr	r3, [pc, #216]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	3301      	adds	r3, #1
 80015f2:	4a35      	ldr	r2, [pc, #212]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 80015f4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80015f6:	4b34      	ldr	r3, [pc, #208]	@ (80016c8 <HAL_CAN_MspInit+0x1e4>)
 80015f8:	681b      	ldr	r3, [r3, #0]
 80015fa:	2b01      	cmp	r3, #1
 80015fc:	d10d      	bne.n	800161a <HAL_CAN_MspInit+0x136>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60fb      	str	r3, [r7, #12]
 8001602:	4b32      	ldr	r3, [pc, #200]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001604:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001606:	4a31      	ldr	r2, [pc, #196]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001608:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800160c:	6413      	str	r3, [r2, #64]	@ 0x40
 800160e:	4b2f      	ldr	r3, [pc, #188]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001610:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001612:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001616:	60fb      	str	r3, [r7, #12]
 8001618:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	60bb      	str	r3, [r7, #8]
 800161e:	4b2b      	ldr	r3, [pc, #172]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001622:	4a2a      	ldr	r2, [pc, #168]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	@ 0x30
 800162a:	4b28      	ldr	r3, [pc, #160]	@ (80016cc <HAL_CAN_MspInit+0x1e8>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	60bb      	str	r3, [r7, #8]
 8001634:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001636:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800163a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // CAN RX pin requires pull-up
 8001640:	2301      	movs	r3, #1
 8001642:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001644:	2303      	movs	r3, #3
 8001646:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001648:	2309      	movs	r3, #9
 800164a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800164c:	f107 031c 	add.w	r3, r7, #28
 8001650:	4619      	mov	r1, r3
 8001652:	4821      	ldr	r0, [pc, #132]	@ (80016d8 <HAL_CAN_MspInit+0x1f4>)
 8001654:	f001 fac4 	bl	8002be0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001658:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 800165c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800165e:	2302      	movs	r3, #2
 8001660:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001662:	2300      	movs	r3, #0
 8001664:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001666:	2303      	movs	r3, #3
 8001668:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 800166a:	2309      	movs	r3, #9
 800166c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800166e:	f107 031c 	add.w	r3, r7, #28
 8001672:	4619      	mov	r1, r3
 8001674:	4818      	ldr	r0, [pc, #96]	@ (80016d8 <HAL_CAN_MspInit+0x1f4>)
 8001676:	f001 fab3 	bl	8002be0 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 800167a:	2200      	movs	r2, #0
 800167c:	2105      	movs	r1, #5
 800167e:	203f      	movs	r0, #63	@ 0x3f
 8001680:	f001 f9f2 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001684:	203f      	movs	r0, #63	@ 0x3f
 8001686:	f001 fa0b 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 800168a:	2200      	movs	r2, #0
 800168c:	2105      	movs	r1, #5
 800168e:	2040      	movs	r0, #64	@ 0x40
 8001690:	f001 f9ea 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001694:	2040      	movs	r0, #64	@ 0x40
 8001696:	f001 fa03 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 800169a:	2200      	movs	r2, #0
 800169c:	2105      	movs	r1, #5
 800169e:	2041      	movs	r0, #65	@ 0x41
 80016a0:	f001 f9e2 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 80016a4:	2041      	movs	r0, #65	@ 0x41
 80016a6:	f001 f9fb 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 5, 0);
 80016aa:	2200      	movs	r2, #0
 80016ac:	2105      	movs	r1, #5
 80016ae:	2042      	movs	r0, #66	@ 0x42
 80016b0:	f001 f9da 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 80016b4:	2042      	movs	r0, #66	@ 0x42
 80016b6:	f001 f9f3 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
}
 80016ba:	bf00      	nop
 80016bc:	3730      	adds	r7, #48	@ 0x30
 80016be:	46bd      	mov	sp, r7
 80016c0:	bd80      	pop	{r7, pc}
 80016c2:	bf00      	nop
 80016c4:	40006400 	.word	0x40006400
 80016c8:	200001d4 	.word	0x200001d4
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40006800 	.word	0x40006800
 80016d8:	40020400 	.word	0x40020400

080016dc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016dc:	b580      	push	{r7, lr}
 80016de:	b08a      	sub	sp, #40	@ 0x28
 80016e0:	af00      	add	r7, sp, #0
 80016e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	2200      	movs	r2, #0
 80016ea:	601a      	str	r2, [r3, #0]
 80016ec:	605a      	str	r2, [r3, #4]
 80016ee:	609a      	str	r2, [r3, #8]
 80016f0:	60da      	str	r2, [r3, #12]
 80016f2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80016f4:	687b      	ldr	r3, [r7, #4]
 80016f6:	681b      	ldr	r3, [r3, #0]
 80016f8:	4a1d      	ldr	r2, [pc, #116]	@ (8001770 <HAL_SPI_MspInit+0x94>)
 80016fa:	4293      	cmp	r3, r2
 80016fc:	d133      	bne.n	8001766 <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016fe:	2300      	movs	r3, #0
 8001700:	613b      	str	r3, [r7, #16]
 8001702:	4b1c      	ldr	r3, [pc, #112]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 8001704:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001706:	4a1b      	ldr	r2, [pc, #108]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 8001708:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800170c:	6453      	str	r3, [r2, #68]	@ 0x44
 800170e:	4b19      	ldr	r3, [pc, #100]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 8001710:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001712:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001716:	613b      	str	r3, [r7, #16]
 8001718:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800171a:	2300      	movs	r3, #0
 800171c:	60fb      	str	r3, [r7, #12]
 800171e:	4b15      	ldr	r3, [pc, #84]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 8001720:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001722:	4a14      	ldr	r2, [pc, #80]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 8001724:	f043 0302 	orr.w	r3, r3, #2
 8001728:	6313      	str	r3, [r2, #48]	@ 0x30
 800172a:	4b12      	ldr	r3, [pc, #72]	@ (8001774 <HAL_SPI_MspInit+0x98>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	f003 0302 	and.w	r3, r3, #2
 8001732:	60fb      	str	r3, [r7, #12]
 8001734:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001736:	2338      	movs	r3, #56	@ 0x38
 8001738:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800173a:	2302      	movs	r3, #2
 800173c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800173e:	2300      	movs	r3, #0
 8001740:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001742:	2303      	movs	r3, #3
 8001744:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001746:	2305      	movs	r3, #5
 8001748:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800174a:	f107 0314 	add.w	r3, r7, #20
 800174e:	4619      	mov	r1, r3
 8001750:	4809      	ldr	r0, [pc, #36]	@ (8001778 <HAL_SPI_MspInit+0x9c>)
 8001752:	f001 fa45 	bl	8002be0 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 7, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2107      	movs	r1, #7
 800175a:	2023      	movs	r0, #35	@ 0x23
 800175c:	f001 f984 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001760:	2023      	movs	r0, #35	@ 0x23
 8001762:	f001 f99d 	bl	8002aa0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001766:	bf00      	nop
 8001768:	3728      	adds	r7, #40	@ 0x28
 800176a:	46bd      	mov	sp, r7
 800176c:	bd80      	pop	{r7, pc}
 800176e:	bf00      	nop
 8001770:	40013000 	.word	0x40013000
 8001774:	40023800 	.word	0x40023800
 8001778:	40020400 	.word	0x40020400

0800177c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	@ 0x28
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001784:	f107 0314 	add.w	r3, r7, #20
 8001788:	2200      	movs	r2, #0
 800178a:	601a      	str	r2, [r3, #0]
 800178c:	605a      	str	r2, [r3, #4]
 800178e:	609a      	str	r2, [r3, #8]
 8001790:	60da      	str	r2, [r3, #12]
 8001792:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	681b      	ldr	r3, [r3, #0]
 8001798:	4a1d      	ldr	r2, [pc, #116]	@ (8001810 <HAL_UART_MspInit+0x94>)
 800179a:	4293      	cmp	r3, r2
 800179c:	d133      	bne.n	8001806 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800179e:	2300      	movs	r3, #0
 80017a0:	613b      	str	r3, [r7, #16]
 80017a2:	4b1c      	ldr	r3, [pc, #112]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017a6:	4a1b      	ldr	r2, [pc, #108]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80017ae:	4b19      	ldr	r3, [pc, #100]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017b6:	613b      	str	r3, [r7, #16]
 80017b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ba:	2300      	movs	r3, #0
 80017bc:	60fb      	str	r3, [r7, #12]
 80017be:	4b15      	ldr	r3, [pc, #84]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017c2:	4a14      	ldr	r2, [pc, #80]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017c4:	f043 0301 	orr.w	r3, r3, #1
 80017c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80017ca:	4b12      	ldr	r3, [pc, #72]	@ (8001814 <HAL_UART_MspInit+0x98>)
 80017cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017ce:	f003 0301 	and.w	r3, r3, #1
 80017d2:	60fb      	str	r3, [r7, #12]
 80017d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017d6:	230c      	movs	r3, #12
 80017d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017da:	2302      	movs	r3, #2
 80017dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017de:	2300      	movs	r3, #0
 80017e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017e2:	2303      	movs	r3, #3
 80017e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017e6:	2307      	movs	r3, #7
 80017e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017ea:	f107 0314 	add.w	r3, r7, #20
 80017ee:	4619      	mov	r1, r3
 80017f0:	4809      	ldr	r0, [pc, #36]	@ (8001818 <HAL_UART_MspInit+0x9c>)
 80017f2:	f001 f9f5 	bl	8002be0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);  // 修改为5，符合FreeRTOS中断优先级要求
 80017f6:	2200      	movs	r2, #0
 80017f8:	2105      	movs	r1, #5
 80017fa:	2026      	movs	r0, #38	@ 0x26
 80017fc:	f001 f934 	bl	8002a68 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001800:	2026      	movs	r0, #38	@ 0x26
 8001802:	f001 f94d 	bl	8002aa0 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001806:	bf00      	nop
 8001808:	3728      	adds	r7, #40	@ 0x28
 800180a:	46bd      	mov	sp, r7
 800180c:	bd80      	pop	{r7, pc}
 800180e:	bf00      	nop
 8001810:	40004400 	.word	0x40004400
 8001814:	40023800 	.word	0x40023800
 8001818:	40020000 	.word	0x40020000

0800181c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b08c      	sub	sp, #48	@ 0x30
 8001820:	af00      	add	r7, sp, #0
 8001822:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001824:	2300      	movs	r3, #0
 8001826:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001828:	2300      	movs	r3, #0
 800182a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800182c:	2300      	movs	r3, #0
 800182e:	60bb      	str	r3, [r7, #8]
 8001830:	4b2f      	ldr	r3, [pc, #188]	@ (80018f0 <HAL_InitTick+0xd4>)
 8001832:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001834:	4a2e      	ldr	r2, [pc, #184]	@ (80018f0 <HAL_InitTick+0xd4>)
 8001836:	f043 0301 	orr.w	r3, r3, #1
 800183a:	6453      	str	r3, [r2, #68]	@ 0x44
 800183c:	4b2c      	ldr	r3, [pc, #176]	@ (80018f0 <HAL_InitTick+0xd4>)
 800183e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001840:	f003 0301 	and.w	r3, r3, #1
 8001844:	60bb      	str	r3, [r7, #8]
 8001846:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001848:	f107 020c 	add.w	r2, r7, #12
 800184c:	f107 0310 	add.w	r3, r7, #16
 8001850:	4611      	mov	r1, r2
 8001852:	4618      	mov	r0, r3
 8001854:	f001 fff8 	bl	8003848 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001858:	f001 ffe2 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 800185c:	4603      	mov	r3, r0
 800185e:	005b      	lsls	r3, r3, #1
 8001860:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001862:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001864:	4a23      	ldr	r2, [pc, #140]	@ (80018f4 <HAL_InitTick+0xd8>)
 8001866:	fba2 2303 	umull	r2, r3, r2, r3
 800186a:	0c9b      	lsrs	r3, r3, #18
 800186c:	3b01      	subs	r3, #1
 800186e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001870:	4b21      	ldr	r3, [pc, #132]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001872:	4a22      	ldr	r2, [pc, #136]	@ (80018fc <HAL_InitTick+0xe0>)
 8001874:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001876:	4b20      	ldr	r3, [pc, #128]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001878:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800187c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800187e:	4a1e      	ldr	r2, [pc, #120]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001880:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001882:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001884:	4b1c      	ldr	r3, [pc, #112]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001886:	2200      	movs	r2, #0
 8001888:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800188a:	4b1b      	ldr	r3, [pc, #108]	@ (80018f8 <HAL_InitTick+0xdc>)
 800188c:	2200      	movs	r2, #0
 800188e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001890:	4b19      	ldr	r3, [pc, #100]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001892:	2200      	movs	r2, #0
 8001894:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001896:	4818      	ldr	r0, [pc, #96]	@ (80018f8 <HAL_InitTick+0xdc>)
 8001898:	f002 f9b0 	bl	8003bfc <HAL_TIM_Base_Init>
 800189c:	4603      	mov	r3, r0
 800189e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 80018a2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018a6:	2b00      	cmp	r3, #0
 80018a8:	d11b      	bne.n	80018e2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 80018aa:	4813      	ldr	r0, [pc, #76]	@ (80018f8 <HAL_InitTick+0xdc>)
 80018ac:	f002 fa00 	bl	8003cb0 <HAL_TIM_Base_Start_IT>
 80018b0:	4603      	mov	r3, r0
 80018b2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80018b6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d111      	bne.n	80018e2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80018be:	2019      	movs	r0, #25
 80018c0:	f001 f8ee 	bl	8002aa0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2b0f      	cmp	r3, #15
 80018c8:	d808      	bhi.n	80018dc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80018ca:	2200      	movs	r2, #0
 80018cc:	6879      	ldr	r1, [r7, #4]
 80018ce:	2019      	movs	r0, #25
 80018d0:	f001 f8ca 	bl	8002a68 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80018d4:	4a0a      	ldr	r2, [pc, #40]	@ (8001900 <HAL_InitTick+0xe4>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
 80018da:	e002      	b.n	80018e2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80018dc:	2301      	movs	r3, #1
 80018de:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80018e2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80018e6:	4618      	mov	r0, r3
 80018e8:	3730      	adds	r7, #48	@ 0x30
 80018ea:	46bd      	mov	sp, r7
 80018ec:	bd80      	pop	{r7, pc}
 80018ee:	bf00      	nop
 80018f0:	40023800 	.word	0x40023800
 80018f4:	431bde83 	.word	0x431bde83
 80018f8:	200001d8 	.word	0x200001d8
 80018fc:	40010000 	.word	0x40010000
 8001900:	20000004 	.word	0x20000004

08001904 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001904:	b480      	push	{r7}
 8001906:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001908:	bf00      	nop
 800190a:	e7fd      	b.n	8001908 <NMI_Handler+0x4>

0800190c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800190c:	b480      	push	{r7}
 800190e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001910:	bf00      	nop
 8001912:	e7fd      	b.n	8001910 <HardFault_Handler+0x4>

08001914 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001914:	b480      	push	{r7}
 8001916:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001918:	bf00      	nop
 800191a:	e7fd      	b.n	8001918 <MemManage_Handler+0x4>

0800191c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800191c:	b480      	push	{r7}
 800191e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001920:	bf00      	nop
 8001922:	e7fd      	b.n	8001920 <BusFault_Handler+0x4>

08001924 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001924:	b480      	push	{r7}
 8001926:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001928:	bf00      	nop
 800192a:	e7fd      	b.n	8001928 <UsageFault_Handler+0x4>

0800192c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800192c:	b480      	push	{r7}
 800192e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001930:	bf00      	nop
 8001932:	46bd      	mov	sp, r7
 8001934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001938:	4770      	bx	lr
	...

0800193c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800193c:	b580      	push	{r7, lr}
 800193e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001940:	4802      	ldr	r0, [pc, #8]	@ (800194c <CAN1_TX_IRQHandler+0x10>)
 8001942:	f000 fdc5 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001946:	bf00      	nop
 8001948:	bd80      	pop	{r7, pc}
 800194a:	bf00      	nop
 800194c:	20000088 	.word	0x20000088

08001950 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001950:	b580      	push	{r7, lr}
 8001952:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001954:	4802      	ldr	r0, [pc, #8]	@ (8001960 <CAN1_RX0_IRQHandler+0x10>)
 8001956:	f000 fdbb 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800195a:	bf00      	nop
 800195c:	bd80      	pop	{r7, pc}
 800195e:	bf00      	nop
 8001960:	20000088 	.word	0x20000088

08001964 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001964:	b580      	push	{r7, lr}
 8001966:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001968:	4802      	ldr	r0, [pc, #8]	@ (8001974 <CAN1_SCE_IRQHandler+0x10>)
 800196a:	f000 fdb1 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 800196e:	bf00      	nop
 8001970:	bd80      	pop	{r7, pc}
 8001972:	bf00      	nop
 8001974:	20000088 	.word	0x20000088

08001978 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 800197c:	4802      	ldr	r0, [pc, #8]	@ (8001988 <TIM1_UP_TIM10_IRQHandler+0x10>)
 800197e:	f002 fa07 	bl	8003d90 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001982:	bf00      	nop
 8001984:	bd80      	pop	{r7, pc}
 8001986:	bf00      	nop
 8001988:	200001d8 	.word	0x200001d8

0800198c <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001990:	4802      	ldr	r0, [pc, #8]	@ (800199c <SPI1_IRQHandler+0x10>)
 8001992:	f002 f815 	bl	80039c0 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001996:	bf00      	nop
 8001998:	bd80      	pop	{r7, pc}
 800199a:	bf00      	nop
 800199c:	2000016c 	.word	0x2000016c

080019a0 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80019a0:	b580      	push	{r7, lr}
 80019a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80019a4:	4802      	ldr	r0, [pc, #8]	@ (80019b0 <USART2_IRQHandler+0x10>)
 80019a6:	f002 fcc5 	bl	8004334 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80019aa:	bf00      	nop
 80019ac:	bd80      	pop	{r7, pc}
 80019ae:	bf00      	nop
 80019b0:	20000224 	.word	0x20000224

080019b4 <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 80019b4:	b580      	push	{r7, lr}
 80019b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019b8:	4802      	ldr	r0, [pc, #8]	@ (80019c4 <CAN2_TX_IRQHandler+0x10>)
 80019ba:	f000 fd89 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 80019be:	bf00      	nop
 80019c0:	bd80      	pop	{r7, pc}
 80019c2:	bf00      	nop
 80019c4:	200000b0 	.word	0x200000b0

080019c8 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019cc:	4802      	ldr	r0, [pc, #8]	@ (80019d8 <CAN2_RX0_IRQHandler+0x10>)
 80019ce:	f000 fd7f 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 80019d2:	bf00      	nop
 80019d4:	bd80      	pop	{r7, pc}
 80019d6:	bf00      	nop
 80019d8:	200000b0 	.word	0x200000b0

080019dc <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 80019dc:	b580      	push	{r7, lr}
 80019de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019e0:	4802      	ldr	r0, [pc, #8]	@ (80019ec <CAN2_RX1_IRQHandler+0x10>)
 80019e2:	f000 fd75 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 80019e6:	bf00      	nop
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	200000b0 	.word	0x200000b0

080019f0 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 80019f0:	b580      	push	{r7, lr}
 80019f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 80019f4:	4802      	ldr	r0, [pc, #8]	@ (8001a00 <CAN2_SCE_IRQHandler+0x10>)
 80019f6:	f000 fd6b 	bl	80024d0 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 80019fa:	bf00      	nop
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	200000b0 	.word	0x200000b0

08001a04 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001a04:	b580      	push	{r7, lr}
 8001a06:	b086      	sub	sp, #24
 8001a08:	af00      	add	r7, sp, #0
 8001a0a:	60f8      	str	r0, [r7, #12]
 8001a0c:	60b9      	str	r1, [r7, #8]
 8001a0e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a10:	2300      	movs	r3, #0
 8001a12:	617b      	str	r3, [r7, #20]
 8001a14:	e00a      	b.n	8001a2c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001a16:	f3af 8000 	nop.w
 8001a1a:	4601      	mov	r1, r0
 8001a1c:	68bb      	ldr	r3, [r7, #8]
 8001a1e:	1c5a      	adds	r2, r3, #1
 8001a20:	60ba      	str	r2, [r7, #8]
 8001a22:	b2ca      	uxtb	r2, r1
 8001a24:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001a26:	697b      	ldr	r3, [r7, #20]
 8001a28:	3301      	adds	r3, #1
 8001a2a:	617b      	str	r3, [r7, #20]
 8001a2c:	697a      	ldr	r2, [r7, #20]
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	429a      	cmp	r2, r3
 8001a32:	dbf0      	blt.n	8001a16 <_read+0x12>
  }

  return len;
 8001a34:	687b      	ldr	r3, [r7, #4]
}
 8001a36:	4618      	mov	r0, r3
 8001a38:	3718      	adds	r7, #24
 8001a3a:	46bd      	mov	sp, r7
 8001a3c:	bd80      	pop	{r7, pc}

08001a3e <_close>:
  }
  return len;
}

int _close(int file)
{
 8001a3e:	b480      	push	{r7}
 8001a40:	b083      	sub	sp, #12
 8001a42:	af00      	add	r7, sp, #0
 8001a44:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001a46:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	370c      	adds	r7, #12
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a54:	4770      	bx	lr

08001a56 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001a56:	b480      	push	{r7}
 8001a58:	b083      	sub	sp, #12
 8001a5a:	af00      	add	r7, sp, #0
 8001a5c:	6078      	str	r0, [r7, #4]
 8001a5e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001a66:	605a      	str	r2, [r3, #4]
  return 0;
 8001a68:	2300      	movs	r3, #0
}
 8001a6a:	4618      	mov	r0, r3
 8001a6c:	370c      	adds	r7, #12
 8001a6e:	46bd      	mov	sp, r7
 8001a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a74:	4770      	bx	lr

08001a76 <_isatty>:

int _isatty(int file)
{
 8001a76:	b480      	push	{r7}
 8001a78:	b083      	sub	sp, #12
 8001a7a:	af00      	add	r7, sp, #0
 8001a7c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001a7e:	2301      	movs	r3, #1
}
 8001a80:	4618      	mov	r0, r3
 8001a82:	370c      	adds	r7, #12
 8001a84:	46bd      	mov	sp, r7
 8001a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a8a:	4770      	bx	lr

08001a8c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001a8c:	b480      	push	{r7}
 8001a8e:	b085      	sub	sp, #20
 8001a90:	af00      	add	r7, sp, #0
 8001a92:	60f8      	str	r0, [r7, #12]
 8001a94:	60b9      	str	r1, [r7, #8]
 8001a96:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001a98:	2300      	movs	r3, #0
}
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	3714      	adds	r7, #20
 8001a9e:	46bd      	mov	sp, r7
 8001aa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa4:	4770      	bx	lr
	...

08001aa8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b086      	sub	sp, #24
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001ab0:	4a14      	ldr	r2, [pc, #80]	@ (8001b04 <_sbrk+0x5c>)
 8001ab2:	4b15      	ldr	r3, [pc, #84]	@ (8001b08 <_sbrk+0x60>)
 8001ab4:	1ad3      	subs	r3, r2, r3
 8001ab6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001ab8:	697b      	ldr	r3, [r7, #20]
 8001aba:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001abc:	4b13      	ldr	r3, [pc, #76]	@ (8001b0c <_sbrk+0x64>)
 8001abe:	681b      	ldr	r3, [r3, #0]
 8001ac0:	2b00      	cmp	r3, #0
 8001ac2:	d102      	bne.n	8001aca <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001ac4:	4b11      	ldr	r3, [pc, #68]	@ (8001b0c <_sbrk+0x64>)
 8001ac6:	4a12      	ldr	r2, [pc, #72]	@ (8001b10 <_sbrk+0x68>)
 8001ac8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001aca:	4b10      	ldr	r3, [pc, #64]	@ (8001b0c <_sbrk+0x64>)
 8001acc:	681a      	ldr	r2, [r3, #0]
 8001ace:	687b      	ldr	r3, [r7, #4]
 8001ad0:	4413      	add	r3, r2
 8001ad2:	693a      	ldr	r2, [r7, #16]
 8001ad4:	429a      	cmp	r2, r3
 8001ad6:	d207      	bcs.n	8001ae8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001ad8:	f006 fcf4 	bl	80084c4 <__errno>
 8001adc:	4603      	mov	r3, r0
 8001ade:	220c      	movs	r2, #12
 8001ae0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001ae2:	f04f 33ff 	mov.w	r3, #4294967295
 8001ae6:	e009      	b.n	8001afc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001ae8:	4b08      	ldr	r3, [pc, #32]	@ (8001b0c <_sbrk+0x64>)
 8001aea:	681b      	ldr	r3, [r3, #0]
 8001aec:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001aee:	4b07      	ldr	r3, [pc, #28]	@ (8001b0c <_sbrk+0x64>)
 8001af0:	681a      	ldr	r2, [r3, #0]
 8001af2:	687b      	ldr	r3, [r7, #4]
 8001af4:	4413      	add	r3, r2
 8001af6:	4a05      	ldr	r2, [pc, #20]	@ (8001b0c <_sbrk+0x64>)
 8001af8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001afa:	68fb      	ldr	r3, [r7, #12]
}
 8001afc:	4618      	mov	r0, r3
 8001afe:	3718      	adds	r7, #24
 8001b00:	46bd      	mov	sp, r7
 8001b02:	bd80      	pop	{r7, pc}
 8001b04:	20020000 	.word	0x20020000
 8001b08:	00000400 	.word	0x00000400
 8001b0c:	20000220 	.word	0x20000220
 8001b10:	20004da8 	.word	0x20004da8

08001b14 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001b14:	b480      	push	{r7}
 8001b16:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001b18:	4b06      	ldr	r3, [pc, #24]	@ (8001b34 <SystemInit+0x20>)
 8001b1a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001b1e:	4a05      	ldr	r2, [pc, #20]	@ (8001b34 <SystemInit+0x20>)
 8001b20:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001b24:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001b28:	bf00      	nop
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b30:	4770      	bx	lr
 8001b32:	bf00      	nop
 8001b34:	e000ed00 	.word	0xe000ed00

08001b38 <MX_USART2_UART_Init>:

UART_HandleTypeDef huart2;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001b3c:	4b11      	ldr	r3, [pc, #68]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b3e:	4a12      	ldr	r2, [pc, #72]	@ (8001b88 <MX_USART2_UART_Init+0x50>)
 8001b40:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001b42:	4b10      	ldr	r3, [pc, #64]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b44:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001b48:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001b4a:	4b0e      	ldr	r3, [pc, #56]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b4c:	2200      	movs	r2, #0
 8001b4e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001b50:	4b0c      	ldr	r3, [pc, #48]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b52:	2200      	movs	r2, #0
 8001b54:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001b56:	4b0b      	ldr	r3, [pc, #44]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b5c:	4b09      	ldr	r3, [pc, #36]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b5e:	220c      	movs	r2, #12
 8001b60:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b62:	4b08      	ldr	r3, [pc, #32]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b68:	4b06      	ldr	r3, [pc, #24]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b6e:	4805      	ldr	r0, [pc, #20]	@ (8001b84 <MX_USART2_UART_Init+0x4c>)
 8001b70:	f002 fae0 	bl	8004134 <HAL_UART_Init>
 8001b74:	4603      	mov	r3, r0
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d001      	beq.n	8001b7e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b7a:	f7ff fc81 	bl	8001480 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001b7e:	bf00      	nop
 8001b80:	bd80      	pop	{r7, pc}
 8001b82:	bf00      	nop
 8001b84:	20000224 	.word	0x20000224
 8001b88:	40004400 	.word	0x40004400

08001b8c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001b8c:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001bc4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001b90:	f7ff ffc0 	bl	8001b14 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001b94:	480c      	ldr	r0, [pc, #48]	@ (8001bc8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001b96:	490d      	ldr	r1, [pc, #52]	@ (8001bcc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001b98:	4a0d      	ldr	r2, [pc, #52]	@ (8001bd0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001b9a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001b9c:	e002      	b.n	8001ba4 <LoopCopyDataInit>

08001b9e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001b9e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001ba0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001ba2:	3304      	adds	r3, #4

08001ba4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001ba4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001ba6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001ba8:	d3f9      	bcc.n	8001b9e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001baa:	4a0a      	ldr	r2, [pc, #40]	@ (8001bd4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bac:	4c0a      	ldr	r4, [pc, #40]	@ (8001bd8 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bae:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bb0:	e001      	b.n	8001bb6 <LoopFillZerobss>

08001bb2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bb2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bb4:	3204      	adds	r2, #4

08001bb6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bb6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bb8:	d3fb      	bcc.n	8001bb2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bba:	f006 fc89 	bl	80084d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bbe:	f7ff fad3 	bl	8001168 <main>
  bx  lr    
 8001bc2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001bc4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001bc8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001bcc:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8001bd0:	08009380 	.word	0x08009380
  ldr r2, =_sbss
 8001bd4:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8001bd8:	20004da4 	.word	0x20004da4

08001bdc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bdc:	e7fe      	b.n	8001bdc <ADC_IRQHandler>
	...

08001be0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001be0:	b580      	push	{r7, lr}
 8001be2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001be4:	4b0e      	ldr	r3, [pc, #56]	@ (8001c20 <HAL_Init+0x40>)
 8001be6:	681b      	ldr	r3, [r3, #0]
 8001be8:	4a0d      	ldr	r2, [pc, #52]	@ (8001c20 <HAL_Init+0x40>)
 8001bea:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001bee:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001bf0:	4b0b      	ldr	r3, [pc, #44]	@ (8001c20 <HAL_Init+0x40>)
 8001bf2:	681b      	ldr	r3, [r3, #0]
 8001bf4:	4a0a      	ldr	r2, [pc, #40]	@ (8001c20 <HAL_Init+0x40>)
 8001bf6:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001bfa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001bfc:	4b08      	ldr	r3, [pc, #32]	@ (8001c20 <HAL_Init+0x40>)
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	4a07      	ldr	r2, [pc, #28]	@ (8001c20 <HAL_Init+0x40>)
 8001c02:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c06:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c08:	2003      	movs	r0, #3
 8001c0a:	f000 ff22 	bl	8002a52 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c0e:	200f      	movs	r0, #15
 8001c10:	f7ff fe04 	bl	800181c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c14:	f7ff fc3a 	bl	800148c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c18:	2300      	movs	r3, #0
}
 8001c1a:	4618      	mov	r0, r3
 8001c1c:	bd80      	pop	{r7, pc}
 8001c1e:	bf00      	nop
 8001c20:	40023c00 	.word	0x40023c00

08001c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001c24:	b480      	push	{r7}
 8001c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001c28:	4b06      	ldr	r3, [pc, #24]	@ (8001c44 <HAL_IncTick+0x20>)
 8001c2a:	781b      	ldrb	r3, [r3, #0]
 8001c2c:	461a      	mov	r2, r3
 8001c2e:	4b06      	ldr	r3, [pc, #24]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c30:	681b      	ldr	r3, [r3, #0]
 8001c32:	4413      	add	r3, r2
 8001c34:	4a04      	ldr	r2, [pc, #16]	@ (8001c48 <HAL_IncTick+0x24>)
 8001c36:	6013      	str	r3, [r2, #0]
}
 8001c38:	bf00      	nop
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c40:	4770      	bx	lr
 8001c42:	bf00      	nop
 8001c44:	20000008 	.word	0x20000008
 8001c48:	2000026c 	.word	0x2000026c

08001c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001c4c:	b480      	push	{r7}
 8001c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8001c50:	4b03      	ldr	r3, [pc, #12]	@ (8001c60 <HAL_GetTick+0x14>)
 8001c52:	681b      	ldr	r3, [r3, #0]
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	46bd      	mov	sp, r7
 8001c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c5c:	4770      	bx	lr
 8001c5e:	bf00      	nop
 8001c60:	2000026c 	.word	0x2000026c

08001c64 <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b084      	sub	sp, #16
 8001c68:	af00      	add	r7, sp, #0
 8001c6a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	2b00      	cmp	r3, #0
 8001c70:	d101      	bne.n	8001c76 <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8001c72:	2301      	movs	r3, #1
 8001c74:	e0ed      	b.n	8001e52 <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001c7c:	b2db      	uxtb	r3, r3
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d102      	bne.n	8001c88 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8001c82:	6878      	ldr	r0, [r7, #4]
 8001c84:	f7ff fc2e 	bl	80014e4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8001c88:	687b      	ldr	r3, [r7, #4]
 8001c8a:	681b      	ldr	r3, [r3, #0]
 8001c8c:	681a      	ldr	r2, [r3, #0]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	f042 0201 	orr.w	r2, r2, #1
 8001c96:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001c98:	f7ff ffd8 	bl	8001c4c <HAL_GetTick>
 8001c9c:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001c9e:	e012      	b.n	8001cc6 <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001ca0:	f7ff ffd4 	bl	8001c4c <HAL_GetTick>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	68fb      	ldr	r3, [r7, #12]
 8001ca8:	1ad3      	subs	r3, r2, r3
 8001caa:	2b0a      	cmp	r3, #10
 8001cac:	d90b      	bls.n	8001cc6 <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cae:	687b      	ldr	r3, [r7, #4]
 8001cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cb2:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	2205      	movs	r2, #5
 8001cbe:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001cc2:	2301      	movs	r3, #1
 8001cc4:	e0c5      	b.n	8001e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8001cc6:	687b      	ldr	r3, [r7, #4]
 8001cc8:	681b      	ldr	r3, [r3, #0]
 8001cca:	685b      	ldr	r3, [r3, #4]
 8001ccc:	f003 0301 	and.w	r3, r3, #1
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d0e5      	beq.n	8001ca0 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	681b      	ldr	r3, [r3, #0]
 8001cd8:	681a      	ldr	r2, [r3, #0]
 8001cda:	687b      	ldr	r3, [r7, #4]
 8001cdc:	681b      	ldr	r3, [r3, #0]
 8001cde:	f022 0202 	bic.w	r2, r2, #2
 8001ce2:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001ce4:	f7ff ffb2 	bl	8001c4c <HAL_GetTick>
 8001ce8:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001cea:	e012      	b.n	8001d12 <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8001cec:	f7ff ffae 	bl	8001c4c <HAL_GetTick>
 8001cf0:	4602      	mov	r2, r0
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	1ad3      	subs	r3, r2, r3
 8001cf6:	2b0a      	cmp	r3, #10
 8001cf8:	d90b      	bls.n	8001d12 <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001cfe:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8001d06:	687b      	ldr	r3, [r7, #4]
 8001d08:	2205      	movs	r2, #5
 8001d0a:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8001d0e:	2301      	movs	r3, #1
 8001d10:	e09f      	b.n	8001e52 <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	685b      	ldr	r3, [r3, #4]
 8001d18:	f003 0302 	and.w	r3, r3, #2
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d1e5      	bne.n	8001cec <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	7e1b      	ldrb	r3, [r3, #24]
 8001d24:	2b01      	cmp	r3, #1
 8001d26:	d108      	bne.n	8001d3a <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	681a      	ldr	r2, [r3, #0]
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 8001d36:	601a      	str	r2, [r3, #0]
 8001d38:	e007      	b.n	8001d4a <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	681a      	ldr	r2, [r3, #0]
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	681b      	ldr	r3, [r3, #0]
 8001d44:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8001d48:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	7e5b      	ldrb	r3, [r3, #25]
 8001d4e:	2b01      	cmp	r3, #1
 8001d50:	d108      	bne.n	8001d64 <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d52:	687b      	ldr	r3, [r7, #4]
 8001d54:	681b      	ldr	r3, [r3, #0]
 8001d56:	681a      	ldr	r2, [r3, #0]
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	681b      	ldr	r3, [r3, #0]
 8001d5c:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8001d60:	601a      	str	r2, [r3, #0]
 8001d62:	e007      	b.n	8001d74 <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	681b      	ldr	r3, [r3, #0]
 8001d68:	681a      	ldr	r2, [r3, #0]
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	681b      	ldr	r3, [r3, #0]
 8001d6e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001d72:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8001d74:	687b      	ldr	r3, [r7, #4]
 8001d76:	7e9b      	ldrb	r3, [r3, #26]
 8001d78:	2b01      	cmp	r3, #1
 8001d7a:	d108      	bne.n	8001d8e <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	681b      	ldr	r3, [r3, #0]
 8001d80:	681a      	ldr	r2, [r3, #0]
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f042 0220 	orr.w	r2, r2, #32
 8001d8a:	601a      	str	r2, [r3, #0]
 8001d8c:	e007      	b.n	8001d9e <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	681b      	ldr	r3, [r3, #0]
 8001d92:	681a      	ldr	r2, [r3, #0]
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	f022 0220 	bic.w	r2, r2, #32
 8001d9c:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	7edb      	ldrb	r3, [r3, #27]
 8001da2:	2b01      	cmp	r3, #1
 8001da4:	d108      	bne.n	8001db8 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	681b      	ldr	r3, [r3, #0]
 8001daa:	681a      	ldr	r2, [r3, #0]
 8001dac:	687b      	ldr	r3, [r7, #4]
 8001dae:	681b      	ldr	r3, [r3, #0]
 8001db0:	f022 0210 	bic.w	r2, r2, #16
 8001db4:	601a      	str	r2, [r3, #0]
 8001db6:	e007      	b.n	8001dc8 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	681a      	ldr	r2, [r3, #0]
 8001dbe:	687b      	ldr	r3, [r7, #4]
 8001dc0:	681b      	ldr	r3, [r3, #0]
 8001dc2:	f042 0210 	orr.w	r2, r2, #16
 8001dc6:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	7f1b      	ldrb	r3, [r3, #28]
 8001dcc:	2b01      	cmp	r3, #1
 8001dce:	d108      	bne.n	8001de2 <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	681a      	ldr	r2, [r3, #0]
 8001dd6:	687b      	ldr	r3, [r7, #4]
 8001dd8:	681b      	ldr	r3, [r3, #0]
 8001dda:	f042 0208 	orr.w	r2, r2, #8
 8001dde:	601a      	str	r2, [r3, #0]
 8001de0:	e007      	b.n	8001df2 <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8001de2:	687b      	ldr	r3, [r7, #4]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	681a      	ldr	r2, [r3, #0]
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	681b      	ldr	r3, [r3, #0]
 8001dec:	f022 0208 	bic.w	r2, r2, #8
 8001df0:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8001df2:	687b      	ldr	r3, [r7, #4]
 8001df4:	7f5b      	ldrb	r3, [r3, #29]
 8001df6:	2b01      	cmp	r3, #1
 8001df8:	d108      	bne.n	8001e0c <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001dfa:	687b      	ldr	r3, [r7, #4]
 8001dfc:	681b      	ldr	r3, [r3, #0]
 8001dfe:	681a      	ldr	r2, [r3, #0]
 8001e00:	687b      	ldr	r3, [r7, #4]
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	f042 0204 	orr.w	r2, r2, #4
 8001e08:	601a      	str	r2, [r3, #0]
 8001e0a:	e007      	b.n	8001e1c <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	681b      	ldr	r3, [r3, #0]
 8001e10:	681a      	ldr	r2, [r3, #0]
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	681b      	ldr	r3, [r3, #0]
 8001e16:	f022 0204 	bic.w	r2, r2, #4
 8001e1a:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8001e1c:	687b      	ldr	r3, [r7, #4]
 8001e1e:	689a      	ldr	r2, [r3, #8]
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	68db      	ldr	r3, [r3, #12]
 8001e24:	431a      	orrs	r2, r3
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	691b      	ldr	r3, [r3, #16]
 8001e2a:	431a      	orrs	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	695b      	ldr	r3, [r3, #20]
 8001e30:	ea42 0103 	orr.w	r1, r2, r3
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	685b      	ldr	r3, [r3, #4]
 8001e38:	1e5a      	subs	r2, r3, #1
 8001e3a:	687b      	ldr	r3, [r7, #4]
 8001e3c:	681b      	ldr	r3, [r3, #0]
 8001e3e:	430a      	orrs	r2, r1
 8001e40:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	2200      	movs	r2, #0
 8001e46:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8001e48:	687b      	ldr	r3, [r7, #4]
 8001e4a:	2201      	movs	r2, #1
 8001e4c:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8001e50:	2300      	movs	r3, #0
}
 8001e52:	4618      	mov	r0, r3
 8001e54:	3710      	adds	r7, #16
 8001e56:	46bd      	mov	sp, r7
 8001e58:	bd80      	pop	{r7, pc}
	...

08001e5c <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8001e5c:	b480      	push	{r7}
 8001e5e:	b087      	sub	sp, #28
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
 8001e64:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001e6c:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8001e6e:	7dfb      	ldrb	r3, [r7, #23]
 8001e70:	2b01      	cmp	r3, #1
 8001e72:	d003      	beq.n	8001e7c <HAL_CAN_ConfigFilter+0x20>
 8001e74:	7dfb      	ldrb	r3, [r7, #23]
 8001e76:	2b02      	cmp	r3, #2
 8001e78:	f040 80be 	bne.w	8001ff8 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8001e7c:	4b65      	ldr	r3, [pc, #404]	@ (8002014 <HAL_CAN_ConfigFilter+0x1b8>)
 8001e7e:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001e80:	693b      	ldr	r3, [r7, #16]
 8001e82:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e86:	f043 0201 	orr.w	r2, r3, #1
 8001e8a:	693b      	ldr	r3, [r7, #16]
 8001e8c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8001e90:	693b      	ldr	r3, [r7, #16]
 8001e92:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001e96:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8001e9a:	693b      	ldr	r3, [r7, #16]
 8001e9c:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8001ea0:	693b      	ldr	r3, [r7, #16]
 8001ea2:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001ea6:	683b      	ldr	r3, [r7, #0]
 8001ea8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001eaa:	021b      	lsls	r3, r3, #8
 8001eac:	431a      	orrs	r2, r3
 8001eae:	693b      	ldr	r3, [r7, #16]
 8001eb0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 8001eb4:	683b      	ldr	r3, [r7, #0]
 8001eb6:	695b      	ldr	r3, [r3, #20]
 8001eb8:	f003 031f 	and.w	r3, r3, #31
 8001ebc:	2201      	movs	r2, #1
 8001ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8001ec2:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 8001ec4:	693b      	ldr	r3, [r7, #16]
 8001ec6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001eca:	68fb      	ldr	r3, [r7, #12]
 8001ecc:	43db      	mvns	r3, r3
 8001ece:	401a      	ands	r2, r3
 8001ed0:	693b      	ldr	r3, [r7, #16]
 8001ed2:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 8001ed6:	683b      	ldr	r3, [r7, #0]
 8001ed8:	69db      	ldr	r3, [r3, #28]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d123      	bne.n	8001f26 <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 8001ede:	693b      	ldr	r3, [r7, #16]
 8001ee0:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001ee4:	68fb      	ldr	r3, [r7, #12]
 8001ee6:	43db      	mvns	r3, r3
 8001ee8:	401a      	ands	r2, r3
 8001eea:	693b      	ldr	r3, [r7, #16]
 8001eec:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001ef0:	683b      	ldr	r3, [r7, #0]
 8001ef2:	68db      	ldr	r3, [r3, #12]
 8001ef4:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001ef6:	683b      	ldr	r3, [r7, #0]
 8001ef8:	685b      	ldr	r3, [r3, #4]
 8001efa:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001efc:	683a      	ldr	r2, [r7, #0]
 8001efe:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 8001f00:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f02:	693b      	ldr	r3, [r7, #16]
 8001f04:	3248      	adds	r2, #72	@ 0x48
 8001f06:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f0a:	683b      	ldr	r3, [r7, #0]
 8001f0c:	689b      	ldr	r3, [r3, #8]
 8001f0e:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f16:	683b      	ldr	r3, [r7, #0]
 8001f18:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f1a:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f1c:	6939      	ldr	r1, [r7, #16]
 8001f1e:	3348      	adds	r3, #72	@ 0x48
 8001f20:	00db      	lsls	r3, r3, #3
 8001f22:	440b      	add	r3, r1
 8001f24:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	69db      	ldr	r3, [r3, #28]
 8001f2a:	2b01      	cmp	r3, #1
 8001f2c:	d122      	bne.n	8001f74 <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 8001f2e:	693b      	ldr	r3, [r7, #16]
 8001f30:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 8001f34:	68fb      	ldr	r3, [r7, #12]
 8001f36:	431a      	orrs	r2, r3
 8001f38:	693b      	ldr	r3, [r7, #16]
 8001f3a:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f3e:	683b      	ldr	r3, [r7, #0]
 8001f40:	681b      	ldr	r3, [r3, #0]
 8001f42:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 8001f44:	683b      	ldr	r3, [r7, #0]
 8001f46:	685b      	ldr	r3, [r3, #4]
 8001f48:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f4a:	683a      	ldr	r2, [r7, #0]
 8001f4c:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8001f4e:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8001f50:	693b      	ldr	r3, [r7, #16]
 8001f52:	3248      	adds	r2, #72	@ 0x48
 8001f54:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f58:	683b      	ldr	r3, [r7, #0]
 8001f5a:	689b      	ldr	r3, [r3, #8]
 8001f5c:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8001f5e:	683b      	ldr	r3, [r7, #0]
 8001f60:	68db      	ldr	r3, [r3, #12]
 8001f62:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f64:	683b      	ldr	r3, [r7, #0]
 8001f66:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8001f68:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8001f6a:	6939      	ldr	r1, [r7, #16]
 8001f6c:	3348      	adds	r3, #72	@ 0x48
 8001f6e:	00db      	lsls	r3, r3, #3
 8001f70:	440b      	add	r3, r1
 8001f72:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 8001f74:	683b      	ldr	r3, [r7, #0]
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	2b00      	cmp	r3, #0
 8001f7a:	d109      	bne.n	8001f90 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8001f7c:	693b      	ldr	r3, [r7, #16]
 8001f7e:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	43db      	mvns	r3, r3
 8001f86:	401a      	ands	r2, r3
 8001f88:	693b      	ldr	r3, [r7, #16]
 8001f8a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8001f8e:	e007      	b.n	8001fa0 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8001f90:	693b      	ldr	r3, [r7, #16]
 8001f92:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001f96:	68fb      	ldr	r3, [r7, #12]
 8001f98:	431a      	orrs	r2, r3
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8001fa0:	683b      	ldr	r3, [r7, #0]
 8001fa2:	691b      	ldr	r3, [r3, #16]
 8001fa4:	2b00      	cmp	r3, #0
 8001fa6:	d109      	bne.n	8001fbc <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fa8:	693b      	ldr	r3, [r7, #16]
 8001faa:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fae:	68fb      	ldr	r3, [r7, #12]
 8001fb0:	43db      	mvns	r3, r3
 8001fb2:	401a      	ands	r2, r3
 8001fb4:	693b      	ldr	r3, [r7, #16]
 8001fb6:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8001fba:	e007      	b.n	8001fcc <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8001fbc:	693b      	ldr	r3, [r7, #16]
 8001fbe:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8001fc2:	68fb      	ldr	r3, [r7, #12]
 8001fc4:	431a      	orrs	r2, r3
 8001fc6:	693b      	ldr	r3, [r7, #16]
 8001fc8:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8001fcc:	683b      	ldr	r3, [r7, #0]
 8001fce:	6a1b      	ldr	r3, [r3, #32]
 8001fd0:	2b01      	cmp	r3, #1
 8001fd2:	d107      	bne.n	8001fe4 <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 8001fd4:	693b      	ldr	r3, [r7, #16]
 8001fd6:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8001fda:	68fb      	ldr	r3, [r7, #12]
 8001fdc:	431a      	orrs	r2, r3
 8001fde:	693b      	ldr	r3, [r7, #16]
 8001fe0:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8001fe4:	693b      	ldr	r3, [r7, #16]
 8001fe6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001fea:	f023 0201 	bic.w	r2, r3, #1
 8001fee:	693b      	ldr	r3, [r7, #16]
 8001ff0:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 8001ff4:	2300      	movs	r3, #0
 8001ff6:	e006      	b.n	8002006 <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8001ff8:	687b      	ldr	r3, [r7, #4]
 8001ffa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001ffc:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002004:	2301      	movs	r3, #1
  }
}
 8002006:	4618      	mov	r0, r3
 8002008:	371c      	adds	r7, #28
 800200a:	46bd      	mov	sp, r7
 800200c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002010:	4770      	bx	lr
 8002012:	bf00      	nop
 8002014:	40006400 	.word	0x40006400

08002018 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b084      	sub	sp, #16
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002026:	b2db      	uxtb	r3, r3
 8002028:	2b01      	cmp	r3, #1
 800202a:	d12e      	bne.n	800208a <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2202      	movs	r2, #2
 8002030:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	681b      	ldr	r3, [r3, #0]
 8002038:	681a      	ldr	r2, [r3, #0]
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	681b      	ldr	r3, [r3, #0]
 800203e:	f022 0201 	bic.w	r2, r2, #1
 8002042:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 8002044:	f7ff fe02 	bl	8001c4c <HAL_GetTick>
 8002048:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800204a:	e012      	b.n	8002072 <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 800204c:	f7ff fdfe 	bl	8001c4c <HAL_GetTick>
 8002050:	4602      	mov	r2, r0
 8002052:	68fb      	ldr	r3, [r7, #12]
 8002054:	1ad3      	subs	r3, r2, r3
 8002056:	2b0a      	cmp	r3, #10
 8002058:	d90b      	bls.n	8002072 <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 800205a:	687b      	ldr	r3, [r7, #4]
 800205c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800205e:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2205      	movs	r2, #5
 800206a:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 800206e:	2301      	movs	r3, #1
 8002070:	e012      	b.n	8002098 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	685b      	ldr	r3, [r3, #4]
 8002078:	f003 0301 	and.w	r3, r3, #1
 800207c:	2b00      	cmp	r3, #0
 800207e:	d1e5      	bne.n	800204c <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002080:	687b      	ldr	r3, [r7, #4]
 8002082:	2200      	movs	r2, #0
 8002084:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 8002086:	2300      	movs	r3, #0
 8002088:	e006      	b.n	8002098 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 800208a:	687b      	ldr	r3, [r7, #4]
 800208c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800208e:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002096:	2301      	movs	r3, #1
  }
}
 8002098:	4618      	mov	r0, r3
 800209a:	3710      	adds	r7, #16
 800209c:	46bd      	mov	sp, r7
 800209e:	bd80      	pop	{r7, pc}

080020a0 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 80020a0:	b480      	push	{r7}
 80020a2:	b089      	sub	sp, #36	@ 0x24
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	60f8      	str	r0, [r7, #12]
 80020a8:	60b9      	str	r1, [r7, #8]
 80020aa:	607a      	str	r2, [r7, #4]
 80020ac:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 80020ae:	68fb      	ldr	r3, [r7, #12]
 80020b0:	f893 3020 	ldrb.w	r3, [r3, #32]
 80020b4:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 80020b6:	68fb      	ldr	r3, [r7, #12]
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	689b      	ldr	r3, [r3, #8]
 80020bc:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 80020be:	7ffb      	ldrb	r3, [r7, #31]
 80020c0:	2b01      	cmp	r3, #1
 80020c2:	d003      	beq.n	80020cc <HAL_CAN_AddTxMessage+0x2c>
 80020c4:	7ffb      	ldrb	r3, [r7, #31]
 80020c6:	2b02      	cmp	r3, #2
 80020c8:	f040 80ad 	bne.w	8002226 <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020cc:	69bb      	ldr	r3, [r7, #24]
 80020ce:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 80020d2:	2b00      	cmp	r3, #0
 80020d4:	d10a      	bne.n	80020ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020d6:	69bb      	ldr	r3, [r7, #24]
 80020d8:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80020dc:	2b00      	cmp	r3, #0
 80020de:	d105      	bne.n	80020ec <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80020e6:	2b00      	cmp	r3, #0
 80020e8:	f000 8095 	beq.w	8002216 <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80020ec:	69bb      	ldr	r3, [r7, #24]
 80020ee:	0e1b      	lsrs	r3, r3, #24
 80020f0:	f003 0303 	and.w	r3, r3, #3
 80020f4:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80020f6:	2201      	movs	r2, #1
 80020f8:	697b      	ldr	r3, [r7, #20]
 80020fa:	409a      	lsls	r2, r3
 80020fc:	683b      	ldr	r3, [r7, #0]
 80020fe:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	689b      	ldr	r3, [r3, #8]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d10d      	bne.n	8002124 <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002108:	68bb      	ldr	r3, [r7, #8]
 800210a:	681b      	ldr	r3, [r3, #0]
 800210c:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 800210e:	68bb      	ldr	r3, [r7, #8]
 8002110:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 8002112:	68f9      	ldr	r1, [r7, #12]
 8002114:	6809      	ldr	r1, [r1, #0]
 8002116:	431a      	orrs	r2, r3
 8002118:	697b      	ldr	r3, [r7, #20]
 800211a:	3318      	adds	r3, #24
 800211c:	011b      	lsls	r3, r3, #4
 800211e:	440b      	add	r3, r1
 8002120:	601a      	str	r2, [r3, #0]
 8002122:	e00f      	b.n	8002144 <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002124:	68bb      	ldr	r3, [r7, #8]
 8002126:	685b      	ldr	r3, [r3, #4]
 8002128:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 800212a:	68bb      	ldr	r3, [r7, #8]
 800212c:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800212e:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 8002130:	68bb      	ldr	r3, [r7, #8]
 8002132:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002134:	68f9      	ldr	r1, [r7, #12]
 8002136:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002138:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 800213a:	697b      	ldr	r3, [r7, #20]
 800213c:	3318      	adds	r3, #24
 800213e:	011b      	lsls	r3, r3, #4
 8002140:	440b      	add	r3, r1
 8002142:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	6819      	ldr	r1, [r3, #0]
 8002148:	68bb      	ldr	r3, [r7, #8]
 800214a:	691a      	ldr	r2, [r3, #16]
 800214c:	697b      	ldr	r3, [r7, #20]
 800214e:	3318      	adds	r3, #24
 8002150:	011b      	lsls	r3, r3, #4
 8002152:	440b      	add	r3, r1
 8002154:	3304      	adds	r3, #4
 8002156:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002158:	68bb      	ldr	r3, [r7, #8]
 800215a:	7d1b      	ldrb	r3, [r3, #20]
 800215c:	2b01      	cmp	r3, #1
 800215e:	d111      	bne.n	8002184 <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002160:	68fb      	ldr	r3, [r7, #12]
 8002162:	681a      	ldr	r2, [r3, #0]
 8002164:	697b      	ldr	r3, [r7, #20]
 8002166:	3318      	adds	r3, #24
 8002168:	011b      	lsls	r3, r3, #4
 800216a:	4413      	add	r3, r2
 800216c:	3304      	adds	r3, #4
 800216e:	681b      	ldr	r3, [r3, #0]
 8002170:	68fa      	ldr	r2, [r7, #12]
 8002172:	6811      	ldr	r1, [r2, #0]
 8002174:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002178:	697b      	ldr	r3, [r7, #20]
 800217a:	3318      	adds	r3, #24
 800217c:	011b      	lsls	r3, r3, #4
 800217e:	440b      	add	r3, r1
 8002180:	3304      	adds	r3, #4
 8002182:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 8002184:	687b      	ldr	r3, [r7, #4]
 8002186:	3307      	adds	r3, #7
 8002188:	781b      	ldrb	r3, [r3, #0]
 800218a:	061a      	lsls	r2, r3, #24
 800218c:	687b      	ldr	r3, [r7, #4]
 800218e:	3306      	adds	r3, #6
 8002190:	781b      	ldrb	r3, [r3, #0]
 8002192:	041b      	lsls	r3, r3, #16
 8002194:	431a      	orrs	r2, r3
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	3305      	adds	r3, #5
 800219a:	781b      	ldrb	r3, [r3, #0]
 800219c:	021b      	lsls	r3, r3, #8
 800219e:	4313      	orrs	r3, r2
 80021a0:	687a      	ldr	r2, [r7, #4]
 80021a2:	3204      	adds	r2, #4
 80021a4:	7812      	ldrb	r2, [r2, #0]
 80021a6:	4610      	mov	r0, r2
 80021a8:	68fa      	ldr	r2, [r7, #12]
 80021aa:	6811      	ldr	r1, [r2, #0]
 80021ac:	ea43 0200 	orr.w	r2, r3, r0
 80021b0:	697b      	ldr	r3, [r7, #20]
 80021b2:	011b      	lsls	r3, r3, #4
 80021b4:	440b      	add	r3, r1
 80021b6:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 80021ba:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	3303      	adds	r3, #3
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	061a      	lsls	r2, r3, #24
 80021c4:	687b      	ldr	r3, [r7, #4]
 80021c6:	3302      	adds	r3, #2
 80021c8:	781b      	ldrb	r3, [r3, #0]
 80021ca:	041b      	lsls	r3, r3, #16
 80021cc:	431a      	orrs	r2, r3
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	3301      	adds	r3, #1
 80021d2:	781b      	ldrb	r3, [r3, #0]
 80021d4:	021b      	lsls	r3, r3, #8
 80021d6:	4313      	orrs	r3, r2
 80021d8:	687a      	ldr	r2, [r7, #4]
 80021da:	7812      	ldrb	r2, [r2, #0]
 80021dc:	4610      	mov	r0, r2
 80021de:	68fa      	ldr	r2, [r7, #12]
 80021e0:	6811      	ldr	r1, [r2, #0]
 80021e2:	ea43 0200 	orr.w	r2, r3, r0
 80021e6:	697b      	ldr	r3, [r7, #20]
 80021e8:	011b      	lsls	r3, r3, #4
 80021ea:	440b      	add	r3, r1
 80021ec:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80021f0:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80021f2:	68fb      	ldr	r3, [r7, #12]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	697b      	ldr	r3, [r7, #20]
 80021f8:	3318      	adds	r3, #24
 80021fa:	011b      	lsls	r3, r3, #4
 80021fc:	4413      	add	r3, r2
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	68fa      	ldr	r2, [r7, #12]
 8002202:	6811      	ldr	r1, [r2, #0]
 8002204:	f043 0201 	orr.w	r2, r3, #1
 8002208:	697b      	ldr	r3, [r7, #20]
 800220a:	3318      	adds	r3, #24
 800220c:	011b      	lsls	r3, r3, #4
 800220e:	440b      	add	r3, r1
 8002210:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 8002212:	2300      	movs	r3, #0
 8002214:	e00e      	b.n	8002234 <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800221a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800221e:	68fb      	ldr	r3, [r7, #12]
 8002220:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 8002222:	2301      	movs	r3, #1
 8002224:	e006      	b.n	8002234 <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002226:	68fb      	ldr	r3, [r7, #12]
 8002228:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800222a:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800222e:	68fb      	ldr	r3, [r7, #12]
 8002230:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002232:	2301      	movs	r3, #1
  }
}
 8002234:	4618      	mov	r0, r3
 8002236:	3724      	adds	r7, #36	@ 0x24
 8002238:	46bd      	mov	sp, r7
 800223a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800223e:	4770      	bx	lr

08002240 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002240:	b480      	push	{r7}
 8002242:	b087      	sub	sp, #28
 8002244:	af00      	add	r7, sp, #0
 8002246:	60f8      	str	r0, [r7, #12]
 8002248:	60b9      	str	r1, [r7, #8]
 800224a:	607a      	str	r2, [r7, #4]
 800224c:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800224e:	68fb      	ldr	r3, [r7, #12]
 8002250:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002254:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 8002256:	7dfb      	ldrb	r3, [r7, #23]
 8002258:	2b01      	cmp	r3, #1
 800225a:	d003      	beq.n	8002264 <HAL_CAN_GetRxMessage+0x24>
 800225c:	7dfb      	ldrb	r3, [r7, #23]
 800225e:	2b02      	cmp	r3, #2
 8002260:	f040 8103 	bne.w	800246a <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	2b00      	cmp	r3, #0
 8002268:	d10e      	bne.n	8002288 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 800226a:	68fb      	ldr	r3, [r7, #12]
 800226c:	681b      	ldr	r3, [r3, #0]
 800226e:	68db      	ldr	r3, [r3, #12]
 8002270:	f003 0303 	and.w	r3, r3, #3
 8002274:	2b00      	cmp	r3, #0
 8002276:	d116      	bne.n	80022a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800227c:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002280:	68fb      	ldr	r3, [r7, #12]
 8002282:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e0f7      	b.n	8002478 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	691b      	ldr	r3, [r3, #16]
 800228e:	f003 0303 	and.w	r3, r3, #3
 8002292:	2b00      	cmp	r3, #0
 8002294:	d107      	bne.n	80022a6 <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800229a:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 800229e:	68fb      	ldr	r3, [r7, #12]
 80022a0:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 80022a2:	2301      	movs	r3, #1
 80022a4:	e0e8      	b.n	8002478 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681a      	ldr	r2, [r3, #0]
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	331b      	adds	r3, #27
 80022ae:	011b      	lsls	r3, r3, #4
 80022b0:	4413      	add	r3, r2
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f003 0204 	and.w	r2, r3, #4
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	689b      	ldr	r3, [r3, #8]
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d10c      	bne.n	80022de <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	68bb      	ldr	r3, [r7, #8]
 80022ca:	331b      	adds	r3, #27
 80022cc:	011b      	lsls	r3, r3, #4
 80022ce:	4413      	add	r3, r2
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	0d5b      	lsrs	r3, r3, #21
 80022d4:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	601a      	str	r2, [r3, #0]
 80022dc:	e00b      	b.n	80022f6 <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80022de:	68fb      	ldr	r3, [r7, #12]
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	68bb      	ldr	r3, [r7, #8]
 80022e4:	331b      	adds	r3, #27
 80022e6:	011b      	lsls	r3, r3, #4
 80022e8:	4413      	add	r3, r2
 80022ea:	681b      	ldr	r3, [r3, #0]
 80022ec:	08db      	lsrs	r3, r3, #3
 80022ee:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80022f2:	687b      	ldr	r3, [r7, #4]
 80022f4:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80022f6:	68fb      	ldr	r3, [r7, #12]
 80022f8:	681a      	ldr	r2, [r3, #0]
 80022fa:	68bb      	ldr	r3, [r7, #8]
 80022fc:	331b      	adds	r3, #27
 80022fe:	011b      	lsls	r3, r3, #4
 8002300:	4413      	add	r3, r2
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f003 0202 	and.w	r2, r3, #2
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 800230c:	68fb      	ldr	r3, [r7, #12]
 800230e:	681a      	ldr	r2, [r3, #0]
 8002310:	68bb      	ldr	r3, [r7, #8]
 8002312:	331b      	adds	r3, #27
 8002314:	011b      	lsls	r3, r3, #4
 8002316:	4413      	add	r3, r2
 8002318:	3304      	adds	r3, #4
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f003 0308 	and.w	r3, r3, #8
 8002320:	2b00      	cmp	r3, #0
 8002322:	d003      	beq.n	800232c <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 8002324:	687b      	ldr	r3, [r7, #4]
 8002326:	2208      	movs	r2, #8
 8002328:	611a      	str	r2, [r3, #16]
 800232a:	e00b      	b.n	8002344 <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 800232c:	68fb      	ldr	r3, [r7, #12]
 800232e:	681a      	ldr	r2, [r3, #0]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	331b      	adds	r3, #27
 8002334:	011b      	lsls	r3, r3, #4
 8002336:	4413      	add	r3, r2
 8002338:	3304      	adds	r3, #4
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	f003 020f 	and.w	r2, r3, #15
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 8002344:	68fb      	ldr	r3, [r7, #12]
 8002346:	681a      	ldr	r2, [r3, #0]
 8002348:	68bb      	ldr	r3, [r7, #8]
 800234a:	331b      	adds	r3, #27
 800234c:	011b      	lsls	r3, r3, #4
 800234e:	4413      	add	r3, r2
 8002350:	3304      	adds	r3, #4
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	0a1b      	lsrs	r3, r3, #8
 8002356:	b2da      	uxtb	r2, r3
 8002358:	687b      	ldr	r3, [r7, #4]
 800235a:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 800235c:	68fb      	ldr	r3, [r7, #12]
 800235e:	681a      	ldr	r2, [r3, #0]
 8002360:	68bb      	ldr	r3, [r7, #8]
 8002362:	331b      	adds	r3, #27
 8002364:	011b      	lsls	r3, r3, #4
 8002366:	4413      	add	r3, r2
 8002368:	3304      	adds	r3, #4
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	0c1b      	lsrs	r3, r3, #16
 800236e:	b29a      	uxth	r2, r3
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 8002374:	68fb      	ldr	r3, [r7, #12]
 8002376:	681a      	ldr	r2, [r3, #0]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	011b      	lsls	r3, r3, #4
 800237c:	4413      	add	r3, r2
 800237e:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	b2da      	uxtb	r2, r3
 8002386:	683b      	ldr	r3, [r7, #0]
 8002388:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 800238a:	68fb      	ldr	r3, [r7, #12]
 800238c:	681a      	ldr	r2, [r3, #0]
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	011b      	lsls	r3, r3, #4
 8002392:	4413      	add	r3, r2
 8002394:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002398:	681b      	ldr	r3, [r3, #0]
 800239a:	0a1a      	lsrs	r2, r3, #8
 800239c:	683b      	ldr	r3, [r7, #0]
 800239e:	3301      	adds	r3, #1
 80023a0:	b2d2      	uxtb	r2, r2
 80023a2:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 80023a4:	68fb      	ldr	r3, [r7, #12]
 80023a6:	681a      	ldr	r2, [r3, #0]
 80023a8:	68bb      	ldr	r3, [r7, #8]
 80023aa:	011b      	lsls	r3, r3, #4
 80023ac:	4413      	add	r3, r2
 80023ae:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	0c1a      	lsrs	r2, r3, #16
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	3302      	adds	r3, #2
 80023ba:	b2d2      	uxtb	r2, r2
 80023bc:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 80023be:	68fb      	ldr	r3, [r7, #12]
 80023c0:	681a      	ldr	r2, [r3, #0]
 80023c2:	68bb      	ldr	r3, [r7, #8]
 80023c4:	011b      	lsls	r3, r3, #4
 80023c6:	4413      	add	r3, r2
 80023c8:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	0e1a      	lsrs	r2, r3, #24
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	3303      	adds	r3, #3
 80023d4:	b2d2      	uxtb	r2, r2
 80023d6:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80023d8:	68fb      	ldr	r3, [r7, #12]
 80023da:	681a      	ldr	r2, [r3, #0]
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	011b      	lsls	r3, r3, #4
 80023e0:	4413      	add	r3, r2
 80023e2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023e6:	681a      	ldr	r2, [r3, #0]
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	3304      	adds	r3, #4
 80023ec:	b2d2      	uxtb	r2, r2
 80023ee:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80023f0:	68fb      	ldr	r3, [r7, #12]
 80023f2:	681a      	ldr	r2, [r3, #0]
 80023f4:	68bb      	ldr	r3, [r7, #8]
 80023f6:	011b      	lsls	r3, r3, #4
 80023f8:	4413      	add	r3, r2
 80023fa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	0a1a      	lsrs	r2, r3, #8
 8002402:	683b      	ldr	r3, [r7, #0]
 8002404:	3305      	adds	r3, #5
 8002406:	b2d2      	uxtb	r2, r2
 8002408:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	681a      	ldr	r2, [r3, #0]
 800240e:	68bb      	ldr	r3, [r7, #8]
 8002410:	011b      	lsls	r3, r3, #4
 8002412:	4413      	add	r3, r2
 8002414:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002418:	681b      	ldr	r3, [r3, #0]
 800241a:	0c1a      	lsrs	r2, r3, #16
 800241c:	683b      	ldr	r3, [r7, #0]
 800241e:	3306      	adds	r3, #6
 8002420:	b2d2      	uxtb	r2, r2
 8002422:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 8002424:	68fb      	ldr	r3, [r7, #12]
 8002426:	681a      	ldr	r2, [r3, #0]
 8002428:	68bb      	ldr	r3, [r7, #8]
 800242a:	011b      	lsls	r3, r3, #4
 800242c:	4413      	add	r3, r2
 800242e:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 8002432:	681b      	ldr	r3, [r3, #0]
 8002434:	0e1a      	lsrs	r2, r3, #24
 8002436:	683b      	ldr	r3, [r7, #0]
 8002438:	3307      	adds	r3, #7
 800243a:	b2d2      	uxtb	r2, r2
 800243c:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800243e:	68bb      	ldr	r3, [r7, #8]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d108      	bne.n	8002456 <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	68da      	ldr	r2, [r3, #12]
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	681b      	ldr	r3, [r3, #0]
 800244e:	f042 0220 	orr.w	r2, r2, #32
 8002452:	60da      	str	r2, [r3, #12]
 8002454:	e007      	b.n	8002466 <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 8002456:	68fb      	ldr	r3, [r7, #12]
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	691a      	ldr	r2, [r3, #16]
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	681b      	ldr	r3, [r3, #0]
 8002460:	f042 0220 	orr.w	r2, r2, #32
 8002464:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 8002466:	2300      	movs	r3, #0
 8002468:	e006      	b.n	8002478 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800246e:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 8002476:	2301      	movs	r3, #1
  }
}
 8002478:	4618      	mov	r0, r3
 800247a:	371c      	adds	r7, #28
 800247c:	46bd      	mov	sp, r7
 800247e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002482:	4770      	bx	lr

08002484 <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 8002484:	b480      	push	{r7}
 8002486:	b085      	sub	sp, #20
 8002488:	af00      	add	r7, sp, #0
 800248a:	6078      	str	r0, [r7, #4]
 800248c:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002494:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 8002496:	7bfb      	ldrb	r3, [r7, #15]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d002      	beq.n	80024a2 <HAL_CAN_ActivateNotification+0x1e>
 800249c:	7bfb      	ldrb	r3, [r7, #15]
 800249e:	2b02      	cmp	r3, #2
 80024a0:	d109      	bne.n	80024b6 <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 80024a2:	687b      	ldr	r3, [r7, #4]
 80024a4:	681b      	ldr	r3, [r3, #0]
 80024a6:	6959      	ldr	r1, [r3, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	683a      	ldr	r2, [r7, #0]
 80024ae:	430a      	orrs	r2, r1
 80024b0:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 80024b2:	2300      	movs	r3, #0
 80024b4:	e006      	b.n	80024c4 <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024ba:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024c2:	2301      	movs	r3, #1
  }
}
 80024c4:	4618      	mov	r0, r3
 80024c6:	3714      	adds	r7, #20
 80024c8:	46bd      	mov	sp, r7
 80024ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024ce:	4770      	bx	lr

080024d0 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 80024d0:	b580      	push	{r7, lr}
 80024d2:	b08a      	sub	sp, #40	@ 0x28
 80024d4:	af00      	add	r7, sp, #0
 80024d6:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80024d8:	2300      	movs	r3, #0
 80024da:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	695b      	ldr	r3, [r3, #20]
 80024e2:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	685b      	ldr	r3, [r3, #4]
 80024ea:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	689b      	ldr	r3, [r3, #8]
 80024f2:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68db      	ldr	r3, [r3, #12]
 80024fa:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	691b      	ldr	r3, [r3, #16]
 8002502:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	699b      	ldr	r3, [r3, #24]
 800250a:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 800250c:	6a3b      	ldr	r3, [r7, #32]
 800250e:	f003 0301 	and.w	r3, r3, #1
 8002512:	2b00      	cmp	r3, #0
 8002514:	d07c      	beq.n	8002610 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8002516:	69bb      	ldr	r3, [r7, #24]
 8002518:	f003 0301 	and.w	r3, r3, #1
 800251c:	2b00      	cmp	r3, #0
 800251e:	d023      	beq.n	8002568 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8002520:	687b      	ldr	r3, [r7, #4]
 8002522:	681b      	ldr	r3, [r3, #0]
 8002524:	2201      	movs	r2, #1
 8002526:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8002528:	69bb      	ldr	r3, [r7, #24]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	2b00      	cmp	r3, #0
 8002530:	d003      	beq.n	800253a <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8002532:	6878      	ldr	r0, [r7, #4]
 8002534:	f7fe fcb6 	bl	8000ea4 <HAL_CAN_TxMailbox0CompleteCallback>
 8002538:	e016      	b.n	8002568 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 800253a:	69bb      	ldr	r3, [r7, #24]
 800253c:	f003 0304 	and.w	r3, r3, #4
 8002540:	2b00      	cmp	r3, #0
 8002542:	d004      	beq.n	800254e <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002544:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002546:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 800254a:	627b      	str	r3, [r7, #36]	@ 0x24
 800254c:	e00c      	b.n	8002568 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 800254e:	69bb      	ldr	r3, [r7, #24]
 8002550:	f003 0308 	and.w	r3, r3, #8
 8002554:	2b00      	cmp	r3, #0
 8002556:	d004      	beq.n	8002562 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800255a:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002560:	e002      	b.n	8002568 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002562:	6878      	ldr	r0, [r7, #4]
 8002564:	f000 f96b 	bl	800283e <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002568:	69bb      	ldr	r3, [r7, #24]
 800256a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800256e:	2b00      	cmp	r3, #0
 8002570:	d024      	beq.n	80025bc <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002572:	687b      	ldr	r3, [r7, #4]
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800257a:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 800257c:	69bb      	ldr	r3, [r7, #24]
 800257e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002582:	2b00      	cmp	r3, #0
 8002584:	d003      	beq.n	800258e <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002586:	6878      	ldr	r0, [r7, #4]
 8002588:	f7fe fc96 	bl	8000eb8 <HAL_CAN_TxMailbox1CompleteCallback>
 800258c:	e016      	b.n	80025bc <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 800258e:	69bb      	ldr	r3, [r7, #24]
 8002590:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002594:	2b00      	cmp	r3, #0
 8002596:	d004      	beq.n	80025a2 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002598:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800259a:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 800259e:	627b      	str	r3, [r7, #36]	@ 0x24
 80025a0:	e00c      	b.n	80025bc <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	d004      	beq.n	80025b6 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 80025ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ae:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80025b2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025b4:	e002      	b.n	80025bc <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 80025b6:	6878      	ldr	r0, [r7, #4]
 80025b8:	f000 f94b 	bl	8002852 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 80025bc:	69bb      	ldr	r3, [r7, #24]
 80025be:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025c2:	2b00      	cmp	r3, #0
 80025c4:	d024      	beq.n	8002610 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 80025ce:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 80025d0:	69bb      	ldr	r3, [r7, #24]
 80025d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d003      	beq.n	80025e2 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 80025da:	6878      	ldr	r0, [r7, #4]
 80025dc:	f7fe fc76 	bl	8000ecc <HAL_CAN_TxMailbox2CompleteCallback>
 80025e0:	e016      	b.n	8002610 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 80025e2:	69bb      	ldr	r3, [r7, #24]
 80025e4:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d004      	beq.n	80025f6 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 80025ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025ee:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80025f2:	627b      	str	r3, [r7, #36]	@ 0x24
 80025f4:	e00c      	b.n	8002610 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 80025f6:	69bb      	ldr	r3, [r7, #24]
 80025f8:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d004      	beq.n	800260a <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002600:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002602:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002606:	627b      	str	r3, [r7, #36]	@ 0x24
 8002608:	e002      	b.n	8002610 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 800260a:	6878      	ldr	r0, [r7, #4]
 800260c:	f000 f92b 	bl	8002866 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002610:	6a3b      	ldr	r3, [r7, #32]
 8002612:	f003 0308 	and.w	r3, r3, #8
 8002616:	2b00      	cmp	r3, #0
 8002618:	d00c      	beq.n	8002634 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 800261a:	697b      	ldr	r3, [r7, #20]
 800261c:	f003 0310 	and.w	r3, r3, #16
 8002620:	2b00      	cmp	r3, #0
 8002622:	d007      	beq.n	8002634 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002624:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002626:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800262a:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	2210      	movs	r2, #16
 8002632:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002634:	6a3b      	ldr	r3, [r7, #32]
 8002636:	f003 0304 	and.w	r3, r3, #4
 800263a:	2b00      	cmp	r3, #0
 800263c:	d00b      	beq.n	8002656 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 800263e:	697b      	ldr	r3, [r7, #20]
 8002640:	f003 0308 	and.w	r3, r3, #8
 8002644:	2b00      	cmp	r3, #0
 8002646:	d006      	beq.n	8002656 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	2208      	movs	r2, #8
 800264e:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002650:	6878      	ldr	r0, [r7, #4]
 8002652:	f000 f912 	bl	800287a <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002656:	6a3b      	ldr	r3, [r7, #32]
 8002658:	f003 0302 	and.w	r3, r3, #2
 800265c:	2b00      	cmp	r3, #0
 800265e:	d009      	beq.n	8002674 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	68db      	ldr	r3, [r3, #12]
 8002666:	f003 0303 	and.w	r3, r3, #3
 800266a:	2b00      	cmp	r3, #0
 800266c:	d002      	beq.n	8002674 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 800266e:	6878      	ldr	r0, [r7, #4]
 8002670:	f7fe fbb8 	bl	8000de4 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002674:	6a3b      	ldr	r3, [r7, #32]
 8002676:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800267a:	2b00      	cmp	r3, #0
 800267c:	d00c      	beq.n	8002698 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 800267e:	693b      	ldr	r3, [r7, #16]
 8002680:	f003 0310 	and.w	r3, r3, #16
 8002684:	2b00      	cmp	r3, #0
 8002686:	d007      	beq.n	8002698 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002688:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800268a:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800268e:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	2210      	movs	r2, #16
 8002696:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002698:	6a3b      	ldr	r3, [r7, #32]
 800269a:	f003 0320 	and.w	r3, r3, #32
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d00b      	beq.n	80026ba <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 80026a2:	693b      	ldr	r3, [r7, #16]
 80026a4:	f003 0308 	and.w	r3, r3, #8
 80026a8:	2b00      	cmp	r3, #0
 80026aa:	d006      	beq.n	80026ba <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 80026ac:	687b      	ldr	r3, [r7, #4]
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	2208      	movs	r2, #8
 80026b2:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 80026b4:	6878      	ldr	r0, [r7, #4]
 80026b6:	f000 f8f4 	bl	80028a2 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 80026ba:	6a3b      	ldr	r3, [r7, #32]
 80026bc:	f003 0310 	and.w	r3, r3, #16
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d009      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	691b      	ldr	r3, [r3, #16]
 80026ca:	f003 0303 	and.w	r3, r3, #3
 80026ce:	2b00      	cmp	r3, #0
 80026d0:	d002      	beq.n	80026d8 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f000 f8db 	bl	800288e <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 80026d8:	6a3b      	ldr	r3, [r7, #32]
 80026da:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d00b      	beq.n	80026fa <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 80026e2:	69fb      	ldr	r3, [r7, #28]
 80026e4:	f003 0310 	and.w	r3, r3, #16
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	d006      	beq.n	80026fa <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 80026ec:	687b      	ldr	r3, [r7, #4]
 80026ee:	681b      	ldr	r3, [r3, #0]
 80026f0:	2210      	movs	r2, #16
 80026f2:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 80026f4:	6878      	ldr	r0, [r7, #4]
 80026f6:	f000 f8de 	bl	80028b6 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 80026fa:	6a3b      	ldr	r3, [r7, #32]
 80026fc:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002700:	2b00      	cmp	r3, #0
 8002702:	d00b      	beq.n	800271c <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002704:	69fb      	ldr	r3, [r7, #28]
 8002706:	f003 0308 	and.w	r3, r3, #8
 800270a:	2b00      	cmp	r3, #0
 800270c:	d006      	beq.n	800271c <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	681b      	ldr	r3, [r3, #0]
 8002712:	2208      	movs	r2, #8
 8002714:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002716:	6878      	ldr	r0, [r7, #4]
 8002718:	f000 f8d7 	bl	80028ca <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800271c:	6a3b      	ldr	r3, [r7, #32]
 800271e:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002722:	2b00      	cmp	r3, #0
 8002724:	d07b      	beq.n	800281e <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002726:	69fb      	ldr	r3, [r7, #28]
 8002728:	f003 0304 	and.w	r3, r3, #4
 800272c:	2b00      	cmp	r3, #0
 800272e:	d072      	beq.n	8002816 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002730:	6a3b      	ldr	r3, [r7, #32]
 8002732:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002736:	2b00      	cmp	r3, #0
 8002738:	d008      	beq.n	800274c <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800273a:	68fb      	ldr	r3, [r7, #12]
 800273c:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002740:	2b00      	cmp	r3, #0
 8002742:	d003      	beq.n	800274c <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002744:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002746:	f043 0301 	orr.w	r3, r3, #1
 800274a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800274c:	6a3b      	ldr	r3, [r7, #32]
 800274e:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002752:	2b00      	cmp	r3, #0
 8002754:	d008      	beq.n	8002768 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002756:	68fb      	ldr	r3, [r7, #12]
 8002758:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800275c:	2b00      	cmp	r3, #0
 800275e:	d003      	beq.n	8002768 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002760:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002762:	f043 0302 	orr.w	r3, r3, #2
 8002766:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002768:	6a3b      	ldr	r3, [r7, #32]
 800276a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800276e:	2b00      	cmp	r3, #0
 8002770:	d008      	beq.n	8002784 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002772:	68fb      	ldr	r3, [r7, #12]
 8002774:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002778:	2b00      	cmp	r3, #0
 800277a:	d003      	beq.n	8002784 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800277c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800277e:	f043 0304 	orr.w	r3, r3, #4
 8002782:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002784:	6a3b      	ldr	r3, [r7, #32]
 8002786:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800278a:	2b00      	cmp	r3, #0
 800278c:	d043      	beq.n	8002816 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002794:	2b00      	cmp	r3, #0
 8002796:	d03e      	beq.n	8002816 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002798:	68fb      	ldr	r3, [r7, #12]
 800279a:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 800279e:	2b60      	cmp	r3, #96	@ 0x60
 80027a0:	d02b      	beq.n	80027fa <HAL_CAN_IRQHandler+0x32a>
 80027a2:	2b60      	cmp	r3, #96	@ 0x60
 80027a4:	d82e      	bhi.n	8002804 <HAL_CAN_IRQHandler+0x334>
 80027a6:	2b50      	cmp	r3, #80	@ 0x50
 80027a8:	d022      	beq.n	80027f0 <HAL_CAN_IRQHandler+0x320>
 80027aa:	2b50      	cmp	r3, #80	@ 0x50
 80027ac:	d82a      	bhi.n	8002804 <HAL_CAN_IRQHandler+0x334>
 80027ae:	2b40      	cmp	r3, #64	@ 0x40
 80027b0:	d019      	beq.n	80027e6 <HAL_CAN_IRQHandler+0x316>
 80027b2:	2b40      	cmp	r3, #64	@ 0x40
 80027b4:	d826      	bhi.n	8002804 <HAL_CAN_IRQHandler+0x334>
 80027b6:	2b30      	cmp	r3, #48	@ 0x30
 80027b8:	d010      	beq.n	80027dc <HAL_CAN_IRQHandler+0x30c>
 80027ba:	2b30      	cmp	r3, #48	@ 0x30
 80027bc:	d822      	bhi.n	8002804 <HAL_CAN_IRQHandler+0x334>
 80027be:	2b10      	cmp	r3, #16
 80027c0:	d002      	beq.n	80027c8 <HAL_CAN_IRQHandler+0x2f8>
 80027c2:	2b20      	cmp	r3, #32
 80027c4:	d005      	beq.n	80027d2 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80027c6:	e01d      	b.n	8002804 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80027c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027ca:	f043 0308 	orr.w	r3, r3, #8
 80027ce:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027d0:	e019      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80027d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027d4:	f043 0310 	orr.w	r3, r3, #16
 80027d8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027da:	e014      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80027dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027de:	f043 0320 	orr.w	r3, r3, #32
 80027e2:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027e4:	e00f      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80027e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027e8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80027ec:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027ee:	e00a      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80027f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027f2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80027f6:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 80027f8:	e005      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80027fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80027fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002800:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002802:	e000      	b.n	8002806 <HAL_CAN_IRQHandler+0x336>
            break;
 8002804:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	699a      	ldr	r2, [r3, #24]
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002814:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	2204      	movs	r2, #4
 800281c:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 800281e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002820:	2b00      	cmp	r3, #0
 8002822:	d008      	beq.n	8002836 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002828:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800282a:	431a      	orrs	r2, r3
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002830:	6878      	ldr	r0, [r7, #4]
 8002832:	f7fe fb55 	bl	8000ee0 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002836:	bf00      	nop
 8002838:	3728      	adds	r7, #40	@ 0x28
 800283a:	46bd      	mov	sp, r7
 800283c:	bd80      	pop	{r7, pc}

0800283e <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800283e:	b480      	push	{r7}
 8002840:	b083      	sub	sp, #12
 8002842:	af00      	add	r7, sp, #0
 8002844:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002846:	bf00      	nop
 8002848:	370c      	adds	r7, #12
 800284a:	46bd      	mov	sp, r7
 800284c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002850:	4770      	bx	lr

08002852 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002852:	b480      	push	{r7}
 8002854:	b083      	sub	sp, #12
 8002856:	af00      	add	r7, sp, #0
 8002858:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 800285a:	bf00      	nop
 800285c:	370c      	adds	r7, #12
 800285e:	46bd      	mov	sp, r7
 8002860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002864:	4770      	bx	lr

08002866 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002866:	b480      	push	{r7}
 8002868:	b083      	sub	sp, #12
 800286a:	af00      	add	r7, sp, #0
 800286c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 800286e:	bf00      	nop
 8002870:	370c      	adds	r7, #12
 8002872:	46bd      	mov	sp, r7
 8002874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002878:	4770      	bx	lr

0800287a <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 800287a:	b480      	push	{r7}
 800287c:	b083      	sub	sp, #12
 800287e:	af00      	add	r7, sp, #0
 8002880:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002882:	bf00      	nop
 8002884:	370c      	adds	r7, #12
 8002886:	46bd      	mov	sp, r7
 8002888:	f85d 7b04 	ldr.w	r7, [sp], #4
 800288c:	4770      	bx	lr

0800288e <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 800288e:	b480      	push	{r7}
 8002890:	b083      	sub	sp, #12
 8002892:	af00      	add	r7, sp, #0
 8002894:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002896:	bf00      	nop
 8002898:	370c      	adds	r7, #12
 800289a:	46bd      	mov	sp, r7
 800289c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a0:	4770      	bx	lr

080028a2 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80028a2:	b480      	push	{r7}
 80028a4:	b083      	sub	sp, #12
 80028a6:	af00      	add	r7, sp, #0
 80028a8:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80028aa:	bf00      	nop
 80028ac:	370c      	adds	r7, #12
 80028ae:	46bd      	mov	sp, r7
 80028b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028b4:	4770      	bx	lr

080028b6 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 80028b6:	b480      	push	{r7}
 80028b8:	b083      	sub	sp, #12
 80028ba:	af00      	add	r7, sp, #0
 80028bc:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 80028be:	bf00      	nop
 80028c0:	370c      	adds	r7, #12
 80028c2:	46bd      	mov	sp, r7
 80028c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028c8:	4770      	bx	lr

080028ca <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 80028ca:	b480      	push	{r7}
 80028cc:	b083      	sub	sp, #12
 80028ce:	af00      	add	r7, sp, #0
 80028d0:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 80028d2:	bf00      	nop
 80028d4:	370c      	adds	r7, #12
 80028d6:	46bd      	mov	sp, r7
 80028d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028dc:	4770      	bx	lr

080028de <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 80028de:	b480      	push	{r7}
 80028e0:	b083      	sub	sp, #12
 80028e2:	af00      	add	r7, sp, #0
 80028e4:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 80028ea:	4618      	mov	r0, r3
 80028ec:	370c      	adds	r7, #12
 80028ee:	46bd      	mov	sp, r7
 80028f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f4:	4770      	bx	lr
	...

080028f8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b085      	sub	sp, #20
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	f003 0307 	and.w	r3, r3, #7
 8002906:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002908:	4b0c      	ldr	r3, [pc, #48]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800290a:	68db      	ldr	r3, [r3, #12]
 800290c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290e:	68ba      	ldr	r2, [r7, #8]
 8002910:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002914:	4013      	ands	r3, r2
 8002916:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002918:	68fb      	ldr	r3, [r7, #12]
 800291a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800291c:	68bb      	ldr	r3, [r7, #8]
 800291e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002920:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002924:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002928:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800292a:	4a04      	ldr	r2, [pc, #16]	@ (800293c <__NVIC_SetPriorityGrouping+0x44>)
 800292c:	68bb      	ldr	r3, [r7, #8]
 800292e:	60d3      	str	r3, [r2, #12]
}
 8002930:	bf00      	nop
 8002932:	3714      	adds	r7, #20
 8002934:	46bd      	mov	sp, r7
 8002936:	f85d 7b04 	ldr.w	r7, [sp], #4
 800293a:	4770      	bx	lr
 800293c:	e000ed00 	.word	0xe000ed00

08002940 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002940:	b480      	push	{r7}
 8002942:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002944:	4b04      	ldr	r3, [pc, #16]	@ (8002958 <__NVIC_GetPriorityGrouping+0x18>)
 8002946:	68db      	ldr	r3, [r3, #12]
 8002948:	0a1b      	lsrs	r3, r3, #8
 800294a:	f003 0307 	and.w	r3, r3, #7
}
 800294e:	4618      	mov	r0, r3
 8002950:	46bd      	mov	sp, r7
 8002952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002956:	4770      	bx	lr
 8002958:	e000ed00 	.word	0xe000ed00

0800295c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800295c:	b480      	push	{r7}
 800295e:	b083      	sub	sp, #12
 8002960:	af00      	add	r7, sp, #0
 8002962:	4603      	mov	r3, r0
 8002964:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002966:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800296a:	2b00      	cmp	r3, #0
 800296c:	db0b      	blt.n	8002986 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296e:	79fb      	ldrb	r3, [r7, #7]
 8002970:	f003 021f 	and.w	r2, r3, #31
 8002974:	4907      	ldr	r1, [pc, #28]	@ (8002994 <__NVIC_EnableIRQ+0x38>)
 8002976:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800297a:	095b      	lsrs	r3, r3, #5
 800297c:	2001      	movs	r0, #1
 800297e:	fa00 f202 	lsl.w	r2, r0, r2
 8002982:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002986:	bf00      	nop
 8002988:	370c      	adds	r7, #12
 800298a:	46bd      	mov	sp, r7
 800298c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002990:	4770      	bx	lr
 8002992:	bf00      	nop
 8002994:	e000e100 	.word	0xe000e100

08002998 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	4603      	mov	r3, r0
 80029a0:	6039      	str	r1, [r7, #0]
 80029a2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a8:	2b00      	cmp	r3, #0
 80029aa:	db0a      	blt.n	80029c2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029ac:	683b      	ldr	r3, [r7, #0]
 80029ae:	b2da      	uxtb	r2, r3
 80029b0:	490c      	ldr	r1, [pc, #48]	@ (80029e4 <__NVIC_SetPriority+0x4c>)
 80029b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b6:	0112      	lsls	r2, r2, #4
 80029b8:	b2d2      	uxtb	r2, r2
 80029ba:	440b      	add	r3, r1
 80029bc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029c0:	e00a      	b.n	80029d8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	b2da      	uxtb	r2, r3
 80029c6:	4908      	ldr	r1, [pc, #32]	@ (80029e8 <__NVIC_SetPriority+0x50>)
 80029c8:	79fb      	ldrb	r3, [r7, #7]
 80029ca:	f003 030f 	and.w	r3, r3, #15
 80029ce:	3b04      	subs	r3, #4
 80029d0:	0112      	lsls	r2, r2, #4
 80029d2:	b2d2      	uxtb	r2, r2
 80029d4:	440b      	add	r3, r1
 80029d6:	761a      	strb	r2, [r3, #24]
}
 80029d8:	bf00      	nop
 80029da:	370c      	adds	r7, #12
 80029dc:	46bd      	mov	sp, r7
 80029de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029e2:	4770      	bx	lr
 80029e4:	e000e100 	.word	0xe000e100
 80029e8:	e000ed00 	.word	0xe000ed00

080029ec <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b089      	sub	sp, #36	@ 0x24
 80029f0:	af00      	add	r7, sp, #0
 80029f2:	60f8      	str	r0, [r7, #12]
 80029f4:	60b9      	str	r1, [r7, #8]
 80029f6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	f003 0307 	and.w	r3, r3, #7
 80029fe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a00:	69fb      	ldr	r3, [r7, #28]
 8002a02:	f1c3 0307 	rsb	r3, r3, #7
 8002a06:	2b04      	cmp	r3, #4
 8002a08:	bf28      	it	cs
 8002a0a:	2304      	movcs	r3, #4
 8002a0c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0e:	69fb      	ldr	r3, [r7, #28]
 8002a10:	3304      	adds	r3, #4
 8002a12:	2b06      	cmp	r3, #6
 8002a14:	d902      	bls.n	8002a1c <NVIC_EncodePriority+0x30>
 8002a16:	69fb      	ldr	r3, [r7, #28]
 8002a18:	3b03      	subs	r3, #3
 8002a1a:	e000      	b.n	8002a1e <NVIC_EncodePriority+0x32>
 8002a1c:	2300      	movs	r3, #0
 8002a1e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a20:	f04f 32ff 	mov.w	r2, #4294967295
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	fa02 f303 	lsl.w	r3, r2, r3
 8002a2a:	43da      	mvns	r2, r3
 8002a2c:	68bb      	ldr	r3, [r7, #8]
 8002a2e:	401a      	ands	r2, r3
 8002a30:	697b      	ldr	r3, [r7, #20]
 8002a32:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a34:	f04f 31ff 	mov.w	r1, #4294967295
 8002a38:	697b      	ldr	r3, [r7, #20]
 8002a3a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3e:	43d9      	mvns	r1, r3
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	4313      	orrs	r3, r2
         );
}
 8002a46:	4618      	mov	r0, r3
 8002a48:	3724      	adds	r7, #36	@ 0x24
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a50:	4770      	bx	lr

08002a52 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a52:	b580      	push	{r7, lr}
 8002a54:	b082      	sub	sp, #8
 8002a56:	af00      	add	r7, sp, #0
 8002a58:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a5a:	6878      	ldr	r0, [r7, #4]
 8002a5c:	f7ff ff4c 	bl	80028f8 <__NVIC_SetPriorityGrouping>
}
 8002a60:	bf00      	nop
 8002a62:	3708      	adds	r7, #8
 8002a64:	46bd      	mov	sp, r7
 8002a66:	bd80      	pop	{r7, pc}

08002a68 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b086      	sub	sp, #24
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	4603      	mov	r3, r0
 8002a70:	60b9      	str	r1, [r7, #8]
 8002a72:	607a      	str	r2, [r7, #4]
 8002a74:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a7a:	f7ff ff61 	bl	8002940 <__NVIC_GetPriorityGrouping>
 8002a7e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a80:	687a      	ldr	r2, [r7, #4]
 8002a82:	68b9      	ldr	r1, [r7, #8]
 8002a84:	6978      	ldr	r0, [r7, #20]
 8002a86:	f7ff ffb1 	bl	80029ec <NVIC_EncodePriority>
 8002a8a:	4602      	mov	r2, r0
 8002a8c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a90:	4611      	mov	r1, r2
 8002a92:	4618      	mov	r0, r3
 8002a94:	f7ff ff80 	bl	8002998 <__NVIC_SetPriority>
}
 8002a98:	bf00      	nop
 8002a9a:	3718      	adds	r7, #24
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}

08002aa0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aaa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aae:	4618      	mov	r0, r3
 8002ab0:	f7ff ff54 	bl	800295c <__NVIC_EnableIRQ>
}
 8002ab4:	bf00      	nop
 8002ab6:	3708      	adds	r7, #8
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002abc:	b580      	push	{r7, lr}
 8002abe:	b084      	sub	sp, #16
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002ac4:	687b      	ldr	r3, [r7, #4]
 8002ac6:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002ac8:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002aca:	f7ff f8bf 	bl	8001c4c <HAL_GetTick>
 8002ace:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002ad6:	b2db      	uxtb	r3, r3
 8002ad8:	2b02      	cmp	r3, #2
 8002ada:	d008      	beq.n	8002aee <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002adc:	687b      	ldr	r3, [r7, #4]
 8002ade:	2280      	movs	r2, #128	@ 0x80
 8002ae0:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ae2:	687b      	ldr	r3, [r7, #4]
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002aea:	2301      	movs	r3, #1
 8002aec:	e052      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	681a      	ldr	r2, [r3, #0]
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	f022 0216 	bic.w	r2, r2, #22
 8002afc:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	681b      	ldr	r3, [r3, #0]
 8002b02:	695a      	ldr	r2, [r3, #20]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b0c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	d103      	bne.n	8002b1e <HAL_DMA_Abort+0x62>
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	d007      	beq.n	8002b2e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	681b      	ldr	r3, [r3, #0]
 8002b22:	681a      	ldr	r2, [r3, #0]
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f022 0208 	bic.w	r2, r2, #8
 8002b2c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	681a      	ldr	r2, [r3, #0]
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	f022 0201 	bic.w	r2, r2, #1
 8002b3c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b3e:	e013      	b.n	8002b68 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b40:	f7ff f884 	bl	8001c4c <HAL_GetTick>
 8002b44:	4602      	mov	r2, r0
 8002b46:	68bb      	ldr	r3, [r7, #8]
 8002b48:	1ad3      	subs	r3, r2, r3
 8002b4a:	2b05      	cmp	r3, #5
 8002b4c:	d90c      	bls.n	8002b68 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	2220      	movs	r2, #32
 8002b52:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002b54:	687b      	ldr	r3, [r7, #4]
 8002b56:	2203      	movs	r2, #3
 8002b58:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2200      	movs	r2, #0
 8002b60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002b64:	2303      	movs	r3, #3
 8002b66:	e015      	b.n	8002b94 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f003 0301 	and.w	r3, r3, #1
 8002b72:	2b00      	cmp	r3, #0
 8002b74:	d1e4      	bne.n	8002b40 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002b7a:	223f      	movs	r2, #63	@ 0x3f
 8002b7c:	409a      	lsls	r2, r3
 8002b7e:	68fb      	ldr	r3, [r7, #12]
 8002b80:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2201      	movs	r2, #1
 8002b86:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	2200      	movs	r2, #0
 8002b8e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002b92:	2300      	movs	r3, #0
}
 8002b94:	4618      	mov	r0, r3
 8002b96:	3710      	adds	r7, #16
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bd80      	pop	{r7, pc}

08002b9c <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002b9c:	b480      	push	{r7}
 8002b9e:	b083      	sub	sp, #12
 8002ba0:	af00      	add	r7, sp, #0
 8002ba2:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002baa:	b2db      	uxtb	r3, r3
 8002bac:	2b02      	cmp	r3, #2
 8002bae:	d004      	beq.n	8002bba <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	2280      	movs	r2, #128	@ 0x80
 8002bb4:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002bb6:	2301      	movs	r3, #1
 8002bb8:	e00c      	b.n	8002bd4 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	2205      	movs	r2, #5
 8002bbe:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681a      	ldr	r2, [r3, #0]
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	f022 0201 	bic.w	r2, r2, #1
 8002bd0:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002bd2:	2300      	movs	r3, #0
}
 8002bd4:	4618      	mov	r0, r3
 8002bd6:	370c      	adds	r7, #12
 8002bd8:	46bd      	mov	sp, r7
 8002bda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bde:	4770      	bx	lr

08002be0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002be0:	b480      	push	{r7}
 8002be2:	b089      	sub	sp, #36	@ 0x24
 8002be4:	af00      	add	r7, sp, #0
 8002be6:	6078      	str	r0, [r7, #4]
 8002be8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002bea:	2300      	movs	r3, #0
 8002bec:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002bee:	2300      	movs	r3, #0
 8002bf0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002bf6:	2300      	movs	r3, #0
 8002bf8:	61fb      	str	r3, [r7, #28]
 8002bfa:	e16b      	b.n	8002ed4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002bfc:	2201      	movs	r2, #1
 8002bfe:	69fb      	ldr	r3, [r7, #28]
 8002c00:	fa02 f303 	lsl.w	r3, r2, r3
 8002c04:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c06:	683b      	ldr	r3, [r7, #0]
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	697a      	ldr	r2, [r7, #20]
 8002c0c:	4013      	ands	r3, r2
 8002c0e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c10:	693a      	ldr	r2, [r7, #16]
 8002c12:	697b      	ldr	r3, [r7, #20]
 8002c14:	429a      	cmp	r2, r3
 8002c16:	f040 815a 	bne.w	8002ece <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c1a:	683b      	ldr	r3, [r7, #0]
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	2b01      	cmp	r3, #1
 8002c24:	d005      	beq.n	8002c32 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c26:	683b      	ldr	r3, [r7, #0]
 8002c28:	685b      	ldr	r3, [r3, #4]
 8002c2a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c2e:	2b02      	cmp	r3, #2
 8002c30:	d130      	bne.n	8002c94 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	689b      	ldr	r3, [r3, #8]
 8002c36:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c38:	69fb      	ldr	r3, [r7, #28]
 8002c3a:	005b      	lsls	r3, r3, #1
 8002c3c:	2203      	movs	r2, #3
 8002c3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002c42:	43db      	mvns	r3, r3
 8002c44:	69ba      	ldr	r2, [r7, #24]
 8002c46:	4013      	ands	r3, r2
 8002c48:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002c4a:	683b      	ldr	r3, [r7, #0]
 8002c4c:	68da      	ldr	r2, [r3, #12]
 8002c4e:	69fb      	ldr	r3, [r7, #28]
 8002c50:	005b      	lsls	r3, r3, #1
 8002c52:	fa02 f303 	lsl.w	r3, r2, r3
 8002c56:	69ba      	ldr	r2, [r7, #24]
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69ba      	ldr	r2, [r7, #24]
 8002c60:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	685b      	ldr	r3, [r3, #4]
 8002c66:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002c68:	2201      	movs	r2, #1
 8002c6a:	69fb      	ldr	r3, [r7, #28]
 8002c6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c70:	43db      	mvns	r3, r3
 8002c72:	69ba      	ldr	r2, [r7, #24]
 8002c74:	4013      	ands	r3, r2
 8002c76:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002c78:	683b      	ldr	r3, [r7, #0]
 8002c7a:	685b      	ldr	r3, [r3, #4]
 8002c7c:	091b      	lsrs	r3, r3, #4
 8002c7e:	f003 0201 	and.w	r2, r3, #1
 8002c82:	69fb      	ldr	r3, [r7, #28]
 8002c84:	fa02 f303 	lsl.w	r3, r2, r3
 8002c88:	69ba      	ldr	r2, [r7, #24]
 8002c8a:	4313      	orrs	r3, r2
 8002c8c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	69ba      	ldr	r2, [r7, #24]
 8002c92:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002c94:	683b      	ldr	r3, [r7, #0]
 8002c96:	685b      	ldr	r3, [r3, #4]
 8002c98:	f003 0303 	and.w	r3, r3, #3
 8002c9c:	2b03      	cmp	r3, #3
 8002c9e:	d017      	beq.n	8002cd0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	68db      	ldr	r3, [r3, #12]
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	005b      	lsls	r3, r3, #1
 8002caa:	2203      	movs	r2, #3
 8002cac:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb0:	43db      	mvns	r3, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4013      	ands	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002cb8:	683b      	ldr	r3, [r7, #0]
 8002cba:	689a      	ldr	r2, [r3, #8]
 8002cbc:	69fb      	ldr	r3, [r7, #28]
 8002cbe:	005b      	lsls	r3, r3, #1
 8002cc0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cc4:	69ba      	ldr	r2, [r7, #24]
 8002cc6:	4313      	orrs	r3, r2
 8002cc8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002cca:	687b      	ldr	r3, [r7, #4]
 8002ccc:	69ba      	ldr	r2, [r7, #24]
 8002cce:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002cd0:	683b      	ldr	r3, [r7, #0]
 8002cd2:	685b      	ldr	r3, [r3, #4]
 8002cd4:	f003 0303 	and.w	r3, r3, #3
 8002cd8:	2b02      	cmp	r3, #2
 8002cda:	d123      	bne.n	8002d24 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002cdc:	69fb      	ldr	r3, [r7, #28]
 8002cde:	08da      	lsrs	r2, r3, #3
 8002ce0:	687b      	ldr	r3, [r7, #4]
 8002ce2:	3208      	adds	r2, #8
 8002ce4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002ce8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002cea:	69fb      	ldr	r3, [r7, #28]
 8002cec:	f003 0307 	and.w	r3, r3, #7
 8002cf0:	009b      	lsls	r3, r3, #2
 8002cf2:	220f      	movs	r2, #15
 8002cf4:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf8:	43db      	mvns	r3, r3
 8002cfa:	69ba      	ldr	r2, [r7, #24]
 8002cfc:	4013      	ands	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d00:	683b      	ldr	r3, [r7, #0]
 8002d02:	691a      	ldr	r2, [r3, #16]
 8002d04:	69fb      	ldr	r3, [r7, #28]
 8002d06:	f003 0307 	and.w	r3, r3, #7
 8002d0a:	009b      	lsls	r3, r3, #2
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4313      	orrs	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d16:	69fb      	ldr	r3, [r7, #28]
 8002d18:	08da      	lsrs	r2, r3, #3
 8002d1a:	687b      	ldr	r3, [r7, #4]
 8002d1c:	3208      	adds	r2, #8
 8002d1e:	69b9      	ldr	r1, [r7, #24]
 8002d20:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d2a:	69fb      	ldr	r3, [r7, #28]
 8002d2c:	005b      	lsls	r3, r3, #1
 8002d2e:	2203      	movs	r2, #3
 8002d30:	fa02 f303 	lsl.w	r3, r2, r3
 8002d34:	43db      	mvns	r3, r3
 8002d36:	69ba      	ldr	r2, [r7, #24]
 8002d38:	4013      	ands	r3, r2
 8002d3a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d3c:	683b      	ldr	r3, [r7, #0]
 8002d3e:	685b      	ldr	r3, [r3, #4]
 8002d40:	f003 0203 	and.w	r2, r3, #3
 8002d44:	69fb      	ldr	r3, [r7, #28]
 8002d46:	005b      	lsls	r3, r3, #1
 8002d48:	fa02 f303 	lsl.w	r3, r2, r3
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	4313      	orrs	r3, r2
 8002d50:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	69ba      	ldr	r2, [r7, #24]
 8002d56:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002d58:	683b      	ldr	r3, [r7, #0]
 8002d5a:	685b      	ldr	r3, [r3, #4]
 8002d5c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002d60:	2b00      	cmp	r3, #0
 8002d62:	f000 80b4 	beq.w	8002ece <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002d66:	2300      	movs	r3, #0
 8002d68:	60fb      	str	r3, [r7, #12]
 8002d6a:	4b60      	ldr	r3, [pc, #384]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d6c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d6e:	4a5f      	ldr	r2, [pc, #380]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d70:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002d74:	6453      	str	r3, [r2, #68]	@ 0x44
 8002d76:	4b5d      	ldr	r3, [pc, #372]	@ (8002eec <HAL_GPIO_Init+0x30c>)
 8002d78:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002d7a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002d7e:	60fb      	str	r3, [r7, #12]
 8002d80:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002d82:	4a5b      	ldr	r2, [pc, #364]	@ (8002ef0 <HAL_GPIO_Init+0x310>)
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	089b      	lsrs	r3, r3, #2
 8002d88:	3302      	adds	r3, #2
 8002d8a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d8e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002d90:	69fb      	ldr	r3, [r7, #28]
 8002d92:	f003 0303 	and.w	r3, r3, #3
 8002d96:	009b      	lsls	r3, r3, #2
 8002d98:	220f      	movs	r2, #15
 8002d9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9e:	43db      	mvns	r3, r3
 8002da0:	69ba      	ldr	r2, [r7, #24]
 8002da2:	4013      	ands	r3, r2
 8002da4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002da6:	687b      	ldr	r3, [r7, #4]
 8002da8:	4a52      	ldr	r2, [pc, #328]	@ (8002ef4 <HAL_GPIO_Init+0x314>)
 8002daa:	4293      	cmp	r3, r2
 8002dac:	d02b      	beq.n	8002e06 <HAL_GPIO_Init+0x226>
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	4a51      	ldr	r2, [pc, #324]	@ (8002ef8 <HAL_GPIO_Init+0x318>)
 8002db2:	4293      	cmp	r3, r2
 8002db4:	d025      	beq.n	8002e02 <HAL_GPIO_Init+0x222>
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	4a50      	ldr	r2, [pc, #320]	@ (8002efc <HAL_GPIO_Init+0x31c>)
 8002dba:	4293      	cmp	r3, r2
 8002dbc:	d01f      	beq.n	8002dfe <HAL_GPIO_Init+0x21e>
 8002dbe:	687b      	ldr	r3, [r7, #4]
 8002dc0:	4a4f      	ldr	r2, [pc, #316]	@ (8002f00 <HAL_GPIO_Init+0x320>)
 8002dc2:	4293      	cmp	r3, r2
 8002dc4:	d019      	beq.n	8002dfa <HAL_GPIO_Init+0x21a>
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	4a4e      	ldr	r2, [pc, #312]	@ (8002f04 <HAL_GPIO_Init+0x324>)
 8002dca:	4293      	cmp	r3, r2
 8002dcc:	d013      	beq.n	8002df6 <HAL_GPIO_Init+0x216>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	4a4d      	ldr	r2, [pc, #308]	@ (8002f08 <HAL_GPIO_Init+0x328>)
 8002dd2:	4293      	cmp	r3, r2
 8002dd4:	d00d      	beq.n	8002df2 <HAL_GPIO_Init+0x212>
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	4a4c      	ldr	r2, [pc, #304]	@ (8002f0c <HAL_GPIO_Init+0x32c>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d007      	beq.n	8002dee <HAL_GPIO_Init+0x20e>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	4a4b      	ldr	r2, [pc, #300]	@ (8002f10 <HAL_GPIO_Init+0x330>)
 8002de2:	4293      	cmp	r3, r2
 8002de4:	d101      	bne.n	8002dea <HAL_GPIO_Init+0x20a>
 8002de6:	2307      	movs	r3, #7
 8002de8:	e00e      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dea:	2308      	movs	r3, #8
 8002dec:	e00c      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dee:	2306      	movs	r3, #6
 8002df0:	e00a      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df2:	2305      	movs	r3, #5
 8002df4:	e008      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002df6:	2304      	movs	r3, #4
 8002df8:	e006      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfa:	2303      	movs	r3, #3
 8002dfc:	e004      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002dfe:	2302      	movs	r3, #2
 8002e00:	e002      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e02:	2301      	movs	r3, #1
 8002e04:	e000      	b.n	8002e08 <HAL_GPIO_Init+0x228>
 8002e06:	2300      	movs	r3, #0
 8002e08:	69fa      	ldr	r2, [r7, #28]
 8002e0a:	f002 0203 	and.w	r2, r2, #3
 8002e0e:	0092      	lsls	r2, r2, #2
 8002e10:	4093      	lsls	r3, r2
 8002e12:	69ba      	ldr	r2, [r7, #24]
 8002e14:	4313      	orrs	r3, r2
 8002e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e18:	4935      	ldr	r1, [pc, #212]	@ (8002ef0 <HAL_GPIO_Init+0x310>)
 8002e1a:	69fb      	ldr	r3, [r7, #28]
 8002e1c:	089b      	lsrs	r3, r3, #2
 8002e1e:	3302      	adds	r3, #2
 8002e20:	69ba      	ldr	r2, [r7, #24]
 8002e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e26:	4b3b      	ldr	r3, [pc, #236]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e28:	689b      	ldr	r3, [r3, #8]
 8002e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e2c:	693b      	ldr	r3, [r7, #16]
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	685b      	ldr	r3, [r3, #4]
 8002e3a:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e3e:	2b00      	cmp	r3, #0
 8002e40:	d003      	beq.n	8002e4a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	693b      	ldr	r3, [r7, #16]
 8002e46:	4313      	orrs	r3, r2
 8002e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e4a:	4a32      	ldr	r2, [pc, #200]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e4c:	69bb      	ldr	r3, [r7, #24]
 8002e4e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e50:	4b30      	ldr	r3, [pc, #192]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e52:	68db      	ldr	r3, [r3, #12]
 8002e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e56:	693b      	ldr	r3, [r7, #16]
 8002e58:	43db      	mvns	r3, r3
 8002e5a:	69ba      	ldr	r2, [r7, #24]
 8002e5c:	4013      	ands	r3, r2
 8002e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	685b      	ldr	r3, [r3, #4]
 8002e64:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d003      	beq.n	8002e74 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	693b      	ldr	r3, [r7, #16]
 8002e70:	4313      	orrs	r3, r2
 8002e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002e74:	4a27      	ldr	r2, [pc, #156]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e76:	69bb      	ldr	r3, [r7, #24]
 8002e78:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002e7a:	4b26      	ldr	r3, [pc, #152]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002e7c:	685b      	ldr	r3, [r3, #4]
 8002e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e80:	693b      	ldr	r3, [r7, #16]
 8002e82:	43db      	mvns	r3, r3
 8002e84:	69ba      	ldr	r2, [r7, #24]
 8002e86:	4013      	ands	r3, r2
 8002e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	685b      	ldr	r3, [r3, #4]
 8002e8e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e92:	2b00      	cmp	r3, #0
 8002e94:	d003      	beq.n	8002e9e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002e96:	69ba      	ldr	r2, [r7, #24]
 8002e98:	693b      	ldr	r3, [r7, #16]
 8002e9a:	4313      	orrs	r3, r2
 8002e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002e9e:	4a1d      	ldr	r2, [pc, #116]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea0:	69bb      	ldr	r3, [r7, #24]
 8002ea2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ea4:	4b1b      	ldr	r3, [pc, #108]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eaa:	693b      	ldr	r3, [r7, #16]
 8002eac:	43db      	mvns	r3, r3
 8002eae:	69ba      	ldr	r2, [r7, #24]
 8002eb0:	4013      	ands	r3, r2
 8002eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eb4:	683b      	ldr	r3, [r7, #0]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ebc:	2b00      	cmp	r3, #0
 8002ebe:	d003      	beq.n	8002ec8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002ec0:	69ba      	ldr	r2, [r7, #24]
 8002ec2:	693b      	ldr	r3, [r7, #16]
 8002ec4:	4313      	orrs	r3, r2
 8002ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002ec8:	4a12      	ldr	r2, [pc, #72]	@ (8002f14 <HAL_GPIO_Init+0x334>)
 8002eca:	69bb      	ldr	r3, [r7, #24]
 8002ecc:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002ece:	69fb      	ldr	r3, [r7, #28]
 8002ed0:	3301      	adds	r3, #1
 8002ed2:	61fb      	str	r3, [r7, #28]
 8002ed4:	69fb      	ldr	r3, [r7, #28]
 8002ed6:	2b0f      	cmp	r3, #15
 8002ed8:	f67f ae90 	bls.w	8002bfc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002edc:	bf00      	nop
 8002ede:	bf00      	nop
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee8:	4770      	bx	lr
 8002eea:	bf00      	nop
 8002eec:	40023800 	.word	0x40023800
 8002ef0:	40013800 	.word	0x40013800
 8002ef4:	40020000 	.word	0x40020000
 8002ef8:	40020400 	.word	0x40020400
 8002efc:	40020800 	.word	0x40020800
 8002f00:	40020c00 	.word	0x40020c00
 8002f04:	40021000 	.word	0x40021000
 8002f08:	40021400 	.word	0x40021400
 8002f0c:	40021800 	.word	0x40021800
 8002f10:	40021c00 	.word	0x40021c00
 8002f14:	40013c00 	.word	0x40013c00

08002f18 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	b086      	sub	sp, #24
 8002f1c:	af00      	add	r7, sp, #0
 8002f1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002f20:	687b      	ldr	r3, [r7, #4]
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d101      	bne.n	8002f2a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002f26:	2301      	movs	r3, #1
 8002f28:	e267      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0301 	and.w	r3, r3, #1
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d075      	beq.n	8003022 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f36:	4b88      	ldr	r3, [pc, #544]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b04      	cmp	r3, #4
 8002f40:	d00c      	beq.n	8002f5c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f42:	4b85      	ldr	r3, [pc, #532]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d112      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002f4e:	4b82      	ldr	r3, [pc, #520]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002f5a:	d10b      	bne.n	8002f74 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f5c:	4b7e      	ldr	r3, [pc, #504]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f5e:	681b      	ldr	r3, [r3, #0]
 8002f60:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d05b      	beq.n	8003020 <HAL_RCC_OscConfig+0x108>
 8002f68:	687b      	ldr	r3, [r7, #4]
 8002f6a:	685b      	ldr	r3, [r3, #4]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d157      	bne.n	8003020 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002f70:	2301      	movs	r3, #1
 8002f72:	e242      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f74:	687b      	ldr	r3, [r7, #4]
 8002f76:	685b      	ldr	r3, [r3, #4]
 8002f78:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f7c:	d106      	bne.n	8002f8c <HAL_RCC_OscConfig+0x74>
 8002f7e:	4b76      	ldr	r3, [pc, #472]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4a75      	ldr	r2, [pc, #468]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f84:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f88:	6013      	str	r3, [r2, #0]
 8002f8a:	e01d      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	685b      	ldr	r3, [r3, #4]
 8002f90:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f94:	d10c      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x98>
 8002f96:	4b70      	ldr	r3, [pc, #448]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f98:	681b      	ldr	r3, [r3, #0]
 8002f9a:	4a6f      	ldr	r2, [pc, #444]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002f9c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002fa0:	6013      	str	r3, [r2, #0]
 8002fa2:	4b6d      	ldr	r3, [pc, #436]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	4a6c      	ldr	r2, [pc, #432]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fa8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002fac:	6013      	str	r3, [r2, #0]
 8002fae:	e00b      	b.n	8002fc8 <HAL_RCC_OscConfig+0xb0>
 8002fb0:	4b69      	ldr	r3, [pc, #420]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a68      	ldr	r2, [pc, #416]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fb6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fba:	6013      	str	r3, [r2, #0]
 8002fbc:	4b66      	ldr	r3, [pc, #408]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	4a65      	ldr	r2, [pc, #404]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fc2:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fc6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	685b      	ldr	r3, [r3, #4]
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d013      	beq.n	8002ff8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fd0:	f7fe fe3c 	bl	8001c4c <HAL_GetTick>
 8002fd4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	e008      	b.n	8002fea <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fd8:	f7fe fe38 	bl	8001c4c <HAL_GetTick>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	693b      	ldr	r3, [r7, #16]
 8002fe0:	1ad3      	subs	r3, r2, r3
 8002fe2:	2b64      	cmp	r3, #100	@ 0x64
 8002fe4:	d901      	bls.n	8002fea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002fe6:	2303      	movs	r3, #3
 8002fe8:	e207      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fea:	4b5b      	ldr	r3, [pc, #364]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	d0f0      	beq.n	8002fd8 <HAL_RCC_OscConfig+0xc0>
 8002ff6:	e014      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ff8:	f7fe fe28 	bl	8001c4c <HAL_GetTick>
 8002ffc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	e008      	b.n	8003012 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003000:	f7fe fe24 	bl	8001c4c <HAL_GetTick>
 8003004:	4602      	mov	r2, r0
 8003006:	693b      	ldr	r3, [r7, #16]
 8003008:	1ad3      	subs	r3, r2, r3
 800300a:	2b64      	cmp	r3, #100	@ 0x64
 800300c:	d901      	bls.n	8003012 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800300e:	2303      	movs	r3, #3
 8003010:	e1f3      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003012:	4b51      	ldr	r3, [pc, #324]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800301a:	2b00      	cmp	r3, #0
 800301c:	d1f0      	bne.n	8003000 <HAL_RCC_OscConfig+0xe8>
 800301e:	e000      	b.n	8003022 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003020:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f003 0302 	and.w	r3, r3, #2
 800302a:	2b00      	cmp	r3, #0
 800302c:	d063      	beq.n	80030f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800302e:	4b4a      	ldr	r3, [pc, #296]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003030:	689b      	ldr	r3, [r3, #8]
 8003032:	f003 030c 	and.w	r3, r3, #12
 8003036:	2b00      	cmp	r3, #0
 8003038:	d00b      	beq.n	8003052 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800303a:	4b47      	ldr	r3, [pc, #284]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800303c:	689b      	ldr	r3, [r3, #8]
 800303e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003042:	2b08      	cmp	r3, #8
 8003044:	d11c      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003046:	4b44      	ldr	r3, [pc, #272]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003048:	685b      	ldr	r3, [r3, #4]
 800304a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d116      	bne.n	8003080 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003052:	4b41      	ldr	r3, [pc, #260]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	f003 0302 	and.w	r3, r3, #2
 800305a:	2b00      	cmp	r3, #0
 800305c:	d005      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	68db      	ldr	r3, [r3, #12]
 8003062:	2b01      	cmp	r3, #1
 8003064:	d001      	beq.n	800306a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e1c7      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800306a:	4b3b      	ldr	r3, [pc, #236]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	691b      	ldr	r3, [r3, #16]
 8003076:	00db      	lsls	r3, r3, #3
 8003078:	4937      	ldr	r1, [pc, #220]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800307a:	4313      	orrs	r3, r2
 800307c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800307e:	e03a      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	68db      	ldr	r3, [r3, #12]
 8003084:	2b00      	cmp	r3, #0
 8003086:	d020      	beq.n	80030ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003088:	4b34      	ldr	r3, [pc, #208]	@ (800315c <HAL_RCC_OscConfig+0x244>)
 800308a:	2201      	movs	r2, #1
 800308c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308e:	f7fe fddd 	bl	8001c4c <HAL_GetTick>
 8003092:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	e008      	b.n	80030a8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003096:	f7fe fdd9 	bl	8001c4c <HAL_GetTick>
 800309a:	4602      	mov	r2, r0
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	1ad3      	subs	r3, r2, r3
 80030a0:	2b02      	cmp	r3, #2
 80030a2:	d901      	bls.n	80030a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80030a4:	2303      	movs	r3, #3
 80030a6:	e1a8      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a8:	4b2b      	ldr	r3, [pc, #172]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	f003 0302 	and.w	r3, r3, #2
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	d0f0      	beq.n	8003096 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030b4:	4b28      	ldr	r3, [pc, #160]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	691b      	ldr	r3, [r3, #16]
 80030c0:	00db      	lsls	r3, r3, #3
 80030c2:	4925      	ldr	r1, [pc, #148]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	600b      	str	r3, [r1, #0]
 80030c8:	e015      	b.n	80030f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030ca:	4b24      	ldr	r3, [pc, #144]	@ (800315c <HAL_RCC_OscConfig+0x244>)
 80030cc:	2200      	movs	r2, #0
 80030ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030d0:	f7fe fdbc 	bl	8001c4c <HAL_GetTick>
 80030d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	e008      	b.n	80030ea <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030d8:	f7fe fdb8 	bl	8001c4c <HAL_GetTick>
 80030dc:	4602      	mov	r2, r0
 80030de:	693b      	ldr	r3, [r7, #16]
 80030e0:	1ad3      	subs	r3, r2, r3
 80030e2:	2b02      	cmp	r3, #2
 80030e4:	d901      	bls.n	80030ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e187      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030ea:	4b1b      	ldr	r3, [pc, #108]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	f003 0302 	and.w	r3, r3, #2
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d1f0      	bne.n	80030d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f003 0308 	and.w	r3, r3, #8
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d036      	beq.n	8003170 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	695b      	ldr	r3, [r3, #20]
 8003106:	2b00      	cmp	r3, #0
 8003108:	d016      	beq.n	8003138 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800310a:	4b15      	ldr	r3, [pc, #84]	@ (8003160 <HAL_RCC_OscConfig+0x248>)
 800310c:	2201      	movs	r2, #1
 800310e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003110:	f7fe fd9c 	bl	8001c4c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003118:	f7fe fd98 	bl	8001c4c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b02      	cmp	r3, #2
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e167      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800312a:	4b0b      	ldr	r3, [pc, #44]	@ (8003158 <HAL_RCC_OscConfig+0x240>)
 800312c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800312e:	f003 0302 	and.w	r3, r3, #2
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0x200>
 8003136:	e01b      	b.n	8003170 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003138:	4b09      	ldr	r3, [pc, #36]	@ (8003160 <HAL_RCC_OscConfig+0x248>)
 800313a:	2200      	movs	r2, #0
 800313c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800313e:	f7fe fd85 	bl	8001c4c <HAL_GetTick>
 8003142:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003144:	e00e      	b.n	8003164 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003146:	f7fe fd81 	bl	8001c4c <HAL_GetTick>
 800314a:	4602      	mov	r2, r0
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	1ad3      	subs	r3, r2, r3
 8003150:	2b02      	cmp	r3, #2
 8003152:	d907      	bls.n	8003164 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8003154:	2303      	movs	r3, #3
 8003156:	e150      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
 8003158:	40023800 	.word	0x40023800
 800315c:	42470000 	.word	0x42470000
 8003160:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003164:	4b88      	ldr	r3, [pc, #544]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003166:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003168:	f003 0302 	and.w	r3, r3, #2
 800316c:	2b00      	cmp	r3, #0
 800316e:	d1ea      	bne.n	8003146 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	f003 0304 	and.w	r3, r3, #4
 8003178:	2b00      	cmp	r3, #0
 800317a:	f000 8097 	beq.w	80032ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800317e:	2300      	movs	r3, #0
 8003180:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003182:	4b81      	ldr	r3, [pc, #516]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003184:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003186:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800318a:	2b00      	cmp	r3, #0
 800318c:	d10f      	bne.n	80031ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800318e:	2300      	movs	r3, #0
 8003190:	60bb      	str	r3, [r7, #8]
 8003192:	4b7d      	ldr	r3, [pc, #500]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003194:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003196:	4a7c      	ldr	r2, [pc, #496]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003198:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800319c:	6413      	str	r3, [r2, #64]	@ 0x40
 800319e:	4b7a      	ldr	r3, [pc, #488]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80031a6:	60bb      	str	r3, [r7, #8]
 80031a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80031aa:	2301      	movs	r3, #1
 80031ac:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031ae:	4b77      	ldr	r3, [pc, #476]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	d118      	bne.n	80031ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031ba:	4b74      	ldr	r3, [pc, #464]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4a73      	ldr	r2, [pc, #460]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031c0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031c6:	f7fe fd41 	bl	8001c4c <HAL_GetTick>
 80031ca:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031cc:	e008      	b.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031ce:	f7fe fd3d 	bl	8001c4c <HAL_GetTick>
 80031d2:	4602      	mov	r2, r0
 80031d4:	693b      	ldr	r3, [r7, #16]
 80031d6:	1ad3      	subs	r3, r2, r3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d901      	bls.n	80031e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80031dc:	2303      	movs	r3, #3
 80031de:	e10c      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031e0:	4b6a      	ldr	r3, [pc, #424]	@ (800338c <HAL_RCC_OscConfig+0x474>)
 80031e2:	681b      	ldr	r3, [r3, #0]
 80031e4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	d0f0      	beq.n	80031ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	689b      	ldr	r3, [r3, #8]
 80031f0:	2b01      	cmp	r3, #1
 80031f2:	d106      	bne.n	8003202 <HAL_RCC_OscConfig+0x2ea>
 80031f4:	4b64      	ldr	r3, [pc, #400]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031f6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80031f8:	4a63      	ldr	r2, [pc, #396]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80031fa:	f043 0301 	orr.w	r3, r3, #1
 80031fe:	6713      	str	r3, [r2, #112]	@ 0x70
 8003200:	e01c      	b.n	800323c <HAL_RCC_OscConfig+0x324>
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	689b      	ldr	r3, [r3, #8]
 8003206:	2b05      	cmp	r3, #5
 8003208:	d10c      	bne.n	8003224 <HAL_RCC_OscConfig+0x30c>
 800320a:	4b5f      	ldr	r3, [pc, #380]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800320c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800320e:	4a5e      	ldr	r2, [pc, #376]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003210:	f043 0304 	orr.w	r3, r3, #4
 8003214:	6713      	str	r3, [r2, #112]	@ 0x70
 8003216:	4b5c      	ldr	r3, [pc, #368]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003218:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800321a:	4a5b      	ldr	r2, [pc, #364]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800321c:	f043 0301 	orr.w	r3, r3, #1
 8003220:	6713      	str	r3, [r2, #112]	@ 0x70
 8003222:	e00b      	b.n	800323c <HAL_RCC_OscConfig+0x324>
 8003224:	4b58      	ldr	r3, [pc, #352]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003226:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003228:	4a57      	ldr	r2, [pc, #348]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800322a:	f023 0301 	bic.w	r3, r3, #1
 800322e:	6713      	str	r3, [r2, #112]	@ 0x70
 8003230:	4b55      	ldr	r3, [pc, #340]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003232:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003234:	4a54      	ldr	r2, [pc, #336]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003236:	f023 0304 	bic.w	r3, r3, #4
 800323a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	2b00      	cmp	r3, #0
 8003242:	d015      	beq.n	8003270 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003244:	f7fe fd02 	bl	8001c4c <HAL_GetTick>
 8003248:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800324a:	e00a      	b.n	8003262 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324c:	f7fe fcfe 	bl	8001c4c <HAL_GetTick>
 8003250:	4602      	mov	r2, r0
 8003252:	693b      	ldr	r3, [r7, #16]
 8003254:	1ad3      	subs	r3, r2, r3
 8003256:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325a:	4293      	cmp	r3, r2
 800325c:	d901      	bls.n	8003262 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800325e:	2303      	movs	r3, #3
 8003260:	e0cb      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003262:	4b49      	ldr	r3, [pc, #292]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003264:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003266:	f003 0302 	and.w	r3, r3, #2
 800326a:	2b00      	cmp	r3, #0
 800326c:	d0ee      	beq.n	800324c <HAL_RCC_OscConfig+0x334>
 800326e:	e014      	b.n	800329a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003270:	f7fe fcec 	bl	8001c4c <HAL_GetTick>
 8003274:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003276:	e00a      	b.n	800328e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003278:	f7fe fce8 	bl	8001c4c <HAL_GetTick>
 800327c:	4602      	mov	r2, r0
 800327e:	693b      	ldr	r3, [r7, #16]
 8003280:	1ad3      	subs	r3, r2, r3
 8003282:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003286:	4293      	cmp	r3, r2
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e0b5      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800328e:	4b3e      	ldr	r3, [pc, #248]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003290:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003292:	f003 0302 	and.w	r3, r3, #2
 8003296:	2b00      	cmp	r3, #0
 8003298:	d1ee      	bne.n	8003278 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 800329a:	7dfb      	ldrb	r3, [r7, #23]
 800329c:	2b01      	cmp	r3, #1
 800329e:	d105      	bne.n	80032ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032a0:	4b39      	ldr	r3, [pc, #228]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032a4:	4a38      	ldr	r2, [pc, #224]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032a6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032aa:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	699b      	ldr	r3, [r3, #24]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	f000 80a1 	beq.w	80033f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80032b6:	4b34      	ldr	r3, [pc, #208]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032b8:	689b      	ldr	r3, [r3, #8]
 80032ba:	f003 030c 	and.w	r3, r3, #12
 80032be:	2b08      	cmp	r3, #8
 80032c0:	d05c      	beq.n	800337c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	699b      	ldr	r3, [r3, #24]
 80032c6:	2b02      	cmp	r3, #2
 80032c8:	d141      	bne.n	800334e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032ca:	4b31      	ldr	r3, [pc, #196]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 80032cc:	2200      	movs	r2, #0
 80032ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032d0:	f7fe fcbc 	bl	8001c4c <HAL_GetTick>
 80032d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032d6:	e008      	b.n	80032ea <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032d8:	f7fe fcb8 	bl	8001c4c <HAL_GetTick>
 80032dc:	4602      	mov	r2, r0
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	1ad3      	subs	r3, r2, r3
 80032e2:	2b02      	cmp	r3, #2
 80032e4:	d901      	bls.n	80032ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80032e6:	2303      	movs	r3, #3
 80032e8:	e087      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80032ea:	4b27      	ldr	r3, [pc, #156]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d1f0      	bne.n	80032d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	69da      	ldr	r2, [r3, #28]
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	6a1b      	ldr	r3, [r3, #32]
 80032fe:	431a      	orrs	r2, r3
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003304:	019b      	lsls	r3, r3, #6
 8003306:	431a      	orrs	r2, r3
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800330c:	085b      	lsrs	r3, r3, #1
 800330e:	3b01      	subs	r3, #1
 8003310:	041b      	lsls	r3, r3, #16
 8003312:	431a      	orrs	r2, r3
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003318:	061b      	lsls	r3, r3, #24
 800331a:	491b      	ldr	r1, [pc, #108]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 800331c:	4313      	orrs	r3, r2
 800331e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003320:	4b1b      	ldr	r3, [pc, #108]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 8003322:	2201      	movs	r2, #1
 8003324:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003326:	f7fe fc91 	bl	8001c4c <HAL_GetTick>
 800332a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800332c:	e008      	b.n	8003340 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800332e:	f7fe fc8d 	bl	8001c4c <HAL_GetTick>
 8003332:	4602      	mov	r2, r0
 8003334:	693b      	ldr	r3, [r7, #16]
 8003336:	1ad3      	subs	r3, r2, r3
 8003338:	2b02      	cmp	r3, #2
 800333a:	d901      	bls.n	8003340 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800333c:	2303      	movs	r3, #3
 800333e:	e05c      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003340:	4b11      	ldr	r3, [pc, #68]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003348:	2b00      	cmp	r3, #0
 800334a:	d0f0      	beq.n	800332e <HAL_RCC_OscConfig+0x416>
 800334c:	e054      	b.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800334e:	4b10      	ldr	r3, [pc, #64]	@ (8003390 <HAL_RCC_OscConfig+0x478>)
 8003350:	2200      	movs	r2, #0
 8003352:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003354:	f7fe fc7a 	bl	8001c4c <HAL_GetTick>
 8003358:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800335a:	e008      	b.n	800336e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800335c:	f7fe fc76 	bl	8001c4c <HAL_GetTick>
 8003360:	4602      	mov	r2, r0
 8003362:	693b      	ldr	r3, [r7, #16]
 8003364:	1ad3      	subs	r3, r2, r3
 8003366:	2b02      	cmp	r3, #2
 8003368:	d901      	bls.n	800336e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800336a:	2303      	movs	r3, #3
 800336c:	e045      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800336e:	4b06      	ldr	r3, [pc, #24]	@ (8003388 <HAL_RCC_OscConfig+0x470>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003376:	2b00      	cmp	r3, #0
 8003378:	d1f0      	bne.n	800335c <HAL_RCC_OscConfig+0x444>
 800337a:	e03d      	b.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	699b      	ldr	r3, [r3, #24]
 8003380:	2b01      	cmp	r3, #1
 8003382:	d107      	bne.n	8003394 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e038      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
 8003388:	40023800 	.word	0x40023800
 800338c:	40007000 	.word	0x40007000
 8003390:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003394:	4b1b      	ldr	r3, [pc, #108]	@ (8003404 <HAL_RCC_OscConfig+0x4ec>)
 8003396:	685b      	ldr	r3, [r3, #4]
 8003398:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	699b      	ldr	r3, [r3, #24]
 800339e:	2b01      	cmp	r3, #1
 80033a0:	d028      	beq.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80033ac:	429a      	cmp	r2, r3
 80033ae:	d121      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ba:	429a      	cmp	r2, r3
 80033bc:	d11a      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033be:	68fa      	ldr	r2, [r7, #12]
 80033c0:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80033c4:	4013      	ands	r3, r2
 80033c6:	687a      	ldr	r2, [r7, #4]
 80033c8:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80033ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d111      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033d0:	68fb      	ldr	r3, [r7, #12]
 80033d2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80033da:	085b      	lsrs	r3, r3, #1
 80033dc:	3b01      	subs	r3, #1
 80033de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80033e0:	429a      	cmp	r2, r3
 80033e2:	d107      	bne.n	80033f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80033ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80033f0:	429a      	cmp	r2, r3
 80033f2:	d001      	beq.n	80033f8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e000      	b.n	80033fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80033f8:	2300      	movs	r3, #0
}
 80033fa:	4618      	mov	r0, r3
 80033fc:	3718      	adds	r7, #24
 80033fe:	46bd      	mov	sp, r7
 8003400:	bd80      	pop	{r7, pc}
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800

08003408 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003408:	b580      	push	{r7, lr}
 800340a:	b084      	sub	sp, #16
 800340c:	af00      	add	r7, sp, #0
 800340e:	6078      	str	r0, [r7, #4]
 8003410:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	2b00      	cmp	r3, #0
 8003416:	d101      	bne.n	800341c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003418:	2301      	movs	r3, #1
 800341a:	e0cc      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800341c:	4b68      	ldr	r3, [pc, #416]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 0307 	and.w	r3, r3, #7
 8003424:	683a      	ldr	r2, [r7, #0]
 8003426:	429a      	cmp	r2, r3
 8003428:	d90c      	bls.n	8003444 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800342a:	4b65      	ldr	r3, [pc, #404]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800342c:	683a      	ldr	r2, [r7, #0]
 800342e:	b2d2      	uxtb	r2, r2
 8003430:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003432:	4b63      	ldr	r3, [pc, #396]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	f003 0307 	and.w	r3, r3, #7
 800343a:	683a      	ldr	r2, [r7, #0]
 800343c:	429a      	cmp	r2, r3
 800343e:	d001      	beq.n	8003444 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003440:	2301      	movs	r3, #1
 8003442:	e0b8      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0302 	and.w	r3, r3, #2
 800344c:	2b00      	cmp	r3, #0
 800344e:	d020      	beq.n	8003492 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	f003 0304 	and.w	r3, r3, #4
 8003458:	2b00      	cmp	r3, #0
 800345a:	d005      	beq.n	8003468 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800345c:	4b59      	ldr	r3, [pc, #356]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800345e:	689b      	ldr	r3, [r3, #8]
 8003460:	4a58      	ldr	r2, [pc, #352]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003462:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003466:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0308 	and.w	r3, r3, #8
 8003470:	2b00      	cmp	r3, #0
 8003472:	d005      	beq.n	8003480 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003474:	4b53      	ldr	r3, [pc, #332]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003476:	689b      	ldr	r3, [r3, #8]
 8003478:	4a52      	ldr	r2, [pc, #328]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800347a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800347e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003480:	4b50      	ldr	r3, [pc, #320]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003482:	689b      	ldr	r3, [r3, #8]
 8003484:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	689b      	ldr	r3, [r3, #8]
 800348c:	494d      	ldr	r1, [pc, #308]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800348e:	4313      	orrs	r3, r2
 8003490:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f003 0301 	and.w	r3, r3, #1
 800349a:	2b00      	cmp	r3, #0
 800349c:	d044      	beq.n	8003528 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	685b      	ldr	r3, [r3, #4]
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d107      	bne.n	80034b6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034a6:	4b47      	ldr	r3, [pc, #284]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d119      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034b2:	2301      	movs	r3, #1
 80034b4:	e07f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	2b02      	cmp	r3, #2
 80034bc:	d003      	beq.n	80034c6 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80034c2:	2b03      	cmp	r3, #3
 80034c4:	d107      	bne.n	80034d6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034c6:	4b3f      	ldr	r3, [pc, #252]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d109      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034d2:	2301      	movs	r3, #1
 80034d4:	e06f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d6:	4b3b      	ldr	r3, [pc, #236]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f003 0302 	and.w	r3, r3, #2
 80034de:	2b00      	cmp	r3, #0
 80034e0:	d101      	bne.n	80034e6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034e2:	2301      	movs	r3, #1
 80034e4:	e067      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034e6:	4b37      	ldr	r3, [pc, #220]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034e8:	689b      	ldr	r3, [r3, #8]
 80034ea:	f023 0203 	bic.w	r2, r3, #3
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	685b      	ldr	r3, [r3, #4]
 80034f2:	4934      	ldr	r1, [pc, #208]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 80034f4:	4313      	orrs	r3, r2
 80034f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034f8:	f7fe fba8 	bl	8001c4c <HAL_GetTick>
 80034fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034fe:	e00a      	b.n	8003516 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003500:	f7fe fba4 	bl	8001c4c <HAL_GetTick>
 8003504:	4602      	mov	r2, r0
 8003506:	68fb      	ldr	r3, [r7, #12]
 8003508:	1ad3      	subs	r3, r2, r3
 800350a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800350e:	4293      	cmp	r3, r2
 8003510:	d901      	bls.n	8003516 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003512:	2303      	movs	r3, #3
 8003514:	e04f      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003516:	4b2b      	ldr	r3, [pc, #172]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 020c 	and.w	r2, r3, #12
 800351e:	687b      	ldr	r3, [r7, #4]
 8003520:	685b      	ldr	r3, [r3, #4]
 8003522:	009b      	lsls	r3, r3, #2
 8003524:	429a      	cmp	r2, r3
 8003526:	d1eb      	bne.n	8003500 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003528:	4b25      	ldr	r3, [pc, #148]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	f003 0307 	and.w	r3, r3, #7
 8003530:	683a      	ldr	r2, [r7, #0]
 8003532:	429a      	cmp	r2, r3
 8003534:	d20c      	bcs.n	8003550 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003536:	4b22      	ldr	r3, [pc, #136]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003538:	683a      	ldr	r2, [r7, #0]
 800353a:	b2d2      	uxtb	r2, r2
 800353c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800353e:	4b20      	ldr	r3, [pc, #128]	@ (80035c0 <HAL_RCC_ClockConfig+0x1b8>)
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	f003 0307 	and.w	r3, r3, #7
 8003546:	683a      	ldr	r2, [r7, #0]
 8003548:	429a      	cmp	r2, r3
 800354a:	d001      	beq.n	8003550 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800354c:	2301      	movs	r3, #1
 800354e:	e032      	b.n	80035b6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	681b      	ldr	r3, [r3, #0]
 8003554:	f003 0304 	and.w	r3, r3, #4
 8003558:	2b00      	cmp	r3, #0
 800355a:	d008      	beq.n	800356e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800355c:	4b19      	ldr	r3, [pc, #100]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800355e:	689b      	ldr	r3, [r3, #8]
 8003560:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	68db      	ldr	r3, [r3, #12]
 8003568:	4916      	ldr	r1, [pc, #88]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800356a:	4313      	orrs	r3, r2
 800356c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356e:	687b      	ldr	r3, [r7, #4]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	f003 0308 	and.w	r3, r3, #8
 8003576:	2b00      	cmp	r3, #0
 8003578:	d009      	beq.n	800358e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800357a:	4b12      	ldr	r3, [pc, #72]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800357c:	689b      	ldr	r3, [r3, #8]
 800357e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	691b      	ldr	r3, [r3, #16]
 8003586:	00db      	lsls	r3, r3, #3
 8003588:	490e      	ldr	r1, [pc, #56]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 800358a:	4313      	orrs	r3, r2
 800358c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800358e:	f000 f821 	bl	80035d4 <HAL_RCC_GetSysClockFreq>
 8003592:	4602      	mov	r2, r0
 8003594:	4b0b      	ldr	r3, [pc, #44]	@ (80035c4 <HAL_RCC_ClockConfig+0x1bc>)
 8003596:	689b      	ldr	r3, [r3, #8]
 8003598:	091b      	lsrs	r3, r3, #4
 800359a:	f003 030f 	and.w	r3, r3, #15
 800359e:	490a      	ldr	r1, [pc, #40]	@ (80035c8 <HAL_RCC_ClockConfig+0x1c0>)
 80035a0:	5ccb      	ldrb	r3, [r1, r3]
 80035a2:	fa22 f303 	lsr.w	r3, r2, r3
 80035a6:	4a09      	ldr	r2, [pc, #36]	@ (80035cc <HAL_RCC_ClockConfig+0x1c4>)
 80035a8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80035aa:	4b09      	ldr	r3, [pc, #36]	@ (80035d0 <HAL_RCC_ClockConfig+0x1c8>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	4618      	mov	r0, r3
 80035b0:	f7fe f934 	bl	800181c <HAL_InitTick>

  return HAL_OK;
 80035b4:	2300      	movs	r3, #0
}
 80035b6:	4618      	mov	r0, r3
 80035b8:	3710      	adds	r7, #16
 80035ba:	46bd      	mov	sp, r7
 80035bc:	bd80      	pop	{r7, pc}
 80035be:	bf00      	nop
 80035c0:	40023c00 	.word	0x40023c00
 80035c4:	40023800 	.word	0x40023800
 80035c8:	08009324 	.word	0x08009324
 80035cc:	20000000 	.word	0x20000000
 80035d0:	20000004 	.word	0x20000004

080035d4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035d4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80035d8:	b094      	sub	sp, #80	@ 0x50
 80035da:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80035dc:	2300      	movs	r3, #0
 80035de:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80035e0:	2300      	movs	r3, #0
 80035e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80035e4:	2300      	movs	r3, #0
 80035e6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80035e8:	2300      	movs	r3, #0
 80035ea:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80035ec:	4b79      	ldr	r3, [pc, #484]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80035ee:	689b      	ldr	r3, [r3, #8]
 80035f0:	f003 030c 	and.w	r3, r3, #12
 80035f4:	2b08      	cmp	r3, #8
 80035f6:	d00d      	beq.n	8003614 <HAL_RCC_GetSysClockFreq+0x40>
 80035f8:	2b08      	cmp	r3, #8
 80035fa:	f200 80e1 	bhi.w	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d002      	beq.n	8003608 <HAL_RCC_GetSysClockFreq+0x34>
 8003602:	2b04      	cmp	r3, #4
 8003604:	d003      	beq.n	800360e <HAL_RCC_GetSysClockFreq+0x3a>
 8003606:	e0db      	b.n	80037c0 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003608:	4b73      	ldr	r3, [pc, #460]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 800360a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800360c:	e0db      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800360e:	4b73      	ldr	r3, [pc, #460]	@ (80037dc <HAL_RCC_GetSysClockFreq+0x208>)
 8003610:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003612:	e0d8      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003614:	4b6f      	ldr	r3, [pc, #444]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 800361c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800361e:	4b6d      	ldr	r3, [pc, #436]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003626:	2b00      	cmp	r3, #0
 8003628:	d063      	beq.n	80036f2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800362a:	4b6a      	ldr	r3, [pc, #424]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 800362c:	685b      	ldr	r3, [r3, #4]
 800362e:	099b      	lsrs	r3, r3, #6
 8003630:	2200      	movs	r2, #0
 8003632:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003634:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003636:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003638:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800363c:	633b      	str	r3, [r7, #48]	@ 0x30
 800363e:	2300      	movs	r3, #0
 8003640:	637b      	str	r3, [r7, #52]	@ 0x34
 8003642:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003646:	4622      	mov	r2, r4
 8003648:	462b      	mov	r3, r5
 800364a:	f04f 0000 	mov.w	r0, #0
 800364e:	f04f 0100 	mov.w	r1, #0
 8003652:	0159      	lsls	r1, r3, #5
 8003654:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003658:	0150      	lsls	r0, r2, #5
 800365a:	4602      	mov	r2, r0
 800365c:	460b      	mov	r3, r1
 800365e:	4621      	mov	r1, r4
 8003660:	1a51      	subs	r1, r2, r1
 8003662:	6139      	str	r1, [r7, #16]
 8003664:	4629      	mov	r1, r5
 8003666:	eb63 0301 	sbc.w	r3, r3, r1
 800366a:	617b      	str	r3, [r7, #20]
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	f04f 0300 	mov.w	r3, #0
 8003674:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003678:	4659      	mov	r1, fp
 800367a:	018b      	lsls	r3, r1, #6
 800367c:	4651      	mov	r1, sl
 800367e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003682:	4651      	mov	r1, sl
 8003684:	018a      	lsls	r2, r1, #6
 8003686:	4651      	mov	r1, sl
 8003688:	ebb2 0801 	subs.w	r8, r2, r1
 800368c:	4659      	mov	r1, fp
 800368e:	eb63 0901 	sbc.w	r9, r3, r1
 8003692:	f04f 0200 	mov.w	r2, #0
 8003696:	f04f 0300 	mov.w	r3, #0
 800369a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800369e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80036a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80036a6:	4690      	mov	r8, r2
 80036a8:	4699      	mov	r9, r3
 80036aa:	4623      	mov	r3, r4
 80036ac:	eb18 0303 	adds.w	r3, r8, r3
 80036b0:	60bb      	str	r3, [r7, #8]
 80036b2:	462b      	mov	r3, r5
 80036b4:	eb49 0303 	adc.w	r3, r9, r3
 80036b8:	60fb      	str	r3, [r7, #12]
 80036ba:	f04f 0200 	mov.w	r2, #0
 80036be:	f04f 0300 	mov.w	r3, #0
 80036c2:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80036c6:	4629      	mov	r1, r5
 80036c8:	024b      	lsls	r3, r1, #9
 80036ca:	4621      	mov	r1, r4
 80036cc:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80036d0:	4621      	mov	r1, r4
 80036d2:	024a      	lsls	r2, r1, #9
 80036d4:	4610      	mov	r0, r2
 80036d6:	4619      	mov	r1, r3
 80036d8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80036da:	2200      	movs	r2, #0
 80036dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80036de:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80036e0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80036e4:	f7fc fdc4 	bl	8000270 <__aeabi_uldivmod>
 80036e8:	4602      	mov	r2, r0
 80036ea:	460b      	mov	r3, r1
 80036ec:	4613      	mov	r3, r2
 80036ee:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80036f0:	e058      	b.n	80037a4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	099b      	lsrs	r3, r3, #6
 80036f8:	2200      	movs	r2, #0
 80036fa:	4618      	mov	r0, r3
 80036fc:	4611      	mov	r1, r2
 80036fe:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003702:	623b      	str	r3, [r7, #32]
 8003704:	2300      	movs	r3, #0
 8003706:	627b      	str	r3, [r7, #36]	@ 0x24
 8003708:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 800370c:	4642      	mov	r2, r8
 800370e:	464b      	mov	r3, r9
 8003710:	f04f 0000 	mov.w	r0, #0
 8003714:	f04f 0100 	mov.w	r1, #0
 8003718:	0159      	lsls	r1, r3, #5
 800371a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800371e:	0150      	lsls	r0, r2, #5
 8003720:	4602      	mov	r2, r0
 8003722:	460b      	mov	r3, r1
 8003724:	4641      	mov	r1, r8
 8003726:	ebb2 0a01 	subs.w	sl, r2, r1
 800372a:	4649      	mov	r1, r9
 800372c:	eb63 0b01 	sbc.w	fp, r3, r1
 8003730:	f04f 0200 	mov.w	r2, #0
 8003734:	f04f 0300 	mov.w	r3, #0
 8003738:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800373c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003740:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003744:	ebb2 040a 	subs.w	r4, r2, sl
 8003748:	eb63 050b 	sbc.w	r5, r3, fp
 800374c:	f04f 0200 	mov.w	r2, #0
 8003750:	f04f 0300 	mov.w	r3, #0
 8003754:	00eb      	lsls	r3, r5, #3
 8003756:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800375a:	00e2      	lsls	r2, r4, #3
 800375c:	4614      	mov	r4, r2
 800375e:	461d      	mov	r5, r3
 8003760:	4643      	mov	r3, r8
 8003762:	18e3      	adds	r3, r4, r3
 8003764:	603b      	str	r3, [r7, #0]
 8003766:	464b      	mov	r3, r9
 8003768:	eb45 0303 	adc.w	r3, r5, r3
 800376c:	607b      	str	r3, [r7, #4]
 800376e:	f04f 0200 	mov.w	r2, #0
 8003772:	f04f 0300 	mov.w	r3, #0
 8003776:	e9d7 4500 	ldrd	r4, r5, [r7]
 800377a:	4629      	mov	r1, r5
 800377c:	028b      	lsls	r3, r1, #10
 800377e:	4621      	mov	r1, r4
 8003780:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003784:	4621      	mov	r1, r4
 8003786:	028a      	lsls	r2, r1, #10
 8003788:	4610      	mov	r0, r2
 800378a:	4619      	mov	r1, r3
 800378c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800378e:	2200      	movs	r2, #0
 8003790:	61bb      	str	r3, [r7, #24]
 8003792:	61fa      	str	r2, [r7, #28]
 8003794:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003798:	f7fc fd6a 	bl	8000270 <__aeabi_uldivmod>
 800379c:	4602      	mov	r2, r0
 800379e:	460b      	mov	r3, r1
 80037a0:	4613      	mov	r3, r2
 80037a2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80037a4:	4b0b      	ldr	r3, [pc, #44]	@ (80037d4 <HAL_RCC_GetSysClockFreq+0x200>)
 80037a6:	685b      	ldr	r3, [r3, #4]
 80037a8:	0c1b      	lsrs	r3, r3, #16
 80037aa:	f003 0303 	and.w	r3, r3, #3
 80037ae:	3301      	adds	r3, #1
 80037b0:	005b      	lsls	r3, r3, #1
 80037b2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80037b4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80037b6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80037b8:	fbb2 f3f3 	udiv	r3, r2, r3
 80037bc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037be:	e002      	b.n	80037c6 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80037c0:	4b05      	ldr	r3, [pc, #20]	@ (80037d8 <HAL_RCC_GetSysClockFreq+0x204>)
 80037c2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80037c4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80037c6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3750      	adds	r7, #80	@ 0x50
 80037cc:	46bd      	mov	sp, r7
 80037ce:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80037d2:	bf00      	nop
 80037d4:	40023800 	.word	0x40023800
 80037d8:	00f42400 	.word	0x00f42400
 80037dc:	007a1200 	.word	0x007a1200

080037e0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80037e0:	b480      	push	{r7}
 80037e2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80037e4:	4b03      	ldr	r3, [pc, #12]	@ (80037f4 <HAL_RCC_GetHCLKFreq+0x14>)
 80037e6:	681b      	ldr	r3, [r3, #0]
}
 80037e8:	4618      	mov	r0, r3
 80037ea:	46bd      	mov	sp, r7
 80037ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f0:	4770      	bx	lr
 80037f2:	bf00      	nop
 80037f4:	20000000 	.word	0x20000000

080037f8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80037f8:	b580      	push	{r7, lr}
 80037fa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80037fc:	f7ff fff0 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003800:	4602      	mov	r2, r0
 8003802:	4b05      	ldr	r3, [pc, #20]	@ (8003818 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003804:	689b      	ldr	r3, [r3, #8]
 8003806:	0a9b      	lsrs	r3, r3, #10
 8003808:	f003 0307 	and.w	r3, r3, #7
 800380c:	4903      	ldr	r1, [pc, #12]	@ (800381c <HAL_RCC_GetPCLK1Freq+0x24>)
 800380e:	5ccb      	ldrb	r3, [r1, r3]
 8003810:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003814:	4618      	mov	r0, r3
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40023800 	.word	0x40023800
 800381c:	08009334 	.word	0x08009334

08003820 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003824:	f7ff ffdc 	bl	80037e0 <HAL_RCC_GetHCLKFreq>
 8003828:	4602      	mov	r2, r0
 800382a:	4b05      	ldr	r3, [pc, #20]	@ (8003840 <HAL_RCC_GetPCLK2Freq+0x20>)
 800382c:	689b      	ldr	r3, [r3, #8]
 800382e:	0b5b      	lsrs	r3, r3, #13
 8003830:	f003 0307 	and.w	r3, r3, #7
 8003834:	4903      	ldr	r1, [pc, #12]	@ (8003844 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003836:	5ccb      	ldrb	r3, [r1, r3]
 8003838:	fa22 f303 	lsr.w	r3, r2, r3
}
 800383c:	4618      	mov	r0, r3
 800383e:	bd80      	pop	{r7, pc}
 8003840:	40023800 	.word	0x40023800
 8003844:	08009334 	.word	0x08009334

08003848 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003848:	b480      	push	{r7}
 800384a:	b083      	sub	sp, #12
 800384c:	af00      	add	r7, sp, #0
 800384e:	6078      	str	r0, [r7, #4]
 8003850:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	220f      	movs	r2, #15
 8003856:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003858:	4b12      	ldr	r3, [pc, #72]	@ (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800385a:	689b      	ldr	r3, [r3, #8]
 800385c:	f003 0203 	and.w	r2, r3, #3
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003864:	4b0f      	ldr	r3, [pc, #60]	@ (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003866:	689b      	ldr	r3, [r3, #8]
 8003868:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003870:	4b0c      	ldr	r3, [pc, #48]	@ (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 8003872:	689b      	ldr	r3, [r3, #8]
 8003874:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800387c:	4b09      	ldr	r3, [pc, #36]	@ (80038a4 <HAL_RCC_GetClockConfig+0x5c>)
 800387e:	689b      	ldr	r3, [r3, #8]
 8003880:	08db      	lsrs	r3, r3, #3
 8003882:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800388a:	4b07      	ldr	r3, [pc, #28]	@ (80038a8 <HAL_RCC_GetClockConfig+0x60>)
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f003 0207 	and.w	r2, r3, #7
 8003892:	683b      	ldr	r3, [r7, #0]
 8003894:	601a      	str	r2, [r3, #0]
}
 8003896:	bf00      	nop
 8003898:	370c      	adds	r7, #12
 800389a:	46bd      	mov	sp, r7
 800389c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a0:	4770      	bx	lr
 80038a2:	bf00      	nop
 80038a4:	40023800 	.word	0x40023800
 80038a8:	40023c00 	.word	0x40023c00

080038ac <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e07b      	b.n	80039b6 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038c2:	2b00      	cmp	r3, #0
 80038c4:	d108      	bne.n	80038d8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	685b      	ldr	r3, [r3, #4]
 80038ca:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038ce:	d009      	beq.n	80038e4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	2200      	movs	r2, #0
 80038d4:	61da      	str	r2, [r3, #28]
 80038d6:	e005      	b.n	80038e4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2200      	movs	r2, #0
 80038dc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	2200      	movs	r2, #0
 80038e2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	2200      	movs	r2, #0
 80038e8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038f0:	b2db      	uxtb	r3, r3
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d106      	bne.n	8003904 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	2200      	movs	r2, #0
 80038fa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80038fe:	6878      	ldr	r0, [r7, #4]
 8003900:	f7fd feec 	bl	80016dc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	2202      	movs	r2, #2
 8003908:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	681a      	ldr	r2, [r3, #0]
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800391a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	685b      	ldr	r3, [r3, #4]
 8003920:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	689b      	ldr	r3, [r3, #8]
 8003928:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800392c:	431a      	orrs	r2, r3
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	68db      	ldr	r3, [r3, #12]
 8003932:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003936:	431a      	orrs	r2, r3
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	691b      	ldr	r3, [r3, #16]
 800393c:	f003 0302 	and.w	r3, r3, #2
 8003940:	431a      	orrs	r2, r3
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	695b      	ldr	r3, [r3, #20]
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	431a      	orrs	r2, r3
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	699b      	ldr	r3, [r3, #24]
 8003950:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003954:	431a      	orrs	r2, r3
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	69db      	ldr	r3, [r3, #28]
 800395a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800395e:	431a      	orrs	r2, r3
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	6a1b      	ldr	r3, [r3, #32]
 8003964:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003968:	ea42 0103 	orr.w	r1, r2, r3
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003970:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	430a      	orrs	r2, r1
 800397a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	699b      	ldr	r3, [r3, #24]
 8003980:	0c1b      	lsrs	r3, r3, #16
 8003982:	f003 0104 	and.w	r1, r3, #4
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398a:	f003 0210 	and.w	r2, r3, #16
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	430a      	orrs	r2, r1
 8003994:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	69da      	ldr	r2, [r3, #28]
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039a4:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	2200      	movs	r2, #0
 80039aa:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80039ac:	687b      	ldr	r3, [r7, #4]
 80039ae:	2201      	movs	r2, #1
 80039b0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80039b4:	2300      	movs	r3, #0
}
 80039b6:	4618      	mov	r0, r3
 80039b8:	3708      	adds	r7, #8
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}
	...

080039c0 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 80039c0:	b580      	push	{r7, lr}
 80039c2:	b088      	sub	sp, #32
 80039c4:	af00      	add	r7, sp, #0
 80039c6:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	685b      	ldr	r3, [r3, #4]
 80039ce:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 80039d0:	687b      	ldr	r3, [r7, #4]
 80039d2:	681b      	ldr	r3, [r3, #0]
 80039d4:	689b      	ldr	r3, [r3, #8]
 80039d6:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039d8:	69bb      	ldr	r3, [r7, #24]
 80039da:	099b      	lsrs	r3, r3, #6
 80039dc:	f003 0301 	and.w	r3, r3, #1
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d10f      	bne.n	8003a04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039e4:	69bb      	ldr	r3, [r7, #24]
 80039e6:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00a      	beq.n	8003a04 <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	099b      	lsrs	r3, r3, #6
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d004      	beq.n	8003a04 <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	4798      	blx	r3
    return;
 8003a02:	e0d7      	b.n	8003bb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003a04:	69bb      	ldr	r3, [r7, #24]
 8003a06:	085b      	lsrs	r3, r3, #1
 8003a08:	f003 0301 	and.w	r3, r3, #1
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d00a      	beq.n	8003a26 <HAL_SPI_IRQHandler+0x66>
 8003a10:	69fb      	ldr	r3, [r7, #28]
 8003a12:	09db      	lsrs	r3, r3, #7
 8003a14:	f003 0301 	and.w	r3, r3, #1
 8003a18:	2b00      	cmp	r3, #0
 8003a1a:	d004      	beq.n	8003a26 <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003a20:	6878      	ldr	r0, [r7, #4]
 8003a22:	4798      	blx	r3
    return;
 8003a24:	e0c6      	b.n	8003bb4 <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a26:	69bb      	ldr	r3, [r7, #24]
 8003a28:	095b      	lsrs	r3, r3, #5
 8003a2a:	f003 0301 	and.w	r3, r3, #1
 8003a2e:	2b00      	cmp	r3, #0
 8003a30:	d10c      	bne.n	8003a4c <HAL_SPI_IRQHandler+0x8c>
 8003a32:	69bb      	ldr	r3, [r7, #24]
 8003a34:	099b      	lsrs	r3, r3, #6
 8003a36:	f003 0301 	and.w	r3, r3, #1
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d106      	bne.n	8003a4c <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003a3e:	69bb      	ldr	r3, [r7, #24]
 8003a40:	0a1b      	lsrs	r3, r3, #8
 8003a42:	f003 0301 	and.w	r3, r3, #1
 8003a46:	2b00      	cmp	r3, #0
 8003a48:	f000 80b4 	beq.w	8003bb4 <HAL_SPI_IRQHandler+0x1f4>
 8003a4c:	69fb      	ldr	r3, [r7, #28]
 8003a4e:	095b      	lsrs	r3, r3, #5
 8003a50:	f003 0301 	and.w	r3, r3, #1
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	f000 80ad 	beq.w	8003bb4 <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003a5a:	69bb      	ldr	r3, [r7, #24]
 8003a5c:	099b      	lsrs	r3, r3, #6
 8003a5e:	f003 0301 	and.w	r3, r3, #1
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d023      	beq.n	8003aae <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003a6c:	b2db      	uxtb	r3, r3
 8003a6e:	2b03      	cmp	r3, #3
 8003a70:	d011      	beq.n	8003a96 <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a76:	f043 0204 	orr.w	r2, r3, #4
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a7e:	2300      	movs	r3, #0
 8003a80:	617b      	str	r3, [r7, #20]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	68db      	ldr	r3, [r3, #12]
 8003a88:	617b      	str	r3, [r7, #20]
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	689b      	ldr	r3, [r3, #8]
 8003a90:	617b      	str	r3, [r7, #20]
 8003a92:	697b      	ldr	r3, [r7, #20]
 8003a94:	e00b      	b.n	8003aae <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	681b      	ldr	r3, [r3, #0]
 8003a9e:	68db      	ldr	r3, [r3, #12]
 8003aa0:	613b      	str	r3, [r7, #16]
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	689b      	ldr	r3, [r3, #8]
 8003aa8:	613b      	str	r3, [r7, #16]
 8003aaa:	693b      	ldr	r3, [r7, #16]
        return;
 8003aac:	e082      	b.n	8003bb4 <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003aae:	69bb      	ldr	r3, [r7, #24]
 8003ab0:	095b      	lsrs	r3, r3, #5
 8003ab2:	f003 0301 	and.w	r3, r3, #1
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d014      	beq.n	8003ae4 <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003abe:	f043 0201 	orr.w	r2, r3, #1
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003ac6:	2300      	movs	r3, #0
 8003ac8:	60fb      	str	r3, [r7, #12]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	689b      	ldr	r3, [r3, #8]
 8003ad0:	60fb      	str	r3, [r7, #12]
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	681a      	ldr	r2, [r3, #0]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ae0:	601a      	str	r2, [r3, #0]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ae4:	69bb      	ldr	r3, [r7, #24]
 8003ae6:	0a1b      	lsrs	r3, r3, #8
 8003ae8:	f003 0301 	and.w	r3, r3, #1
 8003aec:	2b00      	cmp	r3, #0
 8003aee:	d00c      	beq.n	8003b0a <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003af4:	f043 0208 	orr.w	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8003afc:	2300      	movs	r3, #0
 8003afe:	60bb      	str	r3, [r7, #8]
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	689b      	ldr	r3, [r3, #8]
 8003b06:	60bb      	str	r3, [r7, #8]
 8003b08:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d04f      	beq.n	8003bb2 <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	681b      	ldr	r3, [r3, #0]
 8003b16:	685a      	ldr	r2, [r3, #4]
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003b20:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2201      	movs	r2, #1
 8003b26:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8003b2a:	69fb      	ldr	r3, [r7, #28]
 8003b2c:	f003 0302 	and.w	r3, r3, #2
 8003b30:	2b00      	cmp	r3, #0
 8003b32:	d104      	bne.n	8003b3e <HAL_SPI_IRQHandler+0x17e>
 8003b34:	69fb      	ldr	r3, [r7, #28]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b00      	cmp	r3, #0
 8003b3c:	d034      	beq.n	8003ba8 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	685a      	ldr	r2, [r3, #4]
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f022 0203 	bic.w	r2, r2, #3
 8003b4c:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b52:	2b00      	cmp	r3, #0
 8003b54:	d011      	beq.n	8003b7a <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b5a:	4a18      	ldr	r2, [pc, #96]	@ (8003bbc <HAL_SPI_IRQHandler+0x1fc>)
 8003b5c:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8003b62:	4618      	mov	r0, r3
 8003b64:	f7ff f81a 	bl	8002b9c <HAL_DMA_Abort_IT>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d005      	beq.n	8003b7a <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b72:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b7e:	2b00      	cmp	r3, #0
 8003b80:	d016      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b86:	4a0d      	ldr	r2, [pc, #52]	@ (8003bbc <HAL_SPI_IRQHandler+0x1fc>)
 8003b88:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003b8e:	4618      	mov	r0, r3
 8003b90:	f7ff f804 	bl	8002b9c <HAL_DMA_Abort_IT>
 8003b94:	4603      	mov	r3, r0
 8003b96:	2b00      	cmp	r3, #0
 8003b98:	d00a      	beq.n	8003bb0 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003b9e:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 8003ba6:	e003      	b.n	8003bb0 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 8003ba8:	6878      	ldr	r0, [r7, #4]
 8003baa:	f000 f809 	bl	8003bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 8003bae:	e000      	b.n	8003bb2 <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 8003bb0:	bf00      	nop
    return;
 8003bb2:	bf00      	nop
  }
}
 8003bb4:	3720      	adds	r7, #32
 8003bb6:	46bd      	mov	sp, r7
 8003bb8:	bd80      	pop	{r7, pc}
 8003bba:	bf00      	nop
 8003bbc:	08003bd5 	.word	0x08003bd5

08003bc0 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 8003bc0:	b480      	push	{r7}
 8003bc2:	b083      	sub	sp, #12
 8003bc4:	af00      	add	r7, sp, #0
 8003bc6:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr

08003bd4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8003bd4:	b580      	push	{r7, lr}
 8003bd6:	b084      	sub	sp, #16
 8003bd8:	af00      	add	r7, sp, #0
 8003bda:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003be0:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	2200      	movs	r2, #0
 8003be6:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	2200      	movs	r2, #0
 8003bec:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8003bee:	68f8      	ldr	r0, [r7, #12]
 8003bf0:	f7ff ffe6 	bl	8003bc0 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 8003bf4:	bf00      	nop
 8003bf6:	3710      	adds	r7, #16
 8003bf8:	46bd      	mov	sp, r7
 8003bfa:	bd80      	pop	{r7, pc}

08003bfc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e041      	b.n	8003c92 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c14:	b2db      	uxtb	r3, r3
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d106      	bne.n	8003c28 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f839 	bl	8003c9a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2202      	movs	r2, #2
 8003c2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681a      	ldr	r2, [r3, #0]
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	3304      	adds	r3, #4
 8003c38:	4619      	mov	r1, r3
 8003c3a:	4610      	mov	r0, r2
 8003c3c:	f000 f9c0 	bl	8003fc0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	2201      	movs	r2, #1
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c90:	2300      	movs	r3, #0
}
 8003c92:	4618      	mov	r0, r3
 8003c94:	3708      	adds	r7, #8
 8003c96:	46bd      	mov	sp, r7
 8003c98:	bd80      	pop	{r7, pc}

08003c9a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003c9a:	b480      	push	{r7}
 8003c9c:	b083      	sub	sp, #12
 8003c9e:	af00      	add	r7, sp, #0
 8003ca0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003ca2:	bf00      	nop
 8003ca4:	370c      	adds	r7, #12
 8003ca6:	46bd      	mov	sp, r7
 8003ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cac:	4770      	bx	lr
	...

08003cb0 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003cb0:	b480      	push	{r7}
 8003cb2:	b085      	sub	sp, #20
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cbe:	b2db      	uxtb	r3, r3
 8003cc0:	2b01      	cmp	r3, #1
 8003cc2:	d001      	beq.n	8003cc8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003cc4:	2301      	movs	r3, #1
 8003cc6:	e04e      	b.n	8003d66 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	2202      	movs	r2, #2
 8003ccc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	68da      	ldr	r2, [r3, #12]
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	f042 0201 	orr.w	r2, r2, #1
 8003cde:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	4a23      	ldr	r2, [pc, #140]	@ (8003d74 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ce6:	4293      	cmp	r3, r2
 8003ce8:	d022      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cf2:	d01d      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	4a1f      	ldr	r2, [pc, #124]	@ (8003d78 <HAL_TIM_Base_Start_IT+0xc8>)
 8003cfa:	4293      	cmp	r3, r2
 8003cfc:	d018      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	4a1e      	ldr	r2, [pc, #120]	@ (8003d7c <HAL_TIM_Base_Start_IT+0xcc>)
 8003d04:	4293      	cmp	r3, r2
 8003d06:	d013      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	4a1c      	ldr	r2, [pc, #112]	@ (8003d80 <HAL_TIM_Base_Start_IT+0xd0>)
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d00e      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	681b      	ldr	r3, [r3, #0]
 8003d16:	4a1b      	ldr	r2, [pc, #108]	@ (8003d84 <HAL_TIM_Base_Start_IT+0xd4>)
 8003d18:	4293      	cmp	r3, r2
 8003d1a:	d009      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	4a19      	ldr	r2, [pc, #100]	@ (8003d88 <HAL_TIM_Base_Start_IT+0xd8>)
 8003d22:	4293      	cmp	r3, r2
 8003d24:	d004      	beq.n	8003d30 <HAL_TIM_Base_Start_IT+0x80>
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	681b      	ldr	r3, [r3, #0]
 8003d2a:	4a18      	ldr	r2, [pc, #96]	@ (8003d8c <HAL_TIM_Base_Start_IT+0xdc>)
 8003d2c:	4293      	cmp	r3, r2
 8003d2e:	d111      	bne.n	8003d54 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	689b      	ldr	r3, [r3, #8]
 8003d36:	f003 0307 	and.w	r3, r3, #7
 8003d3a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	2b06      	cmp	r3, #6
 8003d40:	d010      	beq.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	681a      	ldr	r2, [r3, #0]
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	f042 0201 	orr.w	r2, r2, #1
 8003d50:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d52:	e007      	b.n	8003d64 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	681a      	ldr	r2, [r3, #0]
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	f042 0201 	orr.w	r2, r2, #1
 8003d62:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d64:	2300      	movs	r3, #0
}
 8003d66:	4618      	mov	r0, r3
 8003d68:	3714      	adds	r7, #20
 8003d6a:	46bd      	mov	sp, r7
 8003d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d70:	4770      	bx	lr
 8003d72:	bf00      	nop
 8003d74:	40010000 	.word	0x40010000
 8003d78:	40000400 	.word	0x40000400
 8003d7c:	40000800 	.word	0x40000800
 8003d80:	40000c00 	.word	0x40000c00
 8003d84:	40010400 	.word	0x40010400
 8003d88:	40014000 	.word	0x40014000
 8003d8c:	40001800 	.word	0x40001800

08003d90 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003d90:	b580      	push	{r7, lr}
 8003d92:	b084      	sub	sp, #16
 8003d94:	af00      	add	r7, sp, #0
 8003d96:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	68db      	ldr	r3, [r3, #12]
 8003d9e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	691b      	ldr	r3, [r3, #16]
 8003da6:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003da8:	68bb      	ldr	r3, [r7, #8]
 8003daa:	f003 0302 	and.w	r3, r3, #2
 8003dae:	2b00      	cmp	r3, #0
 8003db0:	d020      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	f003 0302 	and.w	r3, r3, #2
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d01b      	beq.n	8003df4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f06f 0202 	mvn.w	r2, #2
 8003dc4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2201      	movs	r2, #1
 8003dca:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	699b      	ldr	r3, [r3, #24]
 8003dd2:	f003 0303 	and.w	r3, r3, #3
 8003dd6:	2b00      	cmp	r3, #0
 8003dd8:	d003      	beq.n	8003de2 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003dda:	6878      	ldr	r0, [r7, #4]
 8003ddc:	f000 f8d2 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003de0:	e005      	b.n	8003dee <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003de2:	6878      	ldr	r0, [r7, #4]
 8003de4:	f000 f8c4 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003de8:	6878      	ldr	r0, [r7, #4]
 8003dea:	f000 f8d5 	bl	8003f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	2200      	movs	r2, #0
 8003df2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	f003 0304 	and.w	r3, r3, #4
 8003dfa:	2b00      	cmp	r3, #0
 8003dfc:	d020      	beq.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003dfe:	68fb      	ldr	r3, [r7, #12]
 8003e00:	f003 0304 	and.w	r3, r3, #4
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d01b      	beq.n	8003e40 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	f06f 0204 	mvn.w	r2, #4
 8003e10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	2202      	movs	r2, #2
 8003e16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	699b      	ldr	r3, [r3, #24]
 8003e1e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003e22:	2b00      	cmp	r3, #0
 8003e24:	d003      	beq.n	8003e2e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e26:	6878      	ldr	r0, [r7, #4]
 8003e28:	f000 f8ac 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003e2c:	e005      	b.n	8003e3a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e2e:	6878      	ldr	r0, [r7, #4]
 8003e30:	f000 f89e 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f8af 	bl	8003f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003e40:	68bb      	ldr	r3, [r7, #8]
 8003e42:	f003 0308 	and.w	r3, r3, #8
 8003e46:	2b00      	cmp	r3, #0
 8003e48:	d020      	beq.n	8003e8c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003e4a:	68fb      	ldr	r3, [r7, #12]
 8003e4c:	f003 0308 	and.w	r3, r3, #8
 8003e50:	2b00      	cmp	r3, #0
 8003e52:	d01b      	beq.n	8003e8c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	f06f 0208 	mvn.w	r2, #8
 8003e5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003e5e:	687b      	ldr	r3, [r7, #4]
 8003e60:	2204      	movs	r2, #4
 8003e62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	69db      	ldr	r3, [r3, #28]
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	2b00      	cmp	r3, #0
 8003e70:	d003      	beq.n	8003e7a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003e72:	6878      	ldr	r0, [r7, #4]
 8003e74:	f000 f886 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003e78:	e005      	b.n	8003e86 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 f878 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003e80:	6878      	ldr	r0, [r7, #4]
 8003e82:	f000 f889 	bl	8003f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	2200      	movs	r2, #0
 8003e8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003e8c:	68bb      	ldr	r3, [r7, #8]
 8003e8e:	f003 0310 	and.w	r3, r3, #16
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d020      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	f003 0310 	and.w	r3, r3, #16
 8003e9c:	2b00      	cmp	r3, #0
 8003e9e:	d01b      	beq.n	8003ed8 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	f06f 0210 	mvn.w	r2, #16
 8003ea8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2208      	movs	r2, #8
 8003eae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	69db      	ldr	r3, [r3, #28]
 8003eb6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003eba:	2b00      	cmp	r3, #0
 8003ebc:	d003      	beq.n	8003ec6 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ebe:	6878      	ldr	r0, [r7, #4]
 8003ec0:	f000 f860 	bl	8003f84 <HAL_TIM_IC_CaptureCallback>
 8003ec4:	e005      	b.n	8003ed2 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ec6:	6878      	ldr	r0, [r7, #4]
 8003ec8:	f000 f852 	bl	8003f70 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ecc:	6878      	ldr	r0, [r7, #4]
 8003ece:	f000 f863 	bl	8003f98 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	2200      	movs	r2, #0
 8003ed6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003ed8:	68bb      	ldr	r3, [r7, #8]
 8003eda:	f003 0301 	and.w	r3, r3, #1
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d00c      	beq.n	8003efc <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	f003 0301 	and.w	r3, r3, #1
 8003ee8:	2b00      	cmp	r3, #0
 8003eea:	d007      	beq.n	8003efc <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	f06f 0201 	mvn.w	r2, #1
 8003ef4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003ef6:	6878      	ldr	r0, [r7, #4]
 8003ef8:	f7fd fab0 	bl	800145c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003efc:	68bb      	ldr	r3, [r7, #8]
 8003efe:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00c      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d007      	beq.n	8003f20 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003f18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003f1a:	6878      	ldr	r0, [r7, #4]
 8003f1c:	f000 f900 	bl	8004120 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003f20:	68bb      	ldr	r3, [r7, #8]
 8003f22:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f26:	2b00      	cmp	r3, #0
 8003f28:	d00c      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d007      	beq.n	8003f44 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003f3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003f3e:	6878      	ldr	r0, [r7, #4]
 8003f40:	f000 f834 	bl	8003fac <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003f44:	68bb      	ldr	r3, [r7, #8]
 8003f46:	f003 0320 	and.w	r3, r3, #32
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d00c      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	f003 0320 	and.w	r3, r3, #32
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d007      	beq.n	8003f68 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f06f 0220 	mvn.w	r2, #32
 8003f60:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 f8d2 	bl	800410c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003f68:	bf00      	nop
 8003f6a:	3710      	adds	r7, #16
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003f70:	b480      	push	{r7}
 8003f72:	b083      	sub	sp, #12
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003f78:	bf00      	nop
 8003f7a:	370c      	adds	r7, #12
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr

08003f84 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003f84:	b480      	push	{r7}
 8003f86:	b083      	sub	sp, #12
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003f8c:	bf00      	nop
 8003f8e:	370c      	adds	r7, #12
 8003f90:	46bd      	mov	sp, r7
 8003f92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f96:	4770      	bx	lr

08003f98 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003f98:	b480      	push	{r7}
 8003f9a:	b083      	sub	sp, #12
 8003f9c:	af00      	add	r7, sp, #0
 8003f9e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003fa0:	bf00      	nop
 8003fa2:	370c      	adds	r7, #12
 8003fa4:	46bd      	mov	sp, r7
 8003fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003faa:	4770      	bx	lr

08003fac <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003fac:	b480      	push	{r7}
 8003fae:	b083      	sub	sp, #12
 8003fb0:	af00      	add	r7, sp, #0
 8003fb2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003fb4:	bf00      	nop
 8003fb6:	370c      	adds	r7, #12
 8003fb8:	46bd      	mov	sp, r7
 8003fba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fbe:	4770      	bx	lr

08003fc0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b085      	sub	sp, #20
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
 8003fc8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	4a43      	ldr	r2, [pc, #268]	@ (80040e0 <TIM_Base_SetConfig+0x120>)
 8003fd4:	4293      	cmp	r3, r2
 8003fd6:	d013      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003fde:	d00f      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	4a40      	ldr	r2, [pc, #256]	@ (80040e4 <TIM_Base_SetConfig+0x124>)
 8003fe4:	4293      	cmp	r3, r2
 8003fe6:	d00b      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	4a3f      	ldr	r2, [pc, #252]	@ (80040e8 <TIM_Base_SetConfig+0x128>)
 8003fec:	4293      	cmp	r3, r2
 8003fee:	d007      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	4a3e      	ldr	r2, [pc, #248]	@ (80040ec <TIM_Base_SetConfig+0x12c>)
 8003ff4:	4293      	cmp	r3, r2
 8003ff6:	d003      	beq.n	8004000 <TIM_Base_SetConfig+0x40>
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	4a3d      	ldr	r2, [pc, #244]	@ (80040f0 <TIM_Base_SetConfig+0x130>)
 8003ffc:	4293      	cmp	r3, r2
 8003ffe:	d108      	bne.n	8004012 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004006:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004008:	683b      	ldr	r3, [r7, #0]
 800400a:	685b      	ldr	r3, [r3, #4]
 800400c:	68fa      	ldr	r2, [r7, #12]
 800400e:	4313      	orrs	r3, r2
 8004010:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	4a32      	ldr	r2, [pc, #200]	@ (80040e0 <TIM_Base_SetConfig+0x120>)
 8004016:	4293      	cmp	r3, r2
 8004018:	d02b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004020:	d027      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	4a2f      	ldr	r2, [pc, #188]	@ (80040e4 <TIM_Base_SetConfig+0x124>)
 8004026:	4293      	cmp	r3, r2
 8004028:	d023      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	4a2e      	ldr	r2, [pc, #184]	@ (80040e8 <TIM_Base_SetConfig+0x128>)
 800402e:	4293      	cmp	r3, r2
 8004030:	d01f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	4a2d      	ldr	r2, [pc, #180]	@ (80040ec <TIM_Base_SetConfig+0x12c>)
 8004036:	4293      	cmp	r3, r2
 8004038:	d01b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	4a2c      	ldr	r2, [pc, #176]	@ (80040f0 <TIM_Base_SetConfig+0x130>)
 800403e:	4293      	cmp	r3, r2
 8004040:	d017      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	4a2b      	ldr	r2, [pc, #172]	@ (80040f4 <TIM_Base_SetConfig+0x134>)
 8004046:	4293      	cmp	r3, r2
 8004048:	d013      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	4a2a      	ldr	r2, [pc, #168]	@ (80040f8 <TIM_Base_SetConfig+0x138>)
 800404e:	4293      	cmp	r3, r2
 8004050:	d00f      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	4a29      	ldr	r2, [pc, #164]	@ (80040fc <TIM_Base_SetConfig+0x13c>)
 8004056:	4293      	cmp	r3, r2
 8004058:	d00b      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	4a28      	ldr	r2, [pc, #160]	@ (8004100 <TIM_Base_SetConfig+0x140>)
 800405e:	4293      	cmp	r3, r2
 8004060:	d007      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	4a27      	ldr	r2, [pc, #156]	@ (8004104 <TIM_Base_SetConfig+0x144>)
 8004066:	4293      	cmp	r3, r2
 8004068:	d003      	beq.n	8004072 <TIM_Base_SetConfig+0xb2>
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	4a26      	ldr	r2, [pc, #152]	@ (8004108 <TIM_Base_SetConfig+0x148>)
 800406e:	4293      	cmp	r3, r2
 8004070:	d108      	bne.n	8004084 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004078:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800407a:	683b      	ldr	r3, [r7, #0]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	68fa      	ldr	r2, [r7, #12]
 8004080:	4313      	orrs	r3, r2
 8004082:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800408a:	683b      	ldr	r3, [r7, #0]
 800408c:	695b      	ldr	r3, [r3, #20]
 800408e:	4313      	orrs	r3, r2
 8004090:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	689a      	ldr	r2, [r3, #8]
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800409a:	683b      	ldr	r3, [r7, #0]
 800409c:	681a      	ldr	r2, [r3, #0]
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	4a0e      	ldr	r2, [pc, #56]	@ (80040e0 <TIM_Base_SetConfig+0x120>)
 80040a6:	4293      	cmp	r3, r2
 80040a8:	d003      	beq.n	80040b2 <TIM_Base_SetConfig+0xf2>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a10      	ldr	r2, [pc, #64]	@ (80040f0 <TIM_Base_SetConfig+0x130>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d103      	bne.n	80040ba <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	691a      	ldr	r2, [r3, #16]
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	681b      	ldr	r3, [r3, #0]
 80040be:	f043 0204 	orr.w	r2, r3, #4
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	2201      	movs	r2, #1
 80040ca:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	68fa      	ldr	r2, [r7, #12]
 80040d0:	601a      	str	r2, [r3, #0]
}
 80040d2:	bf00      	nop
 80040d4:	3714      	adds	r7, #20
 80040d6:	46bd      	mov	sp, r7
 80040d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040dc:	4770      	bx	lr
 80040de:	bf00      	nop
 80040e0:	40010000 	.word	0x40010000
 80040e4:	40000400 	.word	0x40000400
 80040e8:	40000800 	.word	0x40000800
 80040ec:	40000c00 	.word	0x40000c00
 80040f0:	40010400 	.word	0x40010400
 80040f4:	40014000 	.word	0x40014000
 80040f8:	40014400 	.word	0x40014400
 80040fc:	40014800 	.word	0x40014800
 8004100:	40001800 	.word	0x40001800
 8004104:	40001c00 	.word	0x40001c00
 8004108:	40002000 	.word	0x40002000

0800410c <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800410c:	b480      	push	{r7}
 800410e:	b083      	sub	sp, #12
 8004110:	af00      	add	r7, sp, #0
 8004112:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004114:	bf00      	nop
 8004116:	370c      	adds	r7, #12
 8004118:	46bd      	mov	sp, r7
 800411a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800411e:	4770      	bx	lr

08004120 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004120:	b480      	push	{r7}
 8004122:	b083      	sub	sp, #12
 8004124:	af00      	add	r7, sp, #0
 8004126:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004128:	bf00      	nop
 800412a:	370c      	adds	r7, #12
 800412c:	46bd      	mov	sp, r7
 800412e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004132:	4770      	bx	lr

08004134 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	b082      	sub	sp, #8
 8004138:	af00      	add	r7, sp, #0
 800413a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	2b00      	cmp	r3, #0
 8004140:	d101      	bne.n	8004146 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e042      	b.n	80041cc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800414c:	b2db      	uxtb	r3, r3
 800414e:	2b00      	cmp	r3, #0
 8004150:	d106      	bne.n	8004160 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004152:	687b      	ldr	r3, [r7, #4]
 8004154:	2200      	movs	r2, #0
 8004156:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800415a:	6878      	ldr	r0, [r7, #4]
 800415c:	f7fd fb0e 	bl	800177c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2224      	movs	r2, #36	@ 0x24
 8004164:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	68da      	ldr	r2, [r3, #12]
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004176:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004178:	6878      	ldr	r0, [r7, #4]
 800417a:	f000 fdd3 	bl	8004d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	691a      	ldr	r2, [r3, #16]
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800418c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	695a      	ldr	r2, [r3, #20]
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800419c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	68da      	ldr	r2, [r3, #12]
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80041ac:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80041ae:	687b      	ldr	r3, [r7, #4]
 80041b0:	2200      	movs	r2, #0
 80041b2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	2220      	movs	r2, #32
 80041b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2220      	movs	r2, #32
 80041c0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2200      	movs	r2, #0
 80041c8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80041ca:	2300      	movs	r3, #0
}
 80041cc:	4618      	mov	r0, r3
 80041ce:	3708      	adds	r7, #8
 80041d0:	46bd      	mov	sp, r7
 80041d2:	bd80      	pop	{r7, pc}

080041d4 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80041d4:	b580      	push	{r7, lr}
 80041d6:	b08a      	sub	sp, #40	@ 0x28
 80041d8:	af02      	add	r7, sp, #8
 80041da:	60f8      	str	r0, [r7, #12]
 80041dc:	60b9      	str	r1, [r7, #8]
 80041de:	603b      	str	r3, [r7, #0]
 80041e0:	4613      	mov	r3, r2
 80041e2:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80041e4:	2300      	movs	r3, #0
 80041e6:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80041ee:	b2db      	uxtb	r3, r3
 80041f0:	2b20      	cmp	r3, #32
 80041f2:	d175      	bne.n	80042e0 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80041f4:	68bb      	ldr	r3, [r7, #8]
 80041f6:	2b00      	cmp	r3, #0
 80041f8:	d002      	beq.n	8004200 <HAL_UART_Transmit+0x2c>
 80041fa:	88fb      	ldrh	r3, [r7, #6]
 80041fc:	2b00      	cmp	r3, #0
 80041fe:	d101      	bne.n	8004204 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004200:	2301      	movs	r3, #1
 8004202:	e06e      	b.n	80042e2 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	2200      	movs	r2, #0
 8004208:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2221      	movs	r2, #33	@ 0x21
 800420e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004212:	f7fd fd1b 	bl	8001c4c <HAL_GetTick>
 8004216:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	88fa      	ldrh	r2, [r7, #6]
 800421c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	88fa      	ldrh	r2, [r7, #6]
 8004222:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	689b      	ldr	r3, [r3, #8]
 8004228:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800422c:	d108      	bne.n	8004240 <HAL_UART_Transmit+0x6c>
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	691b      	ldr	r3, [r3, #16]
 8004232:	2b00      	cmp	r3, #0
 8004234:	d104      	bne.n	8004240 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004236:	2300      	movs	r3, #0
 8004238:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800423a:	68bb      	ldr	r3, [r7, #8]
 800423c:	61bb      	str	r3, [r7, #24]
 800423e:	e003      	b.n	8004248 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004244:	2300      	movs	r3, #0
 8004246:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004248:	e02e      	b.n	80042a8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800424a:	683b      	ldr	r3, [r7, #0]
 800424c:	9300      	str	r3, [sp, #0]
 800424e:	697b      	ldr	r3, [r7, #20]
 8004250:	2200      	movs	r2, #0
 8004252:	2180      	movs	r1, #128	@ 0x80
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f000 fb37 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 800425a:	4603      	mov	r3, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	d005      	beq.n	800426c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	2220      	movs	r2, #32
 8004264:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004268:	2303      	movs	r3, #3
 800426a:	e03a      	b.n	80042e2 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800426c:	69fb      	ldr	r3, [r7, #28]
 800426e:	2b00      	cmp	r3, #0
 8004270:	d10b      	bne.n	800428a <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004272:	69bb      	ldr	r3, [r7, #24]
 8004274:	881b      	ldrh	r3, [r3, #0]
 8004276:	461a      	mov	r2, r3
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004280:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004282:	69bb      	ldr	r3, [r7, #24]
 8004284:	3302      	adds	r3, #2
 8004286:	61bb      	str	r3, [r7, #24]
 8004288:	e007      	b.n	800429a <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800428a:	69fb      	ldr	r3, [r7, #28]
 800428c:	781a      	ldrb	r2, [r3, #0]
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004294:	69fb      	ldr	r3, [r7, #28]
 8004296:	3301      	adds	r3, #1
 8004298:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800429e:	b29b      	uxth	r3, r3
 80042a0:	3b01      	subs	r3, #1
 80042a2:	b29a      	uxth	r2, r3
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80042ac:	b29b      	uxth	r3, r3
 80042ae:	2b00      	cmp	r3, #0
 80042b0:	d1cb      	bne.n	800424a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80042b2:	683b      	ldr	r3, [r7, #0]
 80042b4:	9300      	str	r3, [sp, #0]
 80042b6:	697b      	ldr	r3, [r7, #20]
 80042b8:	2200      	movs	r2, #0
 80042ba:	2140      	movs	r1, #64	@ 0x40
 80042bc:	68f8      	ldr	r0, [r7, #12]
 80042be:	f000 fb03 	bl	80048c8 <UART_WaitOnFlagUntilTimeout>
 80042c2:	4603      	mov	r3, r0
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d005      	beq.n	80042d4 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2220      	movs	r2, #32
 80042cc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80042d0:	2303      	movs	r3, #3
 80042d2:	e006      	b.n	80042e2 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80042dc:	2300      	movs	r3, #0
 80042de:	e000      	b.n	80042e2 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80042e0:	2302      	movs	r3, #2
  }
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3720      	adds	r7, #32
 80042e6:	46bd      	mov	sp, r7
 80042e8:	bd80      	pop	{r7, pc}

080042ea <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80042ea:	b580      	push	{r7, lr}
 80042ec:	b084      	sub	sp, #16
 80042ee:	af00      	add	r7, sp, #0
 80042f0:	60f8      	str	r0, [r7, #12]
 80042f2:	60b9      	str	r1, [r7, #8]
 80042f4:	4613      	mov	r3, r2
 80042f6:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	2b20      	cmp	r3, #32
 8004302:	d112      	bne.n	800432a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	2b00      	cmp	r3, #0
 8004308:	d002      	beq.n	8004310 <HAL_UART_Receive_IT+0x26>
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d101      	bne.n	8004314 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004310:	2301      	movs	r3, #1
 8004312:	e00b      	b.n	800432c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	2200      	movs	r2, #0
 8004318:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800431a:	88fb      	ldrh	r3, [r7, #6]
 800431c:	461a      	mov	r2, r3
 800431e:	68b9      	ldr	r1, [r7, #8]
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fb2a 	bl	800497a <UART_Start_Receive_IT>
 8004326:	4603      	mov	r3, r0
 8004328:	e000      	b.n	800432c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 800432a:	2302      	movs	r3, #2
  }
}
 800432c:	4618      	mov	r0, r3
 800432e:	3710      	adds	r7, #16
 8004330:	46bd      	mov	sp, r7
 8004332:	bd80      	pop	{r7, pc}

08004334 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004334:	b580      	push	{r7, lr}
 8004336:	b0ba      	sub	sp, #232	@ 0xe8
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800433c:	687b      	ldr	r3, [r7, #4]
 800433e:	681b      	ldr	r3, [r3, #0]
 8004340:	681b      	ldr	r3, [r3, #0]
 8004342:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	68db      	ldr	r3, [r3, #12]
 800434c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800435a:	2300      	movs	r3, #0
 800435c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004360:	2300      	movs	r3, #0
 8004362:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004366:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800436a:	f003 030f 	and.w	r3, r3, #15
 800436e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004372:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004376:	2b00      	cmp	r3, #0
 8004378:	d10f      	bne.n	800439a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800437a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800437e:	f003 0320 	and.w	r3, r3, #32
 8004382:	2b00      	cmp	r3, #0
 8004384:	d009      	beq.n	800439a <HAL_UART_IRQHandler+0x66>
 8004386:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800438a:	f003 0320 	and.w	r3, r3, #32
 800438e:	2b00      	cmp	r3, #0
 8004390:	d003      	beq.n	800439a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 fc07 	bl	8004ba6 <UART_Receive_IT>
      return;
 8004398:	e273      	b.n	8004882 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800439a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800439e:	2b00      	cmp	r3, #0
 80043a0:	f000 80de 	beq.w	8004560 <HAL_UART_IRQHandler+0x22c>
 80043a4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043a8:	f003 0301 	and.w	r3, r3, #1
 80043ac:	2b00      	cmp	r3, #0
 80043ae:	d106      	bne.n	80043be <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80043b0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043b4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	f000 80d1 	beq.w	8004560 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80043be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043c2:	f003 0301 	and.w	r3, r3, #1
 80043c6:	2b00      	cmp	r3, #0
 80043c8:	d00b      	beq.n	80043e2 <HAL_UART_IRQHandler+0xae>
 80043ca:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80043ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d005      	beq.n	80043e2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043da:	f043 0201 	orr.w	r2, r3, #1
 80043de:	687b      	ldr	r3, [r7, #4]
 80043e0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80043e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80043e6:	f003 0304 	and.w	r3, r3, #4
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d00b      	beq.n	8004406 <HAL_UART_IRQHandler+0xd2>
 80043ee:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d005      	beq.n	8004406 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80043fe:	f043 0202 	orr.w	r2, r3, #2
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800440a:	f003 0302 	and.w	r3, r3, #2
 800440e:	2b00      	cmp	r3, #0
 8004410:	d00b      	beq.n	800442a <HAL_UART_IRQHandler+0xf6>
 8004412:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004416:	f003 0301 	and.w	r3, r3, #1
 800441a:	2b00      	cmp	r3, #0
 800441c:	d005      	beq.n	800442a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800441e:	687b      	ldr	r3, [r7, #4]
 8004420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004422:	f043 0204 	orr.w	r2, r3, #4
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800442a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800442e:	f003 0308 	and.w	r3, r3, #8
 8004432:	2b00      	cmp	r3, #0
 8004434:	d011      	beq.n	800445a <HAL_UART_IRQHandler+0x126>
 8004436:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800443a:	f003 0320 	and.w	r3, r3, #32
 800443e:	2b00      	cmp	r3, #0
 8004440:	d105      	bne.n	800444e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004442:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004446:	f003 0301 	and.w	r3, r3, #1
 800444a:	2b00      	cmp	r3, #0
 800444c:	d005      	beq.n	800445a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004452:	f043 0208 	orr.w	r2, r3, #8
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800445e:	2b00      	cmp	r3, #0
 8004460:	f000 820a 	beq.w	8004878 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004464:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d008      	beq.n	8004482 <HAL_UART_IRQHandler+0x14e>
 8004470:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004474:	f003 0320 	and.w	r3, r3, #32
 8004478:	2b00      	cmp	r3, #0
 800447a:	d002      	beq.n	8004482 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800447c:	6878      	ldr	r0, [r7, #4]
 800447e:	f000 fb92 	bl	8004ba6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	695b      	ldr	r3, [r3, #20]
 8004488:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800448c:	2b40      	cmp	r3, #64	@ 0x40
 800448e:	bf0c      	ite	eq
 8004490:	2301      	moveq	r3, #1
 8004492:	2300      	movne	r3, #0
 8004494:	b2db      	uxtb	r3, r3
 8004496:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800449e:	f003 0308 	and.w	r3, r3, #8
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d103      	bne.n	80044ae <HAL_UART_IRQHandler+0x17a>
 80044a6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80044aa:	2b00      	cmp	r3, #0
 80044ac:	d04f      	beq.n	800454e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80044ae:	6878      	ldr	r0, [r7, #4]
 80044b0:	f000 fa9d 	bl	80049ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	695b      	ldr	r3, [r3, #20]
 80044ba:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80044be:	2b40      	cmp	r3, #64	@ 0x40
 80044c0:	d141      	bne.n	8004546 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	3314      	adds	r3, #20
 80044c8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80044cc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80044d0:	e853 3f00 	ldrex	r3, [r3]
 80044d4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80044d8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80044dc:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80044e0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	3314      	adds	r3, #20
 80044ea:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80044ee:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80044f2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80044f6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80044fa:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80044fe:	e841 2300 	strex	r3, r2, [r1]
 8004502:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004506:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800450a:	2b00      	cmp	r3, #0
 800450c:	d1d9      	bne.n	80044c2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004512:	2b00      	cmp	r3, #0
 8004514:	d013      	beq.n	800453e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800451a:	4a8a      	ldr	r2, [pc, #552]	@ (8004744 <HAL_UART_IRQHandler+0x410>)
 800451c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004522:	4618      	mov	r0, r3
 8004524:	f7fe fb3a 	bl	8002b9c <HAL_DMA_Abort_IT>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d016      	beq.n	800455c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004532:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004534:	687a      	ldr	r2, [r7, #4]
 8004536:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004538:	4610      	mov	r0, r2
 800453a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800453c:	e00e      	b.n	800455c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800453e:	6878      	ldr	r0, [r7, #4]
 8004540:	f000 f9ac 	bl	800489c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004544:	e00a      	b.n	800455c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004546:	6878      	ldr	r0, [r7, #4]
 8004548:	f000 f9a8 	bl	800489c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800454c:	e006      	b.n	800455c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800454e:	6878      	ldr	r0, [r7, #4]
 8004550:	f000 f9a4 	bl	800489c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800455a:	e18d      	b.n	8004878 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800455c:	bf00      	nop
    return;
 800455e:	e18b      	b.n	8004878 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004564:	2b01      	cmp	r3, #1
 8004566:	f040 8167 	bne.w	8004838 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800456a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800456e:	f003 0310 	and.w	r3, r3, #16
 8004572:	2b00      	cmp	r3, #0
 8004574:	f000 8160 	beq.w	8004838 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004578:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800457c:	f003 0310 	and.w	r3, r3, #16
 8004580:	2b00      	cmp	r3, #0
 8004582:	f000 8159 	beq.w	8004838 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004586:	2300      	movs	r3, #0
 8004588:	60bb      	str	r3, [r7, #8]
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	60bb      	str	r3, [r7, #8]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	685b      	ldr	r3, [r3, #4]
 8004598:	60bb      	str	r3, [r7, #8]
 800459a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	695b      	ldr	r3, [r3, #20]
 80045a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80045a6:	2b40      	cmp	r3, #64	@ 0x40
 80045a8:	f040 80ce 	bne.w	8004748 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	685b      	ldr	r3, [r3, #4]
 80045b4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 80045b8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 80045bc:	2b00      	cmp	r3, #0
 80045be:	f000 80a9 	beq.w	8004714 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80045c6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045ca:	429a      	cmp	r2, r3
 80045cc:	f080 80a2 	bcs.w	8004714 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80045d6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80045dc:	69db      	ldr	r3, [r3, #28]
 80045de:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80045e2:	f000 8088 	beq.w	80046f6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	681b      	ldr	r3, [r3, #0]
 80045ea:	330c      	adds	r3, #12
 80045ec:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045f0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80045f4:	e853 3f00 	ldrex	r3, [r3]
 80045f8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80045fc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004600:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004604:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	330c      	adds	r3, #12
 800460e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004612:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004616:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800461a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 800461e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004622:	e841 2300 	strex	r3, r2, [r1]
 8004626:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800462a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 800462e:	2b00      	cmp	r3, #0
 8004630:	d1d9      	bne.n	80045e6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	3314      	adds	r3, #20
 8004638:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800463a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800463c:	e853 3f00 	ldrex	r3, [r3]
 8004640:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004642:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004644:	f023 0301 	bic.w	r3, r3, #1
 8004648:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	3314      	adds	r3, #20
 8004652:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004656:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800465a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800465c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800465e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004662:	e841 2300 	strex	r3, r2, [r1]
 8004666:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004668:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800466a:	2b00      	cmp	r3, #0
 800466c:	d1e1      	bne.n	8004632 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	3314      	adds	r3, #20
 8004674:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004676:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004678:	e853 3f00 	ldrex	r3, [r3]
 800467c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800467e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004680:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	3314      	adds	r3, #20
 800468e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004692:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004694:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004696:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004698:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800469a:	e841 2300 	strex	r3, r2, [r1]
 800469e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80046a0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80046a2:	2b00      	cmp	r3, #0
 80046a4:	d1e3      	bne.n	800466e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	2220      	movs	r2, #32
 80046aa:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	2200      	movs	r2, #0
 80046b2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	330c      	adds	r3, #12
 80046ba:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80046bc:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 80046be:	e853 3f00 	ldrex	r3, [r3]
 80046c2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 80046c4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80046c6:	f023 0310 	bic.w	r3, r3, #16
 80046ca:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	330c      	adds	r3, #12
 80046d4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80046d8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80046da:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80046dc:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80046de:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80046e0:	e841 2300 	strex	r3, r2, [r1]
 80046e4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80046e6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80046e8:	2b00      	cmp	r3, #0
 80046ea:	d1e3      	bne.n	80046b4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80046f0:	4618      	mov	r0, r3
 80046f2:	f7fe f9e3 	bl	8002abc <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	2202      	movs	r2, #2
 80046fa:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004704:	b29b      	uxth	r3, r3
 8004706:	1ad3      	subs	r3, r2, r3
 8004708:	b29b      	uxth	r3, r3
 800470a:	4619      	mov	r1, r3
 800470c:	6878      	ldr	r0, [r7, #4]
 800470e:	f000 f8cf 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004712:	e0b3      	b.n	800487c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004714:	687b      	ldr	r3, [r7, #4]
 8004716:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004718:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800471c:	429a      	cmp	r2, r3
 800471e:	f040 80ad 	bne.w	800487c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004726:	69db      	ldr	r3, [r3, #28]
 8004728:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800472c:	f040 80a6 	bne.w	800487c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	2202      	movs	r2, #2
 8004734:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004736:	687b      	ldr	r3, [r7, #4]
 8004738:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800473a:	4619      	mov	r1, r3
 800473c:	6878      	ldr	r0, [r7, #4]
 800473e:	f000 f8b7 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
      return;
 8004742:	e09b      	b.n	800487c <HAL_UART_IRQHandler+0x548>
 8004744:	08004ab5 	.word	0x08004ab5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004748:	687b      	ldr	r3, [r7, #4]
 800474a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004750:	b29b      	uxth	r3, r3
 8004752:	1ad3      	subs	r3, r2, r3
 8004754:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800475c:	b29b      	uxth	r3, r3
 800475e:	2b00      	cmp	r3, #0
 8004760:	f000 808e 	beq.w	8004880 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004764:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004768:	2b00      	cmp	r3, #0
 800476a:	f000 8089 	beq.w	8004880 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	330c      	adds	r3, #12
 8004774:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004776:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004778:	e853 3f00 	ldrex	r3, [r3]
 800477c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800477e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004780:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004784:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	681b      	ldr	r3, [r3, #0]
 800478c:	330c      	adds	r3, #12
 800478e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004792:	647a      	str	r2, [r7, #68]	@ 0x44
 8004794:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004796:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004798:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800479a:	e841 2300 	strex	r3, r2, [r1]
 800479e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80047a0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80047a2:	2b00      	cmp	r3, #0
 80047a4:	d1e3      	bne.n	800476e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	3314      	adds	r3, #20
 80047ac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80047b0:	e853 3f00 	ldrex	r3, [r3]
 80047b4:	623b      	str	r3, [r7, #32]
   return(result);
 80047b6:	6a3b      	ldr	r3, [r7, #32]
 80047b8:	f023 0301 	bic.w	r3, r3, #1
 80047bc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	3314      	adds	r3, #20
 80047c6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80047ca:	633a      	str	r2, [r7, #48]	@ 0x30
 80047cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80047ce:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80047d0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80047d2:	e841 2300 	strex	r3, r2, [r1]
 80047d6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80047d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d1e3      	bne.n	80047a6 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	2220      	movs	r2, #32
 80047e2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	2200      	movs	r2, #0
 80047ea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80047ec:	687b      	ldr	r3, [r7, #4]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	330c      	adds	r3, #12
 80047f2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80047f4:	693b      	ldr	r3, [r7, #16]
 80047f6:	e853 3f00 	ldrex	r3, [r3]
 80047fa:	60fb      	str	r3, [r7, #12]
   return(result);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f023 0310 	bic.w	r3, r3, #16
 8004802:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	681b      	ldr	r3, [r3, #0]
 800480a:	330c      	adds	r3, #12
 800480c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004810:	61fa      	str	r2, [r7, #28]
 8004812:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004814:	69b9      	ldr	r1, [r7, #24]
 8004816:	69fa      	ldr	r2, [r7, #28]
 8004818:	e841 2300 	strex	r3, r2, [r1]
 800481c:	617b      	str	r3, [r7, #20]
   return(result);
 800481e:	697b      	ldr	r3, [r7, #20]
 8004820:	2b00      	cmp	r3, #0
 8004822:	d1e3      	bne.n	80047ec <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	2202      	movs	r2, #2
 8004828:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800482a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800482e:	4619      	mov	r1, r3
 8004830:	6878      	ldr	r0, [r7, #4]
 8004832:	f000 f83d 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004836:	e023      	b.n	8004880 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004838:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004840:	2b00      	cmp	r3, #0
 8004842:	d009      	beq.n	8004858 <HAL_UART_IRQHandler+0x524>
 8004844:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004848:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800484c:	2b00      	cmp	r3, #0
 800484e:	d003      	beq.n	8004858 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004850:	6878      	ldr	r0, [r7, #4]
 8004852:	f000 f940 	bl	8004ad6 <UART_Transmit_IT>
    return;
 8004856:	e014      	b.n	8004882 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004858:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800485c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004860:	2b00      	cmp	r3, #0
 8004862:	d00e      	beq.n	8004882 <HAL_UART_IRQHandler+0x54e>
 8004864:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004868:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004870:	6878      	ldr	r0, [r7, #4]
 8004872:	f000 f980 	bl	8004b76 <UART_EndTransmit_IT>
    return;
 8004876:	e004      	b.n	8004882 <HAL_UART_IRQHandler+0x54e>
    return;
 8004878:	bf00      	nop
 800487a:	e002      	b.n	8004882 <HAL_UART_IRQHandler+0x54e>
      return;
 800487c:	bf00      	nop
 800487e:	e000      	b.n	8004882 <HAL_UART_IRQHandler+0x54e>
      return;
 8004880:	bf00      	nop
  }
}
 8004882:	37e8      	adds	r7, #232	@ 0xe8
 8004884:	46bd      	mov	sp, r7
 8004886:	bd80      	pop	{r7, pc}

08004888 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004890:	bf00      	nop
 8004892:	370c      	adds	r7, #12
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr

0800489c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800489c:	b480      	push	{r7}
 800489e:	b083      	sub	sp, #12
 80048a0:	af00      	add	r7, sp, #0
 80048a2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80048a4:	bf00      	nop
 80048a6:	370c      	adds	r7, #12
 80048a8:	46bd      	mov	sp, r7
 80048aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ae:	4770      	bx	lr

080048b0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80048b0:	b480      	push	{r7}
 80048b2:	b083      	sub	sp, #12
 80048b4:	af00      	add	r7, sp, #0
 80048b6:	6078      	str	r0, [r7, #4]
 80048b8:	460b      	mov	r3, r1
 80048ba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80048bc:	bf00      	nop
 80048be:	370c      	adds	r7, #12
 80048c0:	46bd      	mov	sp, r7
 80048c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c6:	4770      	bx	lr

080048c8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80048c8:	b580      	push	{r7, lr}
 80048ca:	b086      	sub	sp, #24
 80048cc:	af00      	add	r7, sp, #0
 80048ce:	60f8      	str	r0, [r7, #12]
 80048d0:	60b9      	str	r1, [r7, #8]
 80048d2:	603b      	str	r3, [r7, #0]
 80048d4:	4613      	mov	r3, r2
 80048d6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80048d8:	e03b      	b.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80048da:	6a3b      	ldr	r3, [r7, #32]
 80048dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80048e0:	d037      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e2:	f7fd f9b3 	bl	8001c4c <HAL_GetTick>
 80048e6:	4602      	mov	r2, r0
 80048e8:	683b      	ldr	r3, [r7, #0]
 80048ea:	1ad3      	subs	r3, r2, r3
 80048ec:	6a3a      	ldr	r2, [r7, #32]
 80048ee:	429a      	cmp	r2, r3
 80048f0:	d302      	bcc.n	80048f8 <UART_WaitOnFlagUntilTimeout+0x30>
 80048f2:	6a3b      	ldr	r3, [r7, #32]
 80048f4:	2b00      	cmp	r3, #0
 80048f6:	d101      	bne.n	80048fc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80048f8:	2303      	movs	r3, #3
 80048fa:	e03a      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	68db      	ldr	r3, [r3, #12]
 8004902:	f003 0304 	and.w	r3, r3, #4
 8004906:	2b00      	cmp	r3, #0
 8004908:	d023      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
 800490a:	68bb      	ldr	r3, [r7, #8]
 800490c:	2b80      	cmp	r3, #128	@ 0x80
 800490e:	d020      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004910:	68bb      	ldr	r3, [r7, #8]
 8004912:	2b40      	cmp	r3, #64	@ 0x40
 8004914:	d01d      	beq.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	681b      	ldr	r3, [r3, #0]
 800491c:	f003 0308 	and.w	r3, r3, #8
 8004920:	2b08      	cmp	r3, #8
 8004922:	d116      	bne.n	8004952 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004924:	2300      	movs	r3, #0
 8004926:	617b      	str	r3, [r7, #20]
 8004928:	68fb      	ldr	r3, [r7, #12]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	617b      	str	r3, [r7, #20]
 8004930:	68fb      	ldr	r3, [r7, #12]
 8004932:	681b      	ldr	r3, [r3, #0]
 8004934:	685b      	ldr	r3, [r3, #4]
 8004936:	617b      	str	r3, [r7, #20]
 8004938:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800493a:	68f8      	ldr	r0, [r7, #12]
 800493c:	f000 f857 	bl	80049ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004940:	68fb      	ldr	r3, [r7, #12]
 8004942:	2208      	movs	r2, #8
 8004944:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	2200      	movs	r2, #0
 800494a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e00f      	b.n	8004972 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004952:	68fb      	ldr	r3, [r7, #12]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	681a      	ldr	r2, [r3, #0]
 8004958:	68bb      	ldr	r3, [r7, #8]
 800495a:	4013      	ands	r3, r2
 800495c:	68ba      	ldr	r2, [r7, #8]
 800495e:	429a      	cmp	r2, r3
 8004960:	bf0c      	ite	eq
 8004962:	2301      	moveq	r3, #1
 8004964:	2300      	movne	r3, #0
 8004966:	b2db      	uxtb	r3, r3
 8004968:	461a      	mov	r2, r3
 800496a:	79fb      	ldrb	r3, [r7, #7]
 800496c:	429a      	cmp	r2, r3
 800496e:	d0b4      	beq.n	80048da <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004970:	2300      	movs	r3, #0
}
 8004972:	4618      	mov	r0, r3
 8004974:	3718      	adds	r7, #24
 8004976:	46bd      	mov	sp, r7
 8004978:	bd80      	pop	{r7, pc}

0800497a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800497a:	b480      	push	{r7}
 800497c:	b085      	sub	sp, #20
 800497e:	af00      	add	r7, sp, #0
 8004980:	60f8      	str	r0, [r7, #12]
 8004982:	60b9      	str	r1, [r7, #8]
 8004984:	4613      	mov	r3, r2
 8004986:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	68ba      	ldr	r2, [r7, #8]
 800498c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	88fa      	ldrh	r2, [r7, #6]
 8004992:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8004994:	68fb      	ldr	r3, [r7, #12]
 8004996:	88fa      	ldrh	r2, [r7, #6]
 8004998:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800499a:	68fb      	ldr	r3, [r7, #12]
 800499c:	2200      	movs	r2, #0
 800499e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	2222      	movs	r2, #34	@ 0x22
 80049a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	691b      	ldr	r3, [r3, #16]
 80049ac:	2b00      	cmp	r3, #0
 80049ae:	d007      	beq.n	80049c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80049b0:	68fb      	ldr	r3, [r7, #12]
 80049b2:	681b      	ldr	r3, [r3, #0]
 80049b4:	68da      	ldr	r2, [r3, #12]
 80049b6:	68fb      	ldr	r3, [r7, #12]
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80049be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80049c0:	68fb      	ldr	r3, [r7, #12]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	695a      	ldr	r2, [r3, #20]
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	681b      	ldr	r3, [r3, #0]
 80049ca:	f042 0201 	orr.w	r2, r2, #1
 80049ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68da      	ldr	r2, [r3, #12]
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	f042 0220 	orr.w	r2, r2, #32
 80049de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80049e0:	2300      	movs	r3, #0
}
 80049e2:	4618      	mov	r0, r3
 80049e4:	3714      	adds	r7, #20
 80049e6:	46bd      	mov	sp, r7
 80049e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ec:	4770      	bx	lr

080049ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80049ee:	b480      	push	{r7}
 80049f0:	b095      	sub	sp, #84	@ 0x54
 80049f2:	af00      	add	r7, sp, #0
 80049f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	330c      	adds	r3, #12
 80049fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80049fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004a00:	e853 3f00 	ldrex	r3, [r3]
 8004a04:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004a06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004a08:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004a0c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	330c      	adds	r3, #12
 8004a14:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004a16:	643a      	str	r2, [r7, #64]	@ 0x40
 8004a18:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a1a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004a1c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004a1e:	e841 2300 	strex	r3, r2, [r1]
 8004a22:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004a24:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004a26:	2b00      	cmp	r3, #0
 8004a28:	d1e5      	bne.n	80049f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	3314      	adds	r3, #20
 8004a30:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a32:	6a3b      	ldr	r3, [r7, #32]
 8004a34:	e853 3f00 	ldrex	r3, [r3]
 8004a38:	61fb      	str	r3, [r7, #28]
   return(result);
 8004a3a:	69fb      	ldr	r3, [r7, #28]
 8004a3c:	f023 0301 	bic.w	r3, r3, #1
 8004a40:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	3314      	adds	r3, #20
 8004a48:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004a4a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004a4c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a4e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004a50:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004a52:	e841 2300 	strex	r3, r2, [r1]
 8004a56:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004a58:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d1e5      	bne.n	8004a2a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a62:	2b01      	cmp	r3, #1
 8004a64:	d119      	bne.n	8004a9a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	330c      	adds	r3, #12
 8004a6c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004a6e:	68fb      	ldr	r3, [r7, #12]
 8004a70:	e853 3f00 	ldrex	r3, [r3]
 8004a74:	60bb      	str	r3, [r7, #8]
   return(result);
 8004a76:	68bb      	ldr	r3, [r7, #8]
 8004a78:	f023 0310 	bic.w	r3, r3, #16
 8004a7c:	647b      	str	r3, [r7, #68]	@ 0x44
 8004a7e:	687b      	ldr	r3, [r7, #4]
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	330c      	adds	r3, #12
 8004a84:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004a86:	61ba      	str	r2, [r7, #24]
 8004a88:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004a8a:	6979      	ldr	r1, [r7, #20]
 8004a8c:	69ba      	ldr	r2, [r7, #24]
 8004a8e:	e841 2300 	strex	r3, r2, [r1]
 8004a92:	613b      	str	r3, [r7, #16]
   return(result);
 8004a94:	693b      	ldr	r3, [r7, #16]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	d1e5      	bne.n	8004a66 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004a9a:	687b      	ldr	r3, [r7, #4]
 8004a9c:	2220      	movs	r2, #32
 8004a9e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004aa8:	bf00      	nop
 8004aaa:	3754      	adds	r7, #84	@ 0x54
 8004aac:	46bd      	mov	sp, r7
 8004aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ab2:	4770      	bx	lr

08004ab4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004ab4:	b580      	push	{r7, lr}
 8004ab6:	b084      	sub	sp, #16
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004abc:	687b      	ldr	r3, [r7, #4]
 8004abe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004ac0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004ac2:	68fb      	ldr	r3, [r7, #12]
 8004ac4:	2200      	movs	r2, #0
 8004ac6:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004ac8:	68f8      	ldr	r0, [r7, #12]
 8004aca:	f7ff fee7 	bl	800489c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004ace:	bf00      	nop
 8004ad0:	3710      	adds	r7, #16
 8004ad2:	46bd      	mov	sp, r7
 8004ad4:	bd80      	pop	{r7, pc}

08004ad6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004ad6:	b480      	push	{r7}
 8004ad8:	b085      	sub	sp, #20
 8004ada:	af00      	add	r7, sp, #0
 8004adc:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b21      	cmp	r3, #33	@ 0x21
 8004ae8:	d13e      	bne.n	8004b68 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	689b      	ldr	r3, [r3, #8]
 8004aee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004af2:	d114      	bne.n	8004b1e <UART_Transmit_IT+0x48>
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	691b      	ldr	r3, [r3, #16]
 8004af8:	2b00      	cmp	r3, #0
 8004afa:	d110      	bne.n	8004b1e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a1b      	ldr	r3, [r3, #32]
 8004b00:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	881b      	ldrh	r3, [r3, #0]
 8004b06:	461a      	mov	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	681b      	ldr	r3, [r3, #0]
 8004b0c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004b10:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6a1b      	ldr	r3, [r3, #32]
 8004b16:	1c9a      	adds	r2, r3, #2
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	621a      	str	r2, [r3, #32]
 8004b1c:	e008      	b.n	8004b30 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	6a1b      	ldr	r3, [r3, #32]
 8004b22:	1c59      	adds	r1, r3, #1
 8004b24:	687a      	ldr	r2, [r7, #4]
 8004b26:	6211      	str	r1, [r2, #32]
 8004b28:	781a      	ldrb	r2, [r3, #0]
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	681b      	ldr	r3, [r3, #0]
 8004b2e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004b34:	b29b      	uxth	r3, r3
 8004b36:	3b01      	subs	r3, #1
 8004b38:	b29b      	uxth	r3, r3
 8004b3a:	687a      	ldr	r2, [r7, #4]
 8004b3c:	4619      	mov	r1, r3
 8004b3e:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004b40:	2b00      	cmp	r3, #0
 8004b42:	d10f      	bne.n	8004b64 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	681b      	ldr	r3, [r3, #0]
 8004b48:	68da      	ldr	r2, [r3, #12]
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004b52:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	68da      	ldr	r2, [r3, #12]
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004b62:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004b64:	2300      	movs	r3, #0
 8004b66:	e000      	b.n	8004b6a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004b68:	2302      	movs	r3, #2
  }
}
 8004b6a:	4618      	mov	r0, r3
 8004b6c:	3714      	adds	r7, #20
 8004b6e:	46bd      	mov	sp, r7
 8004b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b74:	4770      	bx	lr

08004b76 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004b76:	b580      	push	{r7, lr}
 8004b78:	b082      	sub	sp, #8
 8004b7a:	af00      	add	r7, sp, #0
 8004b7c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	68da      	ldr	r2, [r3, #12]
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004b8c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004b8e:	687b      	ldr	r3, [r7, #4]
 8004b90:	2220      	movs	r2, #32
 8004b92:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8004b96:	6878      	ldr	r0, [r7, #4]
 8004b98:	f7ff fe76 	bl	8004888 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3708      	adds	r7, #8
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	bd80      	pop	{r7, pc}

08004ba6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8004ba6:	b580      	push	{r7, lr}
 8004ba8:	b08c      	sub	sp, #48	@ 0x30
 8004baa:	af00      	add	r7, sp, #0
 8004bac:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8004bae:	2300      	movs	r3, #0
 8004bb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8004bb2:	2300      	movs	r3, #0
 8004bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004bbc:	b2db      	uxtb	r3, r3
 8004bbe:	2b22      	cmp	r3, #34	@ 0x22
 8004bc0:	f040 80aa 	bne.w	8004d18 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	689b      	ldr	r3, [r3, #8]
 8004bc8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004bcc:	d115      	bne.n	8004bfa <UART_Receive_IT+0x54>
 8004bce:	687b      	ldr	r3, [r7, #4]
 8004bd0:	691b      	ldr	r3, [r3, #16]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d111      	bne.n	8004bfa <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8004bd6:	687b      	ldr	r3, [r7, #4]
 8004bd8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bda:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8004bdc:	687b      	ldr	r3, [r7, #4]
 8004bde:	681b      	ldr	r3, [r3, #0]
 8004be0:	685b      	ldr	r3, [r3, #4]
 8004be2:	b29b      	uxth	r3, r3
 8004be4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004be8:	b29a      	uxth	r2, r3
 8004bea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004bec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bf2:	1c9a      	adds	r2, r3, #2
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	629a      	str	r2, [r3, #40]	@ 0x28
 8004bf8:	e024      	b.n	8004c44 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004bfe:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	689b      	ldr	r3, [r3, #8]
 8004c04:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004c08:	d007      	beq.n	8004c1a <UART_Receive_IT+0x74>
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	689b      	ldr	r3, [r3, #8]
 8004c0e:	2b00      	cmp	r3, #0
 8004c10:	d10a      	bne.n	8004c28 <UART_Receive_IT+0x82>
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	691b      	ldr	r3, [r3, #16]
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d106      	bne.n	8004c28 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004c1a:	687b      	ldr	r3, [r7, #4]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	685b      	ldr	r3, [r3, #4]
 8004c20:	b2da      	uxtb	r2, r3
 8004c22:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c24:	701a      	strb	r2, [r3, #0]
 8004c26:	e008      	b.n	8004c3a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	681b      	ldr	r3, [r3, #0]
 8004c2c:	685b      	ldr	r3, [r3, #4]
 8004c2e:	b2db      	uxtb	r3, r3
 8004c30:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8004c34:	b2da      	uxtb	r2, r3
 8004c36:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004c38:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004c3e:	1c5a      	adds	r2, r3, #1
 8004c40:	687b      	ldr	r3, [r7, #4]
 8004c42:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c48:	b29b      	uxth	r3, r3
 8004c4a:	3b01      	subs	r3, #1
 8004c4c:	b29b      	uxth	r3, r3
 8004c4e:	687a      	ldr	r2, [r7, #4]
 8004c50:	4619      	mov	r1, r3
 8004c52:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8004c54:	2b00      	cmp	r3, #0
 8004c56:	d15d      	bne.n	8004d14 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	68da      	ldr	r2, [r3, #12]
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	681b      	ldr	r3, [r3, #0]
 8004c62:	f022 0220 	bic.w	r2, r2, #32
 8004c66:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8004c68:	687b      	ldr	r3, [r7, #4]
 8004c6a:	681b      	ldr	r3, [r3, #0]
 8004c6c:	68da      	ldr	r2, [r3, #12]
 8004c6e:	687b      	ldr	r3, [r7, #4]
 8004c70:	681b      	ldr	r3, [r3, #0]
 8004c72:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8004c76:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	695a      	ldr	r2, [r3, #20]
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	f022 0201 	bic.w	r2, r2, #1
 8004c86:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2220      	movs	r2, #32
 8004c8c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	2200      	movs	r2, #0
 8004c94:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c9a:	2b01      	cmp	r3, #1
 8004c9c:	d135      	bne.n	8004d0a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	2200      	movs	r2, #0
 8004ca2:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	330c      	adds	r3, #12
 8004caa:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	e853 3f00 	ldrex	r3, [r3]
 8004cb2:	613b      	str	r3, [r7, #16]
   return(result);
 8004cb4:	693b      	ldr	r3, [r7, #16]
 8004cb6:	f023 0310 	bic.w	r3, r3, #16
 8004cba:	627b      	str	r3, [r7, #36]	@ 0x24
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004cc4:	623a      	str	r2, [r7, #32]
 8004cc6:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004cc8:	69f9      	ldr	r1, [r7, #28]
 8004cca:	6a3a      	ldr	r2, [r7, #32]
 8004ccc:	e841 2300 	strex	r3, r2, [r1]
 8004cd0:	61bb      	str	r3, [r7, #24]
   return(result);
 8004cd2:	69bb      	ldr	r3, [r7, #24]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d1e5      	bne.n	8004ca4 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	681b      	ldr	r3, [r3, #0]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f003 0310 	and.w	r3, r3, #16
 8004ce2:	2b10      	cmp	r3, #16
 8004ce4:	d10a      	bne.n	8004cfc <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004ce6:	2300      	movs	r3, #0
 8004ce8:	60fb      	str	r3, [r7, #12]
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	60fb      	str	r3, [r7, #12]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	681b      	ldr	r3, [r3, #0]
 8004cf6:	685b      	ldr	r3, [r3, #4]
 8004cf8:	60fb      	str	r3, [r7, #12]
 8004cfa:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004d00:	4619      	mov	r1, r3
 8004d02:	6878      	ldr	r0, [r7, #4]
 8004d04:	f7ff fdd4 	bl	80048b0 <HAL_UARTEx_RxEventCallback>
 8004d08:	e002      	b.n	8004d10 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8004d0a:	6878      	ldr	r0, [r7, #4]
 8004d0c:	f7fc fa0e 	bl	800112c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8004d10:	2300      	movs	r3, #0
 8004d12:	e002      	b.n	8004d1a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8004d14:	2300      	movs	r3, #0
 8004d16:	e000      	b.n	8004d1a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8004d18:	2302      	movs	r3, #2
  }
}
 8004d1a:	4618      	mov	r0, r3
 8004d1c:	3730      	adds	r7, #48	@ 0x30
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
	...

08004d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004d24:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004d28:	b0c0      	sub	sp, #256	@ 0x100
 8004d2a:	af00      	add	r7, sp, #0
 8004d2c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d34:	681b      	ldr	r3, [r3, #0]
 8004d36:	691b      	ldr	r3, [r3, #16]
 8004d38:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004d3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d40:	68d9      	ldr	r1, [r3, #12]
 8004d42:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d46:	681a      	ldr	r2, [r3, #0]
 8004d48:	ea40 0301 	orr.w	r3, r0, r1
 8004d4c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004d4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d52:	689a      	ldr	r2, [r3, #8]
 8004d54:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d58:	691b      	ldr	r3, [r3, #16]
 8004d5a:	431a      	orrs	r2, r3
 8004d5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d60:	695b      	ldr	r3, [r3, #20]
 8004d62:	431a      	orrs	r2, r3
 8004d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d68:	69db      	ldr	r3, [r3, #28]
 8004d6a:	4313      	orrs	r3, r2
 8004d6c:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004d70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d74:	681b      	ldr	r3, [r3, #0]
 8004d76:	68db      	ldr	r3, [r3, #12]
 8004d78:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004d7c:	f021 010c 	bic.w	r1, r1, #12
 8004d80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004d8a:	430b      	orrs	r3, r1
 8004d8c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004d8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004d9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d9e:	6999      	ldr	r1, [r3, #24]
 8004da0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004da4:	681a      	ldr	r2, [r3, #0]
 8004da6:	ea40 0301 	orr.w	r3, r0, r1
 8004daa:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004dac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004db0:	681a      	ldr	r2, [r3, #0]
 8004db2:	4b8f      	ldr	r3, [pc, #572]	@ (8004ff0 <UART_SetConfig+0x2cc>)
 8004db4:	429a      	cmp	r2, r3
 8004db6:	d005      	beq.n	8004dc4 <UART_SetConfig+0xa0>
 8004db8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dbc:	681a      	ldr	r2, [r3, #0]
 8004dbe:	4b8d      	ldr	r3, [pc, #564]	@ (8004ff4 <UART_SetConfig+0x2d0>)
 8004dc0:	429a      	cmp	r2, r3
 8004dc2:	d104      	bne.n	8004dce <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004dc4:	f7fe fd2c 	bl	8003820 <HAL_RCC_GetPCLK2Freq>
 8004dc8:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004dcc:	e003      	b.n	8004dd6 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004dce:	f7fe fd13 	bl	80037f8 <HAL_RCC_GetPCLK1Freq>
 8004dd2:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004dd6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dda:	69db      	ldr	r3, [r3, #28]
 8004ddc:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004de0:	f040 810c 	bne.w	8004ffc <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004de4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004de8:	2200      	movs	r2, #0
 8004dea:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004dee:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004df2:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004df6:	4622      	mov	r2, r4
 8004df8:	462b      	mov	r3, r5
 8004dfa:	1891      	adds	r1, r2, r2
 8004dfc:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004dfe:	415b      	adcs	r3, r3
 8004e00:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004e02:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004e06:	4621      	mov	r1, r4
 8004e08:	eb12 0801 	adds.w	r8, r2, r1
 8004e0c:	4629      	mov	r1, r5
 8004e0e:	eb43 0901 	adc.w	r9, r3, r1
 8004e12:	f04f 0200 	mov.w	r2, #0
 8004e16:	f04f 0300 	mov.w	r3, #0
 8004e1a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004e1e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004e22:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004e26:	4690      	mov	r8, r2
 8004e28:	4699      	mov	r9, r3
 8004e2a:	4623      	mov	r3, r4
 8004e2c:	eb18 0303 	adds.w	r3, r8, r3
 8004e30:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004e34:	462b      	mov	r3, r5
 8004e36:	eb49 0303 	adc.w	r3, r9, r3
 8004e3a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004e3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e42:	685b      	ldr	r3, [r3, #4]
 8004e44:	2200      	movs	r2, #0
 8004e46:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004e4a:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004e4e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004e52:	460b      	mov	r3, r1
 8004e54:	18db      	adds	r3, r3, r3
 8004e56:	653b      	str	r3, [r7, #80]	@ 0x50
 8004e58:	4613      	mov	r3, r2
 8004e5a:	eb42 0303 	adc.w	r3, r2, r3
 8004e5e:	657b      	str	r3, [r7, #84]	@ 0x54
 8004e60:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004e64:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004e68:	f7fb fa02 	bl	8000270 <__aeabi_uldivmod>
 8004e6c:	4602      	mov	r2, r0
 8004e6e:	460b      	mov	r3, r1
 8004e70:	4b61      	ldr	r3, [pc, #388]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004e72:	fba3 2302 	umull	r2, r3, r3, r2
 8004e76:	095b      	lsrs	r3, r3, #5
 8004e78:	011c      	lsls	r4, r3, #4
 8004e7a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e7e:	2200      	movs	r2, #0
 8004e80:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004e84:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004e88:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004e8c:	4642      	mov	r2, r8
 8004e8e:	464b      	mov	r3, r9
 8004e90:	1891      	adds	r1, r2, r2
 8004e92:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004e94:	415b      	adcs	r3, r3
 8004e96:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e98:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004e9c:	4641      	mov	r1, r8
 8004e9e:	eb12 0a01 	adds.w	sl, r2, r1
 8004ea2:	4649      	mov	r1, r9
 8004ea4:	eb43 0b01 	adc.w	fp, r3, r1
 8004ea8:	f04f 0200 	mov.w	r2, #0
 8004eac:	f04f 0300 	mov.w	r3, #0
 8004eb0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004eb4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004eb8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004ebc:	4692      	mov	sl, r2
 8004ebe:	469b      	mov	fp, r3
 8004ec0:	4643      	mov	r3, r8
 8004ec2:	eb1a 0303 	adds.w	r3, sl, r3
 8004ec6:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004eca:	464b      	mov	r3, r9
 8004ecc:	eb4b 0303 	adc.w	r3, fp, r3
 8004ed0:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ed8:	685b      	ldr	r3, [r3, #4]
 8004eda:	2200      	movs	r2, #0
 8004edc:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004ee0:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004ee4:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	18db      	adds	r3, r3, r3
 8004eec:	643b      	str	r3, [r7, #64]	@ 0x40
 8004eee:	4613      	mov	r3, r2
 8004ef0:	eb42 0303 	adc.w	r3, r2, r3
 8004ef4:	647b      	str	r3, [r7, #68]	@ 0x44
 8004ef6:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004efa:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004efe:	f7fb f9b7 	bl	8000270 <__aeabi_uldivmod>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	4611      	mov	r1, r2
 8004f08:	4b3b      	ldr	r3, [pc, #236]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004f0a:	fba3 2301 	umull	r2, r3, r3, r1
 8004f0e:	095b      	lsrs	r3, r3, #5
 8004f10:	2264      	movs	r2, #100	@ 0x64
 8004f12:	fb02 f303 	mul.w	r3, r2, r3
 8004f16:	1acb      	subs	r3, r1, r3
 8004f18:	00db      	lsls	r3, r3, #3
 8004f1a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004f1e:	4b36      	ldr	r3, [pc, #216]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	005b      	lsls	r3, r3, #1
 8004f28:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004f2c:	441c      	add	r4, r3
 8004f2e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f32:	2200      	movs	r2, #0
 8004f34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004f38:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004f3c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004f40:	4642      	mov	r2, r8
 8004f42:	464b      	mov	r3, r9
 8004f44:	1891      	adds	r1, r2, r2
 8004f46:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004f48:	415b      	adcs	r3, r3
 8004f4a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004f4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004f50:	4641      	mov	r1, r8
 8004f52:	1851      	adds	r1, r2, r1
 8004f54:	6339      	str	r1, [r7, #48]	@ 0x30
 8004f56:	4649      	mov	r1, r9
 8004f58:	414b      	adcs	r3, r1
 8004f5a:	637b      	str	r3, [r7, #52]	@ 0x34
 8004f5c:	f04f 0200 	mov.w	r2, #0
 8004f60:	f04f 0300 	mov.w	r3, #0
 8004f64:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004f68:	4659      	mov	r1, fp
 8004f6a:	00cb      	lsls	r3, r1, #3
 8004f6c:	4651      	mov	r1, sl
 8004f6e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004f72:	4651      	mov	r1, sl
 8004f74:	00ca      	lsls	r2, r1, #3
 8004f76:	4610      	mov	r0, r2
 8004f78:	4619      	mov	r1, r3
 8004f7a:	4603      	mov	r3, r0
 8004f7c:	4642      	mov	r2, r8
 8004f7e:	189b      	adds	r3, r3, r2
 8004f80:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004f84:	464b      	mov	r3, r9
 8004f86:	460a      	mov	r2, r1
 8004f88:	eb42 0303 	adc.w	r3, r2, r3
 8004f8c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004f90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f94:	685b      	ldr	r3, [r3, #4]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004f9c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004fa0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004fa4:	460b      	mov	r3, r1
 8004fa6:	18db      	adds	r3, r3, r3
 8004fa8:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004faa:	4613      	mov	r3, r2
 8004fac:	eb42 0303 	adc.w	r3, r2, r3
 8004fb0:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004fb2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004fb6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004fba:	f7fb f959 	bl	8000270 <__aeabi_uldivmod>
 8004fbe:	4602      	mov	r2, r0
 8004fc0:	460b      	mov	r3, r1
 8004fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004fc4:	fba3 1302 	umull	r1, r3, r3, r2
 8004fc8:	095b      	lsrs	r3, r3, #5
 8004fca:	2164      	movs	r1, #100	@ 0x64
 8004fcc:	fb01 f303 	mul.w	r3, r1, r3
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	00db      	lsls	r3, r3, #3
 8004fd4:	3332      	adds	r3, #50	@ 0x32
 8004fd6:	4a08      	ldr	r2, [pc, #32]	@ (8004ff8 <UART_SetConfig+0x2d4>)
 8004fd8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fdc:	095b      	lsrs	r3, r3, #5
 8004fde:	f003 0207 	and.w	r2, r3, #7
 8004fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	4422      	add	r2, r4
 8004fea:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004fec:	e106      	b.n	80051fc <UART_SetConfig+0x4d8>
 8004fee:	bf00      	nop
 8004ff0:	40011000 	.word	0x40011000
 8004ff4:	40011400 	.word	0x40011400
 8004ff8:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004ffc:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005000:	2200      	movs	r2, #0
 8005002:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005006:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800500a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800500e:	4642      	mov	r2, r8
 8005010:	464b      	mov	r3, r9
 8005012:	1891      	adds	r1, r2, r2
 8005014:	6239      	str	r1, [r7, #32]
 8005016:	415b      	adcs	r3, r3
 8005018:	627b      	str	r3, [r7, #36]	@ 0x24
 800501a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800501e:	4641      	mov	r1, r8
 8005020:	1854      	adds	r4, r2, r1
 8005022:	4649      	mov	r1, r9
 8005024:	eb43 0501 	adc.w	r5, r3, r1
 8005028:	f04f 0200 	mov.w	r2, #0
 800502c:	f04f 0300 	mov.w	r3, #0
 8005030:	00eb      	lsls	r3, r5, #3
 8005032:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005036:	00e2      	lsls	r2, r4, #3
 8005038:	4614      	mov	r4, r2
 800503a:	461d      	mov	r5, r3
 800503c:	4643      	mov	r3, r8
 800503e:	18e3      	adds	r3, r4, r3
 8005040:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005044:	464b      	mov	r3, r9
 8005046:	eb45 0303 	adc.w	r3, r5, r3
 800504a:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800504e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005052:	685b      	ldr	r3, [r3, #4]
 8005054:	2200      	movs	r2, #0
 8005056:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800505a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800505e:	f04f 0200 	mov.w	r2, #0
 8005062:	f04f 0300 	mov.w	r3, #0
 8005066:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800506a:	4629      	mov	r1, r5
 800506c:	008b      	lsls	r3, r1, #2
 800506e:	4621      	mov	r1, r4
 8005070:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005074:	4621      	mov	r1, r4
 8005076:	008a      	lsls	r2, r1, #2
 8005078:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 800507c:	f7fb f8f8 	bl	8000270 <__aeabi_uldivmod>
 8005080:	4602      	mov	r2, r0
 8005082:	460b      	mov	r3, r1
 8005084:	4b60      	ldr	r3, [pc, #384]	@ (8005208 <UART_SetConfig+0x4e4>)
 8005086:	fba3 2302 	umull	r2, r3, r3, r2
 800508a:	095b      	lsrs	r3, r3, #5
 800508c:	011c      	lsls	r4, r3, #4
 800508e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005092:	2200      	movs	r2, #0
 8005094:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005098:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800509c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80050a0:	4642      	mov	r2, r8
 80050a2:	464b      	mov	r3, r9
 80050a4:	1891      	adds	r1, r2, r2
 80050a6:	61b9      	str	r1, [r7, #24]
 80050a8:	415b      	adcs	r3, r3
 80050aa:	61fb      	str	r3, [r7, #28]
 80050ac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80050b0:	4641      	mov	r1, r8
 80050b2:	1851      	adds	r1, r2, r1
 80050b4:	6139      	str	r1, [r7, #16]
 80050b6:	4649      	mov	r1, r9
 80050b8:	414b      	adcs	r3, r1
 80050ba:	617b      	str	r3, [r7, #20]
 80050bc:	f04f 0200 	mov.w	r2, #0
 80050c0:	f04f 0300 	mov.w	r3, #0
 80050c4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80050c8:	4659      	mov	r1, fp
 80050ca:	00cb      	lsls	r3, r1, #3
 80050cc:	4651      	mov	r1, sl
 80050ce:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80050d2:	4651      	mov	r1, sl
 80050d4:	00ca      	lsls	r2, r1, #3
 80050d6:	4610      	mov	r0, r2
 80050d8:	4619      	mov	r1, r3
 80050da:	4603      	mov	r3, r0
 80050dc:	4642      	mov	r2, r8
 80050de:	189b      	adds	r3, r3, r2
 80050e0:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80050e4:	464b      	mov	r3, r9
 80050e6:	460a      	mov	r2, r1
 80050e8:	eb42 0303 	adc.w	r3, r2, r3
 80050ec:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80050f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050f4:	685b      	ldr	r3, [r3, #4]
 80050f6:	2200      	movs	r2, #0
 80050f8:	67bb      	str	r3, [r7, #120]	@ 0x78
 80050fa:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80050fc:	f04f 0200 	mov.w	r2, #0
 8005100:	f04f 0300 	mov.w	r3, #0
 8005104:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005108:	4649      	mov	r1, r9
 800510a:	008b      	lsls	r3, r1, #2
 800510c:	4641      	mov	r1, r8
 800510e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005112:	4641      	mov	r1, r8
 8005114:	008a      	lsls	r2, r1, #2
 8005116:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800511a:	f7fb f8a9 	bl	8000270 <__aeabi_uldivmod>
 800511e:	4602      	mov	r2, r0
 8005120:	460b      	mov	r3, r1
 8005122:	4611      	mov	r1, r2
 8005124:	4b38      	ldr	r3, [pc, #224]	@ (8005208 <UART_SetConfig+0x4e4>)
 8005126:	fba3 2301 	umull	r2, r3, r3, r1
 800512a:	095b      	lsrs	r3, r3, #5
 800512c:	2264      	movs	r2, #100	@ 0x64
 800512e:	fb02 f303 	mul.w	r3, r2, r3
 8005132:	1acb      	subs	r3, r1, r3
 8005134:	011b      	lsls	r3, r3, #4
 8005136:	3332      	adds	r3, #50	@ 0x32
 8005138:	4a33      	ldr	r2, [pc, #204]	@ (8005208 <UART_SetConfig+0x4e4>)
 800513a:	fba2 2303 	umull	r2, r3, r2, r3
 800513e:	095b      	lsrs	r3, r3, #5
 8005140:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005144:	441c      	add	r4, r3
 8005146:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800514a:	2200      	movs	r2, #0
 800514c:	673b      	str	r3, [r7, #112]	@ 0x70
 800514e:	677a      	str	r2, [r7, #116]	@ 0x74
 8005150:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005154:	4642      	mov	r2, r8
 8005156:	464b      	mov	r3, r9
 8005158:	1891      	adds	r1, r2, r2
 800515a:	60b9      	str	r1, [r7, #8]
 800515c:	415b      	adcs	r3, r3
 800515e:	60fb      	str	r3, [r7, #12]
 8005160:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005164:	4641      	mov	r1, r8
 8005166:	1851      	adds	r1, r2, r1
 8005168:	6039      	str	r1, [r7, #0]
 800516a:	4649      	mov	r1, r9
 800516c:	414b      	adcs	r3, r1
 800516e:	607b      	str	r3, [r7, #4]
 8005170:	f04f 0200 	mov.w	r2, #0
 8005174:	f04f 0300 	mov.w	r3, #0
 8005178:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800517c:	4659      	mov	r1, fp
 800517e:	00cb      	lsls	r3, r1, #3
 8005180:	4651      	mov	r1, sl
 8005182:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005186:	4651      	mov	r1, sl
 8005188:	00ca      	lsls	r2, r1, #3
 800518a:	4610      	mov	r0, r2
 800518c:	4619      	mov	r1, r3
 800518e:	4603      	mov	r3, r0
 8005190:	4642      	mov	r2, r8
 8005192:	189b      	adds	r3, r3, r2
 8005194:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005196:	464b      	mov	r3, r9
 8005198:	460a      	mov	r2, r1
 800519a:	eb42 0303 	adc.w	r3, r2, r3
 800519e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	685b      	ldr	r3, [r3, #4]
 80051a6:	2200      	movs	r2, #0
 80051a8:	663b      	str	r3, [r7, #96]	@ 0x60
 80051aa:	667a      	str	r2, [r7, #100]	@ 0x64
 80051ac:	f04f 0200 	mov.w	r2, #0
 80051b0:	f04f 0300 	mov.w	r3, #0
 80051b4:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80051b8:	4649      	mov	r1, r9
 80051ba:	008b      	lsls	r3, r1, #2
 80051bc:	4641      	mov	r1, r8
 80051be:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051c2:	4641      	mov	r1, r8
 80051c4:	008a      	lsls	r2, r1, #2
 80051c6:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80051ca:	f7fb f851 	bl	8000270 <__aeabi_uldivmod>
 80051ce:	4602      	mov	r2, r0
 80051d0:	460b      	mov	r3, r1
 80051d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005208 <UART_SetConfig+0x4e4>)
 80051d4:	fba3 1302 	umull	r1, r3, r3, r2
 80051d8:	095b      	lsrs	r3, r3, #5
 80051da:	2164      	movs	r1, #100	@ 0x64
 80051dc:	fb01 f303 	mul.w	r3, r1, r3
 80051e0:	1ad3      	subs	r3, r2, r3
 80051e2:	011b      	lsls	r3, r3, #4
 80051e4:	3332      	adds	r3, #50	@ 0x32
 80051e6:	4a08      	ldr	r2, [pc, #32]	@ (8005208 <UART_SetConfig+0x4e4>)
 80051e8:	fba2 2303 	umull	r2, r3, r2, r3
 80051ec:	095b      	lsrs	r3, r3, #5
 80051ee:	f003 020f 	and.w	r2, r3, #15
 80051f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	4422      	add	r2, r4
 80051fa:	609a      	str	r2, [r3, #8]
}
 80051fc:	bf00      	nop
 80051fe:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005202:	46bd      	mov	sp, r7
 8005204:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005208:	51eb851f 	.word	0x51eb851f

0800520c <__NVIC_SetPriority>:
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	4603      	mov	r3, r0
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005218:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800521c:	2b00      	cmp	r3, #0
 800521e:	db0a      	blt.n	8005236 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	b2da      	uxtb	r2, r3
 8005224:	490c      	ldr	r1, [pc, #48]	@ (8005258 <__NVIC_SetPriority+0x4c>)
 8005226:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800522a:	0112      	lsls	r2, r2, #4
 800522c:	b2d2      	uxtb	r2, r2
 800522e:	440b      	add	r3, r1
 8005230:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005234:	e00a      	b.n	800524c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	b2da      	uxtb	r2, r3
 800523a:	4908      	ldr	r1, [pc, #32]	@ (800525c <__NVIC_SetPriority+0x50>)
 800523c:	79fb      	ldrb	r3, [r7, #7]
 800523e:	f003 030f 	and.w	r3, r3, #15
 8005242:	3b04      	subs	r3, #4
 8005244:	0112      	lsls	r2, r2, #4
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	440b      	add	r3, r1
 800524a:	761a      	strb	r2, [r3, #24]
}
 800524c:	bf00      	nop
 800524e:	370c      	adds	r7, #12
 8005250:	46bd      	mov	sp, r7
 8005252:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005256:	4770      	bx	lr
 8005258:	e000e100 	.word	0xe000e100
 800525c:	e000ed00 	.word	0xe000ed00

08005260 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8005260:	b580      	push	{r7, lr}
 8005262:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005264:	4b05      	ldr	r3, [pc, #20]	@ (800527c <SysTick_Handler+0x1c>)
 8005266:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005268:	f001 fdf4 	bl	8006e54 <xTaskGetSchedulerState>
 800526c:	4603      	mov	r3, r0
 800526e:	2b01      	cmp	r3, #1
 8005270:	d001      	beq.n	8005276 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8005272:	f002 fbe9 	bl	8007a48 <xPortSysTickHandler>
  }
}
 8005276:	bf00      	nop
 8005278:	bd80      	pop	{r7, pc}
 800527a:	bf00      	nop
 800527c:	e000e010 	.word	0xe000e010

08005280 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8005280:	b580      	push	{r7, lr}
 8005282:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005284:	2100      	movs	r1, #0
 8005286:	f06f 0004 	mvn.w	r0, #4
 800528a:	f7ff ffbf 	bl	800520c <__NVIC_SetPriority>
#endif
}
 800528e:	bf00      	nop
 8005290:	bd80      	pop	{r7, pc}
	...

08005294 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005294:	b480      	push	{r7}
 8005296:	b083      	sub	sp, #12
 8005298:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800529a:	f3ef 8305 	mrs	r3, IPSR
 800529e:	603b      	str	r3, [r7, #0]
  return(result);
 80052a0:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052a2:	2b00      	cmp	r3, #0
 80052a4:	d003      	beq.n	80052ae <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80052a6:	f06f 0305 	mvn.w	r3, #5
 80052aa:	607b      	str	r3, [r7, #4]
 80052ac:	e00c      	b.n	80052c8 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80052ae:	4b0a      	ldr	r3, [pc, #40]	@ (80052d8 <osKernelInitialize+0x44>)
 80052b0:	681b      	ldr	r3, [r3, #0]
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d105      	bne.n	80052c2 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80052b6:	4b08      	ldr	r3, [pc, #32]	@ (80052d8 <osKernelInitialize+0x44>)
 80052b8:	2201      	movs	r2, #1
 80052ba:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80052bc:	2300      	movs	r3, #0
 80052be:	607b      	str	r3, [r7, #4]
 80052c0:	e002      	b.n	80052c8 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80052c2:	f04f 33ff 	mov.w	r3, #4294967295
 80052c6:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80052c8:	687b      	ldr	r3, [r7, #4]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	370c      	adds	r7, #12
 80052ce:	46bd      	mov	sp, r7
 80052d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052d4:	4770      	bx	lr
 80052d6:	bf00      	nop
 80052d8:	20000270 	.word	0x20000270

080052dc <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80052e2:	f3ef 8305 	mrs	r3, IPSR
 80052e6:	603b      	str	r3, [r7, #0]
  return(result);
 80052e8:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d003      	beq.n	80052f6 <osKernelStart+0x1a>
    stat = osErrorISR;
 80052ee:	f06f 0305 	mvn.w	r3, #5
 80052f2:	607b      	str	r3, [r7, #4]
 80052f4:	e010      	b.n	8005318 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80052f6:	4b0b      	ldr	r3, [pc, #44]	@ (8005324 <osKernelStart+0x48>)
 80052f8:	681b      	ldr	r3, [r3, #0]
 80052fa:	2b01      	cmp	r3, #1
 80052fc:	d109      	bne.n	8005312 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80052fe:	f7ff ffbf 	bl	8005280 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005302:	4b08      	ldr	r3, [pc, #32]	@ (8005324 <osKernelStart+0x48>)
 8005304:	2202      	movs	r2, #2
 8005306:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005308:	f001 f940 	bl	800658c <vTaskStartScheduler>
      stat = osOK;
 800530c:	2300      	movs	r3, #0
 800530e:	607b      	str	r3, [r7, #4]
 8005310:	e002      	b.n	8005318 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005312:	f04f 33ff 	mov.w	r3, #4294967295
 8005316:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005318:	687b      	ldr	r3, [r7, #4]
}
 800531a:	4618      	mov	r0, r3
 800531c:	3708      	adds	r7, #8
 800531e:	46bd      	mov	sp, r7
 8005320:	bd80      	pop	{r7, pc}
 8005322:	bf00      	nop
 8005324:	20000270 	.word	0x20000270

08005328 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005328:	b580      	push	{r7, lr}
 800532a:	b08e      	sub	sp, #56	@ 0x38
 800532c:	af04      	add	r7, sp, #16
 800532e:	60f8      	str	r0, [r7, #12]
 8005330:	60b9      	str	r1, [r7, #8]
 8005332:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005334:	2300      	movs	r3, #0
 8005336:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005338:	f3ef 8305 	mrs	r3, IPSR
 800533c:	617b      	str	r3, [r7, #20]
  return(result);
 800533e:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005340:	2b00      	cmp	r3, #0
 8005342:	d17e      	bne.n	8005442 <osThreadNew+0x11a>
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	2b00      	cmp	r3, #0
 8005348:	d07b      	beq.n	8005442 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800534a:	2380      	movs	r3, #128	@ 0x80
 800534c:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800534e:	2318      	movs	r3, #24
 8005350:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8005352:	2300      	movs	r3, #0
 8005354:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005356:	f04f 33ff 	mov.w	r3, #4294967295
 800535a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d045      	beq.n	80053ee <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	2b00      	cmp	r3, #0
 8005368:	d002      	beq.n	8005370 <osThreadNew+0x48>
        name = attr->name;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	681b      	ldr	r3, [r3, #0]
 800536e:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8005370:	687b      	ldr	r3, [r7, #4]
 8005372:	699b      	ldr	r3, [r3, #24]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d002      	beq.n	800537e <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	699b      	ldr	r3, [r3, #24]
 800537c:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800537e:	69fb      	ldr	r3, [r7, #28]
 8005380:	2b00      	cmp	r3, #0
 8005382:	d008      	beq.n	8005396 <osThreadNew+0x6e>
 8005384:	69fb      	ldr	r3, [r7, #28]
 8005386:	2b38      	cmp	r3, #56	@ 0x38
 8005388:	d805      	bhi.n	8005396 <osThreadNew+0x6e>
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	685b      	ldr	r3, [r3, #4]
 800538e:	f003 0301 	and.w	r3, r3, #1
 8005392:	2b00      	cmp	r3, #0
 8005394:	d001      	beq.n	800539a <osThreadNew+0x72>
        return (NULL);
 8005396:	2300      	movs	r3, #0
 8005398:	e054      	b.n	8005444 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	2b00      	cmp	r3, #0
 80053a0:	d003      	beq.n	80053aa <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	695b      	ldr	r3, [r3, #20]
 80053a6:	089b      	lsrs	r3, r3, #2
 80053a8:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	689b      	ldr	r3, [r3, #8]
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00e      	beq.n	80053d0 <osThreadNew+0xa8>
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	68db      	ldr	r3, [r3, #12]
 80053b6:	2ba7      	cmp	r3, #167	@ 0xa7
 80053b8:	d90a      	bls.n	80053d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d006      	beq.n	80053d0 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	695b      	ldr	r3, [r3, #20]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d002      	beq.n	80053d0 <osThreadNew+0xa8>
        mem = 1;
 80053ca:	2301      	movs	r3, #1
 80053cc:	61bb      	str	r3, [r7, #24]
 80053ce:	e010      	b.n	80053f2 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	689b      	ldr	r3, [r3, #8]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d10c      	bne.n	80053f2 <osThreadNew+0xca>
 80053d8:	687b      	ldr	r3, [r7, #4]
 80053da:	68db      	ldr	r3, [r3, #12]
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d108      	bne.n	80053f2 <osThreadNew+0xca>
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	691b      	ldr	r3, [r3, #16]
 80053e4:	2b00      	cmp	r3, #0
 80053e6:	d104      	bne.n	80053f2 <osThreadNew+0xca>
          mem = 0;
 80053e8:	2300      	movs	r3, #0
 80053ea:	61bb      	str	r3, [r7, #24]
 80053ec:	e001      	b.n	80053f2 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80053ee:	2300      	movs	r3, #0
 80053f0:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80053f2:	69bb      	ldr	r3, [r7, #24]
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d110      	bne.n	800541a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80053fc:	687a      	ldr	r2, [r7, #4]
 80053fe:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005400:	9202      	str	r2, [sp, #8]
 8005402:	9301      	str	r3, [sp, #4]
 8005404:	69fb      	ldr	r3, [r7, #28]
 8005406:	9300      	str	r3, [sp, #0]
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	6a3a      	ldr	r2, [r7, #32]
 800540c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800540e:	68f8      	ldr	r0, [r7, #12]
 8005410:	f000 fec8 	bl	80061a4 <xTaskCreateStatic>
 8005414:	4603      	mov	r3, r0
 8005416:	613b      	str	r3, [r7, #16]
 8005418:	e013      	b.n	8005442 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b00      	cmp	r3, #0
 800541e:	d110      	bne.n	8005442 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005420:	6a3b      	ldr	r3, [r7, #32]
 8005422:	b29a      	uxth	r2, r3
 8005424:	f107 0310 	add.w	r3, r7, #16
 8005428:	9301      	str	r3, [sp, #4]
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8005432:	68f8      	ldr	r0, [r7, #12]
 8005434:	f000 ff16 	bl	8006264 <xTaskCreate>
 8005438:	4603      	mov	r3, r0
 800543a:	2b01      	cmp	r3, #1
 800543c:	d001      	beq.n	8005442 <osThreadNew+0x11a>
            hTask = NULL;
 800543e:	2300      	movs	r3, #0
 8005440:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005442:	693b      	ldr	r3, [r7, #16]
}
 8005444:	4618      	mov	r0, r3
 8005446:	3728      	adds	r7, #40	@ 0x28
 8005448:	46bd      	mov	sp, r7
 800544a:	bd80      	pop	{r7, pc}

0800544c <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005454:	f3ef 8305 	mrs	r3, IPSR
 8005458:	60bb      	str	r3, [r7, #8]
  return(result);
 800545a:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800545c:	2b00      	cmp	r3, #0
 800545e:	d003      	beq.n	8005468 <osDelay+0x1c>
    stat = osErrorISR;
 8005460:	f06f 0305 	mvn.w	r3, #5
 8005464:	60fb      	str	r3, [r7, #12]
 8005466:	e007      	b.n	8005478 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005468:	2300      	movs	r3, #0
 800546a:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	2b00      	cmp	r3, #0
 8005470:	d002      	beq.n	8005478 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005472:	6878      	ldr	r0, [r7, #4]
 8005474:	f001 f854 	bl	8006520 <vTaskDelay>
    }
  }

  return (stat);
 8005478:	68fb      	ldr	r3, [r7, #12]
}
 800547a:	4618      	mov	r0, r3
 800547c:	3710      	adds	r7, #16
 800547e:	46bd      	mov	sp, r7
 8005480:	bd80      	pop	{r7, pc}

08005482 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005482:	b580      	push	{r7, lr}
 8005484:	b08a      	sub	sp, #40	@ 0x28
 8005486:	af02      	add	r7, sp, #8
 8005488:	60f8      	str	r0, [r7, #12]
 800548a:	60b9      	str	r1, [r7, #8]
 800548c:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800548e:	2300      	movs	r3, #0
 8005490:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005492:	f3ef 8305 	mrs	r3, IPSR
 8005496:	613b      	str	r3, [r7, #16]
  return(result);
 8005498:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800549a:	2b00      	cmp	r3, #0
 800549c:	d15f      	bne.n	800555e <osMessageQueueNew+0xdc>
 800549e:	68fb      	ldr	r3, [r7, #12]
 80054a0:	2b00      	cmp	r3, #0
 80054a2:	d05c      	beq.n	800555e <osMessageQueueNew+0xdc>
 80054a4:	68bb      	ldr	r3, [r7, #8]
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d059      	beq.n	800555e <osMessageQueueNew+0xdc>
    mem = -1;
 80054aa:	f04f 33ff 	mov.w	r3, #4294967295
 80054ae:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d029      	beq.n	800550a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054b6:	687b      	ldr	r3, [r7, #4]
 80054b8:	689b      	ldr	r3, [r3, #8]
 80054ba:	2b00      	cmp	r3, #0
 80054bc:	d012      	beq.n	80054e4 <osMessageQueueNew+0x62>
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	68db      	ldr	r3, [r3, #12]
 80054c2:	2b4f      	cmp	r3, #79	@ 0x4f
 80054c4:	d90e      	bls.n	80054e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054c6:	687b      	ldr	r3, [r7, #4]
 80054c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d00a      	beq.n	80054e4 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80054ce:	687b      	ldr	r3, [r7, #4]
 80054d0:	695a      	ldr	r2, [r3, #20]
 80054d2:	68fb      	ldr	r3, [r7, #12]
 80054d4:	68b9      	ldr	r1, [r7, #8]
 80054d6:	fb01 f303 	mul.w	r3, r1, r3
 80054da:	429a      	cmp	r2, r3
 80054dc:	d302      	bcc.n	80054e4 <osMessageQueueNew+0x62>
        mem = 1;
 80054de:	2301      	movs	r3, #1
 80054e0:	61bb      	str	r3, [r7, #24]
 80054e2:	e014      	b.n	800550e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	689b      	ldr	r3, [r3, #8]
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d110      	bne.n	800550e <osMessageQueueNew+0x8c>
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	68db      	ldr	r3, [r3, #12]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d10c      	bne.n	800550e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80054f8:	2b00      	cmp	r3, #0
 80054fa:	d108      	bne.n	800550e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	695b      	ldr	r3, [r3, #20]
 8005500:	2b00      	cmp	r3, #0
 8005502:	d104      	bne.n	800550e <osMessageQueueNew+0x8c>
          mem = 0;
 8005504:	2300      	movs	r3, #0
 8005506:	61bb      	str	r3, [r7, #24]
 8005508:	e001      	b.n	800550e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800550a:	2300      	movs	r3, #0
 800550c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800550e:	69bb      	ldr	r3, [r7, #24]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d10b      	bne.n	800552c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	691a      	ldr	r2, [r3, #16]
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	689b      	ldr	r3, [r3, #8]
 800551c:	2100      	movs	r1, #0
 800551e:	9100      	str	r1, [sp, #0]
 8005520:	68b9      	ldr	r1, [r7, #8]
 8005522:	68f8      	ldr	r0, [r7, #12]
 8005524:	f000 f972 	bl	800580c <xQueueGenericCreateStatic>
 8005528:	61f8      	str	r0, [r7, #28]
 800552a:	e008      	b.n	800553e <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800552c:	69bb      	ldr	r3, [r7, #24]
 800552e:	2b00      	cmp	r3, #0
 8005530:	d105      	bne.n	800553e <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8005532:	2200      	movs	r2, #0
 8005534:	68b9      	ldr	r1, [r7, #8]
 8005536:	68f8      	ldr	r0, [r7, #12]
 8005538:	f000 f9e5 	bl	8005906 <xQueueGenericCreate>
 800553c:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800553e:	69fb      	ldr	r3, [r7, #28]
 8005540:	2b00      	cmp	r3, #0
 8005542:	d00c      	beq.n	800555e <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	2b00      	cmp	r3, #0
 8005548:	d003      	beq.n	8005552 <osMessageQueueNew+0xd0>
        name = attr->name;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	681b      	ldr	r3, [r3, #0]
 800554e:	617b      	str	r3, [r7, #20]
 8005550:	e001      	b.n	8005556 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8005552:	2300      	movs	r3, #0
 8005554:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005556:	6979      	ldr	r1, [r7, #20]
 8005558:	69f8      	ldr	r0, [r7, #28]
 800555a:	f000 fdc5 	bl	80060e8 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800555e:	69fb      	ldr	r3, [r7, #28]
}
 8005560:	4618      	mov	r0, r3
 8005562:	3720      	adds	r7, #32
 8005564:	46bd      	mov	sp, r7
 8005566:	bd80      	pop	{r7, pc}

08005568 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005568:	b480      	push	{r7}
 800556a:	b085      	sub	sp, #20
 800556c:	af00      	add	r7, sp, #0
 800556e:	60f8      	str	r0, [r7, #12]
 8005570:	60b9      	str	r1, [r7, #8]
 8005572:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8005574:	68fb      	ldr	r3, [r7, #12]
 8005576:	4a07      	ldr	r2, [pc, #28]	@ (8005594 <vApplicationGetIdleTaskMemory+0x2c>)
 8005578:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800557a:	68bb      	ldr	r3, [r7, #8]
 800557c:	4a06      	ldr	r2, [pc, #24]	@ (8005598 <vApplicationGetIdleTaskMemory+0x30>)
 800557e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	2280      	movs	r2, #128	@ 0x80
 8005584:	601a      	str	r2, [r3, #0]
}
 8005586:	bf00      	nop
 8005588:	3714      	adds	r7, #20
 800558a:	46bd      	mov	sp, r7
 800558c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005590:	4770      	bx	lr
 8005592:	bf00      	nop
 8005594:	20000274 	.word	0x20000274
 8005598:	2000031c 	.word	0x2000031c

0800559c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800559c:	b480      	push	{r7}
 800559e:	b085      	sub	sp, #20
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 80055a8:	68fb      	ldr	r3, [r7, #12]
 80055aa:	4a07      	ldr	r2, [pc, #28]	@ (80055c8 <vApplicationGetTimerTaskMemory+0x2c>)
 80055ac:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 80055ae:	68bb      	ldr	r3, [r7, #8]
 80055b0:	4a06      	ldr	r2, [pc, #24]	@ (80055cc <vApplicationGetTimerTaskMemory+0x30>)
 80055b2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80055ba:	601a      	str	r2, [r3, #0]
}
 80055bc:	bf00      	nop
 80055be:	3714      	adds	r7, #20
 80055c0:	46bd      	mov	sp, r7
 80055c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055c6:	4770      	bx	lr
 80055c8:	2000051c 	.word	0x2000051c
 80055cc:	200005c4 	.word	0x200005c4

080055d0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80055d0:	b480      	push	{r7}
 80055d2:	b083      	sub	sp, #12
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055d8:	687b      	ldr	r3, [r7, #4]
 80055da:	f103 0208 	add.w	r2, r3, #8
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	f04f 32ff 	mov.w	r2, #4294967295
 80055e8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	f103 0208 	add.w	r2, r3, #8
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	f103 0208 	add.w	r2, r3, #8
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055fe:	687b      	ldr	r3, [r7, #4]
 8005600:	2200      	movs	r2, #0
 8005602:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005604:	bf00      	nop
 8005606:	370c      	adds	r7, #12
 8005608:	46bd      	mov	sp, r7
 800560a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800560e:	4770      	bx	lr

08005610 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005610:	b480      	push	{r7}
 8005612:	b083      	sub	sp, #12
 8005614:	af00      	add	r7, sp, #0
 8005616:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	2200      	movs	r2, #0
 800561c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800561e:	bf00      	nop
 8005620:	370c      	adds	r7, #12
 8005622:	46bd      	mov	sp, r7
 8005624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005628:	4770      	bx	lr

0800562a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800562a:	b480      	push	{r7}
 800562c:	b085      	sub	sp, #20
 800562e:	af00      	add	r7, sp, #0
 8005630:	6078      	str	r0, [r7, #4]
 8005632:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005634:	687b      	ldr	r3, [r7, #4]
 8005636:	685b      	ldr	r3, [r3, #4]
 8005638:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800563a:	683b      	ldr	r3, [r7, #0]
 800563c:	68fa      	ldr	r2, [r7, #12]
 800563e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005640:	68fb      	ldr	r3, [r7, #12]
 8005642:	689a      	ldr	r2, [r3, #8]
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005648:	68fb      	ldr	r3, [r7, #12]
 800564a:	689b      	ldr	r3, [r3, #8]
 800564c:	683a      	ldr	r2, [r7, #0]
 800564e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005650:	68fb      	ldr	r3, [r7, #12]
 8005652:	683a      	ldr	r2, [r7, #0]
 8005654:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005656:	683b      	ldr	r3, [r7, #0]
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	681b      	ldr	r3, [r3, #0]
 8005660:	1c5a      	adds	r2, r3, #1
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	601a      	str	r2, [r3, #0]
}
 8005666:	bf00      	nop
 8005668:	3714      	adds	r7, #20
 800566a:	46bd      	mov	sp, r7
 800566c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005670:	4770      	bx	lr

08005672 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005672:	b480      	push	{r7}
 8005674:	b085      	sub	sp, #20
 8005676:	af00      	add	r7, sp, #0
 8005678:	6078      	str	r0, [r7, #4]
 800567a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005682:	68bb      	ldr	r3, [r7, #8]
 8005684:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005688:	d103      	bne.n	8005692 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	691b      	ldr	r3, [r3, #16]
 800568e:	60fb      	str	r3, [r7, #12]
 8005690:	e00c      	b.n	80056ac <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	3308      	adds	r3, #8
 8005696:	60fb      	str	r3, [r7, #12]
 8005698:	e002      	b.n	80056a0 <vListInsert+0x2e>
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	685b      	ldr	r3, [r3, #4]
 800569e:	60fb      	str	r3, [r7, #12]
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	685b      	ldr	r3, [r3, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	68ba      	ldr	r2, [r7, #8]
 80056a8:	429a      	cmp	r2, r3
 80056aa:	d2f6      	bcs.n	800569a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 80056ac:	68fb      	ldr	r3, [r7, #12]
 80056ae:	685a      	ldr	r2, [r3, #4]
 80056b0:	683b      	ldr	r3, [r7, #0]
 80056b2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80056b4:	683b      	ldr	r3, [r7, #0]
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	683a      	ldr	r2, [r7, #0]
 80056ba:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80056bc:	683b      	ldr	r3, [r7, #0]
 80056be:	68fa      	ldr	r2, [r7, #12]
 80056c0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80056c2:	68fb      	ldr	r3, [r7, #12]
 80056c4:	683a      	ldr	r2, [r7, #0]
 80056c6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80056c8:	683b      	ldr	r3, [r7, #0]
 80056ca:	687a      	ldr	r2, [r7, #4]
 80056cc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	1c5a      	adds	r2, r3, #1
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	601a      	str	r2, [r3, #0]
}
 80056d8:	bf00      	nop
 80056da:	3714      	adds	r7, #20
 80056dc:	46bd      	mov	sp, r7
 80056de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056e2:	4770      	bx	lr

080056e4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056e4:	b480      	push	{r7}
 80056e6:	b085      	sub	sp, #20
 80056e8:	af00      	add	r7, sp, #0
 80056ea:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	691b      	ldr	r3, [r3, #16]
 80056f0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	687a      	ldr	r2, [r7, #4]
 80056f8:	6892      	ldr	r2, [r2, #8]
 80056fa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	689b      	ldr	r3, [r3, #8]
 8005700:	687a      	ldr	r2, [r7, #4]
 8005702:	6852      	ldr	r2, [r2, #4]
 8005704:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005706:	68fb      	ldr	r3, [r7, #12]
 8005708:	685b      	ldr	r3, [r3, #4]
 800570a:	687a      	ldr	r2, [r7, #4]
 800570c:	429a      	cmp	r2, r3
 800570e:	d103      	bne.n	8005718 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	689a      	ldr	r2, [r3, #8]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	2200      	movs	r2, #0
 800571c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800571e:	68fb      	ldr	r3, [r7, #12]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	1e5a      	subs	r2, r3, #1
 8005724:	68fb      	ldr	r3, [r7, #12]
 8005726:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	681b      	ldr	r3, [r3, #0]
}
 800572c:	4618      	mov	r0, r3
 800572e:	3714      	adds	r7, #20
 8005730:	46bd      	mov	sp, r7
 8005732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005736:	4770      	bx	lr

08005738 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005738:	b580      	push	{r7, lr}
 800573a:	b084      	sub	sp, #16
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
 8005740:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005742:	687b      	ldr	r3, [r7, #4]
 8005744:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b00      	cmp	r3, #0
 800574a:	d10b      	bne.n	8005764 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800574c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005750:	f383 8811 	msr	BASEPRI, r3
 8005754:	f3bf 8f6f 	isb	sy
 8005758:	f3bf 8f4f 	dsb	sy
 800575c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800575e:	bf00      	nop
 8005760:	bf00      	nop
 8005762:	e7fd      	b.n	8005760 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005764:	f002 f8e0 	bl	8007928 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	681a      	ldr	r2, [r3, #0]
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005770:	68f9      	ldr	r1, [r7, #12]
 8005772:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005774:	fb01 f303 	mul.w	r3, r1, r3
 8005778:	441a      	add	r2, r3
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800577e:	68fb      	ldr	r3, [r7, #12]
 8005780:	2200      	movs	r2, #0
 8005782:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005784:	68fb      	ldr	r3, [r7, #12]
 8005786:	681a      	ldr	r2, [r3, #0]
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800578c:	68fb      	ldr	r3, [r7, #12]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005794:	3b01      	subs	r3, #1
 8005796:	68f9      	ldr	r1, [r7, #12]
 8005798:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800579a:	fb01 f303 	mul.w	r3, r1, r3
 800579e:	441a      	add	r2, r3
 80057a0:	68fb      	ldr	r3, [r7, #12]
 80057a2:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 80057a4:	68fb      	ldr	r3, [r7, #12]
 80057a6:	22ff      	movs	r2, #255	@ 0xff
 80057a8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	22ff      	movs	r2, #255	@ 0xff
 80057b0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 80057b4:	683b      	ldr	r3, [r7, #0]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d114      	bne.n	80057e4 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057ba:	68fb      	ldr	r3, [r7, #12]
 80057bc:	691b      	ldr	r3, [r3, #16]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d01a      	beq.n	80057f8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057c2:	68fb      	ldr	r3, [r7, #12]
 80057c4:	3310      	adds	r3, #16
 80057c6:	4618      	mov	r0, r3
 80057c8:	f001 f97e 	bl	8006ac8 <xTaskRemoveFromEventList>
 80057cc:	4603      	mov	r3, r0
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d012      	beq.n	80057f8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80057d2:	4b0d      	ldr	r3, [pc, #52]	@ (8005808 <xQueueGenericReset+0xd0>)
 80057d4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057d8:	601a      	str	r2, [r3, #0]
 80057da:	f3bf 8f4f 	dsb	sy
 80057de:	f3bf 8f6f 	isb	sy
 80057e2:	e009      	b.n	80057f8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057e4:	68fb      	ldr	r3, [r7, #12]
 80057e6:	3310      	adds	r3, #16
 80057e8:	4618      	mov	r0, r3
 80057ea:	f7ff fef1 	bl	80055d0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	3324      	adds	r3, #36	@ 0x24
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7ff feec 	bl	80055d0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057f8:	f002 f8c8 	bl	800798c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057fc:	2301      	movs	r3, #1
}
 80057fe:	4618      	mov	r0, r3
 8005800:	3710      	adds	r7, #16
 8005802:	46bd      	mov	sp, r7
 8005804:	bd80      	pop	{r7, pc}
 8005806:	bf00      	nop
 8005808:	e000ed04 	.word	0xe000ed04

0800580c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800580c:	b580      	push	{r7, lr}
 800580e:	b08e      	sub	sp, #56	@ 0x38
 8005810:	af02      	add	r7, sp, #8
 8005812:	60f8      	str	r0, [r7, #12]
 8005814:	60b9      	str	r1, [r7, #8]
 8005816:	607a      	str	r2, [r7, #4]
 8005818:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800581a:	68fb      	ldr	r3, [r7, #12]
 800581c:	2b00      	cmp	r3, #0
 800581e:	d10b      	bne.n	8005838 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005820:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005824:	f383 8811 	msr	BASEPRI, r3
 8005828:	f3bf 8f6f 	isb	sy
 800582c:	f3bf 8f4f 	dsb	sy
 8005830:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005832:	bf00      	nop
 8005834:	bf00      	nop
 8005836:	e7fd      	b.n	8005834 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005838:	683b      	ldr	r3, [r7, #0]
 800583a:	2b00      	cmp	r3, #0
 800583c:	d10b      	bne.n	8005856 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 800583e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005842:	f383 8811 	msr	BASEPRI, r3
 8005846:	f3bf 8f6f 	isb	sy
 800584a:	f3bf 8f4f 	dsb	sy
 800584e:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005850:	bf00      	nop
 8005852:	bf00      	nop
 8005854:	e7fd      	b.n	8005852 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	2b00      	cmp	r3, #0
 800585a:	d002      	beq.n	8005862 <xQueueGenericCreateStatic+0x56>
 800585c:	68bb      	ldr	r3, [r7, #8]
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <xQueueGenericCreateStatic+0x5a>
 8005862:	2301      	movs	r3, #1
 8005864:	e000      	b.n	8005868 <xQueueGenericCreateStatic+0x5c>
 8005866:	2300      	movs	r3, #0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d10b      	bne.n	8005884 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 800586c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005870:	f383 8811 	msr	BASEPRI, r3
 8005874:	f3bf 8f6f 	isb	sy
 8005878:	f3bf 8f4f 	dsb	sy
 800587c:	623b      	str	r3, [r7, #32]
}
 800587e:	bf00      	nop
 8005880:	bf00      	nop
 8005882:	e7fd      	b.n	8005880 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	2b00      	cmp	r3, #0
 8005888:	d102      	bne.n	8005890 <xQueueGenericCreateStatic+0x84>
 800588a:	68bb      	ldr	r3, [r7, #8]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d101      	bne.n	8005894 <xQueueGenericCreateStatic+0x88>
 8005890:	2301      	movs	r3, #1
 8005892:	e000      	b.n	8005896 <xQueueGenericCreateStatic+0x8a>
 8005894:	2300      	movs	r3, #0
 8005896:	2b00      	cmp	r3, #0
 8005898:	d10b      	bne.n	80058b2 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 800589a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800589e:	f383 8811 	msr	BASEPRI, r3
 80058a2:	f3bf 8f6f 	isb	sy
 80058a6:	f3bf 8f4f 	dsb	sy
 80058aa:	61fb      	str	r3, [r7, #28]
}
 80058ac:	bf00      	nop
 80058ae:	bf00      	nop
 80058b0:	e7fd      	b.n	80058ae <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 80058b2:	2350      	movs	r3, #80	@ 0x50
 80058b4:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 80058b6:	697b      	ldr	r3, [r7, #20]
 80058b8:	2b50      	cmp	r3, #80	@ 0x50
 80058ba:	d00b      	beq.n	80058d4 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80058bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058c0:	f383 8811 	msr	BASEPRI, r3
 80058c4:	f3bf 8f6f 	isb	sy
 80058c8:	f3bf 8f4f 	dsb	sy
 80058cc:	61bb      	str	r3, [r7, #24]
}
 80058ce:	bf00      	nop
 80058d0:	bf00      	nop
 80058d2:	e7fd      	b.n	80058d0 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80058d4:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80058d6:	683b      	ldr	r3, [r7, #0]
 80058d8:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058da:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058dc:	2b00      	cmp	r3, #0
 80058de:	d00d      	beq.n	80058fc <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058e0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058e2:	2201      	movs	r2, #1
 80058e4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058e8:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058ec:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058ee:	9300      	str	r3, [sp, #0]
 80058f0:	4613      	mov	r3, r2
 80058f2:	687a      	ldr	r2, [r7, #4]
 80058f4:	68b9      	ldr	r1, [r7, #8]
 80058f6:	68f8      	ldr	r0, [r7, #12]
 80058f8:	f000 f840 	bl	800597c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058fc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058fe:	4618      	mov	r0, r3
 8005900:	3730      	adds	r7, #48	@ 0x30
 8005902:	46bd      	mov	sp, r7
 8005904:	bd80      	pop	{r7, pc}

08005906 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005906:	b580      	push	{r7, lr}
 8005908:	b08a      	sub	sp, #40	@ 0x28
 800590a:	af02      	add	r7, sp, #8
 800590c:	60f8      	str	r0, [r7, #12]
 800590e:	60b9      	str	r1, [r7, #8]
 8005910:	4613      	mov	r3, r2
 8005912:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d10b      	bne.n	8005932 <xQueueGenericCreate+0x2c>
	__asm volatile
 800591a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591e:	f383 8811 	msr	BASEPRI, r3
 8005922:	f3bf 8f6f 	isb	sy
 8005926:	f3bf 8f4f 	dsb	sy
 800592a:	613b      	str	r3, [r7, #16]
}
 800592c:	bf00      	nop
 800592e:	bf00      	nop
 8005930:	e7fd      	b.n	800592e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	68ba      	ldr	r2, [r7, #8]
 8005936:	fb02 f303 	mul.w	r3, r2, r3
 800593a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800593c:	69fb      	ldr	r3, [r7, #28]
 800593e:	3350      	adds	r3, #80	@ 0x50
 8005940:	4618      	mov	r0, r3
 8005942:	f002 f913 	bl	8007b6c <pvPortMalloc>
 8005946:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005948:	69bb      	ldr	r3, [r7, #24]
 800594a:	2b00      	cmp	r3, #0
 800594c:	d011      	beq.n	8005972 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800594e:	69bb      	ldr	r3, [r7, #24]
 8005950:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005952:	697b      	ldr	r3, [r7, #20]
 8005954:	3350      	adds	r3, #80	@ 0x50
 8005956:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	2200      	movs	r2, #0
 800595c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005960:	79fa      	ldrb	r2, [r7, #7]
 8005962:	69bb      	ldr	r3, [r7, #24]
 8005964:	9300      	str	r3, [sp, #0]
 8005966:	4613      	mov	r3, r2
 8005968:	697a      	ldr	r2, [r7, #20]
 800596a:	68b9      	ldr	r1, [r7, #8]
 800596c:	68f8      	ldr	r0, [r7, #12]
 800596e:	f000 f805 	bl	800597c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005972:	69bb      	ldr	r3, [r7, #24]
	}
 8005974:	4618      	mov	r0, r3
 8005976:	3720      	adds	r7, #32
 8005978:	46bd      	mov	sp, r7
 800597a:	bd80      	pop	{r7, pc}

0800597c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800597c:	b580      	push	{r7, lr}
 800597e:	b084      	sub	sp, #16
 8005980:	af00      	add	r7, sp, #0
 8005982:	60f8      	str	r0, [r7, #12]
 8005984:	60b9      	str	r1, [r7, #8]
 8005986:	607a      	str	r2, [r7, #4]
 8005988:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800598a:	68bb      	ldr	r3, [r7, #8]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d103      	bne.n	8005998 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005990:	69bb      	ldr	r3, [r7, #24]
 8005992:	69ba      	ldr	r2, [r7, #24]
 8005994:	601a      	str	r2, [r3, #0]
 8005996:	e002      	b.n	800599e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005998:	69bb      	ldr	r3, [r7, #24]
 800599a:	687a      	ldr	r2, [r7, #4]
 800599c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800599e:	69bb      	ldr	r3, [r7, #24]
 80059a0:	68fa      	ldr	r2, [r7, #12]
 80059a2:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 80059a4:	69bb      	ldr	r3, [r7, #24]
 80059a6:	68ba      	ldr	r2, [r7, #8]
 80059a8:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 80059aa:	2101      	movs	r1, #1
 80059ac:	69b8      	ldr	r0, [r7, #24]
 80059ae:	f7ff fec3 	bl	8005738 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 80059b2:	69bb      	ldr	r3, [r7, #24]
 80059b4:	78fa      	ldrb	r2, [r7, #3]
 80059b6:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80059ba:	bf00      	nop
 80059bc:	3710      	adds	r7, #16
 80059be:	46bd      	mov	sp, r7
 80059c0:	bd80      	pop	{r7, pc}
	...

080059c4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80059c4:	b580      	push	{r7, lr}
 80059c6:	b08e      	sub	sp, #56	@ 0x38
 80059c8:	af00      	add	r7, sp, #0
 80059ca:	60f8      	str	r0, [r7, #12]
 80059cc:	60b9      	str	r1, [r7, #8]
 80059ce:	607a      	str	r2, [r7, #4]
 80059d0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80059d2:	2300      	movs	r3, #0
 80059d4:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80059d6:	68fb      	ldr	r3, [r7, #12]
 80059d8:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d10b      	bne.n	80059f8 <xQueueGenericSend+0x34>
	__asm volatile
 80059e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059e4:	f383 8811 	msr	BASEPRI, r3
 80059e8:	f3bf 8f6f 	isb	sy
 80059ec:	f3bf 8f4f 	dsb	sy
 80059f0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059f2:	bf00      	nop
 80059f4:	bf00      	nop
 80059f6:	e7fd      	b.n	80059f4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059f8:	68bb      	ldr	r3, [r7, #8]
 80059fa:	2b00      	cmp	r3, #0
 80059fc:	d103      	bne.n	8005a06 <xQueueGenericSend+0x42>
 80059fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d101      	bne.n	8005a0a <xQueueGenericSend+0x46>
 8005a06:	2301      	movs	r3, #1
 8005a08:	e000      	b.n	8005a0c <xQueueGenericSend+0x48>
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d10b      	bne.n	8005a28 <xQueueGenericSend+0x64>
	__asm volatile
 8005a10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a14:	f383 8811 	msr	BASEPRI, r3
 8005a18:	f3bf 8f6f 	isb	sy
 8005a1c:	f3bf 8f4f 	dsb	sy
 8005a20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005a22:	bf00      	nop
 8005a24:	bf00      	nop
 8005a26:	e7fd      	b.n	8005a24 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005a28:	683b      	ldr	r3, [r7, #0]
 8005a2a:	2b02      	cmp	r3, #2
 8005a2c:	d103      	bne.n	8005a36 <xQueueGenericSend+0x72>
 8005a2e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a32:	2b01      	cmp	r3, #1
 8005a34:	d101      	bne.n	8005a3a <xQueueGenericSend+0x76>
 8005a36:	2301      	movs	r3, #1
 8005a38:	e000      	b.n	8005a3c <xQueueGenericSend+0x78>
 8005a3a:	2300      	movs	r3, #0
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d10b      	bne.n	8005a58 <xQueueGenericSend+0x94>
	__asm volatile
 8005a40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a44:	f383 8811 	msr	BASEPRI, r3
 8005a48:	f3bf 8f6f 	isb	sy
 8005a4c:	f3bf 8f4f 	dsb	sy
 8005a50:	623b      	str	r3, [r7, #32]
}
 8005a52:	bf00      	nop
 8005a54:	bf00      	nop
 8005a56:	e7fd      	b.n	8005a54 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a58:	f001 f9fc 	bl	8006e54 <xTaskGetSchedulerState>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d102      	bne.n	8005a68 <xQueueGenericSend+0xa4>
 8005a62:	687b      	ldr	r3, [r7, #4]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d101      	bne.n	8005a6c <xQueueGenericSend+0xa8>
 8005a68:	2301      	movs	r3, #1
 8005a6a:	e000      	b.n	8005a6e <xQueueGenericSend+0xaa>
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	2b00      	cmp	r3, #0
 8005a70:	d10b      	bne.n	8005a8a <xQueueGenericSend+0xc6>
	__asm volatile
 8005a72:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a76:	f383 8811 	msr	BASEPRI, r3
 8005a7a:	f3bf 8f6f 	isb	sy
 8005a7e:	f3bf 8f4f 	dsb	sy
 8005a82:	61fb      	str	r3, [r7, #28]
}
 8005a84:	bf00      	nop
 8005a86:	bf00      	nop
 8005a88:	e7fd      	b.n	8005a86 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a8a:	f001 ff4d 	bl	8007928 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a90:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a94:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a96:	429a      	cmp	r2, r3
 8005a98:	d302      	bcc.n	8005aa0 <xQueueGenericSend+0xdc>
 8005a9a:	683b      	ldr	r3, [r7, #0]
 8005a9c:	2b02      	cmp	r3, #2
 8005a9e:	d129      	bne.n	8005af4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005aa0:	683a      	ldr	r2, [r7, #0]
 8005aa2:	68b9      	ldr	r1, [r7, #8]
 8005aa4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005aa6:	f000 fa0f 	bl	8005ec8 <prvCopyDataToQueue>
 8005aaa:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005ab0:	2b00      	cmp	r3, #0
 8005ab2:	d010      	beq.n	8005ad6 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005ab4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab6:	3324      	adds	r3, #36	@ 0x24
 8005ab8:	4618      	mov	r0, r3
 8005aba:	f001 f805 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005abe:	4603      	mov	r3, r0
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d013      	beq.n	8005aec <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005ac4:	4b3f      	ldr	r3, [pc, #252]	@ (8005bc4 <xQueueGenericSend+0x200>)
 8005ac6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	f3bf 8f4f 	dsb	sy
 8005ad0:	f3bf 8f6f 	isb	sy
 8005ad4:	e00a      	b.n	8005aec <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005ad6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	d007      	beq.n	8005aec <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005adc:	4b39      	ldr	r3, [pc, #228]	@ (8005bc4 <xQueueGenericSend+0x200>)
 8005ade:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ae2:	601a      	str	r2, [r3, #0]
 8005ae4:	f3bf 8f4f 	dsb	sy
 8005ae8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005aec:	f001 ff4e 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005af0:	2301      	movs	r3, #1
 8005af2:	e063      	b.n	8005bbc <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d103      	bne.n	8005b02 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005afa:	f001 ff47 	bl	800798c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005afe:	2300      	movs	r3, #0
 8005b00:	e05c      	b.n	8005bbc <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005b02:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d106      	bne.n	8005b16 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005b08:	f107 0314 	add.w	r3, r7, #20
 8005b0c:	4618      	mov	r0, r3
 8005b0e:	f001 f83f 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005b12:	2301      	movs	r3, #1
 8005b14:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005b16:	f001 ff39 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005b1a:	f000 fda7 	bl	800666c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005b1e:	f001 ff03 	bl	8007928 <vPortEnterCritical>
 8005b22:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b24:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b28:	b25b      	sxtb	r3, r3
 8005b2a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b2e:	d103      	bne.n	8005b38 <xQueueGenericSend+0x174>
 8005b30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b32:	2200      	movs	r2, #0
 8005b34:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b38:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3a:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b3e:	b25b      	sxtb	r3, r3
 8005b40:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b44:	d103      	bne.n	8005b4e <xQueueGenericSend+0x18a>
 8005b46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b48:	2200      	movs	r2, #0
 8005b4a:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b4e:	f001 ff1d 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b52:	1d3a      	adds	r2, r7, #4
 8005b54:	f107 0314 	add.w	r3, r7, #20
 8005b58:	4611      	mov	r1, r2
 8005b5a:	4618      	mov	r0, r3
 8005b5c:	f001 f82e 	bl	8006bbc <xTaskCheckForTimeOut>
 8005b60:	4603      	mov	r3, r0
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d124      	bne.n	8005bb0 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b66:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b68:	f000 faa6 	bl	80060b8 <prvIsQueueFull>
 8005b6c:	4603      	mov	r3, r0
 8005b6e:	2b00      	cmp	r3, #0
 8005b70:	d018      	beq.n	8005ba4 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	3310      	adds	r3, #16
 8005b76:	687a      	ldr	r2, [r7, #4]
 8005b78:	4611      	mov	r1, r2
 8005b7a:	4618      	mov	r0, r3
 8005b7c:	f000 ff52 	bl	8006a24 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b80:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b82:	f000 fa31 	bl	8005fe8 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b86:	f000 fd7f 	bl	8006688 <xTaskResumeAll>
 8005b8a:	4603      	mov	r3, r0
 8005b8c:	2b00      	cmp	r3, #0
 8005b8e:	f47f af7c 	bne.w	8005a8a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b92:	4b0c      	ldr	r3, [pc, #48]	@ (8005bc4 <xQueueGenericSend+0x200>)
 8005b94:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b98:	601a      	str	r2, [r3, #0]
 8005b9a:	f3bf 8f4f 	dsb	sy
 8005b9e:	f3bf 8f6f 	isb	sy
 8005ba2:	e772      	b.n	8005a8a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005ba4:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ba6:	f000 fa1f 	bl	8005fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005baa:	f000 fd6d 	bl	8006688 <xTaskResumeAll>
 8005bae:	e76c      	b.n	8005a8a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005bb0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005bb2:	f000 fa19 	bl	8005fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005bb6:	f000 fd67 	bl	8006688 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005bba:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005bbc:	4618      	mov	r0, r3
 8005bbe:	3738      	adds	r7, #56	@ 0x38
 8005bc0:	46bd      	mov	sp, r7
 8005bc2:	bd80      	pop	{r7, pc}
 8005bc4:	e000ed04 	.word	0xe000ed04

08005bc8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005bc8:	b580      	push	{r7, lr}
 8005bca:	b090      	sub	sp, #64	@ 0x40
 8005bcc:	af00      	add	r7, sp, #0
 8005bce:	60f8      	str	r0, [r7, #12]
 8005bd0:	60b9      	str	r1, [r7, #8]
 8005bd2:	607a      	str	r2, [r7, #4]
 8005bd4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005bd6:	68fb      	ldr	r3, [r7, #12]
 8005bd8:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005bda:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bdc:	2b00      	cmp	r3, #0
 8005bde:	d10b      	bne.n	8005bf8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005be0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005be4:	f383 8811 	msr	BASEPRI, r3
 8005be8:	f3bf 8f6f 	isb	sy
 8005bec:	f3bf 8f4f 	dsb	sy
 8005bf0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bf2:	bf00      	nop
 8005bf4:	bf00      	nop
 8005bf6:	e7fd      	b.n	8005bf4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bf8:	68bb      	ldr	r3, [r7, #8]
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d103      	bne.n	8005c06 <xQueueGenericSendFromISR+0x3e>
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005c02:	2b00      	cmp	r3, #0
 8005c04:	d101      	bne.n	8005c0a <xQueueGenericSendFromISR+0x42>
 8005c06:	2301      	movs	r3, #1
 8005c08:	e000      	b.n	8005c0c <xQueueGenericSendFromISR+0x44>
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	2b00      	cmp	r3, #0
 8005c0e:	d10b      	bne.n	8005c28 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005c10:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c14:	f383 8811 	msr	BASEPRI, r3
 8005c18:	f3bf 8f6f 	isb	sy
 8005c1c:	f3bf 8f4f 	dsb	sy
 8005c20:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005c22:	bf00      	nop
 8005c24:	bf00      	nop
 8005c26:	e7fd      	b.n	8005c24 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b02      	cmp	r3, #2
 8005c2c:	d103      	bne.n	8005c36 <xQueueGenericSendFromISR+0x6e>
 8005c2e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c30:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c32:	2b01      	cmp	r3, #1
 8005c34:	d101      	bne.n	8005c3a <xQueueGenericSendFromISR+0x72>
 8005c36:	2301      	movs	r3, #1
 8005c38:	e000      	b.n	8005c3c <xQueueGenericSendFromISR+0x74>
 8005c3a:	2300      	movs	r3, #0
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d10b      	bne.n	8005c58 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c40:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c44:	f383 8811 	msr	BASEPRI, r3
 8005c48:	f3bf 8f6f 	isb	sy
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	623b      	str	r3, [r7, #32]
}
 8005c52:	bf00      	nop
 8005c54:	bf00      	nop
 8005c56:	e7fd      	b.n	8005c54 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c58:	f001 ff46 	bl	8007ae8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c5c:	f3ef 8211 	mrs	r2, BASEPRI
 8005c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c64:	f383 8811 	msr	BASEPRI, r3
 8005c68:	f3bf 8f6f 	isb	sy
 8005c6c:	f3bf 8f4f 	dsb	sy
 8005c70:	61fa      	str	r2, [r7, #28]
 8005c72:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c74:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c76:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c78:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c7c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c80:	429a      	cmp	r2, r3
 8005c82:	d302      	bcc.n	8005c8a <xQueueGenericSendFromISR+0xc2>
 8005c84:	683b      	ldr	r3, [r7, #0]
 8005c86:	2b02      	cmp	r3, #2
 8005c88:	d12f      	bne.n	8005cea <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c8a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c8c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c90:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c96:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c98:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c9a:	683a      	ldr	r2, [r7, #0]
 8005c9c:	68b9      	ldr	r1, [r7, #8]
 8005c9e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005ca0:	f000 f912 	bl	8005ec8 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005ca4:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d112      	bne.n	8005cd4 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005cae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005cb2:	2b00      	cmp	r3, #0
 8005cb4:	d016      	beq.n	8005ce4 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005cb6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cb8:	3324      	adds	r3, #36	@ 0x24
 8005cba:	4618      	mov	r0, r3
 8005cbc:	f000 ff04 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005cc0:	4603      	mov	r3, r0
 8005cc2:	2b00      	cmp	r3, #0
 8005cc4:	d00e      	beq.n	8005ce4 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d00b      	beq.n	8005ce4 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	2201      	movs	r2, #1
 8005cd0:	601a      	str	r2, [r3, #0]
 8005cd2:	e007      	b.n	8005ce4 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005cd4:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005cd8:	3301      	adds	r3, #1
 8005cda:	b2db      	uxtb	r3, r3
 8005cdc:	b25a      	sxtb	r2, r3
 8005cde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ce0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005ce4:	2301      	movs	r3, #1
 8005ce6:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005ce8:	e001      	b.n	8005cee <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cea:	2300      	movs	r3, #0
 8005cec:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cee:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cf0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cf2:	697b      	ldr	r3, [r7, #20]
 8005cf4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cf8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cfa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cfc:	4618      	mov	r0, r3
 8005cfe:	3740      	adds	r7, #64	@ 0x40
 8005d00:	46bd      	mov	sp, r7
 8005d02:	bd80      	pop	{r7, pc}

08005d04 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b08c      	sub	sp, #48	@ 0x30
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	60f8      	str	r0, [r7, #12]
 8005d0c:	60b9      	str	r1, [r7, #8]
 8005d0e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005d10:	2300      	movs	r3, #0
 8005d12:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005d18:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d10b      	bne.n	8005d36 <xQueueReceive+0x32>
	__asm volatile
 8005d1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d22:	f383 8811 	msr	BASEPRI, r3
 8005d26:	f3bf 8f6f 	isb	sy
 8005d2a:	f3bf 8f4f 	dsb	sy
 8005d2e:	623b      	str	r3, [r7, #32]
}
 8005d30:	bf00      	nop
 8005d32:	bf00      	nop
 8005d34:	e7fd      	b.n	8005d32 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d36:	68bb      	ldr	r3, [r7, #8]
 8005d38:	2b00      	cmp	r3, #0
 8005d3a:	d103      	bne.n	8005d44 <xQueueReceive+0x40>
 8005d3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d40:	2b00      	cmp	r3, #0
 8005d42:	d101      	bne.n	8005d48 <xQueueReceive+0x44>
 8005d44:	2301      	movs	r3, #1
 8005d46:	e000      	b.n	8005d4a <xQueueReceive+0x46>
 8005d48:	2300      	movs	r3, #0
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d10b      	bne.n	8005d66 <xQueueReceive+0x62>
	__asm volatile
 8005d4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d52:	f383 8811 	msr	BASEPRI, r3
 8005d56:	f3bf 8f6f 	isb	sy
 8005d5a:	f3bf 8f4f 	dsb	sy
 8005d5e:	61fb      	str	r3, [r7, #28]
}
 8005d60:	bf00      	nop
 8005d62:	bf00      	nop
 8005d64:	e7fd      	b.n	8005d62 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d66:	f001 f875 	bl	8006e54 <xTaskGetSchedulerState>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d102      	bne.n	8005d76 <xQueueReceive+0x72>
 8005d70:	687b      	ldr	r3, [r7, #4]
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d101      	bne.n	8005d7a <xQueueReceive+0x76>
 8005d76:	2301      	movs	r3, #1
 8005d78:	e000      	b.n	8005d7c <xQueueReceive+0x78>
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d10b      	bne.n	8005d98 <xQueueReceive+0x94>
	__asm volatile
 8005d80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d84:	f383 8811 	msr	BASEPRI, r3
 8005d88:	f3bf 8f6f 	isb	sy
 8005d8c:	f3bf 8f4f 	dsb	sy
 8005d90:	61bb      	str	r3, [r7, #24]
}
 8005d92:	bf00      	nop
 8005d94:	bf00      	nop
 8005d96:	e7fd      	b.n	8005d94 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d98:	f001 fdc6 	bl	8007928 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d9e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005da0:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005da2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d01f      	beq.n	8005de8 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005da8:	68b9      	ldr	r1, [r7, #8]
 8005daa:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005dac:	f000 f8f6 	bl	8005f9c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005db0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005db2:	1e5a      	subs	r2, r3, #1
 8005db4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db6:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005db8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d00f      	beq.n	8005de0 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dc2:	3310      	adds	r3, #16
 8005dc4:	4618      	mov	r0, r3
 8005dc6:	f000 fe7f 	bl	8006ac8 <xTaskRemoveFromEventList>
 8005dca:	4603      	mov	r3, r0
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d007      	beq.n	8005de0 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005dd0:	4b3c      	ldr	r3, [pc, #240]	@ (8005ec4 <xQueueReceive+0x1c0>)
 8005dd2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005dd6:	601a      	str	r2, [r3, #0]
 8005dd8:	f3bf 8f4f 	dsb	sy
 8005ddc:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005de0:	f001 fdd4 	bl	800798c <vPortExitCritical>
				return pdPASS;
 8005de4:	2301      	movs	r3, #1
 8005de6:	e069      	b.n	8005ebc <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	2b00      	cmp	r3, #0
 8005dec:	d103      	bne.n	8005df6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005dee:	f001 fdcd 	bl	800798c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005df2:	2300      	movs	r3, #0
 8005df4:	e062      	b.n	8005ebc <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005df6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d106      	bne.n	8005e0a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dfc:	f107 0310 	add.w	r3, r7, #16
 8005e00:	4618      	mov	r0, r3
 8005e02:	f000 fec5 	bl	8006b90 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005e06:	2301      	movs	r3, #1
 8005e08:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005e0a:	f001 fdbf 	bl	800798c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005e0e:	f000 fc2d 	bl	800666c <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005e12:	f001 fd89 	bl	8007928 <vPortEnterCritical>
 8005e16:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e18:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005e1c:	b25b      	sxtb	r3, r3
 8005e1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e22:	d103      	bne.n	8005e2c <xQueueReceive+0x128>
 8005e24:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e26:	2200      	movs	r2, #0
 8005e28:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005e2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e2e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005e32:	b25b      	sxtb	r3, r3
 8005e34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e38:	d103      	bne.n	8005e42 <xQueueReceive+0x13e>
 8005e3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e42:	f001 fda3 	bl	800798c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e46:	1d3a      	adds	r2, r7, #4
 8005e48:	f107 0310 	add.w	r3, r7, #16
 8005e4c:	4611      	mov	r1, r2
 8005e4e:	4618      	mov	r0, r3
 8005e50:	f000 feb4 	bl	8006bbc <xTaskCheckForTimeOut>
 8005e54:	4603      	mov	r3, r0
 8005e56:	2b00      	cmp	r3, #0
 8005e58:	d123      	bne.n	8005ea2 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e5a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e5c:	f000 f916 	bl	800608c <prvIsQueueEmpty>
 8005e60:	4603      	mov	r3, r0
 8005e62:	2b00      	cmp	r3, #0
 8005e64:	d017      	beq.n	8005e96 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e66:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e68:	3324      	adds	r3, #36	@ 0x24
 8005e6a:	687a      	ldr	r2, [r7, #4]
 8005e6c:	4611      	mov	r1, r2
 8005e6e:	4618      	mov	r0, r3
 8005e70:	f000 fdd8 	bl	8006a24 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e76:	f000 f8b7 	bl	8005fe8 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e7a:	f000 fc05 	bl	8006688 <xTaskResumeAll>
 8005e7e:	4603      	mov	r3, r0
 8005e80:	2b00      	cmp	r3, #0
 8005e82:	d189      	bne.n	8005d98 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e84:	4b0f      	ldr	r3, [pc, #60]	@ (8005ec4 <xQueueReceive+0x1c0>)
 8005e86:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e8a:	601a      	str	r2, [r3, #0]
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	f3bf 8f6f 	isb	sy
 8005e94:	e780      	b.n	8005d98 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e96:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e98:	f000 f8a6 	bl	8005fe8 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e9c:	f000 fbf4 	bl	8006688 <xTaskResumeAll>
 8005ea0:	e77a      	b.n	8005d98 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005ea2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005ea4:	f000 f8a0 	bl	8005fe8 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005ea8:	f000 fbee 	bl	8006688 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005eac:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005eae:	f000 f8ed 	bl	800608c <prvIsQueueEmpty>
 8005eb2:	4603      	mov	r3, r0
 8005eb4:	2b00      	cmp	r3, #0
 8005eb6:	f43f af6f 	beq.w	8005d98 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005eba:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3730      	adds	r7, #48	@ 0x30
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}
 8005ec4:	e000ed04 	.word	0xe000ed04

08005ec8 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005ec8:	b580      	push	{r7, lr}
 8005eca:	b086      	sub	sp, #24
 8005ecc:	af00      	add	r7, sp, #0
 8005ece:	60f8      	str	r0, [r7, #12]
 8005ed0:	60b9      	str	r1, [r7, #8]
 8005ed2:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005ed4:	2300      	movs	r3, #0
 8005ed6:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005ed8:	68fb      	ldr	r3, [r7, #12]
 8005eda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005edc:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005ede:	68fb      	ldr	r3, [r7, #12]
 8005ee0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ee2:	2b00      	cmp	r3, #0
 8005ee4:	d10d      	bne.n	8005f02 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005ee6:	68fb      	ldr	r3, [r7, #12]
 8005ee8:	681b      	ldr	r3, [r3, #0]
 8005eea:	2b00      	cmp	r3, #0
 8005eec:	d14d      	bne.n	8005f8a <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005eee:	68fb      	ldr	r3, [r7, #12]
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	4618      	mov	r0, r3
 8005ef4:	f000 ffcc 	bl	8006e90 <xTaskPriorityDisinherit>
 8005ef8:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005efa:	68fb      	ldr	r3, [r7, #12]
 8005efc:	2200      	movs	r2, #0
 8005efe:	609a      	str	r2, [r3, #8]
 8005f00:	e043      	b.n	8005f8a <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d119      	bne.n	8005f3c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005f08:	68fb      	ldr	r3, [r7, #12]
 8005f0a:	6858      	ldr	r0, [r3, #4]
 8005f0c:	68fb      	ldr	r3, [r7, #12]
 8005f0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f10:	461a      	mov	r2, r3
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	f002 fb03 	bl	800851e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005f18:	68fb      	ldr	r3, [r7, #12]
 8005f1a:	685a      	ldr	r2, [r3, #4]
 8005f1c:	68fb      	ldr	r3, [r7, #12]
 8005f1e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f20:	441a      	add	r2, r3
 8005f22:	68fb      	ldr	r3, [r7, #12]
 8005f24:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f26:	68fb      	ldr	r3, [r7, #12]
 8005f28:	685a      	ldr	r2, [r3, #4]
 8005f2a:	68fb      	ldr	r3, [r7, #12]
 8005f2c:	689b      	ldr	r3, [r3, #8]
 8005f2e:	429a      	cmp	r2, r3
 8005f30:	d32b      	bcc.n	8005f8a <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005f32:	68fb      	ldr	r3, [r7, #12]
 8005f34:	681a      	ldr	r2, [r3, #0]
 8005f36:	68fb      	ldr	r3, [r7, #12]
 8005f38:	605a      	str	r2, [r3, #4]
 8005f3a:	e026      	b.n	8005f8a <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005f3c:	68fb      	ldr	r3, [r7, #12]
 8005f3e:	68d8      	ldr	r0, [r3, #12]
 8005f40:	68fb      	ldr	r3, [r7, #12]
 8005f42:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f44:	461a      	mov	r2, r3
 8005f46:	68b9      	ldr	r1, [r7, #8]
 8005f48:	f002 fae9 	bl	800851e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	68da      	ldr	r2, [r3, #12]
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f54:	425b      	negs	r3, r3
 8005f56:	441a      	add	r2, r3
 8005f58:	68fb      	ldr	r3, [r7, #12]
 8005f5a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005f5c:	68fb      	ldr	r3, [r7, #12]
 8005f5e:	68da      	ldr	r2, [r3, #12]
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	681b      	ldr	r3, [r3, #0]
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d207      	bcs.n	8005f78 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005f68:	68fb      	ldr	r3, [r7, #12]
 8005f6a:	689a      	ldr	r2, [r3, #8]
 8005f6c:	68fb      	ldr	r3, [r7, #12]
 8005f6e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005f70:	425b      	negs	r3, r3
 8005f72:	441a      	add	r2, r3
 8005f74:	68fb      	ldr	r3, [r7, #12]
 8005f76:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	2b02      	cmp	r3, #2
 8005f7c:	d105      	bne.n	8005f8a <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f7e:	693b      	ldr	r3, [r7, #16]
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d002      	beq.n	8005f8a <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005f84:	693b      	ldr	r3, [r7, #16]
 8005f86:	3b01      	subs	r3, #1
 8005f88:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005f8a:	693b      	ldr	r3, [r7, #16]
 8005f8c:	1c5a      	adds	r2, r3, #1
 8005f8e:	68fb      	ldr	r3, [r7, #12]
 8005f90:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005f92:	697b      	ldr	r3, [r7, #20]
}
 8005f94:	4618      	mov	r0, r3
 8005f96:	3718      	adds	r7, #24
 8005f98:	46bd      	mov	sp, r7
 8005f9a:	bd80      	pop	{r7, pc}

08005f9c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005f9c:	b580      	push	{r7, lr}
 8005f9e:	b082      	sub	sp, #8
 8005fa0:	af00      	add	r7, sp, #0
 8005fa2:	6078      	str	r0, [r7, #4]
 8005fa4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d018      	beq.n	8005fe0 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	68da      	ldr	r2, [r3, #12]
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fb6:	441a      	add	r2, r3
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68da      	ldr	r2, [r3, #12]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	689b      	ldr	r3, [r3, #8]
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d303      	bcc.n	8005fd0 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	681a      	ldr	r2, [r3, #0]
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fd0:	687b      	ldr	r3, [r7, #4]
 8005fd2:	68d9      	ldr	r1, [r3, #12]
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fd8:	461a      	mov	r2, r3
 8005fda:	6838      	ldr	r0, [r7, #0]
 8005fdc:	f002 fa9f 	bl	800851e <memcpy>
	}
}
 8005fe0:	bf00      	nop
 8005fe2:	3708      	adds	r7, #8
 8005fe4:	46bd      	mov	sp, r7
 8005fe6:	bd80      	pop	{r7, pc}

08005fe8 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b084      	sub	sp, #16
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005ff0:	f001 fc9a 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ffa:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ffc:	e011      	b.n	8006022 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006002:	2b00      	cmp	r3, #0
 8006004:	d012      	beq.n	800602c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	3324      	adds	r3, #36	@ 0x24
 800600a:	4618      	mov	r0, r3
 800600c:	f000 fd5c 	bl	8006ac8 <xTaskRemoveFromEventList>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006016:	f000 fe35 	bl	8006c84 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800601a:	7bfb      	ldrb	r3, [r7, #15]
 800601c:	3b01      	subs	r3, #1
 800601e:	b2db      	uxtb	r3, r3
 8006020:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006022:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006026:	2b00      	cmp	r3, #0
 8006028:	dce9      	bgt.n	8005ffe <prvUnlockQueue+0x16>
 800602a:	e000      	b.n	800602e <prvUnlockQueue+0x46>
					break;
 800602c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	22ff      	movs	r2, #255	@ 0xff
 8006032:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006036:	f001 fca9 	bl	800798c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800603a:	f001 fc75 	bl	8007928 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006044:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006046:	e011      	b.n	800606c <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006048:	687b      	ldr	r3, [r7, #4]
 800604a:	691b      	ldr	r3, [r3, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d012      	beq.n	8006076 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006050:	687b      	ldr	r3, [r7, #4]
 8006052:	3310      	adds	r3, #16
 8006054:	4618      	mov	r0, r3
 8006056:	f000 fd37 	bl	8006ac8 <xTaskRemoveFromEventList>
 800605a:	4603      	mov	r3, r0
 800605c:	2b00      	cmp	r3, #0
 800605e:	d001      	beq.n	8006064 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8006060:	f000 fe10 	bl	8006c84 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006064:	7bbb      	ldrb	r3, [r7, #14]
 8006066:	3b01      	subs	r3, #1
 8006068:	b2db      	uxtb	r3, r3
 800606a:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800606c:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8006070:	2b00      	cmp	r3, #0
 8006072:	dce9      	bgt.n	8006048 <prvUnlockQueue+0x60>
 8006074:	e000      	b.n	8006078 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006076:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	22ff      	movs	r2, #255	@ 0xff
 800607c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8006080:	f001 fc84 	bl	800798c <vPortExitCritical>
}
 8006084:	bf00      	nop
 8006086:	3710      	adds	r7, #16
 8006088:	46bd      	mov	sp, r7
 800608a:	bd80      	pop	{r7, pc}

0800608c <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800608c:	b580      	push	{r7, lr}
 800608e:	b084      	sub	sp, #16
 8006090:	af00      	add	r7, sp, #0
 8006092:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006094:	f001 fc48 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800609c:	2b00      	cmp	r3, #0
 800609e:	d102      	bne.n	80060a6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80060a0:	2301      	movs	r3, #1
 80060a2:	60fb      	str	r3, [r7, #12]
 80060a4:	e001      	b.n	80060aa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80060a6:	2300      	movs	r3, #0
 80060a8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060aa:	f001 fc6f 	bl	800798c <vPortExitCritical>

	return xReturn;
 80060ae:	68fb      	ldr	r3, [r7, #12]
}
 80060b0:	4618      	mov	r0, r3
 80060b2:	3710      	adds	r7, #16
 80060b4:	46bd      	mov	sp, r7
 80060b6:	bd80      	pop	{r7, pc}

080060b8 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80060b8:	b580      	push	{r7, lr}
 80060ba:	b084      	sub	sp, #16
 80060bc:	af00      	add	r7, sp, #0
 80060be:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80060c0:	f001 fc32 	bl	8007928 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060c8:	687b      	ldr	r3, [r7, #4]
 80060ca:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060cc:	429a      	cmp	r2, r3
 80060ce:	d102      	bne.n	80060d6 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80060d0:	2301      	movs	r3, #1
 80060d2:	60fb      	str	r3, [r7, #12]
 80060d4:	e001      	b.n	80060da <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80060d6:	2300      	movs	r3, #0
 80060d8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80060da:	f001 fc57 	bl	800798c <vPortExitCritical>

	return xReturn;
 80060de:	68fb      	ldr	r3, [r7, #12]
}
 80060e0:	4618      	mov	r0, r3
 80060e2:	3710      	adds	r7, #16
 80060e4:	46bd      	mov	sp, r7
 80060e6:	bd80      	pop	{r7, pc}

080060e8 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80060e8:	b480      	push	{r7}
 80060ea:	b085      	sub	sp, #20
 80060ec:	af00      	add	r7, sp, #0
 80060ee:	6078      	str	r0, [r7, #4]
 80060f0:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80060f2:	2300      	movs	r3, #0
 80060f4:	60fb      	str	r3, [r7, #12]
 80060f6:	e014      	b.n	8006122 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80060f8:	4a0f      	ldr	r2, [pc, #60]	@ (8006138 <vQueueAddToRegistry+0x50>)
 80060fa:	68fb      	ldr	r3, [r7, #12]
 80060fc:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006100:	2b00      	cmp	r3, #0
 8006102:	d10b      	bne.n	800611c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006104:	490c      	ldr	r1, [pc, #48]	@ (8006138 <vQueueAddToRegistry+0x50>)
 8006106:	68fb      	ldr	r3, [r7, #12]
 8006108:	683a      	ldr	r2, [r7, #0]
 800610a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800610e:	4a0a      	ldr	r2, [pc, #40]	@ (8006138 <vQueueAddToRegistry+0x50>)
 8006110:	68fb      	ldr	r3, [r7, #12]
 8006112:	00db      	lsls	r3, r3, #3
 8006114:	4413      	add	r3, r2
 8006116:	687a      	ldr	r2, [r7, #4]
 8006118:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800611a:	e006      	b.n	800612a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800611c:	68fb      	ldr	r3, [r7, #12]
 800611e:	3301      	adds	r3, #1
 8006120:	60fb      	str	r3, [r7, #12]
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	2b07      	cmp	r3, #7
 8006126:	d9e7      	bls.n	80060f8 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006128:	bf00      	nop
 800612a:	bf00      	nop
 800612c:	3714      	adds	r7, #20
 800612e:	46bd      	mov	sp, r7
 8006130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006134:	4770      	bx	lr
 8006136:	bf00      	nop
 8006138:	200009c4 	.word	0x200009c4

0800613c <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800613c:	b580      	push	{r7, lr}
 800613e:	b086      	sub	sp, #24
 8006140:	af00      	add	r7, sp, #0
 8006142:	60f8      	str	r0, [r7, #12]
 8006144:	60b9      	str	r1, [r7, #8]
 8006146:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006148:	68fb      	ldr	r3, [r7, #12]
 800614a:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800614c:	f001 fbec 	bl	8007928 <vPortEnterCritical>
 8006150:	697b      	ldr	r3, [r7, #20]
 8006152:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006156:	b25b      	sxtb	r3, r3
 8006158:	f1b3 3fff 	cmp.w	r3, #4294967295
 800615c:	d103      	bne.n	8006166 <vQueueWaitForMessageRestricted+0x2a>
 800615e:	697b      	ldr	r3, [r7, #20]
 8006160:	2200      	movs	r2, #0
 8006162:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800616c:	b25b      	sxtb	r3, r3
 800616e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006172:	d103      	bne.n	800617c <vQueueWaitForMessageRestricted+0x40>
 8006174:	697b      	ldr	r3, [r7, #20]
 8006176:	2200      	movs	r2, #0
 8006178:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800617c:	f001 fc06 	bl	800798c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8006180:	697b      	ldr	r3, [r7, #20]
 8006182:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006184:	2b00      	cmp	r3, #0
 8006186:	d106      	bne.n	8006196 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	3324      	adds	r3, #36	@ 0x24
 800618c:	687a      	ldr	r2, [r7, #4]
 800618e:	68b9      	ldr	r1, [r7, #8]
 8006190:	4618      	mov	r0, r3
 8006192:	f000 fc6d 	bl	8006a70 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006196:	6978      	ldr	r0, [r7, #20]
 8006198:	f7ff ff26 	bl	8005fe8 <prvUnlockQueue>
	}
 800619c:	bf00      	nop
 800619e:	3718      	adds	r7, #24
 80061a0:	46bd      	mov	sp, r7
 80061a2:	bd80      	pop	{r7, pc}

080061a4 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80061a4:	b580      	push	{r7, lr}
 80061a6:	b08e      	sub	sp, #56	@ 0x38
 80061a8:	af04      	add	r7, sp, #16
 80061aa:	60f8      	str	r0, [r7, #12]
 80061ac:	60b9      	str	r1, [r7, #8]
 80061ae:	607a      	str	r2, [r7, #4]
 80061b0:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80061b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d10b      	bne.n	80061d0 <xTaskCreateStatic+0x2c>
	__asm volatile
 80061b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061bc:	f383 8811 	msr	BASEPRI, r3
 80061c0:	f3bf 8f6f 	isb	sy
 80061c4:	f3bf 8f4f 	dsb	sy
 80061c8:	623b      	str	r3, [r7, #32]
}
 80061ca:	bf00      	nop
 80061cc:	bf00      	nop
 80061ce:	e7fd      	b.n	80061cc <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80061d0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80061d2:	2b00      	cmp	r3, #0
 80061d4:	d10b      	bne.n	80061ee <xTaskCreateStatic+0x4a>
	__asm volatile
 80061d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061da:	f383 8811 	msr	BASEPRI, r3
 80061de:	f3bf 8f6f 	isb	sy
 80061e2:	f3bf 8f4f 	dsb	sy
 80061e6:	61fb      	str	r3, [r7, #28]
}
 80061e8:	bf00      	nop
 80061ea:	bf00      	nop
 80061ec:	e7fd      	b.n	80061ea <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80061ee:	23a8      	movs	r3, #168	@ 0xa8
 80061f0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80061f2:	693b      	ldr	r3, [r7, #16]
 80061f4:	2ba8      	cmp	r3, #168	@ 0xa8
 80061f6:	d00b      	beq.n	8006210 <xTaskCreateStatic+0x6c>
	__asm volatile
 80061f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061fc:	f383 8811 	msr	BASEPRI, r3
 8006200:	f3bf 8f6f 	isb	sy
 8006204:	f3bf 8f4f 	dsb	sy
 8006208:	61bb      	str	r3, [r7, #24]
}
 800620a:	bf00      	nop
 800620c:	bf00      	nop
 800620e:	e7fd      	b.n	800620c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006210:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006212:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01e      	beq.n	8006256 <xTaskCreateStatic+0xb2>
 8006218:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800621a:	2b00      	cmp	r3, #0
 800621c:	d01b      	beq.n	8006256 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800621e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006220:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006222:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006224:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006226:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006228:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800622a:	2202      	movs	r2, #2
 800622c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8006230:	2300      	movs	r3, #0
 8006232:	9303      	str	r3, [sp, #12]
 8006234:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006236:	9302      	str	r3, [sp, #8]
 8006238:	f107 0314 	add.w	r3, r7, #20
 800623c:	9301      	str	r3, [sp, #4]
 800623e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006240:	9300      	str	r3, [sp, #0]
 8006242:	683b      	ldr	r3, [r7, #0]
 8006244:	687a      	ldr	r2, [r7, #4]
 8006246:	68b9      	ldr	r1, [r7, #8]
 8006248:	68f8      	ldr	r0, [r7, #12]
 800624a:	f000 f851 	bl	80062f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800624e:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8006250:	f000 f8f6 	bl	8006440 <prvAddNewTaskToReadyList>
 8006254:	e001      	b.n	800625a <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006256:	2300      	movs	r3, #0
 8006258:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800625a:	697b      	ldr	r3, [r7, #20]
	}
 800625c:	4618      	mov	r0, r3
 800625e:	3728      	adds	r7, #40	@ 0x28
 8006260:	46bd      	mov	sp, r7
 8006262:	bd80      	pop	{r7, pc}

08006264 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006264:	b580      	push	{r7, lr}
 8006266:	b08c      	sub	sp, #48	@ 0x30
 8006268:	af04      	add	r7, sp, #16
 800626a:	60f8      	str	r0, [r7, #12]
 800626c:	60b9      	str	r1, [r7, #8]
 800626e:	603b      	str	r3, [r7, #0]
 8006270:	4613      	mov	r3, r2
 8006272:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006274:	88fb      	ldrh	r3, [r7, #6]
 8006276:	009b      	lsls	r3, r3, #2
 8006278:	4618      	mov	r0, r3
 800627a:	f001 fc77 	bl	8007b6c <pvPortMalloc>
 800627e:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8006280:	697b      	ldr	r3, [r7, #20]
 8006282:	2b00      	cmp	r3, #0
 8006284:	d00e      	beq.n	80062a4 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006286:	20a8      	movs	r0, #168	@ 0xa8
 8006288:	f001 fc70 	bl	8007b6c <pvPortMalloc>
 800628c:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800628e:	69fb      	ldr	r3, [r7, #28]
 8006290:	2b00      	cmp	r3, #0
 8006292:	d003      	beq.n	800629c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006294:	69fb      	ldr	r3, [r7, #28]
 8006296:	697a      	ldr	r2, [r7, #20]
 8006298:	631a      	str	r2, [r3, #48]	@ 0x30
 800629a:	e005      	b.n	80062a8 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800629c:	6978      	ldr	r0, [r7, #20]
 800629e:	f001 fd33 	bl	8007d08 <vPortFree>
 80062a2:	e001      	b.n	80062a8 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80062a4:	2300      	movs	r3, #0
 80062a6:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80062a8:	69fb      	ldr	r3, [r7, #28]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	d017      	beq.n	80062de <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80062ae:	69fb      	ldr	r3, [r7, #28]
 80062b0:	2200      	movs	r2, #0
 80062b2:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80062b6:	88fa      	ldrh	r2, [r7, #6]
 80062b8:	2300      	movs	r3, #0
 80062ba:	9303      	str	r3, [sp, #12]
 80062bc:	69fb      	ldr	r3, [r7, #28]
 80062be:	9302      	str	r3, [sp, #8]
 80062c0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80062c2:	9301      	str	r3, [sp, #4]
 80062c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062c6:	9300      	str	r3, [sp, #0]
 80062c8:	683b      	ldr	r3, [r7, #0]
 80062ca:	68b9      	ldr	r1, [r7, #8]
 80062cc:	68f8      	ldr	r0, [r7, #12]
 80062ce:	f000 f80f 	bl	80062f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80062d2:	69f8      	ldr	r0, [r7, #28]
 80062d4:	f000 f8b4 	bl	8006440 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80062d8:	2301      	movs	r3, #1
 80062da:	61bb      	str	r3, [r7, #24]
 80062dc:	e002      	b.n	80062e4 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80062de:	f04f 33ff 	mov.w	r3, #4294967295
 80062e2:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80062e4:	69bb      	ldr	r3, [r7, #24]
	}
 80062e6:	4618      	mov	r0, r3
 80062e8:	3720      	adds	r7, #32
 80062ea:	46bd      	mov	sp, r7
 80062ec:	bd80      	pop	{r7, pc}
	...

080062f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80062f0:	b580      	push	{r7, lr}
 80062f2:	b088      	sub	sp, #32
 80062f4:	af00      	add	r7, sp, #0
 80062f6:	60f8      	str	r0, [r7, #12]
 80062f8:	60b9      	str	r1, [r7, #8]
 80062fa:	607a      	str	r2, [r7, #4]
 80062fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80062fe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006300:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	009b      	lsls	r3, r3, #2
 8006306:	461a      	mov	r2, r3
 8006308:	21a5      	movs	r1, #165	@ 0xa5
 800630a:	f002 f82f 	bl	800836c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800630e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006310:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006318:	3b01      	subs	r3, #1
 800631a:	009b      	lsls	r3, r3, #2
 800631c:	4413      	add	r3, r2
 800631e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006320:	69bb      	ldr	r3, [r7, #24]
 8006322:	f023 0307 	bic.w	r3, r3, #7
 8006326:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006328:	69bb      	ldr	r3, [r7, #24]
 800632a:	f003 0307 	and.w	r3, r3, #7
 800632e:	2b00      	cmp	r3, #0
 8006330:	d00b      	beq.n	800634a <prvInitialiseNewTask+0x5a>
	__asm volatile
 8006332:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006336:	f383 8811 	msr	BASEPRI, r3
 800633a:	f3bf 8f6f 	isb	sy
 800633e:	f3bf 8f4f 	dsb	sy
 8006342:	617b      	str	r3, [r7, #20]
}
 8006344:	bf00      	nop
 8006346:	bf00      	nop
 8006348:	e7fd      	b.n	8006346 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800634a:	68bb      	ldr	r3, [r7, #8]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d01f      	beq.n	8006390 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006350:	2300      	movs	r3, #0
 8006352:	61fb      	str	r3, [r7, #28]
 8006354:	e012      	b.n	800637c <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006356:	68ba      	ldr	r2, [r7, #8]
 8006358:	69fb      	ldr	r3, [r7, #28]
 800635a:	4413      	add	r3, r2
 800635c:	7819      	ldrb	r1, [r3, #0]
 800635e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	4413      	add	r3, r2
 8006364:	3334      	adds	r3, #52	@ 0x34
 8006366:	460a      	mov	r2, r1
 8006368:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800636a:	68ba      	ldr	r2, [r7, #8]
 800636c:	69fb      	ldr	r3, [r7, #28]
 800636e:	4413      	add	r3, r2
 8006370:	781b      	ldrb	r3, [r3, #0]
 8006372:	2b00      	cmp	r3, #0
 8006374:	d006      	beq.n	8006384 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006376:	69fb      	ldr	r3, [r7, #28]
 8006378:	3301      	adds	r3, #1
 800637a:	61fb      	str	r3, [r7, #28]
 800637c:	69fb      	ldr	r3, [r7, #28]
 800637e:	2b0f      	cmp	r3, #15
 8006380:	d9e9      	bls.n	8006356 <prvInitialiseNewTask+0x66>
 8006382:	e000      	b.n	8006386 <prvInitialiseNewTask+0x96>
			{
				break;
 8006384:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006386:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006388:	2200      	movs	r2, #0
 800638a:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800638e:	e003      	b.n	8006398 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006390:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006392:	2200      	movs	r2, #0
 8006394:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006398:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800639a:	2b37      	cmp	r3, #55	@ 0x37
 800639c:	d901      	bls.n	80063a2 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800639e:	2337      	movs	r3, #55	@ 0x37
 80063a0:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80063a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063a4:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063a6:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80063a8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063aa:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80063ac:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80063ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b0:	2200      	movs	r2, #0
 80063b2:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80063b4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063b6:	3304      	adds	r3, #4
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7ff f929 	bl	8005610 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80063be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063c0:	3318      	adds	r3, #24
 80063c2:	4618      	mov	r0, r3
 80063c4:	f7ff f924 	bl	8005610 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80063c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063cc:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80063ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80063d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80063d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063d6:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80063d8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063da:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80063dc:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80063de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e0:	2200      	movs	r2, #0
 80063e2:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80063e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063e8:	2200      	movs	r2, #0
 80063ea:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80063ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063f0:	3354      	adds	r3, #84	@ 0x54
 80063f2:	224c      	movs	r2, #76	@ 0x4c
 80063f4:	2100      	movs	r1, #0
 80063f6:	4618      	mov	r0, r3
 80063f8:	f001 ffb8 	bl	800836c <memset>
 80063fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063fe:	4a0d      	ldr	r2, [pc, #52]	@ (8006434 <prvInitialiseNewTask+0x144>)
 8006400:	659a      	str	r2, [r3, #88]	@ 0x58
 8006402:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006404:	4a0c      	ldr	r2, [pc, #48]	@ (8006438 <prvInitialiseNewTask+0x148>)
 8006406:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006408:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800640a:	4a0c      	ldr	r2, [pc, #48]	@ (800643c <prvInitialiseNewTask+0x14c>)
 800640c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800640e:	683a      	ldr	r2, [r7, #0]
 8006410:	68f9      	ldr	r1, [r7, #12]
 8006412:	69b8      	ldr	r0, [r7, #24]
 8006414:	f001 f95a 	bl	80076cc <pxPortInitialiseStack>
 8006418:	4602      	mov	r2, r0
 800641a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800641c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800641e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006420:	2b00      	cmp	r3, #0
 8006422:	d002      	beq.n	800642a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006424:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006426:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006428:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800642a:	bf00      	nop
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bd80      	pop	{r7, pc}
 8006432:	bf00      	nop
 8006434:	20004c58 	.word	0x20004c58
 8006438:	20004cc0 	.word	0x20004cc0
 800643c:	20004d28 	.word	0x20004d28

08006440 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8006440:	b580      	push	{r7, lr}
 8006442:	b082      	sub	sp, #8
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006448:	f001 fa6e 	bl	8007928 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800644c:	4b2d      	ldr	r3, [pc, #180]	@ (8006504 <prvAddNewTaskToReadyList+0xc4>)
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	3301      	adds	r3, #1
 8006452:	4a2c      	ldr	r2, [pc, #176]	@ (8006504 <prvAddNewTaskToReadyList+0xc4>)
 8006454:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006456:	4b2c      	ldr	r3, [pc, #176]	@ (8006508 <prvAddNewTaskToReadyList+0xc8>)
 8006458:	681b      	ldr	r3, [r3, #0]
 800645a:	2b00      	cmp	r3, #0
 800645c:	d109      	bne.n	8006472 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800645e:	4a2a      	ldr	r2, [pc, #168]	@ (8006508 <prvAddNewTaskToReadyList+0xc8>)
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006464:	4b27      	ldr	r3, [pc, #156]	@ (8006504 <prvAddNewTaskToReadyList+0xc4>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	2b01      	cmp	r3, #1
 800646a:	d110      	bne.n	800648e <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800646c:	f000 fc2e 	bl	8006ccc <prvInitialiseTaskLists>
 8006470:	e00d      	b.n	800648e <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8006472:	4b26      	ldr	r3, [pc, #152]	@ (800650c <prvAddNewTaskToReadyList+0xcc>)
 8006474:	681b      	ldr	r3, [r3, #0]
 8006476:	2b00      	cmp	r3, #0
 8006478:	d109      	bne.n	800648e <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800647a:	4b23      	ldr	r3, [pc, #140]	@ (8006508 <prvAddNewTaskToReadyList+0xc8>)
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006484:	429a      	cmp	r2, r3
 8006486:	d802      	bhi.n	800648e <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006488:	4a1f      	ldr	r2, [pc, #124]	@ (8006508 <prvAddNewTaskToReadyList+0xc8>)
 800648a:	687b      	ldr	r3, [r7, #4]
 800648c:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800648e:	4b20      	ldr	r3, [pc, #128]	@ (8006510 <prvAddNewTaskToReadyList+0xd0>)
 8006490:	681b      	ldr	r3, [r3, #0]
 8006492:	3301      	adds	r3, #1
 8006494:	4a1e      	ldr	r2, [pc, #120]	@ (8006510 <prvAddNewTaskToReadyList+0xd0>)
 8006496:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006498:	4b1d      	ldr	r3, [pc, #116]	@ (8006510 <prvAddNewTaskToReadyList+0xd0>)
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064a4:	4b1b      	ldr	r3, [pc, #108]	@ (8006514 <prvAddNewTaskToReadyList+0xd4>)
 80064a6:	681b      	ldr	r3, [r3, #0]
 80064a8:	429a      	cmp	r2, r3
 80064aa:	d903      	bls.n	80064b4 <prvAddNewTaskToReadyList+0x74>
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064b0:	4a18      	ldr	r2, [pc, #96]	@ (8006514 <prvAddNewTaskToReadyList+0xd4>)
 80064b2:	6013      	str	r3, [r2, #0]
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064b8:	4613      	mov	r3, r2
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	009b      	lsls	r3, r3, #2
 80064c0:	4a15      	ldr	r2, [pc, #84]	@ (8006518 <prvAddNewTaskToReadyList+0xd8>)
 80064c2:	441a      	add	r2, r3
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	3304      	adds	r3, #4
 80064c8:	4619      	mov	r1, r3
 80064ca:	4610      	mov	r0, r2
 80064cc:	f7ff f8ad 	bl	800562a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 80064d0:	f001 fa5c 	bl	800798c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80064d4:	4b0d      	ldr	r3, [pc, #52]	@ (800650c <prvAddNewTaskToReadyList+0xcc>)
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	2b00      	cmp	r3, #0
 80064da:	d00e      	beq.n	80064fa <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80064dc:	4b0a      	ldr	r3, [pc, #40]	@ (8006508 <prvAddNewTaskToReadyList+0xc8>)
 80064de:	681b      	ldr	r3, [r3, #0]
 80064e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80064e6:	429a      	cmp	r2, r3
 80064e8:	d207      	bcs.n	80064fa <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80064ea:	4b0c      	ldr	r3, [pc, #48]	@ (800651c <prvAddNewTaskToReadyList+0xdc>)
 80064ec:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80064f0:	601a      	str	r2, [r3, #0]
 80064f2:	f3bf 8f4f 	dsb	sy
 80064f6:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064fa:	bf00      	nop
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
 8006502:	bf00      	nop
 8006504:	20000ed8 	.word	0x20000ed8
 8006508:	20000a04 	.word	0x20000a04
 800650c:	20000ee4 	.word	0x20000ee4
 8006510:	20000ef4 	.word	0x20000ef4
 8006514:	20000ee0 	.word	0x20000ee0
 8006518:	20000a08 	.word	0x20000a08
 800651c:	e000ed04 	.word	0xe000ed04

08006520 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006520:	b580      	push	{r7, lr}
 8006522:	b084      	sub	sp, #16
 8006524:	af00      	add	r7, sp, #0
 8006526:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006528:	2300      	movs	r3, #0
 800652a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	2b00      	cmp	r3, #0
 8006530:	d018      	beq.n	8006564 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8006532:	4b14      	ldr	r3, [pc, #80]	@ (8006584 <vTaskDelay+0x64>)
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	2b00      	cmp	r3, #0
 8006538:	d00b      	beq.n	8006552 <vTaskDelay+0x32>
	__asm volatile
 800653a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800653e:	f383 8811 	msr	BASEPRI, r3
 8006542:	f3bf 8f6f 	isb	sy
 8006546:	f3bf 8f4f 	dsb	sy
 800654a:	60bb      	str	r3, [r7, #8]
}
 800654c:	bf00      	nop
 800654e:	bf00      	nop
 8006550:	e7fd      	b.n	800654e <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8006552:	f000 f88b 	bl	800666c <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006556:	2100      	movs	r1, #0
 8006558:	6878      	ldr	r0, [r7, #4]
 800655a:	f000 fd09 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800655e:	f000 f893 	bl	8006688 <xTaskResumeAll>
 8006562:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	2b00      	cmp	r3, #0
 8006568:	d107      	bne.n	800657a <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 800656a:	4b07      	ldr	r3, [pc, #28]	@ (8006588 <vTaskDelay+0x68>)
 800656c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006570:	601a      	str	r2, [r3, #0]
 8006572:	f3bf 8f4f 	dsb	sy
 8006576:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800657a:	bf00      	nop
 800657c:	3710      	adds	r7, #16
 800657e:	46bd      	mov	sp, r7
 8006580:	bd80      	pop	{r7, pc}
 8006582:	bf00      	nop
 8006584:	20000f00 	.word	0x20000f00
 8006588:	e000ed04 	.word	0xe000ed04

0800658c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800658c:	b580      	push	{r7, lr}
 800658e:	b08a      	sub	sp, #40	@ 0x28
 8006590:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006592:	2300      	movs	r3, #0
 8006594:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006596:	2300      	movs	r3, #0
 8006598:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800659a:	463a      	mov	r2, r7
 800659c:	1d39      	adds	r1, r7, #4
 800659e:	f107 0308 	add.w	r3, r7, #8
 80065a2:	4618      	mov	r0, r3
 80065a4:	f7fe ffe0 	bl	8005568 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 80065a8:	6839      	ldr	r1, [r7, #0]
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	68ba      	ldr	r2, [r7, #8]
 80065ae:	9202      	str	r2, [sp, #8]
 80065b0:	9301      	str	r3, [sp, #4]
 80065b2:	2300      	movs	r3, #0
 80065b4:	9300      	str	r3, [sp, #0]
 80065b6:	2300      	movs	r3, #0
 80065b8:	460a      	mov	r2, r1
 80065ba:	4924      	ldr	r1, [pc, #144]	@ (800664c <vTaskStartScheduler+0xc0>)
 80065bc:	4824      	ldr	r0, [pc, #144]	@ (8006650 <vTaskStartScheduler+0xc4>)
 80065be:	f7ff fdf1 	bl	80061a4 <xTaskCreateStatic>
 80065c2:	4603      	mov	r3, r0
 80065c4:	4a23      	ldr	r2, [pc, #140]	@ (8006654 <vTaskStartScheduler+0xc8>)
 80065c6:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80065c8:	4b22      	ldr	r3, [pc, #136]	@ (8006654 <vTaskStartScheduler+0xc8>)
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	2b00      	cmp	r3, #0
 80065ce:	d002      	beq.n	80065d6 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80065d0:	2301      	movs	r3, #1
 80065d2:	617b      	str	r3, [r7, #20]
 80065d4:	e001      	b.n	80065da <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80065d6:	2300      	movs	r3, #0
 80065d8:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	2b01      	cmp	r3, #1
 80065de:	d102      	bne.n	80065e6 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80065e0:	f000 fd1a 	bl	8007018 <xTimerCreateTimerTask>
 80065e4:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80065e6:	697b      	ldr	r3, [r7, #20]
 80065e8:	2b01      	cmp	r3, #1
 80065ea:	d11b      	bne.n	8006624 <vTaskStartScheduler+0x98>
	__asm volatile
 80065ec:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065f0:	f383 8811 	msr	BASEPRI, r3
 80065f4:	f3bf 8f6f 	isb	sy
 80065f8:	f3bf 8f4f 	dsb	sy
 80065fc:	613b      	str	r3, [r7, #16]
}
 80065fe:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006600:	4b15      	ldr	r3, [pc, #84]	@ (8006658 <vTaskStartScheduler+0xcc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	3354      	adds	r3, #84	@ 0x54
 8006606:	4a15      	ldr	r2, [pc, #84]	@ (800665c <vTaskStartScheduler+0xd0>)
 8006608:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800660a:	4b15      	ldr	r3, [pc, #84]	@ (8006660 <vTaskStartScheduler+0xd4>)
 800660c:	f04f 32ff 	mov.w	r2, #4294967295
 8006610:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006612:	4b14      	ldr	r3, [pc, #80]	@ (8006664 <vTaskStartScheduler+0xd8>)
 8006614:	2201      	movs	r2, #1
 8006616:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006618:	4b13      	ldr	r3, [pc, #76]	@ (8006668 <vTaskStartScheduler+0xdc>)
 800661a:	2200      	movs	r2, #0
 800661c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800661e:	f001 f8df 	bl	80077e0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006622:	e00f      	b.n	8006644 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	f1b3 3fff 	cmp.w	r3, #4294967295
 800662a:	d10b      	bne.n	8006644 <vTaskStartScheduler+0xb8>
	__asm volatile
 800662c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006630:	f383 8811 	msr	BASEPRI, r3
 8006634:	f3bf 8f6f 	isb	sy
 8006638:	f3bf 8f4f 	dsb	sy
 800663c:	60fb      	str	r3, [r7, #12]
}
 800663e:	bf00      	nop
 8006640:	bf00      	nop
 8006642:	e7fd      	b.n	8006640 <vTaskStartScheduler+0xb4>
}
 8006644:	bf00      	nop
 8006646:	3718      	adds	r7, #24
 8006648:	46bd      	mov	sp, r7
 800664a:	bd80      	pop	{r7, pc}
 800664c:	08009288 	.word	0x08009288
 8006650:	08006c9d 	.word	0x08006c9d
 8006654:	20000efc 	.word	0x20000efc
 8006658:	20000a04 	.word	0x20000a04
 800665c:	2000001c 	.word	0x2000001c
 8006660:	20000ef8 	.word	0x20000ef8
 8006664:	20000ee4 	.word	0x20000ee4
 8006668:	20000edc 	.word	0x20000edc

0800666c <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800666c:	b480      	push	{r7}
 800666e:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006670:	4b04      	ldr	r3, [pc, #16]	@ (8006684 <vTaskSuspendAll+0x18>)
 8006672:	681b      	ldr	r3, [r3, #0]
 8006674:	3301      	adds	r3, #1
 8006676:	4a03      	ldr	r2, [pc, #12]	@ (8006684 <vTaskSuspendAll+0x18>)
 8006678:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 800667a:	bf00      	nop
 800667c:	46bd      	mov	sp, r7
 800667e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006682:	4770      	bx	lr
 8006684:	20000f00 	.word	0x20000f00

08006688 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006688:	b580      	push	{r7, lr}
 800668a:	b084      	sub	sp, #16
 800668c:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800668e:	2300      	movs	r3, #0
 8006690:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006692:	2300      	movs	r3, #0
 8006694:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006696:	4b42      	ldr	r3, [pc, #264]	@ (80067a0 <xTaskResumeAll+0x118>)
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	2b00      	cmp	r3, #0
 800669c:	d10b      	bne.n	80066b6 <xTaskResumeAll+0x2e>
	__asm volatile
 800669e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066a2:	f383 8811 	msr	BASEPRI, r3
 80066a6:	f3bf 8f6f 	isb	sy
 80066aa:	f3bf 8f4f 	dsb	sy
 80066ae:	603b      	str	r3, [r7, #0]
}
 80066b0:	bf00      	nop
 80066b2:	bf00      	nop
 80066b4:	e7fd      	b.n	80066b2 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80066b6:	f001 f937 	bl	8007928 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80066ba:	4b39      	ldr	r3, [pc, #228]	@ (80067a0 <xTaskResumeAll+0x118>)
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	3b01      	subs	r3, #1
 80066c0:	4a37      	ldr	r2, [pc, #220]	@ (80067a0 <xTaskResumeAll+0x118>)
 80066c2:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80066c4:	4b36      	ldr	r3, [pc, #216]	@ (80067a0 <xTaskResumeAll+0x118>)
 80066c6:	681b      	ldr	r3, [r3, #0]
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d162      	bne.n	8006792 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80066cc:	4b35      	ldr	r3, [pc, #212]	@ (80067a4 <xTaskResumeAll+0x11c>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d05e      	beq.n	8006792 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80066d4:	e02f      	b.n	8006736 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80066d6:	4b34      	ldr	r3, [pc, #208]	@ (80067a8 <xTaskResumeAll+0x120>)
 80066d8:	68db      	ldr	r3, [r3, #12]
 80066da:	68db      	ldr	r3, [r3, #12]
 80066dc:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	3318      	adds	r3, #24
 80066e2:	4618      	mov	r0, r3
 80066e4:	f7fe fffe 	bl	80056e4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	3304      	adds	r3, #4
 80066ec:	4618      	mov	r0, r3
 80066ee:	f7fe fff9 	bl	80056e4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80066f2:	68fb      	ldr	r3, [r7, #12]
 80066f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f6:	4b2d      	ldr	r3, [pc, #180]	@ (80067ac <xTaskResumeAll+0x124>)
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	429a      	cmp	r2, r3
 80066fc:	d903      	bls.n	8006706 <xTaskResumeAll+0x7e>
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006702:	4a2a      	ldr	r2, [pc, #168]	@ (80067ac <xTaskResumeAll+0x124>)
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	68fb      	ldr	r3, [r7, #12]
 8006708:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	009b      	lsls	r3, r3, #2
 8006712:	4a27      	ldr	r2, [pc, #156]	@ (80067b0 <xTaskResumeAll+0x128>)
 8006714:	441a      	add	r2, r3
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	3304      	adds	r3, #4
 800671a:	4619      	mov	r1, r3
 800671c:	4610      	mov	r0, r2
 800671e:	f7fe ff84 	bl	800562a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006726:	4b23      	ldr	r3, [pc, #140]	@ (80067b4 <xTaskResumeAll+0x12c>)
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800672c:	429a      	cmp	r2, r3
 800672e:	d302      	bcc.n	8006736 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006730:	4b21      	ldr	r3, [pc, #132]	@ (80067b8 <xTaskResumeAll+0x130>)
 8006732:	2201      	movs	r2, #1
 8006734:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006736:	4b1c      	ldr	r3, [pc, #112]	@ (80067a8 <xTaskResumeAll+0x120>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	2b00      	cmp	r3, #0
 800673c:	d1cb      	bne.n	80066d6 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800673e:	68fb      	ldr	r3, [r7, #12]
 8006740:	2b00      	cmp	r3, #0
 8006742:	d001      	beq.n	8006748 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006744:	f000 fb66 	bl	8006e14 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006748:	4b1c      	ldr	r3, [pc, #112]	@ (80067bc <xTaskResumeAll+0x134>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	2b00      	cmp	r3, #0
 8006752:	d010      	beq.n	8006776 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006754:	f000 f846 	bl	80067e4 <xTaskIncrementTick>
 8006758:	4603      	mov	r3, r0
 800675a:	2b00      	cmp	r3, #0
 800675c:	d002      	beq.n	8006764 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800675e:	4b16      	ldr	r3, [pc, #88]	@ (80067b8 <xTaskResumeAll+0x130>)
 8006760:	2201      	movs	r2, #1
 8006762:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006764:	687b      	ldr	r3, [r7, #4]
 8006766:	3b01      	subs	r3, #1
 8006768:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	2b00      	cmp	r3, #0
 800676e:	d1f1      	bne.n	8006754 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006770:	4b12      	ldr	r3, [pc, #72]	@ (80067bc <xTaskResumeAll+0x134>)
 8006772:	2200      	movs	r2, #0
 8006774:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006776:	4b10      	ldr	r3, [pc, #64]	@ (80067b8 <xTaskResumeAll+0x130>)
 8006778:	681b      	ldr	r3, [r3, #0]
 800677a:	2b00      	cmp	r3, #0
 800677c:	d009      	beq.n	8006792 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800677e:	2301      	movs	r3, #1
 8006780:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006782:	4b0f      	ldr	r3, [pc, #60]	@ (80067c0 <xTaskResumeAll+0x138>)
 8006784:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006788:	601a      	str	r2, [r3, #0]
 800678a:	f3bf 8f4f 	dsb	sy
 800678e:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006792:	f001 f8fb 	bl	800798c <vPortExitCritical>

	return xAlreadyYielded;
 8006796:	68bb      	ldr	r3, [r7, #8]
}
 8006798:	4618      	mov	r0, r3
 800679a:	3710      	adds	r7, #16
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	20000f00 	.word	0x20000f00
 80067a4:	20000ed8 	.word	0x20000ed8
 80067a8:	20000e98 	.word	0x20000e98
 80067ac:	20000ee0 	.word	0x20000ee0
 80067b0:	20000a08 	.word	0x20000a08
 80067b4:	20000a04 	.word	0x20000a04
 80067b8:	20000eec 	.word	0x20000eec
 80067bc:	20000ee8 	.word	0x20000ee8
 80067c0:	e000ed04 	.word	0xe000ed04

080067c4 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80067c4:	b480      	push	{r7}
 80067c6:	b083      	sub	sp, #12
 80067c8:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80067ca:	4b05      	ldr	r3, [pc, #20]	@ (80067e0 <xTaskGetTickCount+0x1c>)
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80067d0:	687b      	ldr	r3, [r7, #4]
}
 80067d2:	4618      	mov	r0, r3
 80067d4:	370c      	adds	r7, #12
 80067d6:	46bd      	mov	sp, r7
 80067d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067dc:	4770      	bx	lr
 80067de:	bf00      	nop
 80067e0:	20000edc 	.word	0x20000edc

080067e4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80067e4:	b580      	push	{r7, lr}
 80067e6:	b086      	sub	sp, #24
 80067e8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80067ea:	2300      	movs	r3, #0
 80067ec:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80067ee:	4b4f      	ldr	r3, [pc, #316]	@ (800692c <xTaskIncrementTick+0x148>)
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	f040 8090 	bne.w	8006918 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80067f8:	4b4d      	ldr	r3, [pc, #308]	@ (8006930 <xTaskIncrementTick+0x14c>)
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	3301      	adds	r3, #1
 80067fe:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006800:	4a4b      	ldr	r2, [pc, #300]	@ (8006930 <xTaskIncrementTick+0x14c>)
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006806:	693b      	ldr	r3, [r7, #16]
 8006808:	2b00      	cmp	r3, #0
 800680a:	d121      	bne.n	8006850 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 800680c:	4b49      	ldr	r3, [pc, #292]	@ (8006934 <xTaskIncrementTick+0x150>)
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	2b00      	cmp	r3, #0
 8006814:	d00b      	beq.n	800682e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006816:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800681a:	f383 8811 	msr	BASEPRI, r3
 800681e:	f3bf 8f6f 	isb	sy
 8006822:	f3bf 8f4f 	dsb	sy
 8006826:	603b      	str	r3, [r7, #0]
}
 8006828:	bf00      	nop
 800682a:	bf00      	nop
 800682c:	e7fd      	b.n	800682a <xTaskIncrementTick+0x46>
 800682e:	4b41      	ldr	r3, [pc, #260]	@ (8006934 <xTaskIncrementTick+0x150>)
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	60fb      	str	r3, [r7, #12]
 8006834:	4b40      	ldr	r3, [pc, #256]	@ (8006938 <xTaskIncrementTick+0x154>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	4a3e      	ldr	r2, [pc, #248]	@ (8006934 <xTaskIncrementTick+0x150>)
 800683a:	6013      	str	r3, [r2, #0]
 800683c:	4a3e      	ldr	r2, [pc, #248]	@ (8006938 <xTaskIncrementTick+0x154>)
 800683e:	68fb      	ldr	r3, [r7, #12]
 8006840:	6013      	str	r3, [r2, #0]
 8006842:	4b3e      	ldr	r3, [pc, #248]	@ (800693c <xTaskIncrementTick+0x158>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	3301      	adds	r3, #1
 8006848:	4a3c      	ldr	r2, [pc, #240]	@ (800693c <xTaskIncrementTick+0x158>)
 800684a:	6013      	str	r3, [r2, #0]
 800684c:	f000 fae2 	bl	8006e14 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006850:	4b3b      	ldr	r3, [pc, #236]	@ (8006940 <xTaskIncrementTick+0x15c>)
 8006852:	681b      	ldr	r3, [r3, #0]
 8006854:	693a      	ldr	r2, [r7, #16]
 8006856:	429a      	cmp	r2, r3
 8006858:	d349      	bcc.n	80068ee <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800685a:	4b36      	ldr	r3, [pc, #216]	@ (8006934 <xTaskIncrementTick+0x150>)
 800685c:	681b      	ldr	r3, [r3, #0]
 800685e:	681b      	ldr	r3, [r3, #0]
 8006860:	2b00      	cmp	r3, #0
 8006862:	d104      	bne.n	800686e <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006864:	4b36      	ldr	r3, [pc, #216]	@ (8006940 <xTaskIncrementTick+0x15c>)
 8006866:	f04f 32ff 	mov.w	r2, #4294967295
 800686a:	601a      	str	r2, [r3, #0]
					break;
 800686c:	e03f      	b.n	80068ee <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800686e:	4b31      	ldr	r3, [pc, #196]	@ (8006934 <xTaskIncrementTick+0x150>)
 8006870:	681b      	ldr	r3, [r3, #0]
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	68db      	ldr	r3, [r3, #12]
 8006876:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006878:	68bb      	ldr	r3, [r7, #8]
 800687a:	685b      	ldr	r3, [r3, #4]
 800687c:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800687e:	693a      	ldr	r2, [r7, #16]
 8006880:	687b      	ldr	r3, [r7, #4]
 8006882:	429a      	cmp	r2, r3
 8006884:	d203      	bcs.n	800688e <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006886:	4a2e      	ldr	r2, [pc, #184]	@ (8006940 <xTaskIncrementTick+0x15c>)
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800688c:	e02f      	b.n	80068ee <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800688e:	68bb      	ldr	r3, [r7, #8]
 8006890:	3304      	adds	r3, #4
 8006892:	4618      	mov	r0, r3
 8006894:	f7fe ff26 	bl	80056e4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800689c:	2b00      	cmp	r3, #0
 800689e:	d004      	beq.n	80068aa <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80068a0:	68bb      	ldr	r3, [r7, #8]
 80068a2:	3318      	adds	r3, #24
 80068a4:	4618      	mov	r0, r3
 80068a6:	f7fe ff1d 	bl	80056e4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 80068aa:	68bb      	ldr	r3, [r7, #8]
 80068ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068ae:	4b25      	ldr	r3, [pc, #148]	@ (8006944 <xTaskIncrementTick+0x160>)
 80068b0:	681b      	ldr	r3, [r3, #0]
 80068b2:	429a      	cmp	r2, r3
 80068b4:	d903      	bls.n	80068be <xTaskIncrementTick+0xda>
 80068b6:	68bb      	ldr	r3, [r7, #8]
 80068b8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068ba:	4a22      	ldr	r2, [pc, #136]	@ (8006944 <xTaskIncrementTick+0x160>)
 80068bc:	6013      	str	r3, [r2, #0]
 80068be:	68bb      	ldr	r3, [r7, #8]
 80068c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068c2:	4613      	mov	r3, r2
 80068c4:	009b      	lsls	r3, r3, #2
 80068c6:	4413      	add	r3, r2
 80068c8:	009b      	lsls	r3, r3, #2
 80068ca:	4a1f      	ldr	r2, [pc, #124]	@ (8006948 <xTaskIncrementTick+0x164>)
 80068cc:	441a      	add	r2, r3
 80068ce:	68bb      	ldr	r3, [r7, #8]
 80068d0:	3304      	adds	r3, #4
 80068d2:	4619      	mov	r1, r3
 80068d4:	4610      	mov	r0, r2
 80068d6:	f7fe fea8 	bl	800562a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80068da:	68bb      	ldr	r3, [r7, #8]
 80068dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068de:	4b1b      	ldr	r3, [pc, #108]	@ (800694c <xTaskIncrementTick+0x168>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068e4:	429a      	cmp	r2, r3
 80068e6:	d3b8      	bcc.n	800685a <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80068e8:	2301      	movs	r3, #1
 80068ea:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80068ec:	e7b5      	b.n	800685a <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80068ee:	4b17      	ldr	r3, [pc, #92]	@ (800694c <xTaskIncrementTick+0x168>)
 80068f0:	681b      	ldr	r3, [r3, #0]
 80068f2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f4:	4914      	ldr	r1, [pc, #80]	@ (8006948 <xTaskIncrementTick+0x164>)
 80068f6:	4613      	mov	r3, r2
 80068f8:	009b      	lsls	r3, r3, #2
 80068fa:	4413      	add	r3, r2
 80068fc:	009b      	lsls	r3, r3, #2
 80068fe:	440b      	add	r3, r1
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	2b01      	cmp	r3, #1
 8006904:	d901      	bls.n	800690a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006906:	2301      	movs	r3, #1
 8006908:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 800690a:	4b11      	ldr	r3, [pc, #68]	@ (8006950 <xTaskIncrementTick+0x16c>)
 800690c:	681b      	ldr	r3, [r3, #0]
 800690e:	2b00      	cmp	r3, #0
 8006910:	d007      	beq.n	8006922 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006912:	2301      	movs	r3, #1
 8006914:	617b      	str	r3, [r7, #20]
 8006916:	e004      	b.n	8006922 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006918:	4b0e      	ldr	r3, [pc, #56]	@ (8006954 <xTaskIncrementTick+0x170>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	3301      	adds	r3, #1
 800691e:	4a0d      	ldr	r2, [pc, #52]	@ (8006954 <xTaskIncrementTick+0x170>)
 8006920:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006922:	697b      	ldr	r3, [r7, #20]
}
 8006924:	4618      	mov	r0, r3
 8006926:	3718      	adds	r7, #24
 8006928:	46bd      	mov	sp, r7
 800692a:	bd80      	pop	{r7, pc}
 800692c:	20000f00 	.word	0x20000f00
 8006930:	20000edc 	.word	0x20000edc
 8006934:	20000e90 	.word	0x20000e90
 8006938:	20000e94 	.word	0x20000e94
 800693c:	20000ef0 	.word	0x20000ef0
 8006940:	20000ef8 	.word	0x20000ef8
 8006944:	20000ee0 	.word	0x20000ee0
 8006948:	20000a08 	.word	0x20000a08
 800694c:	20000a04 	.word	0x20000a04
 8006950:	20000eec 	.word	0x20000eec
 8006954:	20000ee8 	.word	0x20000ee8

08006958 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006958:	b480      	push	{r7}
 800695a:	b085      	sub	sp, #20
 800695c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800695e:	4b2b      	ldr	r3, [pc, #172]	@ (8006a0c <vTaskSwitchContext+0xb4>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	2b00      	cmp	r3, #0
 8006964:	d003      	beq.n	800696e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006966:	4b2a      	ldr	r3, [pc, #168]	@ (8006a10 <vTaskSwitchContext+0xb8>)
 8006968:	2201      	movs	r2, #1
 800696a:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800696c:	e047      	b.n	80069fe <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800696e:	4b28      	ldr	r3, [pc, #160]	@ (8006a10 <vTaskSwitchContext+0xb8>)
 8006970:	2200      	movs	r2, #0
 8006972:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006974:	4b27      	ldr	r3, [pc, #156]	@ (8006a14 <vTaskSwitchContext+0xbc>)
 8006976:	681b      	ldr	r3, [r3, #0]
 8006978:	60fb      	str	r3, [r7, #12]
 800697a:	e011      	b.n	80069a0 <vTaskSwitchContext+0x48>
 800697c:	68fb      	ldr	r3, [r7, #12]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d10b      	bne.n	800699a <vTaskSwitchContext+0x42>
	__asm volatile
 8006982:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006986:	f383 8811 	msr	BASEPRI, r3
 800698a:	f3bf 8f6f 	isb	sy
 800698e:	f3bf 8f4f 	dsb	sy
 8006992:	607b      	str	r3, [r7, #4]
}
 8006994:	bf00      	nop
 8006996:	bf00      	nop
 8006998:	e7fd      	b.n	8006996 <vTaskSwitchContext+0x3e>
 800699a:	68fb      	ldr	r3, [r7, #12]
 800699c:	3b01      	subs	r3, #1
 800699e:	60fb      	str	r3, [r7, #12]
 80069a0:	491d      	ldr	r1, [pc, #116]	@ (8006a18 <vTaskSwitchContext+0xc0>)
 80069a2:	68fa      	ldr	r2, [r7, #12]
 80069a4:	4613      	mov	r3, r2
 80069a6:	009b      	lsls	r3, r3, #2
 80069a8:	4413      	add	r3, r2
 80069aa:	009b      	lsls	r3, r3, #2
 80069ac:	440b      	add	r3, r1
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	2b00      	cmp	r3, #0
 80069b2:	d0e3      	beq.n	800697c <vTaskSwitchContext+0x24>
 80069b4:	68fa      	ldr	r2, [r7, #12]
 80069b6:	4613      	mov	r3, r2
 80069b8:	009b      	lsls	r3, r3, #2
 80069ba:	4413      	add	r3, r2
 80069bc:	009b      	lsls	r3, r3, #2
 80069be:	4a16      	ldr	r2, [pc, #88]	@ (8006a18 <vTaskSwitchContext+0xc0>)
 80069c0:	4413      	add	r3, r2
 80069c2:	60bb      	str	r3, [r7, #8]
 80069c4:	68bb      	ldr	r3, [r7, #8]
 80069c6:	685b      	ldr	r3, [r3, #4]
 80069c8:	685a      	ldr	r2, [r3, #4]
 80069ca:	68bb      	ldr	r3, [r7, #8]
 80069cc:	605a      	str	r2, [r3, #4]
 80069ce:	68bb      	ldr	r3, [r7, #8]
 80069d0:	685a      	ldr	r2, [r3, #4]
 80069d2:	68bb      	ldr	r3, [r7, #8]
 80069d4:	3308      	adds	r3, #8
 80069d6:	429a      	cmp	r2, r3
 80069d8:	d104      	bne.n	80069e4 <vTaskSwitchContext+0x8c>
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	685b      	ldr	r3, [r3, #4]
 80069de:	685a      	ldr	r2, [r3, #4]
 80069e0:	68bb      	ldr	r3, [r7, #8]
 80069e2:	605a      	str	r2, [r3, #4]
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	685b      	ldr	r3, [r3, #4]
 80069e8:	68db      	ldr	r3, [r3, #12]
 80069ea:	4a0c      	ldr	r2, [pc, #48]	@ (8006a1c <vTaskSwitchContext+0xc4>)
 80069ec:	6013      	str	r3, [r2, #0]
 80069ee:	4a09      	ldr	r2, [pc, #36]	@ (8006a14 <vTaskSwitchContext+0xbc>)
 80069f0:	68fb      	ldr	r3, [r7, #12]
 80069f2:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80069f4:	4b09      	ldr	r3, [pc, #36]	@ (8006a1c <vTaskSwitchContext+0xc4>)
 80069f6:	681b      	ldr	r3, [r3, #0]
 80069f8:	3354      	adds	r3, #84	@ 0x54
 80069fa:	4a09      	ldr	r2, [pc, #36]	@ (8006a20 <vTaskSwitchContext+0xc8>)
 80069fc:	6013      	str	r3, [r2, #0]
}
 80069fe:	bf00      	nop
 8006a00:	3714      	adds	r7, #20
 8006a02:	46bd      	mov	sp, r7
 8006a04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a08:	4770      	bx	lr
 8006a0a:	bf00      	nop
 8006a0c:	20000f00 	.word	0x20000f00
 8006a10:	20000eec 	.word	0x20000eec
 8006a14:	20000ee0 	.word	0x20000ee0
 8006a18:	20000a08 	.word	0x20000a08
 8006a1c:	20000a04 	.word	0x20000a04
 8006a20:	2000001c 	.word	0x2000001c

08006a24 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006a24:	b580      	push	{r7, lr}
 8006a26:	b084      	sub	sp, #16
 8006a28:	af00      	add	r7, sp, #0
 8006a2a:	6078      	str	r0, [r7, #4]
 8006a2c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d10b      	bne.n	8006a4c <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006a34:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a38:	f383 8811 	msr	BASEPRI, r3
 8006a3c:	f3bf 8f6f 	isb	sy
 8006a40:	f3bf 8f4f 	dsb	sy
 8006a44:	60fb      	str	r3, [r7, #12]
}
 8006a46:	bf00      	nop
 8006a48:	bf00      	nop
 8006a4a:	e7fd      	b.n	8006a48 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a4c:	4b07      	ldr	r3, [pc, #28]	@ (8006a6c <vTaskPlaceOnEventList+0x48>)
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	3318      	adds	r3, #24
 8006a52:	4619      	mov	r1, r3
 8006a54:	6878      	ldr	r0, [r7, #4]
 8006a56:	f7fe fe0c 	bl	8005672 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006a5a:	2101      	movs	r1, #1
 8006a5c:	6838      	ldr	r0, [r7, #0]
 8006a5e:	f000 fa87 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
}
 8006a62:	bf00      	nop
 8006a64:	3710      	adds	r7, #16
 8006a66:	46bd      	mov	sp, r7
 8006a68:	bd80      	pop	{r7, pc}
 8006a6a:	bf00      	nop
 8006a6c:	20000a04 	.word	0x20000a04

08006a70 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b086      	sub	sp, #24
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	60f8      	str	r0, [r7, #12]
 8006a78:	60b9      	str	r1, [r7, #8]
 8006a7a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006a7c:	68fb      	ldr	r3, [r7, #12]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d10b      	bne.n	8006a9a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	617b      	str	r3, [r7, #20]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006a9a:	4b0a      	ldr	r3, [pc, #40]	@ (8006ac4 <vTaskPlaceOnEventListRestricted+0x54>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	3318      	adds	r3, #24
 8006aa0:	4619      	mov	r1, r3
 8006aa2:	68f8      	ldr	r0, [r7, #12]
 8006aa4:	f7fe fdc1 	bl	800562a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	2b00      	cmp	r3, #0
 8006aac:	d002      	beq.n	8006ab4 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006aae:	f04f 33ff 	mov.w	r3, #4294967295
 8006ab2:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006ab4:	6879      	ldr	r1, [r7, #4]
 8006ab6:	68b8      	ldr	r0, [r7, #8]
 8006ab8:	f000 fa5a 	bl	8006f70 <prvAddCurrentTaskToDelayedList>
	}
 8006abc:	bf00      	nop
 8006abe:	3718      	adds	r7, #24
 8006ac0:	46bd      	mov	sp, r7
 8006ac2:	bd80      	pop	{r7, pc}
 8006ac4:	20000a04 	.word	0x20000a04

08006ac8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006ac8:	b580      	push	{r7, lr}
 8006aca:	b086      	sub	sp, #24
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	68db      	ldr	r3, [r3, #12]
 8006ad4:	68db      	ldr	r3, [r3, #12]
 8006ad6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ad8:	693b      	ldr	r3, [r7, #16]
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d10b      	bne.n	8006af6 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006ade:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ae2:	f383 8811 	msr	BASEPRI, r3
 8006ae6:	f3bf 8f6f 	isb	sy
 8006aea:	f3bf 8f4f 	dsb	sy
 8006aee:	60fb      	str	r3, [r7, #12]
}
 8006af0:	bf00      	nop
 8006af2:	bf00      	nop
 8006af4:	e7fd      	b.n	8006af2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006af6:	693b      	ldr	r3, [r7, #16]
 8006af8:	3318      	adds	r3, #24
 8006afa:	4618      	mov	r0, r3
 8006afc:	f7fe fdf2 	bl	80056e4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b00:	4b1d      	ldr	r3, [pc, #116]	@ (8006b78 <xTaskRemoveFromEventList+0xb0>)
 8006b02:	681b      	ldr	r3, [r3, #0]
 8006b04:	2b00      	cmp	r3, #0
 8006b06:	d11d      	bne.n	8006b44 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006b08:	693b      	ldr	r3, [r7, #16]
 8006b0a:	3304      	adds	r3, #4
 8006b0c:	4618      	mov	r0, r3
 8006b0e:	f7fe fde9 	bl	80056e4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006b12:	693b      	ldr	r3, [r7, #16]
 8006b14:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b16:	4b19      	ldr	r3, [pc, #100]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b18:	681b      	ldr	r3, [r3, #0]
 8006b1a:	429a      	cmp	r2, r3
 8006b1c:	d903      	bls.n	8006b26 <xTaskRemoveFromEventList+0x5e>
 8006b1e:	693b      	ldr	r3, [r7, #16]
 8006b20:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b22:	4a16      	ldr	r2, [pc, #88]	@ (8006b7c <xTaskRemoveFromEventList+0xb4>)
 8006b24:	6013      	str	r3, [r2, #0]
 8006b26:	693b      	ldr	r3, [r7, #16]
 8006b28:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2a:	4613      	mov	r3, r2
 8006b2c:	009b      	lsls	r3, r3, #2
 8006b2e:	4413      	add	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4a13      	ldr	r2, [pc, #76]	@ (8006b80 <xTaskRemoveFromEventList+0xb8>)
 8006b34:	441a      	add	r2, r3
 8006b36:	693b      	ldr	r3, [r7, #16]
 8006b38:	3304      	adds	r3, #4
 8006b3a:	4619      	mov	r1, r3
 8006b3c:	4610      	mov	r0, r2
 8006b3e:	f7fe fd74 	bl	800562a <vListInsertEnd>
 8006b42:	e005      	b.n	8006b50 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006b44:	693b      	ldr	r3, [r7, #16]
 8006b46:	3318      	adds	r3, #24
 8006b48:	4619      	mov	r1, r3
 8006b4a:	480e      	ldr	r0, [pc, #56]	@ (8006b84 <xTaskRemoveFromEventList+0xbc>)
 8006b4c:	f7fe fd6d 	bl	800562a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006b50:	693b      	ldr	r3, [r7, #16]
 8006b52:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b54:	4b0c      	ldr	r3, [pc, #48]	@ (8006b88 <xTaskRemoveFromEventList+0xc0>)
 8006b56:	681b      	ldr	r3, [r3, #0]
 8006b58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b5a:	429a      	cmp	r2, r3
 8006b5c:	d905      	bls.n	8006b6a <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006b5e:	2301      	movs	r3, #1
 8006b60:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006b62:	4b0a      	ldr	r3, [pc, #40]	@ (8006b8c <xTaskRemoveFromEventList+0xc4>)
 8006b64:	2201      	movs	r2, #1
 8006b66:	601a      	str	r2, [r3, #0]
 8006b68:	e001      	b.n	8006b6e <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006b6a:	2300      	movs	r3, #0
 8006b6c:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006b6e:	697b      	ldr	r3, [r7, #20]
}
 8006b70:	4618      	mov	r0, r3
 8006b72:	3718      	adds	r7, #24
 8006b74:	46bd      	mov	sp, r7
 8006b76:	bd80      	pop	{r7, pc}
 8006b78:	20000f00 	.word	0x20000f00
 8006b7c:	20000ee0 	.word	0x20000ee0
 8006b80:	20000a08 	.word	0x20000a08
 8006b84:	20000e98 	.word	0x20000e98
 8006b88:	20000a04 	.word	0x20000a04
 8006b8c:	20000eec 	.word	0x20000eec

08006b90 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006b90:	b480      	push	{r7}
 8006b92:	b083      	sub	sp, #12
 8006b94:	af00      	add	r7, sp, #0
 8006b96:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006b98:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <vTaskInternalSetTimeOutState+0x24>)
 8006b9a:	681a      	ldr	r2, [r3, #0]
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006ba0:	4b05      	ldr	r3, [pc, #20]	@ (8006bb8 <vTaskInternalSetTimeOutState+0x28>)
 8006ba2:	681a      	ldr	r2, [r3, #0]
 8006ba4:	687b      	ldr	r3, [r7, #4]
 8006ba6:	605a      	str	r2, [r3, #4]
}
 8006ba8:	bf00      	nop
 8006baa:	370c      	adds	r7, #12
 8006bac:	46bd      	mov	sp, r7
 8006bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb2:	4770      	bx	lr
 8006bb4:	20000ef0 	.word	0x20000ef0
 8006bb8:	20000edc 	.word	0x20000edc

08006bbc <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b088      	sub	sp, #32
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006bc6:	687b      	ldr	r3, [r7, #4]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d10b      	bne.n	8006be4 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006bcc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bd0:	f383 8811 	msr	BASEPRI, r3
 8006bd4:	f3bf 8f6f 	isb	sy
 8006bd8:	f3bf 8f4f 	dsb	sy
 8006bdc:	613b      	str	r3, [r7, #16]
}
 8006bde:	bf00      	nop
 8006be0:	bf00      	nop
 8006be2:	e7fd      	b.n	8006be0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006be4:	683b      	ldr	r3, [r7, #0]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d10b      	bne.n	8006c02 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006bea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bee:	f383 8811 	msr	BASEPRI, r3
 8006bf2:	f3bf 8f6f 	isb	sy
 8006bf6:	f3bf 8f4f 	dsb	sy
 8006bfa:	60fb      	str	r3, [r7, #12]
}
 8006bfc:	bf00      	nop
 8006bfe:	bf00      	nop
 8006c00:	e7fd      	b.n	8006bfe <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006c02:	f000 fe91 	bl	8007928 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006c06:	4b1d      	ldr	r3, [pc, #116]	@ (8006c7c <xTaskCheckForTimeOut+0xc0>)
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	685b      	ldr	r3, [r3, #4]
 8006c10:	69ba      	ldr	r2, [r7, #24]
 8006c12:	1ad3      	subs	r3, r2, r3
 8006c14:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006c16:	683b      	ldr	r3, [r7, #0]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c1e:	d102      	bne.n	8006c26 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006c20:	2300      	movs	r3, #0
 8006c22:	61fb      	str	r3, [r7, #28]
 8006c24:	e023      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681a      	ldr	r2, [r3, #0]
 8006c2a:	4b15      	ldr	r3, [pc, #84]	@ (8006c80 <xTaskCheckForTimeOut+0xc4>)
 8006c2c:	681b      	ldr	r3, [r3, #0]
 8006c2e:	429a      	cmp	r2, r3
 8006c30:	d007      	beq.n	8006c42 <xTaskCheckForTimeOut+0x86>
 8006c32:	687b      	ldr	r3, [r7, #4]
 8006c34:	685b      	ldr	r3, [r3, #4]
 8006c36:	69ba      	ldr	r2, [r7, #24]
 8006c38:	429a      	cmp	r2, r3
 8006c3a:	d302      	bcc.n	8006c42 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006c3c:	2301      	movs	r3, #1
 8006c3e:	61fb      	str	r3, [r7, #28]
 8006c40:	e015      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006c42:	683b      	ldr	r3, [r7, #0]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	697a      	ldr	r2, [r7, #20]
 8006c48:	429a      	cmp	r2, r3
 8006c4a:	d20b      	bcs.n	8006c64 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006c4c:	683b      	ldr	r3, [r7, #0]
 8006c4e:	681a      	ldr	r2, [r3, #0]
 8006c50:	697b      	ldr	r3, [r7, #20]
 8006c52:	1ad2      	subs	r2, r2, r3
 8006c54:	683b      	ldr	r3, [r7, #0]
 8006c56:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006c58:	6878      	ldr	r0, [r7, #4]
 8006c5a:	f7ff ff99 	bl	8006b90 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006c5e:	2300      	movs	r3, #0
 8006c60:	61fb      	str	r3, [r7, #28]
 8006c62:	e004      	b.n	8006c6e <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006c64:	683b      	ldr	r3, [r7, #0]
 8006c66:	2200      	movs	r2, #0
 8006c68:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006c6a:	2301      	movs	r3, #1
 8006c6c:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006c6e:	f000 fe8d 	bl	800798c <vPortExitCritical>

	return xReturn;
 8006c72:	69fb      	ldr	r3, [r7, #28]
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3720      	adds	r7, #32
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}
 8006c7c:	20000edc 	.word	0x20000edc
 8006c80:	20000ef0 	.word	0x20000ef0

08006c84 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006c84:	b480      	push	{r7}
 8006c86:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006c88:	4b03      	ldr	r3, [pc, #12]	@ (8006c98 <vTaskMissedYield+0x14>)
 8006c8a:	2201      	movs	r2, #1
 8006c8c:	601a      	str	r2, [r3, #0]
}
 8006c8e:	bf00      	nop
 8006c90:	46bd      	mov	sp, r7
 8006c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c96:	4770      	bx	lr
 8006c98:	20000eec 	.word	0x20000eec

08006c9c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006c9c:	b580      	push	{r7, lr}
 8006c9e:	b082      	sub	sp, #8
 8006ca0:	af00      	add	r7, sp, #0
 8006ca2:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006ca4:	f000 f852 	bl	8006d4c <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006ca8:	4b06      	ldr	r3, [pc, #24]	@ (8006cc4 <prvIdleTask+0x28>)
 8006caa:	681b      	ldr	r3, [r3, #0]
 8006cac:	2b01      	cmp	r3, #1
 8006cae:	d9f9      	bls.n	8006ca4 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006cb0:	4b05      	ldr	r3, [pc, #20]	@ (8006cc8 <prvIdleTask+0x2c>)
 8006cb2:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006cb6:	601a      	str	r2, [r3, #0]
 8006cb8:	f3bf 8f4f 	dsb	sy
 8006cbc:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006cc0:	e7f0      	b.n	8006ca4 <prvIdleTask+0x8>
 8006cc2:	bf00      	nop
 8006cc4:	20000a08 	.word	0x20000a08
 8006cc8:	e000ed04 	.word	0xe000ed04

08006ccc <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006ccc:	b580      	push	{r7, lr}
 8006cce:	b082      	sub	sp, #8
 8006cd0:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cd2:	2300      	movs	r3, #0
 8006cd4:	607b      	str	r3, [r7, #4]
 8006cd6:	e00c      	b.n	8006cf2 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006cd8:	687a      	ldr	r2, [r7, #4]
 8006cda:	4613      	mov	r3, r2
 8006cdc:	009b      	lsls	r3, r3, #2
 8006cde:	4413      	add	r3, r2
 8006ce0:	009b      	lsls	r3, r3, #2
 8006ce2:	4a12      	ldr	r2, [pc, #72]	@ (8006d2c <prvInitialiseTaskLists+0x60>)
 8006ce4:	4413      	add	r3, r2
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f7fe fc72 	bl	80055d0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	3301      	adds	r3, #1
 8006cf0:	607b      	str	r3, [r7, #4]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	2b37      	cmp	r3, #55	@ 0x37
 8006cf6:	d9ef      	bls.n	8006cd8 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006cf8:	480d      	ldr	r0, [pc, #52]	@ (8006d30 <prvInitialiseTaskLists+0x64>)
 8006cfa:	f7fe fc69 	bl	80055d0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006cfe:	480d      	ldr	r0, [pc, #52]	@ (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d00:	f7fe fc66 	bl	80055d0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006d04:	480c      	ldr	r0, [pc, #48]	@ (8006d38 <prvInitialiseTaskLists+0x6c>)
 8006d06:	f7fe fc63 	bl	80055d0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006d0a:	480c      	ldr	r0, [pc, #48]	@ (8006d3c <prvInitialiseTaskLists+0x70>)
 8006d0c:	f7fe fc60 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006d10:	480b      	ldr	r0, [pc, #44]	@ (8006d40 <prvInitialiseTaskLists+0x74>)
 8006d12:	f7fe fc5d 	bl	80055d0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006d16:	4b0b      	ldr	r3, [pc, #44]	@ (8006d44 <prvInitialiseTaskLists+0x78>)
 8006d18:	4a05      	ldr	r2, [pc, #20]	@ (8006d30 <prvInitialiseTaskLists+0x64>)
 8006d1a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006d1c:	4b0a      	ldr	r3, [pc, #40]	@ (8006d48 <prvInitialiseTaskLists+0x7c>)
 8006d1e:	4a05      	ldr	r2, [pc, #20]	@ (8006d34 <prvInitialiseTaskLists+0x68>)
 8006d20:	601a      	str	r2, [r3, #0]
}
 8006d22:	bf00      	nop
 8006d24:	3708      	adds	r7, #8
 8006d26:	46bd      	mov	sp, r7
 8006d28:	bd80      	pop	{r7, pc}
 8006d2a:	bf00      	nop
 8006d2c:	20000a08 	.word	0x20000a08
 8006d30:	20000e68 	.word	0x20000e68
 8006d34:	20000e7c 	.word	0x20000e7c
 8006d38:	20000e98 	.word	0x20000e98
 8006d3c:	20000eac 	.word	0x20000eac
 8006d40:	20000ec4 	.word	0x20000ec4
 8006d44:	20000e90 	.word	0x20000e90
 8006d48:	20000e94 	.word	0x20000e94

08006d4c <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006d4c:	b580      	push	{r7, lr}
 8006d4e:	b082      	sub	sp, #8
 8006d50:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d52:	e019      	b.n	8006d88 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006d54:	f000 fde8 	bl	8007928 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d58:	4b10      	ldr	r3, [pc, #64]	@ (8006d9c <prvCheckTasksWaitingTermination+0x50>)
 8006d5a:	68db      	ldr	r3, [r3, #12]
 8006d5c:	68db      	ldr	r3, [r3, #12]
 8006d5e:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006d60:	687b      	ldr	r3, [r7, #4]
 8006d62:	3304      	adds	r3, #4
 8006d64:	4618      	mov	r0, r3
 8006d66:	f7fe fcbd 	bl	80056e4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006d6a:	4b0d      	ldr	r3, [pc, #52]	@ (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	3b01      	subs	r3, #1
 8006d70:	4a0b      	ldr	r2, [pc, #44]	@ (8006da0 <prvCheckTasksWaitingTermination+0x54>)
 8006d72:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006d74:	4b0b      	ldr	r3, [pc, #44]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	3b01      	subs	r3, #1
 8006d7a:	4a0a      	ldr	r2, [pc, #40]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d7c:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006d7e:	f000 fe05 	bl	800798c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006d82:	6878      	ldr	r0, [r7, #4]
 8006d84:	f000 f810 	bl	8006da8 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006d88:	4b06      	ldr	r3, [pc, #24]	@ (8006da4 <prvCheckTasksWaitingTermination+0x58>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	2b00      	cmp	r3, #0
 8006d8e:	d1e1      	bne.n	8006d54 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006d90:	bf00      	nop
 8006d92:	bf00      	nop
 8006d94:	3708      	adds	r7, #8
 8006d96:	46bd      	mov	sp, r7
 8006d98:	bd80      	pop	{r7, pc}
 8006d9a:	bf00      	nop
 8006d9c:	20000eac 	.word	0x20000eac
 8006da0:	20000ed8 	.word	0x20000ed8
 8006da4:	20000ec0 	.word	0x20000ec0

08006da8 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006da8:	b580      	push	{r7, lr}
 8006daa:	b084      	sub	sp, #16
 8006dac:	af00      	add	r7, sp, #0
 8006dae:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	3354      	adds	r3, #84	@ 0x54
 8006db4:	4618      	mov	r0, r3
 8006db6:	f001 faf1 	bl	800839c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006dc0:	2b00      	cmp	r3, #0
 8006dc2:	d108      	bne.n	8006dd6 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006dc8:	4618      	mov	r0, r3
 8006dca:	f000 ff9d 	bl	8007d08 <vPortFree>
				vPortFree( pxTCB );
 8006dce:	6878      	ldr	r0, [r7, #4]
 8006dd0:	f000 ff9a 	bl	8007d08 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006dd4:	e019      	b.n	8006e0a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006dd6:	687b      	ldr	r3, [r7, #4]
 8006dd8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ddc:	2b01      	cmp	r3, #1
 8006dde:	d103      	bne.n	8006de8 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006de0:	6878      	ldr	r0, [r7, #4]
 8006de2:	f000 ff91 	bl	8007d08 <vPortFree>
	}
 8006de6:	e010      	b.n	8006e0a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006de8:	687b      	ldr	r3, [r7, #4]
 8006dea:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006dee:	2b02      	cmp	r3, #2
 8006df0:	d00b      	beq.n	8006e0a <prvDeleteTCB+0x62>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	60fb      	str	r3, [r7, #12]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <prvDeleteTCB+0x5e>
	}
 8006e0a:	bf00      	nop
 8006e0c:	3710      	adds	r7, #16
 8006e0e:	46bd      	mov	sp, r7
 8006e10:	bd80      	pop	{r7, pc}
	...

08006e14 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006e14:	b480      	push	{r7}
 8006e16:	b083      	sub	sp, #12
 8006e18:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006e1a:	4b0c      	ldr	r3, [pc, #48]	@ (8006e4c <prvResetNextTaskUnblockTime+0x38>)
 8006e1c:	681b      	ldr	r3, [r3, #0]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d104      	bne.n	8006e2e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006e24:	4b0a      	ldr	r3, [pc, #40]	@ (8006e50 <prvResetNextTaskUnblockTime+0x3c>)
 8006e26:	f04f 32ff 	mov.w	r2, #4294967295
 8006e2a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006e2c:	e008      	b.n	8006e40 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e2e:	4b07      	ldr	r3, [pc, #28]	@ (8006e4c <prvResetNextTaskUnblockTime+0x38>)
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	68db      	ldr	r3, [r3, #12]
 8006e34:	68db      	ldr	r3, [r3, #12]
 8006e36:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006e38:	687b      	ldr	r3, [r7, #4]
 8006e3a:	685b      	ldr	r3, [r3, #4]
 8006e3c:	4a04      	ldr	r2, [pc, #16]	@ (8006e50 <prvResetNextTaskUnblockTime+0x3c>)
 8006e3e:	6013      	str	r3, [r2, #0]
}
 8006e40:	bf00      	nop
 8006e42:	370c      	adds	r7, #12
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr
 8006e4c:	20000e90 	.word	0x20000e90
 8006e50:	20000ef8 	.word	0x20000ef8

08006e54 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006e54:	b480      	push	{r7}
 8006e56:	b083      	sub	sp, #12
 8006e58:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006e5a:	4b0b      	ldr	r3, [pc, #44]	@ (8006e88 <xTaskGetSchedulerState+0x34>)
 8006e5c:	681b      	ldr	r3, [r3, #0]
 8006e5e:	2b00      	cmp	r3, #0
 8006e60:	d102      	bne.n	8006e68 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006e62:	2301      	movs	r3, #1
 8006e64:	607b      	str	r3, [r7, #4]
 8006e66:	e008      	b.n	8006e7a <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006e68:	4b08      	ldr	r3, [pc, #32]	@ (8006e8c <xTaskGetSchedulerState+0x38>)
 8006e6a:	681b      	ldr	r3, [r3, #0]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	d102      	bne.n	8006e76 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006e70:	2302      	movs	r3, #2
 8006e72:	607b      	str	r3, [r7, #4]
 8006e74:	e001      	b.n	8006e7a <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006e76:	2300      	movs	r3, #0
 8006e78:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006e7a:	687b      	ldr	r3, [r7, #4]
	}
 8006e7c:	4618      	mov	r0, r3
 8006e7e:	370c      	adds	r7, #12
 8006e80:	46bd      	mov	sp, r7
 8006e82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e86:	4770      	bx	lr
 8006e88:	20000ee4 	.word	0x20000ee4
 8006e8c:	20000f00 	.word	0x20000f00

08006e90 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006e90:	b580      	push	{r7, lr}
 8006e92:	b086      	sub	sp, #24
 8006e94:	af00      	add	r7, sp, #0
 8006e96:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006e98:	687b      	ldr	r3, [r7, #4]
 8006e9a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006e9c:	2300      	movs	r3, #0
 8006e9e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006ea0:	687b      	ldr	r3, [r7, #4]
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	d058      	beq.n	8006f58 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006ea6:	4b2f      	ldr	r3, [pc, #188]	@ (8006f64 <xTaskPriorityDisinherit+0xd4>)
 8006ea8:	681b      	ldr	r3, [r3, #0]
 8006eaa:	693a      	ldr	r2, [r7, #16]
 8006eac:	429a      	cmp	r2, r3
 8006eae:	d00b      	beq.n	8006ec8 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006eb4:	f383 8811 	msr	BASEPRI, r3
 8006eb8:	f3bf 8f6f 	isb	sy
 8006ebc:	f3bf 8f4f 	dsb	sy
 8006ec0:	60fb      	str	r3, [r7, #12]
}
 8006ec2:	bf00      	nop
 8006ec4:	bf00      	nop
 8006ec6:	e7fd      	b.n	8006ec4 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006ec8:	693b      	ldr	r3, [r7, #16]
 8006eca:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006ecc:	2b00      	cmp	r3, #0
 8006ece:	d10b      	bne.n	8006ee8 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ed4:	f383 8811 	msr	BASEPRI, r3
 8006ed8:	f3bf 8f6f 	isb	sy
 8006edc:	f3bf 8f4f 	dsb	sy
 8006ee0:	60bb      	str	r3, [r7, #8]
}
 8006ee2:	bf00      	nop
 8006ee4:	bf00      	nop
 8006ee6:	e7fd      	b.n	8006ee4 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006ee8:	693b      	ldr	r3, [r7, #16]
 8006eea:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006eec:	1e5a      	subs	r2, r3, #1
 8006eee:	693b      	ldr	r3, [r7, #16]
 8006ef0:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006ef2:	693b      	ldr	r3, [r7, #16]
 8006ef4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ef6:	693b      	ldr	r3, [r7, #16]
 8006ef8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006efa:	429a      	cmp	r2, r3
 8006efc:	d02c      	beq.n	8006f58 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006efe:	693b      	ldr	r3, [r7, #16]
 8006f00:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	d128      	bne.n	8006f58 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f06:	693b      	ldr	r3, [r7, #16]
 8006f08:	3304      	adds	r3, #4
 8006f0a:	4618      	mov	r0, r3
 8006f0c:	f7fe fbea 	bl	80056e4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006f10:	693b      	ldr	r3, [r7, #16]
 8006f12:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006f14:	693b      	ldr	r3, [r7, #16]
 8006f16:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006f18:	693b      	ldr	r3, [r7, #16]
 8006f1a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f1c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006f20:	693b      	ldr	r3, [r7, #16]
 8006f22:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f28:	4b0f      	ldr	r3, [pc, #60]	@ (8006f68 <xTaskPriorityDisinherit+0xd8>)
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	429a      	cmp	r2, r3
 8006f2e:	d903      	bls.n	8006f38 <xTaskPriorityDisinherit+0xa8>
 8006f30:	693b      	ldr	r3, [r7, #16]
 8006f32:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f34:	4a0c      	ldr	r2, [pc, #48]	@ (8006f68 <xTaskPriorityDisinherit+0xd8>)
 8006f36:	6013      	str	r3, [r2, #0]
 8006f38:	693b      	ldr	r3, [r7, #16]
 8006f3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f3c:	4613      	mov	r3, r2
 8006f3e:	009b      	lsls	r3, r3, #2
 8006f40:	4413      	add	r3, r2
 8006f42:	009b      	lsls	r3, r3, #2
 8006f44:	4a09      	ldr	r2, [pc, #36]	@ (8006f6c <xTaskPriorityDisinherit+0xdc>)
 8006f46:	441a      	add	r2, r3
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	3304      	adds	r3, #4
 8006f4c:	4619      	mov	r1, r3
 8006f4e:	4610      	mov	r0, r2
 8006f50:	f7fe fb6b 	bl	800562a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006f54:	2301      	movs	r3, #1
 8006f56:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006f58:	697b      	ldr	r3, [r7, #20]
	}
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	3718      	adds	r7, #24
 8006f5e:	46bd      	mov	sp, r7
 8006f60:	bd80      	pop	{r7, pc}
 8006f62:	bf00      	nop
 8006f64:	20000a04 	.word	0x20000a04
 8006f68:	20000ee0 	.word	0x20000ee0
 8006f6c:	20000a08 	.word	0x20000a08

08006f70 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006f70:	b580      	push	{r7, lr}
 8006f72:	b084      	sub	sp, #16
 8006f74:	af00      	add	r7, sp, #0
 8006f76:	6078      	str	r0, [r7, #4]
 8006f78:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006f7a:	4b21      	ldr	r3, [pc, #132]	@ (8007000 <prvAddCurrentTaskToDelayedList+0x90>)
 8006f7c:	681b      	ldr	r3, [r3, #0]
 8006f7e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006f80:	4b20      	ldr	r3, [pc, #128]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f82:	681b      	ldr	r3, [r3, #0]
 8006f84:	3304      	adds	r3, #4
 8006f86:	4618      	mov	r0, r3
 8006f88:	f7fe fbac 	bl	80056e4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006f8c:	687b      	ldr	r3, [r7, #4]
 8006f8e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f92:	d10a      	bne.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
 8006f94:	683b      	ldr	r3, [r7, #0]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d007      	beq.n	8006faa <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	3304      	adds	r3, #4
 8006fa0:	4619      	mov	r1, r3
 8006fa2:	4819      	ldr	r0, [pc, #100]	@ (8007008 <prvAddCurrentTaskToDelayedList+0x98>)
 8006fa4:	f7fe fb41 	bl	800562a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006fa8:	e026      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006faa:	68fa      	ldr	r2, [r7, #12]
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	4413      	add	r3, r2
 8006fb0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006fb2:	4b14      	ldr	r3, [pc, #80]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fb4:	681b      	ldr	r3, [r3, #0]
 8006fb6:	68ba      	ldr	r2, [r7, #8]
 8006fb8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006fba:	68ba      	ldr	r2, [r7, #8]
 8006fbc:	68fb      	ldr	r3, [r7, #12]
 8006fbe:	429a      	cmp	r2, r3
 8006fc0:	d209      	bcs.n	8006fd6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fc2:	4b12      	ldr	r3, [pc, #72]	@ (800700c <prvAddCurrentTaskToDelayedList+0x9c>)
 8006fc4:	681a      	ldr	r2, [r3, #0]
 8006fc6:	4b0f      	ldr	r3, [pc, #60]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fc8:	681b      	ldr	r3, [r3, #0]
 8006fca:	3304      	adds	r3, #4
 8006fcc:	4619      	mov	r1, r3
 8006fce:	4610      	mov	r0, r2
 8006fd0:	f7fe fb4f 	bl	8005672 <vListInsert>
}
 8006fd4:	e010      	b.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006fd6:	4b0e      	ldr	r3, [pc, #56]	@ (8007010 <prvAddCurrentTaskToDelayedList+0xa0>)
 8006fd8:	681a      	ldr	r2, [r3, #0]
 8006fda:	4b0a      	ldr	r3, [pc, #40]	@ (8007004 <prvAddCurrentTaskToDelayedList+0x94>)
 8006fdc:	681b      	ldr	r3, [r3, #0]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f7fe fb45 	bl	8005672 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006fe8:	4b0a      	ldr	r3, [pc, #40]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006fea:	681b      	ldr	r3, [r3, #0]
 8006fec:	68ba      	ldr	r2, [r7, #8]
 8006fee:	429a      	cmp	r2, r3
 8006ff0:	d202      	bcs.n	8006ff8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ff2:	4a08      	ldr	r2, [pc, #32]	@ (8007014 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ff4:	68bb      	ldr	r3, [r7, #8]
 8006ff6:	6013      	str	r3, [r2, #0]
}
 8006ff8:	bf00      	nop
 8006ffa:	3710      	adds	r7, #16
 8006ffc:	46bd      	mov	sp, r7
 8006ffe:	bd80      	pop	{r7, pc}
 8007000:	20000edc 	.word	0x20000edc
 8007004:	20000a04 	.word	0x20000a04
 8007008:	20000ec4 	.word	0x20000ec4
 800700c:	20000e94 	.word	0x20000e94
 8007010:	20000e90 	.word	0x20000e90
 8007014:	20000ef8 	.word	0x20000ef8

08007018 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007018:	b580      	push	{r7, lr}
 800701a:	b08a      	sub	sp, #40	@ 0x28
 800701c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800701e:	2300      	movs	r3, #0
 8007020:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007022:	f000 fb13 	bl	800764c <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007026:	4b1d      	ldr	r3, [pc, #116]	@ (800709c <xTimerCreateTimerTask+0x84>)
 8007028:	681b      	ldr	r3, [r3, #0]
 800702a:	2b00      	cmp	r3, #0
 800702c:	d021      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800702e:	2300      	movs	r3, #0
 8007030:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8007032:	2300      	movs	r3, #0
 8007034:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007036:	1d3a      	adds	r2, r7, #4
 8007038:	f107 0108 	add.w	r1, r7, #8
 800703c:	f107 030c 	add.w	r3, r7, #12
 8007040:	4618      	mov	r0, r3
 8007042:	f7fe faab 	bl	800559c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007046:	6879      	ldr	r1, [r7, #4]
 8007048:	68bb      	ldr	r3, [r7, #8]
 800704a:	68fa      	ldr	r2, [r7, #12]
 800704c:	9202      	str	r2, [sp, #8]
 800704e:	9301      	str	r3, [sp, #4]
 8007050:	2302      	movs	r3, #2
 8007052:	9300      	str	r3, [sp, #0]
 8007054:	2300      	movs	r3, #0
 8007056:	460a      	mov	r2, r1
 8007058:	4911      	ldr	r1, [pc, #68]	@ (80070a0 <xTimerCreateTimerTask+0x88>)
 800705a:	4812      	ldr	r0, [pc, #72]	@ (80070a4 <xTimerCreateTimerTask+0x8c>)
 800705c:	f7ff f8a2 	bl	80061a4 <xTaskCreateStatic>
 8007060:	4603      	mov	r3, r0
 8007062:	4a11      	ldr	r2, [pc, #68]	@ (80070a8 <xTimerCreateTimerTask+0x90>)
 8007064:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007066:	4b10      	ldr	r3, [pc, #64]	@ (80070a8 <xTimerCreateTimerTask+0x90>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	2b00      	cmp	r3, #0
 800706c:	d001      	beq.n	8007072 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800706e:	2301      	movs	r3, #1
 8007070:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8007072:	697b      	ldr	r3, [r7, #20]
 8007074:	2b00      	cmp	r3, #0
 8007076:	d10b      	bne.n	8007090 <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007078:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800707c:	f383 8811 	msr	BASEPRI, r3
 8007080:	f3bf 8f6f 	isb	sy
 8007084:	f3bf 8f4f 	dsb	sy
 8007088:	613b      	str	r3, [r7, #16]
}
 800708a:	bf00      	nop
 800708c:	bf00      	nop
 800708e:	e7fd      	b.n	800708c <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007090:	697b      	ldr	r3, [r7, #20]
}
 8007092:	4618      	mov	r0, r3
 8007094:	3718      	adds	r7, #24
 8007096:	46bd      	mov	sp, r7
 8007098:	bd80      	pop	{r7, pc}
 800709a:	bf00      	nop
 800709c:	20000f34 	.word	0x20000f34
 80070a0:	08009290 	.word	0x08009290
 80070a4:	080071e5 	.word	0x080071e5
 80070a8:	20000f38 	.word	0x20000f38

080070ac <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 80070ac:	b580      	push	{r7, lr}
 80070ae:	b08a      	sub	sp, #40	@ 0x28
 80070b0:	af00      	add	r7, sp, #0
 80070b2:	60f8      	str	r0, [r7, #12]
 80070b4:	60b9      	str	r1, [r7, #8]
 80070b6:	607a      	str	r2, [r7, #4]
 80070b8:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80070ba:	2300      	movs	r3, #0
 80070bc:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80070be:	68fb      	ldr	r3, [r7, #12]
 80070c0:	2b00      	cmp	r3, #0
 80070c2:	d10b      	bne.n	80070dc <xTimerGenericCommand+0x30>
	__asm volatile
 80070c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070c8:	f383 8811 	msr	BASEPRI, r3
 80070cc:	f3bf 8f6f 	isb	sy
 80070d0:	f3bf 8f4f 	dsb	sy
 80070d4:	623b      	str	r3, [r7, #32]
}
 80070d6:	bf00      	nop
 80070d8:	bf00      	nop
 80070da:	e7fd      	b.n	80070d8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80070dc:	4b19      	ldr	r3, [pc, #100]	@ (8007144 <xTimerGenericCommand+0x98>)
 80070de:	681b      	ldr	r3, [r3, #0]
 80070e0:	2b00      	cmp	r3, #0
 80070e2:	d02a      	beq.n	800713a <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80070e4:	68bb      	ldr	r3, [r7, #8]
 80070e6:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80070f0:	68bb      	ldr	r3, [r7, #8]
 80070f2:	2b05      	cmp	r3, #5
 80070f4:	dc18      	bgt.n	8007128 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80070f6:	f7ff fead 	bl	8006e54 <xTaskGetSchedulerState>
 80070fa:	4603      	mov	r3, r0
 80070fc:	2b02      	cmp	r3, #2
 80070fe:	d109      	bne.n	8007114 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007100:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <xTimerGenericCommand+0x98>)
 8007102:	6818      	ldr	r0, [r3, #0]
 8007104:	f107 0110 	add.w	r1, r7, #16
 8007108:	2300      	movs	r3, #0
 800710a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800710c:	f7fe fc5a 	bl	80059c4 <xQueueGenericSend>
 8007110:	6278      	str	r0, [r7, #36]	@ 0x24
 8007112:	e012      	b.n	800713a <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007114:	4b0b      	ldr	r3, [pc, #44]	@ (8007144 <xTimerGenericCommand+0x98>)
 8007116:	6818      	ldr	r0, [r3, #0]
 8007118:	f107 0110 	add.w	r1, r7, #16
 800711c:	2300      	movs	r3, #0
 800711e:	2200      	movs	r2, #0
 8007120:	f7fe fc50 	bl	80059c4 <xQueueGenericSend>
 8007124:	6278      	str	r0, [r7, #36]	@ 0x24
 8007126:	e008      	b.n	800713a <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007128:	4b06      	ldr	r3, [pc, #24]	@ (8007144 <xTimerGenericCommand+0x98>)
 800712a:	6818      	ldr	r0, [r3, #0]
 800712c:	f107 0110 	add.w	r1, r7, #16
 8007130:	2300      	movs	r3, #0
 8007132:	683a      	ldr	r2, [r7, #0]
 8007134:	f7fe fd48 	bl	8005bc8 <xQueueGenericSendFromISR>
 8007138:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800713a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 800713c:	4618      	mov	r0, r3
 800713e:	3728      	adds	r7, #40	@ 0x28
 8007140:	46bd      	mov	sp, r7
 8007142:	bd80      	pop	{r7, pc}
 8007144:	20000f34 	.word	0x20000f34

08007148 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007148:	b580      	push	{r7, lr}
 800714a:	b088      	sub	sp, #32
 800714c:	af02      	add	r7, sp, #8
 800714e:	6078      	str	r0, [r7, #4]
 8007150:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007152:	4b23      	ldr	r3, [pc, #140]	@ (80071e0 <prvProcessExpiredTimer+0x98>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	68db      	ldr	r3, [r3, #12]
 8007158:	68db      	ldr	r3, [r3, #12]
 800715a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800715c:	697b      	ldr	r3, [r7, #20]
 800715e:	3304      	adds	r3, #4
 8007160:	4618      	mov	r0, r3
 8007162:	f7fe fabf 	bl	80056e4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007166:	697b      	ldr	r3, [r7, #20]
 8007168:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800716c:	f003 0304 	and.w	r3, r3, #4
 8007170:	2b00      	cmp	r3, #0
 8007172:	d023      	beq.n	80071bc <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007174:	697b      	ldr	r3, [r7, #20]
 8007176:	699a      	ldr	r2, [r3, #24]
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	18d1      	adds	r1, r2, r3
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	683a      	ldr	r2, [r7, #0]
 8007180:	6978      	ldr	r0, [r7, #20]
 8007182:	f000 f8d5 	bl	8007330 <prvInsertTimerInActiveList>
 8007186:	4603      	mov	r3, r0
 8007188:	2b00      	cmp	r3, #0
 800718a:	d020      	beq.n	80071ce <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800718c:	2300      	movs	r3, #0
 800718e:	9300      	str	r3, [sp, #0]
 8007190:	2300      	movs	r3, #0
 8007192:	687a      	ldr	r2, [r7, #4]
 8007194:	2100      	movs	r1, #0
 8007196:	6978      	ldr	r0, [r7, #20]
 8007198:	f7ff ff88 	bl	80070ac <xTimerGenericCommand>
 800719c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800719e:	693b      	ldr	r3, [r7, #16]
 80071a0:	2b00      	cmp	r3, #0
 80071a2:	d114      	bne.n	80071ce <prvProcessExpiredTimer+0x86>
	__asm volatile
 80071a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80071a8:	f383 8811 	msr	BASEPRI, r3
 80071ac:	f3bf 8f6f 	isb	sy
 80071b0:	f3bf 8f4f 	dsb	sy
 80071b4:	60fb      	str	r3, [r7, #12]
}
 80071b6:	bf00      	nop
 80071b8:	bf00      	nop
 80071ba:	e7fd      	b.n	80071b8 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80071bc:	697b      	ldr	r3, [r7, #20]
 80071be:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80071c2:	f023 0301 	bic.w	r3, r3, #1
 80071c6:	b2da      	uxtb	r2, r3
 80071c8:	697b      	ldr	r3, [r7, #20]
 80071ca:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	6a1b      	ldr	r3, [r3, #32]
 80071d2:	6978      	ldr	r0, [r7, #20]
 80071d4:	4798      	blx	r3
}
 80071d6:	bf00      	nop
 80071d8:	3718      	adds	r7, #24
 80071da:	46bd      	mov	sp, r7
 80071dc:	bd80      	pop	{r7, pc}
 80071de:	bf00      	nop
 80071e0:	20000f2c 	.word	0x20000f2c

080071e4 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80071e4:	b580      	push	{r7, lr}
 80071e6:	b084      	sub	sp, #16
 80071e8:	af00      	add	r7, sp, #0
 80071ea:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80071ec:	f107 0308 	add.w	r3, r7, #8
 80071f0:	4618      	mov	r0, r3
 80071f2:	f000 f859 	bl	80072a8 <prvGetNextExpireTime>
 80071f6:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80071f8:	68bb      	ldr	r3, [r7, #8]
 80071fa:	4619      	mov	r1, r3
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 f805 	bl	800720c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007202:	f000 f8d7 	bl	80073b4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007206:	bf00      	nop
 8007208:	e7f0      	b.n	80071ec <prvTimerTask+0x8>
	...

0800720c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800720c:	b580      	push	{r7, lr}
 800720e:	b084      	sub	sp, #16
 8007210:	af00      	add	r7, sp, #0
 8007212:	6078      	str	r0, [r7, #4]
 8007214:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007216:	f7ff fa29 	bl	800666c <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800721a:	f107 0308 	add.w	r3, r7, #8
 800721e:	4618      	mov	r0, r3
 8007220:	f000 f866 	bl	80072f0 <prvSampleTimeNow>
 8007224:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007226:	68bb      	ldr	r3, [r7, #8]
 8007228:	2b00      	cmp	r3, #0
 800722a:	d130      	bne.n	800728e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800722c:	683b      	ldr	r3, [r7, #0]
 800722e:	2b00      	cmp	r3, #0
 8007230:	d10a      	bne.n	8007248 <prvProcessTimerOrBlockTask+0x3c>
 8007232:	687a      	ldr	r2, [r7, #4]
 8007234:	68fb      	ldr	r3, [r7, #12]
 8007236:	429a      	cmp	r2, r3
 8007238:	d806      	bhi.n	8007248 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800723a:	f7ff fa25 	bl	8006688 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800723e:	68f9      	ldr	r1, [r7, #12]
 8007240:	6878      	ldr	r0, [r7, #4]
 8007242:	f7ff ff81 	bl	8007148 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007246:	e024      	b.n	8007292 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	2b00      	cmp	r3, #0
 800724c:	d008      	beq.n	8007260 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800724e:	4b13      	ldr	r3, [pc, #76]	@ (800729c <prvProcessTimerOrBlockTask+0x90>)
 8007250:	681b      	ldr	r3, [r3, #0]
 8007252:	681b      	ldr	r3, [r3, #0]
 8007254:	2b00      	cmp	r3, #0
 8007256:	d101      	bne.n	800725c <prvProcessTimerOrBlockTask+0x50>
 8007258:	2301      	movs	r3, #1
 800725a:	e000      	b.n	800725e <prvProcessTimerOrBlockTask+0x52>
 800725c:	2300      	movs	r3, #0
 800725e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8007260:	4b0f      	ldr	r3, [pc, #60]	@ (80072a0 <prvProcessTimerOrBlockTask+0x94>)
 8007262:	6818      	ldr	r0, [r3, #0]
 8007264:	687a      	ldr	r2, [r7, #4]
 8007266:	68fb      	ldr	r3, [r7, #12]
 8007268:	1ad3      	subs	r3, r2, r3
 800726a:	683a      	ldr	r2, [r7, #0]
 800726c:	4619      	mov	r1, r3
 800726e:	f7fe ff65 	bl	800613c <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8007272:	f7ff fa09 	bl	8006688 <xTaskResumeAll>
 8007276:	4603      	mov	r3, r0
 8007278:	2b00      	cmp	r3, #0
 800727a:	d10a      	bne.n	8007292 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800727c:	4b09      	ldr	r3, [pc, #36]	@ (80072a4 <prvProcessTimerOrBlockTask+0x98>)
 800727e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007282:	601a      	str	r2, [r3, #0]
 8007284:	f3bf 8f4f 	dsb	sy
 8007288:	f3bf 8f6f 	isb	sy
}
 800728c:	e001      	b.n	8007292 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800728e:	f7ff f9fb 	bl	8006688 <xTaskResumeAll>
}
 8007292:	bf00      	nop
 8007294:	3710      	adds	r7, #16
 8007296:	46bd      	mov	sp, r7
 8007298:	bd80      	pop	{r7, pc}
 800729a:	bf00      	nop
 800729c:	20000f30 	.word	0x20000f30
 80072a0:	20000f34 	.word	0x20000f34
 80072a4:	e000ed04 	.word	0xe000ed04

080072a8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
 80072ae:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 80072b0:	4b0e      	ldr	r3, [pc, #56]	@ (80072ec <prvGetNextExpireTime+0x44>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	681b      	ldr	r3, [r3, #0]
 80072b6:	2b00      	cmp	r3, #0
 80072b8:	d101      	bne.n	80072be <prvGetNextExpireTime+0x16>
 80072ba:	2201      	movs	r2, #1
 80072bc:	e000      	b.n	80072c0 <prvGetNextExpireTime+0x18>
 80072be:	2200      	movs	r2, #0
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	681b      	ldr	r3, [r3, #0]
 80072c8:	2b00      	cmp	r3, #0
 80072ca:	d105      	bne.n	80072d8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80072cc:	4b07      	ldr	r3, [pc, #28]	@ (80072ec <prvGetNextExpireTime+0x44>)
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	68db      	ldr	r3, [r3, #12]
 80072d2:	681b      	ldr	r3, [r3, #0]
 80072d4:	60fb      	str	r3, [r7, #12]
 80072d6:	e001      	b.n	80072dc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80072d8:	2300      	movs	r3, #0
 80072da:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80072dc:	68fb      	ldr	r3, [r7, #12]
}
 80072de:	4618      	mov	r0, r3
 80072e0:	3714      	adds	r7, #20
 80072e2:	46bd      	mov	sp, r7
 80072e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e8:	4770      	bx	lr
 80072ea:	bf00      	nop
 80072ec:	20000f2c 	.word	0x20000f2c

080072f0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80072f0:	b580      	push	{r7, lr}
 80072f2:	b084      	sub	sp, #16
 80072f4:	af00      	add	r7, sp, #0
 80072f6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80072f8:	f7ff fa64 	bl	80067c4 <xTaskGetTickCount>
 80072fc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80072fe:	4b0b      	ldr	r3, [pc, #44]	@ (800732c <prvSampleTimeNow+0x3c>)
 8007300:	681b      	ldr	r3, [r3, #0]
 8007302:	68fa      	ldr	r2, [r7, #12]
 8007304:	429a      	cmp	r2, r3
 8007306:	d205      	bcs.n	8007314 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007308:	f000 f93a 	bl	8007580 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	2201      	movs	r2, #1
 8007310:	601a      	str	r2, [r3, #0]
 8007312:	e002      	b.n	800731a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2200      	movs	r2, #0
 8007318:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800731a:	4a04      	ldr	r2, [pc, #16]	@ (800732c <prvSampleTimeNow+0x3c>)
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007320:	68fb      	ldr	r3, [r7, #12]
}
 8007322:	4618      	mov	r0, r3
 8007324:	3710      	adds	r7, #16
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}
 800732a:	bf00      	nop
 800732c:	20000f3c 	.word	0x20000f3c

08007330 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b086      	sub	sp, #24
 8007334:	af00      	add	r7, sp, #0
 8007336:	60f8      	str	r0, [r7, #12]
 8007338:	60b9      	str	r1, [r7, #8]
 800733a:	607a      	str	r2, [r7, #4]
 800733c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800733e:	2300      	movs	r3, #0
 8007340:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8007342:	68fb      	ldr	r3, [r7, #12]
 8007344:	68ba      	ldr	r2, [r7, #8]
 8007346:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007348:	68fb      	ldr	r3, [r7, #12]
 800734a:	68fa      	ldr	r2, [r7, #12]
 800734c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800734e:	68ba      	ldr	r2, [r7, #8]
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	429a      	cmp	r2, r3
 8007354:	d812      	bhi.n	800737c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007356:	687a      	ldr	r2, [r7, #4]
 8007358:	683b      	ldr	r3, [r7, #0]
 800735a:	1ad2      	subs	r2, r2, r3
 800735c:	68fb      	ldr	r3, [r7, #12]
 800735e:	699b      	ldr	r3, [r3, #24]
 8007360:	429a      	cmp	r2, r3
 8007362:	d302      	bcc.n	800736a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007364:	2301      	movs	r3, #1
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	e01b      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800736a:	4b10      	ldr	r3, [pc, #64]	@ (80073ac <prvInsertTimerInActiveList+0x7c>)
 800736c:	681a      	ldr	r2, [r3, #0]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	3304      	adds	r3, #4
 8007372:	4619      	mov	r1, r3
 8007374:	4610      	mov	r0, r2
 8007376:	f7fe f97c 	bl	8005672 <vListInsert>
 800737a:	e012      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800737c:	687a      	ldr	r2, [r7, #4]
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	429a      	cmp	r2, r3
 8007382:	d206      	bcs.n	8007392 <prvInsertTimerInActiveList+0x62>
 8007384:	68ba      	ldr	r2, [r7, #8]
 8007386:	683b      	ldr	r3, [r7, #0]
 8007388:	429a      	cmp	r2, r3
 800738a:	d302      	bcc.n	8007392 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800738c:	2301      	movs	r3, #1
 800738e:	617b      	str	r3, [r7, #20]
 8007390:	e007      	b.n	80073a2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007392:	4b07      	ldr	r3, [pc, #28]	@ (80073b0 <prvInsertTimerInActiveList+0x80>)
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	3304      	adds	r3, #4
 800739a:	4619      	mov	r1, r3
 800739c:	4610      	mov	r0, r2
 800739e:	f7fe f968 	bl	8005672 <vListInsert>
		}
	}

	return xProcessTimerNow;
 80073a2:	697b      	ldr	r3, [r7, #20]
}
 80073a4:	4618      	mov	r0, r3
 80073a6:	3718      	adds	r7, #24
 80073a8:	46bd      	mov	sp, r7
 80073aa:	bd80      	pop	{r7, pc}
 80073ac:	20000f30 	.word	0x20000f30
 80073b0:	20000f2c 	.word	0x20000f2c

080073b4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b08e      	sub	sp, #56	@ 0x38
 80073b8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80073ba:	e0ce      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 80073bc:	687b      	ldr	r3, [r7, #4]
 80073be:	2b00      	cmp	r3, #0
 80073c0:	da19      	bge.n	80073f6 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 80073c2:	1d3b      	adds	r3, r7, #4
 80073c4:	3304      	adds	r3, #4
 80073c6:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 80073c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d10b      	bne.n	80073e6 <prvProcessReceivedCommands+0x32>
	__asm volatile
 80073ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80073d2:	f383 8811 	msr	BASEPRI, r3
 80073d6:	f3bf 8f6f 	isb	sy
 80073da:	f3bf 8f4f 	dsb	sy
 80073de:	61fb      	str	r3, [r7, #28]
}
 80073e0:	bf00      	nop
 80073e2:	bf00      	nop
 80073e4:	e7fd      	b.n	80073e2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80073e6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80073e8:	681b      	ldr	r3, [r3, #0]
 80073ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073ec:	6850      	ldr	r0, [r2, #4]
 80073ee:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80073f0:	6892      	ldr	r2, [r2, #8]
 80073f2:	4611      	mov	r1, r2
 80073f4:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	2b00      	cmp	r3, #0
 80073fa:	f2c0 80ae 	blt.w	800755a <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80073fe:	68fb      	ldr	r3, [r7, #12]
 8007400:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007402:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007404:	695b      	ldr	r3, [r3, #20]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d004      	beq.n	8007414 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800740a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800740c:	3304      	adds	r3, #4
 800740e:	4618      	mov	r0, r3
 8007410:	f7fe f968 	bl	80056e4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007414:	463b      	mov	r3, r7
 8007416:	4618      	mov	r0, r3
 8007418:	f7ff ff6a 	bl	80072f0 <prvSampleTimeNow>
 800741c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	2b09      	cmp	r3, #9
 8007422:	f200 8097 	bhi.w	8007554 <prvProcessReceivedCommands+0x1a0>
 8007426:	a201      	add	r2, pc, #4	@ (adr r2, 800742c <prvProcessReceivedCommands+0x78>)
 8007428:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800742c:	08007455 	.word	0x08007455
 8007430:	08007455 	.word	0x08007455
 8007434:	08007455 	.word	0x08007455
 8007438:	080074cb 	.word	0x080074cb
 800743c:	080074df 	.word	0x080074df
 8007440:	0800752b 	.word	0x0800752b
 8007444:	08007455 	.word	0x08007455
 8007448:	08007455 	.word	0x08007455
 800744c:	080074cb 	.word	0x080074cb
 8007450:	080074df 	.word	0x080074df
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007454:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007456:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800745a:	f043 0301 	orr.w	r3, r3, #1
 800745e:	b2da      	uxtb	r2, r3
 8007460:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007462:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007466:	68ba      	ldr	r2, [r7, #8]
 8007468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800746a:	699b      	ldr	r3, [r3, #24]
 800746c:	18d1      	adds	r1, r2, r3
 800746e:	68bb      	ldr	r3, [r7, #8]
 8007470:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007472:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007474:	f7ff ff5c 	bl	8007330 <prvInsertTimerInActiveList>
 8007478:	4603      	mov	r3, r0
 800747a:	2b00      	cmp	r3, #0
 800747c:	d06c      	beq.n	8007558 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800747e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007480:	6a1b      	ldr	r3, [r3, #32]
 8007482:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007484:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007486:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007488:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800748c:	f003 0304 	and.w	r3, r3, #4
 8007490:	2b00      	cmp	r3, #0
 8007492:	d061      	beq.n	8007558 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007494:	68ba      	ldr	r2, [r7, #8]
 8007496:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007498:	699b      	ldr	r3, [r3, #24]
 800749a:	441a      	add	r2, r3
 800749c:	2300      	movs	r3, #0
 800749e:	9300      	str	r3, [sp, #0]
 80074a0:	2300      	movs	r3, #0
 80074a2:	2100      	movs	r1, #0
 80074a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80074a6:	f7ff fe01 	bl	80070ac <xTimerGenericCommand>
 80074aa:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 80074ac:	6a3b      	ldr	r3, [r7, #32]
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d152      	bne.n	8007558 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 80074b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074b6:	f383 8811 	msr	BASEPRI, r3
 80074ba:	f3bf 8f6f 	isb	sy
 80074be:	f3bf 8f4f 	dsb	sy
 80074c2:	61bb      	str	r3, [r7, #24]
}
 80074c4:	bf00      	nop
 80074c6:	bf00      	nop
 80074c8:	e7fd      	b.n	80074c6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80074ca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074cc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074d0:	f023 0301 	bic.w	r3, r3, #1
 80074d4:	b2da      	uxtb	r2, r3
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80074dc:	e03d      	b.n	800755a <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80074de:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074e0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80074e4:	f043 0301 	orr.w	r3, r3, #1
 80074e8:	b2da      	uxtb	r2, r3
 80074ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074ec:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80074f0:	68ba      	ldr	r2, [r7, #8]
 80074f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f4:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80074f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074f8:	699b      	ldr	r3, [r3, #24]
 80074fa:	2b00      	cmp	r3, #0
 80074fc:	d10b      	bne.n	8007516 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80074fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007502:	f383 8811 	msr	BASEPRI, r3
 8007506:	f3bf 8f6f 	isb	sy
 800750a:	f3bf 8f4f 	dsb	sy
 800750e:	617b      	str	r3, [r7, #20]
}
 8007510:	bf00      	nop
 8007512:	bf00      	nop
 8007514:	e7fd      	b.n	8007512 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007518:	699a      	ldr	r2, [r3, #24]
 800751a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800751c:	18d1      	adds	r1, r2, r3
 800751e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007520:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007522:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007524:	f7ff ff04 	bl	8007330 <prvInsertTimerInActiveList>
					break;
 8007528:	e017      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800752a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007530:	f003 0302 	and.w	r3, r3, #2
 8007534:	2b00      	cmp	r3, #0
 8007536:	d103      	bne.n	8007540 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007538:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800753a:	f000 fbe5 	bl	8007d08 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800753e:	e00c      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007542:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007546:	f023 0301 	bic.w	r3, r3, #1
 800754a:	b2da      	uxtb	r2, r3
 800754c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007552:	e002      	b.n	800755a <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007554:	bf00      	nop
 8007556:	e000      	b.n	800755a <prvProcessReceivedCommands+0x1a6>
					break;
 8007558:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800755a:	4b08      	ldr	r3, [pc, #32]	@ (800757c <prvProcessReceivedCommands+0x1c8>)
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	1d39      	adds	r1, r7, #4
 8007560:	2200      	movs	r2, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f7fe fbce 	bl	8005d04 <xQueueReceive>
 8007568:	4603      	mov	r3, r0
 800756a:	2b00      	cmp	r3, #0
 800756c:	f47f af26 	bne.w	80073bc <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8007570:	bf00      	nop
 8007572:	bf00      	nop
 8007574:	3730      	adds	r7, #48	@ 0x30
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}
 800757a:	bf00      	nop
 800757c:	20000f34 	.word	0x20000f34

08007580 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8007580:	b580      	push	{r7, lr}
 8007582:	b088      	sub	sp, #32
 8007584:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007586:	e049      	b.n	800761c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007588:	4b2e      	ldr	r3, [pc, #184]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 800758a:	681b      	ldr	r3, [r3, #0]
 800758c:	68db      	ldr	r3, [r3, #12]
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007592:	4b2c      	ldr	r3, [pc, #176]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007594:	681b      	ldr	r3, [r3, #0]
 8007596:	68db      	ldr	r3, [r3, #12]
 8007598:	68db      	ldr	r3, [r3, #12]
 800759a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800759c:	68fb      	ldr	r3, [r7, #12]
 800759e:	3304      	adds	r3, #4
 80075a0:	4618      	mov	r0, r3
 80075a2:	f7fe f89f 	bl	80056e4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	6a1b      	ldr	r3, [r3, #32]
 80075aa:	68f8      	ldr	r0, [r7, #12]
 80075ac:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b4:	f003 0304 	and.w	r3, r3, #4
 80075b8:	2b00      	cmp	r3, #0
 80075ba:	d02f      	beq.n	800761c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80075bc:	68fb      	ldr	r3, [r7, #12]
 80075be:	699b      	ldr	r3, [r3, #24]
 80075c0:	693a      	ldr	r2, [r7, #16]
 80075c2:	4413      	add	r3, r2
 80075c4:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80075c6:	68ba      	ldr	r2, [r7, #8]
 80075c8:	693b      	ldr	r3, [r7, #16]
 80075ca:	429a      	cmp	r2, r3
 80075cc:	d90e      	bls.n	80075ec <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	68ba      	ldr	r2, [r7, #8]
 80075d2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	68fa      	ldr	r2, [r7, #12]
 80075d8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075da:	4b1a      	ldr	r3, [pc, #104]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 80075dc:	681a      	ldr	r2, [r3, #0]
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	3304      	adds	r3, #4
 80075e2:	4619      	mov	r1, r3
 80075e4:	4610      	mov	r0, r2
 80075e6:	f7fe f844 	bl	8005672 <vListInsert>
 80075ea:	e017      	b.n	800761c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075ec:	2300      	movs	r3, #0
 80075ee:	9300      	str	r3, [sp, #0]
 80075f0:	2300      	movs	r3, #0
 80075f2:	693a      	ldr	r2, [r7, #16]
 80075f4:	2100      	movs	r1, #0
 80075f6:	68f8      	ldr	r0, [r7, #12]
 80075f8:	f7ff fd58 	bl	80070ac <xTimerGenericCommand>
 80075fc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	2b00      	cmp	r3, #0
 8007602:	d10b      	bne.n	800761c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007604:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007608:	f383 8811 	msr	BASEPRI, r3
 800760c:	f3bf 8f6f 	isb	sy
 8007610:	f3bf 8f4f 	dsb	sy
 8007614:	603b      	str	r3, [r7, #0]
}
 8007616:	bf00      	nop
 8007618:	bf00      	nop
 800761a:	e7fd      	b.n	8007618 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800761c:	4b09      	ldr	r3, [pc, #36]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	2b00      	cmp	r3, #0
 8007624:	d1b0      	bne.n	8007588 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007626:	4b07      	ldr	r3, [pc, #28]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800762c:	4b06      	ldr	r3, [pc, #24]	@ (8007648 <prvSwitchTimerLists+0xc8>)
 800762e:	681b      	ldr	r3, [r3, #0]
 8007630:	4a04      	ldr	r2, [pc, #16]	@ (8007644 <prvSwitchTimerLists+0xc4>)
 8007632:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007634:	4a04      	ldr	r2, [pc, #16]	@ (8007648 <prvSwitchTimerLists+0xc8>)
 8007636:	697b      	ldr	r3, [r7, #20]
 8007638:	6013      	str	r3, [r2, #0]
}
 800763a:	bf00      	nop
 800763c:	3718      	adds	r7, #24
 800763e:	46bd      	mov	sp, r7
 8007640:	bd80      	pop	{r7, pc}
 8007642:	bf00      	nop
 8007644:	20000f2c 	.word	0x20000f2c
 8007648:	20000f30 	.word	0x20000f30

0800764c <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b082      	sub	sp, #8
 8007650:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007652:	f000 f969 	bl	8007928 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007656:	4b15      	ldr	r3, [pc, #84]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	2b00      	cmp	r3, #0
 800765c:	d120      	bne.n	80076a0 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800765e:	4814      	ldr	r0, [pc, #80]	@ (80076b0 <prvCheckForValidListAndQueue+0x64>)
 8007660:	f7fd ffb6 	bl	80055d0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007664:	4813      	ldr	r0, [pc, #76]	@ (80076b4 <prvCheckForValidListAndQueue+0x68>)
 8007666:	f7fd ffb3 	bl	80055d0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800766a:	4b13      	ldr	r3, [pc, #76]	@ (80076b8 <prvCheckForValidListAndQueue+0x6c>)
 800766c:	4a10      	ldr	r2, [pc, #64]	@ (80076b0 <prvCheckForValidListAndQueue+0x64>)
 800766e:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007670:	4b12      	ldr	r3, [pc, #72]	@ (80076bc <prvCheckForValidListAndQueue+0x70>)
 8007672:	4a10      	ldr	r2, [pc, #64]	@ (80076b4 <prvCheckForValidListAndQueue+0x68>)
 8007674:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007676:	2300      	movs	r3, #0
 8007678:	9300      	str	r3, [sp, #0]
 800767a:	4b11      	ldr	r3, [pc, #68]	@ (80076c0 <prvCheckForValidListAndQueue+0x74>)
 800767c:	4a11      	ldr	r2, [pc, #68]	@ (80076c4 <prvCheckForValidListAndQueue+0x78>)
 800767e:	2110      	movs	r1, #16
 8007680:	200a      	movs	r0, #10
 8007682:	f7fe f8c3 	bl	800580c <xQueueGenericCreateStatic>
 8007686:	4603      	mov	r3, r0
 8007688:	4a08      	ldr	r2, [pc, #32]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 800768a:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800768c:	4b07      	ldr	r3, [pc, #28]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 800768e:	681b      	ldr	r3, [r3, #0]
 8007690:	2b00      	cmp	r3, #0
 8007692:	d005      	beq.n	80076a0 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007694:	4b05      	ldr	r3, [pc, #20]	@ (80076ac <prvCheckForValidListAndQueue+0x60>)
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	490b      	ldr	r1, [pc, #44]	@ (80076c8 <prvCheckForValidListAndQueue+0x7c>)
 800769a:	4618      	mov	r0, r3
 800769c:	f7fe fd24 	bl	80060e8 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80076a0:	f000 f974 	bl	800798c <vPortExitCritical>
}
 80076a4:	bf00      	nop
 80076a6:	46bd      	mov	sp, r7
 80076a8:	bd80      	pop	{r7, pc}
 80076aa:	bf00      	nop
 80076ac:	20000f34 	.word	0x20000f34
 80076b0:	20000f04 	.word	0x20000f04
 80076b4:	20000f18 	.word	0x20000f18
 80076b8:	20000f2c 	.word	0x20000f2c
 80076bc:	20000f30 	.word	0x20000f30
 80076c0:	20000fe0 	.word	0x20000fe0
 80076c4:	20000f40 	.word	0x20000f40
 80076c8:	08009298 	.word	0x08009298

080076cc <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80076cc:	b480      	push	{r7}
 80076ce:	b085      	sub	sp, #20
 80076d0:	af00      	add	r7, sp, #0
 80076d2:	60f8      	str	r0, [r7, #12]
 80076d4:	60b9      	str	r1, [r7, #8]
 80076d6:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80076d8:	68fb      	ldr	r3, [r7, #12]
 80076da:	3b04      	subs	r3, #4
 80076dc:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80076de:	68fb      	ldr	r3, [r7, #12]
 80076e0:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80076e4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076e6:	68fb      	ldr	r3, [r7, #12]
 80076e8:	3b04      	subs	r3, #4
 80076ea:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80076ec:	68bb      	ldr	r3, [r7, #8]
 80076ee:	f023 0201 	bic.w	r2, r3, #1
 80076f2:	68fb      	ldr	r3, [r7, #12]
 80076f4:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	3b04      	subs	r3, #4
 80076fa:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80076fc:	4a0c      	ldr	r2, [pc, #48]	@ (8007730 <pxPortInitialiseStack+0x64>)
 80076fe:	68fb      	ldr	r3, [r7, #12]
 8007700:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	3b14      	subs	r3, #20
 8007706:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007708:	687a      	ldr	r2, [r7, #4]
 800770a:	68fb      	ldr	r3, [r7, #12]
 800770c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	3b04      	subs	r3, #4
 8007712:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007714:	68fb      	ldr	r3, [r7, #12]
 8007716:	f06f 0202 	mvn.w	r2, #2
 800771a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	3b20      	subs	r3, #32
 8007720:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007722:	68fb      	ldr	r3, [r7, #12]
}
 8007724:	4618      	mov	r0, r3
 8007726:	3714      	adds	r7, #20
 8007728:	46bd      	mov	sp, r7
 800772a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800772e:	4770      	bx	lr
 8007730:	08007735 	.word	0x08007735

08007734 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007734:	b480      	push	{r7}
 8007736:	b085      	sub	sp, #20
 8007738:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800773a:	2300      	movs	r3, #0
 800773c:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800773e:	4b13      	ldr	r3, [pc, #76]	@ (800778c <prvTaskExitError+0x58>)
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007746:	d00b      	beq.n	8007760 <prvTaskExitError+0x2c>
	__asm volatile
 8007748:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800774c:	f383 8811 	msr	BASEPRI, r3
 8007750:	f3bf 8f6f 	isb	sy
 8007754:	f3bf 8f4f 	dsb	sy
 8007758:	60fb      	str	r3, [r7, #12]
}
 800775a:	bf00      	nop
 800775c:	bf00      	nop
 800775e:	e7fd      	b.n	800775c <prvTaskExitError+0x28>
	__asm volatile
 8007760:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007764:	f383 8811 	msr	BASEPRI, r3
 8007768:	f3bf 8f6f 	isb	sy
 800776c:	f3bf 8f4f 	dsb	sy
 8007770:	60bb      	str	r3, [r7, #8]
}
 8007772:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007774:	bf00      	nop
 8007776:	687b      	ldr	r3, [r7, #4]
 8007778:	2b00      	cmp	r3, #0
 800777a:	d0fc      	beq.n	8007776 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	3714      	adds	r7, #20
 8007782:	46bd      	mov	sp, r7
 8007784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	2000000c 	.word	0x2000000c

08007790 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007790:	4b07      	ldr	r3, [pc, #28]	@ (80077b0 <pxCurrentTCBConst2>)
 8007792:	6819      	ldr	r1, [r3, #0]
 8007794:	6808      	ldr	r0, [r1, #0]
 8007796:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800779a:	f380 8809 	msr	PSP, r0
 800779e:	f3bf 8f6f 	isb	sy
 80077a2:	f04f 0000 	mov.w	r0, #0
 80077a6:	f380 8811 	msr	BASEPRI, r0
 80077aa:	4770      	bx	lr
 80077ac:	f3af 8000 	nop.w

080077b0 <pxCurrentTCBConst2>:
 80077b0:	20000a04 	.word	0x20000a04
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80077b4:	bf00      	nop
 80077b6:	bf00      	nop

080077b8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80077b8:	4808      	ldr	r0, [pc, #32]	@ (80077dc <prvPortStartFirstTask+0x24>)
 80077ba:	6800      	ldr	r0, [r0, #0]
 80077bc:	6800      	ldr	r0, [r0, #0]
 80077be:	f380 8808 	msr	MSP, r0
 80077c2:	f04f 0000 	mov.w	r0, #0
 80077c6:	f380 8814 	msr	CONTROL, r0
 80077ca:	b662      	cpsie	i
 80077cc:	b661      	cpsie	f
 80077ce:	f3bf 8f4f 	dsb	sy
 80077d2:	f3bf 8f6f 	isb	sy
 80077d6:	df00      	svc	0
 80077d8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80077da:	bf00      	nop
 80077dc:	e000ed08 	.word	0xe000ed08

080077e0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80077e0:	b580      	push	{r7, lr}
 80077e2:	b086      	sub	sp, #24
 80077e4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80077e6:	4b47      	ldr	r3, [pc, #284]	@ (8007904 <xPortStartScheduler+0x124>)
 80077e8:	681b      	ldr	r3, [r3, #0]
 80077ea:	4a47      	ldr	r2, [pc, #284]	@ (8007908 <xPortStartScheduler+0x128>)
 80077ec:	4293      	cmp	r3, r2
 80077ee:	d10b      	bne.n	8007808 <xPortStartScheduler+0x28>
	__asm volatile
 80077f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077f4:	f383 8811 	msr	BASEPRI, r3
 80077f8:	f3bf 8f6f 	isb	sy
 80077fc:	f3bf 8f4f 	dsb	sy
 8007800:	60fb      	str	r3, [r7, #12]
}
 8007802:	bf00      	nop
 8007804:	bf00      	nop
 8007806:	e7fd      	b.n	8007804 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007808:	4b3e      	ldr	r3, [pc, #248]	@ (8007904 <xPortStartScheduler+0x124>)
 800780a:	681b      	ldr	r3, [r3, #0]
 800780c:	4a3f      	ldr	r2, [pc, #252]	@ (800790c <xPortStartScheduler+0x12c>)
 800780e:	4293      	cmp	r3, r2
 8007810:	d10b      	bne.n	800782a <xPortStartScheduler+0x4a>
	__asm volatile
 8007812:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007816:	f383 8811 	msr	BASEPRI, r3
 800781a:	f3bf 8f6f 	isb	sy
 800781e:	f3bf 8f4f 	dsb	sy
 8007822:	613b      	str	r3, [r7, #16]
}
 8007824:	bf00      	nop
 8007826:	bf00      	nop
 8007828:	e7fd      	b.n	8007826 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800782a:	4b39      	ldr	r3, [pc, #228]	@ (8007910 <xPortStartScheduler+0x130>)
 800782c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800782e:	697b      	ldr	r3, [r7, #20]
 8007830:	781b      	ldrb	r3, [r3, #0]
 8007832:	b2db      	uxtb	r3, r3
 8007834:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007836:	697b      	ldr	r3, [r7, #20]
 8007838:	22ff      	movs	r2, #255	@ 0xff
 800783a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	781b      	ldrb	r3, [r3, #0]
 8007840:	b2db      	uxtb	r3, r3
 8007842:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007844:	78fb      	ldrb	r3, [r7, #3]
 8007846:	b2db      	uxtb	r3, r3
 8007848:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800784c:	b2da      	uxtb	r2, r3
 800784e:	4b31      	ldr	r3, [pc, #196]	@ (8007914 <xPortStartScheduler+0x134>)
 8007850:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007852:	4b31      	ldr	r3, [pc, #196]	@ (8007918 <xPortStartScheduler+0x138>)
 8007854:	2207      	movs	r2, #7
 8007856:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007858:	e009      	b.n	800786e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800785a:	4b2f      	ldr	r3, [pc, #188]	@ (8007918 <xPortStartScheduler+0x138>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	3b01      	subs	r3, #1
 8007860:	4a2d      	ldr	r2, [pc, #180]	@ (8007918 <xPortStartScheduler+0x138>)
 8007862:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007864:	78fb      	ldrb	r3, [r7, #3]
 8007866:	b2db      	uxtb	r3, r3
 8007868:	005b      	lsls	r3, r3, #1
 800786a:	b2db      	uxtb	r3, r3
 800786c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800786e:	78fb      	ldrb	r3, [r7, #3]
 8007870:	b2db      	uxtb	r3, r3
 8007872:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007876:	2b80      	cmp	r3, #128	@ 0x80
 8007878:	d0ef      	beq.n	800785a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800787a:	4b27      	ldr	r3, [pc, #156]	@ (8007918 <xPortStartScheduler+0x138>)
 800787c:	681b      	ldr	r3, [r3, #0]
 800787e:	f1c3 0307 	rsb	r3, r3, #7
 8007882:	2b04      	cmp	r3, #4
 8007884:	d00b      	beq.n	800789e <xPortStartScheduler+0xbe>
	__asm volatile
 8007886:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800788a:	f383 8811 	msr	BASEPRI, r3
 800788e:	f3bf 8f6f 	isb	sy
 8007892:	f3bf 8f4f 	dsb	sy
 8007896:	60bb      	str	r3, [r7, #8]
}
 8007898:	bf00      	nop
 800789a:	bf00      	nop
 800789c:	e7fd      	b.n	800789a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800789e:	4b1e      	ldr	r3, [pc, #120]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	021b      	lsls	r3, r3, #8
 80078a4:	4a1c      	ldr	r2, [pc, #112]	@ (8007918 <xPortStartScheduler+0x138>)
 80078a6:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80078a8:	4b1b      	ldr	r3, [pc, #108]	@ (8007918 <xPortStartScheduler+0x138>)
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80078b0:	4a19      	ldr	r2, [pc, #100]	@ (8007918 <xPortStartScheduler+0x138>)
 80078b2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	b2da      	uxtb	r2, r3
 80078b8:	697b      	ldr	r3, [r7, #20]
 80078ba:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80078bc:	4b17      	ldr	r3, [pc, #92]	@ (800791c <xPortStartScheduler+0x13c>)
 80078be:	681b      	ldr	r3, [r3, #0]
 80078c0:	4a16      	ldr	r2, [pc, #88]	@ (800791c <xPortStartScheduler+0x13c>)
 80078c2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80078c6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80078c8:	4b14      	ldr	r3, [pc, #80]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	4a13      	ldr	r2, [pc, #76]	@ (800791c <xPortStartScheduler+0x13c>)
 80078ce:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80078d2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80078d4:	f000 f8da 	bl	8007a8c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80078d8:	4b11      	ldr	r3, [pc, #68]	@ (8007920 <xPortStartScheduler+0x140>)
 80078da:	2200      	movs	r2, #0
 80078dc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80078de:	f000 f8f9 	bl	8007ad4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80078e2:	4b10      	ldr	r3, [pc, #64]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	4a0f      	ldr	r2, [pc, #60]	@ (8007924 <xPortStartScheduler+0x144>)
 80078e8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80078ec:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80078ee:	f7ff ff63 	bl	80077b8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80078f2:	f7ff f831 	bl	8006958 <vTaskSwitchContext>
	prvTaskExitError();
 80078f6:	f7ff ff1d 	bl	8007734 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80078fa:	2300      	movs	r3, #0
}
 80078fc:	4618      	mov	r0, r3
 80078fe:	3718      	adds	r7, #24
 8007900:	46bd      	mov	sp, r7
 8007902:	bd80      	pop	{r7, pc}
 8007904:	e000ed00 	.word	0xe000ed00
 8007908:	410fc271 	.word	0x410fc271
 800790c:	410fc270 	.word	0x410fc270
 8007910:	e000e400 	.word	0xe000e400
 8007914:	20001030 	.word	0x20001030
 8007918:	20001034 	.word	0x20001034
 800791c:	e000ed20 	.word	0xe000ed20
 8007920:	2000000c 	.word	0x2000000c
 8007924:	e000ef34 	.word	0xe000ef34

08007928 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007928:	b480      	push	{r7}
 800792a:	b083      	sub	sp, #12
 800792c:	af00      	add	r7, sp, #0
	__asm volatile
 800792e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007932:	f383 8811 	msr	BASEPRI, r3
 8007936:	f3bf 8f6f 	isb	sy
 800793a:	f3bf 8f4f 	dsb	sy
 800793e:	607b      	str	r3, [r7, #4]
}
 8007940:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007942:	4b10      	ldr	r3, [pc, #64]	@ (8007984 <vPortEnterCritical+0x5c>)
 8007944:	681b      	ldr	r3, [r3, #0]
 8007946:	3301      	adds	r3, #1
 8007948:	4a0e      	ldr	r2, [pc, #56]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800794c:	4b0d      	ldr	r3, [pc, #52]	@ (8007984 <vPortEnterCritical+0x5c>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b01      	cmp	r3, #1
 8007952:	d110      	bne.n	8007976 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007954:	4b0c      	ldr	r3, [pc, #48]	@ (8007988 <vPortEnterCritical+0x60>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	b2db      	uxtb	r3, r3
 800795a:	2b00      	cmp	r3, #0
 800795c:	d00b      	beq.n	8007976 <vPortEnterCritical+0x4e>
	__asm volatile
 800795e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007962:	f383 8811 	msr	BASEPRI, r3
 8007966:	f3bf 8f6f 	isb	sy
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	603b      	str	r3, [r7, #0]
}
 8007970:	bf00      	nop
 8007972:	bf00      	nop
 8007974:	e7fd      	b.n	8007972 <vPortEnterCritical+0x4a>
	}
}
 8007976:	bf00      	nop
 8007978:	370c      	adds	r7, #12
 800797a:	46bd      	mov	sp, r7
 800797c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007980:	4770      	bx	lr
 8007982:	bf00      	nop
 8007984:	2000000c 	.word	0x2000000c
 8007988:	e000ed04 	.word	0xe000ed04

0800798c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800798c:	b480      	push	{r7}
 800798e:	b083      	sub	sp, #12
 8007990:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007992:	4b12      	ldr	r3, [pc, #72]	@ (80079dc <vPortExitCritical+0x50>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	2b00      	cmp	r3, #0
 8007998:	d10b      	bne.n	80079b2 <vPortExitCritical+0x26>
	__asm volatile
 800799a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800799e:	f383 8811 	msr	BASEPRI, r3
 80079a2:	f3bf 8f6f 	isb	sy
 80079a6:	f3bf 8f4f 	dsb	sy
 80079aa:	607b      	str	r3, [r7, #4]
}
 80079ac:	bf00      	nop
 80079ae:	bf00      	nop
 80079b0:	e7fd      	b.n	80079ae <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80079b2:	4b0a      	ldr	r3, [pc, #40]	@ (80079dc <vPortExitCritical+0x50>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	3b01      	subs	r3, #1
 80079b8:	4a08      	ldr	r2, [pc, #32]	@ (80079dc <vPortExitCritical+0x50>)
 80079ba:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80079bc:	4b07      	ldr	r3, [pc, #28]	@ (80079dc <vPortExitCritical+0x50>)
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	2b00      	cmp	r3, #0
 80079c2:	d105      	bne.n	80079d0 <vPortExitCritical+0x44>
 80079c4:	2300      	movs	r3, #0
 80079c6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80079c8:	683b      	ldr	r3, [r7, #0]
 80079ca:	f383 8811 	msr	BASEPRI, r3
}
 80079ce:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80079d0:	bf00      	nop
 80079d2:	370c      	adds	r7, #12
 80079d4:	46bd      	mov	sp, r7
 80079d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079da:	4770      	bx	lr
 80079dc:	2000000c 	.word	0x2000000c

080079e0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80079e0:	f3ef 8009 	mrs	r0, PSP
 80079e4:	f3bf 8f6f 	isb	sy
 80079e8:	4b15      	ldr	r3, [pc, #84]	@ (8007a40 <pxCurrentTCBConst>)
 80079ea:	681a      	ldr	r2, [r3, #0]
 80079ec:	f01e 0f10 	tst.w	lr, #16
 80079f0:	bf08      	it	eq
 80079f2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80079f6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80079fa:	6010      	str	r0, [r2, #0]
 80079fc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007a00:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007a04:	f380 8811 	msr	BASEPRI, r0
 8007a08:	f3bf 8f4f 	dsb	sy
 8007a0c:	f3bf 8f6f 	isb	sy
 8007a10:	f7fe ffa2 	bl	8006958 <vTaskSwitchContext>
 8007a14:	f04f 0000 	mov.w	r0, #0
 8007a18:	f380 8811 	msr	BASEPRI, r0
 8007a1c:	bc09      	pop	{r0, r3}
 8007a1e:	6819      	ldr	r1, [r3, #0]
 8007a20:	6808      	ldr	r0, [r1, #0]
 8007a22:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a26:	f01e 0f10 	tst.w	lr, #16
 8007a2a:	bf08      	it	eq
 8007a2c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007a30:	f380 8809 	msr	PSP, r0
 8007a34:	f3bf 8f6f 	isb	sy
 8007a38:	4770      	bx	lr
 8007a3a:	bf00      	nop
 8007a3c:	f3af 8000 	nop.w

08007a40 <pxCurrentTCBConst>:
 8007a40:	20000a04 	.word	0x20000a04
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007a44:	bf00      	nop
 8007a46:	bf00      	nop

08007a48 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007a48:	b580      	push	{r7, lr}
 8007a4a:	b082      	sub	sp, #8
 8007a4c:	af00      	add	r7, sp, #0
	__asm volatile
 8007a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a52:	f383 8811 	msr	BASEPRI, r3
 8007a56:	f3bf 8f6f 	isb	sy
 8007a5a:	f3bf 8f4f 	dsb	sy
 8007a5e:	607b      	str	r3, [r7, #4]
}
 8007a60:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007a62:	f7fe febf 	bl	80067e4 <xTaskIncrementTick>
 8007a66:	4603      	mov	r3, r0
 8007a68:	2b00      	cmp	r3, #0
 8007a6a:	d003      	beq.n	8007a74 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007a6c:	4b06      	ldr	r3, [pc, #24]	@ (8007a88 <xPortSysTickHandler+0x40>)
 8007a6e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007a72:	601a      	str	r2, [r3, #0]
 8007a74:	2300      	movs	r3, #0
 8007a76:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a78:	683b      	ldr	r3, [r7, #0]
 8007a7a:	f383 8811 	msr	BASEPRI, r3
}
 8007a7e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007a80:	bf00      	nop
 8007a82:	3708      	adds	r7, #8
 8007a84:	46bd      	mov	sp, r7
 8007a86:	bd80      	pop	{r7, pc}
 8007a88:	e000ed04 	.word	0xe000ed04

08007a8c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007a8c:	b480      	push	{r7}
 8007a8e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007a90:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007a92:	2200      	movs	r2, #0
 8007a94:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007a96:	4b0b      	ldr	r3, [pc, #44]	@ (8007ac4 <vPortSetupTimerInterrupt+0x38>)
 8007a98:	2200      	movs	r2, #0
 8007a9a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007a9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007ac8 <vPortSetupTimerInterrupt+0x3c>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a0a      	ldr	r2, [pc, #40]	@ (8007acc <vPortSetupTimerInterrupt+0x40>)
 8007aa2:	fba2 2303 	umull	r2, r3, r2, r3
 8007aa6:	099b      	lsrs	r3, r3, #6
 8007aa8:	4a09      	ldr	r2, [pc, #36]	@ (8007ad0 <vPortSetupTimerInterrupt+0x44>)
 8007aaa:	3b01      	subs	r3, #1
 8007aac:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007aae:	4b04      	ldr	r3, [pc, #16]	@ (8007ac0 <vPortSetupTimerInterrupt+0x34>)
 8007ab0:	2207      	movs	r2, #7
 8007ab2:	601a      	str	r2, [r3, #0]
}
 8007ab4:	bf00      	nop
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007abc:	4770      	bx	lr
 8007abe:	bf00      	nop
 8007ac0:	e000e010 	.word	0xe000e010
 8007ac4:	e000e018 	.word	0xe000e018
 8007ac8:	20000000 	.word	0x20000000
 8007acc:	10624dd3 	.word	0x10624dd3
 8007ad0:	e000e014 	.word	0xe000e014

08007ad4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ad4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007ae4 <vPortEnableVFP+0x10>
 8007ad8:	6801      	ldr	r1, [r0, #0]
 8007ada:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007ade:	6001      	str	r1, [r0, #0]
 8007ae0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007ae2:	bf00      	nop
 8007ae4:	e000ed88 	.word	0xe000ed88

08007ae8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007ae8:	b480      	push	{r7}
 8007aea:	b085      	sub	sp, #20
 8007aec:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007aee:	f3ef 8305 	mrs	r3, IPSR
 8007af2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	2b0f      	cmp	r3, #15
 8007af8:	d915      	bls.n	8007b26 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007afa:	4a18      	ldr	r2, [pc, #96]	@ (8007b5c <vPortValidateInterruptPriority+0x74>)
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	4413      	add	r3, r2
 8007b00:	781b      	ldrb	r3, [r3, #0]
 8007b02:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007b04:	4b16      	ldr	r3, [pc, #88]	@ (8007b60 <vPortValidateInterruptPriority+0x78>)
 8007b06:	781b      	ldrb	r3, [r3, #0]
 8007b08:	7afa      	ldrb	r2, [r7, #11]
 8007b0a:	429a      	cmp	r2, r3
 8007b0c:	d20b      	bcs.n	8007b26 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b12:	f383 8811 	msr	BASEPRI, r3
 8007b16:	f3bf 8f6f 	isb	sy
 8007b1a:	f3bf 8f4f 	dsb	sy
 8007b1e:	607b      	str	r3, [r7, #4]
}
 8007b20:	bf00      	nop
 8007b22:	bf00      	nop
 8007b24:	e7fd      	b.n	8007b22 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007b26:	4b0f      	ldr	r3, [pc, #60]	@ (8007b64 <vPortValidateInterruptPriority+0x7c>)
 8007b28:	681b      	ldr	r3, [r3, #0]
 8007b2a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007b2e:	4b0e      	ldr	r3, [pc, #56]	@ (8007b68 <vPortValidateInterruptPriority+0x80>)
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	429a      	cmp	r2, r3
 8007b34:	d90b      	bls.n	8007b4e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007b36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b3a:	f383 8811 	msr	BASEPRI, r3
 8007b3e:	f3bf 8f6f 	isb	sy
 8007b42:	f3bf 8f4f 	dsb	sy
 8007b46:	603b      	str	r3, [r7, #0]
}
 8007b48:	bf00      	nop
 8007b4a:	bf00      	nop
 8007b4c:	e7fd      	b.n	8007b4a <vPortValidateInterruptPriority+0x62>
	}
 8007b4e:	bf00      	nop
 8007b50:	3714      	adds	r7, #20
 8007b52:	46bd      	mov	sp, r7
 8007b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b58:	4770      	bx	lr
 8007b5a:	bf00      	nop
 8007b5c:	e000e3f0 	.word	0xe000e3f0
 8007b60:	20001030 	.word	0x20001030
 8007b64:	e000ed0c 	.word	0xe000ed0c
 8007b68:	20001034 	.word	0x20001034

08007b6c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007b6c:	b580      	push	{r7, lr}
 8007b6e:	b08a      	sub	sp, #40	@ 0x28
 8007b70:	af00      	add	r7, sp, #0
 8007b72:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007b74:	2300      	movs	r3, #0
 8007b76:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007b78:	f7fe fd78 	bl	800666c <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007b7c:	4b5c      	ldr	r3, [pc, #368]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007b7e:	681b      	ldr	r3, [r3, #0]
 8007b80:	2b00      	cmp	r3, #0
 8007b82:	d101      	bne.n	8007b88 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007b84:	f000 f924 	bl	8007dd0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007b88:	4b5a      	ldr	r3, [pc, #360]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007b8a:	681a      	ldr	r2, [r3, #0]
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	4013      	ands	r3, r2
 8007b90:	2b00      	cmp	r3, #0
 8007b92:	f040 8095 	bne.w	8007cc0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007b96:	687b      	ldr	r3, [r7, #4]
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d01e      	beq.n	8007bda <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007b9c:	2208      	movs	r2, #8
 8007b9e:	687b      	ldr	r3, [r7, #4]
 8007ba0:	4413      	add	r3, r2
 8007ba2:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007ba4:	687b      	ldr	r3, [r7, #4]
 8007ba6:	f003 0307 	and.w	r3, r3, #7
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d015      	beq.n	8007bda <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	f023 0307 	bic.w	r3, r3, #7
 8007bb4:	3308      	adds	r3, #8
 8007bb6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	f003 0307 	and.w	r3, r3, #7
 8007bbe:	2b00      	cmp	r3, #0
 8007bc0:	d00b      	beq.n	8007bda <pvPortMalloc+0x6e>
	__asm volatile
 8007bc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bc6:	f383 8811 	msr	BASEPRI, r3
 8007bca:	f3bf 8f6f 	isb	sy
 8007bce:	f3bf 8f4f 	dsb	sy
 8007bd2:	617b      	str	r3, [r7, #20]
}
 8007bd4:	bf00      	nop
 8007bd6:	bf00      	nop
 8007bd8:	e7fd      	b.n	8007bd6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007bda:	687b      	ldr	r3, [r7, #4]
 8007bdc:	2b00      	cmp	r3, #0
 8007bde:	d06f      	beq.n	8007cc0 <pvPortMalloc+0x154>
 8007be0:	4b45      	ldr	r3, [pc, #276]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007be2:	681b      	ldr	r3, [r3, #0]
 8007be4:	687a      	ldr	r2, [r7, #4]
 8007be6:	429a      	cmp	r2, r3
 8007be8:	d86a      	bhi.n	8007cc0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007bea:	4b44      	ldr	r3, [pc, #272]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bec:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007bee:	4b43      	ldr	r3, [pc, #268]	@ (8007cfc <pvPortMalloc+0x190>)
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007bf4:	e004      	b.n	8007c00 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bf8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007bfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007bfc:	681b      	ldr	r3, [r3, #0]
 8007bfe:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c02:	685b      	ldr	r3, [r3, #4]
 8007c04:	687a      	ldr	r2, [r7, #4]
 8007c06:	429a      	cmp	r2, r3
 8007c08:	d903      	bls.n	8007c12 <pvPortMalloc+0xa6>
 8007c0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d1f1      	bne.n	8007bf6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007c12:	4b37      	ldr	r3, [pc, #220]	@ (8007cf0 <pvPortMalloc+0x184>)
 8007c14:	681b      	ldr	r3, [r3, #0]
 8007c16:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c18:	429a      	cmp	r2, r3
 8007c1a:	d051      	beq.n	8007cc0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007c1c:	6a3b      	ldr	r3, [r7, #32]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	2208      	movs	r2, #8
 8007c22:	4413      	add	r3, r2
 8007c24:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c28:	681a      	ldr	r2, [r3, #0]
 8007c2a:	6a3b      	ldr	r3, [r7, #32]
 8007c2c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007c2e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c30:	685a      	ldr	r2, [r3, #4]
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	1ad2      	subs	r2, r2, r3
 8007c36:	2308      	movs	r3, #8
 8007c38:	005b      	lsls	r3, r3, #1
 8007c3a:	429a      	cmp	r2, r3
 8007c3c:	d920      	bls.n	8007c80 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007c3e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007c40:	687b      	ldr	r3, [r7, #4]
 8007c42:	4413      	add	r3, r2
 8007c44:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c46:	69bb      	ldr	r3, [r7, #24]
 8007c48:	f003 0307 	and.w	r3, r3, #7
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	d00b      	beq.n	8007c68 <pvPortMalloc+0xfc>
	__asm volatile
 8007c50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c54:	f383 8811 	msr	BASEPRI, r3
 8007c58:	f3bf 8f6f 	isb	sy
 8007c5c:	f3bf 8f4f 	dsb	sy
 8007c60:	613b      	str	r3, [r7, #16]
}
 8007c62:	bf00      	nop
 8007c64:	bf00      	nop
 8007c66:	e7fd      	b.n	8007c64 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007c68:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c6a:	685a      	ldr	r2, [r3, #4]
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	1ad2      	subs	r2, r2, r3
 8007c70:	69bb      	ldr	r3, [r7, #24]
 8007c72:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007c74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c76:	687a      	ldr	r2, [r7, #4]
 8007c78:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007c7a:	69b8      	ldr	r0, [r7, #24]
 8007c7c:	f000 f90a 	bl	8007e94 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007c80:	4b1d      	ldr	r3, [pc, #116]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c82:	681a      	ldr	r2, [r3, #0]
 8007c84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007c86:	685b      	ldr	r3, [r3, #4]
 8007c88:	1ad3      	subs	r3, r2, r3
 8007c8a:	4a1b      	ldr	r2, [pc, #108]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c8c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007c8e:	4b1a      	ldr	r3, [pc, #104]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c90:	681a      	ldr	r2, [r3, #0]
 8007c92:	4b1b      	ldr	r3, [pc, #108]	@ (8007d00 <pvPortMalloc+0x194>)
 8007c94:	681b      	ldr	r3, [r3, #0]
 8007c96:	429a      	cmp	r2, r3
 8007c98:	d203      	bcs.n	8007ca2 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007c9a:	4b17      	ldr	r3, [pc, #92]	@ (8007cf8 <pvPortMalloc+0x18c>)
 8007c9c:	681b      	ldr	r3, [r3, #0]
 8007c9e:	4a18      	ldr	r2, [pc, #96]	@ (8007d00 <pvPortMalloc+0x194>)
 8007ca0:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007ca2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ca4:	685a      	ldr	r2, [r3, #4]
 8007ca6:	4b13      	ldr	r3, [pc, #76]	@ (8007cf4 <pvPortMalloc+0x188>)
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	431a      	orrs	r2, r3
 8007cac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cae:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007cb0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007cb6:	4b13      	ldr	r3, [pc, #76]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cb8:	681b      	ldr	r3, [r3, #0]
 8007cba:	3301      	adds	r3, #1
 8007cbc:	4a11      	ldr	r2, [pc, #68]	@ (8007d04 <pvPortMalloc+0x198>)
 8007cbe:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007cc0:	f7fe fce2 	bl	8006688 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007cc4:	69fb      	ldr	r3, [r7, #28]
 8007cc6:	f003 0307 	and.w	r3, r3, #7
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00b      	beq.n	8007ce6 <pvPortMalloc+0x17a>
	__asm volatile
 8007cce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cd2:	f383 8811 	msr	BASEPRI, r3
 8007cd6:	f3bf 8f6f 	isb	sy
 8007cda:	f3bf 8f4f 	dsb	sy
 8007cde:	60fb      	str	r3, [r7, #12]
}
 8007ce0:	bf00      	nop
 8007ce2:	bf00      	nop
 8007ce4:	e7fd      	b.n	8007ce2 <pvPortMalloc+0x176>
	return pvReturn;
 8007ce6:	69fb      	ldr	r3, [r7, #28]
}
 8007ce8:	4618      	mov	r0, r3
 8007cea:	3728      	adds	r7, #40	@ 0x28
 8007cec:	46bd      	mov	sp, r7
 8007cee:	bd80      	pop	{r7, pc}
 8007cf0:	20004c40 	.word	0x20004c40
 8007cf4:	20004c54 	.word	0x20004c54
 8007cf8:	20004c44 	.word	0x20004c44
 8007cfc:	20004c38 	.word	0x20004c38
 8007d00:	20004c48 	.word	0x20004c48
 8007d04:	20004c4c 	.word	0x20004c4c

08007d08 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007d08:	b580      	push	{r7, lr}
 8007d0a:	b086      	sub	sp, #24
 8007d0c:	af00      	add	r7, sp, #0
 8007d0e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007d14:	687b      	ldr	r3, [r7, #4]
 8007d16:	2b00      	cmp	r3, #0
 8007d18:	d04f      	beq.n	8007dba <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007d1a:	2308      	movs	r3, #8
 8007d1c:	425b      	negs	r3, r3
 8007d1e:	697a      	ldr	r2, [r7, #20]
 8007d20:	4413      	add	r3, r2
 8007d22:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007d24:	697b      	ldr	r3, [r7, #20]
 8007d26:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007d28:	693b      	ldr	r3, [r7, #16]
 8007d2a:	685a      	ldr	r2, [r3, #4]
 8007d2c:	4b25      	ldr	r3, [pc, #148]	@ (8007dc4 <vPortFree+0xbc>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4013      	ands	r3, r2
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d10b      	bne.n	8007d4e <vPortFree+0x46>
	__asm volatile
 8007d36:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d3a:	f383 8811 	msr	BASEPRI, r3
 8007d3e:	f3bf 8f6f 	isb	sy
 8007d42:	f3bf 8f4f 	dsb	sy
 8007d46:	60fb      	str	r3, [r7, #12]
}
 8007d48:	bf00      	nop
 8007d4a:	bf00      	nop
 8007d4c:	e7fd      	b.n	8007d4a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007d4e:	693b      	ldr	r3, [r7, #16]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d00b      	beq.n	8007d6e <vPortFree+0x66>
	__asm volatile
 8007d56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d5a:	f383 8811 	msr	BASEPRI, r3
 8007d5e:	f3bf 8f6f 	isb	sy
 8007d62:	f3bf 8f4f 	dsb	sy
 8007d66:	60bb      	str	r3, [r7, #8]
}
 8007d68:	bf00      	nop
 8007d6a:	bf00      	nop
 8007d6c:	e7fd      	b.n	8007d6a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007d6e:	693b      	ldr	r3, [r7, #16]
 8007d70:	685a      	ldr	r2, [r3, #4]
 8007d72:	4b14      	ldr	r3, [pc, #80]	@ (8007dc4 <vPortFree+0xbc>)
 8007d74:	681b      	ldr	r3, [r3, #0]
 8007d76:	4013      	ands	r3, r2
 8007d78:	2b00      	cmp	r3, #0
 8007d7a:	d01e      	beq.n	8007dba <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007d7c:	693b      	ldr	r3, [r7, #16]
 8007d7e:	681b      	ldr	r3, [r3, #0]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d11a      	bne.n	8007dba <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007d84:	693b      	ldr	r3, [r7, #16]
 8007d86:	685a      	ldr	r2, [r3, #4]
 8007d88:	4b0e      	ldr	r3, [pc, #56]	@ (8007dc4 <vPortFree+0xbc>)
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	43db      	mvns	r3, r3
 8007d8e:	401a      	ands	r2, r3
 8007d90:	693b      	ldr	r3, [r7, #16]
 8007d92:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007d94:	f7fe fc6a 	bl	800666c <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007d98:	693b      	ldr	r3, [r7, #16]
 8007d9a:	685a      	ldr	r2, [r3, #4]
 8007d9c:	4b0a      	ldr	r3, [pc, #40]	@ (8007dc8 <vPortFree+0xc0>)
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	4413      	add	r3, r2
 8007da2:	4a09      	ldr	r2, [pc, #36]	@ (8007dc8 <vPortFree+0xc0>)
 8007da4:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007da6:	6938      	ldr	r0, [r7, #16]
 8007da8:	f000 f874 	bl	8007e94 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007dac:	4b07      	ldr	r3, [pc, #28]	@ (8007dcc <vPortFree+0xc4>)
 8007dae:	681b      	ldr	r3, [r3, #0]
 8007db0:	3301      	adds	r3, #1
 8007db2:	4a06      	ldr	r2, [pc, #24]	@ (8007dcc <vPortFree+0xc4>)
 8007db4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007db6:	f7fe fc67 	bl	8006688 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007dba:	bf00      	nop
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20004c54 	.word	0x20004c54
 8007dc8:	20004c44 	.word	0x20004c44
 8007dcc:	20004c50 	.word	0x20004c50

08007dd0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007dd0:	b480      	push	{r7}
 8007dd2:	b085      	sub	sp, #20
 8007dd4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007dd6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007dda:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007ddc:	4b27      	ldr	r3, [pc, #156]	@ (8007e7c <prvHeapInit+0xac>)
 8007dde:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007de0:	68fb      	ldr	r3, [r7, #12]
 8007de2:	f003 0307 	and.w	r3, r3, #7
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d00c      	beq.n	8007e04 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007dea:	68fb      	ldr	r3, [r7, #12]
 8007dec:	3307      	adds	r3, #7
 8007dee:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	f023 0307 	bic.w	r3, r3, #7
 8007df6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007df8:	68ba      	ldr	r2, [r7, #8]
 8007dfa:	68fb      	ldr	r3, [r7, #12]
 8007dfc:	1ad3      	subs	r3, r2, r3
 8007dfe:	4a1f      	ldr	r2, [pc, #124]	@ (8007e7c <prvHeapInit+0xac>)
 8007e00:	4413      	add	r3, r2
 8007e02:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007e04:	68fb      	ldr	r3, [r7, #12]
 8007e06:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007e08:	4a1d      	ldr	r2, [pc, #116]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007e0e:	4b1c      	ldr	r3, [pc, #112]	@ (8007e80 <prvHeapInit+0xb0>)
 8007e10:	2200      	movs	r2, #0
 8007e12:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68ba      	ldr	r2, [r7, #8]
 8007e18:	4413      	add	r3, r2
 8007e1a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007e1c:	2208      	movs	r2, #8
 8007e1e:	68fb      	ldr	r3, [r7, #12]
 8007e20:	1a9b      	subs	r3, r3, r2
 8007e22:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	f023 0307 	bic.w	r3, r3, #7
 8007e2a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007e2c:	68fb      	ldr	r3, [r7, #12]
 8007e2e:	4a15      	ldr	r2, [pc, #84]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e30:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007e32:	4b14      	ldr	r3, [pc, #80]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	2200      	movs	r2, #0
 8007e38:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007e3a:	4b12      	ldr	r3, [pc, #72]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	2200      	movs	r2, #0
 8007e40:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007e46:	683b      	ldr	r3, [r7, #0]
 8007e48:	68fa      	ldr	r2, [r7, #12]
 8007e4a:	1ad2      	subs	r2, r2, r3
 8007e4c:	683b      	ldr	r3, [r7, #0]
 8007e4e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007e50:	4b0c      	ldr	r3, [pc, #48]	@ (8007e84 <prvHeapInit+0xb4>)
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	683b      	ldr	r3, [r7, #0]
 8007e56:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	685b      	ldr	r3, [r3, #4]
 8007e5c:	4a0a      	ldr	r2, [pc, #40]	@ (8007e88 <prvHeapInit+0xb8>)
 8007e5e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007e60:	683b      	ldr	r3, [r7, #0]
 8007e62:	685b      	ldr	r3, [r3, #4]
 8007e64:	4a09      	ldr	r2, [pc, #36]	@ (8007e8c <prvHeapInit+0xbc>)
 8007e66:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007e68:	4b09      	ldr	r3, [pc, #36]	@ (8007e90 <prvHeapInit+0xc0>)
 8007e6a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007e6e:	601a      	str	r2, [r3, #0]
}
 8007e70:	bf00      	nop
 8007e72:	3714      	adds	r7, #20
 8007e74:	46bd      	mov	sp, r7
 8007e76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e7a:	4770      	bx	lr
 8007e7c:	20001038 	.word	0x20001038
 8007e80:	20004c38 	.word	0x20004c38
 8007e84:	20004c40 	.word	0x20004c40
 8007e88:	20004c48 	.word	0x20004c48
 8007e8c:	20004c44 	.word	0x20004c44
 8007e90:	20004c54 	.word	0x20004c54

08007e94 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007e94:	b480      	push	{r7}
 8007e96:	b085      	sub	sp, #20
 8007e98:	af00      	add	r7, sp, #0
 8007e9a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007e9c:	4b28      	ldr	r3, [pc, #160]	@ (8007f40 <prvInsertBlockIntoFreeList+0xac>)
 8007e9e:	60fb      	str	r3, [r7, #12]
 8007ea0:	e002      	b.n	8007ea8 <prvInsertBlockIntoFreeList+0x14>
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	681b      	ldr	r3, [r3, #0]
 8007ea6:	60fb      	str	r3, [r7, #12]
 8007ea8:	68fb      	ldr	r3, [r7, #12]
 8007eaa:	681b      	ldr	r3, [r3, #0]
 8007eac:	687a      	ldr	r2, [r7, #4]
 8007eae:	429a      	cmp	r2, r3
 8007eb0:	d8f7      	bhi.n	8007ea2 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007eb2:	68fb      	ldr	r3, [r7, #12]
 8007eb4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	685b      	ldr	r3, [r3, #4]
 8007eba:	68ba      	ldr	r2, [r7, #8]
 8007ebc:	4413      	add	r3, r2
 8007ebe:	687a      	ldr	r2, [r7, #4]
 8007ec0:	429a      	cmp	r2, r3
 8007ec2:	d108      	bne.n	8007ed6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007ec4:	68fb      	ldr	r3, [r7, #12]
 8007ec6:	685a      	ldr	r2, [r3, #4]
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	441a      	add	r2, r3
 8007ece:	68fb      	ldr	r3, [r7, #12]
 8007ed0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007ed2:	68fb      	ldr	r3, [r7, #12]
 8007ed4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007ed6:	687b      	ldr	r3, [r7, #4]
 8007ed8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	685b      	ldr	r3, [r3, #4]
 8007ede:	68ba      	ldr	r2, [r7, #8]
 8007ee0:	441a      	add	r2, r3
 8007ee2:	68fb      	ldr	r3, [r7, #12]
 8007ee4:	681b      	ldr	r3, [r3, #0]
 8007ee6:	429a      	cmp	r2, r3
 8007ee8:	d118      	bne.n	8007f1c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007eea:	68fb      	ldr	r3, [r7, #12]
 8007eec:	681a      	ldr	r2, [r3, #0]
 8007eee:	4b15      	ldr	r3, [pc, #84]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	429a      	cmp	r2, r3
 8007ef4:	d00d      	beq.n	8007f12 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	685b      	ldr	r3, [r3, #4]
 8007f00:	441a      	add	r2, r3
 8007f02:	687b      	ldr	r3, [r7, #4]
 8007f04:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007f06:	68fb      	ldr	r3, [r7, #12]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	681a      	ldr	r2, [r3, #0]
 8007f0c:	687b      	ldr	r3, [r7, #4]
 8007f0e:	601a      	str	r2, [r3, #0]
 8007f10:	e008      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007f12:	4b0c      	ldr	r3, [pc, #48]	@ (8007f44 <prvInsertBlockIntoFreeList+0xb0>)
 8007f14:	681a      	ldr	r2, [r3, #0]
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	601a      	str	r2, [r3, #0]
 8007f1a:	e003      	b.n	8007f24 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007f1c:	68fb      	ldr	r3, [r7, #12]
 8007f1e:	681a      	ldr	r2, [r3, #0]
 8007f20:	687b      	ldr	r3, [r7, #4]
 8007f22:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007f24:	68fa      	ldr	r2, [r7, #12]
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	429a      	cmp	r2, r3
 8007f2a:	d002      	beq.n	8007f32 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007f2c:	68fb      	ldr	r3, [r7, #12]
 8007f2e:	687a      	ldr	r2, [r7, #4]
 8007f30:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007f32:	bf00      	nop
 8007f34:	3714      	adds	r7, #20
 8007f36:	46bd      	mov	sp, r7
 8007f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f3c:	4770      	bx	lr
 8007f3e:	bf00      	nop
 8007f40:	20004c38 	.word	0x20004c38
 8007f44:	20004c40 	.word	0x20004c40

08007f48 <std>:
 8007f48:	2300      	movs	r3, #0
 8007f4a:	b510      	push	{r4, lr}
 8007f4c:	4604      	mov	r4, r0
 8007f4e:	e9c0 3300 	strd	r3, r3, [r0]
 8007f52:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007f56:	6083      	str	r3, [r0, #8]
 8007f58:	8181      	strh	r1, [r0, #12]
 8007f5a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007f5c:	81c2      	strh	r2, [r0, #14]
 8007f5e:	6183      	str	r3, [r0, #24]
 8007f60:	4619      	mov	r1, r3
 8007f62:	2208      	movs	r2, #8
 8007f64:	305c      	adds	r0, #92	@ 0x5c
 8007f66:	f000 fa01 	bl	800836c <memset>
 8007f6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa0 <std+0x58>)
 8007f6c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007f6e:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa4 <std+0x5c>)
 8007f70:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007f72:	4b0d      	ldr	r3, [pc, #52]	@ (8007fa8 <std+0x60>)
 8007f74:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007f76:	4b0d      	ldr	r3, [pc, #52]	@ (8007fac <std+0x64>)
 8007f78:	6323      	str	r3, [r4, #48]	@ 0x30
 8007f7a:	4b0d      	ldr	r3, [pc, #52]	@ (8007fb0 <std+0x68>)
 8007f7c:	6224      	str	r4, [r4, #32]
 8007f7e:	429c      	cmp	r4, r3
 8007f80:	d006      	beq.n	8007f90 <std+0x48>
 8007f82:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007f86:	4294      	cmp	r4, r2
 8007f88:	d002      	beq.n	8007f90 <std+0x48>
 8007f8a:	33d0      	adds	r3, #208	@ 0xd0
 8007f8c:	429c      	cmp	r4, r3
 8007f8e:	d105      	bne.n	8007f9c <std+0x54>
 8007f90:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007f94:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007f98:	f000 babe 	b.w	8008518 <__retarget_lock_init_recursive>
 8007f9c:	bd10      	pop	{r4, pc}
 8007f9e:	bf00      	nop
 8007fa0:	080081bd 	.word	0x080081bd
 8007fa4:	080081df 	.word	0x080081df
 8007fa8:	08008217 	.word	0x08008217
 8007fac:	0800823b 	.word	0x0800823b
 8007fb0:	20004c58 	.word	0x20004c58

08007fb4 <stdio_exit_handler>:
 8007fb4:	4a02      	ldr	r2, [pc, #8]	@ (8007fc0 <stdio_exit_handler+0xc>)
 8007fb6:	4903      	ldr	r1, [pc, #12]	@ (8007fc4 <stdio_exit_handler+0x10>)
 8007fb8:	4803      	ldr	r0, [pc, #12]	@ (8007fc8 <stdio_exit_handler+0x14>)
 8007fba:	f000 b869 	b.w	8008090 <_fwalk_sglue>
 8007fbe:	bf00      	nop
 8007fc0:	20000010 	.word	0x20000010
 8007fc4:	08008dd1 	.word	0x08008dd1
 8007fc8:	20000020 	.word	0x20000020

08007fcc <cleanup_stdio>:
 8007fcc:	6841      	ldr	r1, [r0, #4]
 8007fce:	4b0c      	ldr	r3, [pc, #48]	@ (8008000 <cleanup_stdio+0x34>)
 8007fd0:	4299      	cmp	r1, r3
 8007fd2:	b510      	push	{r4, lr}
 8007fd4:	4604      	mov	r4, r0
 8007fd6:	d001      	beq.n	8007fdc <cleanup_stdio+0x10>
 8007fd8:	f000 fefa 	bl	8008dd0 <_fflush_r>
 8007fdc:	68a1      	ldr	r1, [r4, #8]
 8007fde:	4b09      	ldr	r3, [pc, #36]	@ (8008004 <cleanup_stdio+0x38>)
 8007fe0:	4299      	cmp	r1, r3
 8007fe2:	d002      	beq.n	8007fea <cleanup_stdio+0x1e>
 8007fe4:	4620      	mov	r0, r4
 8007fe6:	f000 fef3 	bl	8008dd0 <_fflush_r>
 8007fea:	68e1      	ldr	r1, [r4, #12]
 8007fec:	4b06      	ldr	r3, [pc, #24]	@ (8008008 <cleanup_stdio+0x3c>)
 8007fee:	4299      	cmp	r1, r3
 8007ff0:	d004      	beq.n	8007ffc <cleanup_stdio+0x30>
 8007ff2:	4620      	mov	r0, r4
 8007ff4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ff8:	f000 beea 	b.w	8008dd0 <_fflush_r>
 8007ffc:	bd10      	pop	{r4, pc}
 8007ffe:	bf00      	nop
 8008000:	20004c58 	.word	0x20004c58
 8008004:	20004cc0 	.word	0x20004cc0
 8008008:	20004d28 	.word	0x20004d28

0800800c <global_stdio_init.part.0>:
 800800c:	b510      	push	{r4, lr}
 800800e:	4b0b      	ldr	r3, [pc, #44]	@ (800803c <global_stdio_init.part.0+0x30>)
 8008010:	4c0b      	ldr	r4, [pc, #44]	@ (8008040 <global_stdio_init.part.0+0x34>)
 8008012:	4a0c      	ldr	r2, [pc, #48]	@ (8008044 <global_stdio_init.part.0+0x38>)
 8008014:	601a      	str	r2, [r3, #0]
 8008016:	4620      	mov	r0, r4
 8008018:	2200      	movs	r2, #0
 800801a:	2104      	movs	r1, #4
 800801c:	f7ff ff94 	bl	8007f48 <std>
 8008020:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008024:	2201      	movs	r2, #1
 8008026:	2109      	movs	r1, #9
 8008028:	f7ff ff8e 	bl	8007f48 <std>
 800802c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008030:	2202      	movs	r2, #2
 8008032:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008036:	2112      	movs	r1, #18
 8008038:	f7ff bf86 	b.w	8007f48 <std>
 800803c:	20004d90 	.word	0x20004d90
 8008040:	20004c58 	.word	0x20004c58
 8008044:	08007fb5 	.word	0x08007fb5

08008048 <__sfp_lock_acquire>:
 8008048:	4801      	ldr	r0, [pc, #4]	@ (8008050 <__sfp_lock_acquire+0x8>)
 800804a:	f000 ba66 	b.w	800851a <__retarget_lock_acquire_recursive>
 800804e:	bf00      	nop
 8008050:	20004d99 	.word	0x20004d99

08008054 <__sfp_lock_release>:
 8008054:	4801      	ldr	r0, [pc, #4]	@ (800805c <__sfp_lock_release+0x8>)
 8008056:	f000 ba61 	b.w	800851c <__retarget_lock_release_recursive>
 800805a:	bf00      	nop
 800805c:	20004d99 	.word	0x20004d99

08008060 <__sinit>:
 8008060:	b510      	push	{r4, lr}
 8008062:	4604      	mov	r4, r0
 8008064:	f7ff fff0 	bl	8008048 <__sfp_lock_acquire>
 8008068:	6a23      	ldr	r3, [r4, #32]
 800806a:	b11b      	cbz	r3, 8008074 <__sinit+0x14>
 800806c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008070:	f7ff bff0 	b.w	8008054 <__sfp_lock_release>
 8008074:	4b04      	ldr	r3, [pc, #16]	@ (8008088 <__sinit+0x28>)
 8008076:	6223      	str	r3, [r4, #32]
 8008078:	4b04      	ldr	r3, [pc, #16]	@ (800808c <__sinit+0x2c>)
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	2b00      	cmp	r3, #0
 800807e:	d1f5      	bne.n	800806c <__sinit+0xc>
 8008080:	f7ff ffc4 	bl	800800c <global_stdio_init.part.0>
 8008084:	e7f2      	b.n	800806c <__sinit+0xc>
 8008086:	bf00      	nop
 8008088:	08007fcd 	.word	0x08007fcd
 800808c:	20004d90 	.word	0x20004d90

08008090 <_fwalk_sglue>:
 8008090:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008094:	4607      	mov	r7, r0
 8008096:	4688      	mov	r8, r1
 8008098:	4614      	mov	r4, r2
 800809a:	2600      	movs	r6, #0
 800809c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 80080a0:	f1b9 0901 	subs.w	r9, r9, #1
 80080a4:	d505      	bpl.n	80080b2 <_fwalk_sglue+0x22>
 80080a6:	6824      	ldr	r4, [r4, #0]
 80080a8:	2c00      	cmp	r4, #0
 80080aa:	d1f7      	bne.n	800809c <_fwalk_sglue+0xc>
 80080ac:	4630      	mov	r0, r6
 80080ae:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80080b2:	89ab      	ldrh	r3, [r5, #12]
 80080b4:	2b01      	cmp	r3, #1
 80080b6:	d907      	bls.n	80080c8 <_fwalk_sglue+0x38>
 80080b8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 80080bc:	3301      	adds	r3, #1
 80080be:	d003      	beq.n	80080c8 <_fwalk_sglue+0x38>
 80080c0:	4629      	mov	r1, r5
 80080c2:	4638      	mov	r0, r7
 80080c4:	47c0      	blx	r8
 80080c6:	4306      	orrs	r6, r0
 80080c8:	3568      	adds	r5, #104	@ 0x68
 80080ca:	e7e9      	b.n	80080a0 <_fwalk_sglue+0x10>

080080cc <iprintf>:
 80080cc:	b40f      	push	{r0, r1, r2, r3}
 80080ce:	b507      	push	{r0, r1, r2, lr}
 80080d0:	4906      	ldr	r1, [pc, #24]	@ (80080ec <iprintf+0x20>)
 80080d2:	ab04      	add	r3, sp, #16
 80080d4:	6808      	ldr	r0, [r1, #0]
 80080d6:	f853 2b04 	ldr.w	r2, [r3], #4
 80080da:	6881      	ldr	r1, [r0, #8]
 80080dc:	9301      	str	r3, [sp, #4]
 80080de:	f000 fb4f 	bl	8008780 <_vfiprintf_r>
 80080e2:	b003      	add	sp, #12
 80080e4:	f85d eb04 	ldr.w	lr, [sp], #4
 80080e8:	b004      	add	sp, #16
 80080ea:	4770      	bx	lr
 80080ec:	2000001c 	.word	0x2000001c

080080f0 <putchar>:
 80080f0:	4b02      	ldr	r3, [pc, #8]	@ (80080fc <putchar+0xc>)
 80080f2:	4601      	mov	r1, r0
 80080f4:	6818      	ldr	r0, [r3, #0]
 80080f6:	6882      	ldr	r2, [r0, #8]
 80080f8:	f000 bef4 	b.w	8008ee4 <_putc_r>
 80080fc:	2000001c 	.word	0x2000001c

08008100 <_puts_r>:
 8008100:	6a03      	ldr	r3, [r0, #32]
 8008102:	b570      	push	{r4, r5, r6, lr}
 8008104:	6884      	ldr	r4, [r0, #8]
 8008106:	4605      	mov	r5, r0
 8008108:	460e      	mov	r6, r1
 800810a:	b90b      	cbnz	r3, 8008110 <_puts_r+0x10>
 800810c:	f7ff ffa8 	bl	8008060 <__sinit>
 8008110:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008112:	07db      	lsls	r3, r3, #31
 8008114:	d405      	bmi.n	8008122 <_puts_r+0x22>
 8008116:	89a3      	ldrh	r3, [r4, #12]
 8008118:	0598      	lsls	r0, r3, #22
 800811a:	d402      	bmi.n	8008122 <_puts_r+0x22>
 800811c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800811e:	f000 f9fc 	bl	800851a <__retarget_lock_acquire_recursive>
 8008122:	89a3      	ldrh	r3, [r4, #12]
 8008124:	0719      	lsls	r1, r3, #28
 8008126:	d502      	bpl.n	800812e <_puts_r+0x2e>
 8008128:	6923      	ldr	r3, [r4, #16]
 800812a:	2b00      	cmp	r3, #0
 800812c:	d135      	bne.n	800819a <_puts_r+0x9a>
 800812e:	4621      	mov	r1, r4
 8008130:	4628      	mov	r0, r5
 8008132:	f000 f8c5 	bl	80082c0 <__swsetup_r>
 8008136:	b380      	cbz	r0, 800819a <_puts_r+0x9a>
 8008138:	f04f 35ff 	mov.w	r5, #4294967295
 800813c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800813e:	07da      	lsls	r2, r3, #31
 8008140:	d405      	bmi.n	800814e <_puts_r+0x4e>
 8008142:	89a3      	ldrh	r3, [r4, #12]
 8008144:	059b      	lsls	r3, r3, #22
 8008146:	d402      	bmi.n	800814e <_puts_r+0x4e>
 8008148:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800814a:	f000 f9e7 	bl	800851c <__retarget_lock_release_recursive>
 800814e:	4628      	mov	r0, r5
 8008150:	bd70      	pop	{r4, r5, r6, pc}
 8008152:	2b00      	cmp	r3, #0
 8008154:	da04      	bge.n	8008160 <_puts_r+0x60>
 8008156:	69a2      	ldr	r2, [r4, #24]
 8008158:	429a      	cmp	r2, r3
 800815a:	dc17      	bgt.n	800818c <_puts_r+0x8c>
 800815c:	290a      	cmp	r1, #10
 800815e:	d015      	beq.n	800818c <_puts_r+0x8c>
 8008160:	6823      	ldr	r3, [r4, #0]
 8008162:	1c5a      	adds	r2, r3, #1
 8008164:	6022      	str	r2, [r4, #0]
 8008166:	7019      	strb	r1, [r3, #0]
 8008168:	68a3      	ldr	r3, [r4, #8]
 800816a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800816e:	3b01      	subs	r3, #1
 8008170:	60a3      	str	r3, [r4, #8]
 8008172:	2900      	cmp	r1, #0
 8008174:	d1ed      	bne.n	8008152 <_puts_r+0x52>
 8008176:	2b00      	cmp	r3, #0
 8008178:	da11      	bge.n	800819e <_puts_r+0x9e>
 800817a:	4622      	mov	r2, r4
 800817c:	210a      	movs	r1, #10
 800817e:	4628      	mov	r0, r5
 8008180:	f000 f85f 	bl	8008242 <__swbuf_r>
 8008184:	3001      	adds	r0, #1
 8008186:	d0d7      	beq.n	8008138 <_puts_r+0x38>
 8008188:	250a      	movs	r5, #10
 800818a:	e7d7      	b.n	800813c <_puts_r+0x3c>
 800818c:	4622      	mov	r2, r4
 800818e:	4628      	mov	r0, r5
 8008190:	f000 f857 	bl	8008242 <__swbuf_r>
 8008194:	3001      	adds	r0, #1
 8008196:	d1e7      	bne.n	8008168 <_puts_r+0x68>
 8008198:	e7ce      	b.n	8008138 <_puts_r+0x38>
 800819a:	3e01      	subs	r6, #1
 800819c:	e7e4      	b.n	8008168 <_puts_r+0x68>
 800819e:	6823      	ldr	r3, [r4, #0]
 80081a0:	1c5a      	adds	r2, r3, #1
 80081a2:	6022      	str	r2, [r4, #0]
 80081a4:	220a      	movs	r2, #10
 80081a6:	701a      	strb	r2, [r3, #0]
 80081a8:	e7ee      	b.n	8008188 <_puts_r+0x88>
	...

080081ac <puts>:
 80081ac:	4b02      	ldr	r3, [pc, #8]	@ (80081b8 <puts+0xc>)
 80081ae:	4601      	mov	r1, r0
 80081b0:	6818      	ldr	r0, [r3, #0]
 80081b2:	f7ff bfa5 	b.w	8008100 <_puts_r>
 80081b6:	bf00      	nop
 80081b8:	2000001c 	.word	0x2000001c

080081bc <__sread>:
 80081bc:	b510      	push	{r4, lr}
 80081be:	460c      	mov	r4, r1
 80081c0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081c4:	f000 f95a 	bl	800847c <_read_r>
 80081c8:	2800      	cmp	r0, #0
 80081ca:	bfab      	itete	ge
 80081cc:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80081ce:	89a3      	ldrhlt	r3, [r4, #12]
 80081d0:	181b      	addge	r3, r3, r0
 80081d2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80081d6:	bfac      	ite	ge
 80081d8:	6563      	strge	r3, [r4, #84]	@ 0x54
 80081da:	81a3      	strhlt	r3, [r4, #12]
 80081dc:	bd10      	pop	{r4, pc}

080081de <__swrite>:
 80081de:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80081e2:	461f      	mov	r7, r3
 80081e4:	898b      	ldrh	r3, [r1, #12]
 80081e6:	05db      	lsls	r3, r3, #23
 80081e8:	4605      	mov	r5, r0
 80081ea:	460c      	mov	r4, r1
 80081ec:	4616      	mov	r6, r2
 80081ee:	d505      	bpl.n	80081fc <__swrite+0x1e>
 80081f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80081f4:	2302      	movs	r3, #2
 80081f6:	2200      	movs	r2, #0
 80081f8:	f000 f92e 	bl	8008458 <_lseek_r>
 80081fc:	89a3      	ldrh	r3, [r4, #12]
 80081fe:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008202:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008206:	81a3      	strh	r3, [r4, #12]
 8008208:	4632      	mov	r2, r6
 800820a:	463b      	mov	r3, r7
 800820c:	4628      	mov	r0, r5
 800820e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008212:	f000 b945 	b.w	80084a0 <_write_r>

08008216 <__sseek>:
 8008216:	b510      	push	{r4, lr}
 8008218:	460c      	mov	r4, r1
 800821a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800821e:	f000 f91b 	bl	8008458 <_lseek_r>
 8008222:	1c43      	adds	r3, r0, #1
 8008224:	89a3      	ldrh	r3, [r4, #12]
 8008226:	bf15      	itete	ne
 8008228:	6560      	strne	r0, [r4, #84]	@ 0x54
 800822a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800822e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008232:	81a3      	strheq	r3, [r4, #12]
 8008234:	bf18      	it	ne
 8008236:	81a3      	strhne	r3, [r4, #12]
 8008238:	bd10      	pop	{r4, pc}

0800823a <__sclose>:
 800823a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800823e:	f000 b89d 	b.w	800837c <_close_r>

08008242 <__swbuf_r>:
 8008242:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008244:	460e      	mov	r6, r1
 8008246:	4614      	mov	r4, r2
 8008248:	4605      	mov	r5, r0
 800824a:	b118      	cbz	r0, 8008254 <__swbuf_r+0x12>
 800824c:	6a03      	ldr	r3, [r0, #32]
 800824e:	b90b      	cbnz	r3, 8008254 <__swbuf_r+0x12>
 8008250:	f7ff ff06 	bl	8008060 <__sinit>
 8008254:	69a3      	ldr	r3, [r4, #24]
 8008256:	60a3      	str	r3, [r4, #8]
 8008258:	89a3      	ldrh	r3, [r4, #12]
 800825a:	071a      	lsls	r2, r3, #28
 800825c:	d501      	bpl.n	8008262 <__swbuf_r+0x20>
 800825e:	6923      	ldr	r3, [r4, #16]
 8008260:	b943      	cbnz	r3, 8008274 <__swbuf_r+0x32>
 8008262:	4621      	mov	r1, r4
 8008264:	4628      	mov	r0, r5
 8008266:	f000 f82b 	bl	80082c0 <__swsetup_r>
 800826a:	b118      	cbz	r0, 8008274 <__swbuf_r+0x32>
 800826c:	f04f 37ff 	mov.w	r7, #4294967295
 8008270:	4638      	mov	r0, r7
 8008272:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008274:	6823      	ldr	r3, [r4, #0]
 8008276:	6922      	ldr	r2, [r4, #16]
 8008278:	1a98      	subs	r0, r3, r2
 800827a:	6963      	ldr	r3, [r4, #20]
 800827c:	b2f6      	uxtb	r6, r6
 800827e:	4283      	cmp	r3, r0
 8008280:	4637      	mov	r7, r6
 8008282:	dc05      	bgt.n	8008290 <__swbuf_r+0x4e>
 8008284:	4621      	mov	r1, r4
 8008286:	4628      	mov	r0, r5
 8008288:	f000 fda2 	bl	8008dd0 <_fflush_r>
 800828c:	2800      	cmp	r0, #0
 800828e:	d1ed      	bne.n	800826c <__swbuf_r+0x2a>
 8008290:	68a3      	ldr	r3, [r4, #8]
 8008292:	3b01      	subs	r3, #1
 8008294:	60a3      	str	r3, [r4, #8]
 8008296:	6823      	ldr	r3, [r4, #0]
 8008298:	1c5a      	adds	r2, r3, #1
 800829a:	6022      	str	r2, [r4, #0]
 800829c:	701e      	strb	r6, [r3, #0]
 800829e:	6962      	ldr	r2, [r4, #20]
 80082a0:	1c43      	adds	r3, r0, #1
 80082a2:	429a      	cmp	r2, r3
 80082a4:	d004      	beq.n	80082b0 <__swbuf_r+0x6e>
 80082a6:	89a3      	ldrh	r3, [r4, #12]
 80082a8:	07db      	lsls	r3, r3, #31
 80082aa:	d5e1      	bpl.n	8008270 <__swbuf_r+0x2e>
 80082ac:	2e0a      	cmp	r6, #10
 80082ae:	d1df      	bne.n	8008270 <__swbuf_r+0x2e>
 80082b0:	4621      	mov	r1, r4
 80082b2:	4628      	mov	r0, r5
 80082b4:	f000 fd8c 	bl	8008dd0 <_fflush_r>
 80082b8:	2800      	cmp	r0, #0
 80082ba:	d0d9      	beq.n	8008270 <__swbuf_r+0x2e>
 80082bc:	e7d6      	b.n	800826c <__swbuf_r+0x2a>
	...

080082c0 <__swsetup_r>:
 80082c0:	b538      	push	{r3, r4, r5, lr}
 80082c2:	4b29      	ldr	r3, [pc, #164]	@ (8008368 <__swsetup_r+0xa8>)
 80082c4:	4605      	mov	r5, r0
 80082c6:	6818      	ldr	r0, [r3, #0]
 80082c8:	460c      	mov	r4, r1
 80082ca:	b118      	cbz	r0, 80082d4 <__swsetup_r+0x14>
 80082cc:	6a03      	ldr	r3, [r0, #32]
 80082ce:	b90b      	cbnz	r3, 80082d4 <__swsetup_r+0x14>
 80082d0:	f7ff fec6 	bl	8008060 <__sinit>
 80082d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80082d8:	0719      	lsls	r1, r3, #28
 80082da:	d422      	bmi.n	8008322 <__swsetup_r+0x62>
 80082dc:	06da      	lsls	r2, r3, #27
 80082de:	d407      	bmi.n	80082f0 <__swsetup_r+0x30>
 80082e0:	2209      	movs	r2, #9
 80082e2:	602a      	str	r2, [r5, #0]
 80082e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80082e8:	81a3      	strh	r3, [r4, #12]
 80082ea:	f04f 30ff 	mov.w	r0, #4294967295
 80082ee:	e033      	b.n	8008358 <__swsetup_r+0x98>
 80082f0:	0758      	lsls	r0, r3, #29
 80082f2:	d512      	bpl.n	800831a <__swsetup_r+0x5a>
 80082f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80082f6:	b141      	cbz	r1, 800830a <__swsetup_r+0x4a>
 80082f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80082fc:	4299      	cmp	r1, r3
 80082fe:	d002      	beq.n	8008306 <__swsetup_r+0x46>
 8008300:	4628      	mov	r0, r5
 8008302:	f000 f91b 	bl	800853c <_free_r>
 8008306:	2300      	movs	r3, #0
 8008308:	6363      	str	r3, [r4, #52]	@ 0x34
 800830a:	89a3      	ldrh	r3, [r4, #12]
 800830c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008310:	81a3      	strh	r3, [r4, #12]
 8008312:	2300      	movs	r3, #0
 8008314:	6063      	str	r3, [r4, #4]
 8008316:	6923      	ldr	r3, [r4, #16]
 8008318:	6023      	str	r3, [r4, #0]
 800831a:	89a3      	ldrh	r3, [r4, #12]
 800831c:	f043 0308 	orr.w	r3, r3, #8
 8008320:	81a3      	strh	r3, [r4, #12]
 8008322:	6923      	ldr	r3, [r4, #16]
 8008324:	b94b      	cbnz	r3, 800833a <__swsetup_r+0x7a>
 8008326:	89a3      	ldrh	r3, [r4, #12]
 8008328:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800832c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008330:	d003      	beq.n	800833a <__swsetup_r+0x7a>
 8008332:	4621      	mov	r1, r4
 8008334:	4628      	mov	r0, r5
 8008336:	f000 fd99 	bl	8008e6c <__smakebuf_r>
 800833a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800833e:	f013 0201 	ands.w	r2, r3, #1
 8008342:	d00a      	beq.n	800835a <__swsetup_r+0x9a>
 8008344:	2200      	movs	r2, #0
 8008346:	60a2      	str	r2, [r4, #8]
 8008348:	6962      	ldr	r2, [r4, #20]
 800834a:	4252      	negs	r2, r2
 800834c:	61a2      	str	r2, [r4, #24]
 800834e:	6922      	ldr	r2, [r4, #16]
 8008350:	b942      	cbnz	r2, 8008364 <__swsetup_r+0xa4>
 8008352:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008356:	d1c5      	bne.n	80082e4 <__swsetup_r+0x24>
 8008358:	bd38      	pop	{r3, r4, r5, pc}
 800835a:	0799      	lsls	r1, r3, #30
 800835c:	bf58      	it	pl
 800835e:	6962      	ldrpl	r2, [r4, #20]
 8008360:	60a2      	str	r2, [r4, #8]
 8008362:	e7f4      	b.n	800834e <__swsetup_r+0x8e>
 8008364:	2000      	movs	r0, #0
 8008366:	e7f7      	b.n	8008358 <__swsetup_r+0x98>
 8008368:	2000001c 	.word	0x2000001c

0800836c <memset>:
 800836c:	4402      	add	r2, r0
 800836e:	4603      	mov	r3, r0
 8008370:	4293      	cmp	r3, r2
 8008372:	d100      	bne.n	8008376 <memset+0xa>
 8008374:	4770      	bx	lr
 8008376:	f803 1b01 	strb.w	r1, [r3], #1
 800837a:	e7f9      	b.n	8008370 <memset+0x4>

0800837c <_close_r>:
 800837c:	b538      	push	{r3, r4, r5, lr}
 800837e:	4d06      	ldr	r5, [pc, #24]	@ (8008398 <_close_r+0x1c>)
 8008380:	2300      	movs	r3, #0
 8008382:	4604      	mov	r4, r0
 8008384:	4608      	mov	r0, r1
 8008386:	602b      	str	r3, [r5, #0]
 8008388:	f7f9 fb59 	bl	8001a3e <_close>
 800838c:	1c43      	adds	r3, r0, #1
 800838e:	d102      	bne.n	8008396 <_close_r+0x1a>
 8008390:	682b      	ldr	r3, [r5, #0]
 8008392:	b103      	cbz	r3, 8008396 <_close_r+0x1a>
 8008394:	6023      	str	r3, [r4, #0]
 8008396:	bd38      	pop	{r3, r4, r5, pc}
 8008398:	20004d94 	.word	0x20004d94

0800839c <_reclaim_reent>:
 800839c:	4b2d      	ldr	r3, [pc, #180]	@ (8008454 <_reclaim_reent+0xb8>)
 800839e:	681b      	ldr	r3, [r3, #0]
 80083a0:	4283      	cmp	r3, r0
 80083a2:	b570      	push	{r4, r5, r6, lr}
 80083a4:	4604      	mov	r4, r0
 80083a6:	d053      	beq.n	8008450 <_reclaim_reent+0xb4>
 80083a8:	69c3      	ldr	r3, [r0, #28]
 80083aa:	b31b      	cbz	r3, 80083f4 <_reclaim_reent+0x58>
 80083ac:	68db      	ldr	r3, [r3, #12]
 80083ae:	b163      	cbz	r3, 80083ca <_reclaim_reent+0x2e>
 80083b0:	2500      	movs	r5, #0
 80083b2:	69e3      	ldr	r3, [r4, #28]
 80083b4:	68db      	ldr	r3, [r3, #12]
 80083b6:	5959      	ldr	r1, [r3, r5]
 80083b8:	b9b1      	cbnz	r1, 80083e8 <_reclaim_reent+0x4c>
 80083ba:	3504      	adds	r5, #4
 80083bc:	2d80      	cmp	r5, #128	@ 0x80
 80083be:	d1f8      	bne.n	80083b2 <_reclaim_reent+0x16>
 80083c0:	69e3      	ldr	r3, [r4, #28]
 80083c2:	4620      	mov	r0, r4
 80083c4:	68d9      	ldr	r1, [r3, #12]
 80083c6:	f000 f8b9 	bl	800853c <_free_r>
 80083ca:	69e3      	ldr	r3, [r4, #28]
 80083cc:	6819      	ldr	r1, [r3, #0]
 80083ce:	b111      	cbz	r1, 80083d6 <_reclaim_reent+0x3a>
 80083d0:	4620      	mov	r0, r4
 80083d2:	f000 f8b3 	bl	800853c <_free_r>
 80083d6:	69e3      	ldr	r3, [r4, #28]
 80083d8:	689d      	ldr	r5, [r3, #8]
 80083da:	b15d      	cbz	r5, 80083f4 <_reclaim_reent+0x58>
 80083dc:	4629      	mov	r1, r5
 80083de:	4620      	mov	r0, r4
 80083e0:	682d      	ldr	r5, [r5, #0]
 80083e2:	f000 f8ab 	bl	800853c <_free_r>
 80083e6:	e7f8      	b.n	80083da <_reclaim_reent+0x3e>
 80083e8:	680e      	ldr	r6, [r1, #0]
 80083ea:	4620      	mov	r0, r4
 80083ec:	f000 f8a6 	bl	800853c <_free_r>
 80083f0:	4631      	mov	r1, r6
 80083f2:	e7e1      	b.n	80083b8 <_reclaim_reent+0x1c>
 80083f4:	6961      	ldr	r1, [r4, #20]
 80083f6:	b111      	cbz	r1, 80083fe <_reclaim_reent+0x62>
 80083f8:	4620      	mov	r0, r4
 80083fa:	f000 f89f 	bl	800853c <_free_r>
 80083fe:	69e1      	ldr	r1, [r4, #28]
 8008400:	b111      	cbz	r1, 8008408 <_reclaim_reent+0x6c>
 8008402:	4620      	mov	r0, r4
 8008404:	f000 f89a 	bl	800853c <_free_r>
 8008408:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800840a:	b111      	cbz	r1, 8008412 <_reclaim_reent+0x76>
 800840c:	4620      	mov	r0, r4
 800840e:	f000 f895 	bl	800853c <_free_r>
 8008412:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008414:	b111      	cbz	r1, 800841c <_reclaim_reent+0x80>
 8008416:	4620      	mov	r0, r4
 8008418:	f000 f890 	bl	800853c <_free_r>
 800841c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800841e:	b111      	cbz	r1, 8008426 <_reclaim_reent+0x8a>
 8008420:	4620      	mov	r0, r4
 8008422:	f000 f88b 	bl	800853c <_free_r>
 8008426:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008428:	b111      	cbz	r1, 8008430 <_reclaim_reent+0x94>
 800842a:	4620      	mov	r0, r4
 800842c:	f000 f886 	bl	800853c <_free_r>
 8008430:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008432:	b111      	cbz	r1, 800843a <_reclaim_reent+0x9e>
 8008434:	4620      	mov	r0, r4
 8008436:	f000 f881 	bl	800853c <_free_r>
 800843a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800843c:	b111      	cbz	r1, 8008444 <_reclaim_reent+0xa8>
 800843e:	4620      	mov	r0, r4
 8008440:	f000 f87c 	bl	800853c <_free_r>
 8008444:	6a23      	ldr	r3, [r4, #32]
 8008446:	b11b      	cbz	r3, 8008450 <_reclaim_reent+0xb4>
 8008448:	4620      	mov	r0, r4
 800844a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800844e:	4718      	bx	r3
 8008450:	bd70      	pop	{r4, r5, r6, pc}
 8008452:	bf00      	nop
 8008454:	2000001c 	.word	0x2000001c

08008458 <_lseek_r>:
 8008458:	b538      	push	{r3, r4, r5, lr}
 800845a:	4d07      	ldr	r5, [pc, #28]	@ (8008478 <_lseek_r+0x20>)
 800845c:	4604      	mov	r4, r0
 800845e:	4608      	mov	r0, r1
 8008460:	4611      	mov	r1, r2
 8008462:	2200      	movs	r2, #0
 8008464:	602a      	str	r2, [r5, #0]
 8008466:	461a      	mov	r2, r3
 8008468:	f7f9 fb10 	bl	8001a8c <_lseek>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_lseek_r+0x1e>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_lseek_r+0x1e>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20004d94 	.word	0x20004d94

0800847c <_read_r>:
 800847c:	b538      	push	{r3, r4, r5, lr}
 800847e:	4d07      	ldr	r5, [pc, #28]	@ (800849c <_read_r+0x20>)
 8008480:	4604      	mov	r4, r0
 8008482:	4608      	mov	r0, r1
 8008484:	4611      	mov	r1, r2
 8008486:	2200      	movs	r2, #0
 8008488:	602a      	str	r2, [r5, #0]
 800848a:	461a      	mov	r2, r3
 800848c:	f7f9 faba 	bl	8001a04 <_read>
 8008490:	1c43      	adds	r3, r0, #1
 8008492:	d102      	bne.n	800849a <_read_r+0x1e>
 8008494:	682b      	ldr	r3, [r5, #0]
 8008496:	b103      	cbz	r3, 800849a <_read_r+0x1e>
 8008498:	6023      	str	r3, [r4, #0]
 800849a:	bd38      	pop	{r3, r4, r5, pc}
 800849c:	20004d94 	.word	0x20004d94

080084a0 <_write_r>:
 80084a0:	b538      	push	{r3, r4, r5, lr}
 80084a2:	4d07      	ldr	r5, [pc, #28]	@ (80084c0 <_write_r+0x20>)
 80084a4:	4604      	mov	r4, r0
 80084a6:	4608      	mov	r0, r1
 80084a8:	4611      	mov	r1, r2
 80084aa:	2200      	movs	r2, #0
 80084ac:	602a      	str	r2, [r5, #0]
 80084ae:	461a      	mov	r2, r3
 80084b0:	f7f8 ff9e 	bl	80013f0 <_write>
 80084b4:	1c43      	adds	r3, r0, #1
 80084b6:	d102      	bne.n	80084be <_write_r+0x1e>
 80084b8:	682b      	ldr	r3, [r5, #0]
 80084ba:	b103      	cbz	r3, 80084be <_write_r+0x1e>
 80084bc:	6023      	str	r3, [r4, #0]
 80084be:	bd38      	pop	{r3, r4, r5, pc}
 80084c0:	20004d94 	.word	0x20004d94

080084c4 <__errno>:
 80084c4:	4b01      	ldr	r3, [pc, #4]	@ (80084cc <__errno+0x8>)
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	4770      	bx	lr
 80084ca:	bf00      	nop
 80084cc:	2000001c 	.word	0x2000001c

080084d0 <__libc_init_array>:
 80084d0:	b570      	push	{r4, r5, r6, lr}
 80084d2:	4d0d      	ldr	r5, [pc, #52]	@ (8008508 <__libc_init_array+0x38>)
 80084d4:	4c0d      	ldr	r4, [pc, #52]	@ (800850c <__libc_init_array+0x3c>)
 80084d6:	1b64      	subs	r4, r4, r5
 80084d8:	10a4      	asrs	r4, r4, #2
 80084da:	2600      	movs	r6, #0
 80084dc:	42a6      	cmp	r6, r4
 80084de:	d109      	bne.n	80084f4 <__libc_init_array+0x24>
 80084e0:	4d0b      	ldr	r5, [pc, #44]	@ (8008510 <__libc_init_array+0x40>)
 80084e2:	4c0c      	ldr	r4, [pc, #48]	@ (8008514 <__libc_init_array+0x44>)
 80084e4:	f000 fd64 	bl	8008fb0 <_init>
 80084e8:	1b64      	subs	r4, r4, r5
 80084ea:	10a4      	asrs	r4, r4, #2
 80084ec:	2600      	movs	r6, #0
 80084ee:	42a6      	cmp	r6, r4
 80084f0:	d105      	bne.n	80084fe <__libc_init_array+0x2e>
 80084f2:	bd70      	pop	{r4, r5, r6, pc}
 80084f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80084f8:	4798      	blx	r3
 80084fa:	3601      	adds	r6, #1
 80084fc:	e7ee      	b.n	80084dc <__libc_init_array+0xc>
 80084fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008502:	4798      	blx	r3
 8008504:	3601      	adds	r6, #1
 8008506:	e7f2      	b.n	80084ee <__libc_init_array+0x1e>
 8008508:	08009378 	.word	0x08009378
 800850c:	08009378 	.word	0x08009378
 8008510:	08009378 	.word	0x08009378
 8008514:	0800937c 	.word	0x0800937c

08008518 <__retarget_lock_init_recursive>:
 8008518:	4770      	bx	lr

0800851a <__retarget_lock_acquire_recursive>:
 800851a:	4770      	bx	lr

0800851c <__retarget_lock_release_recursive>:
 800851c:	4770      	bx	lr

0800851e <memcpy>:
 800851e:	440a      	add	r2, r1
 8008520:	4291      	cmp	r1, r2
 8008522:	f100 33ff 	add.w	r3, r0, #4294967295
 8008526:	d100      	bne.n	800852a <memcpy+0xc>
 8008528:	4770      	bx	lr
 800852a:	b510      	push	{r4, lr}
 800852c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008530:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008534:	4291      	cmp	r1, r2
 8008536:	d1f9      	bne.n	800852c <memcpy+0xe>
 8008538:	bd10      	pop	{r4, pc}
	...

0800853c <_free_r>:
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4605      	mov	r5, r0
 8008540:	2900      	cmp	r1, #0
 8008542:	d041      	beq.n	80085c8 <_free_r+0x8c>
 8008544:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008548:	1f0c      	subs	r4, r1, #4
 800854a:	2b00      	cmp	r3, #0
 800854c:	bfb8      	it	lt
 800854e:	18e4      	addlt	r4, r4, r3
 8008550:	f000 f8e0 	bl	8008714 <__malloc_lock>
 8008554:	4a1d      	ldr	r2, [pc, #116]	@ (80085cc <_free_r+0x90>)
 8008556:	6813      	ldr	r3, [r2, #0]
 8008558:	b933      	cbnz	r3, 8008568 <_free_r+0x2c>
 800855a:	6063      	str	r3, [r4, #4]
 800855c:	6014      	str	r4, [r2, #0]
 800855e:	4628      	mov	r0, r5
 8008560:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008564:	f000 b8dc 	b.w	8008720 <__malloc_unlock>
 8008568:	42a3      	cmp	r3, r4
 800856a:	d908      	bls.n	800857e <_free_r+0x42>
 800856c:	6820      	ldr	r0, [r4, #0]
 800856e:	1821      	adds	r1, r4, r0
 8008570:	428b      	cmp	r3, r1
 8008572:	bf01      	itttt	eq
 8008574:	6819      	ldreq	r1, [r3, #0]
 8008576:	685b      	ldreq	r3, [r3, #4]
 8008578:	1809      	addeq	r1, r1, r0
 800857a:	6021      	streq	r1, [r4, #0]
 800857c:	e7ed      	b.n	800855a <_free_r+0x1e>
 800857e:	461a      	mov	r2, r3
 8008580:	685b      	ldr	r3, [r3, #4]
 8008582:	b10b      	cbz	r3, 8008588 <_free_r+0x4c>
 8008584:	42a3      	cmp	r3, r4
 8008586:	d9fa      	bls.n	800857e <_free_r+0x42>
 8008588:	6811      	ldr	r1, [r2, #0]
 800858a:	1850      	adds	r0, r2, r1
 800858c:	42a0      	cmp	r0, r4
 800858e:	d10b      	bne.n	80085a8 <_free_r+0x6c>
 8008590:	6820      	ldr	r0, [r4, #0]
 8008592:	4401      	add	r1, r0
 8008594:	1850      	adds	r0, r2, r1
 8008596:	4283      	cmp	r3, r0
 8008598:	6011      	str	r1, [r2, #0]
 800859a:	d1e0      	bne.n	800855e <_free_r+0x22>
 800859c:	6818      	ldr	r0, [r3, #0]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	6053      	str	r3, [r2, #4]
 80085a2:	4408      	add	r0, r1
 80085a4:	6010      	str	r0, [r2, #0]
 80085a6:	e7da      	b.n	800855e <_free_r+0x22>
 80085a8:	d902      	bls.n	80085b0 <_free_r+0x74>
 80085aa:	230c      	movs	r3, #12
 80085ac:	602b      	str	r3, [r5, #0]
 80085ae:	e7d6      	b.n	800855e <_free_r+0x22>
 80085b0:	6820      	ldr	r0, [r4, #0]
 80085b2:	1821      	adds	r1, r4, r0
 80085b4:	428b      	cmp	r3, r1
 80085b6:	bf04      	itt	eq
 80085b8:	6819      	ldreq	r1, [r3, #0]
 80085ba:	685b      	ldreq	r3, [r3, #4]
 80085bc:	6063      	str	r3, [r4, #4]
 80085be:	bf04      	itt	eq
 80085c0:	1809      	addeq	r1, r1, r0
 80085c2:	6021      	streq	r1, [r4, #0]
 80085c4:	6054      	str	r4, [r2, #4]
 80085c6:	e7ca      	b.n	800855e <_free_r+0x22>
 80085c8:	bd38      	pop	{r3, r4, r5, pc}
 80085ca:	bf00      	nop
 80085cc:	20004da0 	.word	0x20004da0

080085d0 <sbrk_aligned>:
 80085d0:	b570      	push	{r4, r5, r6, lr}
 80085d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008610 <sbrk_aligned+0x40>)
 80085d4:	460c      	mov	r4, r1
 80085d6:	6831      	ldr	r1, [r6, #0]
 80085d8:	4605      	mov	r5, r0
 80085da:	b911      	cbnz	r1, 80085e2 <sbrk_aligned+0x12>
 80085dc:	f000 fcd8 	bl	8008f90 <_sbrk_r>
 80085e0:	6030      	str	r0, [r6, #0]
 80085e2:	4621      	mov	r1, r4
 80085e4:	4628      	mov	r0, r5
 80085e6:	f000 fcd3 	bl	8008f90 <_sbrk_r>
 80085ea:	1c43      	adds	r3, r0, #1
 80085ec:	d103      	bne.n	80085f6 <sbrk_aligned+0x26>
 80085ee:	f04f 34ff 	mov.w	r4, #4294967295
 80085f2:	4620      	mov	r0, r4
 80085f4:	bd70      	pop	{r4, r5, r6, pc}
 80085f6:	1cc4      	adds	r4, r0, #3
 80085f8:	f024 0403 	bic.w	r4, r4, #3
 80085fc:	42a0      	cmp	r0, r4
 80085fe:	d0f8      	beq.n	80085f2 <sbrk_aligned+0x22>
 8008600:	1a21      	subs	r1, r4, r0
 8008602:	4628      	mov	r0, r5
 8008604:	f000 fcc4 	bl	8008f90 <_sbrk_r>
 8008608:	3001      	adds	r0, #1
 800860a:	d1f2      	bne.n	80085f2 <sbrk_aligned+0x22>
 800860c:	e7ef      	b.n	80085ee <sbrk_aligned+0x1e>
 800860e:	bf00      	nop
 8008610:	20004d9c 	.word	0x20004d9c

08008614 <_malloc_r>:
 8008614:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008618:	1ccd      	adds	r5, r1, #3
 800861a:	f025 0503 	bic.w	r5, r5, #3
 800861e:	3508      	adds	r5, #8
 8008620:	2d0c      	cmp	r5, #12
 8008622:	bf38      	it	cc
 8008624:	250c      	movcc	r5, #12
 8008626:	2d00      	cmp	r5, #0
 8008628:	4606      	mov	r6, r0
 800862a:	db01      	blt.n	8008630 <_malloc_r+0x1c>
 800862c:	42a9      	cmp	r1, r5
 800862e:	d904      	bls.n	800863a <_malloc_r+0x26>
 8008630:	230c      	movs	r3, #12
 8008632:	6033      	str	r3, [r6, #0]
 8008634:	2000      	movs	r0, #0
 8008636:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800863a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008710 <_malloc_r+0xfc>
 800863e:	f000 f869 	bl	8008714 <__malloc_lock>
 8008642:	f8d8 3000 	ldr.w	r3, [r8]
 8008646:	461c      	mov	r4, r3
 8008648:	bb44      	cbnz	r4, 800869c <_malloc_r+0x88>
 800864a:	4629      	mov	r1, r5
 800864c:	4630      	mov	r0, r6
 800864e:	f7ff ffbf 	bl	80085d0 <sbrk_aligned>
 8008652:	1c43      	adds	r3, r0, #1
 8008654:	4604      	mov	r4, r0
 8008656:	d158      	bne.n	800870a <_malloc_r+0xf6>
 8008658:	f8d8 4000 	ldr.w	r4, [r8]
 800865c:	4627      	mov	r7, r4
 800865e:	2f00      	cmp	r7, #0
 8008660:	d143      	bne.n	80086ea <_malloc_r+0xd6>
 8008662:	2c00      	cmp	r4, #0
 8008664:	d04b      	beq.n	80086fe <_malloc_r+0xea>
 8008666:	6823      	ldr	r3, [r4, #0]
 8008668:	4639      	mov	r1, r7
 800866a:	4630      	mov	r0, r6
 800866c:	eb04 0903 	add.w	r9, r4, r3
 8008670:	f000 fc8e 	bl	8008f90 <_sbrk_r>
 8008674:	4581      	cmp	r9, r0
 8008676:	d142      	bne.n	80086fe <_malloc_r+0xea>
 8008678:	6821      	ldr	r1, [r4, #0]
 800867a:	1a6d      	subs	r5, r5, r1
 800867c:	4629      	mov	r1, r5
 800867e:	4630      	mov	r0, r6
 8008680:	f7ff ffa6 	bl	80085d0 <sbrk_aligned>
 8008684:	3001      	adds	r0, #1
 8008686:	d03a      	beq.n	80086fe <_malloc_r+0xea>
 8008688:	6823      	ldr	r3, [r4, #0]
 800868a:	442b      	add	r3, r5
 800868c:	6023      	str	r3, [r4, #0]
 800868e:	f8d8 3000 	ldr.w	r3, [r8]
 8008692:	685a      	ldr	r2, [r3, #4]
 8008694:	bb62      	cbnz	r2, 80086f0 <_malloc_r+0xdc>
 8008696:	f8c8 7000 	str.w	r7, [r8]
 800869a:	e00f      	b.n	80086bc <_malloc_r+0xa8>
 800869c:	6822      	ldr	r2, [r4, #0]
 800869e:	1b52      	subs	r2, r2, r5
 80086a0:	d420      	bmi.n	80086e4 <_malloc_r+0xd0>
 80086a2:	2a0b      	cmp	r2, #11
 80086a4:	d917      	bls.n	80086d6 <_malloc_r+0xc2>
 80086a6:	1961      	adds	r1, r4, r5
 80086a8:	42a3      	cmp	r3, r4
 80086aa:	6025      	str	r5, [r4, #0]
 80086ac:	bf18      	it	ne
 80086ae:	6059      	strne	r1, [r3, #4]
 80086b0:	6863      	ldr	r3, [r4, #4]
 80086b2:	bf08      	it	eq
 80086b4:	f8c8 1000 	streq.w	r1, [r8]
 80086b8:	5162      	str	r2, [r4, r5]
 80086ba:	604b      	str	r3, [r1, #4]
 80086bc:	4630      	mov	r0, r6
 80086be:	f000 f82f 	bl	8008720 <__malloc_unlock>
 80086c2:	f104 000b 	add.w	r0, r4, #11
 80086c6:	1d23      	adds	r3, r4, #4
 80086c8:	f020 0007 	bic.w	r0, r0, #7
 80086cc:	1ac2      	subs	r2, r0, r3
 80086ce:	bf1c      	itt	ne
 80086d0:	1a1b      	subne	r3, r3, r0
 80086d2:	50a3      	strne	r3, [r4, r2]
 80086d4:	e7af      	b.n	8008636 <_malloc_r+0x22>
 80086d6:	6862      	ldr	r2, [r4, #4]
 80086d8:	42a3      	cmp	r3, r4
 80086da:	bf0c      	ite	eq
 80086dc:	f8c8 2000 	streq.w	r2, [r8]
 80086e0:	605a      	strne	r2, [r3, #4]
 80086e2:	e7eb      	b.n	80086bc <_malloc_r+0xa8>
 80086e4:	4623      	mov	r3, r4
 80086e6:	6864      	ldr	r4, [r4, #4]
 80086e8:	e7ae      	b.n	8008648 <_malloc_r+0x34>
 80086ea:	463c      	mov	r4, r7
 80086ec:	687f      	ldr	r7, [r7, #4]
 80086ee:	e7b6      	b.n	800865e <_malloc_r+0x4a>
 80086f0:	461a      	mov	r2, r3
 80086f2:	685b      	ldr	r3, [r3, #4]
 80086f4:	42a3      	cmp	r3, r4
 80086f6:	d1fb      	bne.n	80086f0 <_malloc_r+0xdc>
 80086f8:	2300      	movs	r3, #0
 80086fa:	6053      	str	r3, [r2, #4]
 80086fc:	e7de      	b.n	80086bc <_malloc_r+0xa8>
 80086fe:	230c      	movs	r3, #12
 8008700:	6033      	str	r3, [r6, #0]
 8008702:	4630      	mov	r0, r6
 8008704:	f000 f80c 	bl	8008720 <__malloc_unlock>
 8008708:	e794      	b.n	8008634 <_malloc_r+0x20>
 800870a:	6005      	str	r5, [r0, #0]
 800870c:	e7d6      	b.n	80086bc <_malloc_r+0xa8>
 800870e:	bf00      	nop
 8008710:	20004da0 	.word	0x20004da0

08008714 <__malloc_lock>:
 8008714:	4801      	ldr	r0, [pc, #4]	@ (800871c <__malloc_lock+0x8>)
 8008716:	f7ff bf00 	b.w	800851a <__retarget_lock_acquire_recursive>
 800871a:	bf00      	nop
 800871c:	20004d98 	.word	0x20004d98

08008720 <__malloc_unlock>:
 8008720:	4801      	ldr	r0, [pc, #4]	@ (8008728 <__malloc_unlock+0x8>)
 8008722:	f7ff befb 	b.w	800851c <__retarget_lock_release_recursive>
 8008726:	bf00      	nop
 8008728:	20004d98 	.word	0x20004d98

0800872c <__sfputc_r>:
 800872c:	6893      	ldr	r3, [r2, #8]
 800872e:	3b01      	subs	r3, #1
 8008730:	2b00      	cmp	r3, #0
 8008732:	b410      	push	{r4}
 8008734:	6093      	str	r3, [r2, #8]
 8008736:	da08      	bge.n	800874a <__sfputc_r+0x1e>
 8008738:	6994      	ldr	r4, [r2, #24]
 800873a:	42a3      	cmp	r3, r4
 800873c:	db01      	blt.n	8008742 <__sfputc_r+0x16>
 800873e:	290a      	cmp	r1, #10
 8008740:	d103      	bne.n	800874a <__sfputc_r+0x1e>
 8008742:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008746:	f7ff bd7c 	b.w	8008242 <__swbuf_r>
 800874a:	6813      	ldr	r3, [r2, #0]
 800874c:	1c58      	adds	r0, r3, #1
 800874e:	6010      	str	r0, [r2, #0]
 8008750:	7019      	strb	r1, [r3, #0]
 8008752:	4608      	mov	r0, r1
 8008754:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008758:	4770      	bx	lr

0800875a <__sfputs_r>:
 800875a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800875c:	4606      	mov	r6, r0
 800875e:	460f      	mov	r7, r1
 8008760:	4614      	mov	r4, r2
 8008762:	18d5      	adds	r5, r2, r3
 8008764:	42ac      	cmp	r4, r5
 8008766:	d101      	bne.n	800876c <__sfputs_r+0x12>
 8008768:	2000      	movs	r0, #0
 800876a:	e007      	b.n	800877c <__sfputs_r+0x22>
 800876c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008770:	463a      	mov	r2, r7
 8008772:	4630      	mov	r0, r6
 8008774:	f7ff ffda 	bl	800872c <__sfputc_r>
 8008778:	1c43      	adds	r3, r0, #1
 800877a:	d1f3      	bne.n	8008764 <__sfputs_r+0xa>
 800877c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008780 <_vfiprintf_r>:
 8008780:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008784:	460d      	mov	r5, r1
 8008786:	b09d      	sub	sp, #116	@ 0x74
 8008788:	4614      	mov	r4, r2
 800878a:	4698      	mov	r8, r3
 800878c:	4606      	mov	r6, r0
 800878e:	b118      	cbz	r0, 8008798 <_vfiprintf_r+0x18>
 8008790:	6a03      	ldr	r3, [r0, #32]
 8008792:	b90b      	cbnz	r3, 8008798 <_vfiprintf_r+0x18>
 8008794:	f7ff fc64 	bl	8008060 <__sinit>
 8008798:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800879a:	07d9      	lsls	r1, r3, #31
 800879c:	d405      	bmi.n	80087aa <_vfiprintf_r+0x2a>
 800879e:	89ab      	ldrh	r3, [r5, #12]
 80087a0:	059a      	lsls	r2, r3, #22
 80087a2:	d402      	bmi.n	80087aa <_vfiprintf_r+0x2a>
 80087a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087a6:	f7ff feb8 	bl	800851a <__retarget_lock_acquire_recursive>
 80087aa:	89ab      	ldrh	r3, [r5, #12]
 80087ac:	071b      	lsls	r3, r3, #28
 80087ae:	d501      	bpl.n	80087b4 <_vfiprintf_r+0x34>
 80087b0:	692b      	ldr	r3, [r5, #16]
 80087b2:	b99b      	cbnz	r3, 80087dc <_vfiprintf_r+0x5c>
 80087b4:	4629      	mov	r1, r5
 80087b6:	4630      	mov	r0, r6
 80087b8:	f7ff fd82 	bl	80082c0 <__swsetup_r>
 80087bc:	b170      	cbz	r0, 80087dc <_vfiprintf_r+0x5c>
 80087be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80087c0:	07dc      	lsls	r4, r3, #31
 80087c2:	d504      	bpl.n	80087ce <_vfiprintf_r+0x4e>
 80087c4:	f04f 30ff 	mov.w	r0, #4294967295
 80087c8:	b01d      	add	sp, #116	@ 0x74
 80087ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087ce:	89ab      	ldrh	r3, [r5, #12]
 80087d0:	0598      	lsls	r0, r3, #22
 80087d2:	d4f7      	bmi.n	80087c4 <_vfiprintf_r+0x44>
 80087d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80087d6:	f7ff fea1 	bl	800851c <__retarget_lock_release_recursive>
 80087da:	e7f3      	b.n	80087c4 <_vfiprintf_r+0x44>
 80087dc:	2300      	movs	r3, #0
 80087de:	9309      	str	r3, [sp, #36]	@ 0x24
 80087e0:	2320      	movs	r3, #32
 80087e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80087e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80087ea:	2330      	movs	r3, #48	@ 0x30
 80087ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800899c <_vfiprintf_r+0x21c>
 80087f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80087f4:	f04f 0901 	mov.w	r9, #1
 80087f8:	4623      	mov	r3, r4
 80087fa:	469a      	mov	sl, r3
 80087fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008800:	b10a      	cbz	r2, 8008806 <_vfiprintf_r+0x86>
 8008802:	2a25      	cmp	r2, #37	@ 0x25
 8008804:	d1f9      	bne.n	80087fa <_vfiprintf_r+0x7a>
 8008806:	ebba 0b04 	subs.w	fp, sl, r4
 800880a:	d00b      	beq.n	8008824 <_vfiprintf_r+0xa4>
 800880c:	465b      	mov	r3, fp
 800880e:	4622      	mov	r2, r4
 8008810:	4629      	mov	r1, r5
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ffa1 	bl	800875a <__sfputs_r>
 8008818:	3001      	adds	r0, #1
 800881a:	f000 80a7 	beq.w	800896c <_vfiprintf_r+0x1ec>
 800881e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008820:	445a      	add	r2, fp
 8008822:	9209      	str	r2, [sp, #36]	@ 0x24
 8008824:	f89a 3000 	ldrb.w	r3, [sl]
 8008828:	2b00      	cmp	r3, #0
 800882a:	f000 809f 	beq.w	800896c <_vfiprintf_r+0x1ec>
 800882e:	2300      	movs	r3, #0
 8008830:	f04f 32ff 	mov.w	r2, #4294967295
 8008834:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008838:	f10a 0a01 	add.w	sl, sl, #1
 800883c:	9304      	str	r3, [sp, #16]
 800883e:	9307      	str	r3, [sp, #28]
 8008840:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008844:	931a      	str	r3, [sp, #104]	@ 0x68
 8008846:	4654      	mov	r4, sl
 8008848:	2205      	movs	r2, #5
 800884a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800884e:	4853      	ldr	r0, [pc, #332]	@ (800899c <_vfiprintf_r+0x21c>)
 8008850:	f7f7 fcbe 	bl	80001d0 <memchr>
 8008854:	9a04      	ldr	r2, [sp, #16]
 8008856:	b9d8      	cbnz	r0, 8008890 <_vfiprintf_r+0x110>
 8008858:	06d1      	lsls	r1, r2, #27
 800885a:	bf44      	itt	mi
 800885c:	2320      	movmi	r3, #32
 800885e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008862:	0713      	lsls	r3, r2, #28
 8008864:	bf44      	itt	mi
 8008866:	232b      	movmi	r3, #43	@ 0x2b
 8008868:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800886c:	f89a 3000 	ldrb.w	r3, [sl]
 8008870:	2b2a      	cmp	r3, #42	@ 0x2a
 8008872:	d015      	beq.n	80088a0 <_vfiprintf_r+0x120>
 8008874:	9a07      	ldr	r2, [sp, #28]
 8008876:	4654      	mov	r4, sl
 8008878:	2000      	movs	r0, #0
 800887a:	f04f 0c0a 	mov.w	ip, #10
 800887e:	4621      	mov	r1, r4
 8008880:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008884:	3b30      	subs	r3, #48	@ 0x30
 8008886:	2b09      	cmp	r3, #9
 8008888:	d94b      	bls.n	8008922 <_vfiprintf_r+0x1a2>
 800888a:	b1b0      	cbz	r0, 80088ba <_vfiprintf_r+0x13a>
 800888c:	9207      	str	r2, [sp, #28]
 800888e:	e014      	b.n	80088ba <_vfiprintf_r+0x13a>
 8008890:	eba0 0308 	sub.w	r3, r0, r8
 8008894:	fa09 f303 	lsl.w	r3, r9, r3
 8008898:	4313      	orrs	r3, r2
 800889a:	9304      	str	r3, [sp, #16]
 800889c:	46a2      	mov	sl, r4
 800889e:	e7d2      	b.n	8008846 <_vfiprintf_r+0xc6>
 80088a0:	9b03      	ldr	r3, [sp, #12]
 80088a2:	1d19      	adds	r1, r3, #4
 80088a4:	681b      	ldr	r3, [r3, #0]
 80088a6:	9103      	str	r1, [sp, #12]
 80088a8:	2b00      	cmp	r3, #0
 80088aa:	bfbb      	ittet	lt
 80088ac:	425b      	neglt	r3, r3
 80088ae:	f042 0202 	orrlt.w	r2, r2, #2
 80088b2:	9307      	strge	r3, [sp, #28]
 80088b4:	9307      	strlt	r3, [sp, #28]
 80088b6:	bfb8      	it	lt
 80088b8:	9204      	strlt	r2, [sp, #16]
 80088ba:	7823      	ldrb	r3, [r4, #0]
 80088bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80088be:	d10a      	bne.n	80088d6 <_vfiprintf_r+0x156>
 80088c0:	7863      	ldrb	r3, [r4, #1]
 80088c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80088c4:	d132      	bne.n	800892c <_vfiprintf_r+0x1ac>
 80088c6:	9b03      	ldr	r3, [sp, #12]
 80088c8:	1d1a      	adds	r2, r3, #4
 80088ca:	681b      	ldr	r3, [r3, #0]
 80088cc:	9203      	str	r2, [sp, #12]
 80088ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80088d2:	3402      	adds	r4, #2
 80088d4:	9305      	str	r3, [sp, #20]
 80088d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80089ac <_vfiprintf_r+0x22c>
 80088da:	7821      	ldrb	r1, [r4, #0]
 80088dc:	2203      	movs	r2, #3
 80088de:	4650      	mov	r0, sl
 80088e0:	f7f7 fc76 	bl	80001d0 <memchr>
 80088e4:	b138      	cbz	r0, 80088f6 <_vfiprintf_r+0x176>
 80088e6:	9b04      	ldr	r3, [sp, #16]
 80088e8:	eba0 000a 	sub.w	r0, r0, sl
 80088ec:	2240      	movs	r2, #64	@ 0x40
 80088ee:	4082      	lsls	r2, r0
 80088f0:	4313      	orrs	r3, r2
 80088f2:	3401      	adds	r4, #1
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80088fa:	4829      	ldr	r0, [pc, #164]	@ (80089a0 <_vfiprintf_r+0x220>)
 80088fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008900:	2206      	movs	r2, #6
 8008902:	f7f7 fc65 	bl	80001d0 <memchr>
 8008906:	2800      	cmp	r0, #0
 8008908:	d03f      	beq.n	800898a <_vfiprintf_r+0x20a>
 800890a:	4b26      	ldr	r3, [pc, #152]	@ (80089a4 <_vfiprintf_r+0x224>)
 800890c:	bb1b      	cbnz	r3, 8008956 <_vfiprintf_r+0x1d6>
 800890e:	9b03      	ldr	r3, [sp, #12]
 8008910:	3307      	adds	r3, #7
 8008912:	f023 0307 	bic.w	r3, r3, #7
 8008916:	3308      	adds	r3, #8
 8008918:	9303      	str	r3, [sp, #12]
 800891a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800891c:	443b      	add	r3, r7
 800891e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008920:	e76a      	b.n	80087f8 <_vfiprintf_r+0x78>
 8008922:	fb0c 3202 	mla	r2, ip, r2, r3
 8008926:	460c      	mov	r4, r1
 8008928:	2001      	movs	r0, #1
 800892a:	e7a8      	b.n	800887e <_vfiprintf_r+0xfe>
 800892c:	2300      	movs	r3, #0
 800892e:	3401      	adds	r4, #1
 8008930:	9305      	str	r3, [sp, #20]
 8008932:	4619      	mov	r1, r3
 8008934:	f04f 0c0a 	mov.w	ip, #10
 8008938:	4620      	mov	r0, r4
 800893a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800893e:	3a30      	subs	r2, #48	@ 0x30
 8008940:	2a09      	cmp	r2, #9
 8008942:	d903      	bls.n	800894c <_vfiprintf_r+0x1cc>
 8008944:	2b00      	cmp	r3, #0
 8008946:	d0c6      	beq.n	80088d6 <_vfiprintf_r+0x156>
 8008948:	9105      	str	r1, [sp, #20]
 800894a:	e7c4      	b.n	80088d6 <_vfiprintf_r+0x156>
 800894c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008950:	4604      	mov	r4, r0
 8008952:	2301      	movs	r3, #1
 8008954:	e7f0      	b.n	8008938 <_vfiprintf_r+0x1b8>
 8008956:	ab03      	add	r3, sp, #12
 8008958:	9300      	str	r3, [sp, #0]
 800895a:	462a      	mov	r2, r5
 800895c:	4b12      	ldr	r3, [pc, #72]	@ (80089a8 <_vfiprintf_r+0x228>)
 800895e:	a904      	add	r1, sp, #16
 8008960:	4630      	mov	r0, r6
 8008962:	f3af 8000 	nop.w
 8008966:	4607      	mov	r7, r0
 8008968:	1c78      	adds	r0, r7, #1
 800896a:	d1d6      	bne.n	800891a <_vfiprintf_r+0x19a>
 800896c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800896e:	07d9      	lsls	r1, r3, #31
 8008970:	d405      	bmi.n	800897e <_vfiprintf_r+0x1fe>
 8008972:	89ab      	ldrh	r3, [r5, #12]
 8008974:	059a      	lsls	r2, r3, #22
 8008976:	d402      	bmi.n	800897e <_vfiprintf_r+0x1fe>
 8008978:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800897a:	f7ff fdcf 	bl	800851c <__retarget_lock_release_recursive>
 800897e:	89ab      	ldrh	r3, [r5, #12]
 8008980:	065b      	lsls	r3, r3, #25
 8008982:	f53f af1f 	bmi.w	80087c4 <_vfiprintf_r+0x44>
 8008986:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008988:	e71e      	b.n	80087c8 <_vfiprintf_r+0x48>
 800898a:	ab03      	add	r3, sp, #12
 800898c:	9300      	str	r3, [sp, #0]
 800898e:	462a      	mov	r2, r5
 8008990:	4b05      	ldr	r3, [pc, #20]	@ (80089a8 <_vfiprintf_r+0x228>)
 8008992:	a904      	add	r1, sp, #16
 8008994:	4630      	mov	r0, r6
 8008996:	f000 f879 	bl	8008a8c <_printf_i>
 800899a:	e7e4      	b.n	8008966 <_vfiprintf_r+0x1e6>
 800899c:	0800933c 	.word	0x0800933c
 80089a0:	08009346 	.word	0x08009346
 80089a4:	00000000 	.word	0x00000000
 80089a8:	0800875b 	.word	0x0800875b
 80089ac:	08009342 	.word	0x08009342

080089b0 <_printf_common>:
 80089b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80089b4:	4616      	mov	r6, r2
 80089b6:	4698      	mov	r8, r3
 80089b8:	688a      	ldr	r2, [r1, #8]
 80089ba:	690b      	ldr	r3, [r1, #16]
 80089bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80089c0:	4293      	cmp	r3, r2
 80089c2:	bfb8      	it	lt
 80089c4:	4613      	movlt	r3, r2
 80089c6:	6033      	str	r3, [r6, #0]
 80089c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80089cc:	4607      	mov	r7, r0
 80089ce:	460c      	mov	r4, r1
 80089d0:	b10a      	cbz	r2, 80089d6 <_printf_common+0x26>
 80089d2:	3301      	adds	r3, #1
 80089d4:	6033      	str	r3, [r6, #0]
 80089d6:	6823      	ldr	r3, [r4, #0]
 80089d8:	0699      	lsls	r1, r3, #26
 80089da:	bf42      	ittt	mi
 80089dc:	6833      	ldrmi	r3, [r6, #0]
 80089de:	3302      	addmi	r3, #2
 80089e0:	6033      	strmi	r3, [r6, #0]
 80089e2:	6825      	ldr	r5, [r4, #0]
 80089e4:	f015 0506 	ands.w	r5, r5, #6
 80089e8:	d106      	bne.n	80089f8 <_printf_common+0x48>
 80089ea:	f104 0a19 	add.w	sl, r4, #25
 80089ee:	68e3      	ldr	r3, [r4, #12]
 80089f0:	6832      	ldr	r2, [r6, #0]
 80089f2:	1a9b      	subs	r3, r3, r2
 80089f4:	42ab      	cmp	r3, r5
 80089f6:	dc26      	bgt.n	8008a46 <_printf_common+0x96>
 80089f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80089fc:	6822      	ldr	r2, [r4, #0]
 80089fe:	3b00      	subs	r3, #0
 8008a00:	bf18      	it	ne
 8008a02:	2301      	movne	r3, #1
 8008a04:	0692      	lsls	r2, r2, #26
 8008a06:	d42b      	bmi.n	8008a60 <_printf_common+0xb0>
 8008a08:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008a0c:	4641      	mov	r1, r8
 8008a0e:	4638      	mov	r0, r7
 8008a10:	47c8      	blx	r9
 8008a12:	3001      	adds	r0, #1
 8008a14:	d01e      	beq.n	8008a54 <_printf_common+0xa4>
 8008a16:	6823      	ldr	r3, [r4, #0]
 8008a18:	6922      	ldr	r2, [r4, #16]
 8008a1a:	f003 0306 	and.w	r3, r3, #6
 8008a1e:	2b04      	cmp	r3, #4
 8008a20:	bf02      	ittt	eq
 8008a22:	68e5      	ldreq	r5, [r4, #12]
 8008a24:	6833      	ldreq	r3, [r6, #0]
 8008a26:	1aed      	subeq	r5, r5, r3
 8008a28:	68a3      	ldr	r3, [r4, #8]
 8008a2a:	bf0c      	ite	eq
 8008a2c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008a30:	2500      	movne	r5, #0
 8008a32:	4293      	cmp	r3, r2
 8008a34:	bfc4      	itt	gt
 8008a36:	1a9b      	subgt	r3, r3, r2
 8008a38:	18ed      	addgt	r5, r5, r3
 8008a3a:	2600      	movs	r6, #0
 8008a3c:	341a      	adds	r4, #26
 8008a3e:	42b5      	cmp	r5, r6
 8008a40:	d11a      	bne.n	8008a78 <_printf_common+0xc8>
 8008a42:	2000      	movs	r0, #0
 8008a44:	e008      	b.n	8008a58 <_printf_common+0xa8>
 8008a46:	2301      	movs	r3, #1
 8008a48:	4652      	mov	r2, sl
 8008a4a:	4641      	mov	r1, r8
 8008a4c:	4638      	mov	r0, r7
 8008a4e:	47c8      	blx	r9
 8008a50:	3001      	adds	r0, #1
 8008a52:	d103      	bne.n	8008a5c <_printf_common+0xac>
 8008a54:	f04f 30ff 	mov.w	r0, #4294967295
 8008a58:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008a5c:	3501      	adds	r5, #1
 8008a5e:	e7c6      	b.n	80089ee <_printf_common+0x3e>
 8008a60:	18e1      	adds	r1, r4, r3
 8008a62:	1c5a      	adds	r2, r3, #1
 8008a64:	2030      	movs	r0, #48	@ 0x30
 8008a66:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008a6a:	4422      	add	r2, r4
 8008a6c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008a70:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008a74:	3302      	adds	r3, #2
 8008a76:	e7c7      	b.n	8008a08 <_printf_common+0x58>
 8008a78:	2301      	movs	r3, #1
 8008a7a:	4622      	mov	r2, r4
 8008a7c:	4641      	mov	r1, r8
 8008a7e:	4638      	mov	r0, r7
 8008a80:	47c8      	blx	r9
 8008a82:	3001      	adds	r0, #1
 8008a84:	d0e6      	beq.n	8008a54 <_printf_common+0xa4>
 8008a86:	3601      	adds	r6, #1
 8008a88:	e7d9      	b.n	8008a3e <_printf_common+0x8e>
	...

08008a8c <_printf_i>:
 8008a8c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008a90:	7e0f      	ldrb	r7, [r1, #24]
 8008a92:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008a94:	2f78      	cmp	r7, #120	@ 0x78
 8008a96:	4691      	mov	r9, r2
 8008a98:	4680      	mov	r8, r0
 8008a9a:	460c      	mov	r4, r1
 8008a9c:	469a      	mov	sl, r3
 8008a9e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008aa2:	d807      	bhi.n	8008ab4 <_printf_i+0x28>
 8008aa4:	2f62      	cmp	r7, #98	@ 0x62
 8008aa6:	d80a      	bhi.n	8008abe <_printf_i+0x32>
 8008aa8:	2f00      	cmp	r7, #0
 8008aaa:	f000 80d1 	beq.w	8008c50 <_printf_i+0x1c4>
 8008aae:	2f58      	cmp	r7, #88	@ 0x58
 8008ab0:	f000 80b8 	beq.w	8008c24 <_printf_i+0x198>
 8008ab4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008ab8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008abc:	e03a      	b.n	8008b34 <_printf_i+0xa8>
 8008abe:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ac2:	2b15      	cmp	r3, #21
 8008ac4:	d8f6      	bhi.n	8008ab4 <_printf_i+0x28>
 8008ac6:	a101      	add	r1, pc, #4	@ (adr r1, 8008acc <_printf_i+0x40>)
 8008ac8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008acc:	08008b25 	.word	0x08008b25
 8008ad0:	08008b39 	.word	0x08008b39
 8008ad4:	08008ab5 	.word	0x08008ab5
 8008ad8:	08008ab5 	.word	0x08008ab5
 8008adc:	08008ab5 	.word	0x08008ab5
 8008ae0:	08008ab5 	.word	0x08008ab5
 8008ae4:	08008b39 	.word	0x08008b39
 8008ae8:	08008ab5 	.word	0x08008ab5
 8008aec:	08008ab5 	.word	0x08008ab5
 8008af0:	08008ab5 	.word	0x08008ab5
 8008af4:	08008ab5 	.word	0x08008ab5
 8008af8:	08008c37 	.word	0x08008c37
 8008afc:	08008b63 	.word	0x08008b63
 8008b00:	08008bf1 	.word	0x08008bf1
 8008b04:	08008ab5 	.word	0x08008ab5
 8008b08:	08008ab5 	.word	0x08008ab5
 8008b0c:	08008c59 	.word	0x08008c59
 8008b10:	08008ab5 	.word	0x08008ab5
 8008b14:	08008b63 	.word	0x08008b63
 8008b18:	08008ab5 	.word	0x08008ab5
 8008b1c:	08008ab5 	.word	0x08008ab5
 8008b20:	08008bf9 	.word	0x08008bf9
 8008b24:	6833      	ldr	r3, [r6, #0]
 8008b26:	1d1a      	adds	r2, r3, #4
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	6032      	str	r2, [r6, #0]
 8008b2c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b30:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008b34:	2301      	movs	r3, #1
 8008b36:	e09c      	b.n	8008c72 <_printf_i+0x1e6>
 8008b38:	6833      	ldr	r3, [r6, #0]
 8008b3a:	6820      	ldr	r0, [r4, #0]
 8008b3c:	1d19      	adds	r1, r3, #4
 8008b3e:	6031      	str	r1, [r6, #0]
 8008b40:	0606      	lsls	r6, r0, #24
 8008b42:	d501      	bpl.n	8008b48 <_printf_i+0xbc>
 8008b44:	681d      	ldr	r5, [r3, #0]
 8008b46:	e003      	b.n	8008b50 <_printf_i+0xc4>
 8008b48:	0645      	lsls	r5, r0, #25
 8008b4a:	d5fb      	bpl.n	8008b44 <_printf_i+0xb8>
 8008b4c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008b50:	2d00      	cmp	r5, #0
 8008b52:	da03      	bge.n	8008b5c <_printf_i+0xd0>
 8008b54:	232d      	movs	r3, #45	@ 0x2d
 8008b56:	426d      	negs	r5, r5
 8008b58:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008b5c:	4858      	ldr	r0, [pc, #352]	@ (8008cc0 <_printf_i+0x234>)
 8008b5e:	230a      	movs	r3, #10
 8008b60:	e011      	b.n	8008b86 <_printf_i+0xfa>
 8008b62:	6821      	ldr	r1, [r4, #0]
 8008b64:	6833      	ldr	r3, [r6, #0]
 8008b66:	0608      	lsls	r0, r1, #24
 8008b68:	f853 5b04 	ldr.w	r5, [r3], #4
 8008b6c:	d402      	bmi.n	8008b74 <_printf_i+0xe8>
 8008b6e:	0649      	lsls	r1, r1, #25
 8008b70:	bf48      	it	mi
 8008b72:	b2ad      	uxthmi	r5, r5
 8008b74:	2f6f      	cmp	r7, #111	@ 0x6f
 8008b76:	4852      	ldr	r0, [pc, #328]	@ (8008cc0 <_printf_i+0x234>)
 8008b78:	6033      	str	r3, [r6, #0]
 8008b7a:	bf14      	ite	ne
 8008b7c:	230a      	movne	r3, #10
 8008b7e:	2308      	moveq	r3, #8
 8008b80:	2100      	movs	r1, #0
 8008b82:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008b86:	6866      	ldr	r6, [r4, #4]
 8008b88:	60a6      	str	r6, [r4, #8]
 8008b8a:	2e00      	cmp	r6, #0
 8008b8c:	db05      	blt.n	8008b9a <_printf_i+0x10e>
 8008b8e:	6821      	ldr	r1, [r4, #0]
 8008b90:	432e      	orrs	r6, r5
 8008b92:	f021 0104 	bic.w	r1, r1, #4
 8008b96:	6021      	str	r1, [r4, #0]
 8008b98:	d04b      	beq.n	8008c32 <_printf_i+0x1a6>
 8008b9a:	4616      	mov	r6, r2
 8008b9c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008ba0:	fb03 5711 	mls	r7, r3, r1, r5
 8008ba4:	5dc7      	ldrb	r7, [r0, r7]
 8008ba6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008baa:	462f      	mov	r7, r5
 8008bac:	42bb      	cmp	r3, r7
 8008bae:	460d      	mov	r5, r1
 8008bb0:	d9f4      	bls.n	8008b9c <_printf_i+0x110>
 8008bb2:	2b08      	cmp	r3, #8
 8008bb4:	d10b      	bne.n	8008bce <_printf_i+0x142>
 8008bb6:	6823      	ldr	r3, [r4, #0]
 8008bb8:	07df      	lsls	r7, r3, #31
 8008bba:	d508      	bpl.n	8008bce <_printf_i+0x142>
 8008bbc:	6923      	ldr	r3, [r4, #16]
 8008bbe:	6861      	ldr	r1, [r4, #4]
 8008bc0:	4299      	cmp	r1, r3
 8008bc2:	bfde      	ittt	le
 8008bc4:	2330      	movle	r3, #48	@ 0x30
 8008bc6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008bca:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008bce:	1b92      	subs	r2, r2, r6
 8008bd0:	6122      	str	r2, [r4, #16]
 8008bd2:	f8cd a000 	str.w	sl, [sp]
 8008bd6:	464b      	mov	r3, r9
 8008bd8:	aa03      	add	r2, sp, #12
 8008bda:	4621      	mov	r1, r4
 8008bdc:	4640      	mov	r0, r8
 8008bde:	f7ff fee7 	bl	80089b0 <_printf_common>
 8008be2:	3001      	adds	r0, #1
 8008be4:	d14a      	bne.n	8008c7c <_printf_i+0x1f0>
 8008be6:	f04f 30ff 	mov.w	r0, #4294967295
 8008bea:	b004      	add	sp, #16
 8008bec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008bf0:	6823      	ldr	r3, [r4, #0]
 8008bf2:	f043 0320 	orr.w	r3, r3, #32
 8008bf6:	6023      	str	r3, [r4, #0]
 8008bf8:	4832      	ldr	r0, [pc, #200]	@ (8008cc4 <_printf_i+0x238>)
 8008bfa:	2778      	movs	r7, #120	@ 0x78
 8008bfc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008c00:	6823      	ldr	r3, [r4, #0]
 8008c02:	6831      	ldr	r1, [r6, #0]
 8008c04:	061f      	lsls	r7, r3, #24
 8008c06:	f851 5b04 	ldr.w	r5, [r1], #4
 8008c0a:	d402      	bmi.n	8008c12 <_printf_i+0x186>
 8008c0c:	065f      	lsls	r7, r3, #25
 8008c0e:	bf48      	it	mi
 8008c10:	b2ad      	uxthmi	r5, r5
 8008c12:	6031      	str	r1, [r6, #0]
 8008c14:	07d9      	lsls	r1, r3, #31
 8008c16:	bf44      	itt	mi
 8008c18:	f043 0320 	orrmi.w	r3, r3, #32
 8008c1c:	6023      	strmi	r3, [r4, #0]
 8008c1e:	b11d      	cbz	r5, 8008c28 <_printf_i+0x19c>
 8008c20:	2310      	movs	r3, #16
 8008c22:	e7ad      	b.n	8008b80 <_printf_i+0xf4>
 8008c24:	4826      	ldr	r0, [pc, #152]	@ (8008cc0 <_printf_i+0x234>)
 8008c26:	e7e9      	b.n	8008bfc <_printf_i+0x170>
 8008c28:	6823      	ldr	r3, [r4, #0]
 8008c2a:	f023 0320 	bic.w	r3, r3, #32
 8008c2e:	6023      	str	r3, [r4, #0]
 8008c30:	e7f6      	b.n	8008c20 <_printf_i+0x194>
 8008c32:	4616      	mov	r6, r2
 8008c34:	e7bd      	b.n	8008bb2 <_printf_i+0x126>
 8008c36:	6833      	ldr	r3, [r6, #0]
 8008c38:	6825      	ldr	r5, [r4, #0]
 8008c3a:	6961      	ldr	r1, [r4, #20]
 8008c3c:	1d18      	adds	r0, r3, #4
 8008c3e:	6030      	str	r0, [r6, #0]
 8008c40:	062e      	lsls	r6, r5, #24
 8008c42:	681b      	ldr	r3, [r3, #0]
 8008c44:	d501      	bpl.n	8008c4a <_printf_i+0x1be>
 8008c46:	6019      	str	r1, [r3, #0]
 8008c48:	e002      	b.n	8008c50 <_printf_i+0x1c4>
 8008c4a:	0668      	lsls	r0, r5, #25
 8008c4c:	d5fb      	bpl.n	8008c46 <_printf_i+0x1ba>
 8008c4e:	8019      	strh	r1, [r3, #0]
 8008c50:	2300      	movs	r3, #0
 8008c52:	6123      	str	r3, [r4, #16]
 8008c54:	4616      	mov	r6, r2
 8008c56:	e7bc      	b.n	8008bd2 <_printf_i+0x146>
 8008c58:	6833      	ldr	r3, [r6, #0]
 8008c5a:	1d1a      	adds	r2, r3, #4
 8008c5c:	6032      	str	r2, [r6, #0]
 8008c5e:	681e      	ldr	r6, [r3, #0]
 8008c60:	6862      	ldr	r2, [r4, #4]
 8008c62:	2100      	movs	r1, #0
 8008c64:	4630      	mov	r0, r6
 8008c66:	f7f7 fab3 	bl	80001d0 <memchr>
 8008c6a:	b108      	cbz	r0, 8008c70 <_printf_i+0x1e4>
 8008c6c:	1b80      	subs	r0, r0, r6
 8008c6e:	6060      	str	r0, [r4, #4]
 8008c70:	6863      	ldr	r3, [r4, #4]
 8008c72:	6123      	str	r3, [r4, #16]
 8008c74:	2300      	movs	r3, #0
 8008c76:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c7a:	e7aa      	b.n	8008bd2 <_printf_i+0x146>
 8008c7c:	6923      	ldr	r3, [r4, #16]
 8008c7e:	4632      	mov	r2, r6
 8008c80:	4649      	mov	r1, r9
 8008c82:	4640      	mov	r0, r8
 8008c84:	47d0      	blx	sl
 8008c86:	3001      	adds	r0, #1
 8008c88:	d0ad      	beq.n	8008be6 <_printf_i+0x15a>
 8008c8a:	6823      	ldr	r3, [r4, #0]
 8008c8c:	079b      	lsls	r3, r3, #30
 8008c8e:	d413      	bmi.n	8008cb8 <_printf_i+0x22c>
 8008c90:	68e0      	ldr	r0, [r4, #12]
 8008c92:	9b03      	ldr	r3, [sp, #12]
 8008c94:	4298      	cmp	r0, r3
 8008c96:	bfb8      	it	lt
 8008c98:	4618      	movlt	r0, r3
 8008c9a:	e7a6      	b.n	8008bea <_printf_i+0x15e>
 8008c9c:	2301      	movs	r3, #1
 8008c9e:	4632      	mov	r2, r6
 8008ca0:	4649      	mov	r1, r9
 8008ca2:	4640      	mov	r0, r8
 8008ca4:	47d0      	blx	sl
 8008ca6:	3001      	adds	r0, #1
 8008ca8:	d09d      	beq.n	8008be6 <_printf_i+0x15a>
 8008caa:	3501      	adds	r5, #1
 8008cac:	68e3      	ldr	r3, [r4, #12]
 8008cae:	9903      	ldr	r1, [sp, #12]
 8008cb0:	1a5b      	subs	r3, r3, r1
 8008cb2:	42ab      	cmp	r3, r5
 8008cb4:	dcf2      	bgt.n	8008c9c <_printf_i+0x210>
 8008cb6:	e7eb      	b.n	8008c90 <_printf_i+0x204>
 8008cb8:	2500      	movs	r5, #0
 8008cba:	f104 0619 	add.w	r6, r4, #25
 8008cbe:	e7f5      	b.n	8008cac <_printf_i+0x220>
 8008cc0:	0800934d 	.word	0x0800934d
 8008cc4:	0800935e 	.word	0x0800935e

08008cc8 <__sflush_r>:
 8008cc8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008ccc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008cd0:	0716      	lsls	r6, r2, #28
 8008cd2:	4605      	mov	r5, r0
 8008cd4:	460c      	mov	r4, r1
 8008cd6:	d454      	bmi.n	8008d82 <__sflush_r+0xba>
 8008cd8:	684b      	ldr	r3, [r1, #4]
 8008cda:	2b00      	cmp	r3, #0
 8008cdc:	dc02      	bgt.n	8008ce4 <__sflush_r+0x1c>
 8008cde:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008ce0:	2b00      	cmp	r3, #0
 8008ce2:	dd48      	ble.n	8008d76 <__sflush_r+0xae>
 8008ce4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008ce6:	2e00      	cmp	r6, #0
 8008ce8:	d045      	beq.n	8008d76 <__sflush_r+0xae>
 8008cea:	2300      	movs	r3, #0
 8008cec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008cf0:	682f      	ldr	r7, [r5, #0]
 8008cf2:	6a21      	ldr	r1, [r4, #32]
 8008cf4:	602b      	str	r3, [r5, #0]
 8008cf6:	d030      	beq.n	8008d5a <__sflush_r+0x92>
 8008cf8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008cfa:	89a3      	ldrh	r3, [r4, #12]
 8008cfc:	0759      	lsls	r1, r3, #29
 8008cfe:	d505      	bpl.n	8008d0c <__sflush_r+0x44>
 8008d00:	6863      	ldr	r3, [r4, #4]
 8008d02:	1ad2      	subs	r2, r2, r3
 8008d04:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008d06:	b10b      	cbz	r3, 8008d0c <__sflush_r+0x44>
 8008d08:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008d0a:	1ad2      	subs	r2, r2, r3
 8008d0c:	2300      	movs	r3, #0
 8008d0e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008d10:	6a21      	ldr	r1, [r4, #32]
 8008d12:	4628      	mov	r0, r5
 8008d14:	47b0      	blx	r6
 8008d16:	1c43      	adds	r3, r0, #1
 8008d18:	89a3      	ldrh	r3, [r4, #12]
 8008d1a:	d106      	bne.n	8008d2a <__sflush_r+0x62>
 8008d1c:	6829      	ldr	r1, [r5, #0]
 8008d1e:	291d      	cmp	r1, #29
 8008d20:	d82b      	bhi.n	8008d7a <__sflush_r+0xb2>
 8008d22:	4a2a      	ldr	r2, [pc, #168]	@ (8008dcc <__sflush_r+0x104>)
 8008d24:	40ca      	lsrs	r2, r1
 8008d26:	07d6      	lsls	r6, r2, #31
 8008d28:	d527      	bpl.n	8008d7a <__sflush_r+0xb2>
 8008d2a:	2200      	movs	r2, #0
 8008d2c:	6062      	str	r2, [r4, #4]
 8008d2e:	04d9      	lsls	r1, r3, #19
 8008d30:	6922      	ldr	r2, [r4, #16]
 8008d32:	6022      	str	r2, [r4, #0]
 8008d34:	d504      	bpl.n	8008d40 <__sflush_r+0x78>
 8008d36:	1c42      	adds	r2, r0, #1
 8008d38:	d101      	bne.n	8008d3e <__sflush_r+0x76>
 8008d3a:	682b      	ldr	r3, [r5, #0]
 8008d3c:	b903      	cbnz	r3, 8008d40 <__sflush_r+0x78>
 8008d3e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008d40:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008d42:	602f      	str	r7, [r5, #0]
 8008d44:	b1b9      	cbz	r1, 8008d76 <__sflush_r+0xae>
 8008d46:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008d4a:	4299      	cmp	r1, r3
 8008d4c:	d002      	beq.n	8008d54 <__sflush_r+0x8c>
 8008d4e:	4628      	mov	r0, r5
 8008d50:	f7ff fbf4 	bl	800853c <_free_r>
 8008d54:	2300      	movs	r3, #0
 8008d56:	6363      	str	r3, [r4, #52]	@ 0x34
 8008d58:	e00d      	b.n	8008d76 <__sflush_r+0xae>
 8008d5a:	2301      	movs	r3, #1
 8008d5c:	4628      	mov	r0, r5
 8008d5e:	47b0      	blx	r6
 8008d60:	4602      	mov	r2, r0
 8008d62:	1c50      	adds	r0, r2, #1
 8008d64:	d1c9      	bne.n	8008cfa <__sflush_r+0x32>
 8008d66:	682b      	ldr	r3, [r5, #0]
 8008d68:	2b00      	cmp	r3, #0
 8008d6a:	d0c6      	beq.n	8008cfa <__sflush_r+0x32>
 8008d6c:	2b1d      	cmp	r3, #29
 8008d6e:	d001      	beq.n	8008d74 <__sflush_r+0xac>
 8008d70:	2b16      	cmp	r3, #22
 8008d72:	d11e      	bne.n	8008db2 <__sflush_r+0xea>
 8008d74:	602f      	str	r7, [r5, #0]
 8008d76:	2000      	movs	r0, #0
 8008d78:	e022      	b.n	8008dc0 <__sflush_r+0xf8>
 8008d7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008d7e:	b21b      	sxth	r3, r3
 8008d80:	e01b      	b.n	8008dba <__sflush_r+0xf2>
 8008d82:	690f      	ldr	r7, [r1, #16]
 8008d84:	2f00      	cmp	r7, #0
 8008d86:	d0f6      	beq.n	8008d76 <__sflush_r+0xae>
 8008d88:	0793      	lsls	r3, r2, #30
 8008d8a:	680e      	ldr	r6, [r1, #0]
 8008d8c:	bf08      	it	eq
 8008d8e:	694b      	ldreq	r3, [r1, #20]
 8008d90:	600f      	str	r7, [r1, #0]
 8008d92:	bf18      	it	ne
 8008d94:	2300      	movne	r3, #0
 8008d96:	eba6 0807 	sub.w	r8, r6, r7
 8008d9a:	608b      	str	r3, [r1, #8]
 8008d9c:	f1b8 0f00 	cmp.w	r8, #0
 8008da0:	dde9      	ble.n	8008d76 <__sflush_r+0xae>
 8008da2:	6a21      	ldr	r1, [r4, #32]
 8008da4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008da6:	4643      	mov	r3, r8
 8008da8:	463a      	mov	r2, r7
 8008daa:	4628      	mov	r0, r5
 8008dac:	47b0      	blx	r6
 8008dae:	2800      	cmp	r0, #0
 8008db0:	dc08      	bgt.n	8008dc4 <__sflush_r+0xfc>
 8008db2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008db6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008dba:	81a3      	strh	r3, [r4, #12]
 8008dbc:	f04f 30ff 	mov.w	r0, #4294967295
 8008dc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008dc4:	4407      	add	r7, r0
 8008dc6:	eba8 0800 	sub.w	r8, r8, r0
 8008dca:	e7e7      	b.n	8008d9c <__sflush_r+0xd4>
 8008dcc:	20400001 	.word	0x20400001

08008dd0 <_fflush_r>:
 8008dd0:	b538      	push	{r3, r4, r5, lr}
 8008dd2:	690b      	ldr	r3, [r1, #16]
 8008dd4:	4605      	mov	r5, r0
 8008dd6:	460c      	mov	r4, r1
 8008dd8:	b913      	cbnz	r3, 8008de0 <_fflush_r+0x10>
 8008dda:	2500      	movs	r5, #0
 8008ddc:	4628      	mov	r0, r5
 8008dde:	bd38      	pop	{r3, r4, r5, pc}
 8008de0:	b118      	cbz	r0, 8008dea <_fflush_r+0x1a>
 8008de2:	6a03      	ldr	r3, [r0, #32]
 8008de4:	b90b      	cbnz	r3, 8008dea <_fflush_r+0x1a>
 8008de6:	f7ff f93b 	bl	8008060 <__sinit>
 8008dea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008dee:	2b00      	cmp	r3, #0
 8008df0:	d0f3      	beq.n	8008dda <_fflush_r+0xa>
 8008df2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008df4:	07d0      	lsls	r0, r2, #31
 8008df6:	d404      	bmi.n	8008e02 <_fflush_r+0x32>
 8008df8:	0599      	lsls	r1, r3, #22
 8008dfa:	d402      	bmi.n	8008e02 <_fflush_r+0x32>
 8008dfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008dfe:	f7ff fb8c 	bl	800851a <__retarget_lock_acquire_recursive>
 8008e02:	4628      	mov	r0, r5
 8008e04:	4621      	mov	r1, r4
 8008e06:	f7ff ff5f 	bl	8008cc8 <__sflush_r>
 8008e0a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008e0c:	07da      	lsls	r2, r3, #31
 8008e0e:	4605      	mov	r5, r0
 8008e10:	d4e4      	bmi.n	8008ddc <_fflush_r+0xc>
 8008e12:	89a3      	ldrh	r3, [r4, #12]
 8008e14:	059b      	lsls	r3, r3, #22
 8008e16:	d4e1      	bmi.n	8008ddc <_fflush_r+0xc>
 8008e18:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008e1a:	f7ff fb7f 	bl	800851c <__retarget_lock_release_recursive>
 8008e1e:	e7dd      	b.n	8008ddc <_fflush_r+0xc>

08008e20 <__swhatbuf_r>:
 8008e20:	b570      	push	{r4, r5, r6, lr}
 8008e22:	460c      	mov	r4, r1
 8008e24:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008e28:	2900      	cmp	r1, #0
 8008e2a:	b096      	sub	sp, #88	@ 0x58
 8008e2c:	4615      	mov	r5, r2
 8008e2e:	461e      	mov	r6, r3
 8008e30:	da0d      	bge.n	8008e4e <__swhatbuf_r+0x2e>
 8008e32:	89a3      	ldrh	r3, [r4, #12]
 8008e34:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008e38:	f04f 0100 	mov.w	r1, #0
 8008e3c:	bf14      	ite	ne
 8008e3e:	2340      	movne	r3, #64	@ 0x40
 8008e40:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008e44:	2000      	movs	r0, #0
 8008e46:	6031      	str	r1, [r6, #0]
 8008e48:	602b      	str	r3, [r5, #0]
 8008e4a:	b016      	add	sp, #88	@ 0x58
 8008e4c:	bd70      	pop	{r4, r5, r6, pc}
 8008e4e:	466a      	mov	r2, sp
 8008e50:	f000 f87c 	bl	8008f4c <_fstat_r>
 8008e54:	2800      	cmp	r0, #0
 8008e56:	dbec      	blt.n	8008e32 <__swhatbuf_r+0x12>
 8008e58:	9901      	ldr	r1, [sp, #4]
 8008e5a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008e5e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008e62:	4259      	negs	r1, r3
 8008e64:	4159      	adcs	r1, r3
 8008e66:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008e6a:	e7eb      	b.n	8008e44 <__swhatbuf_r+0x24>

08008e6c <__smakebuf_r>:
 8008e6c:	898b      	ldrh	r3, [r1, #12]
 8008e6e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008e70:	079d      	lsls	r5, r3, #30
 8008e72:	4606      	mov	r6, r0
 8008e74:	460c      	mov	r4, r1
 8008e76:	d507      	bpl.n	8008e88 <__smakebuf_r+0x1c>
 8008e78:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008e7c:	6023      	str	r3, [r4, #0]
 8008e7e:	6123      	str	r3, [r4, #16]
 8008e80:	2301      	movs	r3, #1
 8008e82:	6163      	str	r3, [r4, #20]
 8008e84:	b003      	add	sp, #12
 8008e86:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008e88:	ab01      	add	r3, sp, #4
 8008e8a:	466a      	mov	r2, sp
 8008e8c:	f7ff ffc8 	bl	8008e20 <__swhatbuf_r>
 8008e90:	9f00      	ldr	r7, [sp, #0]
 8008e92:	4605      	mov	r5, r0
 8008e94:	4639      	mov	r1, r7
 8008e96:	4630      	mov	r0, r6
 8008e98:	f7ff fbbc 	bl	8008614 <_malloc_r>
 8008e9c:	b948      	cbnz	r0, 8008eb2 <__smakebuf_r+0x46>
 8008e9e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ea2:	059a      	lsls	r2, r3, #22
 8008ea4:	d4ee      	bmi.n	8008e84 <__smakebuf_r+0x18>
 8008ea6:	f023 0303 	bic.w	r3, r3, #3
 8008eaa:	f043 0302 	orr.w	r3, r3, #2
 8008eae:	81a3      	strh	r3, [r4, #12]
 8008eb0:	e7e2      	b.n	8008e78 <__smakebuf_r+0xc>
 8008eb2:	89a3      	ldrh	r3, [r4, #12]
 8008eb4:	6020      	str	r0, [r4, #0]
 8008eb6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008eba:	81a3      	strh	r3, [r4, #12]
 8008ebc:	9b01      	ldr	r3, [sp, #4]
 8008ebe:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008ec2:	b15b      	cbz	r3, 8008edc <__smakebuf_r+0x70>
 8008ec4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008ec8:	4630      	mov	r0, r6
 8008eca:	f000 f851 	bl	8008f70 <_isatty_r>
 8008ece:	b128      	cbz	r0, 8008edc <__smakebuf_r+0x70>
 8008ed0:	89a3      	ldrh	r3, [r4, #12]
 8008ed2:	f023 0303 	bic.w	r3, r3, #3
 8008ed6:	f043 0301 	orr.w	r3, r3, #1
 8008eda:	81a3      	strh	r3, [r4, #12]
 8008edc:	89a3      	ldrh	r3, [r4, #12]
 8008ede:	431d      	orrs	r5, r3
 8008ee0:	81a5      	strh	r5, [r4, #12]
 8008ee2:	e7cf      	b.n	8008e84 <__smakebuf_r+0x18>

08008ee4 <_putc_r>:
 8008ee4:	b570      	push	{r4, r5, r6, lr}
 8008ee6:	460d      	mov	r5, r1
 8008ee8:	4614      	mov	r4, r2
 8008eea:	4606      	mov	r6, r0
 8008eec:	b118      	cbz	r0, 8008ef6 <_putc_r+0x12>
 8008eee:	6a03      	ldr	r3, [r0, #32]
 8008ef0:	b90b      	cbnz	r3, 8008ef6 <_putc_r+0x12>
 8008ef2:	f7ff f8b5 	bl	8008060 <__sinit>
 8008ef6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008ef8:	07d8      	lsls	r0, r3, #31
 8008efa:	d405      	bmi.n	8008f08 <_putc_r+0x24>
 8008efc:	89a3      	ldrh	r3, [r4, #12]
 8008efe:	0599      	lsls	r1, r3, #22
 8008f00:	d402      	bmi.n	8008f08 <_putc_r+0x24>
 8008f02:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f04:	f7ff fb09 	bl	800851a <__retarget_lock_acquire_recursive>
 8008f08:	68a3      	ldr	r3, [r4, #8]
 8008f0a:	3b01      	subs	r3, #1
 8008f0c:	2b00      	cmp	r3, #0
 8008f0e:	60a3      	str	r3, [r4, #8]
 8008f10:	da05      	bge.n	8008f1e <_putc_r+0x3a>
 8008f12:	69a2      	ldr	r2, [r4, #24]
 8008f14:	4293      	cmp	r3, r2
 8008f16:	db12      	blt.n	8008f3e <_putc_r+0x5a>
 8008f18:	b2eb      	uxtb	r3, r5
 8008f1a:	2b0a      	cmp	r3, #10
 8008f1c:	d00f      	beq.n	8008f3e <_putc_r+0x5a>
 8008f1e:	6823      	ldr	r3, [r4, #0]
 8008f20:	1c5a      	adds	r2, r3, #1
 8008f22:	6022      	str	r2, [r4, #0]
 8008f24:	701d      	strb	r5, [r3, #0]
 8008f26:	b2ed      	uxtb	r5, r5
 8008f28:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008f2a:	07da      	lsls	r2, r3, #31
 8008f2c:	d405      	bmi.n	8008f3a <_putc_r+0x56>
 8008f2e:	89a3      	ldrh	r3, [r4, #12]
 8008f30:	059b      	lsls	r3, r3, #22
 8008f32:	d402      	bmi.n	8008f3a <_putc_r+0x56>
 8008f34:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008f36:	f7ff faf1 	bl	800851c <__retarget_lock_release_recursive>
 8008f3a:	4628      	mov	r0, r5
 8008f3c:	bd70      	pop	{r4, r5, r6, pc}
 8008f3e:	4629      	mov	r1, r5
 8008f40:	4622      	mov	r2, r4
 8008f42:	4630      	mov	r0, r6
 8008f44:	f7ff f97d 	bl	8008242 <__swbuf_r>
 8008f48:	4605      	mov	r5, r0
 8008f4a:	e7ed      	b.n	8008f28 <_putc_r+0x44>

08008f4c <_fstat_r>:
 8008f4c:	b538      	push	{r3, r4, r5, lr}
 8008f4e:	4d07      	ldr	r5, [pc, #28]	@ (8008f6c <_fstat_r+0x20>)
 8008f50:	2300      	movs	r3, #0
 8008f52:	4604      	mov	r4, r0
 8008f54:	4608      	mov	r0, r1
 8008f56:	4611      	mov	r1, r2
 8008f58:	602b      	str	r3, [r5, #0]
 8008f5a:	f7f8 fd7c 	bl	8001a56 <_fstat>
 8008f5e:	1c43      	adds	r3, r0, #1
 8008f60:	d102      	bne.n	8008f68 <_fstat_r+0x1c>
 8008f62:	682b      	ldr	r3, [r5, #0]
 8008f64:	b103      	cbz	r3, 8008f68 <_fstat_r+0x1c>
 8008f66:	6023      	str	r3, [r4, #0]
 8008f68:	bd38      	pop	{r3, r4, r5, pc}
 8008f6a:	bf00      	nop
 8008f6c:	20004d94 	.word	0x20004d94

08008f70 <_isatty_r>:
 8008f70:	b538      	push	{r3, r4, r5, lr}
 8008f72:	4d06      	ldr	r5, [pc, #24]	@ (8008f8c <_isatty_r+0x1c>)
 8008f74:	2300      	movs	r3, #0
 8008f76:	4604      	mov	r4, r0
 8008f78:	4608      	mov	r0, r1
 8008f7a:	602b      	str	r3, [r5, #0]
 8008f7c:	f7f8 fd7b 	bl	8001a76 <_isatty>
 8008f80:	1c43      	adds	r3, r0, #1
 8008f82:	d102      	bne.n	8008f8a <_isatty_r+0x1a>
 8008f84:	682b      	ldr	r3, [r5, #0]
 8008f86:	b103      	cbz	r3, 8008f8a <_isatty_r+0x1a>
 8008f88:	6023      	str	r3, [r4, #0]
 8008f8a:	bd38      	pop	{r3, r4, r5, pc}
 8008f8c:	20004d94 	.word	0x20004d94

08008f90 <_sbrk_r>:
 8008f90:	b538      	push	{r3, r4, r5, lr}
 8008f92:	4d06      	ldr	r5, [pc, #24]	@ (8008fac <_sbrk_r+0x1c>)
 8008f94:	2300      	movs	r3, #0
 8008f96:	4604      	mov	r4, r0
 8008f98:	4608      	mov	r0, r1
 8008f9a:	602b      	str	r3, [r5, #0]
 8008f9c:	f7f8 fd84 	bl	8001aa8 <_sbrk>
 8008fa0:	1c43      	adds	r3, r0, #1
 8008fa2:	d102      	bne.n	8008faa <_sbrk_r+0x1a>
 8008fa4:	682b      	ldr	r3, [r5, #0]
 8008fa6:	b103      	cbz	r3, 8008faa <_sbrk_r+0x1a>
 8008fa8:	6023      	str	r3, [r4, #0]
 8008faa:	bd38      	pop	{r3, r4, r5, pc}
 8008fac:	20004d94 	.word	0x20004d94

08008fb0 <_init>:
 8008fb0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fb2:	bf00      	nop
 8008fb4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fb6:	bc08      	pop	{r3}
 8008fb8:	469e      	mov	lr, r3
 8008fba:	4770      	bx	lr

08008fbc <_fini>:
 8008fbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008fbe:	bf00      	nop
 8008fc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008fc2:	bc08      	pop	{r3}
 8008fc4:	469e      	mov	lr, r3
 8008fc6:	4770      	bx	lr
