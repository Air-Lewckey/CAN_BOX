
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009050  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00002b68  080091e0  080091e0  0000a1e0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800bd48  0800bd48  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800bd48  0800bd48  0000cd48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800bd50  0800bd50  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800bd50  0800bd50  0000cd50  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800bd54  0800bd54  0000cd54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800bd58  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d06c  2**0
                  CONTENTS
 10 .bss          00004c68  2000006c  2000006c  0000d06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cd4  20004cd4  0000d06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001ba38  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7f  00000000  00000000  00028ad4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0002c758  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001313  00000000  00000000  0002dfc0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f88  00000000  00000000  0002f2d3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001ab93  00000000  00000000  0005425b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da737  00000000  00000000  0006edee  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149525  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006eec  00000000  00000000  00149568  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00150454  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080091c8 	.word	0x080091c8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080091c8 	.word	0x080091c8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <CAN_App_Init>:
  * @brief  CAN应用初始化
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // 初始化MCP2515 (500Kbps波特率)
    if (MCP2515_Init(MCP2515_BAUD_500K) != MCP2515_OK) {
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 ff6d 	bl	8001480 <MCP2515_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <CAN_App_Init+0x2a>
        printf("MCP2515 initialization failed!\r\n");
 80005ac:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <CAN_App_Init+0x5c>)
 80005ae:	f007 ff2d 	bl	800840c <puts>
        printf("CAN application initialization failed!\r\n");
 80005b2:	4812      	ldr	r0, [pc, #72]	@ (80005fc <CAN_App_Init+0x60>)
 80005b4:	f007 ff2a 	bl	800840c <puts>
        
        printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <CAN_App_Init+0x64>)
 80005ba:	f007 ff27 	bl	800840c <puts>
        
        // 调用初始化失败诊断函数
        MCP2515_InitFailureDiagnosis();
 80005be:	f002 f947 	bl	8002850 <MCP2515_InitFailureDiagnosis>
        
        return CAN_APP_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e015      	b.n	80005f2 <CAN_App_Init+0x56>
    }
    
    printf("MCP2515 initialization successful!\r\n");
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <CAN_App_Init+0x68>)
 80005c8:	f007 ff20 	bl	800840c <puts>
    
    // 配置接收过滤器 (接收所有消息)
    MCP2515_SetMask(0, 0x00000000, 0);  // 掩码0: 接收所有标准帧
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 ffc9 	bl	8001568 <MCP2515_SetMask>
    MCP2515_SetMask(1, 0x00000000, 0);  // 掩码1: 接收所有标准帧
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 ffc4 	bl	8001568 <MCP2515_SetMask>
    
    // 打印初始状态
    MCP2515_PrintStatus();
 80005e0:	f001 fa26 	bl	8001a30 <MCP2515_PrintStatus>
    
    can_app_initialized = 1;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <CAN_App_Init+0x6c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
    
    printf("CAN application initialization completed!\r\n");
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <CAN_App_Init+0x70>)
 80005ec:	f007 ff0e 	bl	800840c <puts>
    return CAN_APP_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	080091e0 	.word	0x080091e0
 80005fc:	08009200 	.word	0x08009200
 8000600:	08009228 	.word	0x08009228
 8000604:	08009268 	.word	0x08009268
 8000608:	20000094 	.word	0x20000094
 800060c:	0800928c 	.word	0x0800928c

08000610 <CAN_App_GetStats>:
  * @brief  获取CAN应用统计信息
  * @param  stats: 统计信息结构体指针
  * @retval None
  */
void CAN_App_GetStats(CAN_App_Stats_t *stats)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00f      	beq.n	800063e <CAN_App_GetStats+0x2e>
        stats->tx_count = can_tx_counter;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <CAN_App_GetStats+0x3c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
        stats->rx_count = can_rx_counter;
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <CAN_App_GetStats+0x40>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
        stats->error_count = can_error_counter;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <CAN_App_GetStats+0x44>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	609a      	str	r2, [r3, #8]
        stats->initialized = can_app_initialized;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <CAN_App_GetStats+0x48>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	751a      	strb	r2, [r3, #20]
    }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000088 	.word	0x20000088
 8000650:	2000008c 	.word	0x2000008c
 8000654:	20000090 	.word	0x20000090
 8000658:	20000094 	.word	0x20000094

0800065c <CAN_SendTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANSendTask中调用
  */
void CAN_SendTask_Main(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    uint32_t last_heartbeat = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t last_data_send = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_time;
    
    printf("CAN send task started\r\n");
 800066c:	4826      	ldr	r0, [pc, #152]	@ (8000708 <CAN_SendTask_Main+0xac>)
 800066e:	f007 fecd 	bl	800840c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 8000672:	e002      	b.n	800067a <CAN_SendTask_Main+0x1e>
        osDelay(100);
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f004 ff3f 	bl	80054f8 <osDelay>
    while (!can_app_initialized) {
 800067a:	4b24      	ldr	r3, [pc, #144]	@ (800070c <CAN_SendTask_Main+0xb0>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f8      	beq.n	8000674 <CAN_SendTask_Main+0x18>
    }
    
    for (;;) {
        current_time = HAL_GetTick();
 8000682:	f002 fca1 	bl	8002fc8 <HAL_GetTick>
 8000686:	6278      	str	r0, [r7, #36]	@ 0x24
        
        // 每1秒发送一次心跳消息
        if ((current_time - last_heartbeat) >= 1000) {
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000692:	d303      	bcc.n	800069c <CAN_SendTask_Main+0x40>
            CAN_SendHeartbeat();
 8000694:	f000 f846 	bl	8000724 <CAN_SendHeartbeat>
            last_heartbeat = current_time;
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        
        // 每2秒发送一次测试数据
        if ((current_time - last_data_send) >= 2000) {
 800069c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006a6:	d303      	bcc.n	80006b0 <CAN_SendTask_Main+0x54>
            CAN_SendTestData();
 80006a8:	f000 f892 	bl	80007d0 <CAN_SendTestData>
            last_data_send = current_time;
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        // 检查是否有来自队列的发送请求
        CAN_QueueMessage_t queue_msg;
        if (osMessageQueueGet(myQueue01Handle, &queue_msg, NULL, 10) == osOK) {
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <CAN_SendTask_Main+0xb4>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	f107 010c 	add.w	r1, r7, #12
 80006b8:	230a      	movs	r3, #10
 80006ba:	2200      	movs	r2, #0
 80006bc:	f004 ffaa 	bl	8005614 <osMessageQueueGet>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d11c      	bne.n	8000700 <CAN_SendTask_Main+0xa4>
            // 处理队列中的发送请求
            if (MCP2515_SendMessage(&queue_msg.message) == MCP2515_OK) {
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ffd0 	bl	8001670 <MCP2515_SendMessage>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10a      	bne.n	80006ec <CAN_SendTask_Main+0x90>
                can_tx_counter++;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <CAN_SendTask_Main+0xb8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000714 <CAN_SendTask_Main+0xb8>)
 80006de:	6013      	str	r3, [r2, #0]
                printf("Queue message sent successfully, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <CAN_SendTask_Main+0xbc>)
 80006e6:	f007 fe29 	bl	800833c <iprintf>
 80006ea:	e009      	b.n	8000700 <CAN_SendTask_Main+0xa4>
            } else {
                can_error_counter++;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <CAN_SendTask_Main+0xc0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <CAN_SendTask_Main+0xc0>)
 80006f4:	6013      	str	r3, [r2, #0]
                printf("Queue message send failed, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <CAN_SendTask_Main+0xc4>)
 80006fc:	f007 fe1e 	bl	800833c <iprintf>
            }
        }
        
        osDelay(50);  // 50ms周期
 8000700:	2032      	movs	r0, #50	@ 0x32
 8000702:	f004 fef9 	bl	80054f8 <osDelay>
    for (;;) {
 8000706:	e7bc      	b.n	8000682 <CAN_SendTask_Main+0x26>
 8000708:	080092b8 	.word	0x080092b8
 800070c:	20000094 	.word	0x20000094
 8000710:	20000144 	.word	0x20000144
 8000714:	20000088 	.word	0x20000088
 8000718:	080092d0 	.word	0x080092d0
 800071c:	20000090 	.word	0x20000090
 8000720:	08009300 	.word	0x08009300

08000724 <CAN_SendHeartbeat>:
  * @brief  发送心跳消息
  * @param  None
  * @retval None
  */
static void CAN_SendHeartbeat(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t heartbeat;
    
    // 构造心跳消息
    heartbeat.id = CAN_HEARTBEAT_ID;
 800072a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072e:	603b      	str	r3, [r7, #0]
    heartbeat.ide = 0;  // 标准帧
 8000730:	2300      	movs	r3, #0
 8000732:	713b      	strb	r3, [r7, #4]
    heartbeat.rtr = 0;  // 数据帧
 8000734:	2300      	movs	r3, #0
 8000736:	717b      	strb	r3, [r7, #5]
    heartbeat.dlc = 8;  // 8字节数据
 8000738:	2308      	movs	r3, #8
 800073a:	71bb      	strb	r3, [r7, #6]
    
    // 填充心跳数据
    heartbeat.data[0] = 0xAA;  // 心跳标识
 800073c:	23aa      	movs	r3, #170	@ 0xaa
 800073e:	71fb      	strb	r3, [r7, #7]
    heartbeat.data[1] = 0x55;
 8000740:	2355      	movs	r3, #85	@ 0x55
 8000742:	723b      	strb	r3, [r7, #8]
    heartbeat.data[2] = (uint8_t)(can_tx_counter >> 24);
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0e1b      	lsrs	r3, r3, #24
 800074a:	b2db      	uxtb	r3, r3
 800074c:	727b      	strb	r3, [r7, #9]
    heartbeat.data[3] = (uint8_t)(can_tx_counter >> 16);
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	b2db      	uxtb	r3, r3
 8000756:	72bb      	strb	r3, [r7, #10]
    heartbeat.data[4] = (uint8_t)(can_tx_counter >> 8);
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b2db      	uxtb	r3, r3
 8000760:	72fb      	strb	r3, [r7, #11]
    heartbeat.data[5] = (uint8_t)can_tx_counter;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	733b      	strb	r3, [r7, #12]
    heartbeat.data[6] = (uint8_t)(HAL_GetTick() >> 8);
 800076a:	f002 fc2d 	bl	8002fc8 <HAL_GetTick>
 800076e:	4603      	mov	r3, r0
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]
    heartbeat.data[7] = (uint8_t)HAL_GetTick();
 8000776:	f002 fc27 	bl	8002fc8 <HAL_GetTick>
 800077a:	4603      	mov	r3, r0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	73bb      	strb	r3, [r7, #14]
    
    // 发送心跳消息
    if (MCP2515_SendMessage(&heartbeat) == MCP2515_OK) {
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff74 	bl	8001670 <MCP2515_SendMessage>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10b      	bne.n	80007a6 <CAN_SendHeartbeat+0x82>
        can_tx_counter++;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000796:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message sent successfully [%lu]\r\n", can_tx_counter);
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <CAN_SendHeartbeat+0xa0>)
 80007a0:	f007 fdcc 	bl	800833c <iprintf>
    } else {
        can_error_counter++;
        printf("Heartbeat message send failed\r\n");
    }
}
 80007a4:	e007      	b.n	80007b6 <CAN_SendHeartbeat+0x92>
        can_error_counter++;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <CAN_SendHeartbeat+0xa4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <CAN_SendHeartbeat+0xa4>)
 80007ae:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message send failed\r\n");
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <CAN_SendHeartbeat+0xa8>)
 80007b2:	f007 fe2b 	bl	800840c <puts>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000088 	.word	0x20000088
 80007c4:	08009328 	.word	0x08009328
 80007c8:	20000090 	.word	0x20000090
 80007cc:	08009354 	.word	0x08009354

080007d0 <CAN_SendTestData>:
  * @brief  发送测试数据
  * @param  None
  * @retval None
  */
static void CAN_SendTestData(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_data;
    static uint16_t data_counter = 0;
    
    // 构造测试数据消息
    test_data.id = CAN_DATA_ID;
 80007d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007da:	603b      	str	r3, [r7, #0]
    test_data.ide = 0;  // 标准帧
 80007dc:	2300      	movs	r3, #0
 80007de:	713b      	strb	r3, [r7, #4]
    test_data.rtr = 0;  // 数据帧
 80007e0:	2300      	movs	r3, #0
 80007e2:	717b      	strb	r3, [r7, #5]
    test_data.dlc = 6;  // 6字节数据
 80007e4:	2306      	movs	r3, #6
 80007e6:	71bb      	strb	r3, [r7, #6]
    
    // 填充测试数据
    test_data.data[0] = 0x12;  // 数据标识
 80007e8:	2312      	movs	r3, #18
 80007ea:	71fb      	strb	r3, [r7, #7]
    test_data.data[1] = 0x34;
 80007ec:	2334      	movs	r3, #52	@ 0x34
 80007ee:	723b      	strb	r3, [r7, #8]
    test_data.data[2] = (uint8_t)(data_counter >> 8);
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <CAN_SendTestData+0x98>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	727b      	strb	r3, [r7, #9]
    test_data.data[3] = (uint8_t)data_counter;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <CAN_SendTestData+0x98>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
    test_data.data[4] = (uint8_t)(HAL_GetTick() >> 16);
 8000804:	f002 fbe0 	bl	8002fc8 <HAL_GetTick>
 8000808:	4603      	mov	r3, r0
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2db      	uxtb	r3, r3
 800080e:	72fb      	strb	r3, [r7, #11]
    test_data.data[5] = (uint8_t)(HAL_GetTick() >> 8);
 8000810:	f002 fbda 	bl	8002fc8 <HAL_GetTick>
 8000814:	4603      	mov	r3, r0
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b2db      	uxtb	r3, r3
 800081a:	733b      	strb	r3, [r7, #12]
    
    // 发送测试数据
    if (MCP2515_SendMessage(&test_data) == MCP2515_OK) {
 800081c:	463b      	mov	r3, r7
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ff26 	bl	8001670 <MCP2515_SendMessage>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d111      	bne.n	800084e <CAN_SendTestData+0x7e>
        can_tx_counter++;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <CAN_SendTestData+0x9c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <CAN_SendTestData+0x9c>)
 8000832:	6013      	str	r3, [r2, #0]
        data_counter++;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <CAN_SendTestData+0x98>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <CAN_SendTestData+0x98>)
 800083e:	801a      	strh	r2, [r3, #0]
        printf("Test data sent successfully, count: %d\r\n", data_counter);
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <CAN_SendTestData+0x98>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	480a      	ldr	r0, [pc, #40]	@ (8000870 <CAN_SendTestData+0xa0>)
 8000848:	f007 fd78 	bl	800833c <iprintf>
    } else {
        can_error_counter++;
        printf("Test data send failed\r\n");
    }
}
 800084c:	e007      	b.n	800085e <CAN_SendTestData+0x8e>
        can_error_counter++;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <CAN_SendTestData+0xa4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <CAN_SendTestData+0xa4>)
 8000856:	6013      	str	r3, [r2, #0]
        printf("Test data send failed\r\n");
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <CAN_SendTestData+0xa8>)
 800085a:	f007 fdd7 	bl	800840c <puts>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000096 	.word	0x20000096
 800086c:	20000088 	.word	0x20000088
 8000870:	08009374 	.word	0x08009374
 8000874:	20000090 	.word	0x20000090
 8000878:	080093a0 	.word	0x080093a0

0800087c <CAN_ReceiveTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANReceiveTask中调用
  */
void CAN_ReceiveTask_Main(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    MCP2515_CANMessage_t received_message;
    
    printf("CAN receive task started\r\n");
 8000884:	481a      	ldr	r0, [pc, #104]	@ (80008f0 <CAN_ReceiveTask_Main+0x74>)
 8000886:	f007 fdc1 	bl	800840c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 800088a:	e002      	b.n	8000892 <CAN_ReceiveTask_Main+0x16>
        osDelay(100);
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f004 fe33 	bl	80054f8 <osDelay>
    while (!can_app_initialized) {
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <CAN_ReceiveTask_Main+0x78>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f8      	beq.n	800088c <CAN_ReceiveTask_Main+0x10>
    }
    
    for (;;) {
        // 检查是否有消息接收
        if (MCP2515_CheckReceive()) {
 800089a:	f000 ff73 	bl	8001784 <MCP2515_CheckReceive>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d020      	beq.n	80008e6 <CAN_ReceiveTask_Main+0x6a>
            // 接收消息
            if (MCP2515_ReceiveMessage(&received_message) == MCP2515_OK) {
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ff37 	bl	800171c <MCP2515_ReceiveMessage>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d110      	bne.n	80008d6 <CAN_ReceiveTask_Main+0x5a>
                can_rx_counter++;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <CAN_ReceiveTask_Main+0x7c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <CAN_ReceiveTask_Main+0x7c>)
 80008bc:	6013      	str	r3, [r2, #0]
                
                // 打印接收到的消息
                CAN_PrintMessage("Received", &received_message);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <CAN_ReceiveTask_Main+0x80>)
 80008c6:	f000 f91f 	bl	8000b08 <CAN_PrintMessage>
                
                // 处理接收到的消息
                CAN_ProcessReceivedMessage(&received_message);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f81a 	bl	8000908 <CAN_ProcessReceivedMessage>
 80008d4:	e007      	b.n	80008e6 <CAN_ReceiveTask_Main+0x6a>
            } else {
                can_error_counter++;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <CAN_ReceiveTask_Main+0x84>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <CAN_ReceiveTask_Main+0x84>)
 80008de:	6013      	str	r3, [r2, #0]
                printf("Message receive failed\r\n");
 80008e0:	4808      	ldr	r0, [pc, #32]	@ (8000904 <CAN_ReceiveTask_Main+0x88>)
 80008e2:	f007 fd93 	bl	800840c <puts>
            }
        }
        
        osDelay(10);  // 10ms周期检查
 80008e6:	200a      	movs	r0, #10
 80008e8:	f004 fe06 	bl	80054f8 <osDelay>
        if (MCP2515_CheckReceive()) {
 80008ec:	e7d5      	b.n	800089a <CAN_ReceiveTask_Main+0x1e>
 80008ee:	bf00      	nop
 80008f0:	080093b8 	.word	0x080093b8
 80008f4:	20000094 	.word	0x20000094
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	080093d4 	.word	0x080093d4
 8000900:	20000090 	.word	0x20000090
 8000904:	080093e0 	.word	0x080093e0

08000908 <CAN_ProcessReceivedMessage>:
  * @brief  处理接收到的CAN消息
  * @param  message: 接收到的消息
  * @retval None
  */
static void CAN_ProcessReceivedMessage(MCP2515_CANMessage_t *message)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    switch (message->id) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000918:	d036      	beq.n	8000988 <CAN_ProcessReceivedMessage+0x80>
 800091a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800091e:	d837      	bhi.n	8000990 <CAN_ProcessReceivedMessage+0x88>
 8000920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000924:	d003      	beq.n	800092e <CAN_ProcessReceivedMessage+0x26>
 8000926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800092a:	d010      	beq.n	800094e <CAN_ProcessReceivedMessage+0x46>
 800092c:	e030      	b.n	8000990 <CAN_ProcessReceivedMessage+0x88>
        case CAN_HEARTBEAT_ID:
            // 处理心跳消息
            if (message->dlc >= 2 && message->data[0] == 0xAA && message->data[1] == 0x55) {
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	799b      	ldrb	r3, [r3, #6]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d933      	bls.n	800099e <CAN_ProcessReceivedMessage+0x96>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	79db      	ldrb	r3, [r3, #7]
 800093a:	2baa      	cmp	r3, #170	@ 0xaa
 800093c:	d12f      	bne.n	800099e <CAN_ProcessReceivedMessage+0x96>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7a1b      	ldrb	r3, [r3, #8]
 8000942:	2b55      	cmp	r3, #85	@ 0x55
 8000944:	d12b      	bne.n	800099e <CAN_ProcessReceivedMessage+0x96>
                printf("Heartbeat message received\r\n");
 8000946:	4819      	ldr	r0, [pc, #100]	@ (80009ac <CAN_ProcessReceivedMessage+0xa4>)
 8000948:	f007 fd60 	bl	800840c <puts>
            }
            break;
 800094c:	e027      	b.n	800099e <CAN_ProcessReceivedMessage+0x96>
            
        case CAN_DATA_ID:
            // 处理数据消息
            if (message->dlc >= 2 && message->data[0] == 0x12 && message->data[1] == 0x34) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d925      	bls.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	79db      	ldrb	r3, [r3, #7]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d121      	bne.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7a1b      	ldrb	r3, [r3, #8]
 8000962:	2b34      	cmp	r3, #52	@ 0x34
 8000964:	d11d      	bne.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
                uint16_t counter = (message->data[2] << 8) | message->data[3];
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a5b      	ldrb	r3, [r3, #9]
 800096a:	b21b      	sxth	r3, r3
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7a9b      	ldrb	r3, [r3, #10]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	81fb      	strh	r3, [r7, #14]
                printf("Test data received, count: %d\r\n", counter);
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <CAN_ProcessReceivedMessage+0xa8>)
 8000982:	f007 fcdb 	bl	800833c <iprintf>
            }
            break;
 8000986:	e00c      	b.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
            
        case CAN_STATUS_ID:
            // 处理状态消息
            printf("Status message received\r\n");
 8000988:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <CAN_ProcessReceivedMessage+0xac>)
 800098a:	f007 fd3f 	bl	800840c <puts>
            break;
 800098e:	e009      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            
        default:
            // 处理其他消息
            printf("Unknown message received, ID: 0x%03X\r\n", (unsigned int)message->id);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <CAN_ProcessReceivedMessage+0xb0>)
 8000998:	f007 fcd0 	bl	800833c <iprintf>
            break;
 800099c:	e002      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            break;
 80009a2:	bf00      	nop
    }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	080093f8 	.word	0x080093f8
 80009b0:	08009414 	.word	0x08009414
 80009b4:	08009434 	.word	0x08009434
 80009b8:	08009450 	.word	0x08009450

080009bc <CAN_App_SelfTest>:
  * @brief  CAN应用自检测试
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_SelfTest(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
    printf("Starting CAN application self-test...\r\n");
 80009c2:	4845      	ldr	r0, [pc, #276]	@ (8000ad8 <CAN_App_SelfTest+0x11c>)
 80009c4:	f007 fd22 	bl	800840c <puts>
    
    // 检查MCP2515硬件
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80009c8:	f000 ff40 	bl	800184c <MCP2515_SelfTest>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <CAN_App_SelfTest+0x20>
        printf("MCP2515 hardware test failed!\r\n");
 80009d2:	4842      	ldr	r0, [pc, #264]	@ (8000adc <CAN_App_SelfTest+0x120>)
 80009d4:	f007 fd1a 	bl	800840c <puts>
        return CAN_APP_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e078      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("MCP2515 hardware test passed\r\n");
 80009dc:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <CAN_App_SelfTest+0x124>)
 80009de:	f007 fd15 	bl	800840c <puts>
    
    // 检查回环模式
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80009e2:	2040      	movs	r0, #64	@ 0x40
 80009e4:	f000 fcc8 	bl	8001378 <MCP2515_SetMode>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <CAN_App_SelfTest+0x3c>
        printf("Set loopback mode failed!\r\n");
 80009ee:	483d      	ldr	r0, [pc, #244]	@ (8000ae4 <CAN_App_SelfTest+0x128>)
 80009f0:	f007 fd0c 	bl	800840c <puts>
        return CAN_APP_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e06a      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback mode set successfully\r\n");
 80009f8:	483b      	ldr	r0, [pc, #236]	@ (8000ae8 <CAN_App_SelfTest+0x12c>)
 80009fa:	f007 fd07 	bl	800840c <puts>
    
    // 发送测试消息
    MCP2515_CANMessage_t test_msg;
    test_msg.id = 0x123;
 80009fe:	f240 1323 	movw	r3, #291	@ 0x123
 8000a02:	617b      	str	r3, [r7, #20]
    test_msg.ide = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	763b      	strb	r3, [r7, #24]
    test_msg.rtr = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	767b      	strb	r3, [r7, #25]
    test_msg.dlc = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	76bb      	strb	r3, [r7, #26]
    for (int i = 0; i < 8; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a14:	e00c      	b.n	8000a30 <CAN_App_SelfTest+0x74>
        test_msg.data[i] = i + 1;
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2d9      	uxtb	r1, r3
 8000a1e:	f107 021b 	add.w	r2, r7, #27
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	4413      	add	r3, r2
 8000a26:	460a      	mov	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	ddef      	ble.n	8000a16 <CAN_App_SelfTest+0x5a>
    }
    
    if (MCP2515_SendMessage(&test_msg) != MCP2515_OK) {
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fe18 	bl	8001670 <MCP2515_SendMessage>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <CAN_App_SelfTest+0x94>
        printf("Loopback test message send failed!\r\n");
 8000a46:	4829      	ldr	r0, [pc, #164]	@ (8000aec <CAN_App_SelfTest+0x130>)
 8000a48:	f007 fce0 	bl	800840c <puts>
        return CAN_APP_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e03e      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback test message sent successfully\r\n");
 8000a50:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <CAN_App_SelfTest+0x134>)
 8000a52:	f007 fcdb 	bl	800840c <puts>
    
    // 等待并接收消息
    osDelay(100);
 8000a56:	2064      	movs	r0, #100	@ 0x64
 8000a58:	f004 fd4e 	bl	80054f8 <osDelay>
    
    MCP2515_CANMessage_t received_msg;
    if (MCP2515_ReceiveMessage(&received_msg) == MCP2515_OK) {
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fe5c 	bl	800171c <MCP2515_ReceiveMessage>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d123      	bne.n	8000ab2 <CAN_App_SelfTest+0xf6>
        // 验证接收到的消息
        if (received_msg.id == test_msg.id && 
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d11a      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            received_msg.dlc == test_msg.dlc &&
 8000a72:	7aba      	ldrb	r2, [r7, #10]
 8000a74:	7ebb      	ldrb	r3, [r7, #26]
        if (received_msg.id == test_msg.id && 
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d116      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            memcmp(received_msg.data, test_msg.data, test_msg.dlc) == 0) {
 8000a7a:	7ebb      	ldrb	r3, [r7, #26]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	1dd9      	adds	r1, r3, #7
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	3307      	adds	r3, #7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 fd9f 	bl	80085cc <memcmp>
 8000a8e:	4603      	mov	r3, r0
            received_msg.dlc == test_msg.dlc &&
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            printf("Loopback test successful!\r\n");
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <CAN_App_SelfTest+0x138>)
 8000a96:	f007 fcb9 	bl	800840c <puts>
        printf("Loopback test message receive failed!\r\n");
        return CAN_APP_ERROR;
    }
    
    // 恢复正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 fc6c 	bl	8001378 <MCP2515_SetMode>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00f      	beq.n	8000ac6 <CAN_App_SelfTest+0x10a>
 8000aa6:	e009      	b.n	8000abc <CAN_App_SelfTest+0x100>
            printf("Loopback test data mismatch!\r\n");
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <CAN_App_SelfTest+0x13c>)
 8000aaa:	f007 fcaf 	bl	800840c <puts>
            return CAN_APP_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00d      	b.n	8000ace <CAN_App_SelfTest+0x112>
        printf("Loopback test message receive failed!\r\n");
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <CAN_App_SelfTest+0x140>)
 8000ab4:	f007 fcaa 	bl	800840c <puts>
        return CAN_APP_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e008      	b.n	8000ace <CAN_App_SelfTest+0x112>
        printf("Restore normal mode failed!\r\n");
 8000abc:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <CAN_App_SelfTest+0x144>)
 8000abe:	f007 fca5 	bl	800840c <puts>
        return CAN_APP_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e003      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("CAN application self-test completed!\r\n");
 8000ac6:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <CAN_App_SelfTest+0x148>)
 8000ac8:	f007 fca0 	bl	800840c <puts>
    return CAN_APP_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08009504 	.word	0x08009504
 8000adc:	0800952c 	.word	0x0800952c
 8000ae0:	0800954c 	.word	0x0800954c
 8000ae4:	0800956c 	.word	0x0800956c
 8000ae8:	08009588 	.word	0x08009588
 8000aec:	080095a8 	.word	0x080095a8
 8000af0:	080095cc 	.word	0x080095cc
 8000af4:	080095f8 	.word	0x080095f8
 8000af8:	08009614 	.word	0x08009614
 8000afc:	08009634 	.word	0x08009634
 8000b00:	0800965c 	.word	0x0800965c
 8000b04:	0800967c 	.word	0x0800967c

08000b08 <CAN_PrintMessage>:
  * @param  prefix: 前缀字符串
  * @param  message: CAN消息指针
  * @retval None
  */
static void CAN_PrintMessage(const char *prefix, MCP2515_CANMessage_t *message)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
           prefix,
           (unsigned int)message->id,
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	6819      	ldr	r1, [r3, #0]
           message->ide ? "Extended" : "Standard",
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	791b      	ldrb	r3, [r3, #4]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <CAN_PrintMessage+0x1a>
 8000b1e:	481b      	ldr	r0, [pc, #108]	@ (8000b8c <CAN_PrintMessage+0x84>)
 8000b20:	e000      	b.n	8000b24 <CAN_PrintMessage+0x1c>
 8000b22:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <CAN_PrintMessage+0x88>)
           message->rtr ? "Remote" : "Data",
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <CAN_PrintMessage+0x28>
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <CAN_PrintMessage+0x8c>)
 8000b2e:	e000      	b.n	8000b32 <CAN_PrintMessage+0x2a>
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <CAN_PrintMessage+0x90>)
           message->dlc);
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	7992      	ldrb	r2, [r2, #6]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b36:	9201      	str	r2, [sp, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4816      	ldr	r0, [pc, #88]	@ (8000b9c <CAN_PrintMessage+0x94>)
 8000b42:	f007 fbfb 	bl	800833c <iprintf>
    
    if (!message->rtr) {
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	795b      	ldrb	r3, [r3, #5]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d117      	bne.n	8000b7e <CAN_PrintMessage+0x76>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e00b      	b.n	8000b6c <CAN_PrintMessage+0x64>
            printf("%02X ", message->data[i]);
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	3307      	adds	r3, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <CAN_PrintMessage+0x98>)
 8000b62:	f007 fbeb 	bl	800833c <iprintf>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	799b      	ldrb	r3, [r3, #6]
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	da02      	bge.n	8000b7e <CAN_PrintMessage+0x76>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	ddea      	ble.n	8000b54 <CAN_PrintMessage+0x4c>
        }
    }
    
    printf("\r\n");
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <CAN_PrintMessage+0x9c>)
 8000b80:	f007 fc44 	bl	800840c <puts>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	080096a4 	.word	0x080096a4
 8000b90:	080096b0 	.word	0x080096b0
 8000b94:	080096bc 	.word	0x080096bc
 8000b98:	080096c4 	.word	0x080096c4
 8000b9c:	080096cc 	.word	0x080096cc
 8000ba0:	080096fc 	.word	0x080096fc
 8000ba4:	08009704 	.word	0x08009704

08000ba8 <CAN_App_PrintStatus>:
  * @brief  打印CAN应用状态
  * @param  None
  * @retval None
  */
void CAN_App_PrintStatus(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
    CAN_App_Stats_t stats;
    CAN_App_GetStats(&stats);
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd2d 	bl	8000610 <CAN_App_GetStats>
    
    printf("\r\n=== CAN Application Status ===\r\n");
 8000bb6:	481c      	ldr	r0, [pc, #112]	@ (8000c28 <CAN_App_PrintStatus+0x80>)
 8000bb8:	f007 fc28 	bl	800840c <puts>
    printf("Initialization Status: %s\r\n", stats.initialized ? "Initialized" : "Not Initialized");
 8000bbc:	7d3b      	ldrb	r3, [r7, #20]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <CAN_App_PrintStatus+0x1e>
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <CAN_App_PrintStatus+0x84>)
 8000bc4:	e000      	b.n	8000bc8 <CAN_App_PrintStatus+0x20>
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <CAN_App_PrintStatus+0x88>)
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <CAN_App_PrintStatus+0x8c>)
 8000bcc:	f007 fbb6 	bl	800833c <iprintf>
    printf("TX Count: %lu\r\n", stats.tx_count);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <CAN_App_PrintStatus+0x90>)
 8000bd6:	f007 fbb1 	bl	800833c <iprintf>
    printf("RX Count: %lu\r\n", stats.rx_count);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <CAN_App_PrintStatus+0x94>)
 8000be0:	f007 fbac 	bl	800833c <iprintf>
    printf("Error Count: %lu\r\n", stats.error_count);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <CAN_App_PrintStatus+0x98>)
 8000bea:	f007 fba7 	bl	800833c <iprintf>
    printf("TX Buffer Free: %d\r\n", MCP2515_CheckTransmit());
 8000bee:	f000 fddc 	bl	80017aa <MCP2515_CheckTransmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <CAN_App_PrintStatus+0x9c>)
 8000bf8:	f007 fba0 	bl	800833c <iprintf>
    printf("RX Status: %s\r\n", MCP2515_CheckReceive() ? "Message Available" : "No Message");
 8000bfc:	f000 fdc2 	bl	8001784 <MCP2515_CheckReceive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <CAN_App_PrintStatus+0x62>
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <CAN_App_PrintStatus+0xa0>)
 8000c08:	e000      	b.n	8000c0c <CAN_App_PrintStatus+0x64>
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <CAN_App_PrintStatus+0xa4>)
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <CAN_App_PrintStatus+0xa8>)
 8000c10:	f007 fb94 	bl	800833c <iprintf>
    
    // 打印MCP2515状态
    MCP2515_PrintStatus();
 8000c14:	f000 ff0c 	bl	8001a30 <MCP2515_PrintStatus>
    
    printf("==================\r\n\r\n");
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <CAN_App_PrintStatus+0xac>)
 8000c1a:	f007 fbf7 	bl	800840c <puts>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08009708 	.word	0x08009708
 8000c2c:	0800972c 	.word	0x0800972c
 8000c30:	08009738 	.word	0x08009738
 8000c34:	08009748 	.word	0x08009748
 8000c38:	08009764 	.word	0x08009764
 8000c3c:	08009774 	.word	0x08009774
 8000c40:	08009784 	.word	0x08009784
 8000c44:	08009798 	.word	0x08009798
 8000c48:	080097b0 	.word	0x080097b0
 8000c4c:	080097c4 	.word	0x080097c4
 8000c50:	080097d0 	.word	0x080097d0
 8000c54:	080097e0 	.word	0x080097e0

08000c58 <CAN_App_IRQ_Callback>:
  * @retval None
  * @note   此函数在外部中断服务程序中被调用
  *         用于处理MCP2515的中断信号
  */
void CAN_App_IRQ_Callback(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    // 可以在这里设置事件标志或信号量来通知任务
    // 这里暂时不做具体处理，实际处理在接收任务的轮询中进行
    
    // 如果需要立即处理，可以发送信号给接收任务
    // 例如：osThreadFlagsSet(CANReceiveTaskHandle, 0x01);
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f002 f976 	bl	8002f5c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f89a 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f962 	bl	8000f3c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c78:	f000 f900 	bl	8000e7c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f934 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化CAN应用
  printf("\r\n=== STM32F407 + MCP2515 CAN Communication System Startup ===\r\n");
 8000c80:	4833      	ldr	r0, [pc, #204]	@ (8000d50 <main+0xe8>)
 8000c82:	f007 fbc3 	bl	800840c <puts>
  printf("System Clock: %lu MHz\r\n", HAL_RCC_GetHCLKFreq() / 1000000);
 8000c86:	f003 f8ef 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a31      	ldr	r2, [pc, #196]	@ (8000d54 <main+0xec>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	4619      	mov	r1, r3
 8000c96:	4830      	ldr	r0, [pc, #192]	@ (8000d58 <main+0xf0>)
 8000c98:	f007 fb50 	bl	800833c <iprintf>
  printf("SPI1 Clock: %lu MHz\r\n", HAL_RCC_GetPCLK2Freq() / 1000000 / 32);  // SPI1预分频32
 8000c9c:	f003 f904 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d54 <main+0xec>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0ddb      	lsrs	r3, r3, #23
 8000caa:	4619      	mov	r1, r3
 8000cac:	482b      	ldr	r0, [pc, #172]	@ (8000d5c <main+0xf4>)
 8000cae:	f007 fb45 	bl	800833c <iprintf>
  
  // 延时等待硬件稳定
  HAL_Delay(100);
 8000cb2:	2064      	movs	r0, #100	@ 0x64
 8000cb4:	f002 f994 	bl	8002fe0 <HAL_Delay>
  
  // 初始化CAN应用
  if (CAN_App_Init() == CAN_APP_OK) {
 8000cb8:	f7ff fc70 	bl	800059c <CAN_App_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d114      	bne.n	8000cec <main+0x84>
    printf("CAN application initialization successful!\r\n");
 8000cc2:	4827      	ldr	r0, [pc, #156]	@ (8000d60 <main+0xf8>)
 8000cc4:	f007 fba2 	bl	800840c <puts>
    
    // 执行自检测试
    if (CAN_App_SelfTest() == CAN_APP_OK) {
 8000cc8:	f7ff fe78 	bl	80009bc <CAN_App_SelfTest>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <main+0x72>
      printf("CAN self-test passed!\r\n");
 8000cd2:	4824      	ldr	r0, [pc, #144]	@ (8000d64 <main+0xfc>)
 8000cd4:	f007 fb9a 	bl	800840c <puts>
 8000cd8:	e010      	b.n	8000cfc <main+0x94>
    } else {
      printf("CAN self-test failed!\r\n");
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <main+0x100>)
 8000cdc:	f007 fb96 	bl	800840c <puts>
      // If self-test fails, run diagnosis
      printf("\r\nWARNING: CAN communication problem detected, starting diagnosis...\r\n");
 8000ce0:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0x104>)
 8000ce2:	f007 fb93 	bl	800840c <puts>
      CAN_DiagnoseAndFix();
 8000ce6:	f001 fe95 	bl	8002a14 <CAN_DiagnoseAndFix>
 8000cea:	e007      	b.n	8000cfc <main+0x94>
    }
  } else {
    printf("CAN application initialization failed!\r\n");
 8000cec:	4820      	ldr	r0, [pc, #128]	@ (8000d70 <main+0x108>)
 8000cee:	f007 fb8d 	bl	800840c <puts>
    // If initialization fails, run diagnosis
    printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <main+0x10c>)
 8000cf4:	f007 fb8a 	bl	800840c <puts>
    CAN_DiagnoseAndFix();
 8000cf8:	f001 fe8c 	bl	8002a14 <CAN_DiagnoseAndFix>
  }
  
  printf("System initialization completed, starting operation...\r\n\r\n");
 8000cfc:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <main+0x110>)
 8000cfe:	f007 fb85 	bl	800840c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d02:	f004 fb1d 	bl	8005340 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 8000d06:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <main+0x114>)
 8000d08:	210d      	movs	r1, #13
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f004 fc0f 	bl	800552e <osMessageQueueNew>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <main+0x118>)
 8000d14:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d16:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <main+0x11c>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	481b      	ldr	r0, [pc, #108]	@ (8000d88 <main+0x120>)
 8000d1c:	f004 fb5a 	bl	80053d4 <osThreadNew>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a1a      	ldr	r2, [pc, #104]	@ (8000d8c <main+0x124>)
 8000d24:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 8000d26:	4a1a      	ldr	r2, [pc, #104]	@ (8000d90 <main+0x128>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <main+0x12c>)
 8000d2c:	f004 fb52 	bl	80053d4 <osThreadNew>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <main+0x130>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <main+0x134>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <main+0x138>)
 8000d3c:	f004 fb4a 	bl	80053d4 <osThreadNew>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <main+0x13c>)
 8000d44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d46:	f004 fb1f 	bl	8005388 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <main+0xe2>
 8000d4e:	bf00      	nop
 8000d50:	0800982c 	.word	0x0800982c
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	0800986c 	.word	0x0800986c
 8000d5c:	08009884 	.word	0x08009884
 8000d60:	0800989c 	.word	0x0800989c
 8000d64:	080098c8 	.word	0x080098c8
 8000d68:	080098e0 	.word	0x080098e0
 8000d6c:	080098f8 	.word	0x080098f8
 8000d70:	08009940 	.word	0x08009940
 8000d74:	08009968 	.word	0x08009968
 8000d78:	080099a8 	.word	0x080099a8
 8000d7c:	0800bcd8 	.word	0x0800bcd8
 8000d80:	20000144 	.word	0x20000144
 8000d84:	0800bc6c 	.word	0x0800bc6c
 8000d88:	08001039 	.word	0x08001039
 8000d8c:	20000138 	.word	0x20000138
 8000d90:	0800bc90 	.word	0x0800bc90
 8000d94:	080010c5 	.word	0x080010c5
 8000d98:	2000013c 	.word	0x2000013c
 8000d9c:	0800bcb4 	.word	0x0800bcb4
 8000da0:	080010db 	.word	0x080010db
 8000da4:	20000140 	.word	0x20000140

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	2230      	movs	r2, #48	@ 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f007 fc18 	bl	80085ec <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fbb6 	bl	80035a0 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f96b 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fe17 	bl	8003a90 <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e68:	f000 f954 	bl	8001114 <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3750      	adds	r7, #80	@ 0x50
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <MX_SPI1_Init+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb0:	2230      	movs	r2, #48	@ 0x30
 8000eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec8:	220a      	movs	r2, #10
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ece:	f003 f831 	bl	8003f34 <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 f91c 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000098 	.word	0x20000098
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <MX_USART2_UART_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f003 fdbe 	bl	8004aa0 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2a:	f000 f8f3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000f0 	.word	0x200000f0
 8000f38:	40004400 	.word	0x40004400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fac:	4816      	ldr	r0, [pc, #88]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fae:	f002 fab9 	bl	8003524 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480f      	ldr	r0, [pc, #60]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fca:	f002 f90f 	bl	80031ec <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4808      	ldr	r0, [pc, #32]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fe8:	f002 f900 	bl	80031ec <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2106      	movs	r1, #6
 8000ff0:	2028      	movs	r0, #40	@ 0x28
 8000ff2:	f002 f8d1 	bl	8003198 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff6:	2028      	movs	r0, #40	@ 0x28
 8000ff8:	f002 f8ea 	bl	80031d0 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40020400 	.word	0x40020400

0800100c <_write>:
  * @param  ptr: 数据指针
  * @param  len: 数据长度
  * @retval 发送的字节数
  */
int _write(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <_write+0x28>)
 8001024:	f003 fd8c 	bl	8004b40 <HAL_UART_Transmit>
  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000f0 	.word	0x200000f0

08001038 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t last_status_print = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  uint32_t last_heartbeat_print = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t heartbeat_counter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  
  printf("Default Task Started\r\n");  // 使用英文避免乱码
 800104c:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <StartDefaultTask+0x78>)
 800104e:	f007 f9dd 	bl	800840c <puts>
  printf("System Heartbeat Monitor Active\r\n");
 8001052:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <StartDefaultTask+0x7c>)
 8001054:	f007 f9da 	bl	800840c <puts>
  
  /* Infinite loop */
  for(;;)
  {
    uint32_t current_time = HAL_GetTick();
 8001058:	f001 ffb6 	bl	8002fc8 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
    
    // 每2秒发送一次心跳数据包（增加频率）
    if ((current_time - last_heartbeat_print) >= 2000) {
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001068:	d30a      	bcc.n	8001080 <StartDefaultTask+0x48>
      heartbeat_counter++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
      printf("[%lu] Heartbeat #%lu - System Running OK - Time: %lu ms\r\n", 
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <StartDefaultTask+0x80>)
 8001078:	f007 f960 	bl	800833c <iprintf>
             heartbeat_counter, heartbeat_counter, current_time);
      last_heartbeat_print = current_time;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	613b      	str	r3, [r7, #16]
    }
    
    // 每10秒打印一次详细系统状态
    if ((current_time - last_status_print) >= 10000) {
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f242 720f 	movw	r2, #9999	@ 0x270f
 800108a:	4293      	cmp	r3, r2
 800108c:	d90a      	bls.n	80010a4 <StartDefaultTask+0x6c>
      printf("\r\n=== System Status Report #%lu ===\r\n", heartbeat_counter);
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	480a      	ldr	r0, [pc, #40]	@ (80010bc <StartDefaultTask+0x84>)
 8001092:	f007 f953 	bl	800833c <iprintf>
      CAN_App_PrintStatus();
 8001096:	f7ff fd87 	bl	8000ba8 <CAN_App_PrintStatus>
      printf("=== End of Status Report ===\r\n\r\n");
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <StartDefaultTask+0x88>)
 800109c:	f007 f9b6 	bl	800840c <puts>
      last_status_print = current_time;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	617b      	str	r3, [r7, #20]
    }
    
    // 检查系统运行状态
    // 这里可以添加系统监控代码
    
    osDelay(500);  // 减少到500ms周期，提高响应性
 80010a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a8:	f004 fa26 	bl	80054f8 <osDelay>
  {
 80010ac:	e7d4      	b.n	8001058 <StartDefaultTask+0x20>
 80010ae:	bf00      	nop
 80010b0:	080099e4 	.word	0x080099e4
 80010b4:	080099fc 	.word	0x080099fc
 80010b8:	08009a20 	.word	0x08009a20
 80010bc:	08009a5c 	.word	0x08009a5c
 80010c0:	08009a84 	.word	0x08009a84

080010c4 <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  // 调用CAN发送任务主函数
  CAN_SendTask_Main(argument);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fac5 	bl	800065c <CAN_SendTask_Main>
  /* USER CODE END StartCANSendTask */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  // 调用CAN接收任务主函数
  CAN_ReceiveTask_Main(argument);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fbca 	bl	800087c <CAN_ReceiveTask_Main>
  /* USER CODE END StartCANReceiveTask */
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001102:	f001 ff4d 	bl	8002fa0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010000 	.word	0x40010000

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <MCP2515_SPI_ReadWrite>:
  * @brief  SPI读写一个字节
  * @param  data: 要发送的数据
  * @retval 接收到的数据
  */
uint8_t MCP2515_SPI_ReadWrite(uint8_t data)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    
    // 使用HAL库进行SPI通信
    status = HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, MCP2515_SPI_TIMEOUT);
 800112e:	f107 020f 	add.w	r2, r7, #15
 8001132:	1df9      	adds	r1, r7, #7
 8001134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <MCP2515_SPI_ReadWrite+0x80>)
 800113e:	f002 ff82 	bl	8004046 <HAL_SPI_TransmitReceive>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
    
    if (status != HAL_OK) {
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <MCP2515_SPI_ReadWrite+0x74>
        printf("SPI Error: Status=%d, TX=0x%02X\r\n", status, data);
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <MCP2515_SPI_ReadWrite+0x84>)
 8001154:	f007 f8f2 	bl	800833c <iprintf>
        
        // 检查具体错误类型
        if (status == HAL_TIMEOUT) {
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d103      	bne.n	8001166 <MCP2515_SPI_ReadWrite+0x46>
            printf("SPI Timeout - Check MISO connection\r\n");
 800115e:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <MCP2515_SPI_ReadWrite+0x88>)
 8001160:	f007 f954 	bl	800840c <puts>
 8001164:	e014      	b.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_ERROR) {
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10b      	bne.n	8001184 <MCP2515_SPI_ReadWrite+0x64>
            printf("SPI Hardware Error - Check configuration\r\n");
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <MCP2515_SPI_ReadWrite+0x8c>)
 800116e:	f007 f94d 	bl	800840c <puts>
            uint32_t error = HAL_SPI_GetError(&hspi1);
 8001172:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <MCP2515_SPI_ReadWrite+0x80>)
 8001174:	f003 f910 	bl	8004398 <HAL_SPI_GetError>
 8001178:	6138      	str	r0, [r7, #16]
            printf("SPI Error Code: 0x%08lX\r\n", error);
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MCP2515_SPI_ReadWrite+0x90>)
 800117e:	f007 f8dd 	bl	800833c <iprintf>
 8001182:	e005      	b.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_BUSY) {
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d102      	bne.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
            printf("SPI Busy - Previous operation not completed\r\n");
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <MCP2515_SPI_ReadWrite+0x94>)
 800118c:	f007 f93e 	bl	800840c <puts>
        }
        
        return 0xFF;
 8001190:	23ff      	movs	r3, #255	@ 0xff
 8001192:	e000      	b.n	8001196 <MCP2515_SPI_ReadWrite+0x76>
    }
    
    return rx_data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098
 80011a4:	08009aa4 	.word	0x08009aa4
 80011a8:	08009ac8 	.word	0x08009ac8
 80011ac:	08009af0 	.word	0x08009af0
 80011b0:	08009b1c 	.word	0x08009b1c
 80011b4:	08009b38 	.word	0x08009b38

080011b8 <MCP2515_CS_Low>:
  * @brief  拉低MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_Low(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <MCP2515_CS_Low+0x14>)
 80011c4:	f002 f9ae 	bl	8003524 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <MCP2515_CS_High>:
  * @brief  拉高MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_High(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <MCP2515_CS_High+0x14>)
 80011dc:	f002 f9a2 	bl	8003524 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400

080011e8 <MCP2515_ReadRegister>:
  * @brief  读取MCP2515寄存器
  * @param  address: 寄存器地址
  * @retval 寄存器值
  */
uint8_t MCP2515_ReadRegister(uint8_t address)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    
    MCP2515_CS_Low();                           // 拉低片选
 80011f2:	f7ff ffe1 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ);    // 发送读指令
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff92 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff8e 	bl	8001120 <MCP2515_SPI_ReadWrite>
    data = MCP2515_SPI_ReadWrite(0x00);         // 读取数据
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff8b 	bl	8001120 <MCP2515_SPI_ReadWrite>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_High();                          // 拉高片选
 800120e:	f7ff ffdf 	bl	80011d0 <MCP2515_CS_High>
    
    return data;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <MCP2515_WriteRegister>:
  * @param  address: 寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void MCP2515_WriteRegister(uint8_t address, uint8_t data)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_Low();                           // 拉低片选
 800122c:	f7ff ffc4 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_WRITE);   // 发送写指令
 8001230:	2002      	movs	r0, #2
 8001232:	f7ff ff75 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff71 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                // 发送数据
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff6d 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                          // 拉高片选
 8001246:	f7ff ffc3 	bl	80011d0 <MCP2515_CS_High>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <MCP2515_ModifyRegister>:
  * @param  mask: 位掩码
  * @param  data: 新的位值
  * @retval None
  */
void MCP2515_ModifyRegister(uint8_t address, uint8_t mask, uint8_t data)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	71bb      	strb	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	717b      	strb	r3, [r7, #5]
    MCP2515_CS_Low();                               // 拉低片选
 8001264:	f7ff ffa8 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_BIT_MODIFY);  // 发送位修改指令
 8001268:	2005      	movs	r0, #5
 800126a:	f7ff ff59 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);                 // 发送寄存器地址
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff55 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(mask);                    // 发送位掩码
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff51 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                    // 发送新数据
 800127e:	797b      	ldrb	r3, [r7, #5]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff4d 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                              // 拉高片选
 8001286:	f7ff ffa3 	bl	80011d0 <MCP2515_CS_High>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MCP2515_Reset>:
  * @brief  复位MCP2515
  * @param  None
  * @retval None
  */
void MCP2515_Reset(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
    printf("Starting MCP2515 reset...\r\n");
 800129a:	482a      	ldr	r0, [pc, #168]	@ (8001344 <MCP2515_Reset+0xb0>)
 800129c:	f007 f8b6 	bl	800840c <puts>
    
    MCP2515_CS_Low();
 80012a0:	f7ff ff8a 	bl	80011b8 <MCP2515_CS_Low>
    printf("CS pulled low\r\n");
 80012a4:	4828      	ldr	r0, [pc, #160]	@ (8001348 <MCP2515_Reset+0xb4>)
 80012a6:	f007 f8b1 	bl	800840c <puts>
    
    uint8_t result = MCP2515_SPI_ReadWrite(MCP2515_CMD_RESET);
 80012aa:	20c0      	movs	r0, #192	@ 0xc0
 80012ac:	f7ff ff38 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
    printf("Reset command sent, SPI result: 0x%02X\r\n", result);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4824      	ldr	r0, [pc, #144]	@ (800134c <MCP2515_Reset+0xb8>)
 80012ba:	f007 f83f 	bl	800833c <iprintf>
    
    MCP2515_CS_High();
 80012be:	f7ff ff87 	bl	80011d0 <MCP2515_CS_High>
    printf("CS pulled high\r\n");
 80012c2:	4823      	ldr	r0, [pc, #140]	@ (8001350 <MCP2515_Reset+0xbc>)
 80012c4:	f007 f8a2 	bl	800840c <puts>
    
    osDelay(20);  // 增加延时确保复位完成
 80012c8:	2014      	movs	r0, #20
 80012ca:	f004 f915 	bl	80054f8 <osDelay>
    printf("Reset delay completed\r\n");
 80012ce:	4821      	ldr	r0, [pc, #132]	@ (8001354 <MCP2515_Reset+0xc0>)
 80012d0:	f007 f89c 	bl	800840c <puts>
    
    // 验证复位状态
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80012d4:	200e      	movs	r0, #14
 80012d6:	f7ff ff87 	bl	80011e8 <MCP2515_ReadRegister>
 80012da:	4603      	mov	r3, r0
 80012dc:	71bb      	strb	r3, [r7, #6]
    printf("CANSTAT after reset: 0x%02X\r\n", canstat);
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4619      	mov	r1, r3
 80012e2:	481d      	ldr	r0, [pc, #116]	@ (8001358 <MCP2515_Reset+0xc4>)
 80012e4:	f007 f82a 	bl	800833c <iprintf>
    
    // 检查复位状态 - 允许多种有效状态
    if (canstat == 0x80) {
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d103      	bne.n	80012f6 <MCP2515_Reset+0x62>
        printf("[OK] MCP2515 reset successful (Configuration mode)\r\n");
 80012ee:	481b      	ldr	r0, [pc, #108]	@ (800135c <MCP2515_Reset+0xc8>)
 80012f0:	f007 f88c 	bl	800840c <puts>
        printf("[ERROR] No SPI response - Check MISO connection\r\n");
    } else {
        printf("[WARN] Unexpected reset state: 0x%02X\r\n", canstat);
        printf("  Continuing initialization attempt...\r\n");
    }
}
 80012f4:	e022      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0x40) {
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b40      	cmp	r3, #64	@ 0x40
 80012fa:	d106      	bne.n	800130a <MCP2515_Reset+0x76>
        printf("[OK] MCP2515 reset successful (Loopback mode detected)\r\n");
 80012fc:	4818      	ldr	r0, [pc, #96]	@ (8001360 <MCP2515_Reset+0xcc>)
 80012fe:	f007 f885 	bl	800840c <puts>
        printf("  Note: This is normal, will switch to config mode\r\n");
 8001302:	4818      	ldr	r0, [pc, #96]	@ (8001364 <MCP2515_Reset+0xd0>)
 8001304:	f007 f882 	bl	800840c <puts>
}
 8001308:	e018      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0x00) {
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <MCP2515_Reset+0x8a>
        printf("[OK] MCP2515 reset successful (Normal mode detected)\r\n");
 8001310:	4815      	ldr	r0, [pc, #84]	@ (8001368 <MCP2515_Reset+0xd4>)
 8001312:	f007 f87b 	bl	800840c <puts>
        printf("  Note: This is normal, will switch to config mode\r\n");
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <MCP2515_Reset+0xd0>)
 8001318:	f007 f878 	bl	800840c <puts>
}
 800131c:	e00e      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0xFF) {
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	2bff      	cmp	r3, #255	@ 0xff
 8001322:	d103      	bne.n	800132c <MCP2515_Reset+0x98>
        printf("[ERROR] No SPI response - Check MISO connection\r\n");
 8001324:	4811      	ldr	r0, [pc, #68]	@ (800136c <MCP2515_Reset+0xd8>)
 8001326:	f007 f871 	bl	800840c <puts>
}
 800132a:	e007      	b.n	800133c <MCP2515_Reset+0xa8>
        printf("[WARN] Unexpected reset state: 0x%02X\r\n", canstat);
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	4619      	mov	r1, r3
 8001330:	480f      	ldr	r0, [pc, #60]	@ (8001370 <MCP2515_Reset+0xdc>)
 8001332:	f007 f803 	bl	800833c <iprintf>
        printf("  Continuing initialization attempt...\r\n");
 8001336:	480f      	ldr	r0, [pc, #60]	@ (8001374 <MCP2515_Reset+0xe0>)
 8001338:	f007 f868 	bl	800840c <puts>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	08009b68 	.word	0x08009b68
 8001348:	08009b84 	.word	0x08009b84
 800134c:	08009b94 	.word	0x08009b94
 8001350:	08009bc0 	.word	0x08009bc0
 8001354:	08009bd0 	.word	0x08009bd0
 8001358:	08009be8 	.word	0x08009be8
 800135c:	08009c08 	.word	0x08009c08
 8001360:	08009c3c 	.word	0x08009c3c
 8001364:	08009c74 	.word	0x08009c74
 8001368:	08009ca8 	.word	0x08009ca8
 800136c:	08009ce0 	.word	0x08009ce0
 8001370:	08009d14 	.word	0x08009d14
 8001374:	08009d3c 	.word	0x08009d3c

08001378 <MCP2515_SetMode>:
  * @brief  设置MCP2515工作模式
  * @param  mode: 工作模式
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SetMode(uint8_t mode)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    printf("Setting mode to 0x%02X...", mode);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4619      	mov	r1, r3
 8001386:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <MCP2515_SetMode+0x60>)
 8001388:	f006 ffd8 	bl	800833c <iprintf>
    
    // 修改CANCTRL寄存器的模式位
    MCP2515_ModifyRegister(MCP2515_CANCTRL, 0xE0, mode);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	461a      	mov	r2, r3
 8001390:	21e0      	movs	r1, #224	@ 0xe0
 8001392:	200f      	movs	r0, #15
 8001394:	f7ff ff5d 	bl	8001252 <MCP2515_ModifyRegister>
    
    // 等待模式切换完成
    uint8_t result = MCP2515_WaitForMode(mode, MCP2515_MODE_TIMEOUT);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fbc0 	bl	8001b24 <MCP2515_WaitForMode>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
    
    if (result == MCP2515_OK) {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <MCP2515_SetMode+0x3e>
        printf(" SUCCESS\r\n");
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MCP2515_SetMode+0x64>)
 80013b0:	f007 f82c 	bl	800840c <puts>
 80013b4:	e00b      	b.n	80013ce <MCP2515_SetMode+0x56>
    } else {
        printf(" TIMEOUT\r\n");
 80013b6:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <MCP2515_SetMode+0x68>)
 80013b8:	f007 f828 	bl	800840c <puts>
        printf("Current mode: 0x%02X, Expected: 0x%02X\r\n", MCP2515_GetMode(), mode);
 80013bc:	f000 f814 	bl	80013e8 <MCP2515_GetMode>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MCP2515_SetMode+0x6c>)
 80013ca:	f006 ffb7 	bl	800833c <iprintf>
    }
    
    return result;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08009d64 	.word	0x08009d64
 80013dc:	08009d80 	.word	0x08009d80
 80013e0:	08009d8c 	.word	0x08009d8c
 80013e4:	08009d98 	.word	0x08009d98

080013e8 <MCP2515_GetMode>:
  * @brief  获取MCP2515当前工作模式
  * @param  None
  * @retval 当前工作模式
  */
uint8_t MCP2515_GetMode(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    uint8_t mode = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80013ee:	200e      	movs	r0, #14
 80013f0:	f7ff fefa 	bl	80011e8 <MCP2515_ReadRegister>
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
    return (mode & 0xE0);  // 返回模式位
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f023 031f 	bic.w	r3, r3, #31
 80013fe:	b2db      	uxtb	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MCP2515_SetBaudRate>:
  * @brief  设置CAN波特率
  * @param  baudrate: 波特率选择 (MCP2515_BAUD_125K ~ MCP2515_BAUD_1000K)
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetBaudRate(uint8_t baudrate)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
    if (baudrate > MCP2515_BAUD_1000K) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d901      	bls.n	800141c <MCP2515_SetBaudRate+0x14>
        return MCP2515_ERROR;  // 无效的波特率参数
 8001418:	2301      	movs	r3, #1
 800141a:	e02b      	b.n	8001474 <MCP2515_SetBaudRate+0x6c>
    }
    
    // 必须在配置模式下设置波特率
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 800141c:	2080      	movs	r0, #128	@ 0x80
 800141e:	f7ff ffab 	bl	8001378 <MCP2515_SetMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MCP2515_SetBaudRate+0x24>
        return MCP2515_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e023      	b.n	8001474 <MCP2515_SetBaudRate+0x6c>
    }
    
    // 写入波特率配置寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, mcp2515_baud_config[baudrate][0]);
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4913      	ldr	r1, [pc, #76]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	440b      	add	r3, r1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	202a      	movs	r0, #42	@ 0x2a
 800143e:	f7ff feed 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF2, mcp2515_baud_config[baudrate][1]);
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	490d      	ldr	r1, [pc, #52]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	440b      	add	r3, r1
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	2029      	movs	r0, #41	@ 0x29
 8001456:	f7ff fee1 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF3, mcp2515_baud_config[baudrate][2]);
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4907      	ldr	r1, [pc, #28]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	440b      	add	r3, r1
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	2028      	movs	r0, #40	@ 0x28
 800146e:	f7ff fed5 	bl	800121c <MCP2515_WriteRegister>
    
    return MCP2515_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800bcf0 	.word	0x0800bcf0

08001480 <MCP2515_Init>:
  * @brief  初始化MCP2515
  * @param  baudrate: CAN波特率
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_Init(uint8_t baudrate)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
    // 复位MCP2515
    MCP2515_Reset();
 800148a:	f7ff ff03 	bl	8001294 <MCP2515_Reset>
    
    // 强制切换到配置模式，不依赖复位状态
    printf("Forcing switch to configuration mode...\r\n");
 800148e:	482d      	ldr	r0, [pc, #180]	@ (8001544 <MCP2515_Init+0xc4>)
 8001490:	f006 ffbc 	bl	800840c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001494:	2080      	movs	r0, #128	@ 0x80
 8001496:	f7ff ff6f 	bl	8001378 <MCP2515_SetMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <MCP2515_Init+0x4c>
        printf("[ERROR] Failed to enter configuration mode\r\n");
 80014a0:	4829      	ldr	r0, [pc, #164]	@ (8001548 <MCP2515_Init+0xc8>)
 80014a2:	f006 ffb3 	bl	800840c <puts>
        // 尝试再次复位和切换
        printf("Retrying reset and mode switch...\r\n");
 80014a6:	4829      	ldr	r0, [pc, #164]	@ (800154c <MCP2515_Init+0xcc>)
 80014a8:	f006 ffb0 	bl	800840c <puts>
        MCP2515_Reset();
 80014ac:	f7ff fef2 	bl	8001294 <MCP2515_Reset>
        osDelay(50);  // 增加延时
 80014b0:	2032      	movs	r0, #50	@ 0x32
 80014b2:	f004 f821 	bl	80054f8 <osDelay>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 80014b6:	2080      	movs	r0, #128	@ 0x80
 80014b8:	f7ff ff5e 	bl	8001378 <MCP2515_SetMode>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <MCP2515_Init+0x4c>
            printf("[ERROR] Second attempt failed\r\n");
 80014c2:	4823      	ldr	r0, [pc, #140]	@ (8001550 <MCP2515_Init+0xd0>)
 80014c4:	f006 ffa2 	bl	800840c <puts>
            return MCP2515_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e037      	b.n	800153c <MCP2515_Init+0xbc>
        }
    }
    printf("[OK] Successfully entered configuration mode\r\n");
 80014cc:	4821      	ldr	r0, [pc, #132]	@ (8001554 <MCP2515_Init+0xd4>)
 80014ce:	f006 ff9d 	bl	800840c <puts>
    
    // 检查MCP2515是否响应（在配置模式下测试）
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80014d2:	f000 f9bb 	bl	800184c <MCP2515_SelfTest>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <MCP2515_Init+0x66>
        printf("[ERROR] MCP2515 self-test failed\r\n");
 80014dc:	481e      	ldr	r0, [pc, #120]	@ (8001558 <MCP2515_Init+0xd8>)
 80014de:	f006 ff95 	bl	800840c <puts>
        return MCP2515_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e02a      	b.n	800153c <MCP2515_Init+0xbc>
    }
    printf("[OK] MCP2515 self-test passed\r\n");
 80014e6:	481d      	ldr	r0, [pc, #116]	@ (800155c <MCP2515_Init+0xdc>)
 80014e8:	f006 ff90 	bl	800840c <puts>
    
    // 已经在配置模式下，直接进行波特率设置
    
    // 设置波特率
    if (MCP2515_SetBaudRate(baudrate) != MCP2515_OK) {
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff8a 	bl	8001408 <MCP2515_SetBaudRate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MCP2515_Init+0x7e>
        return MCP2515_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e01e      	b.n	800153c <MCP2515_Init+0xbc>
    }
    
    // 配置接收缓冲区控制寄存器 - 禁用过滤器，接收所有消息
    MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);  // 接收所有消息，禁用过滤器
 80014fe:	2160      	movs	r1, #96	@ 0x60
 8001500:	2060      	movs	r0, #96	@ 0x60
 8001502:	f7ff fe8b 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);  // 接收所有消息，禁用过滤器
 8001506:	2160      	movs	r1, #96	@ 0x60
 8001508:	2070      	movs	r0, #112	@ 0x70
 800150a:	f7ff fe87 	bl	800121c <MCP2515_WriteRegister>
    printf("RX buffer configuration: RXB0CTRL=0x60, RXB1CTRL=0x60 (accept all messages)\r\n");
 800150e:	4814      	ldr	r0, [pc, #80]	@ (8001560 <MCP2515_Init+0xe0>)
 8001510:	f006 ff7c 	bl	800840c <puts>
    
    // 清除所有中断标志
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8001514:	2100      	movs	r1, #0
 8001516:	202c      	movs	r0, #44	@ 0x2c
 8001518:	f7ff fe80 	bl	800121c <MCP2515_WriteRegister>
    
    // 启用接收中断
    MCP2515_WriteRegister(MCP2515_CANINTE, MCP2515_INT_RX0IF | MCP2515_INT_RX1IF);
 800151c:	2103      	movs	r1, #3
 800151e:	202b      	movs	r0, #43	@ 0x2b
 8001520:	f7ff fe7c 	bl	800121c <MCP2515_WriteRegister>
    
    // 切换到正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8001524:	2000      	movs	r0, #0
 8001526:	f7ff ff27 	bl	8001378 <MCP2515_SetMode>
 800152a:	4603      	mov	r3, r0
 800152c:	2b00      	cmp	r3, #0
 800152e:	d001      	beq.n	8001534 <MCP2515_Init+0xb4>
        return MCP2515_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e003      	b.n	800153c <MCP2515_Init+0xbc>
    }
    
    mcp2515_initialized = 1;  // 设置初始化标志
 8001534:	4b0b      	ldr	r3, [pc, #44]	@ (8001564 <MCP2515_Init+0xe4>)
 8001536:	2201      	movs	r2, #1
 8001538:	701a      	strb	r2, [r3, #0]
    
    return MCP2515_OK;
 800153a:	2300      	movs	r3, #0
}
 800153c:	4618      	mov	r0, r3
 800153e:	3708      	adds	r7, #8
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	08009dc4 	.word	0x08009dc4
 8001548:	08009df0 	.word	0x08009df0
 800154c:	08009e1c 	.word	0x08009e1c
 8001550:	08009e40 	.word	0x08009e40
 8001554:	08009e60 	.word	0x08009e60
 8001558:	08009e90 	.word	0x08009e90
 800155c:	08009eb4 	.word	0x08009eb4
 8001560:	08009ed4 	.word	0x08009ed4
 8001564:	20000148 	.word	0x20000148

08001568 <MCP2515_SetMask>:
  * @param  mask_value: 掩码值
  * @param  extended: 0=标准帧, 1=扩展帧
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetMask(uint8_t mask_num, uint32_t mask_value, uint8_t extended)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b086      	sub	sp, #24
 800156c:	af00      	add	r7, sp, #0
 800156e:	4603      	mov	r3, r0
 8001570:	6039      	str	r1, [r7, #0]
 8001572:	71fb      	strb	r3, [r7, #7]
 8001574:	4613      	mov	r3, r2
 8001576:	71bb      	strb	r3, [r7, #6]
    uint8_t sidh, sidl, eid8, eid0;
    uint8_t mask_regs[2][4] = {
 8001578:	4a3c      	ldr	r2, [pc, #240]	@ (800166c <MCP2515_SetMask+0x104>)
 800157a:	f107 0308 	add.w	r3, r7, #8
 800157e:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001582:	e883 0003 	stmia.w	r3, {r0, r1}
        {0x20, 0x21, 0x22, 0x23},  // RXM0
        {0x24, 0x25, 0x26, 0x27}   // RXM1
    };
    
    if (mask_num > 1) {
 8001586:	79fb      	ldrb	r3, [r7, #7]
 8001588:	2b01      	cmp	r3, #1
 800158a:	d901      	bls.n	8001590 <MCP2515_SetMask+0x28>
        return MCP2515_ERROR;
 800158c:	2301      	movs	r3, #1
 800158e:	e069      	b.n	8001664 <MCP2515_SetMask+0xfc>
    }
    
    // 必须在配置模式下设置掩码
    uint8_t current_mode = MCP2515_GetMode();
 8001590:	f7ff ff2a 	bl	80013e8 <MCP2515_GetMode>
 8001594:	4603      	mov	r3, r0
 8001596:	74fb      	strb	r3, [r7, #19]
    if (current_mode != MCP2515_MODE_CONFIG) {
 8001598:	7cfb      	ldrb	r3, [r7, #19]
 800159a:	2b80      	cmp	r3, #128	@ 0x80
 800159c:	d007      	beq.n	80015ae <MCP2515_SetMask+0x46>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 800159e:	2080      	movs	r0, #128	@ 0x80
 80015a0:	f7ff feea 	bl	8001378 <MCP2515_SetMode>
 80015a4:	4603      	mov	r3, r0
 80015a6:	2b00      	cmp	r3, #0
 80015a8:	d001      	beq.n	80015ae <MCP2515_SetMask+0x46>
            return MCP2515_ERROR;
 80015aa:	2301      	movs	r3, #1
 80015ac:	e05a      	b.n	8001664 <MCP2515_SetMask+0xfc>
        }
    }
    
    if (extended) {
 80015ae:	79bb      	ldrb	r3, [r7, #6]
 80015b0:	2b00      	cmp	r3, #0
 80015b2:	d018      	beq.n	80015e6 <MCP2515_SetMask+0x7e>
        // 扩展帧掩码配置
        sidh = (uint8_t)(mask_value >> 21);
 80015b4:	683b      	ldr	r3, [r7, #0]
 80015b6:	0d5b      	lsrs	r3, r3, #21
 80015b8:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)(((mask_value >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((mask_value >> 16) & 0x03);
 80015ba:	683b      	ldr	r3, [r7, #0]
 80015bc:	0c9b      	lsrs	r3, r3, #18
 80015be:	b2db      	uxtb	r3, r3
 80015c0:	015b      	lsls	r3, r3, #5
 80015c2:	b2da      	uxtb	r2, r3
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	0c1b      	lsrs	r3, r3, #16
 80015c8:	b2db      	uxtb	r3, r3
 80015ca:	f003 0303 	and.w	r3, r3, #3
 80015ce:	b2db      	uxtb	r3, r3
 80015d0:	4313      	orrs	r3, r2
 80015d2:	b2db      	uxtb	r3, r3
 80015d4:	f043 0308 	orr.w	r3, r3, #8
 80015d8:	75bb      	strb	r3, [r7, #22]
        eid8 = (uint8_t)(mask_value >> 8);
 80015da:	683b      	ldr	r3, [r7, #0]
 80015dc:	0a1b      	lsrs	r3, r3, #8
 80015de:	757b      	strb	r3, [r7, #21]
        eid0 = (uint8_t)mask_value;
 80015e0:	683b      	ldr	r3, [r7, #0]
 80015e2:	753b      	strb	r3, [r7, #20]
 80015e4:	e00a      	b.n	80015fc <MCP2515_SetMask+0x94>
    } else {
        // 标准帧掩码配置
        sidh = (uint8_t)(mask_value >> 3);
 80015e6:	683b      	ldr	r3, [r7, #0]
 80015e8:	08db      	lsrs	r3, r3, #3
 80015ea:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)((mask_value & 0x07) << 5);
 80015ec:	683b      	ldr	r3, [r7, #0]
 80015ee:	b2db      	uxtb	r3, r3
 80015f0:	015b      	lsls	r3, r3, #5
 80015f2:	75bb      	strb	r3, [r7, #22]
        eid8 = 0;
 80015f4:	2300      	movs	r3, #0
 80015f6:	757b      	strb	r3, [r7, #21]
        eid0 = 0;
 80015f8:	2300      	movs	r3, #0
 80015fa:	753b      	strb	r3, [r7, #20]
    }
    
    // 写入掩码寄存器
    MCP2515_WriteRegister(mask_regs[mask_num][0], sidh);
 80015fc:	79fb      	ldrb	r3, [r7, #7]
 80015fe:	009b      	lsls	r3, r3, #2
 8001600:	3318      	adds	r3, #24
 8001602:	443b      	add	r3, r7
 8001604:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001608:	7dfa      	ldrb	r2, [r7, #23]
 800160a:	4611      	mov	r1, r2
 800160c:	4618      	mov	r0, r3
 800160e:	f7ff fe05 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][1], sidl);
 8001612:	79fb      	ldrb	r3, [r7, #7]
 8001614:	009b      	lsls	r3, r3, #2
 8001616:	3318      	adds	r3, #24
 8001618:	443b      	add	r3, r7
 800161a:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 800161e:	7dba      	ldrb	r2, [r7, #22]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f7ff fdfa 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][2], eid8);
 8001628:	79fb      	ldrb	r3, [r7, #7]
 800162a:	009b      	lsls	r3, r3, #2
 800162c:	3318      	adds	r3, #24
 800162e:	443b      	add	r3, r7
 8001630:	f813 3c0e 	ldrb.w	r3, [r3, #-14]
 8001634:	7d7a      	ldrb	r2, [r7, #21]
 8001636:	4611      	mov	r1, r2
 8001638:	4618      	mov	r0, r3
 800163a:	f7ff fdef 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][3], eid0);
 800163e:	79fb      	ldrb	r3, [r7, #7]
 8001640:	009b      	lsls	r3, r3, #2
 8001642:	3318      	adds	r3, #24
 8001644:	443b      	add	r3, r7
 8001646:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 800164a:	7d3a      	ldrb	r2, [r7, #20]
 800164c:	4611      	mov	r1, r2
 800164e:	4618      	mov	r0, r3
 8001650:	f7ff fde4 	bl	800121c <MCP2515_WriteRegister>
    
    // 恢复原来的模式
    if (current_mode != MCP2515_MODE_CONFIG) {
 8001654:	7cfb      	ldrb	r3, [r7, #19]
 8001656:	2b80      	cmp	r3, #128	@ 0x80
 8001658:	d003      	beq.n	8001662 <MCP2515_SetMask+0xfa>
        MCP2515_SetMode(current_mode);
 800165a:	7cfb      	ldrb	r3, [r7, #19]
 800165c:	4618      	mov	r0, r3
 800165e:	f7ff fe8b 	bl	8001378 <MCP2515_SetMode>
    }
    
    return MCP2515_OK;
 8001662:	2300      	movs	r3, #0
}
 8001664:	4618      	mov	r0, r3
 8001666:	3718      	adds	r7, #24
 8001668:	46bd      	mov	sp, r7
 800166a:	bd80      	pop	{r7, pc}
 800166c:	08009f3c 	.word	0x08009f3c

08001670 <MCP2515_SendMessage>:
  * @brief  发送CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SendMessage(MCP2515_CANMessage_t *message)
{
 8001670:	b580      	push	{r7, lr}
 8001672:	b084      	sub	sp, #16
 8001674:	af00      	add	r7, sp, #0
 8001676:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    uint32_t timeout = 0;
 8001678:	2300      	movs	r3, #0
 800167a:	60fb      	str	r3, [r7, #12]
    
    if (!mcp2515_initialized || message == NULL) {
 800167c:	4b26      	ldr	r3, [pc, #152]	@ (8001718 <MCP2515_SendMessage+0xa8>)
 800167e:	781b      	ldrb	r3, [r3, #0]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d002      	beq.n	800168a <MCP2515_SendMessage+0x1a>
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	2b00      	cmp	r3, #0
 8001688:	d101      	bne.n	800168e <MCP2515_SendMessage+0x1e>
        return MCP2515_ERROR;
 800168a:	2301      	movs	r3, #1
 800168c:	e03f      	b.n	800170e <MCP2515_SendMessage+0x9e>
    }
    
    // 查找空闲的发送缓冲区
    buffer = MCP2515_GetTxBuffer();
 800168e:	f000 fa93 	bl	8001bb8 <MCP2515_GetTxBuffer>
 8001692:	4603      	mov	r3, r0
 8001694:	72fb      	strb	r3, [r7, #11]
    if (buffer == 0xFF) {
 8001696:	7afb      	ldrb	r3, [r7, #11]
 8001698:	2bff      	cmp	r3, #255	@ 0xff
 800169a:	d101      	bne.n	80016a0 <MCP2515_SendMessage+0x30>
        return MCP2515_ERROR;  // 没有空闲的发送缓冲区
 800169c:	2301      	movs	r3, #1
 800169e:	e036      	b.n	800170e <MCP2515_SendMessage+0x9e>
    }
    
    // 加载消息到发送缓冲区
    MCP2515_LoadTxBuffer(buffer, message);
 80016a0:	7afb      	ldrb	r3, [r7, #11]
 80016a2:	6879      	ldr	r1, [r7, #4]
 80016a4:	4618      	mov	r0, r3
 80016a6:	f000 faa8 	bl	8001bfa <MCP2515_LoadTxBuffer>
    
    // 请求发送
    MCP2515_CS_Low();
 80016aa:	f7ff fd85 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_RTS | (1 << buffer));
 80016ae:	7afb      	ldrb	r3, [r7, #11]
 80016b0:	2201      	movs	r2, #1
 80016b2:	fa02 f303 	lsl.w	r3, r2, r3
 80016b6:	b25b      	sxtb	r3, r3
 80016b8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016bc:	b25b      	sxtb	r3, r3
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	4618      	mov	r0, r3
 80016c2:	f7ff fd2d 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();
 80016c6:	f7ff fd83 	bl	80011d0 <MCP2515_CS_High>
    
    // 等待发送完成
    while (timeout < 1000) {
 80016ca:	e01b      	b.n	8001704 <MCP2515_SendMessage+0x94>
        uint8_t status = MCP2515_GetInterruptFlags();
 80016cc:	f000 f893 	bl	80017f6 <MCP2515_GetInterruptFlags>
 80016d0:	4603      	mov	r3, r0
 80016d2:	72bb      	strb	r3, [r7, #10]
        if (status & (MCP2515_INT_TX0IF << buffer)) {
 80016d4:	7aba      	ldrb	r2, [r7, #10]
 80016d6:	7afb      	ldrb	r3, [r7, #11]
 80016d8:	2104      	movs	r1, #4
 80016da:	fa01 f303 	lsl.w	r3, r1, r3
 80016de:	4013      	ands	r3, r2
 80016e0:	2b00      	cmp	r3, #0
 80016e2:	d009      	beq.n	80016f8 <MCP2515_SendMessage+0x88>
            // 清除发送完成中断标志
            MCP2515_ClearInterruptFlags(MCP2515_INT_TX0IF << buffer);
 80016e4:	7afb      	ldrb	r3, [r7, #11]
 80016e6:	2204      	movs	r2, #4
 80016e8:	fa02 f303 	lsl.w	r3, r2, r3
 80016ec:	b2db      	uxtb	r3, r3
 80016ee:	4618      	mov	r0, r3
 80016f0:	f000 f889 	bl	8001806 <MCP2515_ClearInterruptFlags>
            return MCP2515_OK;
 80016f4:	2300      	movs	r3, #0
 80016f6:	e00a      	b.n	800170e <MCP2515_SendMessage+0x9e>
        }
        osDelay(1);
 80016f8:	2001      	movs	r0, #1
 80016fa:	f003 fefd 	bl	80054f8 <osDelay>
        timeout++;
 80016fe:	68fb      	ldr	r3, [r7, #12]
 8001700:	3301      	adds	r3, #1
 8001702:	60fb      	str	r3, [r7, #12]
    while (timeout < 1000) {
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800170a:	d3df      	bcc.n	80016cc <MCP2515_SendMessage+0x5c>
    }
    
    return MCP2515_TIMEOUT;
 800170c:	2302      	movs	r3, #2
}
 800170e:	4618      	mov	r0, r3
 8001710:	3710      	adds	r7, #16
 8001712:	46bd      	mov	sp, r7
 8001714:	bd80      	pop	{r7, pc}
 8001716:	bf00      	nop
 8001718:	20000148 	.word	0x20000148

0800171c <MCP2515_ReceiveMessage>:
  * @brief  接收CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_ReceiveMessage(MCP2515_CANMessage_t *message)
{
 800171c:	b580      	push	{r7, lr}
 800171e:	b084      	sub	sp, #16
 8001720:	af00      	add	r7, sp, #0
 8001722:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (!mcp2515_initialized || message == NULL) {
 8001724:	4b16      	ldr	r3, [pc, #88]	@ (8001780 <MCP2515_ReceiveMessage+0x64>)
 8001726:	781b      	ldrb	r3, [r3, #0]
 8001728:	2b00      	cmp	r3, #0
 800172a:	d002      	beq.n	8001732 <MCP2515_ReceiveMessage+0x16>
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d101      	bne.n	8001736 <MCP2515_ReceiveMessage+0x1a>
        return MCP2515_ERROR;
 8001732:	2301      	movs	r3, #1
 8001734:	e020      	b.n	8001778 <MCP2515_ReceiveMessage+0x5c>
    }
    
    status = MCP2515_GetInterruptFlags();
 8001736:	f000 f85e 	bl	80017f6 <MCP2515_GetInterruptFlags>
 800173a:	4603      	mov	r3, r0
 800173c:	73fb      	strb	r3, [r7, #15]
    
    if (status & MCP2515_INT_RX0IF) {
 800173e:	7bfb      	ldrb	r3, [r7, #15]
 8001740:	f003 0301 	and.w	r3, r3, #1
 8001744:	2b00      	cmp	r3, #0
 8001746:	d008      	beq.n	800175a <MCP2515_ReceiveMessage+0x3e>
        // 从接收缓冲区0读取消息
        MCP2515_ReadRxBuffer(0, message);
 8001748:	6879      	ldr	r1, [r7, #4]
 800174a:	2000      	movs	r0, #0
 800174c:	f000 fae3 	bl	8001d16 <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX0IF);
 8001750:	2001      	movs	r0, #1
 8001752:	f000 f858 	bl	8001806 <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 8001756:	2300      	movs	r3, #0
 8001758:	e00e      	b.n	8001778 <MCP2515_ReceiveMessage+0x5c>
    } else if (status & MCP2515_INT_RX1IF) {
 800175a:	7bfb      	ldrb	r3, [r7, #15]
 800175c:	f003 0302 	and.w	r3, r3, #2
 8001760:	2b00      	cmp	r3, #0
 8001762:	d008      	beq.n	8001776 <MCP2515_ReceiveMessage+0x5a>
        // 从接收缓冲区1读取消息
        MCP2515_ReadRxBuffer(1, message);
 8001764:	6879      	ldr	r1, [r7, #4]
 8001766:	2001      	movs	r0, #1
 8001768:	f000 fad5 	bl	8001d16 <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX1IF);
 800176c:	2002      	movs	r0, #2
 800176e:	f000 f84a 	bl	8001806 <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 8001772:	2300      	movs	r3, #0
 8001774:	e000      	b.n	8001778 <MCP2515_ReceiveMessage+0x5c>
    }
    
    return MCP2515_ERROR;  // 没有接收到消息
 8001776:	2301      	movs	r3, #1
}
 8001778:	4618      	mov	r0, r3
 800177a:	3710      	adds	r7, #16
 800177c:	46bd      	mov	sp, r7
 800177e:	bd80      	pop	{r7, pc}
 8001780:	20000148 	.word	0x20000148

08001784 <MCP2515_CheckReceive>:
  * @brief  检查是否有消息接收
  * @param  None
  * @retval 1: 有消息, 0: 无消息
  */
uint8_t MCP2515_CheckReceive(void)
{
 8001784:	b580      	push	{r7, lr}
 8001786:	b082      	sub	sp, #8
 8001788:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetInterruptFlags();
 800178a:	f000 f834 	bl	80017f6 <MCP2515_GetInterruptFlags>
 800178e:	4603      	mov	r3, r0
 8001790:	71fb      	strb	r3, [r7, #7]
    return (status & (MCP2515_INT_RX0IF | MCP2515_INT_RX1IF)) ? 1 : 0;
 8001792:	79fb      	ldrb	r3, [r7, #7]
 8001794:	f003 0303 	and.w	r3, r3, #3
 8001798:	2b00      	cmp	r3, #0
 800179a:	bf14      	ite	ne
 800179c:	2301      	movne	r3, #1
 800179e:	2300      	moveq	r3, #0
 80017a0:	b2db      	uxtb	r3, r3
}
 80017a2:	4618      	mov	r0, r3
 80017a4:	3708      	adds	r7, #8
 80017a6:	46bd      	mov	sp, r7
 80017a8:	bd80      	pop	{r7, pc}

080017aa <MCP2515_CheckTransmit>:
  * @brief  检查发送缓冲区状态
  * @param  None
  * @retval 发送缓冲区空闲数量
  */
uint8_t MCP2515_CheckTransmit(void)
{
 80017aa:	b580      	push	{r7, lr}
 80017ac:	b082      	sub	sp, #8
 80017ae:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80017b0:	f000 f838 	bl	8001824 <MCP2515_GetStatus>
 80017b4:	4603      	mov	r3, r0
 80017b6:	71bb      	strb	r3, [r7, #6]
    uint8_t free_buffers = 0;
 80017b8:	2300      	movs	r3, #0
 80017ba:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) free_buffers++;  // TXB0空闲
 80017bc:	79bb      	ldrb	r3, [r7, #6]
 80017be:	f003 0304 	and.w	r3, r3, #4
 80017c2:	2b00      	cmp	r3, #0
 80017c4:	d102      	bne.n	80017cc <MCP2515_CheckTransmit+0x22>
 80017c6:	79fb      	ldrb	r3, [r7, #7]
 80017c8:	3301      	adds	r3, #1
 80017ca:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x10)) free_buffers++;  // TXB1空闲
 80017cc:	79bb      	ldrb	r3, [r7, #6]
 80017ce:	f003 0310 	and.w	r3, r3, #16
 80017d2:	2b00      	cmp	r3, #0
 80017d4:	d102      	bne.n	80017dc <MCP2515_CheckTransmit+0x32>
 80017d6:	79fb      	ldrb	r3, [r7, #7]
 80017d8:	3301      	adds	r3, #1
 80017da:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x40)) free_buffers++;  // TXB2空闲
 80017dc:	79bb      	ldrb	r3, [r7, #6]
 80017de:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d102      	bne.n	80017ec <MCP2515_CheckTransmit+0x42>
 80017e6:	79fb      	ldrb	r3, [r7, #7]
 80017e8:	3301      	adds	r3, #1
 80017ea:	71fb      	strb	r3, [r7, #7]
    
    return free_buffers;
 80017ec:	79fb      	ldrb	r3, [r7, #7]
}
 80017ee:	4618      	mov	r0, r3
 80017f0:	3708      	adds	r7, #8
 80017f2:	46bd      	mov	sp, r7
 80017f4:	bd80      	pop	{r7, pc}

080017f6 <MCP2515_GetInterruptFlags>:
  * @brief  获取中断标志
  * @param  None
  * @retval 中断标志寄存器值
  */
uint8_t MCP2515_GetInterruptFlags(void)
{
 80017f6:	b580      	push	{r7, lr}
 80017f8:	af00      	add	r7, sp, #0
    return MCP2515_ReadRegister(MCP2515_CANINTF);
 80017fa:	202c      	movs	r0, #44	@ 0x2c
 80017fc:	f7ff fcf4 	bl	80011e8 <MCP2515_ReadRegister>
 8001800:	4603      	mov	r3, r0
}
 8001802:	4618      	mov	r0, r3
 8001804:	bd80      	pop	{r7, pc}

08001806 <MCP2515_ClearInterruptFlags>:
  * @brief  清除中断标志
  * @param  flags: 要清除的中断标志
  * @retval None
  */
void MCP2515_ClearInterruptFlags(uint8_t flags)
{
 8001806:	b580      	push	{r7, lr}
 8001808:	b082      	sub	sp, #8
 800180a:	af00      	add	r7, sp, #0
 800180c:	4603      	mov	r3, r0
 800180e:	71fb      	strb	r3, [r7, #7]
    MCP2515_ModifyRegister(MCP2515_CANINTF, flags, 0x00);
 8001810:	79fb      	ldrb	r3, [r7, #7]
 8001812:	2200      	movs	r2, #0
 8001814:	4619      	mov	r1, r3
 8001816:	202c      	movs	r0, #44	@ 0x2c
 8001818:	f7ff fd1b 	bl	8001252 <MCP2515_ModifyRegister>
}
 800181c:	bf00      	nop
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}

08001824 <MCP2515_GetStatus>:
  * @brief  获取MCP2515状态
  * @param  None
  * @retval 状态寄存器值
  */
uint8_t MCP2515_GetStatus(void)
{
 8001824:	b580      	push	{r7, lr}
 8001826:	b082      	sub	sp, #8
 8001828:	af00      	add	r7, sp, #0
    uint8_t status;
    
    MCP2515_CS_Low();
 800182a:	f7ff fcc5 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ_STATUS);
 800182e:	20a0      	movs	r0, #160	@ 0xa0
 8001830:	f7ff fc76 	bl	8001120 <MCP2515_SPI_ReadWrite>
    status = MCP2515_SPI_ReadWrite(0x00);
 8001834:	2000      	movs	r0, #0
 8001836:	f7ff fc73 	bl	8001120 <MCP2515_SPI_ReadWrite>
 800183a:	4603      	mov	r3, r0
 800183c:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_High();
 800183e:	f7ff fcc7 	bl	80011d0 <MCP2515_CS_High>
    
    return status;
 8001842:	79fb      	ldrb	r3, [r7, #7]
}
 8001844:	4618      	mov	r0, r3
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}

0800184c <MCP2515_SelfTest>:
  * @brief  MCP2515自检测试
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SelfTest(void)
{
 800184c:	b580      	push	{r7, lr}
 800184e:	b082      	sub	sp, #8
 8001850:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xAA;
 8001852:	23aa      	movs	r3, #170	@ 0xaa
 8001854:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data;
    
    // 写入测试数据到一个可读写的寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 8001856:	79fb      	ldrb	r3, [r7, #7]
 8001858:	4619      	mov	r1, r3
 800185a:	202a      	movs	r0, #42	@ 0x2a
 800185c:	f7ff fcde 	bl	800121c <MCP2515_WriteRegister>
    
    // 读回数据进行比较
    read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001860:	202a      	movs	r0, #42	@ 0x2a
 8001862:	f7ff fcc1 	bl	80011e8 <MCP2515_ReadRegister>
 8001866:	4603      	mov	r3, r0
 8001868:	71bb      	strb	r3, [r7, #6]
    
    if (read_data == test_data) {
 800186a:	79ba      	ldrb	r2, [r7, #6]
 800186c:	79fb      	ldrb	r3, [r7, #7]
 800186e:	429a      	cmp	r2, r3
 8001870:	d111      	bne.n	8001896 <MCP2515_SelfTest+0x4a>
        // 再次测试不同的数据
        test_data = 0x55;
 8001872:	2355      	movs	r3, #85	@ 0x55
 8001874:	71fb      	strb	r3, [r7, #7]
        MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 8001876:	79fb      	ldrb	r3, [r7, #7]
 8001878:	4619      	mov	r1, r3
 800187a:	202a      	movs	r0, #42	@ 0x2a
 800187c:	f7ff fcce 	bl	800121c <MCP2515_WriteRegister>
        read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001880:	202a      	movs	r0, #42	@ 0x2a
 8001882:	f7ff fcb1 	bl	80011e8 <MCP2515_ReadRegister>
 8001886:	4603      	mov	r3, r0
 8001888:	71bb      	strb	r3, [r7, #6]
        
        if (read_data == test_data) {
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	79fb      	ldrb	r3, [r7, #7]
 800188e:	429a      	cmp	r2, r3
 8001890:	d101      	bne.n	8001896 <MCP2515_SelfTest+0x4a>
            return MCP2515_OK;
 8001892:	2300      	movs	r3, #0
 8001894:	e000      	b.n	8001898 <MCP2515_SelfTest+0x4c>
        }
    }
    
    return MCP2515_ERROR;
 8001896:	2301      	movs	r3, #1
}
 8001898:	4618      	mov	r0, r3
 800189a:	3708      	adds	r7, #8
 800189c:	46bd      	mov	sp, r7
 800189e:	bd80      	pop	{r7, pc}

080018a0 <MCP2515_HardwareTest>:
  * @brief  MCP2515硬件连接测试函数
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_HardwareTest(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b084      	sub	sp, #16
 80018a4:	af00      	add	r7, sp, #0
    printf("\r\n=== MCP2515 Hardware Connection Test ===\r\n");
 80018a6:	4851      	ldr	r0, [pc, #324]	@ (80019ec <MCP2515_HardwareTest+0x14c>)
 80018a8:	f006 fdb0 	bl	800840c <puts>
    
    // 1. CS引脚控制测试
    printf("Step 1: Testing CS pin control...\r\n");
 80018ac:	4850      	ldr	r0, [pc, #320]	@ (80019f0 <MCP2515_HardwareTest+0x150>)
 80018ae:	f006 fdad 	bl	800840c <puts>
    for (int i = 0; i < 3; i++) {
 80018b2:	2300      	movs	r3, #0
 80018b4:	60fb      	str	r3, [r7, #12]
 80018b6:	e00c      	b.n	80018d2 <MCP2515_HardwareTest+0x32>
        MCP2515_CS_High();
 80018b8:	f7ff fc8a 	bl	80011d0 <MCP2515_CS_High>
        osDelay(1);
 80018bc:	2001      	movs	r0, #1
 80018be:	f003 fe1b 	bl	80054f8 <osDelay>
        MCP2515_CS_Low();
 80018c2:	f7ff fc79 	bl	80011b8 <MCP2515_CS_Low>
        osDelay(1);
 80018c6:	2001      	movs	r0, #1
 80018c8:	f003 fe16 	bl	80054f8 <osDelay>
    for (int i = 0; i < 3; i++) {
 80018cc:	68fb      	ldr	r3, [r7, #12]
 80018ce:	3301      	adds	r3, #1
 80018d0:	60fb      	str	r3, [r7, #12]
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	2b02      	cmp	r3, #2
 80018d6:	ddef      	ble.n	80018b8 <MCP2515_HardwareTest+0x18>
    }
    MCP2515_CS_High();
 80018d8:	f7ff fc7a 	bl	80011d0 <MCP2515_CS_High>
    printf("[OK] CS pin control test completed\r\n");
 80018dc:	4845      	ldr	r0, [pc, #276]	@ (80019f4 <MCP2515_HardwareTest+0x154>)
 80018de:	f006 fd95 	bl	800840c <puts>
    
    // 2. SPI基础通信测试
    printf("Step 2: Testing basic SPI communication...\r\n");
 80018e2:	4845      	ldr	r0, [pc, #276]	@ (80019f8 <MCP2515_HardwareTest+0x158>)
 80018e4:	f006 fd92 	bl	800840c <puts>
    MCP2515_CS_Low();
 80018e8:	f7ff fc66 	bl	80011b8 <MCP2515_CS_Low>
    uint8_t dummy1 = MCP2515_SPI_ReadWrite(0x00);
 80018ec:	2000      	movs	r0, #0
 80018ee:	f7ff fc17 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80018f2:	4603      	mov	r3, r0
 80018f4:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy2 = MCP2515_SPI_ReadWrite(0xFF);
 80018f6:	20ff      	movs	r0, #255	@ 0xff
 80018f8:	f7ff fc12 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80018fc:	4603      	mov	r3, r0
 80018fe:	72bb      	strb	r3, [r7, #10]
    MCP2515_CS_High();
 8001900:	f7ff fc66 	bl	80011d0 <MCP2515_CS_High>
    printf("SPI test results: 0x00->0x%02X, 0xFF->0x%02X\r\n", dummy1, dummy2);
 8001904:	7afb      	ldrb	r3, [r7, #11]
 8001906:	7aba      	ldrb	r2, [r7, #10]
 8001908:	4619      	mov	r1, r3
 800190a:	483c      	ldr	r0, [pc, #240]	@ (80019fc <MCP2515_HardwareTest+0x15c>)
 800190c:	f006 fd16 	bl	800833c <iprintf>
    
    if (dummy1 == 0xFF && dummy2 == 0xFF) {
 8001910:	7afb      	ldrb	r3, [r7, #11]
 8001912:	2bff      	cmp	r3, #255	@ 0xff
 8001914:	d108      	bne.n	8001928 <MCP2515_HardwareTest+0x88>
 8001916:	7abb      	ldrb	r3, [r7, #10]
 8001918:	2bff      	cmp	r3, #255	@ 0xff
 800191a:	d105      	bne.n	8001928 <MCP2515_HardwareTest+0x88>
        printf("[WARN] Warning: All SPI reads return 0xFF\r\n");
 800191c:	4838      	ldr	r0, [pc, #224]	@ (8001a00 <MCP2515_HardwareTest+0x160>)
 800191e:	f006 fd75 	bl	800840c <puts>
        printf("  This suggests MISO line issue or MCP2515 not responding\r\n");
 8001922:	4838      	ldr	r0, [pc, #224]	@ (8001a04 <MCP2515_HardwareTest+0x164>)
 8001924:	f006 fd72 	bl	800840c <puts>
    }
    
    // 3. 复位测试
    printf("Step 3: Testing MCP2515 reset...\r\n");
 8001928:	4837      	ldr	r0, [pc, #220]	@ (8001a08 <MCP2515_HardwareTest+0x168>)
 800192a:	f006 fd6f 	bl	800840c <puts>
    MCP2515_Reset();
 800192e:	f7ff fcb1 	bl	8001294 <MCP2515_Reset>
    
    // 4. 寄存器读写测试
    printf("Step 4: Testing register read/write...\r\n");
 8001932:	4836      	ldr	r0, [pc, #216]	@ (8001a0c <MCP2515_HardwareTest+0x16c>)
 8001934:	f006 fd6a 	bl	800840c <puts>
    
    // 测试CNF1寄存器（可读写）
    uint8_t original = MCP2515_ReadRegister(MCP2515_CNF1);
 8001938:	202a      	movs	r0, #42	@ 0x2a
 800193a:	f7ff fc55 	bl	80011e8 <MCP2515_ReadRegister>
 800193e:	4603      	mov	r3, r0
 8001940:	727b      	strb	r3, [r7, #9]
    printf("CNF1 original value: 0x%02X\r\n", original);
 8001942:	7a7b      	ldrb	r3, [r7, #9]
 8001944:	4619      	mov	r1, r3
 8001946:	4832      	ldr	r0, [pc, #200]	@ (8001a10 <MCP2515_HardwareTest+0x170>)
 8001948:	f006 fcf8 	bl	800833c <iprintf>
    
    // 写入测试值
    uint8_t test_value = 0xAA;
 800194c:	23aa      	movs	r3, #170	@ 0xaa
 800194e:	723b      	strb	r3, [r7, #8]
    MCP2515_WriteRegister(MCP2515_CNF1, test_value);
 8001950:	7a3b      	ldrb	r3, [r7, #8]
 8001952:	4619      	mov	r1, r3
 8001954:	202a      	movs	r0, #42	@ 0x2a
 8001956:	f7ff fc61 	bl	800121c <MCP2515_WriteRegister>
    uint8_t read_back = MCP2515_ReadRegister(MCP2515_CNF1);
 800195a:	202a      	movs	r0, #42	@ 0x2a
 800195c:	f7ff fc44 	bl	80011e8 <MCP2515_ReadRegister>
 8001960:	4603      	mov	r3, r0
 8001962:	71fb      	strb	r3, [r7, #7]
    printf("CNF1 write 0x%02X, read back 0x%02X\r\n", test_value, read_back);
 8001964:	7a3b      	ldrb	r3, [r7, #8]
 8001966:	79fa      	ldrb	r2, [r7, #7]
 8001968:	4619      	mov	r1, r3
 800196a:	482a      	ldr	r0, [pc, #168]	@ (8001a14 <MCP2515_HardwareTest+0x174>)
 800196c:	f006 fce6 	bl	800833c <iprintf>
    
    if (read_back == test_value) {
 8001970:	79fa      	ldrb	r2, [r7, #7]
 8001972:	7a3b      	ldrb	r3, [r7, #8]
 8001974:	429a      	cmp	r2, r3
 8001976:	d119      	bne.n	80019ac <MCP2515_HardwareTest+0x10c>
        printf("[OK] Register write test 1 passed\r\n");
 8001978:	4827      	ldr	r0, [pc, #156]	@ (8001a18 <MCP2515_HardwareTest+0x178>)
 800197a:	f006 fd47 	bl	800840c <puts>
        printf("[ERROR] Register write test 1 failed\r\n");
        return MCP2515_ERROR;
    }
    
    // 测试另一个值
    test_value = 0x55;
 800197e:	2355      	movs	r3, #85	@ 0x55
 8001980:	723b      	strb	r3, [r7, #8]
    MCP2515_WriteRegister(MCP2515_CNF1, test_value);
 8001982:	7a3b      	ldrb	r3, [r7, #8]
 8001984:	4619      	mov	r1, r3
 8001986:	202a      	movs	r0, #42	@ 0x2a
 8001988:	f7ff fc48 	bl	800121c <MCP2515_WriteRegister>
    read_back = MCP2515_ReadRegister(MCP2515_CNF1);
 800198c:	202a      	movs	r0, #42	@ 0x2a
 800198e:	f7ff fc2b 	bl	80011e8 <MCP2515_ReadRegister>
 8001992:	4603      	mov	r3, r0
 8001994:	71fb      	strb	r3, [r7, #7]
    printf("CNF1 write 0x%02X, read back 0x%02X\r\n", test_value, read_back);
 8001996:	7a3b      	ldrb	r3, [r7, #8]
 8001998:	79fa      	ldrb	r2, [r7, #7]
 800199a:	4619      	mov	r1, r3
 800199c:	481d      	ldr	r0, [pc, #116]	@ (8001a14 <MCP2515_HardwareTest+0x174>)
 800199e:	f006 fccd 	bl	800833c <iprintf>
    
    if (read_back == test_value) {
 80019a2:	79fa      	ldrb	r2, [r7, #7]
 80019a4:	7a3b      	ldrb	r3, [r7, #8]
 80019a6:	429a      	cmp	r2, r3
 80019a8:	d117      	bne.n	80019da <MCP2515_HardwareTest+0x13a>
 80019aa:	e004      	b.n	80019b6 <MCP2515_HardwareTest+0x116>
        printf("[ERROR] Register write test 1 failed\r\n");
 80019ac:	481b      	ldr	r0, [pc, #108]	@ (8001a1c <MCP2515_HardwareTest+0x17c>)
 80019ae:	f006 fd2d 	bl	800840c <puts>
        return MCP2515_ERROR;
 80019b2:	2301      	movs	r3, #1
 80019b4:	e015      	b.n	80019e2 <MCP2515_HardwareTest+0x142>
        printf("[OK] Register write test 2 passed\r\n");
 80019b6:	481a      	ldr	r0, [pc, #104]	@ (8001a20 <MCP2515_HardwareTest+0x180>)
 80019b8:	f006 fd28 	bl	800840c <puts>
        printf("[ERROR] Register write test 2 failed\r\n");
        return MCP2515_ERROR;
    }
    
    // 恢复原始值
    MCP2515_WriteRegister(MCP2515_CNF1, original);
 80019bc:	7a7b      	ldrb	r3, [r7, #9]
 80019be:	4619      	mov	r1, r3
 80019c0:	202a      	movs	r0, #42	@ 0x2a
 80019c2:	f7ff fc2b 	bl	800121c <MCP2515_WriteRegister>
    printf("CNF1 restored to original value: 0x%02X\r\n", original);
 80019c6:	7a7b      	ldrb	r3, [r7, #9]
 80019c8:	4619      	mov	r1, r3
 80019ca:	4816      	ldr	r0, [pc, #88]	@ (8001a24 <MCP2515_HardwareTest+0x184>)
 80019cc:	f006 fcb6 	bl	800833c <iprintf>
    
    printf("[OK] All hardware tests passed!\r\n");
 80019d0:	4815      	ldr	r0, [pc, #84]	@ (8001a28 <MCP2515_HardwareTest+0x188>)
 80019d2:	f006 fd1b 	bl	800840c <puts>
    return MCP2515_OK;
 80019d6:	2300      	movs	r3, #0
 80019d8:	e003      	b.n	80019e2 <MCP2515_HardwareTest+0x142>
        printf("[ERROR] Register write test 2 failed\r\n");
 80019da:	4814      	ldr	r0, [pc, #80]	@ (8001a2c <MCP2515_HardwareTest+0x18c>)
 80019dc:	f006 fd16 	bl	800840c <puts>
        return MCP2515_ERROR;
 80019e0:	2301      	movs	r3, #1
}
 80019e2:	4618      	mov	r0, r3
 80019e4:	3710      	adds	r7, #16
 80019e6:	46bd      	mov	sp, r7
 80019e8:	bd80      	pop	{r7, pc}
 80019ea:	bf00      	nop
 80019ec:	08009f44 	.word	0x08009f44
 80019f0:	08009f70 	.word	0x08009f70
 80019f4:	08009f94 	.word	0x08009f94
 80019f8:	08009fb8 	.word	0x08009fb8
 80019fc:	08009fe4 	.word	0x08009fe4
 8001a00:	0800a014 	.word	0x0800a014
 8001a04:	0800a040 	.word	0x0800a040
 8001a08:	0800a07c 	.word	0x0800a07c
 8001a0c:	0800a0a0 	.word	0x0800a0a0
 8001a10:	0800a0c8 	.word	0x0800a0c8
 8001a14:	0800a0e8 	.word	0x0800a0e8
 8001a18:	0800a110 	.word	0x0800a110
 8001a1c:	0800a134 	.word	0x0800a134
 8001a20:	0800a15c 	.word	0x0800a15c
 8001a24:	0800a1a8 	.word	0x0800a1a8
 8001a28:	0800a1d4 	.word	0x0800a1d4
 8001a2c:	0800a180 	.word	0x0800a180

08001a30 <MCP2515_PrintStatus>:
  * @brief  打印MCP2515状态信息
  * @param  None
  * @retval None
  */
void MCP2515_PrintStatus(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b082      	sub	sp, #8
 8001a34:	af00      	add	r7, sp, #0
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 8001a36:	200e      	movs	r0, #14
 8001a38:	f7ff fbd6 	bl	80011e8 <MCP2515_ReadRegister>
 8001a3c:	4603      	mov	r3, r0
 8001a3e:	71fb      	strb	r3, [r7, #7]
    uint8_t canctrl = MCP2515_ReadRegister(MCP2515_CANCTRL);
 8001a40:	200f      	movs	r0, #15
 8001a42:	f7ff fbd1 	bl	80011e8 <MCP2515_ReadRegister>
 8001a46:	4603      	mov	r3, r0
 8001a48:	71bb      	strb	r3, [r7, #6]
    uint8_t canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001a4a:	202c      	movs	r0, #44	@ 0x2c
 8001a4c:	f7ff fbcc 	bl	80011e8 <MCP2515_ReadRegister>
 8001a50:	4603      	mov	r3, r0
 8001a52:	717b      	strb	r3, [r7, #5]
    uint8_t eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001a54:	202d      	movs	r0, #45	@ 0x2d
 8001a56:	f7ff fbc7 	bl	80011e8 <MCP2515_ReadRegister>
 8001a5a:	4603      	mov	r3, r0
 8001a5c:	713b      	strb	r3, [r7, #4]
    
    printf("MCP2515 Status:\r\n");
 8001a5e:	4825      	ldr	r0, [pc, #148]	@ (8001af4 <MCP2515_PrintStatus+0xc4>)
 8001a60:	f006 fcd4 	bl	800840c <puts>
    printf("CANSTAT: 0x%02X\r\n", canstat);
 8001a64:	79fb      	ldrb	r3, [r7, #7]
 8001a66:	4619      	mov	r1, r3
 8001a68:	4823      	ldr	r0, [pc, #140]	@ (8001af8 <MCP2515_PrintStatus+0xc8>)
 8001a6a:	f006 fc67 	bl	800833c <iprintf>
    printf("CANCTRL: 0x%02X\r\n", canctrl);
 8001a6e:	79bb      	ldrb	r3, [r7, #6]
 8001a70:	4619      	mov	r1, r3
 8001a72:	4822      	ldr	r0, [pc, #136]	@ (8001afc <MCP2515_PrintStatus+0xcc>)
 8001a74:	f006 fc62 	bl	800833c <iprintf>
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001a78:	797b      	ldrb	r3, [r7, #5]
 8001a7a:	4619      	mov	r1, r3
 8001a7c:	4820      	ldr	r0, [pc, #128]	@ (8001b00 <MCP2515_PrintStatus+0xd0>)
 8001a7e:	f006 fc5d 	bl	800833c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001a82:	793b      	ldrb	r3, [r7, #4]
 8001a84:	4619      	mov	r1, r3
 8001a86:	481f      	ldr	r0, [pc, #124]	@ (8001b04 <MCP2515_PrintStatus+0xd4>)
 8001a88:	f006 fc58 	bl	800833c <iprintf>
    printf("Mode: ");
 8001a8c:	481e      	ldr	r0, [pc, #120]	@ (8001b08 <MCP2515_PrintStatus+0xd8>)
 8001a8e:	f006 fc55 	bl	800833c <iprintf>
    
    switch (canstat & 0xE0) {
 8001a92:	79fb      	ldrb	r3, [r7, #7]
 8001a94:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001a98:	2b80      	cmp	r3, #128	@ 0x80
 8001a9a:	d01e      	beq.n	8001ada <MCP2515_PrintStatus+0xaa>
 8001a9c:	2b80      	cmp	r3, #128	@ 0x80
 8001a9e:	dc20      	bgt.n	8001ae2 <MCP2515_PrintStatus+0xb2>
 8001aa0:	2b60      	cmp	r3, #96	@ 0x60
 8001aa2:	d016      	beq.n	8001ad2 <MCP2515_PrintStatus+0xa2>
 8001aa4:	2b60      	cmp	r3, #96	@ 0x60
 8001aa6:	dc1c      	bgt.n	8001ae2 <MCP2515_PrintStatus+0xb2>
 8001aa8:	2b40      	cmp	r3, #64	@ 0x40
 8001aaa:	d00e      	beq.n	8001aca <MCP2515_PrintStatus+0x9a>
 8001aac:	2b40      	cmp	r3, #64	@ 0x40
 8001aae:	dc18      	bgt.n	8001ae2 <MCP2515_PrintStatus+0xb2>
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d002      	beq.n	8001aba <MCP2515_PrintStatus+0x8a>
 8001ab4:	2b20      	cmp	r3, #32
 8001ab6:	d004      	beq.n	8001ac2 <MCP2515_PrintStatus+0x92>
 8001ab8:	e013      	b.n	8001ae2 <MCP2515_PrintStatus+0xb2>
        case MCP2515_MODE_NORMAL:
            printf("Normal\r\n");
 8001aba:	4814      	ldr	r0, [pc, #80]	@ (8001b0c <MCP2515_PrintStatus+0xdc>)
 8001abc:	f006 fca6 	bl	800840c <puts>
            break;
 8001ac0:	e013      	b.n	8001aea <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_SLEEP:
            printf("Sleep\r\n");
 8001ac2:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <MCP2515_PrintStatus+0xe0>)
 8001ac4:	f006 fca2 	bl	800840c <puts>
            break;
 8001ac8:	e00f      	b.n	8001aea <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LOOPBACK:
            printf("Loopback\r\n");
 8001aca:	4812      	ldr	r0, [pc, #72]	@ (8001b14 <MCP2515_PrintStatus+0xe4>)
 8001acc:	f006 fc9e 	bl	800840c <puts>
            break;
 8001ad0:	e00b      	b.n	8001aea <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LISTENONLY:
            printf("Listen Only\r\n");
 8001ad2:	4811      	ldr	r0, [pc, #68]	@ (8001b18 <MCP2515_PrintStatus+0xe8>)
 8001ad4:	f006 fc9a 	bl	800840c <puts>
            break;
 8001ad8:	e007      	b.n	8001aea <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_CONFIG:
            printf("Configuration\r\n");
 8001ada:	4810      	ldr	r0, [pc, #64]	@ (8001b1c <MCP2515_PrintStatus+0xec>)
 8001adc:	f006 fc96 	bl	800840c <puts>
            break;
 8001ae0:	e003      	b.n	8001aea <MCP2515_PrintStatus+0xba>
        default:
            printf("Unknown\r\n");
 8001ae2:	480f      	ldr	r0, [pc, #60]	@ (8001b20 <MCP2515_PrintStatus+0xf0>)
 8001ae4:	f006 fc92 	bl	800840c <puts>
            break;
 8001ae8:	bf00      	nop
    }
}
 8001aea:	bf00      	nop
 8001aec:	3708      	adds	r7, #8
 8001aee:	46bd      	mov	sp, r7
 8001af0:	bd80      	pop	{r7, pc}
 8001af2:	bf00      	nop
 8001af4:	0800a1f8 	.word	0x0800a1f8
 8001af8:	0800a20c 	.word	0x0800a20c
 8001afc:	0800a220 	.word	0x0800a220
 8001b00:	0800a234 	.word	0x0800a234
 8001b04:	0800a248 	.word	0x0800a248
 8001b08:	0800a258 	.word	0x0800a258
 8001b0c:	0800a260 	.word	0x0800a260
 8001b10:	0800a268 	.word	0x0800a268
 8001b14:	0800a270 	.word	0x0800a270
 8001b18:	0800a27c 	.word	0x0800a27c
 8001b1c:	0800a28c 	.word	0x0800a28c
 8001b20:	0800a29c 	.word	0x0800a29c

08001b24 <MCP2515_WaitForMode>:
  * @param  mode: 目标模式
  * @param  timeout: 超时时间(ms)
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
static uint8_t MCP2515_WaitForMode(uint8_t mode, uint32_t timeout)
{
 8001b24:	b580      	push	{r7, lr}
 8001b26:	b086      	sub	sp, #24
 8001b28:	af00      	add	r7, sp, #0
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	6039      	str	r1, [r7, #0]
 8001b2e:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 8001b30:	f001 fa4a 	bl	8002fc8 <HAL_GetTick>
 8001b34:	6138      	str	r0, [r7, #16]
    uint32_t check_count = 0;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 8001b3a:	e024      	b.n	8001b86 <MCP2515_WaitForMode+0x62>
        uint8_t current_mode = MCP2515_GetMode();
 8001b3c:	f7ff fc54 	bl	80013e8 <MCP2515_GetMode>
 8001b40:	4603      	mov	r3, r0
 8001b42:	73fb      	strb	r3, [r7, #15]
        check_count++;
 8001b44:	697b      	ldr	r3, [r7, #20]
 8001b46:	3301      	adds	r3, #1
 8001b48:	617b      	str	r3, [r7, #20]
        
        if (current_mode == mode) {
 8001b4a:	7bfa      	ldrb	r2, [r7, #15]
 8001b4c:	79fb      	ldrb	r3, [r7, #7]
 8001b4e:	429a      	cmp	r2, r3
 8001b50:	d105      	bne.n	8001b5e <MCP2515_WaitForMode+0x3a>
            printf("Mode switch completed after %lu checks\r\n", check_count);
 8001b52:	6979      	ldr	r1, [r7, #20]
 8001b54:	4814      	ldr	r0, [pc, #80]	@ (8001ba8 <MCP2515_WaitForMode+0x84>)
 8001b56:	f006 fbf1 	bl	800833c <iprintf>
            return MCP2515_OK;
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	e020      	b.n	8001ba0 <MCP2515_WaitForMode+0x7c>
        }
        
        // 每100次检查输出一次状态
        if (check_count % 100 == 0) {
 8001b5e:	697a      	ldr	r2, [r7, #20]
 8001b60:	4b12      	ldr	r3, [pc, #72]	@ (8001bac <MCP2515_WaitForMode+0x88>)
 8001b62:	fba3 1302 	umull	r1, r3, r3, r2
 8001b66:	095b      	lsrs	r3, r3, #5
 8001b68:	2164      	movs	r1, #100	@ 0x64
 8001b6a:	fb01 f303 	mul.w	r3, r1, r3
 8001b6e:	1ad3      	subs	r3, r2, r3
 8001b70:	2b00      	cmp	r3, #0
 8001b72:	d105      	bne.n	8001b80 <MCP2515_WaitForMode+0x5c>
            printf("Waiting for mode 0x%02X, current: 0x%02X (check #%lu)\r\n", 
 8001b74:	79f9      	ldrb	r1, [r7, #7]
 8001b76:	7bfa      	ldrb	r2, [r7, #15]
 8001b78:	697b      	ldr	r3, [r7, #20]
 8001b7a:	480d      	ldr	r0, [pc, #52]	@ (8001bb0 <MCP2515_WaitForMode+0x8c>)
 8001b7c:	f006 fbde 	bl	800833c <iprintf>
                   mode, current_mode, check_count);
        }
        
        osDelay(1);
 8001b80:	2001      	movs	r0, #1
 8001b82:	f003 fcb9 	bl	80054f8 <osDelay>
    while ((HAL_GetTick() - start_time) < timeout) {
 8001b86:	f001 fa1f 	bl	8002fc8 <HAL_GetTick>
 8001b8a:	4602      	mov	r2, r0
 8001b8c:	693b      	ldr	r3, [r7, #16]
 8001b8e:	1ad3      	subs	r3, r2, r3
 8001b90:	683a      	ldr	r2, [r7, #0]
 8001b92:	429a      	cmp	r2, r3
 8001b94:	d8d2      	bhi.n	8001b3c <MCP2515_WaitForMode+0x18>
    }
    
    printf("Mode switch timeout after %lu checks\r\n", check_count);
 8001b96:	6979      	ldr	r1, [r7, #20]
 8001b98:	4806      	ldr	r0, [pc, #24]	@ (8001bb4 <MCP2515_WaitForMode+0x90>)
 8001b9a:	f006 fbcf 	bl	800833c <iprintf>
    return MCP2515_TIMEOUT;
 8001b9e:	2302      	movs	r3, #2
}
 8001ba0:	4618      	mov	r0, r3
 8001ba2:	3718      	adds	r7, #24
 8001ba4:	46bd      	mov	sp, r7
 8001ba6:	bd80      	pop	{r7, pc}
 8001ba8:	0800a2a8 	.word	0x0800a2a8
 8001bac:	51eb851f 	.word	0x51eb851f
 8001bb0:	0800a2d4 	.word	0x0800a2d4
 8001bb4:	0800a30c 	.word	0x0800a30c

08001bb8 <MCP2515_GetTxBuffer>:
  * @brief  获取空闲的发送缓冲区
  * @param  None
  * @retval 缓冲区编号 (0-2), 0xFF表示无空闲缓冲区
  */
static uint8_t MCP2515_GetTxBuffer(void)
{
 8001bb8:	b580      	push	{r7, lr}
 8001bba:	b082      	sub	sp, #8
 8001bbc:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 8001bbe:	f7ff fe31 	bl	8001824 <MCP2515_GetStatus>
 8001bc2:	4603      	mov	r3, r0
 8001bc4:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) return 0;  // TXB0空闲
 8001bc6:	79fb      	ldrb	r3, [r7, #7]
 8001bc8:	f003 0304 	and.w	r3, r3, #4
 8001bcc:	2b00      	cmp	r3, #0
 8001bce:	d101      	bne.n	8001bd4 <MCP2515_GetTxBuffer+0x1c>
 8001bd0:	2300      	movs	r3, #0
 8001bd2:	e00e      	b.n	8001bf2 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x10)) return 1;  // TXB1空闲
 8001bd4:	79fb      	ldrb	r3, [r7, #7]
 8001bd6:	f003 0310 	and.w	r3, r3, #16
 8001bda:	2b00      	cmp	r3, #0
 8001bdc:	d101      	bne.n	8001be2 <MCP2515_GetTxBuffer+0x2a>
 8001bde:	2301      	movs	r3, #1
 8001be0:	e007      	b.n	8001bf2 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x40)) return 2;  // TXB2空闲
 8001be2:	79fb      	ldrb	r3, [r7, #7]
 8001be4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d101      	bne.n	8001bf0 <MCP2515_GetTxBuffer+0x38>
 8001bec:	2302      	movs	r3, #2
 8001bee:	e000      	b.n	8001bf2 <MCP2515_GetTxBuffer+0x3a>
    
    return 0xFF;  // 无空闲缓冲区
 8001bf0:	23ff      	movs	r3, #255	@ 0xff
}
 8001bf2:	4618      	mov	r0, r3
 8001bf4:	3708      	adds	r7, #8
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bd80      	pop	{r7, pc}

08001bfa <MCP2515_LoadTxBuffer>:
  * @param  buffer: 缓冲区编号 (0-2)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_LoadTxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001bfa:	b580      	push	{r7, lr}
 8001bfc:	b084      	sub	sp, #16
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	4603      	mov	r3, r0
 8001c02:	6039      	str	r1, [r7, #0]
 8001c04:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x30 + (buffer * 0x10);  // 计算缓冲区基地址
 8001c06:	79fb      	ldrb	r3, [r7, #7]
 8001c08:	3303      	adds	r3, #3
 8001c0a:	b2db      	uxtb	r3, r3
 8001c0c:	011b      	lsls	r3, r3, #4
 8001c0e:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    
    // 准备ID寄存器值
    if (message->ide) {
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	791b      	ldrb	r3, [r3, #4]
 8001c14:	2b00      	cmp	r3, #0
 8001c16:	d01d      	beq.n	8001c54 <MCP2515_LoadTxBuffer+0x5a>
        // 扩展帧
        sidh = (uint8_t)(message->id >> 21);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0d5b      	lsrs	r3, r3, #21
 8001c1e:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)(((message->id >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((message->id >> 16) & 0x03);
 8001c20:	683b      	ldr	r3, [r7, #0]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	0c9b      	lsrs	r3, r3, #18
 8001c26:	b2db      	uxtb	r3, r3
 8001c28:	015b      	lsls	r3, r3, #5
 8001c2a:	b2da      	uxtb	r2, r3
 8001c2c:	683b      	ldr	r3, [r7, #0]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	0c1b      	lsrs	r3, r3, #16
 8001c32:	b2db      	uxtb	r3, r3
 8001c34:	f003 0303 	and.w	r3, r3, #3
 8001c38:	b2db      	uxtb	r3, r3
 8001c3a:	4313      	orrs	r3, r2
 8001c3c:	b2db      	uxtb	r3, r3
 8001c3e:	f043 0308 	orr.w	r3, r3, #8
 8001c42:	73bb      	strb	r3, [r7, #14]
        eid8 = (uint8_t)(message->id >> 8);
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	0a1b      	lsrs	r3, r3, #8
 8001c4a:	737b      	strb	r3, [r7, #13]
        eid0 = (uint8_t)message->id;
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	733b      	strb	r3, [r7, #12]
 8001c52:	e00c      	b.n	8001c6e <MCP2515_LoadTxBuffer+0x74>
    } else {
        // 标准帧
        sidh = (uint8_t)(message->id >> 3);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	08db      	lsrs	r3, r3, #3
 8001c5a:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)((message->id & 0x07) << 5);
 8001c5c:	683b      	ldr	r3, [r7, #0]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	b2db      	uxtb	r3, r3
 8001c62:	015b      	lsls	r3, r3, #5
 8001c64:	73bb      	strb	r3, [r7, #14]
        eid8 = 0;
 8001c66:	2300      	movs	r3, #0
 8001c68:	737b      	strb	r3, [r7, #13]
        eid0 = 0;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	733b      	strb	r3, [r7, #12]
    }
    
    // 准备DLC寄存器值
    dlc = message->dlc & 0x0F;
 8001c6e:	683b      	ldr	r3, [r7, #0]
 8001c70:	799b      	ldrb	r3, [r3, #6]
 8001c72:	f003 030f 	and.w	r3, r3, #15
 8001c76:	72fb      	strb	r3, [r7, #11]
    if (message->rtr) {
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	795b      	ldrb	r3, [r3, #5]
 8001c7c:	2b00      	cmp	r3, #0
 8001c7e:	d003      	beq.n	8001c88 <MCP2515_LoadTxBuffer+0x8e>
        dlc |= 0x40;  // 设置RTR位
 8001c80:	7afb      	ldrb	r3, [r7, #11]
 8001c82:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c86:	72fb      	strb	r3, [r7, #11]
    }
    
    // 写入ID和控制信息
    MCP2515_WriteRegister(base_addr + 1, sidh);  // SIDH
 8001c88:	7a7b      	ldrb	r3, [r7, #9]
 8001c8a:	3301      	adds	r3, #1
 8001c8c:	b2db      	uxtb	r3, r3
 8001c8e:	7bfa      	ldrb	r2, [r7, #15]
 8001c90:	4611      	mov	r1, r2
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7ff fac2 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 2, sidl);  // SIDL
 8001c98:	7a7b      	ldrb	r3, [r7, #9]
 8001c9a:	3302      	adds	r3, #2
 8001c9c:	b2db      	uxtb	r3, r3
 8001c9e:	7bba      	ldrb	r2, [r7, #14]
 8001ca0:	4611      	mov	r1, r2
 8001ca2:	4618      	mov	r0, r3
 8001ca4:	f7ff faba 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 3, eid8);  // EID8
 8001ca8:	7a7b      	ldrb	r3, [r7, #9]
 8001caa:	3303      	adds	r3, #3
 8001cac:	b2db      	uxtb	r3, r3
 8001cae:	7b7a      	ldrb	r2, [r7, #13]
 8001cb0:	4611      	mov	r1, r2
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	f7ff fab2 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 4, eid0);  // EID0
 8001cb8:	7a7b      	ldrb	r3, [r7, #9]
 8001cba:	3304      	adds	r3, #4
 8001cbc:	b2db      	uxtb	r3, r3
 8001cbe:	7b3a      	ldrb	r2, [r7, #12]
 8001cc0:	4611      	mov	r1, r2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f7ff faaa 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 5, dlc);   // DLC
 8001cc8:	7a7b      	ldrb	r3, [r7, #9]
 8001cca:	3305      	adds	r3, #5
 8001ccc:	b2db      	uxtb	r3, r3
 8001cce:	7afa      	ldrb	r2, [r7, #11]
 8001cd0:	4611      	mov	r1, r2
 8001cd2:	4618      	mov	r0, r3
 8001cd4:	f7ff faa2 	bl	800121c <MCP2515_WriteRegister>
    
    // 写入数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001cd8:	2300      	movs	r3, #0
 8001cda:	72bb      	strb	r3, [r7, #10]
 8001cdc:	e00f      	b.n	8001cfe <MCP2515_LoadTxBuffer+0x104>
        MCP2515_WriteRegister(base_addr + 6 + i, message->data[i]);
 8001cde:	7a7a      	ldrb	r2, [r7, #9]
 8001ce0:	7abb      	ldrb	r3, [r7, #10]
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b2db      	uxtb	r3, r3
 8001ce6:	3306      	adds	r3, #6
 8001ce8:	b2d8      	uxtb	r0, r3
 8001cea:	7abb      	ldrb	r3, [r7, #10]
 8001cec:	683a      	ldr	r2, [r7, #0]
 8001cee:	4413      	add	r3, r2
 8001cf0:	79db      	ldrb	r3, [r3, #7]
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7ff fa92 	bl	800121c <MCP2515_WriteRegister>
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001cf8:	7abb      	ldrb	r3, [r7, #10]
 8001cfa:	3301      	adds	r3, #1
 8001cfc:	72bb      	strb	r3, [r7, #10]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	799b      	ldrb	r3, [r3, #6]
 8001d02:	7aba      	ldrb	r2, [r7, #10]
 8001d04:	429a      	cmp	r2, r3
 8001d06:	d202      	bcs.n	8001d0e <MCP2515_LoadTxBuffer+0x114>
 8001d08:	7abb      	ldrb	r3, [r7, #10]
 8001d0a:	2b07      	cmp	r3, #7
 8001d0c:	d9e7      	bls.n	8001cde <MCP2515_LoadTxBuffer+0xe4>
    }
}
 8001d0e:	bf00      	nop
 8001d10:	3710      	adds	r7, #16
 8001d12:	46bd      	mov	sp, r7
 8001d14:	bd80      	pop	{r7, pc}

08001d16 <MCP2515_ReadRxBuffer>:
  * @param  buffer: 缓冲区编号 (0-1)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_ReadRxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001d16:	b590      	push	{r4, r7, lr}
 8001d18:	b085      	sub	sp, #20
 8001d1a:	af00      	add	r7, sp, #0
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	6039      	str	r1, [r7, #0]
 8001d20:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x60 + (buffer * 0x10);  // 计算缓冲区基地址
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	3306      	adds	r3, #6
 8001d26:	b2db      	uxtb	r3, r3
 8001d28:	011b      	lsls	r3, r3, #4
 8001d2a:	73bb      	strb	r3, [r7, #14]
    uint8_t i;
    
    // 读取ID和控制信息
    sidh = MCP2515_ReadRegister(base_addr + 1);  // SIDH
 8001d2c:	7bbb      	ldrb	r3, [r7, #14]
 8001d2e:	3301      	adds	r3, #1
 8001d30:	b2db      	uxtb	r3, r3
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7ff fa58 	bl	80011e8 <MCP2515_ReadRegister>
 8001d38:	4603      	mov	r3, r0
 8001d3a:	737b      	strb	r3, [r7, #13]
    sidl = MCP2515_ReadRegister(base_addr + 2);  // SIDL
 8001d3c:	7bbb      	ldrb	r3, [r7, #14]
 8001d3e:	3302      	adds	r3, #2
 8001d40:	b2db      	uxtb	r3, r3
 8001d42:	4618      	mov	r0, r3
 8001d44:	f7ff fa50 	bl	80011e8 <MCP2515_ReadRegister>
 8001d48:	4603      	mov	r3, r0
 8001d4a:	733b      	strb	r3, [r7, #12]
    eid8 = MCP2515_ReadRegister(base_addr + 3);  // EID8
 8001d4c:	7bbb      	ldrb	r3, [r7, #14]
 8001d4e:	3303      	adds	r3, #3
 8001d50:	b2db      	uxtb	r3, r3
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7ff fa48 	bl	80011e8 <MCP2515_ReadRegister>
 8001d58:	4603      	mov	r3, r0
 8001d5a:	72fb      	strb	r3, [r7, #11]
    eid0 = MCP2515_ReadRegister(base_addr + 4);  // EID0
 8001d5c:	7bbb      	ldrb	r3, [r7, #14]
 8001d5e:	3304      	adds	r3, #4
 8001d60:	b2db      	uxtb	r3, r3
 8001d62:	4618      	mov	r0, r3
 8001d64:	f7ff fa40 	bl	80011e8 <MCP2515_ReadRegister>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	72bb      	strb	r3, [r7, #10]
    dlc = MCP2515_ReadRegister(base_addr + 5);   // DLC
 8001d6c:	7bbb      	ldrb	r3, [r7, #14]
 8001d6e:	3305      	adds	r3, #5
 8001d70:	b2db      	uxtb	r3, r3
 8001d72:	4618      	mov	r0, r3
 8001d74:	f7ff fa38 	bl	80011e8 <MCP2515_ReadRegister>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	727b      	strb	r3, [r7, #9]
    
    // 解析ID
    if (sidl & 0x08) {
 8001d7c:	7b3b      	ldrb	r3, [r7, #12]
 8001d7e:	f003 0308 	and.w	r3, r3, #8
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d016      	beq.n	8001db4 <MCP2515_ReadRxBuffer+0x9e>
        // 扩展帧
        message->ide = 1;
 8001d86:	683b      	ldr	r3, [r7, #0]
 8001d88:	2201      	movs	r2, #1
 8001d8a:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 21) | 
 8001d8c:	7b7b      	ldrb	r3, [r7, #13]
 8001d8e:	055a      	lsls	r2, r3, #21
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001d90:	7b3b      	ldrb	r3, [r7, #12]
 8001d92:	035b      	lsls	r3, r3, #13
 8001d94:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
        message->id = ((uint32_t)sidh << 21) | 
 8001d98:	431a      	orrs	r2, r3
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001d9a:	7b3b      	ldrb	r3, [r7, #12]
 8001d9c:	041b      	lsls	r3, r3, #16
 8001d9e:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001da2:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001da4:	7afb      	ldrb	r3, [r7, #11]
 8001da6:	021b      	lsls	r3, r3, #8
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001da8:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001daa:	7abb      	ldrb	r3, [r7, #10]
 8001dac:	431a      	orrs	r2, r3
        message->id = ((uint32_t)sidh << 21) | 
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	e00a      	b.n	8001dca <MCP2515_ReadRxBuffer+0xb4>
                      eid0;
    } else {
        // 标准帧
        message->ide = 0;
 8001db4:	683b      	ldr	r3, [r7, #0]
 8001db6:	2200      	movs	r2, #0
 8001db8:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 3) | ((sidl & 0xE0) >> 5);
 8001dba:	7b7b      	ldrb	r3, [r7, #13]
 8001dbc:	00db      	lsls	r3, r3, #3
 8001dbe:	7b3a      	ldrb	r2, [r7, #12]
 8001dc0:	0952      	lsrs	r2, r2, #5
 8001dc2:	b2d2      	uxtb	r2, r2
 8001dc4:	431a      	orrs	r2, r3
 8001dc6:	683b      	ldr	r3, [r7, #0]
 8001dc8:	601a      	str	r2, [r3, #0]
    }
    
    // 解析控制信息
    message->rtr = (dlc & 0x40) ? 1 : 0;
 8001dca:	7a7b      	ldrb	r3, [r7, #9]
 8001dcc:	119b      	asrs	r3, r3, #6
 8001dce:	b2db      	uxtb	r3, r3
 8001dd0:	f003 0301 	and.w	r3, r3, #1
 8001dd4:	b2da      	uxtb	r2, r3
 8001dd6:	683b      	ldr	r3, [r7, #0]
 8001dd8:	715a      	strb	r2, [r3, #5]
    message->dlc = dlc & 0x0F;
 8001dda:	7a7b      	ldrb	r3, [r7, #9]
 8001ddc:	f003 030f 	and.w	r3, r3, #15
 8001de0:	b2da      	uxtb	r2, r3
 8001de2:	683b      	ldr	r3, [r7, #0]
 8001de4:	719a      	strb	r2, [r3, #6]
    
    // 读取数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001de6:	2300      	movs	r3, #0
 8001de8:	73fb      	strb	r3, [r7, #15]
 8001dea:	e011      	b.n	8001e10 <MCP2515_ReadRxBuffer+0xfa>
        message->data[i] = MCP2515_ReadRegister(base_addr + 6 + i);
 8001dec:	7bba      	ldrb	r2, [r7, #14]
 8001dee:	7bfb      	ldrb	r3, [r7, #15]
 8001df0:	4413      	add	r3, r2
 8001df2:	b2db      	uxtb	r3, r3
 8001df4:	3306      	adds	r3, #6
 8001df6:	b2db      	uxtb	r3, r3
 8001df8:	7bfc      	ldrb	r4, [r7, #15]
 8001dfa:	4618      	mov	r0, r3
 8001dfc:	f7ff f9f4 	bl	80011e8 <MCP2515_ReadRegister>
 8001e00:	4603      	mov	r3, r0
 8001e02:	461a      	mov	r2, r3
 8001e04:	683b      	ldr	r3, [r7, #0]
 8001e06:	4423      	add	r3, r4
 8001e08:	71da      	strb	r2, [r3, #7]
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001e0a:	7bfb      	ldrb	r3, [r7, #15]
 8001e0c:	3301      	adds	r3, #1
 8001e0e:	73fb      	strb	r3, [r7, #15]
 8001e10:	683b      	ldr	r3, [r7, #0]
 8001e12:	799b      	ldrb	r3, [r3, #6]
 8001e14:	7bfa      	ldrb	r2, [r7, #15]
 8001e16:	429a      	cmp	r2, r3
 8001e18:	d20b      	bcs.n	8001e32 <MCP2515_ReadRxBuffer+0x11c>
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	2b07      	cmp	r3, #7
 8001e1e:	d9e5      	bls.n	8001dec <MCP2515_ReadRxBuffer+0xd6>
    }
    
    // 清空剩余数据字节
    for (; i < 8; i++) {
 8001e20:	e007      	b.n	8001e32 <MCP2515_ReadRxBuffer+0x11c>
        message->data[i] = 0;
 8001e22:	7bfb      	ldrb	r3, [r7, #15]
 8001e24:	683a      	ldr	r2, [r7, #0]
 8001e26:	4413      	add	r3, r2
 8001e28:	2200      	movs	r2, #0
 8001e2a:	71da      	strb	r2, [r3, #7]
    for (; i < 8; i++) {
 8001e2c:	7bfb      	ldrb	r3, [r7, #15]
 8001e2e:	3301      	adds	r3, #1
 8001e30:	73fb      	strb	r3, [r7, #15]
 8001e32:	7bfb      	ldrb	r3, [r7, #15]
 8001e34:	2b07      	cmp	r3, #7
 8001e36:	d9f4      	bls.n	8001e22 <MCP2515_ReadRxBuffer+0x10c>
    }
}
 8001e38:	bf00      	nop
 8001e3a:	bf00      	nop
 8001e3c:	3714      	adds	r7, #20
 8001e3e:	46bd      	mov	sp, r7
 8001e40:	bd90      	pop	{r4, r7, pc}

08001e42 <MCP2515_GetErrorCounters>:
  * @param  tec: 发送错误计数器指针
  * @param  rec: 接收错误计数器指针
  * @retval None
  */
void MCP2515_GetErrorCounters(uint8_t *tec, uint8_t *rec)
{
 8001e42:	b580      	push	{r7, lr}
 8001e44:	b082      	sub	sp, #8
 8001e46:	af00      	add	r7, sp, #0
 8001e48:	6078      	str	r0, [r7, #4]
 8001e4a:	6039      	str	r1, [r7, #0]
    *tec = MCP2515_ReadRegister(MCP2515_TEC);
 8001e4c:	201c      	movs	r0, #28
 8001e4e:	f7ff f9cb 	bl	80011e8 <MCP2515_ReadRegister>
 8001e52:	4603      	mov	r3, r0
 8001e54:	461a      	mov	r2, r3
 8001e56:	687b      	ldr	r3, [r7, #4]
 8001e58:	701a      	strb	r2, [r3, #0]
    *rec = MCP2515_ReadRegister(MCP2515_REC);
 8001e5a:	201d      	movs	r0, #29
 8001e5c:	f7ff f9c4 	bl	80011e8 <MCP2515_ReadRegister>
 8001e60:	4603      	mov	r3, r0
 8001e62:	461a      	mov	r2, r3
 8001e64:	683b      	ldr	r3, [r7, #0]
 8001e66:	701a      	strb	r2, [r3, #0]
}
 8001e68:	bf00      	nop
 8001e6a:	3708      	adds	r7, #8
 8001e6c:	46bd      	mov	sp, r7
 8001e6e:	bd80      	pop	{r7, pc}

08001e70 <MCP2515_DiagnoseErrors>:
  * @brief  详细的错误状态诊断
  * @param  None
  * @retval None
  */
void MCP2515_DiagnoseErrors(void)
{
 8001e70:	b580      	push	{r7, lr}
 8001e72:	b082      	sub	sp, #8
 8001e74:	af00      	add	r7, sp, #0
    uint8_t canintf, eflg, tec, rec;
    
    printf("\r\n=== MCP2515 Error Diagnosis ===\r\n");
 8001e76:	4869      	ldr	r0, [pc, #420]	@ (800201c <MCP2515_DiagnoseErrors+0x1ac>)
 8001e78:	f006 fac8 	bl	800840c <puts>
    
    // Read status registers
    canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001e7c:	202c      	movs	r0, #44	@ 0x2c
 8001e7e:	f7ff f9b3 	bl	80011e8 <MCP2515_ReadRegister>
 8001e82:	4603      	mov	r3, r0
 8001e84:	71fb      	strb	r3, [r7, #7]
    eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001e86:	202d      	movs	r0, #45	@ 0x2d
 8001e88:	f7ff f9ae 	bl	80011e8 <MCP2515_ReadRegister>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	71bb      	strb	r3, [r7, #6]
    MCP2515_GetErrorCounters(&tec, &rec);
 8001e90:	1d3a      	adds	r2, r7, #4
 8001e92:	1d7b      	adds	r3, r7, #5
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7ff ffd3 	bl	8001e42 <MCP2515_GetErrorCounters>
    
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001e9c:	79fb      	ldrb	r3, [r7, #7]
 8001e9e:	4619      	mov	r1, r3
 8001ea0:	485f      	ldr	r0, [pc, #380]	@ (8002020 <MCP2515_DiagnoseErrors+0x1b0>)
 8001ea2:	f006 fa4b 	bl	800833c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001ea6:	79bb      	ldrb	r3, [r7, #6]
 8001ea8:	4619      	mov	r1, r3
 8001eaa:	485e      	ldr	r0, [pc, #376]	@ (8002024 <MCP2515_DiagnoseErrors+0x1b4>)
 8001eac:	f006 fa46 	bl	800833c <iprintf>
    printf("Transmit Error Counter (TEC): %d\r\n", tec);
 8001eb0:	797b      	ldrb	r3, [r7, #5]
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	485c      	ldr	r0, [pc, #368]	@ (8002028 <MCP2515_DiagnoseErrors+0x1b8>)
 8001eb6:	f006 fa41 	bl	800833c <iprintf>
    printf("Receive Error Counter (REC): %d\r\n", rec);
 8001eba:	793b      	ldrb	r3, [r7, #4]
 8001ebc:	4619      	mov	r1, r3
 8001ebe:	485b      	ldr	r0, [pc, #364]	@ (800202c <MCP2515_DiagnoseErrors+0x1bc>)
 8001ec0:	f006 fa3c 	bl	800833c <iprintf>
    
    // Analyze CANINTF
    printf("\r\n--- CANINTF Analysis ---\r\n");
 8001ec4:	485a      	ldr	r0, [pc, #360]	@ (8002030 <MCP2515_DiagnoseErrors+0x1c0>)
 8001ec6:	f006 faa1 	bl	800840c <puts>
    if (canintf & 0x80) printf("WARNING: MERRF - Message Error Interrupt\r\n");
 8001eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ece:	2b00      	cmp	r3, #0
 8001ed0:	da02      	bge.n	8001ed8 <MCP2515_DiagnoseErrors+0x68>
 8001ed2:	4858      	ldr	r0, [pc, #352]	@ (8002034 <MCP2515_DiagnoseErrors+0x1c4>)
 8001ed4:	f006 fa9a 	bl	800840c <puts>
    if (canintf & 0x40) printf("INFO: WAKIF - Wake-up Interrupt\r\n");
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d002      	beq.n	8001ee8 <MCP2515_DiagnoseErrors+0x78>
 8001ee2:	4855      	ldr	r0, [pc, #340]	@ (8002038 <MCP2515_DiagnoseErrors+0x1c8>)
 8001ee4:	f006 fa92 	bl	800840c <puts>
    if (canintf & 0x20) printf("WARNING: ERRIF - Error Interrupt\r\n");
 8001ee8:	79fb      	ldrb	r3, [r7, #7]
 8001eea:	f003 0320 	and.w	r3, r3, #32
 8001eee:	2b00      	cmp	r3, #0
 8001ef0:	d002      	beq.n	8001ef8 <MCP2515_DiagnoseErrors+0x88>
 8001ef2:	4852      	ldr	r0, [pc, #328]	@ (800203c <MCP2515_DiagnoseErrors+0x1cc>)
 8001ef4:	f006 fa8a 	bl	800840c <puts>
    if (canintf & 0x10) printf("OK: TX2IF - Transmit Buffer 2 Interrupt\r\n");
 8001ef8:	79fb      	ldrb	r3, [r7, #7]
 8001efa:	f003 0310 	and.w	r3, r3, #16
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d002      	beq.n	8001f08 <MCP2515_DiagnoseErrors+0x98>
 8001f02:	484f      	ldr	r0, [pc, #316]	@ (8002040 <MCP2515_DiagnoseErrors+0x1d0>)
 8001f04:	f006 fa82 	bl	800840c <puts>
    if (canintf & 0x08) printf("OK: TX1IF - Transmit Buffer 1 Interrupt\r\n");
 8001f08:	79fb      	ldrb	r3, [r7, #7]
 8001f0a:	f003 0308 	and.w	r3, r3, #8
 8001f0e:	2b00      	cmp	r3, #0
 8001f10:	d002      	beq.n	8001f18 <MCP2515_DiagnoseErrors+0xa8>
 8001f12:	484c      	ldr	r0, [pc, #304]	@ (8002044 <MCP2515_DiagnoseErrors+0x1d4>)
 8001f14:	f006 fa7a 	bl	800840c <puts>
    if (canintf & 0x04) printf("OK: TX0IF - Transmit Buffer 0 Interrupt\r\n");
 8001f18:	79fb      	ldrb	r3, [r7, #7]
 8001f1a:	f003 0304 	and.w	r3, r3, #4
 8001f1e:	2b00      	cmp	r3, #0
 8001f20:	d002      	beq.n	8001f28 <MCP2515_DiagnoseErrors+0xb8>
 8001f22:	4849      	ldr	r0, [pc, #292]	@ (8002048 <MCP2515_DiagnoseErrors+0x1d8>)
 8001f24:	f006 fa72 	bl	800840c <puts>
    if (canintf & 0x02) printf("INFO: RX1IF - Receive Buffer 1 Interrupt\r\n");
 8001f28:	79fb      	ldrb	r3, [r7, #7]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d002      	beq.n	8001f38 <MCP2515_DiagnoseErrors+0xc8>
 8001f32:	4846      	ldr	r0, [pc, #280]	@ (800204c <MCP2515_DiagnoseErrors+0x1dc>)
 8001f34:	f006 fa6a 	bl	800840c <puts>
    if (canintf & 0x01) printf("INFO: RX0IF - Receive Buffer 0 Interrupt\r\n");
 8001f38:	79fb      	ldrb	r3, [r7, #7]
 8001f3a:	f003 0301 	and.w	r3, r3, #1
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d002      	beq.n	8001f48 <MCP2515_DiagnoseErrors+0xd8>
 8001f42:	4843      	ldr	r0, [pc, #268]	@ (8002050 <MCP2515_DiagnoseErrors+0x1e0>)
 8001f44:	f006 fa62 	bl	800840c <puts>
    
    // Analyze EFLG
    printf("\r\n--- EFLG Analysis ---\r\n");
 8001f48:	4842      	ldr	r0, [pc, #264]	@ (8002054 <MCP2515_DiagnoseErrors+0x1e4>)
 8001f4a:	f006 fa5f 	bl	800840c <puts>
    if (eflg & 0x80) printf("ERROR: RX1OVR - Receive Buffer 1 Overflow\r\n");
 8001f4e:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f52:	2b00      	cmp	r3, #0
 8001f54:	da02      	bge.n	8001f5c <MCP2515_DiagnoseErrors+0xec>
 8001f56:	4840      	ldr	r0, [pc, #256]	@ (8002058 <MCP2515_DiagnoseErrors+0x1e8>)
 8001f58:	f006 fa58 	bl	800840c <puts>
    if (eflg & 0x40) printf("ERROR: RX0OVR - Receive Buffer 0 Overflow\r\n");
 8001f5c:	79bb      	ldrb	r3, [r7, #6]
 8001f5e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d002      	beq.n	8001f6c <MCP2515_DiagnoseErrors+0xfc>
 8001f66:	483d      	ldr	r0, [pc, #244]	@ (800205c <MCP2515_DiagnoseErrors+0x1ec>)
 8001f68:	f006 fa50 	bl	800840c <puts>
    if (eflg & 0x20) printf("ERROR: TXBO - Bus-Off State\r\n");
 8001f6c:	79bb      	ldrb	r3, [r7, #6]
 8001f6e:	f003 0320 	and.w	r3, r3, #32
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d002      	beq.n	8001f7c <MCP2515_DiagnoseErrors+0x10c>
 8001f76:	483a      	ldr	r0, [pc, #232]	@ (8002060 <MCP2515_DiagnoseErrors+0x1f0>)
 8001f78:	f006 fa48 	bl	800840c <puts>
    if (eflg & 0x10) printf("WARNING: TXEP - Transmit Error Passive\r\n");
 8001f7c:	79bb      	ldrb	r3, [r7, #6]
 8001f7e:	f003 0310 	and.w	r3, r3, #16
 8001f82:	2b00      	cmp	r3, #0
 8001f84:	d002      	beq.n	8001f8c <MCP2515_DiagnoseErrors+0x11c>
 8001f86:	4837      	ldr	r0, [pc, #220]	@ (8002064 <MCP2515_DiagnoseErrors+0x1f4>)
 8001f88:	f006 fa40 	bl	800840c <puts>
    if (eflg & 0x08) printf("WARNING: RXEP - Receive Error Passive\r\n");
 8001f8c:	79bb      	ldrb	r3, [r7, #6]
 8001f8e:	f003 0308 	and.w	r3, r3, #8
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d002      	beq.n	8001f9c <MCP2515_DiagnoseErrors+0x12c>
 8001f96:	4834      	ldr	r0, [pc, #208]	@ (8002068 <MCP2515_DiagnoseErrors+0x1f8>)
 8001f98:	f006 fa38 	bl	800840c <puts>
    if (eflg & 0x04) printf("WARNING: TXWAR - Transmit Error Warning\r\n");
 8001f9c:	79bb      	ldrb	r3, [r7, #6]
 8001f9e:	f003 0304 	and.w	r3, r3, #4
 8001fa2:	2b00      	cmp	r3, #0
 8001fa4:	d002      	beq.n	8001fac <MCP2515_DiagnoseErrors+0x13c>
 8001fa6:	4831      	ldr	r0, [pc, #196]	@ (800206c <MCP2515_DiagnoseErrors+0x1fc>)
 8001fa8:	f006 fa30 	bl	800840c <puts>
    if (eflg & 0x02) printf("WARNING: RXWAR - Receive Error Warning\r\n");
 8001fac:	79bb      	ldrb	r3, [r7, #6]
 8001fae:	f003 0302 	and.w	r3, r3, #2
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	d002      	beq.n	8001fbc <MCP2515_DiagnoseErrors+0x14c>
 8001fb6:	482e      	ldr	r0, [pc, #184]	@ (8002070 <MCP2515_DiagnoseErrors+0x200>)
 8001fb8:	f006 fa28 	bl	800840c <puts>
    if (eflg & 0x01) printf("WARNING: EWARN - Error Warning\r\n");
 8001fbc:	79bb      	ldrb	r3, [r7, #6]
 8001fbe:	f003 0301 	and.w	r3, r3, #1
 8001fc2:	2b00      	cmp	r3, #0
 8001fc4:	d002      	beq.n	8001fcc <MCP2515_DiagnoseErrors+0x15c>
 8001fc6:	482b      	ldr	r0, [pc, #172]	@ (8002074 <MCP2515_DiagnoseErrors+0x204>)
 8001fc8:	f006 fa20 	bl	800840c <puts>
    
    // Error level assessment
    printf("\r\n--- Error Level Assessment ---\r\n");
 8001fcc:	482a      	ldr	r0, [pc, #168]	@ (8002078 <MCP2515_DiagnoseErrors+0x208>)
 8001fce:	f006 fa1d 	bl	800840c <puts>
    if (eflg & 0x20) {
 8001fd2:	79bb      	ldrb	r3, [r7, #6]
 8001fd4:	f003 0320 	and.w	r3, r3, #32
 8001fd8:	2b00      	cmp	r3, #0
 8001fda:	d003      	beq.n	8001fe4 <MCP2515_DiagnoseErrors+0x174>
        printf("CRITICAL: Bus-Off state, requires re-initialization\r\n");
 8001fdc:	4827      	ldr	r0, [pc, #156]	@ (800207c <MCP2515_DiagnoseErrors+0x20c>)
 8001fde:	f006 fa15 	bl	800840c <puts>
 8001fe2:	e013      	b.n	800200c <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x10) {
 8001fe4:	79bb      	ldrb	r3, [r7, #6]
 8001fe6:	f003 0310 	and.w	r3, r3, #16
 8001fea:	2b00      	cmp	r3, #0
 8001fec:	d006      	beq.n	8001ffc <MCP2515_DiagnoseErrors+0x18c>
        printf("WARNING: Transmit Error Passive, TEC >= 128\r\n");
 8001fee:	4824      	ldr	r0, [pc, #144]	@ (8002080 <MCP2515_DiagnoseErrors+0x210>)
 8001ff0:	f006 fa0c 	bl	800840c <puts>
        printf("   Suggestion: Check bus connection and termination resistors\r\n");
 8001ff4:	4823      	ldr	r0, [pc, #140]	@ (8002084 <MCP2515_DiagnoseErrors+0x214>)
 8001ff6:	f006 fa09 	bl	800840c <puts>
 8001ffa:	e007      	b.n	800200c <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x04) {
 8001ffc:	79bb      	ldrb	r3, [r7, #6]
 8001ffe:	f003 0304 	and.w	r3, r3, #4
 8002002:	2b00      	cmp	r3, #0
 8002004:	d002      	beq.n	800200c <MCP2515_DiagnoseErrors+0x19c>
        printf("INFO: Transmit Error Warning, TEC >= 96\r\n");
 8002006:	4820      	ldr	r0, [pc, #128]	@ (8002088 <MCP2515_DiagnoseErrors+0x218>)
 8002008:	f006 fa00 	bl	800840c <puts>
    }
    
    printf("===============================\r\n");
 800200c:	481f      	ldr	r0, [pc, #124]	@ (800208c <MCP2515_DiagnoseErrors+0x21c>)
 800200e:	f006 f9fd 	bl	800840c <puts>
}
 8002012:	bf00      	nop
 8002014:	3708      	adds	r7, #8
 8002016:	46bd      	mov	sp, r7
 8002018:	bd80      	pop	{r7, pc}
 800201a:	bf00      	nop
 800201c:	0800a378 	.word	0x0800a378
 8002020:	0800a234 	.word	0x0800a234
 8002024:	0800a248 	.word	0x0800a248
 8002028:	0800a39c 	.word	0x0800a39c
 800202c:	0800a3c0 	.word	0x0800a3c0
 8002030:	0800a3e4 	.word	0x0800a3e4
 8002034:	0800a400 	.word	0x0800a400
 8002038:	0800a42c 	.word	0x0800a42c
 800203c:	0800a450 	.word	0x0800a450
 8002040:	0800a474 	.word	0x0800a474
 8002044:	0800a4a0 	.word	0x0800a4a0
 8002048:	0800a4cc 	.word	0x0800a4cc
 800204c:	0800a4f8 	.word	0x0800a4f8
 8002050:	0800a524 	.word	0x0800a524
 8002054:	0800a550 	.word	0x0800a550
 8002058:	0800a56c 	.word	0x0800a56c
 800205c:	0800a598 	.word	0x0800a598
 8002060:	0800a5c4 	.word	0x0800a5c4
 8002064:	0800a5e4 	.word	0x0800a5e4
 8002068:	0800a60c 	.word	0x0800a60c
 800206c:	0800a634 	.word	0x0800a634
 8002070:	0800a660 	.word	0x0800a660
 8002074:	0800a688 	.word	0x0800a688
 8002078:	0800a6a8 	.word	0x0800a6a8
 800207c:	0800a6cc 	.word	0x0800a6cc
 8002080:	0800a704 	.word	0x0800a704
 8002084:	0800a734 	.word	0x0800a734
 8002088:	0800a774 	.word	0x0800a774
 800208c:	0800a7a0 	.word	0x0800a7a0

08002090 <MCP2515_ClearAllErrors>:
  * @brief  清除所有错误标志和中断标志
  * @param  None
  * @retval None
  */
void MCP2515_ClearAllErrors(void)
{
 8002090:	b580      	push	{r7, lr}
 8002092:	af00      	add	r7, sp, #0
    printf("Clearing error flags...\r\n");
 8002094:	4805      	ldr	r0, [pc, #20]	@ (80020ac <MCP2515_ClearAllErrors+0x1c>)
 8002096:	f006 f9b9 	bl	800840c <puts>
    
    // Clear interrupt flags
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 800209a:	2100      	movs	r1, #0
 800209c:	202c      	movs	r0, #44	@ 0x2c
 800209e:	f7ff f8bd 	bl	800121c <MCP2515_WriteRegister>
    
    printf("Error flags cleared\r\n");
 80020a2:	4803      	ldr	r0, [pc, #12]	@ (80020b0 <MCP2515_ClearAllErrors+0x20>)
 80020a4:	f006 f9b2 	bl	800840c <puts>
}
 80020a8:	bf00      	nop
 80020aa:	bd80      	pop	{r7, pc}
 80020ac:	0800a7c4 	.word	0x0800a7c4
 80020b0:	0800a7e0 	.word	0x0800a7e0

080020b4 <MCP2515_LoopbackTest>:
  * @brief  回环模式测试
  * @param  None
  * @retval 测试结果 (MCP2515_OK: 成功, MCP2515_ERROR: 失败)
  */
uint8_t MCP2515_LoopbackTest(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b090      	sub	sp, #64	@ 0x40
 80020b8:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    MCP2515_CANMessage_t recv_msg;
    uint8_t result = MCP2515_ERROR;
 80020ba:	2301      	movs	r3, #1
 80020bc:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
    
    printf("\r\n=== Loopback Mode Test ===\r\n");
 80020c0:	48b2      	ldr	r0, [pc, #712]	@ (800238c <MCP2515_LoopbackTest+0x2d8>)
 80020c2:	f006 f9a3 	bl	800840c <puts>
    
    // Switch to loopback mode
    printf("Switching to loopback mode...\r\n");
 80020c6:	48b2      	ldr	r0, [pc, #712]	@ (8002390 <MCP2515_LoopbackTest+0x2dc>)
 80020c8:	f006 f9a0 	bl	800840c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80020cc:	2040      	movs	r0, #64	@ 0x40
 80020ce:	f7ff f953 	bl	8001378 <MCP2515_SetMode>
 80020d2:	4603      	mov	r3, r0
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	d004      	beq.n	80020e2 <MCP2515_LoopbackTest+0x2e>
        printf("ERROR: Failed to switch to loopback mode\r\n");
 80020d8:	48ae      	ldr	r0, [pc, #696]	@ (8002394 <MCP2515_LoopbackTest+0x2e0>)
 80020da:	f006 f997 	bl	800840c <puts>
        return MCP2515_ERROR;
 80020de:	2301      	movs	r3, #1
 80020e0:	e1fc      	b.n	80024dc <MCP2515_LoopbackTest+0x428>
    }
    
    printf("[OK] Switched to loopback mode\r\n");
 80020e2:	48ad      	ldr	r0, [pc, #692]	@ (8002398 <MCP2515_LoopbackTest+0x2e4>)
 80020e4:	f006 f992 	bl	800840c <puts>
    
    // 验证模式切换和接收缓冲区配置
    uint8_t current_mode = MCP2515_ReadRegister(MCP2515_CANSTAT) & 0xE0;
 80020e8:	200e      	movs	r0, #14
 80020ea:	f7ff f87d 	bl	80011e8 <MCP2515_ReadRegister>
 80020ee:	4603      	mov	r3, r0
 80020f0:	f023 031f 	bic.w	r3, r3, #31
 80020f4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    uint8_t rxb0ctrl = MCP2515_ReadRegister(MCP2515_RXB0CTRL);
 80020f8:	2060      	movs	r0, #96	@ 0x60
 80020fa:	f7ff f875 	bl	80011e8 <MCP2515_ReadRegister>
 80020fe:	4603      	mov	r3, r0
 8002100:	f887 302a 	strb.w	r3, [r7, #42]	@ 0x2a
    uint8_t rxb1ctrl = MCP2515_ReadRegister(MCP2515_RXB1CTRL);
 8002104:	2070      	movs	r0, #112	@ 0x70
 8002106:	f7ff f86f 	bl	80011e8 <MCP2515_ReadRegister>
 800210a:	4603      	mov	r3, r0
 800210c:	f887 3029 	strb.w	r3, [r7, #41]	@ 0x29
    printf("Mode verification: CANSTAT=0x%02X (should be 0x40 for loopback)\r\n", current_mode);
 8002110:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002114:	4619      	mov	r1, r3
 8002116:	48a1      	ldr	r0, [pc, #644]	@ (800239c <MCP2515_LoopbackTest+0x2e8>)
 8002118:	f006 f910 	bl	800833c <iprintf>
    printf("RX buffer config: RXB0CTRL=0x%02X, RXB1CTRL=0x%02X\r\n", rxb0ctrl, rxb1ctrl);
 800211c:	f897 302a 	ldrb.w	r3, [r7, #42]	@ 0x2a
 8002120:	f897 2029 	ldrb.w	r2, [r7, #41]	@ 0x29
 8002124:	4619      	mov	r1, r3
 8002126:	489e      	ldr	r0, [pc, #632]	@ (80023a0 <MCP2515_LoopbackTest+0x2ec>)
 8002128:	f006 f908 	bl	800833c <iprintf>
    
    printf("[INFO] Starting loopback test...\r\n");
 800212c:	489d      	ldr	r0, [pc, #628]	@ (80023a4 <MCP2515_LoopbackTest+0x2f0>)
 800212e:	f006 f96d 	bl	800840c <puts>
    printf("Waiting 100ms for mode stabilization...\r\n");
 8002132:	489d      	ldr	r0, [pc, #628]	@ (80023a8 <MCP2515_LoopbackTest+0x2f4>)
 8002134:	f006 f96a 	bl	800840c <puts>
    osDelay(100);  // Wait for mode switch completion - using osDelay for FreeRTOS compatibility
 8002138:	2064      	movs	r0, #100	@ 0x64
 800213a:	f003 f9dd 	bl	80054f8 <osDelay>
    printf("Wait completed, preparing test message...\r\n");
 800213e:	489b      	ldr	r0, [pc, #620]	@ (80023ac <MCP2515_LoopbackTest+0x2f8>)
 8002140:	f006 f964 	bl	800840c <puts>
    
    // Prepare test message
    printf("Preparing test message structure...\r\n");
 8002144:	489a      	ldr	r0, [pc, #616]	@ (80023b0 <MCP2515_LoopbackTest+0x2fc>)
 8002146:	f006 f961 	bl	800840c <puts>
    test_msg.id = 0x123;
 800214a:	f240 1323 	movw	r3, #291	@ 0x123
 800214e:	617b      	str	r3, [r7, #20]
    test_msg.dlc = 8;
 8002150:	2308      	movs	r3, #8
 8002152:	76bb      	strb	r3, [r7, #26]
    test_msg.rtr = 0;
 8002154:	2300      	movs	r3, #0
 8002156:	767b      	strb	r3, [r7, #25]
    test_msg.ide = 0;
 8002158:	2300      	movs	r3, #0
 800215a:	763b      	strb	r3, [r7, #24]
    printf("Filling test data...\r\n");
 800215c:	4895      	ldr	r0, [pc, #596]	@ (80023b4 <MCP2515_LoopbackTest+0x300>)
 800215e:	f006 f955 	bl	800840c <puts>
    for (int i = 0; i < 8; i++) {
 8002162:	2300      	movs	r3, #0
 8002164:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002166:	e00c      	b.n	8002182 <MCP2515_LoopbackTest+0xce>
        test_msg.data[i] = 0xA0 + i;
 8002168:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800216a:	b2db      	uxtb	r3, r3
 800216c:	3b60      	subs	r3, #96	@ 0x60
 800216e:	b2d9      	uxtb	r1, r3
 8002170:	f107 021b 	add.w	r2, r7, #27
 8002174:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002176:	4413      	add	r3, r2
 8002178:	460a      	mov	r2, r1
 800217a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 800217c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800217e:	3301      	adds	r3, #1
 8002180:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002182:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8002184:	2b07      	cmp	r3, #7
 8002186:	ddef      	ble.n	8002168 <MCP2515_LoopbackTest+0xb4>
    }
    printf("Test message prepared successfully\r\n");
 8002188:	488b      	ldr	r0, [pc, #556]	@ (80023b8 <MCP2515_LoopbackTest+0x304>)
 800218a:	f006 f93f 	bl	800840c <puts>
    
    printf("Sending test message ID:0x%03lX...\r\n", test_msg.id);
 800218e:	697b      	ldr	r3, [r7, #20]
 8002190:	4619      	mov	r1, r3
 8002192:	488a      	ldr	r0, [pc, #552]	@ (80023bc <MCP2515_LoopbackTest+0x308>)
 8002194:	f006 f8d2 	bl	800833c <iprintf>
    printf("Test data: ");
 8002198:	4889      	ldr	r0, [pc, #548]	@ (80023c0 <MCP2515_LoopbackTest+0x30c>)
 800219a:	f006 f8cf 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 800219e:	2300      	movs	r3, #0
 80021a0:	637b      	str	r3, [r7, #52]	@ 0x34
 80021a2:	e00b      	b.n	80021bc <MCP2515_LoopbackTest+0x108>
        printf("0x%02X ", test_msg.data[i]);
 80021a4:	f107 021b 	add.w	r2, r7, #27
 80021a8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021aa:	4413      	add	r3, r2
 80021ac:	781b      	ldrb	r3, [r3, #0]
 80021ae:	4619      	mov	r1, r3
 80021b0:	4884      	ldr	r0, [pc, #528]	@ (80023c4 <MCP2515_LoopbackTest+0x310>)
 80021b2:	f006 f8c3 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80021b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021b8:	3301      	adds	r3, #1
 80021ba:	637b      	str	r3, [r7, #52]	@ 0x34
 80021bc:	7ebb      	ldrb	r3, [r7, #26]
 80021be:	461a      	mov	r2, r3
 80021c0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80021c2:	4293      	cmp	r3, r2
 80021c4:	dbee      	blt.n	80021a4 <MCP2515_LoopbackTest+0xf0>
    }
    printf("\r\n");
 80021c6:	4880      	ldr	r0, [pc, #512]	@ (80023c8 <MCP2515_LoopbackTest+0x314>)
 80021c8:	f006 f920 	bl	800840c <puts>
    
    // Send message
    printf("Calling MCP2515_SendMessage...\r\n");
 80021cc:	487f      	ldr	r0, [pc, #508]	@ (80023cc <MCP2515_LoopbackTest+0x318>)
 80021ce:	f006 f91d 	bl	800840c <puts>
    uint8_t send_result = MCP2515_SendMessage(&test_msg);
 80021d2:	f107 0314 	add.w	r3, r7, #20
 80021d6:	4618      	mov	r0, r3
 80021d8:	f7ff fa4a 	bl	8001670 <MCP2515_SendMessage>
 80021dc:	4603      	mov	r3, r0
 80021de:	f887 3028 	strb.w	r3, [r7, #40]	@ 0x28
    printf("Send result: %d\r\n", send_result);
 80021e2:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021e6:	4619      	mov	r1, r3
 80021e8:	4879      	ldr	r0, [pc, #484]	@ (80023d0 <MCP2515_LoopbackTest+0x31c>)
 80021ea:	f006 f8a7 	bl	800833c <iprintf>
    
    if (send_result == MCP2515_OK) {
 80021ee:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	f040 8143 	bne.w	800247e <MCP2515_LoopbackTest+0x3ca>
        printf("OK: Message sent successfully\r\n");
 80021f8:	4876      	ldr	r0, [pc, #472]	@ (80023d4 <MCP2515_LoopbackTest+0x320>)
 80021fa:	f006 f907 	bl	800840c <puts>
        
        // Wait for a while
        printf("Waiting 50ms for loopback...\r\n");
 80021fe:	4876      	ldr	r0, [pc, #472]	@ (80023d8 <MCP2515_LoopbackTest+0x324>)
 8002200:	f006 f904 	bl	800840c <puts>
        osDelay(50);
 8002204:	2032      	movs	r0, #50	@ 0x32
 8002206:	f003 f977 	bl	80054f8 <osDelay>
        
        // 详细检查MCP2515状态
        printf("Checking MCP2515 status after loopback delay...\r\n");
 800220a:	4874      	ldr	r0, [pc, #464]	@ (80023dc <MCP2515_LoopbackTest+0x328>)
 800220c:	f006 f8fe 	bl	800840c <puts>
        uint8_t canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8002210:	202c      	movs	r0, #44	@ 0x2c
 8002212:	f7fe ffe9 	bl	80011e8 <MCP2515_ReadRegister>
 8002216:	4603      	mov	r3, r0
 8002218:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
        uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 800221c:	200e      	movs	r0, #14
 800221e:	f7fe ffe3 	bl	80011e8 <MCP2515_ReadRegister>
 8002222:	4603      	mov	r3, r0
 8002224:	f887 3026 	strb.w	r3, [r7, #38]	@ 0x26
        uint8_t eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8002228:	202d      	movs	r0, #45	@ 0x2d
 800222a:	f7fe ffdd 	bl	80011e8 <MCP2515_ReadRegister>
 800222e:	4603      	mov	r3, r0
 8002230:	f887 3025 	strb.w	r3, [r7, #37]	@ 0x25
        printf("CANINTF: 0x%02X, CANSTAT: 0x%02X, EFLG: 0x%02X\r\n", canintf, canstat, eflg);
 8002234:	f897 1027 	ldrb.w	r1, [r7, #39]	@ 0x27
 8002238:	f897 2026 	ldrb.w	r2, [r7, #38]	@ 0x26
 800223c:	f897 3025 	ldrb.w	r3, [r7, #37]	@ 0x25
 8002240:	4867      	ldr	r0, [pc, #412]	@ (80023e0 <MCP2515_LoopbackTest+0x32c>)
 8002242:	f006 f87b 	bl	800833c <iprintf>
        
        // 分析CANINTF标志
        if (canintf & 0x01) printf("  RX0IF: Receive Buffer 0 Full\r\n");
 8002246:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800224a:	f003 0301 	and.w	r3, r3, #1
 800224e:	2b00      	cmp	r3, #0
 8002250:	d002      	beq.n	8002258 <MCP2515_LoopbackTest+0x1a4>
 8002252:	4864      	ldr	r0, [pc, #400]	@ (80023e4 <MCP2515_LoopbackTest+0x330>)
 8002254:	f006 f8da 	bl	800840c <puts>
        if (canintf & 0x02) printf("  RX1IF: Receive Buffer 1 Full\r\n");
 8002258:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800225c:	f003 0302 	and.w	r3, r3, #2
 8002260:	2b00      	cmp	r3, #0
 8002262:	d002      	beq.n	800226a <MCP2515_LoopbackTest+0x1b6>
 8002264:	4860      	ldr	r0, [pc, #384]	@ (80023e8 <MCP2515_LoopbackTest+0x334>)
 8002266:	f006 f8d1 	bl	800840c <puts>
        if (canintf & 0x04) printf("  TX0IF: Transmit Buffer 0 Empty\r\n");
 800226a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800226e:	f003 0304 	and.w	r3, r3, #4
 8002272:	2b00      	cmp	r3, #0
 8002274:	d002      	beq.n	800227c <MCP2515_LoopbackTest+0x1c8>
 8002276:	485d      	ldr	r0, [pc, #372]	@ (80023ec <MCP2515_LoopbackTest+0x338>)
 8002278:	f006 f8c8 	bl	800840c <puts>
        if (canintf & 0x08) printf("  TX1IF: Transmit Buffer 1 Empty\r\n");
 800227c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002280:	f003 0308 	and.w	r3, r3, #8
 8002284:	2b00      	cmp	r3, #0
 8002286:	d002      	beq.n	800228e <MCP2515_LoopbackTest+0x1da>
 8002288:	4859      	ldr	r0, [pc, #356]	@ (80023f0 <MCP2515_LoopbackTest+0x33c>)
 800228a:	f006 f8bf 	bl	800840c <puts>
        if (canintf & 0x10) printf("  TX2IF: Transmit Buffer 2 Empty\r\n");
 800228e:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002292:	f003 0310 	and.w	r3, r3, #16
 8002296:	2b00      	cmp	r3, #0
 8002298:	d002      	beq.n	80022a0 <MCP2515_LoopbackTest+0x1ec>
 800229a:	4856      	ldr	r0, [pc, #344]	@ (80023f4 <MCP2515_LoopbackTest+0x340>)
 800229c:	f006 f8b6 	bl	800840c <puts>
        if (canintf & 0x20) printf("  ERRIF: Error Interrupt\r\n");
 80022a0:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022a4:	f003 0320 	and.w	r3, r3, #32
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	d002      	beq.n	80022b2 <MCP2515_LoopbackTest+0x1fe>
 80022ac:	4852      	ldr	r0, [pc, #328]	@ (80023f8 <MCP2515_LoopbackTest+0x344>)
 80022ae:	f006 f8ad 	bl	800840c <puts>
        if (canintf & 0x40) printf("  WAKIF: Wake-up Interrupt\r\n");
 80022b2:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80022b6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d002      	beq.n	80022c4 <MCP2515_LoopbackTest+0x210>
 80022be:	484f      	ldr	r0, [pc, #316]	@ (80023fc <MCP2515_LoopbackTest+0x348>)
 80022c0:	f006 f8a4 	bl	800840c <puts>
        if (canintf & 0x80) printf("  MERRF: Message Error Interrupt\r\n");
 80022c4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	da02      	bge.n	80022d2 <MCP2515_LoopbackTest+0x21e>
 80022cc:	484c      	ldr	r0, [pc, #304]	@ (8002400 <MCP2515_LoopbackTest+0x34c>)
 80022ce:	f006 f89d 	bl	800840c <puts>
        
        // Check if message received
        printf("Checking for received message...\r\n");
 80022d2:	484c      	ldr	r0, [pc, #304]	@ (8002404 <MCP2515_LoopbackTest+0x350>)
 80022d4:	f006 f89a 	bl	800840c <puts>
        uint8_t check_result = MCP2515_CheckReceive();
 80022d8:	f7ff fa54 	bl	8001784 <MCP2515_CheckReceive>
 80022dc:	4603      	mov	r3, r0
 80022de:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
        printf("Check receive result: %d\r\n", check_result);
 80022e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022e6:	4619      	mov	r1, r3
 80022e8:	4847      	ldr	r0, [pc, #284]	@ (8002408 <MCP2515_LoopbackTest+0x354>)
 80022ea:	f006 f827 	bl	800833c <iprintf>
        
        if (check_result == MCP2515_OK) {
 80022ee:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	f040 8094 	bne.w	8002420 <MCP2515_LoopbackTest+0x36c>
            if (MCP2515_ReceiveMessage(&recv_msg) == MCP2515_OK) {
 80022f8:	1d3b      	adds	r3, r7, #4
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fa0e 	bl	800171c <MCP2515_ReceiveMessage>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d13d      	bne.n	8002382 <MCP2515_LoopbackTest+0x2ce>
                printf("OK: Received loopback message ID:0x%03lX\r\n", recv_msg.id);
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	4619      	mov	r1, r3
 800230a:	4840      	ldr	r0, [pc, #256]	@ (800240c <MCP2515_LoopbackTest+0x358>)
 800230c:	f006 f816 	bl	800833c <iprintf>
                
                // Verify data
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8002310:	687a      	ldr	r2, [r7, #4]
 8002312:	697b      	ldr	r3, [r7, #20]
 8002314:	429a      	cmp	r2, r3
 8002316:	d130      	bne.n	800237a <MCP2515_LoopbackTest+0x2c6>
 8002318:	7aba      	ldrb	r2, [r7, #10]
 800231a:	7ebb      	ldrb	r3, [r7, #26]
 800231c:	429a      	cmp	r2, r3
 800231e:	d12c      	bne.n	800237a <MCP2515_LoopbackTest+0x2c6>
                    uint8_t data_match = 1;
 8002320:	2301      	movs	r3, #1
 8002322:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                    for (int i = 0; i < test_msg.dlc; i++) {
 8002326:	2300      	movs	r3, #0
 8002328:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232a:	e012      	b.n	8002352 <MCP2515_LoopbackTest+0x29e>
                        if (recv_msg.data[i] != test_msg.data[i]) {
 800232c:	f107 020b 	add.w	r2, r7, #11
 8002330:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002332:	4413      	add	r3, r2
 8002334:	781a      	ldrb	r2, [r3, #0]
 8002336:	f107 011b 	add.w	r1, r7, #27
 800233a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800233c:	440b      	add	r3, r1
 800233e:	781b      	ldrb	r3, [r3, #0]
 8002340:	429a      	cmp	r2, r3
 8002342:	d003      	beq.n	800234c <MCP2515_LoopbackTest+0x298>
                            data_match = 0;
 8002344:	2300      	movs	r3, #0
 8002346:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
                            break;
 800234a:	e007      	b.n	800235c <MCP2515_LoopbackTest+0x2a8>
                    for (int i = 0; i < test_msg.dlc; i++) {
 800234c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800234e:	3301      	adds	r3, #1
 8002350:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002352:	7ebb      	ldrb	r3, [r7, #26]
 8002354:	461a      	mov	r2, r3
 8002356:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002358:	4293      	cmp	r3, r2
 800235a:	dbe7      	blt.n	800232c <MCP2515_LoopbackTest+0x278>
                        }
                    }
                    
                    if (data_match) {
 800235c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8002360:	2b00      	cmp	r3, #0
 8002362:	d006      	beq.n	8002372 <MCP2515_LoopbackTest+0x2be>
                        printf("[SUCCESS] Loopback test passed! MCP2515 hardware is working\r\n");
 8002364:	482a      	ldr	r0, [pc, #168]	@ (8002410 <MCP2515_LoopbackTest+0x35c>)
 8002366:	f006 f851 	bl	800840c <puts>
                        result = MCP2515_OK;
 800236a:	2300      	movs	r3, #0
 800236c:	f887 303f 	strb.w	r3, [r7, #63]	@ 0x3f
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8002370:	e0a6      	b.n	80024c0 <MCP2515_LoopbackTest+0x40c>
                    } else {
                        printf("[ERROR] Data mismatch\r\n");
 8002372:	4828      	ldr	r0, [pc, #160]	@ (8002414 <MCP2515_LoopbackTest+0x360>)
 8002374:	f006 f84a 	bl	800840c <puts>
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8002378:	e0a2      	b.n	80024c0 <MCP2515_LoopbackTest+0x40c>
                    }
                } else {
                    printf("[ERROR] ID or DLC mismatch\r\n");
 800237a:	4827      	ldr	r0, [pc, #156]	@ (8002418 <MCP2515_LoopbackTest+0x364>)
 800237c:	f006 f846 	bl	800840c <puts>
 8002380:	e09e      	b.n	80024c0 <MCP2515_LoopbackTest+0x40c>
                }
            } else {
                printf("[ERROR] Failed to receive message\r\n");
 8002382:	4826      	ldr	r0, [pc, #152]	@ (800241c <MCP2515_LoopbackTest+0x368>)
 8002384:	f006 f842 	bl	800840c <puts>
 8002388:	e09a      	b.n	80024c0 <MCP2515_LoopbackTest+0x40c>
 800238a:	bf00      	nop
 800238c:	0800a7f8 	.word	0x0800a7f8
 8002390:	0800a818 	.word	0x0800a818
 8002394:	0800a838 	.word	0x0800a838
 8002398:	0800a864 	.word	0x0800a864
 800239c:	0800a884 	.word	0x0800a884
 80023a0:	0800a8c8 	.word	0x0800a8c8
 80023a4:	0800a900 	.word	0x0800a900
 80023a8:	0800a924 	.word	0x0800a924
 80023ac:	0800a950 	.word	0x0800a950
 80023b0:	0800a97c 	.word	0x0800a97c
 80023b4:	0800a9a4 	.word	0x0800a9a4
 80023b8:	0800a9bc 	.word	0x0800a9bc
 80023bc:	0800a9e0 	.word	0x0800a9e0
 80023c0:	0800aa08 	.word	0x0800aa08
 80023c4:	0800aa14 	.word	0x0800aa14
 80023c8:	0800aa1c 	.word	0x0800aa1c
 80023cc:	0800aa20 	.word	0x0800aa20
 80023d0:	0800aa40 	.word	0x0800aa40
 80023d4:	0800aa54 	.word	0x0800aa54
 80023d8:	0800aa74 	.word	0x0800aa74
 80023dc:	0800aa94 	.word	0x0800aa94
 80023e0:	0800aac8 	.word	0x0800aac8
 80023e4:	0800aafc 	.word	0x0800aafc
 80023e8:	0800ab1c 	.word	0x0800ab1c
 80023ec:	0800ab3c 	.word	0x0800ab3c
 80023f0:	0800ab60 	.word	0x0800ab60
 80023f4:	0800ab84 	.word	0x0800ab84
 80023f8:	0800aba8 	.word	0x0800aba8
 80023fc:	0800abc4 	.word	0x0800abc4
 8002400:	0800abe0 	.word	0x0800abe0
 8002404:	0800ac04 	.word	0x0800ac04
 8002408:	0800ac28 	.word	0x0800ac28
 800240c:	0800ac44 	.word	0x0800ac44
 8002410:	0800ac70 	.word	0x0800ac70
 8002414:	0800acb0 	.word	0x0800acb0
 8002418:	0800acc8 	.word	0x0800acc8
 800241c:	0800ace4 	.word	0x0800ace4
            }
        } else {
            printf("[ERROR] No loopback message received\r\n");
 8002420:	4830      	ldr	r0, [pc, #192]	@ (80024e4 <MCP2515_LoopbackTest+0x430>)
 8002422:	f005 fff3 	bl	800840c <puts>
            printf("Detailed analysis:\r\n");
 8002426:	4830      	ldr	r0, [pc, #192]	@ (80024e8 <MCP2515_LoopbackTest+0x434>)
 8002428:	f005 fff0 	bl	800840c <puts>
            printf("   - CANINTF register: 0x%02X\r\n", canintf);
 800242c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002430:	4619      	mov	r1, r3
 8002432:	482e      	ldr	r0, [pc, #184]	@ (80024ec <MCP2515_LoopbackTest+0x438>)
 8002434:	f005 ff82 	bl	800833c <iprintf>
            printf("   - Expected RX0IF(0x01) or RX1IF(0x02) to be set\r\n");
 8002438:	482d      	ldr	r0, [pc, #180]	@ (80024f0 <MCP2515_LoopbackTest+0x43c>)
 800243a:	f005 ffe7 	bl	800840c <puts>
            if (canintf & 0x80) printf("   - MERRF flag indicates message error\r\n");
 800243e:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8002442:	2b00      	cmp	r3, #0
 8002444:	da02      	bge.n	800244c <MCP2515_LoopbackTest+0x398>
 8002446:	482b      	ldr	r0, [pc, #172]	@ (80024f4 <MCP2515_LoopbackTest+0x440>)
 8002448:	f005 ffe0 	bl	800840c <puts>
            if (canintf & 0x20) printf("   - ERRIF flag indicates general error\r\n");
 800244c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8002450:	f003 0320 	and.w	r3, r3, #32
 8002454:	2b00      	cmp	r3, #0
 8002456:	d002      	beq.n	800245e <MCP2515_LoopbackTest+0x3aa>
 8002458:	4827      	ldr	r0, [pc, #156]	@ (80024f8 <MCP2515_LoopbackTest+0x444>)
 800245a:	f005 ffd7 	bl	800840c <puts>
            printf("Possible causes:\r\n");
 800245e:	4827      	ldr	r0, [pc, #156]	@ (80024fc <MCP2515_LoopbackTest+0x448>)
 8002460:	f005 ffd4 	bl	800840c <puts>
            printf("  - MCP2515 not in loopback mode\r\n");
 8002464:	4826      	ldr	r0, [pc, #152]	@ (8002500 <MCP2515_LoopbackTest+0x44c>)
 8002466:	f005 ffd1 	bl	800840c <puts>
            printf("  - Receive buffer configuration issue\r\n");
 800246a:	4826      	ldr	r0, [pc, #152]	@ (8002504 <MCP2515_LoopbackTest+0x450>)
 800246c:	f005 ffce 	bl	800840c <puts>
            printf("  - Message filtering problem\r\n");
 8002470:	4825      	ldr	r0, [pc, #148]	@ (8002508 <MCP2515_LoopbackTest+0x454>)
 8002472:	f005 ffcb 	bl	800840c <puts>
            printf("  - Internal loopback path not working\r\n");
 8002476:	4825      	ldr	r0, [pc, #148]	@ (800250c <MCP2515_LoopbackTest+0x458>)
 8002478:	f005 ffc8 	bl	800840c <puts>
 800247c:	e020      	b.n	80024c0 <MCP2515_LoopbackTest+0x40c>
        }
    } else {
        printf("[ERROR] Message send failed (result: %d)\r\n", send_result);
 800247e:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002482:	4619      	mov	r1, r3
 8002484:	4822      	ldr	r0, [pc, #136]	@ (8002510 <MCP2515_LoopbackTest+0x45c>)
 8002486:	f005 ff59 	bl	800833c <iprintf>
        if (send_result == MCP2515_TIMEOUT) {
 800248a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800248e:	2b02      	cmp	r3, #2
 8002490:	d103      	bne.n	800249a <MCP2515_LoopbackTest+0x3e6>
            printf("  - Send timeout occurred\r\n");
 8002492:	4820      	ldr	r0, [pc, #128]	@ (8002514 <MCP2515_LoopbackTest+0x460>)
 8002494:	f005 ffba 	bl	800840c <puts>
 8002498:	e006      	b.n	80024a8 <MCP2515_LoopbackTest+0x3f4>
        } else if (send_result == MCP2515_ERROR) {
 800249a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 800249e:	2b01      	cmp	r3, #1
 80024a0:	d102      	bne.n	80024a8 <MCP2515_LoopbackTest+0x3f4>
            printf("  - General send error\r\n");
 80024a2:	481d      	ldr	r0, [pc, #116]	@ (8002518 <MCP2515_LoopbackTest+0x464>)
 80024a4:	f005 ffb2 	bl	800840c <puts>
        }
        printf("Possible causes:\r\n");
 80024a8:	4814      	ldr	r0, [pc, #80]	@ (80024fc <MCP2515_LoopbackTest+0x448>)
 80024aa:	f005 ffaf 	bl	800840c <puts>
        printf("  - No available transmit buffer\r\n");
 80024ae:	481b      	ldr	r0, [pc, #108]	@ (800251c <MCP2515_LoopbackTest+0x468>)
 80024b0:	f005 ffac 	bl	800840c <puts>
        printf("  - MCP2515 not in correct mode\r\n");
 80024b4:	481a      	ldr	r0, [pc, #104]	@ (8002520 <MCP2515_LoopbackTest+0x46c>)
 80024b6:	f005 ffa9 	bl	800840c <puts>
        printf("  - SPI communication problem\r\n");
 80024ba:	481a      	ldr	r0, [pc, #104]	@ (8002524 <MCP2515_LoopbackTest+0x470>)
 80024bc:	f005 ffa6 	bl	800840c <puts>
    }
    
    // Switch back to normal mode
    printf("Switching back to normal mode...\r\n");
 80024c0:	4819      	ldr	r0, [pc, #100]	@ (8002528 <MCP2515_LoopbackTest+0x474>)
 80024c2:	f005 ffa3 	bl	800840c <puts>
    MCP2515_SetMode(MCP2515_MODE_NORMAL);
 80024c6:	2000      	movs	r0, #0
 80024c8:	f7fe ff56 	bl	8001378 <MCP2515_SetMode>
    osDelay(100);
 80024cc:	2064      	movs	r0, #100	@ 0x64
 80024ce:	f003 f813 	bl	80054f8 <osDelay>
    
    printf("==========================\r\n");
 80024d2:	4816      	ldr	r0, [pc, #88]	@ (800252c <MCP2515_LoopbackTest+0x478>)
 80024d4:	f005 ff9a 	bl	800840c <puts>
    return result;
 80024d8:	f897 303f 	ldrb.w	r3, [r7, #63]	@ 0x3f
}
 80024dc:	4618      	mov	r0, r3
 80024de:	3740      	adds	r7, #64	@ 0x40
 80024e0:	46bd      	mov	sp, r7
 80024e2:	bd80      	pop	{r7, pc}
 80024e4:	0800ad08 	.word	0x0800ad08
 80024e8:	0800ad30 	.word	0x0800ad30
 80024ec:	0800ad44 	.word	0x0800ad44
 80024f0:	0800ad64 	.word	0x0800ad64
 80024f4:	0800ad98 	.word	0x0800ad98
 80024f8:	0800adc4 	.word	0x0800adc4
 80024fc:	0800adf0 	.word	0x0800adf0
 8002500:	0800ae04 	.word	0x0800ae04
 8002504:	0800ae28 	.word	0x0800ae28
 8002508:	0800ae50 	.word	0x0800ae50
 800250c:	0800ae70 	.word	0x0800ae70
 8002510:	0800ae98 	.word	0x0800ae98
 8002514:	0800aec4 	.word	0x0800aec4
 8002518:	0800aee0 	.word	0x0800aee0
 800251c:	0800aef8 	.word	0x0800aef8
 8002520:	0800af1c 	.word	0x0800af1c
 8002524:	0800af40 	.word	0x0800af40
 8002528:	0800af60 	.word	0x0800af60
 800252c:	0800af84 	.word	0x0800af84

08002530 <MCP2515_CANOETest>:
  * @retval None
  * @note   此函数专门用于配合CANOE工具进行CAN总线测试
  *         发送报文后立即通过串口输出发送的数据，便于对比验证
  */
void MCP2515_CANOETest(void)
{
 8002530:	b580      	push	{r7, lr}
 8002532:	b088      	sub	sp, #32
 8002534:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    uint8_t result;
    static uint32_t test_counter = 0;
    
    printf("\r\n=== CANOE Test Mode - CAN Message Transmission ===\r\n");
 8002536:	48a0      	ldr	r0, [pc, #640]	@ (80027b8 <MCP2515_CANOETest+0x288>)
 8002538:	f005 ff68 	bl	800840c <puts>
    
    // 确保处于正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 800253c:	2000      	movs	r0, #0
 800253e:	f7fe ff1b 	bl	8001378 <MCP2515_SetMode>
 8002542:	4603      	mov	r3, r0
 8002544:	2b00      	cmp	r3, #0
 8002546:	d003      	beq.n	8002550 <MCP2515_CANOETest+0x20>
        printf("ERROR: Failed to switch to normal mode\r\n");
 8002548:	489c      	ldr	r0, [pc, #624]	@ (80027bc <MCP2515_CANOETest+0x28c>)
 800254a:	f005 ff5f 	bl	800840c <puts>
 800254e:	e130      	b.n	80027b2 <MCP2515_CANOETest+0x282>
        return;
    }
    
    // 准备测试报文1 - 标准帧
    test_msg.id = 0x123;
 8002550:	f240 1323 	movw	r3, #291	@ 0x123
 8002554:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 8;
 8002556:	2308      	movs	r3, #8
 8002558:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 800255a:	2300      	movs	r3, #0
 800255c:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 800255e:	2300      	movs	r3, #0
 8002560:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0x11;
 8002562:	2311      	movs	r3, #17
 8002564:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0x22;
 8002566:	2322      	movs	r3, #34	@ 0x22
 8002568:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0x33;
 800256a:	2333      	movs	r3, #51	@ 0x33
 800256c:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0x44;
 800256e:	2344      	movs	r3, #68	@ 0x44
 8002570:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(test_counter & 0xFF);
 8002572:	4b93      	ldr	r3, [pc, #588]	@ (80027c0 <MCP2515_CANOETest+0x290>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	b2db      	uxtb	r3, r3
 8002578:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((test_counter >> 8) & 0xFF);
 800257a:	4b91      	ldr	r3, [pc, #580]	@ (80027c0 <MCP2515_CANOETest+0x290>)
 800257c:	681b      	ldr	r3, [r3, #0]
 800257e:	0a1b      	lsrs	r3, r3, #8
 8002580:	b2db      	uxtb	r3, r3
 8002582:	743b      	strb	r3, [r7, #16]
    test_msg.data[6] = 0xAA;
 8002584:	23aa      	movs	r3, #170	@ 0xaa
 8002586:	747b      	strb	r3, [r7, #17]
    test_msg.data[7] = 0xBB;
 8002588:	23bb      	movs	r3, #187	@ 0xbb
 800258a:	74bb      	strb	r3, [r7, #18]
    
    printf("\r\n--- Test Message 1 (Standard Frame) ---\r\n");
 800258c:	488d      	ldr	r0, [pc, #564]	@ (80027c4 <MCP2515_CANOETest+0x294>)
 800258e:	f005 ff3d 	bl	800840c <puts>
    printf("Sending CAN message to bus...\r\n");
 8002592:	488d      	ldr	r0, [pc, #564]	@ (80027c8 <MCP2515_CANOETest+0x298>)
 8002594:	f005 ff3a 	bl	800840c <puts>
    printf("CAN ID: 0x%03lX (Standard Frame)\r\n", test_msg.id);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4619      	mov	r1, r3
 800259c:	488b      	ldr	r0, [pc, #556]	@ (80027cc <MCP2515_CANOETest+0x29c>)
 800259e:	f005 fecd 	bl	800833c <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 80025a2:	7abb      	ldrb	r3, [r7, #10]
 80025a4:	4619      	mov	r1, r3
 80025a6:	488a      	ldr	r0, [pc, #552]	@ (80027d0 <MCP2515_CANOETest+0x2a0>)
 80025a8:	f005 fec8 	bl	800833c <iprintf>
    printf("Data: ");
 80025ac:	4889      	ldr	r0, [pc, #548]	@ (80027d4 <MCP2515_CANOETest+0x2a4>)
 80025ae:	f005 fec5 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80025b2:	2300      	movs	r3, #0
 80025b4:	61fb      	str	r3, [r7, #28]
 80025b6:	e00b      	b.n	80025d0 <MCP2515_CANOETest+0xa0>
        printf("0x%02X ", test_msg.data[i]);
 80025b8:	f107 020b 	add.w	r2, r7, #11
 80025bc:	69fb      	ldr	r3, [r7, #28]
 80025be:	4413      	add	r3, r2
 80025c0:	781b      	ldrb	r3, [r3, #0]
 80025c2:	4619      	mov	r1, r3
 80025c4:	4884      	ldr	r0, [pc, #528]	@ (80027d8 <MCP2515_CANOETest+0x2a8>)
 80025c6:	f005 feb9 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	3301      	adds	r3, #1
 80025ce:	61fb      	str	r3, [r7, #28]
 80025d0:	7abb      	ldrb	r3, [r7, #10]
 80025d2:	461a      	mov	r2, r3
 80025d4:	69fb      	ldr	r3, [r7, #28]
 80025d6:	4293      	cmp	r3, r2
 80025d8:	dbee      	blt.n	80025b8 <MCP2515_CANOETest+0x88>
    }
    printf("\r\n");
 80025da:	4880      	ldr	r0, [pc, #512]	@ (80027dc <MCP2515_CANOETest+0x2ac>)
 80025dc:	f005 ff16 	bl	800840c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 80025e0:	1d3b      	adds	r3, r7, #4
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff f844 	bl	8001670 <MCP2515_SendMessage>
 80025e8:	4603      	mov	r3, r0
 80025ea:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 80025ec:	7dfb      	ldrb	r3, [r7, #23]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d106      	bne.n	8002600 <MCP2515_CANOETest+0xd0>
        printf("[OK] Message sent successfully to CAN bus\r\n");
 80025f2:	487b      	ldr	r0, [pc, #492]	@ (80027e0 <MCP2515_CANOETest+0x2b0>)
 80025f4:	f005 ff0a 	bl	800840c <puts>
        printf(">> Check CANOE for received message with ID 0x123\r\n");
 80025f8:	487a      	ldr	r0, [pc, #488]	@ (80027e4 <MCP2515_CANOETest+0x2b4>)
 80025fa:	f005 ff07 	bl	800840c <puts>
 80025fe:	e00f      	b.n	8002620 <MCP2515_CANOETest+0xf0>
    } else if (result == MCP2515_TIMEOUT) {
 8002600:	7dfb      	ldrb	r3, [r7, #23]
 8002602:	2b02      	cmp	r3, #2
 8002604:	d109      	bne.n	800261a <MCP2515_CANOETest+0xea>
        printf("[WARN] Message send timeout - No ACK received\r\n");
 8002606:	4878      	ldr	r0, [pc, #480]	@ (80027e8 <MCP2515_CANOETest+0x2b8>)
 8002608:	f005 ff00 	bl	800840c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 800260c:	4877      	ldr	r0, [pc, #476]	@ (80027ec <MCP2515_CANOETest+0x2bc>)
 800260e:	f005 fefd 	bl	800840c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 8002612:	4877      	ldr	r0, [pc, #476]	@ (80027f0 <MCP2515_CANOETest+0x2c0>)
 8002614:	f005 fefa 	bl	800840c <puts>
 8002618:	e002      	b.n	8002620 <MCP2515_CANOETest+0xf0>
    } else {
        printf("[ERROR] Message send failed\r\n");
 800261a:	4876      	ldr	r0, [pc, #472]	@ (80027f4 <MCP2515_CANOETest+0x2c4>)
 800261c:	f005 fef6 	bl	800840c <puts>
    }
    
    osDelay(500);  // 延时500ms
 8002620:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002624:	f002 ff68 	bl	80054f8 <osDelay>
    
    // 准备测试报文2 - 扩展帧
    test_msg.id = 0x12345678;
 8002628:	4b73      	ldr	r3, [pc, #460]	@ (80027f8 <MCP2515_CANOETest+0x2c8>)
 800262a:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 6;
 800262c:	2306      	movs	r3, #6
 800262e:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 8002630:	2300      	movs	r3, #0
 8002632:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 1;  // 扩展帧
 8002634:	2301      	movs	r3, #1
 8002636:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0xCA;
 8002638:	23ca      	movs	r3, #202	@ 0xca
 800263a:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0xFE;
 800263c:	23fe      	movs	r3, #254	@ 0xfe
 800263e:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0xBA;
 8002640:	23ba      	movs	r3, #186	@ 0xba
 8002642:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0xBE;
 8002644:	23be      	movs	r3, #190	@ 0xbe
 8002646:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(HAL_GetTick() & 0xFF);
 8002648:	f000 fcbe 	bl	8002fc8 <HAL_GetTick>
 800264c:	4603      	mov	r3, r0
 800264e:	b2db      	uxtb	r3, r3
 8002650:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((HAL_GetTick() >> 8) & 0xFF);
 8002652:	f000 fcb9 	bl	8002fc8 <HAL_GetTick>
 8002656:	4603      	mov	r3, r0
 8002658:	0a1b      	lsrs	r3, r3, #8
 800265a:	b2db      	uxtb	r3, r3
 800265c:	743b      	strb	r3, [r7, #16]
    
    printf("\r\n--- Test Message 2 (Extended Frame) ---\r\n");
 800265e:	4867      	ldr	r0, [pc, #412]	@ (80027fc <MCP2515_CANOETest+0x2cc>)
 8002660:	f005 fed4 	bl	800840c <puts>
    printf("Sending CAN message to bus...\r\n");
 8002664:	4858      	ldr	r0, [pc, #352]	@ (80027c8 <MCP2515_CANOETest+0x298>)
 8002666:	f005 fed1 	bl	800840c <puts>
    printf("CAN ID: 0x%08lX (Extended Frame)\r\n", test_msg.id);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	4619      	mov	r1, r3
 800266e:	4864      	ldr	r0, [pc, #400]	@ (8002800 <MCP2515_CANOETest+0x2d0>)
 8002670:	f005 fe64 	bl	800833c <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 8002674:	7abb      	ldrb	r3, [r7, #10]
 8002676:	4619      	mov	r1, r3
 8002678:	4855      	ldr	r0, [pc, #340]	@ (80027d0 <MCP2515_CANOETest+0x2a0>)
 800267a:	f005 fe5f 	bl	800833c <iprintf>
    printf("Data: ");
 800267e:	4855      	ldr	r0, [pc, #340]	@ (80027d4 <MCP2515_CANOETest+0x2a4>)
 8002680:	f005 fe5c 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 8002684:	2300      	movs	r3, #0
 8002686:	61bb      	str	r3, [r7, #24]
 8002688:	e00b      	b.n	80026a2 <MCP2515_CANOETest+0x172>
        printf("0x%02X ", test_msg.data[i]);
 800268a:	f107 020b 	add.w	r2, r7, #11
 800268e:	69bb      	ldr	r3, [r7, #24]
 8002690:	4413      	add	r3, r2
 8002692:	781b      	ldrb	r3, [r3, #0]
 8002694:	4619      	mov	r1, r3
 8002696:	4850      	ldr	r0, [pc, #320]	@ (80027d8 <MCP2515_CANOETest+0x2a8>)
 8002698:	f005 fe50 	bl	800833c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	3301      	adds	r3, #1
 80026a0:	61bb      	str	r3, [r7, #24]
 80026a2:	7abb      	ldrb	r3, [r7, #10]
 80026a4:	461a      	mov	r2, r3
 80026a6:	69bb      	ldr	r3, [r7, #24]
 80026a8:	4293      	cmp	r3, r2
 80026aa:	dbee      	blt.n	800268a <MCP2515_CANOETest+0x15a>
    }
    printf("\r\n");
 80026ac:	484b      	ldr	r0, [pc, #300]	@ (80027dc <MCP2515_CANOETest+0x2ac>)
 80026ae:	f005 fead 	bl	800840c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 80026b2:	1d3b      	adds	r3, r7, #4
 80026b4:	4618      	mov	r0, r3
 80026b6:	f7fe ffdb 	bl	8001670 <MCP2515_SendMessage>
 80026ba:	4603      	mov	r3, r0
 80026bc:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 80026be:	7dfb      	ldrb	r3, [r7, #23]
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d106      	bne.n	80026d2 <MCP2515_CANOETest+0x1a2>
        printf("[OK] Message sent successfully to CAN bus\r\n");
 80026c4:	4846      	ldr	r0, [pc, #280]	@ (80027e0 <MCP2515_CANOETest+0x2b0>)
 80026c6:	f005 fea1 	bl	800840c <puts>
        printf(">> Check CANOE for received message with ID 0x12345678\r\n");
 80026ca:	484e      	ldr	r0, [pc, #312]	@ (8002804 <MCP2515_CANOETest+0x2d4>)
 80026cc:	f005 fe9e 	bl	800840c <puts>
 80026d0:	e00f      	b.n	80026f2 <MCP2515_CANOETest+0x1c2>
    } else if (result == MCP2515_TIMEOUT) {
 80026d2:	7dfb      	ldrb	r3, [r7, #23]
 80026d4:	2b02      	cmp	r3, #2
 80026d6:	d109      	bne.n	80026ec <MCP2515_CANOETest+0x1bc>
        printf("[WARN] Message send timeout - No ACK received\r\n");
 80026d8:	4843      	ldr	r0, [pc, #268]	@ (80027e8 <MCP2515_CANOETest+0x2b8>)
 80026da:	f005 fe97 	bl	800840c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 80026de:	4843      	ldr	r0, [pc, #268]	@ (80027ec <MCP2515_CANOETest+0x2bc>)
 80026e0:	f005 fe94 	bl	800840c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 80026e4:	4842      	ldr	r0, [pc, #264]	@ (80027f0 <MCP2515_CANOETest+0x2c0>)
 80026e6:	f005 fe91 	bl	800840c <puts>
 80026ea:	e002      	b.n	80026f2 <MCP2515_CANOETest+0x1c2>
    } else {
        printf("[ERROR] Message send failed\r\n");
 80026ec:	4841      	ldr	r0, [pc, #260]	@ (80027f4 <MCP2515_CANOETest+0x2c4>)
 80026ee:	f005 fe8d 	bl	800840c <puts>
    }
    
    osDelay(500);  // 延时500ms
 80026f2:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80026f6:	f002 feff 	bl	80054f8 <osDelay>
    
    // 准备测试报文3 - RTR帧
    test_msg.id = 0x456;
 80026fa:	f240 4356 	movw	r3, #1110	@ 0x456
 80026fe:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 4;
 8002700:	2304      	movs	r3, #4
 8002702:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 1;  // RTR帧
 8002704:	2301      	movs	r3, #1
 8002706:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 8002708:	2300      	movs	r3, #0
 800270a:	723b      	strb	r3, [r7, #8]
    
    printf("\r\n--- Test Message 3 (RTR Frame) ---\r\n");
 800270c:	483e      	ldr	r0, [pc, #248]	@ (8002808 <MCP2515_CANOETest+0x2d8>)
 800270e:	f005 fe7d 	bl	800840c <puts>
    printf("Sending RTR message to bus...\r\n");
 8002712:	483e      	ldr	r0, [pc, #248]	@ (800280c <MCP2515_CANOETest+0x2dc>)
 8002714:	f005 fe7a 	bl	800840c <puts>
    printf("CAN ID: 0x%03lX (Standard RTR Frame)\r\n", test_msg.id);
 8002718:	687b      	ldr	r3, [r7, #4]
 800271a:	4619      	mov	r1, r3
 800271c:	483c      	ldr	r0, [pc, #240]	@ (8002810 <MCP2515_CANOETest+0x2e0>)
 800271e:	f005 fe0d 	bl	800833c <iprintf>
    printf("DLC: %d bytes (RTR - no data)\r\n", test_msg.dlc);
 8002722:	7abb      	ldrb	r3, [r7, #10]
 8002724:	4619      	mov	r1, r3
 8002726:	483b      	ldr	r0, [pc, #236]	@ (8002814 <MCP2515_CANOETest+0x2e4>)
 8002728:	f005 fe08 	bl	800833c <iprintf>
    
    // 发送RTR报文
    result = MCP2515_SendMessage(&test_msg);
 800272c:	1d3b      	adds	r3, r7, #4
 800272e:	4618      	mov	r0, r3
 8002730:	f7fe ff9e 	bl	8001670 <MCP2515_SendMessage>
 8002734:	4603      	mov	r3, r0
 8002736:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 8002738:	7dfb      	ldrb	r3, [r7, #23]
 800273a:	2b00      	cmp	r3, #0
 800273c:	d106      	bne.n	800274c <MCP2515_CANOETest+0x21c>
        printf("[OK] RTR message sent successfully to CAN bus\r\n");
 800273e:	4836      	ldr	r0, [pc, #216]	@ (8002818 <MCP2515_CANOETest+0x2e8>)
 8002740:	f005 fe64 	bl	800840c <puts>
        printf(">> Check CANOE for received RTR message with ID 0x456\r\n");
 8002744:	4835      	ldr	r0, [pc, #212]	@ (800281c <MCP2515_CANOETest+0x2ec>)
 8002746:	f005 fe61 	bl	800840c <puts>
 800274a:	e00f      	b.n	800276c <MCP2515_CANOETest+0x23c>
    } else if (result == MCP2515_TIMEOUT) {
 800274c:	7dfb      	ldrb	r3, [r7, #23]
 800274e:	2b02      	cmp	r3, #2
 8002750:	d109      	bne.n	8002766 <MCP2515_CANOETest+0x236>
        printf("[WARN] RTR message send timeout - No ACK received\r\n");
 8002752:	4833      	ldr	r0, [pc, #204]	@ (8002820 <MCP2515_CANOETest+0x2f0>)
 8002754:	f005 fe5a 	bl	800840c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 8002758:	4824      	ldr	r0, [pc, #144]	@ (80027ec <MCP2515_CANOETest+0x2bc>)
 800275a:	f005 fe57 	bl	800840c <puts>
        printf(">> Check CANOE for transmitted RTR message attempt\r\n");
 800275e:	4831      	ldr	r0, [pc, #196]	@ (8002824 <MCP2515_CANOETest+0x2f4>)
 8002760:	f005 fe54 	bl	800840c <puts>
 8002764:	e002      	b.n	800276c <MCP2515_CANOETest+0x23c>
    } else {
        printf("[ERROR] RTR message send failed\r\n");
 8002766:	4830      	ldr	r0, [pc, #192]	@ (8002828 <MCP2515_CANOETest+0x2f8>)
 8002768:	f005 fe50 	bl	800840c <puts>
    }
    
    test_counter++;
 800276c:	4b14      	ldr	r3, [pc, #80]	@ (80027c0 <MCP2515_CANOETest+0x290>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	3301      	adds	r3, #1
 8002772:	4a13      	ldr	r2, [pc, #76]	@ (80027c0 <MCP2515_CANOETest+0x290>)
 8002774:	6013      	str	r3, [r2, #0]
    
    printf("\r\n=== CANOE Test Summary ===\r\n");
 8002776:	482d      	ldr	r0, [pc, #180]	@ (800282c <MCP2515_CANOETest+0x2fc>)
 8002778:	f005 fe48 	bl	800840c <puts>
    printf("Test sequence #%lu completed\r\n", test_counter);
 800277c:	4b10      	ldr	r3, [pc, #64]	@ (80027c0 <MCP2515_CANOETest+0x290>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4619      	mov	r1, r3
 8002782:	482b      	ldr	r0, [pc, #172]	@ (8002830 <MCP2515_CANOETest+0x300>)
 8002784:	f005 fdda 	bl	800833c <iprintf>
    printf("Messages sent to CAN bus:\r\n");
 8002788:	482a      	ldr	r0, [pc, #168]	@ (8002834 <MCP2515_CANOETest+0x304>)
 800278a:	f005 fe3f 	bl	800840c <puts>
    printf("  1. Standard Frame: ID=0x123, 8 bytes data\r\n");
 800278e:	482a      	ldr	r0, [pc, #168]	@ (8002838 <MCP2515_CANOETest+0x308>)
 8002790:	f005 fe3c 	bl	800840c <puts>
    printf("  2. Extended Frame: ID=0x12345678, 6 bytes data\r\n");
 8002794:	4829      	ldr	r0, [pc, #164]	@ (800283c <MCP2515_CANOETest+0x30c>)
 8002796:	f005 fe39 	bl	800840c <puts>
    printf("  3. RTR Frame: ID=0x456, 4 bytes requested\r\n");
 800279a:	4829      	ldr	r0, [pc, #164]	@ (8002840 <MCP2515_CANOETest+0x310>)
 800279c:	f005 fe36 	bl	800840c <puts>
    printf("\r\nPlease check CANOE trace window for these messages\r\n");
 80027a0:	4828      	ldr	r0, [pc, #160]	@ (8002844 <MCP2515_CANOETest+0x314>)
 80027a2:	f005 fe33 	bl	800840c <puts>
    printf("If messages appear in CANOE, CAN transmission is working!\r\n");
 80027a6:	4828      	ldr	r0, [pc, #160]	@ (8002848 <MCP2515_CANOETest+0x318>)
 80027a8:	f005 fe30 	bl	800840c <puts>
    printf("===============================\r\n");
 80027ac:	4827      	ldr	r0, [pc, #156]	@ (800284c <MCP2515_CANOETest+0x31c>)
 80027ae:	f005 fe2d 	bl	800840c <puts>
}
 80027b2:	3720      	adds	r7, #32
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bd80      	pop	{r7, pc}
 80027b8:	0800afa0 	.word	0x0800afa0
 80027bc:	0800afd8 	.word	0x0800afd8
 80027c0:	2000014c 	.word	0x2000014c
 80027c4:	0800b000 	.word	0x0800b000
 80027c8:	0800b02c 	.word	0x0800b02c
 80027cc:	0800b04c 	.word	0x0800b04c
 80027d0:	0800b070 	.word	0x0800b070
 80027d4:	0800b080 	.word	0x0800b080
 80027d8:	0800aa14 	.word	0x0800aa14
 80027dc:	0800aa1c 	.word	0x0800aa1c
 80027e0:	0800b088 	.word	0x0800b088
 80027e4:	0800b0b4 	.word	0x0800b0b4
 80027e8:	0800b0e8 	.word	0x0800b0e8
 80027ec:	0800b118 	.word	0x0800b118
 80027f0:	0800b150 	.word	0x0800b150
 80027f4:	0800b180 	.word	0x0800b180
 80027f8:	12345678 	.word	0x12345678
 80027fc:	0800b1a0 	.word	0x0800b1a0
 8002800:	0800b1cc 	.word	0x0800b1cc
 8002804:	0800b1f0 	.word	0x0800b1f0
 8002808:	0800b228 	.word	0x0800b228
 800280c:	0800b250 	.word	0x0800b250
 8002810:	0800b270 	.word	0x0800b270
 8002814:	0800b298 	.word	0x0800b298
 8002818:	0800b2b8 	.word	0x0800b2b8
 800281c:	0800b2e8 	.word	0x0800b2e8
 8002820:	0800b320 	.word	0x0800b320
 8002824:	0800b354 	.word	0x0800b354
 8002828:	0800b388 	.word	0x0800b388
 800282c:	0800b3ac 	.word	0x0800b3ac
 8002830:	0800b3cc 	.word	0x0800b3cc
 8002834:	0800b3ec 	.word	0x0800b3ec
 8002838:	0800b408 	.word	0x0800b408
 800283c:	0800b438 	.word	0x0800b438
 8002840:	0800b46c 	.word	0x0800b46c
 8002844:	0800b49c 	.word	0x0800b49c
 8002848:	0800b4d4 	.word	0x0800b4d4
 800284c:	0800a7a0 	.word	0x0800a7a0

08002850 <MCP2515_InitFailureDiagnosis>:
  * @brief  初始化失败专用诊断函数
  * @param  None
  * @retval None
  */
void MCP2515_InitFailureDiagnosis(void)
{
 8002850:	b580      	push	{r7, lr}
 8002852:	b082      	sub	sp, #8
 8002854:	af00      	add	r7, sp, #0
    printf("\r\n=== MCP2515 Initialization Failure Diagnosis ===\r\n");
 8002856:	4854      	ldr	r0, [pc, #336]	@ (80029a8 <MCP2515_InitFailureDiagnosis+0x158>)
 8002858:	f005 fdd8 	bl	800840c <puts>
    
    // 1. 详细的硬件连接测试
    printf("\r\nStep 1: Comprehensive hardware test...\r\n");
 800285c:	4853      	ldr	r0, [pc, #332]	@ (80029ac <MCP2515_InitFailureDiagnosis+0x15c>)
 800285e:	f005 fdd5 	bl	800840c <puts>
    if (MCP2515_HardwareTest() == MCP2515_OK) {
 8002862:	f7ff f81d 	bl	80018a0 <MCP2515_HardwareTest>
 8002866:	4603      	mov	r3, r0
 8002868:	2b00      	cmp	r3, #0
 800286a:	d108      	bne.n	800287e <MCP2515_InitFailureDiagnosis+0x2e>
        printf("[OK] Hardware connections appear to be working\r\n");
 800286c:	4850      	ldr	r0, [pc, #320]	@ (80029b0 <MCP2515_InitFailureDiagnosis+0x160>)
 800286e:	f005 fdcd 	bl	800840c <puts>
        printf("  - Decoupling capacitors: 100nF near MCP2515\r\n");
        return;
    }
    
    // 2. 多次复位尝试
    printf("\r\nStep 2: Multiple reset attempts...\r\n");
 8002872:	4850      	ldr	r0, [pc, #320]	@ (80029b4 <MCP2515_InitFailureDiagnosis+0x164>)
 8002874:	f005 fdca 	bl	800840c <puts>
    for (int i = 0; i < 3; i++) {
 8002878:	2300      	movs	r3, #0
 800287a:	607b      	str	r3, [r7, #4]
 800287c:	e03a      	b.n	80028f4 <MCP2515_InitFailureDiagnosis+0xa4>
        printf("[ERROR] Hardware test failed - Check connections\r\n");
 800287e:	484e      	ldr	r0, [pc, #312]	@ (80029b8 <MCP2515_InitFailureDiagnosis+0x168>)
 8002880:	f005 fdc4 	bl	800840c <puts>
        printf("\r\nHardware troubleshooting checklist:\r\n");
 8002884:	484d      	ldr	r0, [pc, #308]	@ (80029bc <MCP2515_InitFailureDiagnosis+0x16c>)
 8002886:	f005 fdc1 	bl	800840c <puts>
        printf("  - SPI connections: SCK(PB3), MISO(PB4), MOSI(PB5)\r\n");
 800288a:	484d      	ldr	r0, [pc, #308]	@ (80029c0 <MCP2515_InitFailureDiagnosis+0x170>)
 800288c:	f005 fdbe 	bl	800840c <puts>
        printf("  - CS connection: PB12\r\n");
 8002890:	484c      	ldr	r0, [pc, #304]	@ (80029c4 <MCP2515_InitFailureDiagnosis+0x174>)
 8002892:	f005 fdbb 	bl	800840c <puts>
        printf("  - Power supply: 3.3V to MCP2515 VCC\r\n");
 8002896:	484c      	ldr	r0, [pc, #304]	@ (80029c8 <MCP2515_InitFailureDiagnosis+0x178>)
 8002898:	f005 fdb8 	bl	800840c <puts>
        printf("  - Ground connection: GND\r\n");
 800289c:	484b      	ldr	r0, [pc, #300]	@ (80029cc <MCP2515_InitFailureDiagnosis+0x17c>)
 800289e:	f005 fdb5 	bl	800840c <puts>
        printf("  - Crystal oscillator: 8MHz or 16MHz\r\n");
 80028a2:	484b      	ldr	r0, [pc, #300]	@ (80029d0 <MCP2515_InitFailureDiagnosis+0x180>)
 80028a4:	f005 fdb2 	bl	800840c <puts>
        printf("  - Decoupling capacitors: 100nF near MCP2515\r\n");
 80028a8:	484a      	ldr	r0, [pc, #296]	@ (80029d4 <MCP2515_InitFailureDiagnosis+0x184>)
 80028aa:	f005 fdaf 	bl	800840c <puts>
        return;
 80028ae:	e077      	b.n	80029a0 <MCP2515_InitFailureDiagnosis+0x150>
        printf("Reset attempt %d/3:\r\n", i + 1);
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	3301      	adds	r3, #1
 80028b4:	4619      	mov	r1, r3
 80028b6:	4848      	ldr	r0, [pc, #288]	@ (80029d8 <MCP2515_InitFailureDiagnosis+0x188>)
 80028b8:	f005 fd40 	bl	800833c <iprintf>
        MCP2515_Reset();
 80028bc:	f7fe fcea 	bl	8001294 <MCP2515_Reset>
        osDelay(100);
 80028c0:	2064      	movs	r0, #100	@ 0x64
 80028c2:	f002 fe19 	bl	80054f8 <osDelay>
        
        uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80028c6:	200e      	movs	r0, #14
 80028c8:	f7fe fc8e 	bl	80011e8 <MCP2515_ReadRegister>
 80028cc:	4603      	mov	r3, r0
 80028ce:	70fb      	strb	r3, [r7, #3]
        printf("  CANSTAT: 0x%02X\r\n", canstat);
 80028d0:	78fb      	ldrb	r3, [r7, #3]
 80028d2:	4619      	mov	r1, r3
 80028d4:	4841      	ldr	r0, [pc, #260]	@ (80029dc <MCP2515_InitFailureDiagnosis+0x18c>)
 80028d6:	f005 fd31 	bl	800833c <iprintf>
        
        if (canstat != 0xFF) {
 80028da:	78fb      	ldrb	r3, [r7, #3]
 80028dc:	2bff      	cmp	r3, #255	@ 0xff
 80028de:	d003      	beq.n	80028e8 <MCP2515_InitFailureDiagnosis+0x98>
            printf("  [OK] MCP2515 responding\r\n");
 80028e0:	483f      	ldr	r0, [pc, #252]	@ (80029e0 <MCP2515_InitFailureDiagnosis+0x190>)
 80028e2:	f005 fd93 	bl	800840c <puts>
            break;
 80028e6:	e008      	b.n	80028fa <MCP2515_InitFailureDiagnosis+0xaa>
        } else {
            printf("  [ERROR] No response\r\n");
 80028e8:	483e      	ldr	r0, [pc, #248]	@ (80029e4 <MCP2515_InitFailureDiagnosis+0x194>)
 80028ea:	f005 fd8f 	bl	800840c <puts>
    for (int i = 0; i < 3; i++) {
 80028ee:	687b      	ldr	r3, [r7, #4]
 80028f0:	3301      	adds	r3, #1
 80028f2:	607b      	str	r3, [r7, #4]
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	2b02      	cmp	r3, #2
 80028f8:	ddda      	ble.n	80028b0 <MCP2515_InitFailureDiagnosis+0x60>
        }
    }
    
    // 3. 强制初始化尝试
    printf("\r\nStep 3: Force initialization attempt...\r\n");
 80028fa:	483b      	ldr	r0, [pc, #236]	@ (80029e8 <MCP2515_InitFailureDiagnosis+0x198>)
 80028fc:	f005 fd86 	bl	800840c <puts>
    
    // 直接设置配置模式
    printf("Attempting to force configuration mode...\r\n");
 8002900:	483a      	ldr	r0, [pc, #232]	@ (80029ec <MCP2515_InitFailureDiagnosis+0x19c>)
 8002902:	f005 fd83 	bl	800840c <puts>
    MCP2515_WriteRegister(MCP2515_CANCTRL, MCP2515_MODE_CONFIG);
 8002906:	2180      	movs	r1, #128	@ 0x80
 8002908:	200f      	movs	r0, #15
 800290a:	f7fe fc87 	bl	800121c <MCP2515_WriteRegister>
    osDelay(50);
 800290e:	2032      	movs	r0, #50	@ 0x32
 8002910:	f002 fdf2 	bl	80054f8 <osDelay>
    
    uint8_t mode = MCP2515_GetMode();
 8002914:	f7fe fd68 	bl	80013e8 <MCP2515_GetMode>
 8002918:	4603      	mov	r3, r0
 800291a:	70bb      	strb	r3, [r7, #2]
    printf("Current mode: 0x%02X\r\n", mode);
 800291c:	78bb      	ldrb	r3, [r7, #2]
 800291e:	4619      	mov	r1, r3
 8002920:	4833      	ldr	r0, [pc, #204]	@ (80029f0 <MCP2515_InitFailureDiagnosis+0x1a0>)
 8002922:	f005 fd0b 	bl	800833c <iprintf>
    
    if (mode == MCP2515_MODE_CONFIG) {
 8002926:	78bb      	ldrb	r3, [r7, #2]
 8002928:	2b80      	cmp	r3, #128	@ 0x80
 800292a:	d133      	bne.n	8002994 <MCP2515_InitFailureDiagnosis+0x144>
        printf("[OK] Successfully entered configuration mode\r\n");
 800292c:	4831      	ldr	r0, [pc, #196]	@ (80029f4 <MCP2515_InitFailureDiagnosis+0x1a4>)
 800292e:	f005 fd6d 	bl	800840c <puts>
        
        // 尝试配置波特率
        printf("Configuring 500K baud rate...\r\n");
 8002932:	4831      	ldr	r0, [pc, #196]	@ (80029f8 <MCP2515_InitFailureDiagnosis+0x1a8>)
 8002934:	f005 fd6a 	bl	800840c <puts>
        MCP2515_WriteRegister(MCP2515_CNF1, 0x00);
 8002938:	2100      	movs	r1, #0
 800293a:	202a      	movs	r0, #42	@ 0x2a
 800293c:	f7fe fc6e 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_CNF2, 0xB1);
 8002940:	21b1      	movs	r1, #177	@ 0xb1
 8002942:	2029      	movs	r0, #41	@ 0x29
 8002944:	f7fe fc6a 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_CNF3, 0x85);
 8002948:	2185      	movs	r1, #133	@ 0x85
 800294a:	2028      	movs	r0, #40	@ 0x28
 800294c:	f7fe fc66 	bl	800121c <MCP2515_WriteRegister>
        
        // 配置接收缓冲区
        MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);
 8002950:	2160      	movs	r1, #96	@ 0x60
 8002952:	2060      	movs	r0, #96	@ 0x60
 8002954:	f7fe fc62 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);
 8002958:	2160      	movs	r1, #96	@ 0x60
 800295a:	2070      	movs	r0, #112	@ 0x70
 800295c:	f7fe fc5e 	bl	800121c <MCP2515_WriteRegister>
        
        // 清除中断标志
        MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8002960:	2100      	movs	r1, #0
 8002962:	202c      	movs	r0, #44	@ 0x2c
 8002964:	f7fe fc5a 	bl	800121c <MCP2515_WriteRegister>
        
        // 尝试切换到正常模式
        printf("Switching to normal mode...\r\n");
 8002968:	4824      	ldr	r0, [pc, #144]	@ (80029fc <MCP2515_InitFailureDiagnosis+0x1ac>)
 800296a:	f005 fd4f 	bl	800840c <puts>
        if (MCP2515_SetMode(MCP2515_MODE_NORMAL) == MCP2515_OK) {
 800296e:	2000      	movs	r0, #0
 8002970:	f7fe fd02 	bl	8001378 <MCP2515_SetMode>
 8002974:	4603      	mov	r3, r0
 8002976:	2b00      	cmp	r3, #0
 8002978:	d108      	bne.n	800298c <MCP2515_InitFailureDiagnosis+0x13c>
            printf("[OK] Force initialization successful!\r\n");
 800297a:	4821      	ldr	r0, [pc, #132]	@ (8002a00 <MCP2515_InitFailureDiagnosis+0x1b0>)
 800297c:	f005 fd46 	bl	800840c <puts>
            printf("\r\n--- Starting CANOE Test Mode ---\r\n");
 8002980:	4820      	ldr	r0, [pc, #128]	@ (8002a04 <MCP2515_InitFailureDiagnosis+0x1b4>)
 8002982:	f005 fd43 	bl	800840c <puts>
            MCP2515_CANOETest();
 8002986:	f7ff fdd3 	bl	8002530 <MCP2515_CANOETest>
 800298a:	e006      	b.n	800299a <MCP2515_InitFailureDiagnosis+0x14a>
        } else {
            printf("[ERROR] Failed to switch to normal mode\r\n");
 800298c:	481e      	ldr	r0, [pc, #120]	@ (8002a08 <MCP2515_InitFailureDiagnosis+0x1b8>)
 800298e:	f005 fd3d 	bl	800840c <puts>
 8002992:	e002      	b.n	800299a <MCP2515_InitFailureDiagnosis+0x14a>
        }
    } else {
        printf("[ERROR] Cannot enter configuration mode\r\n");
 8002994:	481d      	ldr	r0, [pc, #116]	@ (8002a0c <MCP2515_InitFailureDiagnosis+0x1bc>)
 8002996:	f005 fd39 	bl	800840c <puts>
    }
    
    printf("\r\n=== Diagnosis completed ===\r\n");
 800299a:	481d      	ldr	r0, [pc, #116]	@ (8002a10 <MCP2515_InitFailureDiagnosis+0x1c0>)
 800299c:	f005 fd36 	bl	800840c <puts>
}
 80029a0:	3708      	adds	r7, #8
 80029a2:	46bd      	mov	sp, r7
 80029a4:	bd80      	pop	{r7, pc}
 80029a6:	bf00      	nop
 80029a8:	0800b510 	.word	0x0800b510
 80029ac:	0800b544 	.word	0x0800b544
 80029b0:	0800b570 	.word	0x0800b570
 80029b4:	0800b6ec 	.word	0x0800b6ec
 80029b8:	0800b5a0 	.word	0x0800b5a0
 80029bc:	0800b5d4 	.word	0x0800b5d4
 80029c0:	0800b5fc 	.word	0x0800b5fc
 80029c4:	0800b634 	.word	0x0800b634
 80029c8:	0800b650 	.word	0x0800b650
 80029cc:	0800b678 	.word	0x0800b678
 80029d0:	0800b694 	.word	0x0800b694
 80029d4:	0800b6bc 	.word	0x0800b6bc
 80029d8:	0800b714 	.word	0x0800b714
 80029dc:	0800b72c 	.word	0x0800b72c
 80029e0:	0800b740 	.word	0x0800b740
 80029e4:	0800b75c 	.word	0x0800b75c
 80029e8:	0800b774 	.word	0x0800b774
 80029ec:	0800b7a0 	.word	0x0800b7a0
 80029f0:	0800b7cc 	.word	0x0800b7cc
 80029f4:	08009e60 	.word	0x08009e60
 80029f8:	0800b7e4 	.word	0x0800b7e4
 80029fc:	0800b804 	.word	0x0800b804
 8002a00:	0800b824 	.word	0x0800b824
 8002a04:	0800b84c 	.word	0x0800b84c
 8002a08:	0800b870 	.word	0x0800b870
 8002a0c:	0800b89c 	.word	0x0800b89c
 8002a10:	0800b8c8 	.word	0x0800b8c8

08002a14 <CAN_DiagnoseAndFix>:
  * @brief  完整的CAN问题诊断和修复流程
  * @param  None
  * @retval None
  */
void CAN_DiagnoseAndFix(void)
{
 8002a14:	b580      	push	{r7, lr}
 8002a16:	af00      	add	r7, sp, #0
    printf("\r\nStarting CAN problem diagnosis and repair process...\r\n");
 8002a18:	4829      	ldr	r0, [pc, #164]	@ (8002ac0 <CAN_DiagnoseAndFix+0xac>)
 8002a1a:	f005 fcf7 	bl	800840c <puts>
    
    // Step 1: Diagnose current error status
    MCP2515_DiagnoseErrors();
 8002a1e:	f7ff fa27 	bl	8001e70 <MCP2515_DiagnoseErrors>
    
    // Step 2: Clear error flags
    MCP2515_ClearAllErrors();
 8002a22:	f7ff fb35 	bl	8002090 <MCP2515_ClearAllErrors>
    
    // Step 3: Loopback mode test
    if (MCP2515_LoopbackTest() == MCP2515_OK) {
 8002a26:	f7ff fb45 	bl	80020b4 <MCP2515_LoopbackTest>
 8002a2a:	4603      	mov	r3, r0
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d123      	bne.n	8002a78 <CAN_DiagnoseAndFix+0x64>
        printf("\r\nSUCCESS: MCP2515 hardware is functioning normally\r\n");
 8002a30:	4824      	ldr	r0, [pc, #144]	@ (8002ac4 <CAN_DiagnoseAndFix+0xb0>)
 8002a32:	f005 fceb 	bl	800840c <puts>
        printf("Possible issues:\r\n");
 8002a36:	4824      	ldr	r0, [pc, #144]	@ (8002ac8 <CAN_DiagnoseAndFix+0xb4>)
 8002a38:	f005 fce8 	bl	800840c <puts>
        printf("   1. No other CAN nodes on the bus to acknowledge\r\n");
 8002a3c:	4823      	ldr	r0, [pc, #140]	@ (8002acc <CAN_DiagnoseAndFix+0xb8>)
 8002a3e:	f005 fce5 	bl	800840c <puts>
        printf("   2. Termination resistors not properly installed\r\n");
 8002a42:	4823      	ldr	r0, [pc, #140]	@ (8002ad0 <CAN_DiagnoseAndFix+0xbc>)
 8002a44:	f005 fce2 	bl	800840c <puts>
        printf("   3. CAN transceiver connection problems\r\n");
 8002a48:	4822      	ldr	r0, [pc, #136]	@ (8002ad4 <CAN_DiagnoseAndFix+0xc0>)
 8002a4a:	f005 fcdf 	bl	800840c <puts>
        
        printf("\r\nSuggested solutions:\r\n");
 8002a4e:	4822      	ldr	r0, [pc, #136]	@ (8002ad8 <CAN_DiagnoseAndFix+0xc4>)
 8002a50:	f005 fcdc 	bl	800840c <puts>
        printf("   1. Add 120 ohm resistor between CAN_H and CAN_L\r\n");
 8002a54:	4821      	ldr	r0, [pc, #132]	@ (8002adc <CAN_DiagnoseAndFix+0xc8>)
 8002a56:	f005 fcd9 	bl	800840c <puts>
        printf("   2. Connect a second CAN node or CAN analyzer\r\n");
 8002a5a:	4821      	ldr	r0, [pc, #132]	@ (8002ae0 <CAN_DiagnoseAndFix+0xcc>)
 8002a5c:	f005 fcd6 	bl	800840c <puts>
        printf("   3. Check TJA1050 transceiver connections\r\n");
 8002a60:	4820      	ldr	r0, [pc, #128]	@ (8002ae4 <CAN_DiagnoseAndFix+0xd0>)
 8002a62:	f005 fcd3 	bl	800840c <puts>
        
        printf("\r\n--- Starting CANOE Test Mode ---\r\n");
 8002a66:	4820      	ldr	r0, [pc, #128]	@ (8002ae8 <CAN_DiagnoseAndFix+0xd4>)
 8002a68:	f005 fcd0 	bl	800840c <puts>
        printf("Since hardware is OK, testing CAN transmission for CANOE...\r\n");
 8002a6c:	481f      	ldr	r0, [pc, #124]	@ (8002aec <CAN_DiagnoseAndFix+0xd8>)
 8002a6e:	f005 fccd 	bl	800840c <puts>
        MCP2515_CANOETest();
 8002a72:	f7ff fd5d 	bl	8002530 <MCP2515_CANOETest>
 8002a76:	e00e      	b.n	8002a96 <CAN_DiagnoseAndFix+0x82>
    } else {
        printf("\r\nERROR: MCP2515 hardware may have problems\r\n");
 8002a78:	481d      	ldr	r0, [pc, #116]	@ (8002af0 <CAN_DiagnoseAndFix+0xdc>)
 8002a7a:	f005 fcc7 	bl	800840c <puts>
        printf("Suggested checks:\r\n");
 8002a7e:	481d      	ldr	r0, [pc, #116]	@ (8002af4 <CAN_DiagnoseAndFix+0xe0>)
 8002a80:	f005 fcc4 	bl	800840c <puts>
        printf("   1. Verify SPI connections are correct\r\n");
 8002a84:	481c      	ldr	r0, [pc, #112]	@ (8002af8 <CAN_DiagnoseAndFix+0xe4>)
 8002a86:	f005 fcc1 	bl	800840c <puts>
        printf("   2. Check MCP2515 power supply\r\n");
 8002a8a:	481c      	ldr	r0, [pc, #112]	@ (8002afc <CAN_DiagnoseAndFix+0xe8>)
 8002a8c:	f005 fcbe 	bl	800840c <puts>
        printf("   3. Verify crystal oscillator is working\r\n");
 8002a90:	481b      	ldr	r0, [pc, #108]	@ (8002b00 <CAN_DiagnoseAndFix+0xec>)
 8002a92:	f005 fcbb 	bl	800840c <puts>
    }
    
    // Step 4: Re-initialize
    printf("\r\nRe-initializing MCP2515...\r\n");
 8002a96:	481b      	ldr	r0, [pc, #108]	@ (8002b04 <CAN_DiagnoseAndFix+0xf0>)
 8002a98:	f005 fcb8 	bl	800840c <puts>
    if (MCP2515_Init(MCP2515_BAUD_500K) == MCP2515_OK) {
 8002a9c:	2002      	movs	r0, #2
 8002a9e:	f7fe fcef 	bl	8001480 <MCP2515_Init>
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	2b00      	cmp	r3, #0
 8002aa6:	d103      	bne.n	8002ab0 <CAN_DiagnoseAndFix+0x9c>
        printf("OK: MCP2515 re-initialization successful\r\n");
 8002aa8:	4817      	ldr	r0, [pc, #92]	@ (8002b08 <CAN_DiagnoseAndFix+0xf4>)
 8002aaa:	f005 fcaf 	bl	800840c <puts>
 8002aae:	e002      	b.n	8002ab6 <CAN_DiagnoseAndFix+0xa2>
    } else {
        printf("ERROR: MCP2515 re-initialization failed\r\n");
 8002ab0:	4816      	ldr	r0, [pc, #88]	@ (8002b0c <CAN_DiagnoseAndFix+0xf8>)
 8002ab2:	f005 fcab 	bl	800840c <puts>
    }
    
    printf("\r\nDiagnosis and repair process completed\r\n");
 8002ab6:	4816      	ldr	r0, [pc, #88]	@ (8002b10 <CAN_DiagnoseAndFix+0xfc>)
 8002ab8:	f005 fca8 	bl	800840c <puts>
 8002abc:	bf00      	nop
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	0800b8e8 	.word	0x0800b8e8
 8002ac4:	0800b920 	.word	0x0800b920
 8002ac8:	0800b958 	.word	0x0800b958
 8002acc:	0800b96c 	.word	0x0800b96c
 8002ad0:	0800b9a0 	.word	0x0800b9a0
 8002ad4:	0800b9d4 	.word	0x0800b9d4
 8002ad8:	0800ba00 	.word	0x0800ba00
 8002adc:	0800ba18 	.word	0x0800ba18
 8002ae0:	0800ba4c 	.word	0x0800ba4c
 8002ae4:	0800ba80 	.word	0x0800ba80
 8002ae8:	0800b84c 	.word	0x0800b84c
 8002aec:	0800bab0 	.word	0x0800bab0
 8002af0:	0800baf0 	.word	0x0800baf0
 8002af4:	0800bb20 	.word	0x0800bb20
 8002af8:	0800bb34 	.word	0x0800bb34
 8002afc:	0800bb60 	.word	0x0800bb60
 8002b00:	0800bb84 	.word	0x0800bb84
 8002b04:	0800bbb0 	.word	0x0800bbb0
 8002b08:	0800bbd0 	.word	0x0800bbd0
 8002b0c:	0800bbfc 	.word	0x0800bbfc
 8002b10:	0800bc28 	.word	0x0800bc28

08002b14 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002b14:	b580      	push	{r7, lr}
 8002b16:	b082      	sub	sp, #8
 8002b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002b1a:	2300      	movs	r3, #0
 8002b1c:	607b      	str	r3, [r7, #4]
 8002b1e:	4b12      	ldr	r3, [pc, #72]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b20:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b22:	4a11      	ldr	r2, [pc, #68]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b24:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002b28:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b2a:	4b0f      	ldr	r3, [pc, #60]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b2e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002b32:	607b      	str	r3, [r7, #4]
 8002b34:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002b36:	2300      	movs	r3, #0
 8002b38:	603b      	str	r3, [r7, #0]
 8002b3a:	4b0b      	ldr	r3, [pc, #44]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b3e:	4a0a      	ldr	r2, [pc, #40]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8002b46:	4b08      	ldr	r3, [pc, #32]	@ (8002b68 <HAL_MspInit+0x54>)
 8002b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002b4e:	603b      	str	r3, [r7, #0]
 8002b50:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8002b52:	2200      	movs	r2, #0
 8002b54:	210f      	movs	r1, #15
 8002b56:	f06f 0001 	mvn.w	r0, #1
 8002b5a:	f000 fb1d 	bl	8003198 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002b5e:	bf00      	nop
 8002b60:	3708      	adds	r7, #8
 8002b62:	46bd      	mov	sp, r7
 8002b64:	bd80      	pop	{r7, pc}
 8002b66:	bf00      	nop
 8002b68:	40023800 	.word	0x40023800

08002b6c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002b6c:	b580      	push	{r7, lr}
 8002b6e:	b08a      	sub	sp, #40	@ 0x28
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	2200      	movs	r2, #0
 8002b7a:	601a      	str	r2, [r3, #0]
 8002b7c:	605a      	str	r2, [r3, #4]
 8002b7e:	609a      	str	r2, [r3, #8]
 8002b80:	60da      	str	r2, [r3, #12]
 8002b82:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a19      	ldr	r2, [pc, #100]	@ (8002bf0 <HAL_SPI_MspInit+0x84>)
 8002b8a:	4293      	cmp	r3, r2
 8002b8c:	d12b      	bne.n	8002be6 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002b8e:	2300      	movs	r3, #0
 8002b90:	613b      	str	r3, [r7, #16]
 8002b92:	4b18      	ldr	r3, [pc, #96]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b96:	4a17      	ldr	r2, [pc, #92]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002b98:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002b9c:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b9e:	4b15      	ldr	r3, [pc, #84]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002ba0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ba2:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002ba6:	613b      	str	r3, [r7, #16]
 8002ba8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002baa:	2300      	movs	r3, #0
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	4b11      	ldr	r3, [pc, #68]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bb2:	4a10      	ldr	r2, [pc, #64]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bb4:	f043 0302 	orr.w	r3, r3, #2
 8002bb8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002bba:	4b0e      	ldr	r3, [pc, #56]	@ (8002bf4 <HAL_SPI_MspInit+0x88>)
 8002bbc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002bbe:	f003 0302 	and.w	r3, r3, #2
 8002bc2:	60fb      	str	r3, [r7, #12]
 8002bc4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002bc6:	2338      	movs	r3, #56	@ 0x38
 8002bc8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bca:	2302      	movs	r3, #2
 8002bcc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bce:	2300      	movs	r3, #0
 8002bd0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bd2:	2303      	movs	r3, #3
 8002bd4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002bd6:	2305      	movs	r3, #5
 8002bd8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002bda:	f107 0314 	add.w	r3, r7, #20
 8002bde:	4619      	mov	r1, r3
 8002be0:	4805      	ldr	r0, [pc, #20]	@ (8002bf8 <HAL_SPI_MspInit+0x8c>)
 8002be2:	f000 fb03 	bl	80031ec <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002be6:	bf00      	nop
 8002be8:	3728      	adds	r7, #40	@ 0x28
 8002bea:	46bd      	mov	sp, r7
 8002bec:	bd80      	pop	{r7, pc}
 8002bee:	bf00      	nop
 8002bf0:	40013000 	.word	0x40013000
 8002bf4:	40023800 	.word	0x40023800
 8002bf8:	40020400 	.word	0x40020400

08002bfc <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b08a      	sub	sp, #40	@ 0x28
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c04:	f107 0314 	add.w	r3, r7, #20
 8002c08:	2200      	movs	r2, #0
 8002c0a:	601a      	str	r2, [r3, #0]
 8002c0c:	605a      	str	r2, [r3, #4]
 8002c0e:	609a      	str	r2, [r3, #8]
 8002c10:	60da      	str	r2, [r3, #12]
 8002c12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	681b      	ldr	r3, [r3, #0]
 8002c18:	4a19      	ldr	r2, [pc, #100]	@ (8002c80 <HAL_UART_MspInit+0x84>)
 8002c1a:	4293      	cmp	r3, r2
 8002c1c:	d12b      	bne.n	8002c76 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c1e:	2300      	movs	r3, #0
 8002c20:	613b      	str	r3, [r7, #16]
 8002c22:	4b18      	ldr	r3, [pc, #96]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c24:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c26:	4a17      	ldr	r2, [pc, #92]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c28:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002c2c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002c2e:	4b15      	ldr	r3, [pc, #84]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c30:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002c36:	613b      	str	r3, [r7, #16]
 8002c38:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c3a:	2300      	movs	r3, #0
 8002c3c:	60fb      	str	r3, [r7, #12]
 8002c3e:	4b11      	ldr	r3, [pc, #68]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c42:	4a10      	ldr	r2, [pc, #64]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c44:	f043 0301 	orr.w	r3, r3, #1
 8002c48:	6313      	str	r3, [r2, #48]	@ 0x30
 8002c4a:	4b0e      	ldr	r3, [pc, #56]	@ (8002c84 <HAL_UART_MspInit+0x88>)
 8002c4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002c4e:	f003 0301 	and.w	r3, r3, #1
 8002c52:	60fb      	str	r3, [r7, #12]
 8002c54:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002c56:	230c      	movs	r3, #12
 8002c58:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c5a:	2302      	movs	r3, #2
 8002c5c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c5e:	2300      	movs	r3, #0
 8002c60:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c62:	2303      	movs	r3, #3
 8002c64:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c66:	2307      	movs	r3, #7
 8002c68:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c6a:	f107 0314 	add.w	r3, r7, #20
 8002c6e:	4619      	mov	r1, r3
 8002c70:	4805      	ldr	r0, [pc, #20]	@ (8002c88 <HAL_UART_MspInit+0x8c>)
 8002c72:	f000 fabb 	bl	80031ec <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002c76:	bf00      	nop
 8002c78:	3728      	adds	r7, #40	@ 0x28
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	40004400 	.word	0x40004400
 8002c84:	40023800 	.word	0x40023800
 8002c88:	40020000 	.word	0x40020000

08002c8c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002c8c:	b580      	push	{r7, lr}
 8002c8e:	b08c      	sub	sp, #48	@ 0x30
 8002c90:	af00      	add	r7, sp, #0
 8002c92:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002c94:	2300      	movs	r3, #0
 8002c96:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002c98:	2300      	movs	r3, #0
 8002c9a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002c9c:	2300      	movs	r3, #0
 8002c9e:	60bb      	str	r3, [r7, #8]
 8002ca0:	4b2f      	ldr	r3, [pc, #188]	@ (8002d60 <HAL_InitTick+0xd4>)
 8002ca2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ca4:	4a2e      	ldr	r2, [pc, #184]	@ (8002d60 <HAL_InitTick+0xd4>)
 8002ca6:	f043 0301 	orr.w	r3, r3, #1
 8002caa:	6453      	str	r3, [r2, #68]	@ 0x44
 8002cac:	4b2c      	ldr	r3, [pc, #176]	@ (8002d60 <HAL_InitTick+0xd4>)
 8002cae:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002cb0:	f003 0301 	and.w	r3, r3, #1
 8002cb4:	60bb      	str	r3, [r7, #8]
 8002cb6:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002cb8:	f107 020c 	add.w	r2, r7, #12
 8002cbc:	f107 0310 	add.w	r3, r7, #16
 8002cc0:	4611      	mov	r1, r2
 8002cc2:	4618      	mov	r0, r3
 8002cc4:	f001 f904 	bl	8003ed0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002cc8:	f001 f8ee 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8002ccc:	4603      	mov	r3, r0
 8002cce:	005b      	lsls	r3, r3, #1
 8002cd0:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002cd2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002cd4:	4a23      	ldr	r2, [pc, #140]	@ (8002d64 <HAL_InitTick+0xd8>)
 8002cd6:	fba2 2303 	umull	r2, r3, r2, r3
 8002cda:	0c9b      	lsrs	r3, r3, #18
 8002cdc:	3b01      	subs	r3, #1
 8002cde:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002ce0:	4b21      	ldr	r3, [pc, #132]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002ce2:	4a22      	ldr	r2, [pc, #136]	@ (8002d6c <HAL_InitTick+0xe0>)
 8002ce4:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002ce6:	4b20      	ldr	r3, [pc, #128]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002ce8:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002cec:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002cee:	4a1e      	ldr	r2, [pc, #120]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002cf4:	4b1c      	ldr	r3, [pc, #112]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002cfa:	4b1b      	ldr	r3, [pc, #108]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002d00:	4b19      	ldr	r3, [pc, #100]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002d06:	4818      	ldr	r0, [pc, #96]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002d08:	f001 fc2e 	bl	8004568 <HAL_TIM_Base_Init>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002d12:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d16:	2b00      	cmp	r3, #0
 8002d18:	d11b      	bne.n	8002d52 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002d1a:	4813      	ldr	r0, [pc, #76]	@ (8002d68 <HAL_InitTick+0xdc>)
 8002d1c:	f001 fc7e 	bl	800461c <HAL_TIM_Base_Start_IT>
 8002d20:	4603      	mov	r3, r0
 8002d22:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002d26:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002d2a:	2b00      	cmp	r3, #0
 8002d2c:	d111      	bne.n	8002d52 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002d2e:	2019      	movs	r0, #25
 8002d30:	f000 fa4e 	bl	80031d0 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2b0f      	cmp	r3, #15
 8002d38:	d808      	bhi.n	8002d4c <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002d3a:	2200      	movs	r2, #0
 8002d3c:	6879      	ldr	r1, [r7, #4]
 8002d3e:	2019      	movs	r0, #25
 8002d40:	f000 fa2a 	bl	8003198 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002d44:	4a0a      	ldr	r2, [pc, #40]	@ (8002d70 <HAL_InitTick+0xe4>)
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6013      	str	r3, [r2, #0]
 8002d4a:	e002      	b.n	8002d52 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002d4c:	2301      	movs	r3, #1
 8002d4e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002d52:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002d56:	4618      	mov	r0, r3
 8002d58:	3730      	adds	r7, #48	@ 0x30
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	bd80      	pop	{r7, pc}
 8002d5e:	bf00      	nop
 8002d60:	40023800 	.word	0x40023800
 8002d64:	431bde83 	.word	0x431bde83
 8002d68:	20000150 	.word	0x20000150
 8002d6c:	40010000 	.word	0x40010000
 8002d70:	20000004 	.word	0x20000004

08002d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002d78:	bf00      	nop
 8002d7a:	e7fd      	b.n	8002d78 <NMI_Handler+0x4>

08002d7c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002d7c:	b480      	push	{r7}
 8002d7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002d80:	bf00      	nop
 8002d82:	e7fd      	b.n	8002d80 <HardFault_Handler+0x4>

08002d84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002d84:	b480      	push	{r7}
 8002d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002d88:	bf00      	nop
 8002d8a:	e7fd      	b.n	8002d88 <MemManage_Handler+0x4>

08002d8c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002d8c:	b480      	push	{r7}
 8002d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002d90:	bf00      	nop
 8002d92:	e7fd      	b.n	8002d90 <BusFault_Handler+0x4>

08002d94 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002d98:	bf00      	nop
 8002d9a:	e7fd      	b.n	8002d98 <UsageFault_Handler+0x4>

08002d9c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002d9c:	b480      	push	{r7}
 8002d9e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002da0:	bf00      	nop
 8002da2:	46bd      	mov	sp, r7
 8002da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da8:	4770      	bx	lr
	...

08002dac <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002dac:	b580      	push	{r7, lr}
 8002dae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002db0:	4802      	ldr	r0, [pc, #8]	@ (8002dbc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002db2:	f001 fca3 	bl	80046fc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002db6:	bf00      	nop
 8002db8:	bd80      	pop	{r7, pc}
 8002dba:	bf00      	nop
 8002dbc:	20000150 	.word	0x20000150

08002dc0 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002dc0:	b580      	push	{r7, lr}
 8002dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 8002dc4:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002dc8:	f000 fbc6 	bl	8003558 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  // MCP2515中断处理
  // 注意：这里只是触发中断标志，实际处理在CAN任务中进行
  CAN_App_IRQ_Callback();
 8002dcc:	f7fd ff44 	bl	8000c58 <CAN_App_IRQ_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002dd0:	bf00      	nop
 8002dd2:	bd80      	pop	{r7, pc}

08002dd4 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002dd4:	b580      	push	{r7, lr}
 8002dd6:	b086      	sub	sp, #24
 8002dd8:	af00      	add	r7, sp, #0
 8002dda:	60f8      	str	r0, [r7, #12]
 8002ddc:	60b9      	str	r1, [r7, #8]
 8002dde:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002de0:	2300      	movs	r3, #0
 8002de2:	617b      	str	r3, [r7, #20]
 8002de4:	e00a      	b.n	8002dfc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002de6:	f3af 8000 	nop.w
 8002dea:	4601      	mov	r1, r0
 8002dec:	68bb      	ldr	r3, [r7, #8]
 8002dee:	1c5a      	adds	r2, r3, #1
 8002df0:	60ba      	str	r2, [r7, #8]
 8002df2:	b2ca      	uxtb	r2, r1
 8002df4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002df6:	697b      	ldr	r3, [r7, #20]
 8002df8:	3301      	adds	r3, #1
 8002dfa:	617b      	str	r3, [r7, #20]
 8002dfc:	697a      	ldr	r2, [r7, #20]
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	429a      	cmp	r2, r3
 8002e02:	dbf0      	blt.n	8002de6 <_read+0x12>
  }

  return len;
 8002e04:	687b      	ldr	r3, [r7, #4]
}
 8002e06:	4618      	mov	r0, r3
 8002e08:	3718      	adds	r7, #24
 8002e0a:	46bd      	mov	sp, r7
 8002e0c:	bd80      	pop	{r7, pc}

08002e0e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002e0e:	b480      	push	{r7}
 8002e10:	b083      	sub	sp, #12
 8002e12:	af00      	add	r7, sp, #0
 8002e14:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002e16:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002e1a:	4618      	mov	r0, r3
 8002e1c:	370c      	adds	r7, #12
 8002e1e:	46bd      	mov	sp, r7
 8002e20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e24:	4770      	bx	lr

08002e26 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002e26:	b480      	push	{r7}
 8002e28:	b083      	sub	sp, #12
 8002e2a:	af00      	add	r7, sp, #0
 8002e2c:	6078      	str	r0, [r7, #4]
 8002e2e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002e30:	683b      	ldr	r3, [r7, #0]
 8002e32:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002e36:	605a      	str	r2, [r3, #4]
  return 0;
 8002e38:	2300      	movs	r3, #0
}
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e44:	4770      	bx	lr

08002e46 <_isatty>:

int _isatty(int file)
{
 8002e46:	b480      	push	{r7}
 8002e48:	b083      	sub	sp, #12
 8002e4a:	af00      	add	r7, sp, #0
 8002e4c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002e4e:	2301      	movs	r3, #1
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	370c      	adds	r7, #12
 8002e54:	46bd      	mov	sp, r7
 8002e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e5a:	4770      	bx	lr

08002e5c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002e5c:	b480      	push	{r7}
 8002e5e:	b085      	sub	sp, #20
 8002e60:	af00      	add	r7, sp, #0
 8002e62:	60f8      	str	r0, [r7, #12]
 8002e64:	60b9      	str	r1, [r7, #8]
 8002e66:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002e68:	2300      	movs	r3, #0
}
 8002e6a:	4618      	mov	r0, r3
 8002e6c:	3714      	adds	r7, #20
 8002e6e:	46bd      	mov	sp, r7
 8002e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e74:	4770      	bx	lr
	...

08002e78 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002e78:	b580      	push	{r7, lr}
 8002e7a:	b086      	sub	sp, #24
 8002e7c:	af00      	add	r7, sp, #0
 8002e7e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002e80:	4a14      	ldr	r2, [pc, #80]	@ (8002ed4 <_sbrk+0x5c>)
 8002e82:	4b15      	ldr	r3, [pc, #84]	@ (8002ed8 <_sbrk+0x60>)
 8002e84:	1ad3      	subs	r3, r2, r3
 8002e86:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002e8c:	4b13      	ldr	r3, [pc, #76]	@ (8002edc <_sbrk+0x64>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	2b00      	cmp	r3, #0
 8002e92:	d102      	bne.n	8002e9a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002e94:	4b11      	ldr	r3, [pc, #68]	@ (8002edc <_sbrk+0x64>)
 8002e96:	4a12      	ldr	r2, [pc, #72]	@ (8002ee0 <_sbrk+0x68>)
 8002e98:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002e9a:	4b10      	ldr	r3, [pc, #64]	@ (8002edc <_sbrk+0x64>)
 8002e9c:	681a      	ldr	r2, [r3, #0]
 8002e9e:	687b      	ldr	r3, [r7, #4]
 8002ea0:	4413      	add	r3, r2
 8002ea2:	693a      	ldr	r2, [r7, #16]
 8002ea4:	429a      	cmp	r2, r3
 8002ea6:	d207      	bcs.n	8002eb8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002ea8:	f005 fc4c 	bl	8008744 <__errno>
 8002eac:	4603      	mov	r3, r0
 8002eae:	220c      	movs	r2, #12
 8002eb0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002eb2:	f04f 33ff 	mov.w	r3, #4294967295
 8002eb6:	e009      	b.n	8002ecc <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002eb8:	4b08      	ldr	r3, [pc, #32]	@ (8002edc <_sbrk+0x64>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002ebe:	4b07      	ldr	r3, [pc, #28]	@ (8002edc <_sbrk+0x64>)
 8002ec0:	681a      	ldr	r2, [r3, #0]
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4413      	add	r3, r2
 8002ec6:	4a05      	ldr	r2, [pc, #20]	@ (8002edc <_sbrk+0x64>)
 8002ec8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002eca:	68fb      	ldr	r3, [r7, #12]
}
 8002ecc:	4618      	mov	r0, r3
 8002ece:	3718      	adds	r7, #24
 8002ed0:	46bd      	mov	sp, r7
 8002ed2:	bd80      	pop	{r7, pc}
 8002ed4:	20020000 	.word	0x20020000
 8002ed8:	00000400 	.word	0x00000400
 8002edc:	20000198 	.word	0x20000198
 8002ee0:	20004cd8 	.word	0x20004cd8

08002ee4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002ee4:	b480      	push	{r7}
 8002ee6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002ee8:	4b06      	ldr	r3, [pc, #24]	@ (8002f04 <SystemInit+0x20>)
 8002eea:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002eee:	4a05      	ldr	r2, [pc, #20]	@ (8002f04 <SystemInit+0x20>)
 8002ef0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002ef4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002ef8:	bf00      	nop
 8002efa:	46bd      	mov	sp, r7
 8002efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f00:	4770      	bx	lr
 8002f02:	bf00      	nop
 8002f04:	e000ed00 	.word	0xe000ed00

08002f08 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002f08:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002f40 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002f0c:	f7ff ffea 	bl	8002ee4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f10:	480c      	ldr	r0, [pc, #48]	@ (8002f44 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f12:	490d      	ldr	r1, [pc, #52]	@ (8002f48 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f14:	4a0d      	ldr	r2, [pc, #52]	@ (8002f4c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f16:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f18:	e002      	b.n	8002f20 <LoopCopyDataInit>

08002f1a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f1a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f1c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f1e:	3304      	adds	r3, #4

08002f20 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f20:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f22:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f24:	d3f9      	bcc.n	8002f1a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f26:	4a0a      	ldr	r2, [pc, #40]	@ (8002f50 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f28:	4c0a      	ldr	r4, [pc, #40]	@ (8002f54 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f2a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f2c:	e001      	b.n	8002f32 <LoopFillZerobss>

08002f2e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f2e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f30:	3204      	adds	r2, #4

08002f32 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f32:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f34:	d3fb      	bcc.n	8002f2e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002f36:	f005 fc0b 	bl	8008750 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f3a:	f7fd fe95 	bl	8000c68 <main>
  bx  lr    
 8002f3e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002f40:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002f44:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f48:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002f4c:	0800bd58 	.word	0x0800bd58
  ldr r2, =_sbss
 8002f50:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002f54:	20004cd4 	.word	0x20004cd4

08002f58 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f58:	e7fe      	b.n	8002f58 <ADC_IRQHandler>
	...

08002f5c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002f5c:	b580      	push	{r7, lr}
 8002f5e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002f60:	4b0e      	ldr	r3, [pc, #56]	@ (8002f9c <HAL_Init+0x40>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a0d      	ldr	r2, [pc, #52]	@ (8002f9c <HAL_Init+0x40>)
 8002f66:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002f6a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_Init+0x40>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a0a      	ldr	r2, [pc, #40]	@ (8002f9c <HAL_Init+0x40>)
 8002f72:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002f76:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002f78:	4b08      	ldr	r3, [pc, #32]	@ (8002f9c <HAL_Init+0x40>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	4a07      	ldr	r2, [pc, #28]	@ (8002f9c <HAL_Init+0x40>)
 8002f7e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002f82:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002f84:	2003      	movs	r0, #3
 8002f86:	f000 f8fc 	bl	8003182 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002f8a:	200f      	movs	r0, #15
 8002f8c:	f7ff fe7e 	bl	8002c8c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002f90:	f7ff fdc0 	bl	8002b14 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002f94:	2300      	movs	r3, #0
}
 8002f96:	4618      	mov	r0, r3
 8002f98:	bd80      	pop	{r7, pc}
 8002f9a:	bf00      	nop
 8002f9c:	40023c00 	.word	0x40023c00

08002fa0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002fa4:	4b06      	ldr	r3, [pc, #24]	@ (8002fc0 <HAL_IncTick+0x20>)
 8002fa6:	781b      	ldrb	r3, [r3, #0]
 8002fa8:	461a      	mov	r2, r3
 8002faa:	4b06      	ldr	r3, [pc, #24]	@ (8002fc4 <HAL_IncTick+0x24>)
 8002fac:	681b      	ldr	r3, [r3, #0]
 8002fae:	4413      	add	r3, r2
 8002fb0:	4a04      	ldr	r2, [pc, #16]	@ (8002fc4 <HAL_IncTick+0x24>)
 8002fb2:	6013      	str	r3, [r2, #0]
}
 8002fb4:	bf00      	nop
 8002fb6:	46bd      	mov	sp, r7
 8002fb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fbc:	4770      	bx	lr
 8002fbe:	bf00      	nop
 8002fc0:	20000008 	.word	0x20000008
 8002fc4:	2000019c 	.word	0x2000019c

08002fc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	af00      	add	r7, sp, #0
  return uwTick;
 8002fcc:	4b03      	ldr	r3, [pc, #12]	@ (8002fdc <HAL_GetTick+0x14>)
 8002fce:	681b      	ldr	r3, [r3, #0]
}
 8002fd0:	4618      	mov	r0, r3
 8002fd2:	46bd      	mov	sp, r7
 8002fd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd8:	4770      	bx	lr
 8002fda:	bf00      	nop
 8002fdc:	2000019c 	.word	0x2000019c

08002fe0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002fe0:	b580      	push	{r7, lr}
 8002fe2:	b084      	sub	sp, #16
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002fe8:	f7ff ffee 	bl	8002fc8 <HAL_GetTick>
 8002fec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002fee:	687b      	ldr	r3, [r7, #4]
 8002ff0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002ff2:	68fb      	ldr	r3, [r7, #12]
 8002ff4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002ff8:	d005      	beq.n	8003006 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002ffa:	4b0a      	ldr	r3, [pc, #40]	@ (8003024 <HAL_Delay+0x44>)
 8002ffc:	781b      	ldrb	r3, [r3, #0]
 8002ffe:	461a      	mov	r2, r3
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	4413      	add	r3, r2
 8003004:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003006:	bf00      	nop
 8003008:	f7ff ffde 	bl	8002fc8 <HAL_GetTick>
 800300c:	4602      	mov	r2, r0
 800300e:	68bb      	ldr	r3, [r7, #8]
 8003010:	1ad3      	subs	r3, r2, r3
 8003012:	68fa      	ldr	r2, [r7, #12]
 8003014:	429a      	cmp	r2, r3
 8003016:	d8f7      	bhi.n	8003008 <HAL_Delay+0x28>
  {
  }
}
 8003018:	bf00      	nop
 800301a:	bf00      	nop
 800301c:	3710      	adds	r7, #16
 800301e:	46bd      	mov	sp, r7
 8003020:	bd80      	pop	{r7, pc}
 8003022:	bf00      	nop
 8003024:	20000008 	.word	0x20000008

08003028 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	f003 0307 	and.w	r3, r3, #7
 8003036:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003038:	4b0c      	ldr	r3, [pc, #48]	@ (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800303a:	68db      	ldr	r3, [r3, #12]
 800303c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800303e:	68ba      	ldr	r2, [r7, #8]
 8003040:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8003044:	4013      	ands	r3, r2
 8003046:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003048:	68fb      	ldr	r3, [r7, #12]
 800304a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003050:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8003054:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8003058:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800305a:	4a04      	ldr	r2, [pc, #16]	@ (800306c <__NVIC_SetPriorityGrouping+0x44>)
 800305c:	68bb      	ldr	r3, [r7, #8]
 800305e:	60d3      	str	r3, [r2, #12]
}
 8003060:	bf00      	nop
 8003062:	3714      	adds	r7, #20
 8003064:	46bd      	mov	sp, r7
 8003066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800306a:	4770      	bx	lr
 800306c:	e000ed00 	.word	0xe000ed00

08003070 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003070:	b480      	push	{r7}
 8003072:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003074:	4b04      	ldr	r3, [pc, #16]	@ (8003088 <__NVIC_GetPriorityGrouping+0x18>)
 8003076:	68db      	ldr	r3, [r3, #12]
 8003078:	0a1b      	lsrs	r3, r3, #8
 800307a:	f003 0307 	and.w	r3, r3, #7
}
 800307e:	4618      	mov	r0, r3
 8003080:	46bd      	mov	sp, r7
 8003082:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003086:	4770      	bx	lr
 8003088:	e000ed00 	.word	0xe000ed00

0800308c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800308c:	b480      	push	{r7}
 800308e:	b083      	sub	sp, #12
 8003090:	af00      	add	r7, sp, #0
 8003092:	4603      	mov	r3, r0
 8003094:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003096:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800309a:	2b00      	cmp	r3, #0
 800309c:	db0b      	blt.n	80030b6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800309e:	79fb      	ldrb	r3, [r7, #7]
 80030a0:	f003 021f 	and.w	r2, r3, #31
 80030a4:	4907      	ldr	r1, [pc, #28]	@ (80030c4 <__NVIC_EnableIRQ+0x38>)
 80030a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030aa:	095b      	lsrs	r3, r3, #5
 80030ac:	2001      	movs	r0, #1
 80030ae:	fa00 f202 	lsl.w	r2, r0, r2
 80030b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80030b6:	bf00      	nop
 80030b8:	370c      	adds	r7, #12
 80030ba:	46bd      	mov	sp, r7
 80030bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030c0:	4770      	bx	lr
 80030c2:	bf00      	nop
 80030c4:	e000e100 	.word	0xe000e100

080030c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80030c8:	b480      	push	{r7}
 80030ca:	b083      	sub	sp, #12
 80030cc:	af00      	add	r7, sp, #0
 80030ce:	4603      	mov	r3, r0
 80030d0:	6039      	str	r1, [r7, #0]
 80030d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80030d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	db0a      	blt.n	80030f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030dc:	683b      	ldr	r3, [r7, #0]
 80030de:	b2da      	uxtb	r2, r3
 80030e0:	490c      	ldr	r1, [pc, #48]	@ (8003114 <__NVIC_SetPriority+0x4c>)
 80030e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80030e6:	0112      	lsls	r2, r2, #4
 80030e8:	b2d2      	uxtb	r2, r2
 80030ea:	440b      	add	r3, r1
 80030ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80030f0:	e00a      	b.n	8003108 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80030f2:	683b      	ldr	r3, [r7, #0]
 80030f4:	b2da      	uxtb	r2, r3
 80030f6:	4908      	ldr	r1, [pc, #32]	@ (8003118 <__NVIC_SetPriority+0x50>)
 80030f8:	79fb      	ldrb	r3, [r7, #7]
 80030fa:	f003 030f 	and.w	r3, r3, #15
 80030fe:	3b04      	subs	r3, #4
 8003100:	0112      	lsls	r2, r2, #4
 8003102:	b2d2      	uxtb	r2, r2
 8003104:	440b      	add	r3, r1
 8003106:	761a      	strb	r2, [r3, #24]
}
 8003108:	bf00      	nop
 800310a:	370c      	adds	r7, #12
 800310c:	46bd      	mov	sp, r7
 800310e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003112:	4770      	bx	lr
 8003114:	e000e100 	.word	0xe000e100
 8003118:	e000ed00 	.word	0xe000ed00

0800311c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800311c:	b480      	push	{r7}
 800311e:	b089      	sub	sp, #36	@ 0x24
 8003120:	af00      	add	r7, sp, #0
 8003122:	60f8      	str	r0, [r7, #12]
 8003124:	60b9      	str	r1, [r7, #8]
 8003126:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	f003 0307 	and.w	r3, r3, #7
 800312e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003130:	69fb      	ldr	r3, [r7, #28]
 8003132:	f1c3 0307 	rsb	r3, r3, #7
 8003136:	2b04      	cmp	r3, #4
 8003138:	bf28      	it	cs
 800313a:	2304      	movcs	r3, #4
 800313c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800313e:	69fb      	ldr	r3, [r7, #28]
 8003140:	3304      	adds	r3, #4
 8003142:	2b06      	cmp	r3, #6
 8003144:	d902      	bls.n	800314c <NVIC_EncodePriority+0x30>
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	3b03      	subs	r3, #3
 800314a:	e000      	b.n	800314e <NVIC_EncodePriority+0x32>
 800314c:	2300      	movs	r3, #0
 800314e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003150:	f04f 32ff 	mov.w	r2, #4294967295
 8003154:	69bb      	ldr	r3, [r7, #24]
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43da      	mvns	r2, r3
 800315c:	68bb      	ldr	r3, [r7, #8]
 800315e:	401a      	ands	r2, r3
 8003160:	697b      	ldr	r3, [r7, #20]
 8003162:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003164:	f04f 31ff 	mov.w	r1, #4294967295
 8003168:	697b      	ldr	r3, [r7, #20]
 800316a:	fa01 f303 	lsl.w	r3, r1, r3
 800316e:	43d9      	mvns	r1, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003174:	4313      	orrs	r3, r2
         );
}
 8003176:	4618      	mov	r0, r3
 8003178:	3724      	adds	r7, #36	@ 0x24
 800317a:	46bd      	mov	sp, r7
 800317c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003180:	4770      	bx	lr

08003182 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003182:	b580      	push	{r7, lr}
 8003184:	b082      	sub	sp, #8
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800318a:	6878      	ldr	r0, [r7, #4]
 800318c:	f7ff ff4c 	bl	8003028 <__NVIC_SetPriorityGrouping>
}
 8003190:	bf00      	nop
 8003192:	3708      	adds	r7, #8
 8003194:	46bd      	mov	sp, r7
 8003196:	bd80      	pop	{r7, pc}

08003198 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003198:	b580      	push	{r7, lr}
 800319a:	b086      	sub	sp, #24
 800319c:	af00      	add	r7, sp, #0
 800319e:	4603      	mov	r3, r0
 80031a0:	60b9      	str	r1, [r7, #8]
 80031a2:	607a      	str	r2, [r7, #4]
 80031a4:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80031a6:	2300      	movs	r3, #0
 80031a8:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80031aa:	f7ff ff61 	bl	8003070 <__NVIC_GetPriorityGrouping>
 80031ae:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80031b0:	687a      	ldr	r2, [r7, #4]
 80031b2:	68b9      	ldr	r1, [r7, #8]
 80031b4:	6978      	ldr	r0, [r7, #20]
 80031b6:	f7ff ffb1 	bl	800311c <NVIC_EncodePriority>
 80031ba:	4602      	mov	r2, r0
 80031bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80031c0:	4611      	mov	r1, r2
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7ff ff80 	bl	80030c8 <__NVIC_SetPriority>
}
 80031c8:	bf00      	nop
 80031ca:	3718      	adds	r7, #24
 80031cc:	46bd      	mov	sp, r7
 80031ce:	bd80      	pop	{r7, pc}

080031d0 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031d0:	b580      	push	{r7, lr}
 80031d2:	b082      	sub	sp, #8
 80031d4:	af00      	add	r7, sp, #0
 80031d6:	4603      	mov	r3, r0
 80031d8:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	4618      	mov	r0, r3
 80031e0:	f7ff ff54 	bl	800308c <__NVIC_EnableIRQ>
}
 80031e4:	bf00      	nop
 80031e6:	3708      	adds	r7, #8
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80031ec:	b480      	push	{r7}
 80031ee:	b089      	sub	sp, #36	@ 0x24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
 80031f4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80031f6:	2300      	movs	r3, #0
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80031fa:	2300      	movs	r3, #0
 80031fc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80031fe:	2300      	movs	r3, #0
 8003200:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003202:	2300      	movs	r3, #0
 8003204:	61fb      	str	r3, [r7, #28]
 8003206:	e16b      	b.n	80034e0 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003208:	2201      	movs	r2, #1
 800320a:	69fb      	ldr	r3, [r7, #28]
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003212:	683b      	ldr	r3, [r7, #0]
 8003214:	681b      	ldr	r3, [r3, #0]
 8003216:	697a      	ldr	r2, [r7, #20]
 8003218:	4013      	ands	r3, r2
 800321a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800321c:	693a      	ldr	r2, [r7, #16]
 800321e:	697b      	ldr	r3, [r7, #20]
 8003220:	429a      	cmp	r2, r3
 8003222:	f040 815a 	bne.w	80034da <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003226:	683b      	ldr	r3, [r7, #0]
 8003228:	685b      	ldr	r3, [r3, #4]
 800322a:	f003 0303 	and.w	r3, r3, #3
 800322e:	2b01      	cmp	r3, #1
 8003230:	d005      	beq.n	800323e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003232:	683b      	ldr	r3, [r7, #0]
 8003234:	685b      	ldr	r3, [r3, #4]
 8003236:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800323a:	2b02      	cmp	r3, #2
 800323c:	d130      	bne.n	80032a0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	689b      	ldr	r3, [r3, #8]
 8003242:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003244:	69fb      	ldr	r3, [r7, #28]
 8003246:	005b      	lsls	r3, r3, #1
 8003248:	2203      	movs	r2, #3
 800324a:	fa02 f303 	lsl.w	r3, r2, r3
 800324e:	43db      	mvns	r3, r3
 8003250:	69ba      	ldr	r2, [r7, #24]
 8003252:	4013      	ands	r3, r2
 8003254:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003256:	683b      	ldr	r3, [r7, #0]
 8003258:	68da      	ldr	r2, [r3, #12]
 800325a:	69fb      	ldr	r3, [r7, #28]
 800325c:	005b      	lsls	r3, r3, #1
 800325e:	fa02 f303 	lsl.w	r3, r2, r3
 8003262:	69ba      	ldr	r2, [r7, #24]
 8003264:	4313      	orrs	r3, r2
 8003266:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	69ba      	ldr	r2, [r7, #24]
 800326c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003274:	2201      	movs	r2, #1
 8003276:	69fb      	ldr	r3, [r7, #28]
 8003278:	fa02 f303 	lsl.w	r3, r2, r3
 800327c:	43db      	mvns	r3, r3
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4013      	ands	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003284:	683b      	ldr	r3, [r7, #0]
 8003286:	685b      	ldr	r3, [r3, #4]
 8003288:	091b      	lsrs	r3, r3, #4
 800328a:	f003 0201 	and.w	r2, r3, #1
 800328e:	69fb      	ldr	r3, [r7, #28]
 8003290:	fa02 f303 	lsl.w	r3, r2, r3
 8003294:	69ba      	ldr	r2, [r7, #24]
 8003296:	4313      	orrs	r3, r2
 8003298:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80032a0:	683b      	ldr	r3, [r7, #0]
 80032a2:	685b      	ldr	r3, [r3, #4]
 80032a4:	f003 0303 	and.w	r3, r3, #3
 80032a8:	2b03      	cmp	r3, #3
 80032aa:	d017      	beq.n	80032dc <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	68db      	ldr	r3, [r3, #12]
 80032b0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80032b2:	69fb      	ldr	r3, [r7, #28]
 80032b4:	005b      	lsls	r3, r3, #1
 80032b6:	2203      	movs	r2, #3
 80032b8:	fa02 f303 	lsl.w	r3, r2, r3
 80032bc:	43db      	mvns	r3, r3
 80032be:	69ba      	ldr	r2, [r7, #24]
 80032c0:	4013      	ands	r3, r2
 80032c2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	69fb      	ldr	r3, [r7, #28]
 80032ca:	005b      	lsls	r3, r3, #1
 80032cc:	fa02 f303 	lsl.w	r3, r2, r3
 80032d0:	69ba      	ldr	r2, [r7, #24]
 80032d2:	4313      	orrs	r3, r2
 80032d4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80032dc:	683b      	ldr	r3, [r7, #0]
 80032de:	685b      	ldr	r3, [r3, #4]
 80032e0:	f003 0303 	and.w	r3, r3, #3
 80032e4:	2b02      	cmp	r3, #2
 80032e6:	d123      	bne.n	8003330 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80032e8:	69fb      	ldr	r3, [r7, #28]
 80032ea:	08da      	lsrs	r2, r3, #3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3208      	adds	r2, #8
 80032f0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80032f4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80032f6:	69fb      	ldr	r3, [r7, #28]
 80032f8:	f003 0307 	and.w	r3, r3, #7
 80032fc:	009b      	lsls	r3, r3, #2
 80032fe:	220f      	movs	r2, #15
 8003300:	fa02 f303 	lsl.w	r3, r2, r3
 8003304:	43db      	mvns	r3, r3
 8003306:	69ba      	ldr	r2, [r7, #24]
 8003308:	4013      	ands	r3, r2
 800330a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800330c:	683b      	ldr	r3, [r7, #0]
 800330e:	691a      	ldr	r2, [r3, #16]
 8003310:	69fb      	ldr	r3, [r7, #28]
 8003312:	f003 0307 	and.w	r3, r3, #7
 8003316:	009b      	lsls	r3, r3, #2
 8003318:	fa02 f303 	lsl.w	r3, r2, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4313      	orrs	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003322:	69fb      	ldr	r3, [r7, #28]
 8003324:	08da      	lsrs	r2, r3, #3
 8003326:	687b      	ldr	r3, [r7, #4]
 8003328:	3208      	adds	r2, #8
 800332a:	69b9      	ldr	r1, [r7, #24]
 800332c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	681b      	ldr	r3, [r3, #0]
 8003334:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003336:	69fb      	ldr	r3, [r7, #28]
 8003338:	005b      	lsls	r3, r3, #1
 800333a:	2203      	movs	r2, #3
 800333c:	fa02 f303 	lsl.w	r3, r2, r3
 8003340:	43db      	mvns	r3, r3
 8003342:	69ba      	ldr	r2, [r7, #24]
 8003344:	4013      	ands	r3, r2
 8003346:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003348:	683b      	ldr	r3, [r7, #0]
 800334a:	685b      	ldr	r3, [r3, #4]
 800334c:	f003 0203 	and.w	r2, r3, #3
 8003350:	69fb      	ldr	r3, [r7, #28]
 8003352:	005b      	lsls	r3, r3, #1
 8003354:	fa02 f303 	lsl.w	r3, r2, r3
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	4313      	orrs	r3, r2
 800335c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	69ba      	ldr	r2, [r7, #24]
 8003362:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003364:	683b      	ldr	r3, [r7, #0]
 8003366:	685b      	ldr	r3, [r3, #4]
 8003368:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800336c:	2b00      	cmp	r3, #0
 800336e:	f000 80b4 	beq.w	80034da <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003372:	2300      	movs	r3, #0
 8003374:	60fb      	str	r3, [r7, #12]
 8003376:	4b60      	ldr	r3, [pc, #384]	@ (80034f8 <HAL_GPIO_Init+0x30c>)
 8003378:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800337a:	4a5f      	ldr	r2, [pc, #380]	@ (80034f8 <HAL_GPIO_Init+0x30c>)
 800337c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003380:	6453      	str	r3, [r2, #68]	@ 0x44
 8003382:	4b5d      	ldr	r3, [pc, #372]	@ (80034f8 <HAL_GPIO_Init+0x30c>)
 8003384:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003386:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800338a:	60fb      	str	r3, [r7, #12]
 800338c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800338e:	4a5b      	ldr	r2, [pc, #364]	@ (80034fc <HAL_GPIO_Init+0x310>)
 8003390:	69fb      	ldr	r3, [r7, #28]
 8003392:	089b      	lsrs	r3, r3, #2
 8003394:	3302      	adds	r3, #2
 8003396:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800339a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800339c:	69fb      	ldr	r3, [r7, #28]
 800339e:	f003 0303 	and.w	r3, r3, #3
 80033a2:	009b      	lsls	r3, r3, #2
 80033a4:	220f      	movs	r2, #15
 80033a6:	fa02 f303 	lsl.w	r3, r2, r3
 80033aa:	43db      	mvns	r3, r3
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	4013      	ands	r3, r2
 80033b0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	4a52      	ldr	r2, [pc, #328]	@ (8003500 <HAL_GPIO_Init+0x314>)
 80033b6:	4293      	cmp	r3, r2
 80033b8:	d02b      	beq.n	8003412 <HAL_GPIO_Init+0x226>
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	4a51      	ldr	r2, [pc, #324]	@ (8003504 <HAL_GPIO_Init+0x318>)
 80033be:	4293      	cmp	r3, r2
 80033c0:	d025      	beq.n	800340e <HAL_GPIO_Init+0x222>
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	4a50      	ldr	r2, [pc, #320]	@ (8003508 <HAL_GPIO_Init+0x31c>)
 80033c6:	4293      	cmp	r3, r2
 80033c8:	d01f      	beq.n	800340a <HAL_GPIO_Init+0x21e>
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	4a4f      	ldr	r2, [pc, #316]	@ (800350c <HAL_GPIO_Init+0x320>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d019      	beq.n	8003406 <HAL_GPIO_Init+0x21a>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	4a4e      	ldr	r2, [pc, #312]	@ (8003510 <HAL_GPIO_Init+0x324>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d013      	beq.n	8003402 <HAL_GPIO_Init+0x216>
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	4a4d      	ldr	r2, [pc, #308]	@ (8003514 <HAL_GPIO_Init+0x328>)
 80033de:	4293      	cmp	r3, r2
 80033e0:	d00d      	beq.n	80033fe <HAL_GPIO_Init+0x212>
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	4a4c      	ldr	r2, [pc, #304]	@ (8003518 <HAL_GPIO_Init+0x32c>)
 80033e6:	4293      	cmp	r3, r2
 80033e8:	d007      	beq.n	80033fa <HAL_GPIO_Init+0x20e>
 80033ea:	687b      	ldr	r3, [r7, #4]
 80033ec:	4a4b      	ldr	r2, [pc, #300]	@ (800351c <HAL_GPIO_Init+0x330>)
 80033ee:	4293      	cmp	r3, r2
 80033f0:	d101      	bne.n	80033f6 <HAL_GPIO_Init+0x20a>
 80033f2:	2307      	movs	r3, #7
 80033f4:	e00e      	b.n	8003414 <HAL_GPIO_Init+0x228>
 80033f6:	2308      	movs	r3, #8
 80033f8:	e00c      	b.n	8003414 <HAL_GPIO_Init+0x228>
 80033fa:	2306      	movs	r3, #6
 80033fc:	e00a      	b.n	8003414 <HAL_GPIO_Init+0x228>
 80033fe:	2305      	movs	r3, #5
 8003400:	e008      	b.n	8003414 <HAL_GPIO_Init+0x228>
 8003402:	2304      	movs	r3, #4
 8003404:	e006      	b.n	8003414 <HAL_GPIO_Init+0x228>
 8003406:	2303      	movs	r3, #3
 8003408:	e004      	b.n	8003414 <HAL_GPIO_Init+0x228>
 800340a:	2302      	movs	r3, #2
 800340c:	e002      	b.n	8003414 <HAL_GPIO_Init+0x228>
 800340e:	2301      	movs	r3, #1
 8003410:	e000      	b.n	8003414 <HAL_GPIO_Init+0x228>
 8003412:	2300      	movs	r3, #0
 8003414:	69fa      	ldr	r2, [r7, #28]
 8003416:	f002 0203 	and.w	r2, r2, #3
 800341a:	0092      	lsls	r2, r2, #2
 800341c:	4093      	lsls	r3, r2
 800341e:	69ba      	ldr	r2, [r7, #24]
 8003420:	4313      	orrs	r3, r2
 8003422:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003424:	4935      	ldr	r1, [pc, #212]	@ (80034fc <HAL_GPIO_Init+0x310>)
 8003426:	69fb      	ldr	r3, [r7, #28]
 8003428:	089b      	lsrs	r3, r3, #2
 800342a:	3302      	adds	r3, #2
 800342c:	69ba      	ldr	r2, [r7, #24]
 800342e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003432:	4b3b      	ldr	r3, [pc, #236]	@ (8003520 <HAL_GPIO_Init+0x334>)
 8003434:	689b      	ldr	r3, [r3, #8]
 8003436:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003438:	693b      	ldr	r3, [r7, #16]
 800343a:	43db      	mvns	r3, r3
 800343c:	69ba      	ldr	r2, [r7, #24]
 800343e:	4013      	ands	r3, r2
 8003440:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	685b      	ldr	r3, [r3, #4]
 8003446:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800344a:	2b00      	cmp	r3, #0
 800344c:	d003      	beq.n	8003456 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800344e:	69ba      	ldr	r2, [r7, #24]
 8003450:	693b      	ldr	r3, [r7, #16]
 8003452:	4313      	orrs	r3, r2
 8003454:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003456:	4a32      	ldr	r2, [pc, #200]	@ (8003520 <HAL_GPIO_Init+0x334>)
 8003458:	69bb      	ldr	r3, [r7, #24]
 800345a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800345c:	4b30      	ldr	r3, [pc, #192]	@ (8003520 <HAL_GPIO_Init+0x334>)
 800345e:	68db      	ldr	r3, [r3, #12]
 8003460:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003462:	693b      	ldr	r3, [r7, #16]
 8003464:	43db      	mvns	r3, r3
 8003466:	69ba      	ldr	r2, [r7, #24]
 8003468:	4013      	ands	r3, r2
 800346a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800346c:	683b      	ldr	r3, [r7, #0]
 800346e:	685b      	ldr	r3, [r3, #4]
 8003470:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003474:	2b00      	cmp	r3, #0
 8003476:	d003      	beq.n	8003480 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003478:	69ba      	ldr	r2, [r7, #24]
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	4313      	orrs	r3, r2
 800347e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003480:	4a27      	ldr	r2, [pc, #156]	@ (8003520 <HAL_GPIO_Init+0x334>)
 8003482:	69bb      	ldr	r3, [r7, #24]
 8003484:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003486:	4b26      	ldr	r3, [pc, #152]	@ (8003520 <HAL_GPIO_Init+0x334>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800348c:	693b      	ldr	r3, [r7, #16]
 800348e:	43db      	mvns	r3, r3
 8003490:	69ba      	ldr	r2, [r7, #24]
 8003492:	4013      	ands	r3, r2
 8003494:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800349e:	2b00      	cmp	r3, #0
 80034a0:	d003      	beq.n	80034aa <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80034a2:	69ba      	ldr	r2, [r7, #24]
 80034a4:	693b      	ldr	r3, [r7, #16]
 80034a6:	4313      	orrs	r3, r2
 80034a8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80034aa:	4a1d      	ldr	r2, [pc, #116]	@ (8003520 <HAL_GPIO_Init+0x334>)
 80034ac:	69bb      	ldr	r3, [r7, #24]
 80034ae:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80034b0:	4b1b      	ldr	r3, [pc, #108]	@ (8003520 <HAL_GPIO_Init+0x334>)
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80034b6:	693b      	ldr	r3, [r7, #16]
 80034b8:	43db      	mvns	r3, r3
 80034ba:	69ba      	ldr	r2, [r7, #24]
 80034bc:	4013      	ands	r3, r2
 80034be:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	685b      	ldr	r3, [r3, #4]
 80034c4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80034c8:	2b00      	cmp	r3, #0
 80034ca:	d003      	beq.n	80034d4 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80034cc:	69ba      	ldr	r2, [r7, #24]
 80034ce:	693b      	ldr	r3, [r7, #16]
 80034d0:	4313      	orrs	r3, r2
 80034d2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80034d4:	4a12      	ldr	r2, [pc, #72]	@ (8003520 <HAL_GPIO_Init+0x334>)
 80034d6:	69bb      	ldr	r3, [r7, #24]
 80034d8:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034da:	69fb      	ldr	r3, [r7, #28]
 80034dc:	3301      	adds	r3, #1
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	69fb      	ldr	r3, [r7, #28]
 80034e2:	2b0f      	cmp	r3, #15
 80034e4:	f67f ae90 	bls.w	8003208 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80034e8:	bf00      	nop
 80034ea:	bf00      	nop
 80034ec:	3724      	adds	r7, #36	@ 0x24
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	40023800 	.word	0x40023800
 80034fc:	40013800 	.word	0x40013800
 8003500:	40020000 	.word	0x40020000
 8003504:	40020400 	.word	0x40020400
 8003508:	40020800 	.word	0x40020800
 800350c:	40020c00 	.word	0x40020c00
 8003510:	40021000 	.word	0x40021000
 8003514:	40021400 	.word	0x40021400
 8003518:	40021800 	.word	0x40021800
 800351c:	40021c00 	.word	0x40021c00
 8003520:	40013c00 	.word	0x40013c00

08003524 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003524:	b480      	push	{r7}
 8003526:	b083      	sub	sp, #12
 8003528:	af00      	add	r7, sp, #0
 800352a:	6078      	str	r0, [r7, #4]
 800352c:	460b      	mov	r3, r1
 800352e:	807b      	strh	r3, [r7, #2]
 8003530:	4613      	mov	r3, r2
 8003532:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003534:	787b      	ldrb	r3, [r7, #1]
 8003536:	2b00      	cmp	r3, #0
 8003538:	d003      	beq.n	8003542 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800353a:	887a      	ldrh	r2, [r7, #2]
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003540:	e003      	b.n	800354a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003542:	887b      	ldrh	r3, [r7, #2]
 8003544:	041a      	lsls	r2, r3, #16
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	619a      	str	r2, [r3, #24]
}
 800354a:	bf00      	nop
 800354c:	370c      	adds	r7, #12
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
	...

08003558 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003558:	b580      	push	{r7, lr}
 800355a:	b082      	sub	sp, #8
 800355c:	af00      	add	r7, sp, #0
 800355e:	4603      	mov	r3, r0
 8003560:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003562:	4b08      	ldr	r3, [pc, #32]	@ (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003564:	695a      	ldr	r2, [r3, #20]
 8003566:	88fb      	ldrh	r3, [r7, #6]
 8003568:	4013      	ands	r3, r2
 800356a:	2b00      	cmp	r3, #0
 800356c:	d006      	beq.n	800357c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800356e:	4a05      	ldr	r2, [pc, #20]	@ (8003584 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003570:	88fb      	ldrh	r3, [r7, #6]
 8003572:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003574:	88fb      	ldrh	r3, [r7, #6]
 8003576:	4618      	mov	r0, r3
 8003578:	f000 f806 	bl	8003588 <HAL_GPIO_EXTI_Callback>
  }
}
 800357c:	bf00      	nop
 800357e:	3708      	adds	r7, #8
 8003580:	46bd      	mov	sp, r7
 8003582:	bd80      	pop	{r7, pc}
 8003584:	40013c00 	.word	0x40013c00

08003588 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003588:	b480      	push	{r7}
 800358a:	b083      	sub	sp, #12
 800358c:	af00      	add	r7, sp, #0
 800358e:	4603      	mov	r3, r0
 8003590:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr
	...

080035a0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b086      	sub	sp, #24
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	2b00      	cmp	r3, #0
 80035ac:	d101      	bne.n	80035b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80035ae:	2301      	movs	r3, #1
 80035b0:	e267      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d075      	beq.n	80036aa <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035be:	4b88      	ldr	r3, [pc, #544]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035c0:	689b      	ldr	r3, [r3, #8]
 80035c2:	f003 030c 	and.w	r3, r3, #12
 80035c6:	2b04      	cmp	r3, #4
 80035c8:	d00c      	beq.n	80035e4 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035ca:	4b85      	ldr	r3, [pc, #532]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035cc:	689b      	ldr	r3, [r3, #8]
 80035ce:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80035d2:	2b08      	cmp	r3, #8
 80035d4:	d112      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80035de:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80035e2:	d10b      	bne.n	80035fc <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80035e4:	4b7e      	ldr	r3, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d05b      	beq.n	80036a8 <HAL_RCC_OscConfig+0x108>
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	2b00      	cmp	r3, #0
 80035f6:	d157      	bne.n	80036a8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80035f8:	2301      	movs	r3, #1
 80035fa:	e242      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	685b      	ldr	r3, [r3, #4]
 8003600:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003604:	d106      	bne.n	8003614 <HAL_RCC_OscConfig+0x74>
 8003606:	4b76      	ldr	r3, [pc, #472]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	4a75      	ldr	r2, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800360c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003610:	6013      	str	r3, [r2, #0]
 8003612:	e01d      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	685b      	ldr	r3, [r3, #4]
 8003618:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800361c:	d10c      	bne.n	8003638 <HAL_RCC_OscConfig+0x98>
 800361e:	4b70      	ldr	r3, [pc, #448]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	4a6f      	ldr	r2, [pc, #444]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003624:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003628:	6013      	str	r3, [r2, #0]
 800362a:	4b6d      	ldr	r3, [pc, #436]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800362c:	681b      	ldr	r3, [r3, #0]
 800362e:	4a6c      	ldr	r2, [pc, #432]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003630:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003634:	6013      	str	r3, [r2, #0]
 8003636:	e00b      	b.n	8003650 <HAL_RCC_OscConfig+0xb0>
 8003638:	4b69      	ldr	r3, [pc, #420]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	4a68      	ldr	r2, [pc, #416]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800363e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003642:	6013      	str	r3, [r2, #0]
 8003644:	4b66      	ldr	r3, [pc, #408]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	4a65      	ldr	r2, [pc, #404]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800364a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800364e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	685b      	ldr	r3, [r3, #4]
 8003654:	2b00      	cmp	r3, #0
 8003656:	d013      	beq.n	8003680 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003658:	f7ff fcb6 	bl	8002fc8 <HAL_GetTick>
 800365c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800365e:	e008      	b.n	8003672 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003660:	f7ff fcb2 	bl	8002fc8 <HAL_GetTick>
 8003664:	4602      	mov	r2, r0
 8003666:	693b      	ldr	r3, [r7, #16]
 8003668:	1ad3      	subs	r3, r2, r3
 800366a:	2b64      	cmp	r3, #100	@ 0x64
 800366c:	d901      	bls.n	8003672 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800366e:	2303      	movs	r3, #3
 8003670:	e207      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003672:	4b5b      	ldr	r3, [pc, #364]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800367a:	2b00      	cmp	r3, #0
 800367c:	d0f0      	beq.n	8003660 <HAL_RCC_OscConfig+0xc0>
 800367e:	e014      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003680:	f7ff fca2 	bl	8002fc8 <HAL_GetTick>
 8003684:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003686:	e008      	b.n	800369a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003688:	f7ff fc9e 	bl	8002fc8 <HAL_GetTick>
 800368c:	4602      	mov	r2, r0
 800368e:	693b      	ldr	r3, [r7, #16]
 8003690:	1ad3      	subs	r3, r2, r3
 8003692:	2b64      	cmp	r3, #100	@ 0x64
 8003694:	d901      	bls.n	800369a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003696:	2303      	movs	r3, #3
 8003698:	e1f3      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800369a:	4b51      	ldr	r3, [pc, #324]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d1f0      	bne.n	8003688 <HAL_RCC_OscConfig+0xe8>
 80036a6:	e000      	b.n	80036aa <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80036a8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	f003 0302 	and.w	r3, r3, #2
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d063      	beq.n	800377e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036b6:	4b4a      	ldr	r3, [pc, #296]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036b8:	689b      	ldr	r3, [r3, #8]
 80036ba:	f003 030c 	and.w	r3, r3, #12
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d00b      	beq.n	80036da <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036c2:	4b47      	ldr	r3, [pc, #284]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80036ca:	2b08      	cmp	r3, #8
 80036cc:	d11c      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80036ce:	4b44      	ldr	r3, [pc, #272]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036d0:	685b      	ldr	r3, [r3, #4]
 80036d2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d116      	bne.n	8003708 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80036da:	4b41      	ldr	r3, [pc, #260]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	f003 0302 	and.w	r3, r3, #2
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d005      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	68db      	ldr	r3, [r3, #12]
 80036ea:	2b01      	cmp	r3, #1
 80036ec:	d001      	beq.n	80036f2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80036ee:	2301      	movs	r3, #1
 80036f0:	e1c7      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80036f2:	4b3b      	ldr	r3, [pc, #236]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	691b      	ldr	r3, [r3, #16]
 80036fe:	00db      	lsls	r3, r3, #3
 8003700:	4937      	ldr	r1, [pc, #220]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003702:	4313      	orrs	r3, r2
 8003704:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003706:	e03a      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	68db      	ldr	r3, [r3, #12]
 800370c:	2b00      	cmp	r3, #0
 800370e:	d020      	beq.n	8003752 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003710:	4b34      	ldr	r3, [pc, #208]	@ (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003712:	2201      	movs	r2, #1
 8003714:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003716:	f7ff fc57 	bl	8002fc8 <HAL_GetTick>
 800371a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800371c:	e008      	b.n	8003730 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800371e:	f7ff fc53 	bl	8002fc8 <HAL_GetTick>
 8003722:	4602      	mov	r2, r0
 8003724:	693b      	ldr	r3, [r7, #16]
 8003726:	1ad3      	subs	r3, r2, r3
 8003728:	2b02      	cmp	r3, #2
 800372a:	d901      	bls.n	8003730 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800372c:	2303      	movs	r3, #3
 800372e:	e1a8      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003730:	4b2b      	ldr	r3, [pc, #172]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f003 0302 	and.w	r3, r3, #2
 8003738:	2b00      	cmp	r3, #0
 800373a:	d0f0      	beq.n	800371e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800373c:	4b28      	ldr	r3, [pc, #160]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003744:	687b      	ldr	r3, [r7, #4]
 8003746:	691b      	ldr	r3, [r3, #16]
 8003748:	00db      	lsls	r3, r3, #3
 800374a:	4925      	ldr	r1, [pc, #148]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 800374c:	4313      	orrs	r3, r2
 800374e:	600b      	str	r3, [r1, #0]
 8003750:	e015      	b.n	800377e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003752:	4b24      	ldr	r3, [pc, #144]	@ (80037e4 <HAL_RCC_OscConfig+0x244>)
 8003754:	2200      	movs	r2, #0
 8003756:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003758:	f7ff fc36 	bl	8002fc8 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800375e:	e008      	b.n	8003772 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003760:	f7ff fc32 	bl	8002fc8 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	2b02      	cmp	r3, #2
 800376c:	d901      	bls.n	8003772 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800376e:	2303      	movs	r3, #3
 8003770:	e187      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003772:	4b1b      	ldr	r3, [pc, #108]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f003 0302 	and.w	r3, r3, #2
 800377a:	2b00      	cmp	r3, #0
 800377c:	d1f0      	bne.n	8003760 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	f003 0308 	and.w	r3, r3, #8
 8003786:	2b00      	cmp	r3, #0
 8003788:	d036      	beq.n	80037f8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800378a:	687b      	ldr	r3, [r7, #4]
 800378c:	695b      	ldr	r3, [r3, #20]
 800378e:	2b00      	cmp	r3, #0
 8003790:	d016      	beq.n	80037c0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003792:	4b15      	ldr	r3, [pc, #84]	@ (80037e8 <HAL_RCC_OscConfig+0x248>)
 8003794:	2201      	movs	r2, #1
 8003796:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003798:	f7ff fc16 	bl	8002fc8 <HAL_GetTick>
 800379c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800379e:	e008      	b.n	80037b2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037a0:	f7ff fc12 	bl	8002fc8 <HAL_GetTick>
 80037a4:	4602      	mov	r2, r0
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	1ad3      	subs	r3, r2, r3
 80037aa:	2b02      	cmp	r3, #2
 80037ac:	d901      	bls.n	80037b2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80037ae:	2303      	movs	r3, #3
 80037b0:	e167      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80037b2:	4b0b      	ldr	r3, [pc, #44]	@ (80037e0 <HAL_RCC_OscConfig+0x240>)
 80037b4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037b6:	f003 0302 	and.w	r3, r3, #2
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d0f0      	beq.n	80037a0 <HAL_RCC_OscConfig+0x200>
 80037be:	e01b      	b.n	80037f8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80037c0:	4b09      	ldr	r3, [pc, #36]	@ (80037e8 <HAL_RCC_OscConfig+0x248>)
 80037c2:	2200      	movs	r2, #0
 80037c4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80037c6:	f7ff fbff 	bl	8002fc8 <HAL_GetTick>
 80037ca:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037cc:	e00e      	b.n	80037ec <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80037ce:	f7ff fbfb 	bl	8002fc8 <HAL_GetTick>
 80037d2:	4602      	mov	r2, r0
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	1ad3      	subs	r3, r2, r3
 80037d8:	2b02      	cmp	r3, #2
 80037da:	d907      	bls.n	80037ec <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80037dc:	2303      	movs	r3, #3
 80037de:	e150      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 80037e0:	40023800 	.word	0x40023800
 80037e4:	42470000 	.word	0x42470000
 80037e8:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80037ec:	4b88      	ldr	r3, [pc, #544]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80037ee:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80037f0:	f003 0302 	and.w	r3, r3, #2
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d1ea      	bne.n	80037ce <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	f003 0304 	and.w	r3, r3, #4
 8003800:	2b00      	cmp	r3, #0
 8003802:	f000 8097 	beq.w	8003934 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003806:	2300      	movs	r3, #0
 8003808:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800380a:	4b81      	ldr	r3, [pc, #516]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800380c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800380e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003812:	2b00      	cmp	r3, #0
 8003814:	d10f      	bne.n	8003836 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003816:	2300      	movs	r3, #0
 8003818:	60bb      	str	r3, [r7, #8]
 800381a:	4b7d      	ldr	r3, [pc, #500]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800381c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800381e:	4a7c      	ldr	r2, [pc, #496]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003820:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003824:	6413      	str	r3, [r2, #64]	@ 0x40
 8003826:	4b7a      	ldr	r3, [pc, #488]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003828:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800382a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800382e:	60bb      	str	r3, [r7, #8]
 8003830:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003832:	2301      	movs	r3, #1
 8003834:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003836:	4b77      	ldr	r3, [pc, #476]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003838:	681b      	ldr	r3, [r3, #0]
 800383a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800383e:	2b00      	cmp	r3, #0
 8003840:	d118      	bne.n	8003874 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8003842:	4b74      	ldr	r3, [pc, #464]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	4a73      	ldr	r2, [pc, #460]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 8003848:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800384c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800384e:	f7ff fbbb 	bl	8002fc8 <HAL_GetTick>
 8003852:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003854:	e008      	b.n	8003868 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003856:	f7ff fbb7 	bl	8002fc8 <HAL_GetTick>
 800385a:	4602      	mov	r2, r0
 800385c:	693b      	ldr	r3, [r7, #16]
 800385e:	1ad3      	subs	r3, r2, r3
 8003860:	2b02      	cmp	r3, #2
 8003862:	d901      	bls.n	8003868 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003864:	2303      	movs	r3, #3
 8003866:	e10c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003868:	4b6a      	ldr	r3, [pc, #424]	@ (8003a14 <HAL_RCC_OscConfig+0x474>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003870:	2b00      	cmp	r3, #0
 8003872:	d0f0      	beq.n	8003856 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	689b      	ldr	r3, [r3, #8]
 8003878:	2b01      	cmp	r3, #1
 800387a:	d106      	bne.n	800388a <HAL_RCC_OscConfig+0x2ea>
 800387c:	4b64      	ldr	r3, [pc, #400]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800387e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003880:	4a63      	ldr	r2, [pc, #396]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003882:	f043 0301 	orr.w	r3, r3, #1
 8003886:	6713      	str	r3, [r2, #112]	@ 0x70
 8003888:	e01c      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	689b      	ldr	r3, [r3, #8]
 800388e:	2b05      	cmp	r3, #5
 8003890:	d10c      	bne.n	80038ac <HAL_RCC_OscConfig+0x30c>
 8003892:	4b5f      	ldr	r3, [pc, #380]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003894:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003896:	4a5e      	ldr	r2, [pc, #376]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003898:	f043 0304 	orr.w	r3, r3, #4
 800389c:	6713      	str	r3, [r2, #112]	@ 0x70
 800389e:	4b5c      	ldr	r3, [pc, #368]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038a2:	4a5b      	ldr	r2, [pc, #364]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038a4:	f043 0301 	orr.w	r3, r3, #1
 80038a8:	6713      	str	r3, [r2, #112]	@ 0x70
 80038aa:	e00b      	b.n	80038c4 <HAL_RCC_OscConfig+0x324>
 80038ac:	4b58      	ldr	r3, [pc, #352]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ae:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038b0:	4a57      	ldr	r2, [pc, #348]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038b2:	f023 0301 	bic.w	r3, r3, #1
 80038b6:	6713      	str	r3, [r2, #112]	@ 0x70
 80038b8:	4b55      	ldr	r3, [pc, #340]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038bc:	4a54      	ldr	r2, [pc, #336]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038be:	f023 0304 	bic.w	r3, r3, #4
 80038c2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	689b      	ldr	r3, [r3, #8]
 80038c8:	2b00      	cmp	r3, #0
 80038ca:	d015      	beq.n	80038f8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80038cc:	f7ff fb7c 	bl	8002fc8 <HAL_GetTick>
 80038d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038d2:	e00a      	b.n	80038ea <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80038d4:	f7ff fb78 	bl	8002fc8 <HAL_GetTick>
 80038d8:	4602      	mov	r2, r0
 80038da:	693b      	ldr	r3, [r7, #16]
 80038dc:	1ad3      	subs	r3, r2, r3
 80038de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038e2:	4293      	cmp	r3, r2
 80038e4:	d901      	bls.n	80038ea <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80038e6:	2303      	movs	r3, #3
 80038e8:	e0cb      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80038ea:	4b49      	ldr	r3, [pc, #292]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80038ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d0ee      	beq.n	80038d4 <HAL_RCC_OscConfig+0x334>
 80038f6:	e014      	b.n	8003922 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80038f8:	f7ff fb66 	bl	8002fc8 <HAL_GetTick>
 80038fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80038fe:	e00a      	b.n	8003916 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003900:	f7ff fb62 	bl	8002fc8 <HAL_GetTick>
 8003904:	4602      	mov	r2, r0
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	1ad3      	subs	r3, r2, r3
 800390a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800390e:	4293      	cmp	r3, r2
 8003910:	d901      	bls.n	8003916 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003912:	2303      	movs	r3, #3
 8003914:	e0b5      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003916:	4b3e      	ldr	r3, [pc, #248]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003918:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800391a:	f003 0302 	and.w	r3, r3, #2
 800391e:	2b00      	cmp	r3, #0
 8003920:	d1ee      	bne.n	8003900 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003922:	7dfb      	ldrb	r3, [r7, #23]
 8003924:	2b01      	cmp	r3, #1
 8003926:	d105      	bne.n	8003934 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003928:	4b39      	ldr	r3, [pc, #228]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800392c:	4a38      	ldr	r2, [pc, #224]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 800392e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003932:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	699b      	ldr	r3, [r3, #24]
 8003938:	2b00      	cmp	r3, #0
 800393a:	f000 80a1 	beq.w	8003a80 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800393e:	4b34      	ldr	r3, [pc, #208]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003940:	689b      	ldr	r3, [r3, #8]
 8003942:	f003 030c 	and.w	r3, r3, #12
 8003946:	2b08      	cmp	r3, #8
 8003948:	d05c      	beq.n	8003a04 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	699b      	ldr	r3, [r3, #24]
 800394e:	2b02      	cmp	r3, #2
 8003950:	d141      	bne.n	80039d6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003952:	4b31      	ldr	r3, [pc, #196]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003958:	f7ff fb36 	bl	8002fc8 <HAL_GetTick>
 800395c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800395e:	e008      	b.n	8003972 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003960:	f7ff fb32 	bl	8002fc8 <HAL_GetTick>
 8003964:	4602      	mov	r2, r0
 8003966:	693b      	ldr	r3, [r7, #16]
 8003968:	1ad3      	subs	r3, r2, r3
 800396a:	2b02      	cmp	r3, #2
 800396c:	d901      	bls.n	8003972 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800396e:	2303      	movs	r3, #3
 8003970:	e087      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003972:	4b27      	ldr	r3, [pc, #156]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800397a:	2b00      	cmp	r3, #0
 800397c:	d1f0      	bne.n	8003960 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	69da      	ldr	r2, [r3, #28]
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	6a1b      	ldr	r3, [r3, #32]
 8003986:	431a      	orrs	r2, r3
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800398c:	019b      	lsls	r3, r3, #6
 800398e:	431a      	orrs	r2, r3
 8003990:	687b      	ldr	r3, [r7, #4]
 8003992:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003994:	085b      	lsrs	r3, r3, #1
 8003996:	3b01      	subs	r3, #1
 8003998:	041b      	lsls	r3, r3, #16
 800399a:	431a      	orrs	r2, r3
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80039a0:	061b      	lsls	r3, r3, #24
 80039a2:	491b      	ldr	r1, [pc, #108]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80039a8:	4b1b      	ldr	r3, [pc, #108]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039aa:	2201      	movs	r2, #1
 80039ac:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039ae:	f7ff fb0b 	bl	8002fc8 <HAL_GetTick>
 80039b2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039b4:	e008      	b.n	80039c8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039b6:	f7ff fb07 	bl	8002fc8 <HAL_GetTick>
 80039ba:	4602      	mov	r2, r0
 80039bc:	693b      	ldr	r3, [r7, #16]
 80039be:	1ad3      	subs	r3, r2, r3
 80039c0:	2b02      	cmp	r3, #2
 80039c2:	d901      	bls.n	80039c8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80039c4:	2303      	movs	r3, #3
 80039c6:	e05c      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039c8:	4b11      	ldr	r3, [pc, #68]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d0f0      	beq.n	80039b6 <HAL_RCC_OscConfig+0x416>
 80039d4:	e054      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80039d6:	4b10      	ldr	r3, [pc, #64]	@ (8003a18 <HAL_RCC_OscConfig+0x478>)
 80039d8:	2200      	movs	r2, #0
 80039da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80039dc:	f7ff faf4 	bl	8002fc8 <HAL_GetTick>
 80039e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039e2:	e008      	b.n	80039f6 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80039e4:	f7ff faf0 	bl	8002fc8 <HAL_GetTick>
 80039e8:	4602      	mov	r2, r0
 80039ea:	693b      	ldr	r3, [r7, #16]
 80039ec:	1ad3      	subs	r3, r2, r3
 80039ee:	2b02      	cmp	r3, #2
 80039f0:	d901      	bls.n	80039f6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80039f2:	2303      	movs	r3, #3
 80039f4:	e045      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80039f6:	4b06      	ldr	r3, [pc, #24]	@ (8003a10 <HAL_RCC_OscConfig+0x470>)
 80039f8:	681b      	ldr	r3, [r3, #0]
 80039fa:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039fe:	2b00      	cmp	r3, #0
 8003a00:	d1f0      	bne.n	80039e4 <HAL_RCC_OscConfig+0x444>
 8003a02:	e03d      	b.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	699b      	ldr	r3, [r3, #24]
 8003a08:	2b01      	cmp	r3, #1
 8003a0a:	d107      	bne.n	8003a1c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003a0c:	2301      	movs	r3, #1
 8003a0e:	e038      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
 8003a10:	40023800 	.word	0x40023800
 8003a14:	40007000 	.word	0x40007000
 8003a18:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003a1c:	4b1b      	ldr	r3, [pc, #108]	@ (8003a8c <HAL_RCC_OscConfig+0x4ec>)
 8003a1e:	685b      	ldr	r3, [r3, #4]
 8003a20:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	699b      	ldr	r3, [r3, #24]
 8003a26:	2b01      	cmp	r3, #1
 8003a28:	d028      	beq.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003a34:	429a      	cmp	r2, r3
 8003a36:	d121      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a38:	68fb      	ldr	r3, [r7, #12]
 8003a3a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003a42:	429a      	cmp	r2, r3
 8003a44:	d11a      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a46:	68fa      	ldr	r2, [r7, #12]
 8003a48:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8003a4c:	4013      	ands	r3, r2
 8003a4e:	687a      	ldr	r2, [r7, #4]
 8003a50:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8003a52:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003a54:	4293      	cmp	r3, r2
 8003a56:	d111      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003a62:	085b      	lsrs	r3, r3, #1
 8003a64:	3b01      	subs	r3, #1
 8003a66:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003a68:	429a      	cmp	r2, r3
 8003a6a:	d107      	bne.n	8003a7c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003a76:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003a78:	429a      	cmp	r2, r3
 8003a7a:	d001      	beq.n	8003a80 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8003a7c:	2301      	movs	r3, #1
 8003a7e:	e000      	b.n	8003a82 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003a80:	2300      	movs	r3, #0
}
 8003a82:	4618      	mov	r0, r3
 8003a84:	3718      	adds	r7, #24
 8003a86:	46bd      	mov	sp, r7
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	40023800 	.word	0x40023800

08003a90 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	b084      	sub	sp, #16
 8003a94:	af00      	add	r7, sp, #0
 8003a96:	6078      	str	r0, [r7, #4]
 8003a98:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d101      	bne.n	8003aa4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003aa0:	2301      	movs	r3, #1
 8003aa2:	e0cc      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003aa4:	4b68      	ldr	r3, [pc, #416]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f003 0307 	and.w	r3, r3, #7
 8003aac:	683a      	ldr	r2, [r7, #0]
 8003aae:	429a      	cmp	r2, r3
 8003ab0:	d90c      	bls.n	8003acc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003ab2:	4b65      	ldr	r3, [pc, #404]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003ab4:	683a      	ldr	r2, [r7, #0]
 8003ab6:	b2d2      	uxtb	r2, r2
 8003ab8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003aba:	4b63      	ldr	r3, [pc, #396]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0307 	and.w	r3, r3, #7
 8003ac2:	683a      	ldr	r2, [r7, #0]
 8003ac4:	429a      	cmp	r2, r3
 8003ac6:	d001      	beq.n	8003acc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003ac8:	2301      	movs	r3, #1
 8003aca:	e0b8      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f003 0302 	and.w	r3, r3, #2
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d020      	beq.n	8003b1a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f003 0304 	and.w	r3, r3, #4
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d005      	beq.n	8003af0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003ae4:	4b59      	ldr	r3, [pc, #356]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	4a58      	ldr	r2, [pc, #352]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003aea:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003aee:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003af0:	687b      	ldr	r3, [r7, #4]
 8003af2:	681b      	ldr	r3, [r3, #0]
 8003af4:	f003 0308 	and.w	r3, r3, #8
 8003af8:	2b00      	cmp	r3, #0
 8003afa:	d005      	beq.n	8003b08 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003afc:	4b53      	ldr	r3, [pc, #332]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003afe:	689b      	ldr	r3, [r3, #8]
 8003b00:	4a52      	ldr	r2, [pc, #328]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b02:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003b06:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b08:	4b50      	ldr	r3, [pc, #320]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b0a:	689b      	ldr	r3, [r3, #8]
 8003b0c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	689b      	ldr	r3, [r3, #8]
 8003b14:	494d      	ldr	r1, [pc, #308]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b16:	4313      	orrs	r3, r2
 8003b18:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	f003 0301 	and.w	r3, r3, #1
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d044      	beq.n	8003bb0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	685b      	ldr	r3, [r3, #4]
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d107      	bne.n	8003b3e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003b2e:	4b47      	ldr	r3, [pc, #284]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d119      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b3a:	2301      	movs	r3, #1
 8003b3c:	e07f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	685b      	ldr	r3, [r3, #4]
 8003b42:	2b02      	cmp	r3, #2
 8003b44:	d003      	beq.n	8003b4e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003b4a:	2b03      	cmp	r3, #3
 8003b4c:	d107      	bne.n	8003b5e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003b4e:	4b3f      	ldr	r3, [pc, #252]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003b56:	2b00      	cmp	r3, #0
 8003b58:	d109      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b5a:	2301      	movs	r3, #1
 8003b5c:	e06f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003b5e:	4b3b      	ldr	r3, [pc, #236]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f003 0302 	and.w	r3, r3, #2
 8003b66:	2b00      	cmp	r3, #0
 8003b68:	d101      	bne.n	8003b6e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003b6a:	2301      	movs	r3, #1
 8003b6c:	e067      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003b6e:	4b37      	ldr	r3, [pc, #220]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b70:	689b      	ldr	r3, [r3, #8]
 8003b72:	f023 0203 	bic.w	r2, r3, #3
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	685b      	ldr	r3, [r3, #4]
 8003b7a:	4934      	ldr	r1, [pc, #208]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003b7c:	4313      	orrs	r3, r2
 8003b7e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003b80:	f7ff fa22 	bl	8002fc8 <HAL_GetTick>
 8003b84:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b86:	e00a      	b.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003b88:	f7ff fa1e 	bl	8002fc8 <HAL_GetTick>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	1ad3      	subs	r3, r2, r3
 8003b92:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e04f      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003b9e:	4b2b      	ldr	r3, [pc, #172]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003ba0:	689b      	ldr	r3, [r3, #8]
 8003ba2:	f003 020c 	and.w	r2, r3, #12
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	685b      	ldr	r3, [r3, #4]
 8003baa:	009b      	lsls	r3, r3, #2
 8003bac:	429a      	cmp	r2, r3
 8003bae:	d1eb      	bne.n	8003b88 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003bb0:	4b25      	ldr	r3, [pc, #148]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 0307 	and.w	r3, r3, #7
 8003bb8:	683a      	ldr	r2, [r7, #0]
 8003bba:	429a      	cmp	r2, r3
 8003bbc:	d20c      	bcs.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003bbe:	4b22      	ldr	r3, [pc, #136]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc0:	683a      	ldr	r2, [r7, #0]
 8003bc2:	b2d2      	uxtb	r2, r2
 8003bc4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003bc6:	4b20      	ldr	r3, [pc, #128]	@ (8003c48 <HAL_RCC_ClockConfig+0x1b8>)
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f003 0307 	and.w	r3, r3, #7
 8003bce:	683a      	ldr	r2, [r7, #0]
 8003bd0:	429a      	cmp	r2, r3
 8003bd2:	d001      	beq.n	8003bd8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e032      	b.n	8003c3e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d008      	beq.n	8003bf6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003be4:	4b19      	ldr	r3, [pc, #100]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003be6:	689b      	ldr	r3, [r3, #8]
 8003be8:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	68db      	ldr	r3, [r3, #12]
 8003bf0:	4916      	ldr	r1, [pc, #88]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003bf2:	4313      	orrs	r3, r2
 8003bf4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	f003 0308 	and.w	r3, r3, #8
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d009      	beq.n	8003c16 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003c02:	4b12      	ldr	r3, [pc, #72]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c04:	689b      	ldr	r3, [r3, #8]
 8003c06:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	691b      	ldr	r3, [r3, #16]
 8003c0e:	00db      	lsls	r3, r3, #3
 8003c10:	490e      	ldr	r1, [pc, #56]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c12:	4313      	orrs	r3, r2
 8003c14:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003c16:	f000 f821 	bl	8003c5c <HAL_RCC_GetSysClockFreq>
 8003c1a:	4602      	mov	r2, r0
 8003c1c:	4b0b      	ldr	r3, [pc, #44]	@ (8003c4c <HAL_RCC_ClockConfig+0x1bc>)
 8003c1e:	689b      	ldr	r3, [r3, #8]
 8003c20:	091b      	lsrs	r3, r3, #4
 8003c22:	f003 030f 	and.w	r3, r3, #15
 8003c26:	490a      	ldr	r1, [pc, #40]	@ (8003c50 <HAL_RCC_ClockConfig+0x1c0>)
 8003c28:	5ccb      	ldrb	r3, [r1, r3]
 8003c2a:	fa22 f303 	lsr.w	r3, r2, r3
 8003c2e:	4a09      	ldr	r2, [pc, #36]	@ (8003c54 <HAL_RCC_ClockConfig+0x1c4>)
 8003c30:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003c32:	4b09      	ldr	r3, [pc, #36]	@ (8003c58 <HAL_RCC_ClockConfig+0x1c8>)
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	4618      	mov	r0, r3
 8003c38:	f7ff f828 	bl	8002c8c <HAL_InitTick>

  return HAL_OK;
 8003c3c:	2300      	movs	r3, #0
}
 8003c3e:	4618      	mov	r0, r3
 8003c40:	3710      	adds	r7, #16
 8003c42:	46bd      	mov	sp, r7
 8003c44:	bd80      	pop	{r7, pc}
 8003c46:	bf00      	nop
 8003c48:	40023c00 	.word	0x40023c00
 8003c4c:	40023800 	.word	0x40023800
 8003c50:	0800bcfc 	.word	0x0800bcfc
 8003c54:	20000000 	.word	0x20000000
 8003c58:	20000004 	.word	0x20000004

08003c5c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003c5c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003c60:	b094      	sub	sp, #80	@ 0x50
 8003c62:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003c64:	2300      	movs	r3, #0
 8003c66:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003c68:	2300      	movs	r3, #0
 8003c6a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003c6c:	2300      	movs	r3, #0
 8003c6e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003c70:	2300      	movs	r3, #0
 8003c72:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003c74:	4b79      	ldr	r3, [pc, #484]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c76:	689b      	ldr	r3, [r3, #8]
 8003c78:	f003 030c 	and.w	r3, r3, #12
 8003c7c:	2b08      	cmp	r3, #8
 8003c7e:	d00d      	beq.n	8003c9c <HAL_RCC_GetSysClockFreq+0x40>
 8003c80:	2b08      	cmp	r3, #8
 8003c82:	f200 80e1 	bhi.w	8003e48 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d002      	beq.n	8003c90 <HAL_RCC_GetSysClockFreq+0x34>
 8003c8a:	2b04      	cmp	r3, #4
 8003c8c:	d003      	beq.n	8003c96 <HAL_RCC_GetSysClockFreq+0x3a>
 8003c8e:	e0db      	b.n	8003e48 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003c90:	4b73      	ldr	r3, [pc, #460]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003c92:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c94:	e0db      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003c96:	4b73      	ldr	r3, [pc, #460]	@ (8003e64 <HAL_RCC_GetSysClockFreq+0x208>)
 8003c98:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003c9a:	e0d8      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003c9c:	4b6f      	ldr	r3, [pc, #444]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003ca4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003ca8:	685b      	ldr	r3, [r3, #4]
 8003caa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d063      	beq.n	8003d7a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003cb2:	4b6a      	ldr	r3, [pc, #424]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003cb4:	685b      	ldr	r3, [r3, #4]
 8003cb6:	099b      	lsrs	r3, r3, #6
 8003cb8:	2200      	movs	r2, #0
 8003cba:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003cbc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003cbe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003cc0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003cc4:	633b      	str	r3, [r7, #48]	@ 0x30
 8003cc6:	2300      	movs	r3, #0
 8003cc8:	637b      	str	r3, [r7, #52]	@ 0x34
 8003cca:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003cce:	4622      	mov	r2, r4
 8003cd0:	462b      	mov	r3, r5
 8003cd2:	f04f 0000 	mov.w	r0, #0
 8003cd6:	f04f 0100 	mov.w	r1, #0
 8003cda:	0159      	lsls	r1, r3, #5
 8003cdc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003ce0:	0150      	lsls	r0, r2, #5
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4621      	mov	r1, r4
 8003ce8:	1a51      	subs	r1, r2, r1
 8003cea:	6139      	str	r1, [r7, #16]
 8003cec:	4629      	mov	r1, r5
 8003cee:	eb63 0301 	sbc.w	r3, r3, r1
 8003cf2:	617b      	str	r3, [r7, #20]
 8003cf4:	f04f 0200 	mov.w	r2, #0
 8003cf8:	f04f 0300 	mov.w	r3, #0
 8003cfc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003d00:	4659      	mov	r1, fp
 8003d02:	018b      	lsls	r3, r1, #6
 8003d04:	4651      	mov	r1, sl
 8003d06:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003d0a:	4651      	mov	r1, sl
 8003d0c:	018a      	lsls	r2, r1, #6
 8003d0e:	4651      	mov	r1, sl
 8003d10:	ebb2 0801 	subs.w	r8, r2, r1
 8003d14:	4659      	mov	r1, fp
 8003d16:	eb63 0901 	sbc.w	r9, r3, r1
 8003d1a:	f04f 0200 	mov.w	r2, #0
 8003d1e:	f04f 0300 	mov.w	r3, #0
 8003d22:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003d26:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003d2a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003d2e:	4690      	mov	r8, r2
 8003d30:	4699      	mov	r9, r3
 8003d32:	4623      	mov	r3, r4
 8003d34:	eb18 0303 	adds.w	r3, r8, r3
 8003d38:	60bb      	str	r3, [r7, #8]
 8003d3a:	462b      	mov	r3, r5
 8003d3c:	eb49 0303 	adc.w	r3, r9, r3
 8003d40:	60fb      	str	r3, [r7, #12]
 8003d42:	f04f 0200 	mov.w	r2, #0
 8003d46:	f04f 0300 	mov.w	r3, #0
 8003d4a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003d4e:	4629      	mov	r1, r5
 8003d50:	024b      	lsls	r3, r1, #9
 8003d52:	4621      	mov	r1, r4
 8003d54:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003d58:	4621      	mov	r1, r4
 8003d5a:	024a      	lsls	r2, r1, #9
 8003d5c:	4610      	mov	r0, r2
 8003d5e:	4619      	mov	r1, r3
 8003d60:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003d62:	2200      	movs	r2, #0
 8003d64:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003d66:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003d68:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003d6c:	f7fc fa80 	bl	8000270 <__aeabi_uldivmod>
 8003d70:	4602      	mov	r2, r0
 8003d72:	460b      	mov	r3, r1
 8003d74:	4613      	mov	r3, r2
 8003d76:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003d78:	e058      	b.n	8003e2c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003d7a:	4b38      	ldr	r3, [pc, #224]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003d7c:	685b      	ldr	r3, [r3, #4]
 8003d7e:	099b      	lsrs	r3, r3, #6
 8003d80:	2200      	movs	r2, #0
 8003d82:	4618      	mov	r0, r3
 8003d84:	4611      	mov	r1, r2
 8003d86:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003d8a:	623b      	str	r3, [r7, #32]
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003d90:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003d94:	4642      	mov	r2, r8
 8003d96:	464b      	mov	r3, r9
 8003d98:	f04f 0000 	mov.w	r0, #0
 8003d9c:	f04f 0100 	mov.w	r1, #0
 8003da0:	0159      	lsls	r1, r3, #5
 8003da2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003da6:	0150      	lsls	r0, r2, #5
 8003da8:	4602      	mov	r2, r0
 8003daa:	460b      	mov	r3, r1
 8003dac:	4641      	mov	r1, r8
 8003dae:	ebb2 0a01 	subs.w	sl, r2, r1
 8003db2:	4649      	mov	r1, r9
 8003db4:	eb63 0b01 	sbc.w	fp, r3, r1
 8003db8:	f04f 0200 	mov.w	r2, #0
 8003dbc:	f04f 0300 	mov.w	r3, #0
 8003dc0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003dc4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003dc8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003dcc:	ebb2 040a 	subs.w	r4, r2, sl
 8003dd0:	eb63 050b 	sbc.w	r5, r3, fp
 8003dd4:	f04f 0200 	mov.w	r2, #0
 8003dd8:	f04f 0300 	mov.w	r3, #0
 8003ddc:	00eb      	lsls	r3, r5, #3
 8003dde:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003de2:	00e2      	lsls	r2, r4, #3
 8003de4:	4614      	mov	r4, r2
 8003de6:	461d      	mov	r5, r3
 8003de8:	4643      	mov	r3, r8
 8003dea:	18e3      	adds	r3, r4, r3
 8003dec:	603b      	str	r3, [r7, #0]
 8003dee:	464b      	mov	r3, r9
 8003df0:	eb45 0303 	adc.w	r3, r5, r3
 8003df4:	607b      	str	r3, [r7, #4]
 8003df6:	f04f 0200 	mov.w	r2, #0
 8003dfa:	f04f 0300 	mov.w	r3, #0
 8003dfe:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003e02:	4629      	mov	r1, r5
 8003e04:	028b      	lsls	r3, r1, #10
 8003e06:	4621      	mov	r1, r4
 8003e08:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003e0c:	4621      	mov	r1, r4
 8003e0e:	028a      	lsls	r2, r1, #10
 8003e10:	4610      	mov	r0, r2
 8003e12:	4619      	mov	r1, r3
 8003e14:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003e16:	2200      	movs	r2, #0
 8003e18:	61bb      	str	r3, [r7, #24]
 8003e1a:	61fa      	str	r2, [r7, #28]
 8003e1c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003e20:	f7fc fa26 	bl	8000270 <__aeabi_uldivmod>
 8003e24:	4602      	mov	r2, r0
 8003e26:	460b      	mov	r3, r1
 8003e28:	4613      	mov	r3, r2
 8003e2a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003e2c:	4b0b      	ldr	r3, [pc, #44]	@ (8003e5c <HAL_RCC_GetSysClockFreq+0x200>)
 8003e2e:	685b      	ldr	r3, [r3, #4]
 8003e30:	0c1b      	lsrs	r3, r3, #16
 8003e32:	f003 0303 	and.w	r3, r3, #3
 8003e36:	3301      	adds	r3, #1
 8003e38:	005b      	lsls	r3, r3, #1
 8003e3a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003e3c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003e3e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003e40:	fbb2 f3f3 	udiv	r3, r2, r3
 8003e44:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e46:	e002      	b.n	8003e4e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003e48:	4b05      	ldr	r3, [pc, #20]	@ (8003e60 <HAL_RCC_GetSysClockFreq+0x204>)
 8003e4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003e4c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003e4e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003e50:	4618      	mov	r0, r3
 8003e52:	3750      	adds	r7, #80	@ 0x50
 8003e54:	46bd      	mov	sp, r7
 8003e56:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003e5a:	bf00      	nop
 8003e5c:	40023800 	.word	0x40023800
 8003e60:	00f42400 	.word	0x00f42400
 8003e64:	007a1200 	.word	0x007a1200

08003e68 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003e68:	b480      	push	{r7}
 8003e6a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003e6c:	4b03      	ldr	r3, [pc, #12]	@ (8003e7c <HAL_RCC_GetHCLKFreq+0x14>)
 8003e6e:	681b      	ldr	r3, [r3, #0]
}
 8003e70:	4618      	mov	r0, r3
 8003e72:	46bd      	mov	sp, r7
 8003e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e78:	4770      	bx	lr
 8003e7a:	bf00      	nop
 8003e7c:	20000000 	.word	0x20000000

08003e80 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003e80:	b580      	push	{r7, lr}
 8003e82:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003e84:	f7ff fff0 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	4b05      	ldr	r3, [pc, #20]	@ (8003ea0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003e8c:	689b      	ldr	r3, [r3, #8]
 8003e8e:	0a9b      	lsrs	r3, r3, #10
 8003e90:	f003 0307 	and.w	r3, r3, #7
 8003e94:	4903      	ldr	r1, [pc, #12]	@ (8003ea4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003e96:	5ccb      	ldrb	r3, [r1, r3]
 8003e98:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	bd80      	pop	{r7, pc}
 8003ea0:	40023800 	.word	0x40023800
 8003ea4:	0800bd0c 	.word	0x0800bd0c

08003ea8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003eac:	f7ff ffdc 	bl	8003e68 <HAL_RCC_GetHCLKFreq>
 8003eb0:	4602      	mov	r2, r0
 8003eb2:	4b05      	ldr	r3, [pc, #20]	@ (8003ec8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003eb4:	689b      	ldr	r3, [r3, #8]
 8003eb6:	0b5b      	lsrs	r3, r3, #13
 8003eb8:	f003 0307 	and.w	r3, r3, #7
 8003ebc:	4903      	ldr	r1, [pc, #12]	@ (8003ecc <HAL_RCC_GetPCLK2Freq+0x24>)
 8003ebe:	5ccb      	ldrb	r3, [r1, r3]
 8003ec0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003ec4:	4618      	mov	r0, r3
 8003ec6:	bd80      	pop	{r7, pc}
 8003ec8:	40023800 	.word	0x40023800
 8003ecc:	0800bd0c 	.word	0x0800bd0c

08003ed0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003ed0:	b480      	push	{r7}
 8003ed2:	b083      	sub	sp, #12
 8003ed4:	af00      	add	r7, sp, #0
 8003ed6:	6078      	str	r0, [r7, #4]
 8003ed8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	220f      	movs	r2, #15
 8003ede:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003ee0:	4b12      	ldr	r3, [pc, #72]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003ee2:	689b      	ldr	r3, [r3, #8]
 8003ee4:	f003 0203 	and.w	r2, r3, #3
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003eec:	4b0f      	ldr	r3, [pc, #60]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003eee:	689b      	ldr	r3, [r3, #8]
 8003ef0:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003ef8:	4b0c      	ldr	r3, [pc, #48]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003efa:	689b      	ldr	r3, [r3, #8]
 8003efc:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003f04:	4b09      	ldr	r3, [pc, #36]	@ (8003f2c <HAL_RCC_GetClockConfig+0x5c>)
 8003f06:	689b      	ldr	r3, [r3, #8]
 8003f08:	08db      	lsrs	r3, r3, #3
 8003f0a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003f12:	4b07      	ldr	r3, [pc, #28]	@ (8003f30 <HAL_RCC_GetClockConfig+0x60>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	f003 0207 	and.w	r2, r3, #7
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	601a      	str	r2, [r3, #0]
}
 8003f1e:	bf00      	nop
 8003f20:	370c      	adds	r7, #12
 8003f22:	46bd      	mov	sp, r7
 8003f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f28:	4770      	bx	lr
 8003f2a:	bf00      	nop
 8003f2c:	40023800 	.word	0x40023800
 8003f30:	40023c00 	.word	0x40023c00

08003f34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b082      	sub	sp, #8
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e07b      	b.n	800403e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f4a:	2b00      	cmp	r3, #0
 8003f4c:	d108      	bne.n	8003f60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	685b      	ldr	r3, [r3, #4]
 8003f52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003f56:	d009      	beq.n	8003f6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	61da      	str	r2, [r3, #28]
 8003f5e:	e005      	b.n	8003f6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2200      	movs	r2, #0
 8003f64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	2200      	movs	r2, #0
 8003f70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003f72:	687b      	ldr	r3, [r7, #4]
 8003f74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f78:	b2db      	uxtb	r3, r3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d106      	bne.n	8003f8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f7fe fdf0 	bl	8002b6c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	2202      	movs	r2, #2
 8003f90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003f94:	687b      	ldr	r3, [r7, #4]
 8003f96:	681b      	ldr	r3, [r3, #0]
 8003f98:	681a      	ldr	r2, [r3, #0]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003fa2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	685b      	ldr	r3, [r3, #4]
 8003fa8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	689b      	ldr	r3, [r3, #8]
 8003fb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003fb4:	431a      	orrs	r2, r3
 8003fb6:	687b      	ldr	r3, [r7, #4]
 8003fb8:	68db      	ldr	r3, [r3, #12]
 8003fba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003fbe:	431a      	orrs	r2, r3
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	691b      	ldr	r3, [r3, #16]
 8003fc4:	f003 0302 	and.w	r3, r3, #2
 8003fc8:	431a      	orrs	r2, r3
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	695b      	ldr	r3, [r3, #20]
 8003fce:	f003 0301 	and.w	r3, r3, #1
 8003fd2:	431a      	orrs	r2, r3
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003fdc:	431a      	orrs	r2, r3
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	69db      	ldr	r3, [r3, #28]
 8003fe2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003fe6:	431a      	orrs	r2, r3
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	6a1b      	ldr	r3, [r3, #32]
 8003fec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ff0:	ea42 0103 	orr.w	r1, r2, r3
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003ff8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	430a      	orrs	r2, r1
 8004002:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	699b      	ldr	r3, [r3, #24]
 8004008:	0c1b      	lsrs	r3, r3, #16
 800400a:	f003 0104 	and.w	r1, r3, #4
 800400e:	687b      	ldr	r3, [r7, #4]
 8004010:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004012:	f003 0210 	and.w	r2, r3, #16
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	430a      	orrs	r2, r1
 800401c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	69da      	ldr	r2, [r3, #28]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800402c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	2200      	movs	r2, #0
 8004032:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2201      	movs	r2, #1
 8004038:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800403c:	2300      	movs	r3, #0
}
 800403e:	4618      	mov	r0, r3
 8004040:	3708      	adds	r7, #8
 8004042:	46bd      	mov	sp, r7
 8004044:	bd80      	pop	{r7, pc}

08004046 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8004046:	b580      	push	{r7, lr}
 8004048:	b08a      	sub	sp, #40	@ 0x28
 800404a:	af00      	add	r7, sp, #0
 800404c:	60f8      	str	r0, [r7, #12]
 800404e:	60b9      	str	r1, [r7, #8]
 8004050:	607a      	str	r2, [r7, #4]
 8004052:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8004054:	2301      	movs	r3, #1
 8004056:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8004058:	f7fe ffb6 	bl	8002fc8 <HAL_GetTick>
 800405c:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800405e:	68fb      	ldr	r3, [r7, #12]
 8004060:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8004064:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	685b      	ldr	r3, [r3, #4]
 800406a:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 800406c:	887b      	ldrh	r3, [r7, #2]
 800406e:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8004070:	7ffb      	ldrb	r3, [r7, #31]
 8004072:	2b01      	cmp	r3, #1
 8004074:	d00c      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x4a>
 8004076:	69bb      	ldr	r3, [r7, #24]
 8004078:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800407c:	d106      	bne.n	800408c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	689b      	ldr	r3, [r3, #8]
 8004082:	2b00      	cmp	r3, #0
 8004084:	d102      	bne.n	800408c <HAL_SPI_TransmitReceive+0x46>
 8004086:	7ffb      	ldrb	r3, [r7, #31]
 8004088:	2b04      	cmp	r3, #4
 800408a:	d001      	beq.n	8004090 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800408c:	2302      	movs	r3, #2
 800408e:	e17f      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004090:	68bb      	ldr	r3, [r7, #8]
 8004092:	2b00      	cmp	r3, #0
 8004094:	d005      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x5c>
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2b00      	cmp	r3, #0
 800409a:	d002      	beq.n	80040a2 <HAL_SPI_TransmitReceive+0x5c>
 800409c:	887b      	ldrh	r3, [r7, #2]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d101      	bne.n	80040a6 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80040a2:	2301      	movs	r3, #1
 80040a4:	e174      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d101      	bne.n	80040b4 <HAL_SPI_TransmitReceive+0x6e>
 80040b0:	2302      	movs	r3, #2
 80040b2:	e16d      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	2201      	movs	r2, #1
 80040b8:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80040c2:	b2db      	uxtb	r3, r3
 80040c4:	2b04      	cmp	r3, #4
 80040c6:	d003      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 80040c8:	68fb      	ldr	r3, [r7, #12]
 80040ca:	2205      	movs	r2, #5
 80040cc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	2200      	movs	r2, #0
 80040d4:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	687a      	ldr	r2, [r7, #4]
 80040da:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	887a      	ldrh	r2, [r7, #2]
 80040e0:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	887a      	ldrh	r2, [r7, #2]
 80040e6:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	68ba      	ldr	r2, [r7, #8]
 80040ec:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	887a      	ldrh	r2, [r7, #2]
 80040f2:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	887a      	ldrh	r2, [r7, #2]
 80040f8:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004110:	2b40      	cmp	r3, #64	@ 0x40
 8004112:	d007      	beq.n	8004124 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	681a      	ldr	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004122:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	68db      	ldr	r3, [r3, #12]
 8004128:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 800412c:	d17e      	bne.n	800422c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	685b      	ldr	r3, [r3, #4]
 8004132:	2b00      	cmp	r3, #0
 8004134:	d002      	beq.n	800413c <HAL_SPI_TransmitReceive+0xf6>
 8004136:	8afb      	ldrh	r3, [r7, #22]
 8004138:	2b01      	cmp	r3, #1
 800413a:	d16c      	bne.n	8004216 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004140:	881a      	ldrh	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8004148:	68fb      	ldr	r3, [r7, #12]
 800414a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800414c:	1c9a      	adds	r2, r3, #2
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004156:	b29b      	uxth	r3, r3
 8004158:	3b01      	subs	r3, #1
 800415a:	b29a      	uxth	r2, r3
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004160:	e059      	b.n	8004216 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	681b      	ldr	r3, [r3, #0]
 8004166:	689b      	ldr	r3, [r3, #8]
 8004168:	f003 0302 	and.w	r3, r3, #2
 800416c:	2b02      	cmp	r3, #2
 800416e:	d11b      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x162>
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004174:	b29b      	uxth	r3, r3
 8004176:	2b00      	cmp	r3, #0
 8004178:	d016      	beq.n	80041a8 <HAL_SPI_TransmitReceive+0x162>
 800417a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800417c:	2b01      	cmp	r3, #1
 800417e:	d113      	bne.n	80041a8 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004184:	881a      	ldrh	r2, [r3, #0]
 8004186:	68fb      	ldr	r3, [r7, #12]
 8004188:	681b      	ldr	r3, [r3, #0]
 800418a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004190:	1c9a      	adds	r2, r3, #2
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800419a:	b29b      	uxth	r3, r3
 800419c:	3b01      	subs	r3, #1
 800419e:	b29a      	uxth	r2, r3
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80041a4:	2300      	movs	r3, #0
 80041a6:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	689b      	ldr	r3, [r3, #8]
 80041ae:	f003 0301 	and.w	r3, r3, #1
 80041b2:	2b01      	cmp	r3, #1
 80041b4:	d119      	bne.n	80041ea <HAL_SPI_TransmitReceive+0x1a4>
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041ba:	b29b      	uxth	r3, r3
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d014      	beq.n	80041ea <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68da      	ldr	r2, [r3, #12]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041ca:	b292      	uxth	r2, r2
 80041cc:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80041d2:	1c9a      	adds	r2, r3, #2
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80041dc:	b29b      	uxth	r3, r3
 80041de:	3b01      	subs	r3, #1
 80041e0:	b29a      	uxth	r2, r3
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80041e6:	2301      	movs	r3, #1
 80041e8:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 80041ea:	f7fe feed 	bl	8002fc8 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	6a3b      	ldr	r3, [r7, #32]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80041f6:	429a      	cmp	r2, r3
 80041f8:	d80d      	bhi.n	8004216 <HAL_SPI_TransmitReceive+0x1d0>
 80041fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80041fc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004200:	d009      	beq.n	8004216 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	2201      	movs	r2, #1
 8004206:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	2200      	movs	r2, #0
 800420e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004212:	2303      	movs	r3, #3
 8004214:	e0bc      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800421a:	b29b      	uxth	r3, r3
 800421c:	2b00      	cmp	r3, #0
 800421e:	d1a0      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x11c>
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004224:	b29b      	uxth	r3, r3
 8004226:	2b00      	cmp	r3, #0
 8004228:	d19b      	bne.n	8004162 <HAL_SPI_TransmitReceive+0x11c>
 800422a:	e082      	b.n	8004332 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	2b00      	cmp	r3, #0
 8004232:	d002      	beq.n	800423a <HAL_SPI_TransmitReceive+0x1f4>
 8004234:	8afb      	ldrh	r3, [r7, #22]
 8004236:	2b01      	cmp	r3, #1
 8004238:	d171      	bne.n	800431e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	330c      	adds	r3, #12
 8004244:	7812      	ldrb	r2, [r2, #0]
 8004246:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800424c:	1c5a      	adds	r2, r3, #1
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004256:	b29b      	uxth	r3, r3
 8004258:	3b01      	subs	r3, #1
 800425a:	b29a      	uxth	r2, r3
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004260:	e05d      	b.n	800431e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	689b      	ldr	r3, [r3, #8]
 8004268:	f003 0302 	and.w	r3, r3, #2
 800426c:	2b02      	cmp	r3, #2
 800426e:	d11c      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x264>
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004274:	b29b      	uxth	r3, r3
 8004276:	2b00      	cmp	r3, #0
 8004278:	d017      	beq.n	80042aa <HAL_SPI_TransmitReceive+0x264>
 800427a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800427c:	2b01      	cmp	r3, #1
 800427e:	d114      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8004284:	68fb      	ldr	r3, [r7, #12]
 8004286:	681b      	ldr	r3, [r3, #0]
 8004288:	330c      	adds	r3, #12
 800428a:	7812      	ldrb	r2, [r2, #0]
 800428c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004292:	1c5a      	adds	r2, r3, #1
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800429c:	b29b      	uxth	r3, r3
 800429e:	3b01      	subs	r3, #1
 80042a0:	b29a      	uxth	r2, r3
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80042a6:	2300      	movs	r3, #0
 80042a8:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	689b      	ldr	r3, [r3, #8]
 80042b0:	f003 0301 	and.w	r3, r3, #1
 80042b4:	2b01      	cmp	r3, #1
 80042b6:	d119      	bne.n	80042ec <HAL_SPI_TransmitReceive+0x2a6>
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042bc:	b29b      	uxth	r3, r3
 80042be:	2b00      	cmp	r3, #0
 80042c0:	d014      	beq.n	80042ec <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	681b      	ldr	r3, [r3, #0]
 80042c6:	68da      	ldr	r2, [r3, #12]
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042cc:	b2d2      	uxtb	r2, r2
 80042ce:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80042d4:	1c5a      	adds	r2, r3, #1
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80042de:	b29b      	uxth	r3, r3
 80042e0:	3b01      	subs	r3, #1
 80042e2:	b29a      	uxth	r2, r3
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 80042e8:	2301      	movs	r3, #1
 80042ea:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 80042ec:	f7fe fe6c 	bl	8002fc8 <HAL_GetTick>
 80042f0:	4602      	mov	r2, r0
 80042f2:	6a3b      	ldr	r3, [r7, #32]
 80042f4:	1ad3      	subs	r3, r2, r3
 80042f6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80042f8:	429a      	cmp	r2, r3
 80042fa:	d803      	bhi.n	8004304 <HAL_SPI_TransmitReceive+0x2be>
 80042fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80042fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004302:	d102      	bne.n	800430a <HAL_SPI_TransmitReceive+0x2c4>
 8004304:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004306:	2b00      	cmp	r3, #0
 8004308:	d109      	bne.n	800431e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800431a:	2303      	movs	r3, #3
 800431c:	e038      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800431e:	68fb      	ldr	r3, [r7, #12]
 8004320:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004322:	b29b      	uxth	r3, r3
 8004324:	2b00      	cmp	r3, #0
 8004326:	d19c      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x21c>
 8004328:	68fb      	ldr	r3, [r7, #12]
 800432a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800432c:	b29b      	uxth	r3, r3
 800432e:	2b00      	cmp	r3, #0
 8004330:	d197      	bne.n	8004262 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004332:	6a3a      	ldr	r2, [r7, #32]
 8004334:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f000 f8c2 	bl	80044c0 <SPI_EndRxTxTransaction>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d008      	beq.n	8004354 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	2220      	movs	r2, #32
 8004346:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	2200      	movs	r2, #0
 800434c:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8004350:	2301      	movs	r3, #1
 8004352:	e01d      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	2b00      	cmp	r3, #0
 800435a:	d10a      	bne.n	8004372 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800435c:	2300      	movs	r3, #0
 800435e:	613b      	str	r3, [r7, #16]
 8004360:	68fb      	ldr	r3, [r7, #12]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
 8004366:	613b      	str	r3, [r7, #16]
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	613b      	str	r3, [r7, #16]
 8004370:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8004372:	68fb      	ldr	r3, [r7, #12]
 8004374:	2201      	movs	r2, #1
 8004376:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 800437a:	68fb      	ldr	r3, [r7, #12]
 800437c:	2200      	movs	r2, #0
 800437e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004382:	68fb      	ldr	r3, [r7, #12]
 8004384:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004386:	2b00      	cmp	r3, #0
 8004388:	d001      	beq.n	800438e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 800438a:	2301      	movs	r3, #1
 800438c:	e000      	b.n	8004390 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 800438e:	2300      	movs	r3, #0
  }
}
 8004390:	4618      	mov	r0, r3
 8004392:	3728      	adds	r7, #40	@ 0x28
 8004394:	46bd      	mov	sp, r7
 8004396:	bd80      	pop	{r7, pc}

08004398 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 8004398:	b480      	push	{r7}
 800439a:	b083      	sub	sp, #12
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80043a4:	4618      	mov	r0, r3
 80043a6:	370c      	adds	r7, #12
 80043a8:	46bd      	mov	sp, r7
 80043aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043ae:	4770      	bx	lr

080043b0 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80043b0:	b580      	push	{r7, lr}
 80043b2:	b088      	sub	sp, #32
 80043b4:	af00      	add	r7, sp, #0
 80043b6:	60f8      	str	r0, [r7, #12]
 80043b8:	60b9      	str	r1, [r7, #8]
 80043ba:	603b      	str	r3, [r7, #0]
 80043bc:	4613      	mov	r3, r2
 80043be:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80043c0:	f7fe fe02 	bl	8002fc8 <HAL_GetTick>
 80043c4:	4602      	mov	r2, r0
 80043c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80043c8:	1a9b      	subs	r3, r3, r2
 80043ca:	683a      	ldr	r2, [r7, #0]
 80043cc:	4413      	add	r3, r2
 80043ce:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80043d0:	f7fe fdfa 	bl	8002fc8 <HAL_GetTick>
 80043d4:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80043d6:	4b39      	ldr	r3, [pc, #228]	@ (80044bc <SPI_WaitFlagStateUntilTimeout+0x10c>)
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	015b      	lsls	r3, r3, #5
 80043dc:	0d1b      	lsrs	r3, r3, #20
 80043de:	69fa      	ldr	r2, [r7, #28]
 80043e0:	fb02 f303 	mul.w	r3, r2, r3
 80043e4:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80043e6:	e055      	b.n	8004494 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 80043e8:	683b      	ldr	r3, [r7, #0]
 80043ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80043ee:	d051      	beq.n	8004494 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 80043f0:	f7fe fdea 	bl	8002fc8 <HAL_GetTick>
 80043f4:	4602      	mov	r2, r0
 80043f6:	69bb      	ldr	r3, [r7, #24]
 80043f8:	1ad3      	subs	r3, r2, r3
 80043fa:	69fa      	ldr	r2, [r7, #28]
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d902      	bls.n	8004406 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004400:	69fb      	ldr	r3, [r7, #28]
 8004402:	2b00      	cmp	r3, #0
 8004404:	d13d      	bne.n	8004482 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	685a      	ldr	r2, [r3, #4]
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004414:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004416:	68fb      	ldr	r3, [r7, #12]
 8004418:	685b      	ldr	r3, [r3, #4]
 800441a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800441e:	d111      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	689b      	ldr	r3, [r3, #8]
 8004424:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004428:	d004      	beq.n	8004434 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	689b      	ldr	r3, [r3, #8]
 800442e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004432:	d107      	bne.n	8004444 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004434:	68fb      	ldr	r3, [r7, #12]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681a      	ldr	r2, [r3, #0]
 800443a:	68fb      	ldr	r3, [r7, #12]
 800443c:	681b      	ldr	r3, [r3, #0]
 800443e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004442:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004448:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800444c:	d10f      	bne.n	800446e <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800445c:	601a      	str	r2, [r3, #0]
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	681b      	ldr	r3, [r3, #0]
 8004462:	681a      	ldr	r2, [r3, #0]
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800446c:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800446e:	68fb      	ldr	r3, [r7, #12]
 8004470:	2201      	movs	r2, #1
 8004472:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	2200      	movs	r2, #0
 800447a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 800447e:	2303      	movs	r3, #3
 8004480:	e018      	b.n	80044b4 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	2b00      	cmp	r3, #0
 8004486:	d102      	bne.n	800448e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8004488:	2300      	movs	r3, #0
 800448a:	61fb      	str	r3, [r7, #28]
 800448c:	e002      	b.n	8004494 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 800448e:	697b      	ldr	r3, [r7, #20]
 8004490:	3b01      	subs	r3, #1
 8004492:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	689a      	ldr	r2, [r3, #8]
 800449a:	68bb      	ldr	r3, [r7, #8]
 800449c:	4013      	ands	r3, r2
 800449e:	68ba      	ldr	r2, [r7, #8]
 80044a0:	429a      	cmp	r2, r3
 80044a2:	bf0c      	ite	eq
 80044a4:	2301      	moveq	r3, #1
 80044a6:	2300      	movne	r3, #0
 80044a8:	b2db      	uxtb	r3, r3
 80044aa:	461a      	mov	r2, r3
 80044ac:	79fb      	ldrb	r3, [r7, #7]
 80044ae:	429a      	cmp	r2, r3
 80044b0:	d19a      	bne.n	80043e8 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80044b2:	2300      	movs	r3, #0
}
 80044b4:	4618      	mov	r0, r3
 80044b6:	3720      	adds	r7, #32
 80044b8:	46bd      	mov	sp, r7
 80044ba:	bd80      	pop	{r7, pc}
 80044bc:	20000000 	.word	0x20000000

080044c0 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044c0:	b580      	push	{r7, lr}
 80044c2:	b088      	sub	sp, #32
 80044c4:	af02      	add	r7, sp, #8
 80044c6:	60f8      	str	r0, [r7, #12]
 80044c8:	60b9      	str	r1, [r7, #8]
 80044ca:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	9300      	str	r3, [sp, #0]
 80044d0:	68bb      	ldr	r3, [r7, #8]
 80044d2:	2201      	movs	r2, #1
 80044d4:	2102      	movs	r1, #2
 80044d6:	68f8      	ldr	r0, [r7, #12]
 80044d8:	f7ff ff6a 	bl	80043b0 <SPI_WaitFlagStateUntilTimeout>
 80044dc:	4603      	mov	r3, r0
 80044de:	2b00      	cmp	r3, #0
 80044e0:	d007      	beq.n	80044f2 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80044e6:	f043 0220 	orr.w	r2, r3, #32
 80044ea:	68fb      	ldr	r3, [r7, #12]
 80044ec:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80044ee:	2303      	movs	r3, #3
 80044f0:	e032      	b.n	8004558 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80044f2:	4b1b      	ldr	r3, [pc, #108]	@ (8004560 <SPI_EndRxTxTransaction+0xa0>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a1b      	ldr	r2, [pc, #108]	@ (8004564 <SPI_EndRxTxTransaction+0xa4>)
 80044f8:	fba2 2303 	umull	r2, r3, r2, r3
 80044fc:	0d5b      	lsrs	r3, r3, #21
 80044fe:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004502:	fb02 f303 	mul.w	r3, r2, r3
 8004506:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	685b      	ldr	r3, [r3, #4]
 800450c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004510:	d112      	bne.n	8004538 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	9300      	str	r3, [sp, #0]
 8004516:	68bb      	ldr	r3, [r7, #8]
 8004518:	2200      	movs	r2, #0
 800451a:	2180      	movs	r1, #128	@ 0x80
 800451c:	68f8      	ldr	r0, [r7, #12]
 800451e:	f7ff ff47 	bl	80043b0 <SPI_WaitFlagStateUntilTimeout>
 8004522:	4603      	mov	r3, r0
 8004524:	2b00      	cmp	r3, #0
 8004526:	d016      	beq.n	8004556 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800452c:	f043 0220 	orr.w	r2, r3, #32
 8004530:	68fb      	ldr	r3, [r7, #12]
 8004532:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004534:	2303      	movs	r3, #3
 8004536:	e00f      	b.n	8004558 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	2b00      	cmp	r3, #0
 800453c:	d00a      	beq.n	8004554 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800453e:	697b      	ldr	r3, [r7, #20]
 8004540:	3b01      	subs	r3, #1
 8004542:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	689b      	ldr	r3, [r3, #8]
 800454a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800454e:	2b80      	cmp	r3, #128	@ 0x80
 8004550:	d0f2      	beq.n	8004538 <SPI_EndRxTxTransaction+0x78>
 8004552:	e000      	b.n	8004556 <SPI_EndRxTxTransaction+0x96>
        break;
 8004554:	bf00      	nop
  }

  return HAL_OK;
 8004556:	2300      	movs	r3, #0
}
 8004558:	4618      	mov	r0, r3
 800455a:	3718      	adds	r7, #24
 800455c:	46bd      	mov	sp, r7
 800455e:	bd80      	pop	{r7, pc}
 8004560:	20000000 	.word	0x20000000
 8004564:	165e9f81 	.word	0x165e9f81

08004568 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004568:	b580      	push	{r7, lr}
 800456a:	b082      	sub	sp, #8
 800456c:	af00      	add	r7, sp, #0
 800456e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	2b00      	cmp	r3, #0
 8004574:	d101      	bne.n	800457a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004576:	2301      	movs	r3, #1
 8004578:	e041      	b.n	80045fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8004580:	b2db      	uxtb	r3, r3
 8004582:	2b00      	cmp	r3, #0
 8004584:	d106      	bne.n	8004594 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	2200      	movs	r2, #0
 800458a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800458e:	6878      	ldr	r0, [r7, #4]
 8004590:	f000 f839 	bl	8004606 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	2202      	movs	r2, #2
 8004598:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800459c:	687b      	ldr	r3, [r7, #4]
 800459e:	681a      	ldr	r2, [r3, #0]
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	3304      	adds	r3, #4
 80045a4:	4619      	mov	r1, r3
 80045a6:	4610      	mov	r0, r2
 80045a8:	f000 f9c0 	bl	800492c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	2201      	movs	r2, #1
 80045b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	2201      	movs	r2, #1
 80045b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	2201      	movs	r2, #1
 80045c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	2201      	movs	r2, #1
 80045c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80045cc:	687b      	ldr	r3, [r7, #4]
 80045ce:	2201      	movs	r2, #1
 80045d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	2201      	movs	r2, #1
 80045d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	2201      	movs	r2, #1
 80045e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	2201      	movs	r2, #1
 80045e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	2201      	movs	r2, #1
 80045f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	2201      	movs	r2, #1
 80045f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80045fc:	2300      	movs	r3, #0
}
 80045fe:	4618      	mov	r0, r3
 8004600:	3708      	adds	r7, #8
 8004602:	46bd      	mov	sp, r7
 8004604:	bd80      	pop	{r7, pc}

08004606 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004606:	b480      	push	{r7}
 8004608:	b083      	sub	sp, #12
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800460e:	bf00      	nop
 8004610:	370c      	adds	r7, #12
 8004612:	46bd      	mov	sp, r7
 8004614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004618:	4770      	bx	lr
	...

0800461c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800461c:	b480      	push	{r7}
 800461e:	b085      	sub	sp, #20
 8004620:	af00      	add	r7, sp, #0
 8004622:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800462a:	b2db      	uxtb	r3, r3
 800462c:	2b01      	cmp	r3, #1
 800462e:	d001      	beq.n	8004634 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004630:	2301      	movs	r3, #1
 8004632:	e04e      	b.n	80046d2 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2202      	movs	r2, #2
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	68da      	ldr	r2, [r3, #12]
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f042 0201 	orr.w	r2, r2, #1
 800464a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	681b      	ldr	r3, [r3, #0]
 8004650:	4a23      	ldr	r2, [pc, #140]	@ (80046e0 <HAL_TIM_Base_Start_IT+0xc4>)
 8004652:	4293      	cmp	r3, r2
 8004654:	d022      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	681b      	ldr	r3, [r3, #0]
 800465a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800465e:	d01d      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004660:	687b      	ldr	r3, [r7, #4]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	4a1f      	ldr	r2, [pc, #124]	@ (80046e4 <HAL_TIM_Base_Start_IT+0xc8>)
 8004666:	4293      	cmp	r3, r2
 8004668:	d018      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a1e      	ldr	r2, [pc, #120]	@ (80046e8 <HAL_TIM_Base_Start_IT+0xcc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d013      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	681b      	ldr	r3, [r3, #0]
 8004678:	4a1c      	ldr	r2, [pc, #112]	@ (80046ec <HAL_TIM_Base_Start_IT+0xd0>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d00e      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 800467e:	687b      	ldr	r3, [r7, #4]
 8004680:	681b      	ldr	r3, [r3, #0]
 8004682:	4a1b      	ldr	r2, [pc, #108]	@ (80046f0 <HAL_TIM_Base_Start_IT+0xd4>)
 8004684:	4293      	cmp	r3, r2
 8004686:	d009      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004688:	687b      	ldr	r3, [r7, #4]
 800468a:	681b      	ldr	r3, [r3, #0]
 800468c:	4a19      	ldr	r2, [pc, #100]	@ (80046f4 <HAL_TIM_Base_Start_IT+0xd8>)
 800468e:	4293      	cmp	r3, r2
 8004690:	d004      	beq.n	800469c <HAL_TIM_Base_Start_IT+0x80>
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	681b      	ldr	r3, [r3, #0]
 8004696:	4a18      	ldr	r2, [pc, #96]	@ (80046f8 <HAL_TIM_Base_Start_IT+0xdc>)
 8004698:	4293      	cmp	r3, r2
 800469a:	d111      	bne.n	80046c0 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	689b      	ldr	r3, [r3, #8]
 80046a2:	f003 0307 	and.w	r3, r3, #7
 80046a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046a8:	68fb      	ldr	r3, [r7, #12]
 80046aa:	2b06      	cmp	r3, #6
 80046ac:	d010      	beq.n	80046d0 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	681a      	ldr	r2, [r3, #0]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f042 0201 	orr.w	r2, r2, #1
 80046bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80046be:	e007      	b.n	80046d0 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80046c0:	687b      	ldr	r3, [r7, #4]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	681a      	ldr	r2, [r3, #0]
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	f042 0201 	orr.w	r2, r2, #1
 80046ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80046d0:	2300      	movs	r3, #0
}
 80046d2:	4618      	mov	r0, r3
 80046d4:	3714      	adds	r7, #20
 80046d6:	46bd      	mov	sp, r7
 80046d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046dc:	4770      	bx	lr
 80046de:	bf00      	nop
 80046e0:	40010000 	.word	0x40010000
 80046e4:	40000400 	.word	0x40000400
 80046e8:	40000800 	.word	0x40000800
 80046ec:	40000c00 	.word	0x40000c00
 80046f0:	40010400 	.word	0x40010400
 80046f4:	40014000 	.word	0x40014000
 80046f8:	40001800 	.word	0x40001800

080046fc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80046fc:	b580      	push	{r7, lr}
 80046fe:	b084      	sub	sp, #16
 8004700:	af00      	add	r7, sp, #0
 8004702:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	681b      	ldr	r3, [r3, #0]
 8004708:	68db      	ldr	r3, [r3, #12]
 800470a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	691b      	ldr	r3, [r3, #16]
 8004712:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004714:	68bb      	ldr	r3, [r7, #8]
 8004716:	f003 0302 	and.w	r3, r3, #2
 800471a:	2b00      	cmp	r3, #0
 800471c:	d020      	beq.n	8004760 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800471e:	68fb      	ldr	r3, [r7, #12]
 8004720:	f003 0302 	and.w	r3, r3, #2
 8004724:	2b00      	cmp	r3, #0
 8004726:	d01b      	beq.n	8004760 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f06f 0202 	mvn.w	r2, #2
 8004730:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	2201      	movs	r2, #1
 8004736:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	699b      	ldr	r3, [r3, #24]
 800473e:	f003 0303 	and.w	r3, r3, #3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d003      	beq.n	800474e <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8004746:	6878      	ldr	r0, [r7, #4]
 8004748:	f000 f8d2 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 800474c:	e005      	b.n	800475a <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800474e:	6878      	ldr	r0, [r7, #4]
 8004750:	f000 f8c4 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004754:	6878      	ldr	r0, [r7, #4]
 8004756:	f000 f8d5 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	2200      	movs	r2, #0
 800475e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8004760:	68bb      	ldr	r3, [r7, #8]
 8004762:	f003 0304 	and.w	r3, r3, #4
 8004766:	2b00      	cmp	r3, #0
 8004768:	d020      	beq.n	80047ac <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800476a:	68fb      	ldr	r3, [r7, #12]
 800476c:	f003 0304 	and.w	r3, r3, #4
 8004770:	2b00      	cmp	r3, #0
 8004772:	d01b      	beq.n	80047ac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	f06f 0204 	mvn.w	r2, #4
 800477c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	2202      	movs	r2, #2
 8004782:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	699b      	ldr	r3, [r3, #24]
 800478a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004792:	6878      	ldr	r0, [r7, #4]
 8004794:	f000 f8ac 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004798:	e005      	b.n	80047a6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800479a:	6878      	ldr	r0, [r7, #4]
 800479c:	f000 f89e 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047a0:	6878      	ldr	r0, [r7, #4]
 80047a2:	f000 f8af 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	2200      	movs	r2, #0
 80047aa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 80047ac:	68bb      	ldr	r3, [r7, #8]
 80047ae:	f003 0308 	and.w	r3, r3, #8
 80047b2:	2b00      	cmp	r3, #0
 80047b4:	d020      	beq.n	80047f8 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	f003 0308 	and.w	r3, r3, #8
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d01b      	beq.n	80047f8 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 80047c0:	687b      	ldr	r3, [r7, #4]
 80047c2:	681b      	ldr	r3, [r3, #0]
 80047c4:	f06f 0208 	mvn.w	r2, #8
 80047c8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	2204      	movs	r2, #4
 80047ce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	681b      	ldr	r3, [r3, #0]
 80047d4:	69db      	ldr	r3, [r3, #28]
 80047d6:	f003 0303 	and.w	r3, r3, #3
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d003      	beq.n	80047e6 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80047de:	6878      	ldr	r0, [r7, #4]
 80047e0:	f000 f886 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 80047e4:	e005      	b.n	80047f2 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80047e6:	6878      	ldr	r0, [r7, #4]
 80047e8:	f000 f878 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80047ec:	6878      	ldr	r0, [r7, #4]
 80047ee:	f000 f889 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	2200      	movs	r2, #0
 80047f6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80047f8:	68bb      	ldr	r3, [r7, #8]
 80047fa:	f003 0310 	and.w	r3, r3, #16
 80047fe:	2b00      	cmp	r3, #0
 8004800:	d020      	beq.n	8004844 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	f003 0310 	and.w	r3, r3, #16
 8004808:	2b00      	cmp	r3, #0
 800480a:	d01b      	beq.n	8004844 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	f06f 0210 	mvn.w	r2, #16
 8004814:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	2208      	movs	r2, #8
 800481a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	681b      	ldr	r3, [r3, #0]
 8004820:	69db      	ldr	r3, [r3, #28]
 8004822:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004826:	2b00      	cmp	r3, #0
 8004828:	d003      	beq.n	8004832 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800482a:	6878      	ldr	r0, [r7, #4]
 800482c:	f000 f860 	bl	80048f0 <HAL_TIM_IC_CaptureCallback>
 8004830:	e005      	b.n	800483e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004832:	6878      	ldr	r0, [r7, #4]
 8004834:	f000 f852 	bl	80048dc <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004838:	6878      	ldr	r0, [r7, #4]
 800483a:	f000 f863 	bl	8004904 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	2200      	movs	r2, #0
 8004842:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8004844:	68bb      	ldr	r3, [r7, #8]
 8004846:	f003 0301 	and.w	r3, r3, #1
 800484a:	2b00      	cmp	r3, #0
 800484c:	d00c      	beq.n	8004868 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	f003 0301 	and.w	r3, r3, #1
 8004854:	2b00      	cmp	r3, #0
 8004856:	d007      	beq.n	8004868 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004858:	687b      	ldr	r3, [r7, #4]
 800485a:	681b      	ldr	r3, [r3, #0]
 800485c:	f06f 0201 	mvn.w	r2, #1
 8004860:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f7fc fc44 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800486e:	2b00      	cmp	r3, #0
 8004870:	d00c      	beq.n	800488c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8004872:	68fb      	ldr	r3, [r7, #12]
 8004874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004878:	2b00      	cmp	r3, #0
 800487a:	d007      	beq.n	800488c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004886:	6878      	ldr	r0, [r7, #4]
 8004888:	f000 f900 	bl	8004a8c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800488c:	68bb      	ldr	r3, [r7, #8]
 800488e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004892:	2b00      	cmp	r3, #0
 8004894:	d00c      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800489c:	2b00      	cmp	r3, #0
 800489e:	d007      	beq.n	80048b0 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80048a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80048aa:	6878      	ldr	r0, [r7, #4]
 80048ac:	f000 f834 	bl	8004918 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 80048b0:	68bb      	ldr	r3, [r7, #8]
 80048b2:	f003 0320 	and.w	r3, r3, #32
 80048b6:	2b00      	cmp	r3, #0
 80048b8:	d00c      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	f003 0320 	and.w	r3, r3, #32
 80048c0:	2b00      	cmp	r3, #0
 80048c2:	d007      	beq.n	80048d4 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f06f 0220 	mvn.w	r2, #32
 80048cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80048ce:	6878      	ldr	r0, [r7, #4]
 80048d0:	f000 f8d2 	bl	8004a78 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80048d4:	bf00      	nop
 80048d6:	3710      	adds	r7, #16
 80048d8:	46bd      	mov	sp, r7
 80048da:	bd80      	pop	{r7, pc}

080048dc <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80048dc:	b480      	push	{r7}
 80048de:	b083      	sub	sp, #12
 80048e0:	af00      	add	r7, sp, #0
 80048e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80048e4:	bf00      	nop
 80048e6:	370c      	adds	r7, #12
 80048e8:	46bd      	mov	sp, r7
 80048ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ee:	4770      	bx	lr

080048f0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80048f0:	b480      	push	{r7}
 80048f2:	b083      	sub	sp, #12
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80048f8:	bf00      	nop
 80048fa:	370c      	adds	r7, #12
 80048fc:	46bd      	mov	sp, r7
 80048fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004902:	4770      	bx	lr

08004904 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004904:	b480      	push	{r7}
 8004906:	b083      	sub	sp, #12
 8004908:	af00      	add	r7, sp, #0
 800490a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800490c:	bf00      	nop
 800490e:	370c      	adds	r7, #12
 8004910:	46bd      	mov	sp, r7
 8004912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004916:	4770      	bx	lr

08004918 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004918:	b480      	push	{r7}
 800491a:	b083      	sub	sp, #12
 800491c:	af00      	add	r7, sp, #0
 800491e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004920:	bf00      	nop
 8004922:	370c      	adds	r7, #12
 8004924:	46bd      	mov	sp, r7
 8004926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800492a:	4770      	bx	lr

0800492c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800492c:	b480      	push	{r7}
 800492e:	b085      	sub	sp, #20
 8004930:	af00      	add	r7, sp, #0
 8004932:	6078      	str	r0, [r7, #4]
 8004934:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004936:	687b      	ldr	r3, [r7, #4]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800493c:	687b      	ldr	r3, [r7, #4]
 800493e:	4a43      	ldr	r2, [pc, #268]	@ (8004a4c <TIM_Base_SetConfig+0x120>)
 8004940:	4293      	cmp	r3, r2
 8004942:	d013      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800494a:	d00f      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	4a40      	ldr	r2, [pc, #256]	@ (8004a50 <TIM_Base_SetConfig+0x124>)
 8004950:	4293      	cmp	r3, r2
 8004952:	d00b      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	4a3f      	ldr	r2, [pc, #252]	@ (8004a54 <TIM_Base_SetConfig+0x128>)
 8004958:	4293      	cmp	r3, r2
 800495a:	d007      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	4a3e      	ldr	r2, [pc, #248]	@ (8004a58 <TIM_Base_SetConfig+0x12c>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d003      	beq.n	800496c <TIM_Base_SetConfig+0x40>
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	4a3d      	ldr	r2, [pc, #244]	@ (8004a5c <TIM_Base_SetConfig+0x130>)
 8004968:	4293      	cmp	r3, r2
 800496a:	d108      	bne.n	800497e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004972:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004974:	683b      	ldr	r3, [r7, #0]
 8004976:	685b      	ldr	r3, [r3, #4]
 8004978:	68fa      	ldr	r2, [r7, #12]
 800497a:	4313      	orrs	r3, r2
 800497c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	4a32      	ldr	r2, [pc, #200]	@ (8004a4c <TIM_Base_SetConfig+0x120>)
 8004982:	4293      	cmp	r3, r2
 8004984:	d02b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800498c:	d027      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	4a2f      	ldr	r2, [pc, #188]	@ (8004a50 <TIM_Base_SetConfig+0x124>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d023      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	4a2e      	ldr	r2, [pc, #184]	@ (8004a54 <TIM_Base_SetConfig+0x128>)
 800499a:	4293      	cmp	r3, r2
 800499c:	d01f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	4a2d      	ldr	r2, [pc, #180]	@ (8004a58 <TIM_Base_SetConfig+0x12c>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d01b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	4a2c      	ldr	r2, [pc, #176]	@ (8004a5c <TIM_Base_SetConfig+0x130>)
 80049aa:	4293      	cmp	r3, r2
 80049ac:	d017      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	4a2b      	ldr	r2, [pc, #172]	@ (8004a60 <TIM_Base_SetConfig+0x134>)
 80049b2:	4293      	cmp	r3, r2
 80049b4:	d013      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	4a2a      	ldr	r2, [pc, #168]	@ (8004a64 <TIM_Base_SetConfig+0x138>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d00f      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	4a29      	ldr	r2, [pc, #164]	@ (8004a68 <TIM_Base_SetConfig+0x13c>)
 80049c2:	4293      	cmp	r3, r2
 80049c4:	d00b      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049c6:	687b      	ldr	r3, [r7, #4]
 80049c8:	4a28      	ldr	r2, [pc, #160]	@ (8004a6c <TIM_Base_SetConfig+0x140>)
 80049ca:	4293      	cmp	r3, r2
 80049cc:	d007      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049ce:	687b      	ldr	r3, [r7, #4]
 80049d0:	4a27      	ldr	r2, [pc, #156]	@ (8004a70 <TIM_Base_SetConfig+0x144>)
 80049d2:	4293      	cmp	r3, r2
 80049d4:	d003      	beq.n	80049de <TIM_Base_SetConfig+0xb2>
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	4a26      	ldr	r2, [pc, #152]	@ (8004a74 <TIM_Base_SetConfig+0x148>)
 80049da:	4293      	cmp	r3, r2
 80049dc:	d108      	bne.n	80049f0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80049de:	68fb      	ldr	r3, [r7, #12]
 80049e0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80049e4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80049e6:	683b      	ldr	r3, [r7, #0]
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	68fa      	ldr	r2, [r7, #12]
 80049ec:	4313      	orrs	r3, r2
 80049ee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80049f6:	683b      	ldr	r3, [r7, #0]
 80049f8:	695b      	ldr	r3, [r3, #20]
 80049fa:	4313      	orrs	r3, r2
 80049fc:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80049fe:	683b      	ldr	r3, [r7, #0]
 8004a00:	689a      	ldr	r2, [r3, #8]
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004a06:	683b      	ldr	r3, [r7, #0]
 8004a08:	681a      	ldr	r2, [r3, #0]
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	4a0e      	ldr	r2, [pc, #56]	@ (8004a4c <TIM_Base_SetConfig+0x120>)
 8004a12:	4293      	cmp	r3, r2
 8004a14:	d003      	beq.n	8004a1e <TIM_Base_SetConfig+0xf2>
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	4a10      	ldr	r2, [pc, #64]	@ (8004a5c <TIM_Base_SetConfig+0x130>)
 8004a1a:	4293      	cmp	r3, r2
 8004a1c:	d103      	bne.n	8004a26 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004a1e:	683b      	ldr	r3, [r7, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f043 0204 	orr.w	r2, r3, #4
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	2201      	movs	r2, #1
 8004a36:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	68fa      	ldr	r2, [r7, #12]
 8004a3c:	601a      	str	r2, [r3, #0]
}
 8004a3e:	bf00      	nop
 8004a40:	3714      	adds	r7, #20
 8004a42:	46bd      	mov	sp, r7
 8004a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a48:	4770      	bx	lr
 8004a4a:	bf00      	nop
 8004a4c:	40010000 	.word	0x40010000
 8004a50:	40000400 	.word	0x40000400
 8004a54:	40000800 	.word	0x40000800
 8004a58:	40000c00 	.word	0x40000c00
 8004a5c:	40010400 	.word	0x40010400
 8004a60:	40014000 	.word	0x40014000
 8004a64:	40014400 	.word	0x40014400
 8004a68:	40014800 	.word	0x40014800
 8004a6c:	40001800 	.word	0x40001800
 8004a70:	40001c00 	.word	0x40001c00
 8004a74:	40002000 	.word	0x40002000

08004a78 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a78:	b480      	push	{r7}
 8004a7a:	b083      	sub	sp, #12
 8004a7c:	af00      	add	r7, sp, #0
 8004a7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a80:	bf00      	nop
 8004a82:	370c      	adds	r7, #12
 8004a84:	46bd      	mov	sp, r7
 8004a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a8a:	4770      	bx	lr

08004a8c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a8c:	b480      	push	{r7}
 8004a8e:	b083      	sub	sp, #12
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a94:	bf00      	nop
 8004a96:	370c      	adds	r7, #12
 8004a98:	46bd      	mov	sp, r7
 8004a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a9e:	4770      	bx	lr

08004aa0 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004aa0:	b580      	push	{r7, lr}
 8004aa2:	b082      	sub	sp, #8
 8004aa4:	af00      	add	r7, sp, #0
 8004aa6:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d101      	bne.n	8004ab2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e042      	b.n	8004b38 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004ab8:	b2db      	uxtb	r3, r3
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d106      	bne.n	8004acc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	2200      	movs	r2, #0
 8004ac2:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004ac6:	6878      	ldr	r0, [r7, #4]
 8004ac8:	f7fe f898 	bl	8002bfc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	2224      	movs	r2, #36	@ 0x24
 8004ad0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	68da      	ldr	r2, [r3, #12]
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	681b      	ldr	r3, [r3, #0]
 8004ade:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004ae2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004ae4:	6878      	ldr	r0, [r7, #4]
 8004ae6:	f000 f973 	bl	8004dd0 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	691a      	ldr	r2, [r3, #16]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004af8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004b08:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	681b      	ldr	r3, [r3, #0]
 8004b0e:	68da      	ldr	r2, [r3, #12]
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004b18:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	2220      	movs	r2, #32
 8004b24:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	2220      	movs	r2, #32
 8004b2c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	2200      	movs	r2, #0
 8004b34:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004b36:	2300      	movs	r3, #0
}
 8004b38:	4618      	mov	r0, r3
 8004b3a:	3708      	adds	r7, #8
 8004b3c:	46bd      	mov	sp, r7
 8004b3e:	bd80      	pop	{r7, pc}

08004b40 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004b40:	b580      	push	{r7, lr}
 8004b42:	b08a      	sub	sp, #40	@ 0x28
 8004b44:	af02      	add	r7, sp, #8
 8004b46:	60f8      	str	r0, [r7, #12]
 8004b48:	60b9      	str	r1, [r7, #8]
 8004b4a:	603b      	str	r3, [r7, #0]
 8004b4c:	4613      	mov	r3, r2
 8004b4e:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004b50:	2300      	movs	r3, #0
 8004b52:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004b54:	68fb      	ldr	r3, [r7, #12]
 8004b56:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004b5a:	b2db      	uxtb	r3, r3
 8004b5c:	2b20      	cmp	r3, #32
 8004b5e:	d175      	bne.n	8004c4c <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004b60:	68bb      	ldr	r3, [r7, #8]
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d002      	beq.n	8004b6c <HAL_UART_Transmit+0x2c>
 8004b66:	88fb      	ldrh	r3, [r7, #6]
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d101      	bne.n	8004b70 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004b6c:	2301      	movs	r3, #1
 8004b6e:	e06e      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b70:	68fb      	ldr	r3, [r7, #12]
 8004b72:	2200      	movs	r2, #0
 8004b74:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004b76:	68fb      	ldr	r3, [r7, #12]
 8004b78:	2221      	movs	r2, #33	@ 0x21
 8004b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004b7e:	f7fe fa23 	bl	8002fc8 <HAL_GetTick>
 8004b82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004b84:	68fb      	ldr	r3, [r7, #12]
 8004b86:	88fa      	ldrh	r2, [r7, #6]
 8004b88:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004b8a:	68fb      	ldr	r3, [r7, #12]
 8004b8c:	88fa      	ldrh	r2, [r7, #6]
 8004b8e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	689b      	ldr	r3, [r3, #8]
 8004b94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004b98:	d108      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
 8004b9a:	68fb      	ldr	r3, [r7, #12]
 8004b9c:	691b      	ldr	r3, [r3, #16]
 8004b9e:	2b00      	cmp	r3, #0
 8004ba0:	d104      	bne.n	8004bac <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004ba2:	2300      	movs	r3, #0
 8004ba4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004ba6:	68bb      	ldr	r3, [r7, #8]
 8004ba8:	61bb      	str	r3, [r7, #24]
 8004baa:	e003      	b.n	8004bb4 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004bac:	68bb      	ldr	r3, [r7, #8]
 8004bae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004bb0:	2300      	movs	r3, #0
 8004bb2:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004bb4:	e02e      	b.n	8004c14 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004bb6:	683b      	ldr	r3, [r7, #0]
 8004bb8:	9300      	str	r3, [sp, #0]
 8004bba:	697b      	ldr	r3, [r7, #20]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	2180      	movs	r1, #128	@ 0x80
 8004bc0:	68f8      	ldr	r0, [r7, #12]
 8004bc2:	f000 f848 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 8004bc6:	4603      	mov	r3, r0
 8004bc8:	2b00      	cmp	r3, #0
 8004bca:	d005      	beq.n	8004bd8 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004bcc:	68fb      	ldr	r3, [r7, #12]
 8004bce:	2220      	movs	r2, #32
 8004bd0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004bd4:	2303      	movs	r3, #3
 8004bd6:	e03a      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004bd8:	69fb      	ldr	r3, [r7, #28]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d10b      	bne.n	8004bf6 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004bde:	69bb      	ldr	r3, [r7, #24]
 8004be0:	881b      	ldrh	r3, [r3, #0]
 8004be2:	461a      	mov	r2, r3
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004bec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004bee:	69bb      	ldr	r3, [r7, #24]
 8004bf0:	3302      	adds	r3, #2
 8004bf2:	61bb      	str	r3, [r7, #24]
 8004bf4:	e007      	b.n	8004c06 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004bf6:	69fb      	ldr	r3, [r7, #28]
 8004bf8:	781a      	ldrb	r2, [r3, #0]
 8004bfa:	68fb      	ldr	r3, [r7, #12]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004c00:	69fb      	ldr	r3, [r7, #28]
 8004c02:	3301      	adds	r3, #1
 8004c04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004c06:	68fb      	ldr	r3, [r7, #12]
 8004c08:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c0a:	b29b      	uxth	r3, r3
 8004c0c:	3b01      	subs	r3, #1
 8004c0e:	b29a      	uxth	r2, r3
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004c18:	b29b      	uxth	r3, r3
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d1cb      	bne.n	8004bb6 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004c1e:	683b      	ldr	r3, [r7, #0]
 8004c20:	9300      	str	r3, [sp, #0]
 8004c22:	697b      	ldr	r3, [r7, #20]
 8004c24:	2200      	movs	r2, #0
 8004c26:	2140      	movs	r1, #64	@ 0x40
 8004c28:	68f8      	ldr	r0, [r7, #12]
 8004c2a:	f000 f814 	bl	8004c56 <UART_WaitOnFlagUntilTimeout>
 8004c2e:	4603      	mov	r3, r0
 8004c30:	2b00      	cmp	r3, #0
 8004c32:	d005      	beq.n	8004c40 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	2220      	movs	r2, #32
 8004c38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004c3c:	2303      	movs	r3, #3
 8004c3e:	e006      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004c40:	68fb      	ldr	r3, [r7, #12]
 8004c42:	2220      	movs	r2, #32
 8004c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004c48:	2300      	movs	r3, #0
 8004c4a:	e000      	b.n	8004c4e <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004c4c:	2302      	movs	r3, #2
  }
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3720      	adds	r7, #32
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004c56:	b580      	push	{r7, lr}
 8004c58:	b086      	sub	sp, #24
 8004c5a:	af00      	add	r7, sp, #0
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	603b      	str	r3, [r7, #0]
 8004c62:	4613      	mov	r3, r2
 8004c64:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c66:	e03b      	b.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004c68:	6a3b      	ldr	r3, [r7, #32]
 8004c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004c6e:	d037      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004c70:	f7fe f9aa 	bl	8002fc8 <HAL_GetTick>
 8004c74:	4602      	mov	r2, r0
 8004c76:	683b      	ldr	r3, [r7, #0]
 8004c78:	1ad3      	subs	r3, r2, r3
 8004c7a:	6a3a      	ldr	r2, [r7, #32]
 8004c7c:	429a      	cmp	r2, r3
 8004c7e:	d302      	bcc.n	8004c86 <UART_WaitOnFlagUntilTimeout+0x30>
 8004c80:	6a3b      	ldr	r3, [r7, #32]
 8004c82:	2b00      	cmp	r3, #0
 8004c84:	d101      	bne.n	8004c8a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004c86:	2303      	movs	r3, #3
 8004c88:	e03a      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004c8a:	68fb      	ldr	r3, [r7, #12]
 8004c8c:	681b      	ldr	r3, [r3, #0]
 8004c8e:	68db      	ldr	r3, [r3, #12]
 8004c90:	f003 0304 	and.w	r3, r3, #4
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d023      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c98:	68bb      	ldr	r3, [r7, #8]
 8004c9a:	2b80      	cmp	r3, #128	@ 0x80
 8004c9c:	d020      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004c9e:	68bb      	ldr	r3, [r7, #8]
 8004ca0:	2b40      	cmp	r3, #64	@ 0x40
 8004ca2:	d01d      	beq.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004ca4:	68fb      	ldr	r3, [r7, #12]
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	f003 0308 	and.w	r3, r3, #8
 8004cae:	2b08      	cmp	r3, #8
 8004cb0:	d116      	bne.n	8004ce0 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004cb2:	2300      	movs	r3, #0
 8004cb4:	617b      	str	r3, [r7, #20]
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	681b      	ldr	r3, [r3, #0]
 8004cbc:	617b      	str	r3, [r7, #20]
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	685b      	ldr	r3, [r3, #4]
 8004cc4:	617b      	str	r3, [r7, #20]
 8004cc6:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004cc8:	68f8      	ldr	r0, [r7, #12]
 8004cca:	f000 f81d 	bl	8004d08 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004cce:	68fb      	ldr	r3, [r7, #12]
 8004cd0:	2208      	movs	r2, #8
 8004cd2:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004cd4:	68fb      	ldr	r3, [r7, #12]
 8004cd6:	2200      	movs	r2, #0
 8004cd8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004cdc:	2301      	movs	r3, #1
 8004cde:	e00f      	b.n	8004d00 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ce0:	68fb      	ldr	r3, [r7, #12]
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	681a      	ldr	r2, [r3, #0]
 8004ce6:	68bb      	ldr	r3, [r7, #8]
 8004ce8:	4013      	ands	r3, r2
 8004cea:	68ba      	ldr	r2, [r7, #8]
 8004cec:	429a      	cmp	r2, r3
 8004cee:	bf0c      	ite	eq
 8004cf0:	2301      	moveq	r3, #1
 8004cf2:	2300      	movne	r3, #0
 8004cf4:	b2db      	uxtb	r3, r3
 8004cf6:	461a      	mov	r2, r3
 8004cf8:	79fb      	ldrb	r3, [r7, #7]
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	d0b4      	beq.n	8004c68 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004cfe:	2300      	movs	r3, #0
}
 8004d00:	4618      	mov	r0, r3
 8004d02:	3718      	adds	r7, #24
 8004d04:	46bd      	mov	sp, r7
 8004d06:	bd80      	pop	{r7, pc}

08004d08 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b095      	sub	sp, #84	@ 0x54
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	681b      	ldr	r3, [r3, #0]
 8004d14:	330c      	adds	r3, #12
 8004d16:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d18:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004d1a:	e853 3f00 	ldrex	r3, [r3]
 8004d1e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004d20:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004d22:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004d26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	330c      	adds	r3, #12
 8004d2e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004d30:	643a      	str	r2, [r7, #64]	@ 0x40
 8004d32:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d34:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004d36:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004d38:	e841 2300 	strex	r3, r2, [r1]
 8004d3c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004d3e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004d40:	2b00      	cmp	r3, #0
 8004d42:	d1e5      	bne.n	8004d10 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d44:	687b      	ldr	r3, [r7, #4]
 8004d46:	681b      	ldr	r3, [r3, #0]
 8004d48:	3314      	adds	r3, #20
 8004d4a:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	e853 3f00 	ldrex	r3, [r3]
 8004d52:	61fb      	str	r3, [r7, #28]
   return(result);
 8004d54:	69fb      	ldr	r3, [r7, #28]
 8004d56:	f023 0301 	bic.w	r3, r3, #1
 8004d5a:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	3314      	adds	r3, #20
 8004d62:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004d64:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004d66:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d68:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004d6a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004d6c:	e841 2300 	strex	r3, r2, [r1]
 8004d70:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004d74:	2b00      	cmp	r3, #0
 8004d76:	d1e5      	bne.n	8004d44 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004d7c:	2b01      	cmp	r3, #1
 8004d7e:	d119      	bne.n	8004db4 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	330c      	adds	r3, #12
 8004d86:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d88:	68fb      	ldr	r3, [r7, #12]
 8004d8a:	e853 3f00 	ldrex	r3, [r3]
 8004d8e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004d90:	68bb      	ldr	r3, [r7, #8]
 8004d92:	f023 0310 	bic.w	r3, r3, #16
 8004d96:	647b      	str	r3, [r7, #68]	@ 0x44
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	681b      	ldr	r3, [r3, #0]
 8004d9c:	330c      	adds	r3, #12
 8004d9e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004da0:	61ba      	str	r2, [r7, #24]
 8004da2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004da4:	6979      	ldr	r1, [r7, #20]
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	e841 2300 	strex	r3, r2, [r1]
 8004dac:	613b      	str	r3, [r7, #16]
   return(result);
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d1e5      	bne.n	8004d80 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2220      	movs	r2, #32
 8004db8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	2200      	movs	r2, #0
 8004dc0:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004dc2:	bf00      	nop
 8004dc4:	3754      	adds	r7, #84	@ 0x54
 8004dc6:	46bd      	mov	sp, r7
 8004dc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dcc:	4770      	bx	lr
	...

08004dd0 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004dd0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004dd4:	b0c0      	sub	sp, #256	@ 0x100
 8004dd6:	af00      	add	r7, sp, #0
 8004dd8:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004ddc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	691b      	ldr	r3, [r3, #16]
 8004de4:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004de8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dec:	68d9      	ldr	r1, [r3, #12]
 8004dee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004df2:	681a      	ldr	r2, [r3, #0]
 8004df4:	ea40 0301 	orr.w	r3, r0, r1
 8004df8:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004dfa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004dfe:	689a      	ldr	r2, [r3, #8]
 8004e00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e04:	691b      	ldr	r3, [r3, #16]
 8004e06:	431a      	orrs	r2, r3
 8004e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e0c:	695b      	ldr	r3, [r3, #20]
 8004e0e:	431a      	orrs	r2, r3
 8004e10:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e14:	69db      	ldr	r3, [r3, #28]
 8004e16:	4313      	orrs	r3, r2
 8004e18:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004e1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e20:	681b      	ldr	r3, [r3, #0]
 8004e22:	68db      	ldr	r3, [r3, #12]
 8004e24:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004e28:	f021 010c 	bic.w	r1, r1, #12
 8004e2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e30:	681a      	ldr	r2, [r3, #0]
 8004e32:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004e36:	430b      	orrs	r3, r1
 8004e38:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004e3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e3e:	681b      	ldr	r3, [r3, #0]
 8004e40:	695b      	ldr	r3, [r3, #20]
 8004e42:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004e46:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e4a:	6999      	ldr	r1, [r3, #24]
 8004e4c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e50:	681a      	ldr	r2, [r3, #0]
 8004e52:	ea40 0301 	orr.w	r3, r0, r1
 8004e56:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004e58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e5c:	681a      	ldr	r2, [r3, #0]
 8004e5e:	4b8f      	ldr	r3, [pc, #572]	@ (800509c <UART_SetConfig+0x2cc>)
 8004e60:	429a      	cmp	r2, r3
 8004e62:	d005      	beq.n	8004e70 <UART_SetConfig+0xa0>
 8004e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e68:	681a      	ldr	r2, [r3, #0]
 8004e6a:	4b8d      	ldr	r3, [pc, #564]	@ (80050a0 <UART_SetConfig+0x2d0>)
 8004e6c:	429a      	cmp	r2, r3
 8004e6e:	d104      	bne.n	8004e7a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004e70:	f7ff f81a 	bl	8003ea8 <HAL_RCC_GetPCLK2Freq>
 8004e74:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004e78:	e003      	b.n	8004e82 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004e7a:	f7ff f801 	bl	8003e80 <HAL_RCC_GetPCLK1Freq>
 8004e7e:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004e86:	69db      	ldr	r3, [r3, #28]
 8004e88:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004e8c:	f040 810c 	bne.w	80050a8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004e90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e94:	2200      	movs	r2, #0
 8004e96:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004e9a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004e9e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004ea2:	4622      	mov	r2, r4
 8004ea4:	462b      	mov	r3, r5
 8004ea6:	1891      	adds	r1, r2, r2
 8004ea8:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004eaa:	415b      	adcs	r3, r3
 8004eac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004eae:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004eb2:	4621      	mov	r1, r4
 8004eb4:	eb12 0801 	adds.w	r8, r2, r1
 8004eb8:	4629      	mov	r1, r5
 8004eba:	eb43 0901 	adc.w	r9, r3, r1
 8004ebe:	f04f 0200 	mov.w	r2, #0
 8004ec2:	f04f 0300 	mov.w	r3, #0
 8004ec6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004eca:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004ece:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004ed2:	4690      	mov	r8, r2
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4623      	mov	r3, r4
 8004ed8:	eb18 0303 	adds.w	r3, r8, r3
 8004edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004ee0:	462b      	mov	r3, r5
 8004ee2:	eb49 0303 	adc.w	r3, r9, r3
 8004ee6:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004eea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004eee:	685b      	ldr	r3, [r3, #4]
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004ef6:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004efa:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004efe:	460b      	mov	r3, r1
 8004f00:	18db      	adds	r3, r3, r3
 8004f02:	653b      	str	r3, [r7, #80]	@ 0x50
 8004f04:	4613      	mov	r3, r2
 8004f06:	eb42 0303 	adc.w	r3, r2, r3
 8004f0a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004f0c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004f10:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004f14:	f7fb f9ac 	bl	8000270 <__aeabi_uldivmod>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4b61      	ldr	r3, [pc, #388]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004f1e:	fba3 2302 	umull	r2, r3, r3, r2
 8004f22:	095b      	lsrs	r3, r3, #5
 8004f24:	011c      	lsls	r4, r3, #4
 8004f26:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f2a:	2200      	movs	r2, #0
 8004f2c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004f30:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004f34:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004f38:	4642      	mov	r2, r8
 8004f3a:	464b      	mov	r3, r9
 8004f3c:	1891      	adds	r1, r2, r2
 8004f3e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004f40:	415b      	adcs	r3, r3
 8004f42:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004f44:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004f48:	4641      	mov	r1, r8
 8004f4a:	eb12 0a01 	adds.w	sl, r2, r1
 8004f4e:	4649      	mov	r1, r9
 8004f50:	eb43 0b01 	adc.w	fp, r3, r1
 8004f54:	f04f 0200 	mov.w	r2, #0
 8004f58:	f04f 0300 	mov.w	r3, #0
 8004f5c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004f60:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004f64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004f68:	4692      	mov	sl, r2
 8004f6a:	469b      	mov	fp, r3
 8004f6c:	4643      	mov	r3, r8
 8004f6e:	eb1a 0303 	adds.w	r3, sl, r3
 8004f72:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004f76:	464b      	mov	r3, r9
 8004f78:	eb4b 0303 	adc.w	r3, fp, r3
 8004f7c:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004f80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	2200      	movs	r2, #0
 8004f88:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f8c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004f90:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004f94:	460b      	mov	r3, r1
 8004f96:	18db      	adds	r3, r3, r3
 8004f98:	643b      	str	r3, [r7, #64]	@ 0x40
 8004f9a:	4613      	mov	r3, r2
 8004f9c:	eb42 0303 	adc.w	r3, r2, r3
 8004fa0:	647b      	str	r3, [r7, #68]	@ 0x44
 8004fa2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004fa6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004faa:	f7fb f961 	bl	8000270 <__aeabi_uldivmod>
 8004fae:	4602      	mov	r2, r0
 8004fb0:	460b      	mov	r3, r1
 8004fb2:	4611      	mov	r1, r2
 8004fb4:	4b3b      	ldr	r3, [pc, #236]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004fb6:	fba3 2301 	umull	r2, r3, r3, r1
 8004fba:	095b      	lsrs	r3, r3, #5
 8004fbc:	2264      	movs	r2, #100	@ 0x64
 8004fbe:	fb02 f303 	mul.w	r3, r2, r3
 8004fc2:	1acb      	subs	r3, r1, r3
 8004fc4:	00db      	lsls	r3, r3, #3
 8004fc6:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004fca:	4b36      	ldr	r3, [pc, #216]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8004fcc:	fba3 2302 	umull	r2, r3, r3, r2
 8004fd0:	095b      	lsrs	r3, r3, #5
 8004fd2:	005b      	lsls	r3, r3, #1
 8004fd4:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004fd8:	441c      	add	r4, r3
 8004fda:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004fe4:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004fe8:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004fec:	4642      	mov	r2, r8
 8004fee:	464b      	mov	r3, r9
 8004ff0:	1891      	adds	r1, r2, r2
 8004ff2:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004ff4:	415b      	adcs	r3, r3
 8004ff6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004ff8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004ffc:	4641      	mov	r1, r8
 8004ffe:	1851      	adds	r1, r2, r1
 8005000:	6339      	str	r1, [r7, #48]	@ 0x30
 8005002:	4649      	mov	r1, r9
 8005004:	414b      	adcs	r3, r1
 8005006:	637b      	str	r3, [r7, #52]	@ 0x34
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005014:	4659      	mov	r1, fp
 8005016:	00cb      	lsls	r3, r1, #3
 8005018:	4651      	mov	r1, sl
 800501a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800501e:	4651      	mov	r1, sl
 8005020:	00ca      	lsls	r2, r1, #3
 8005022:	4610      	mov	r0, r2
 8005024:	4619      	mov	r1, r3
 8005026:	4603      	mov	r3, r0
 8005028:	4642      	mov	r2, r8
 800502a:	189b      	adds	r3, r3, r2
 800502c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005030:	464b      	mov	r3, r9
 8005032:	460a      	mov	r2, r1
 8005034:	eb42 0303 	adc.w	r3, r2, r3
 8005038:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800503c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005040:	685b      	ldr	r3, [r3, #4]
 8005042:	2200      	movs	r2, #0
 8005044:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005048:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 800504c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005050:	460b      	mov	r3, r1
 8005052:	18db      	adds	r3, r3, r3
 8005054:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005056:	4613      	mov	r3, r2
 8005058:	eb42 0303 	adc.w	r3, r2, r3
 800505c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800505e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005062:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005066:	f7fb f903 	bl	8000270 <__aeabi_uldivmod>
 800506a:	4602      	mov	r2, r0
 800506c:	460b      	mov	r3, r1
 800506e:	4b0d      	ldr	r3, [pc, #52]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8005070:	fba3 1302 	umull	r1, r3, r3, r2
 8005074:	095b      	lsrs	r3, r3, #5
 8005076:	2164      	movs	r1, #100	@ 0x64
 8005078:	fb01 f303 	mul.w	r3, r1, r3
 800507c:	1ad3      	subs	r3, r2, r3
 800507e:	00db      	lsls	r3, r3, #3
 8005080:	3332      	adds	r3, #50	@ 0x32
 8005082:	4a08      	ldr	r2, [pc, #32]	@ (80050a4 <UART_SetConfig+0x2d4>)
 8005084:	fba2 2303 	umull	r2, r3, r2, r3
 8005088:	095b      	lsrs	r3, r3, #5
 800508a:	f003 0207 	and.w	r2, r3, #7
 800508e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005092:	681b      	ldr	r3, [r3, #0]
 8005094:	4422      	add	r2, r4
 8005096:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005098:	e106      	b.n	80052a8 <UART_SetConfig+0x4d8>
 800509a:	bf00      	nop
 800509c:	40011000 	.word	0x40011000
 80050a0:	40011400 	.word	0x40011400
 80050a4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80050a8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80050ac:	2200      	movs	r2, #0
 80050ae:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80050b2:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80050b6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80050ba:	4642      	mov	r2, r8
 80050bc:	464b      	mov	r3, r9
 80050be:	1891      	adds	r1, r2, r2
 80050c0:	6239      	str	r1, [r7, #32]
 80050c2:	415b      	adcs	r3, r3
 80050c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80050c6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80050ca:	4641      	mov	r1, r8
 80050cc:	1854      	adds	r4, r2, r1
 80050ce:	4649      	mov	r1, r9
 80050d0:	eb43 0501 	adc.w	r5, r3, r1
 80050d4:	f04f 0200 	mov.w	r2, #0
 80050d8:	f04f 0300 	mov.w	r3, #0
 80050dc:	00eb      	lsls	r3, r5, #3
 80050de:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80050e2:	00e2      	lsls	r2, r4, #3
 80050e4:	4614      	mov	r4, r2
 80050e6:	461d      	mov	r5, r3
 80050e8:	4643      	mov	r3, r8
 80050ea:	18e3      	adds	r3, r4, r3
 80050ec:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80050f0:	464b      	mov	r3, r9
 80050f2:	eb45 0303 	adc.w	r3, r5, r3
 80050f6:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80050fa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050fe:	685b      	ldr	r3, [r3, #4]
 8005100:	2200      	movs	r2, #0
 8005102:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005106:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800510a:	f04f 0200 	mov.w	r2, #0
 800510e:	f04f 0300 	mov.w	r3, #0
 8005112:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005116:	4629      	mov	r1, r5
 8005118:	008b      	lsls	r3, r1, #2
 800511a:	4621      	mov	r1, r4
 800511c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005120:	4621      	mov	r1, r4
 8005122:	008a      	lsls	r2, r1, #2
 8005124:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005128:	f7fb f8a2 	bl	8000270 <__aeabi_uldivmod>
 800512c:	4602      	mov	r2, r0
 800512e:	460b      	mov	r3, r1
 8005130:	4b60      	ldr	r3, [pc, #384]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005132:	fba3 2302 	umull	r2, r3, r3, r2
 8005136:	095b      	lsrs	r3, r3, #5
 8005138:	011c      	lsls	r4, r3, #4
 800513a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800513e:	2200      	movs	r2, #0
 8005140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005144:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005148:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 800514c:	4642      	mov	r2, r8
 800514e:	464b      	mov	r3, r9
 8005150:	1891      	adds	r1, r2, r2
 8005152:	61b9      	str	r1, [r7, #24]
 8005154:	415b      	adcs	r3, r3
 8005156:	61fb      	str	r3, [r7, #28]
 8005158:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800515c:	4641      	mov	r1, r8
 800515e:	1851      	adds	r1, r2, r1
 8005160:	6139      	str	r1, [r7, #16]
 8005162:	4649      	mov	r1, r9
 8005164:	414b      	adcs	r3, r1
 8005166:	617b      	str	r3, [r7, #20]
 8005168:	f04f 0200 	mov.w	r2, #0
 800516c:	f04f 0300 	mov.w	r3, #0
 8005170:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005174:	4659      	mov	r1, fp
 8005176:	00cb      	lsls	r3, r1, #3
 8005178:	4651      	mov	r1, sl
 800517a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800517e:	4651      	mov	r1, sl
 8005180:	00ca      	lsls	r2, r1, #3
 8005182:	4610      	mov	r0, r2
 8005184:	4619      	mov	r1, r3
 8005186:	4603      	mov	r3, r0
 8005188:	4642      	mov	r2, r8
 800518a:	189b      	adds	r3, r3, r2
 800518c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005190:	464b      	mov	r3, r9
 8005192:	460a      	mov	r2, r1
 8005194:	eb42 0303 	adc.w	r3, r2, r3
 8005198:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 800519c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a0:	685b      	ldr	r3, [r3, #4]
 80051a2:	2200      	movs	r2, #0
 80051a4:	67bb      	str	r3, [r7, #120]	@ 0x78
 80051a6:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80051a8:	f04f 0200 	mov.w	r2, #0
 80051ac:	f04f 0300 	mov.w	r3, #0
 80051b0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80051b4:	4649      	mov	r1, r9
 80051b6:	008b      	lsls	r3, r1, #2
 80051b8:	4641      	mov	r1, r8
 80051ba:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80051be:	4641      	mov	r1, r8
 80051c0:	008a      	lsls	r2, r1, #2
 80051c2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80051c6:	f7fb f853 	bl	8000270 <__aeabi_uldivmod>
 80051ca:	4602      	mov	r2, r0
 80051cc:	460b      	mov	r3, r1
 80051ce:	4611      	mov	r1, r2
 80051d0:	4b38      	ldr	r3, [pc, #224]	@ (80052b4 <UART_SetConfig+0x4e4>)
 80051d2:	fba3 2301 	umull	r2, r3, r3, r1
 80051d6:	095b      	lsrs	r3, r3, #5
 80051d8:	2264      	movs	r2, #100	@ 0x64
 80051da:	fb02 f303 	mul.w	r3, r2, r3
 80051de:	1acb      	subs	r3, r1, r3
 80051e0:	011b      	lsls	r3, r3, #4
 80051e2:	3332      	adds	r3, #50	@ 0x32
 80051e4:	4a33      	ldr	r2, [pc, #204]	@ (80052b4 <UART_SetConfig+0x4e4>)
 80051e6:	fba2 2303 	umull	r2, r3, r2, r3
 80051ea:	095b      	lsrs	r3, r3, #5
 80051ec:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80051f0:	441c      	add	r4, r3
 80051f2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80051f6:	2200      	movs	r2, #0
 80051f8:	673b      	str	r3, [r7, #112]	@ 0x70
 80051fa:	677a      	str	r2, [r7, #116]	@ 0x74
 80051fc:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005200:	4642      	mov	r2, r8
 8005202:	464b      	mov	r3, r9
 8005204:	1891      	adds	r1, r2, r2
 8005206:	60b9      	str	r1, [r7, #8]
 8005208:	415b      	adcs	r3, r3
 800520a:	60fb      	str	r3, [r7, #12]
 800520c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005210:	4641      	mov	r1, r8
 8005212:	1851      	adds	r1, r2, r1
 8005214:	6039      	str	r1, [r7, #0]
 8005216:	4649      	mov	r1, r9
 8005218:	414b      	adcs	r3, r1
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	f04f 0200 	mov.w	r2, #0
 8005220:	f04f 0300 	mov.w	r3, #0
 8005224:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005228:	4659      	mov	r1, fp
 800522a:	00cb      	lsls	r3, r1, #3
 800522c:	4651      	mov	r1, sl
 800522e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005232:	4651      	mov	r1, sl
 8005234:	00ca      	lsls	r2, r1, #3
 8005236:	4610      	mov	r0, r2
 8005238:	4619      	mov	r1, r3
 800523a:	4603      	mov	r3, r0
 800523c:	4642      	mov	r2, r8
 800523e:	189b      	adds	r3, r3, r2
 8005240:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005242:	464b      	mov	r3, r9
 8005244:	460a      	mov	r2, r1
 8005246:	eb42 0303 	adc.w	r3, r2, r3
 800524a:	66fb      	str	r3, [r7, #108]	@ 0x6c
 800524c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005250:	685b      	ldr	r3, [r3, #4]
 8005252:	2200      	movs	r2, #0
 8005254:	663b      	str	r3, [r7, #96]	@ 0x60
 8005256:	667a      	str	r2, [r7, #100]	@ 0x64
 8005258:	f04f 0200 	mov.w	r2, #0
 800525c:	f04f 0300 	mov.w	r3, #0
 8005260:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005264:	4649      	mov	r1, r9
 8005266:	008b      	lsls	r3, r1, #2
 8005268:	4641      	mov	r1, r8
 800526a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800526e:	4641      	mov	r1, r8
 8005270:	008a      	lsls	r2, r1, #2
 8005272:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8005276:	f7fa fffb 	bl	8000270 <__aeabi_uldivmod>
 800527a:	4602      	mov	r2, r0
 800527c:	460b      	mov	r3, r1
 800527e:	4b0d      	ldr	r3, [pc, #52]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005280:	fba3 1302 	umull	r1, r3, r3, r2
 8005284:	095b      	lsrs	r3, r3, #5
 8005286:	2164      	movs	r1, #100	@ 0x64
 8005288:	fb01 f303 	mul.w	r3, r1, r3
 800528c:	1ad3      	subs	r3, r2, r3
 800528e:	011b      	lsls	r3, r3, #4
 8005290:	3332      	adds	r3, #50	@ 0x32
 8005292:	4a08      	ldr	r2, [pc, #32]	@ (80052b4 <UART_SetConfig+0x4e4>)
 8005294:	fba2 2303 	umull	r2, r3, r2, r3
 8005298:	095b      	lsrs	r3, r3, #5
 800529a:	f003 020f 	and.w	r2, r3, #15
 800529e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	4422      	add	r2, r4
 80052a6:	609a      	str	r2, [r3, #8]
}
 80052a8:	bf00      	nop
 80052aa:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80052ae:	46bd      	mov	sp, r7
 80052b0:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80052b4:	51eb851f 	.word	0x51eb851f

080052b8 <__NVIC_SetPriority>:
{
 80052b8:	b480      	push	{r7}
 80052ba:	b083      	sub	sp, #12
 80052bc:	af00      	add	r7, sp, #0
 80052be:	4603      	mov	r3, r0
 80052c0:	6039      	str	r1, [r7, #0]
 80052c2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80052c4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	db0a      	blt.n	80052e2 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052cc:	683b      	ldr	r3, [r7, #0]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	490c      	ldr	r1, [pc, #48]	@ (8005304 <__NVIC_SetPriority+0x4c>)
 80052d2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80052d6:	0112      	lsls	r2, r2, #4
 80052d8:	b2d2      	uxtb	r2, r2
 80052da:	440b      	add	r3, r1
 80052dc:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80052e0:	e00a      	b.n	80052f8 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80052e2:	683b      	ldr	r3, [r7, #0]
 80052e4:	b2da      	uxtb	r2, r3
 80052e6:	4908      	ldr	r1, [pc, #32]	@ (8005308 <__NVIC_SetPriority+0x50>)
 80052e8:	79fb      	ldrb	r3, [r7, #7]
 80052ea:	f003 030f 	and.w	r3, r3, #15
 80052ee:	3b04      	subs	r3, #4
 80052f0:	0112      	lsls	r2, r2, #4
 80052f2:	b2d2      	uxtb	r2, r2
 80052f4:	440b      	add	r3, r1
 80052f6:	761a      	strb	r2, [r3, #24]
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr
 8005304:	e000e100 	.word	0xe000e100
 8005308:	e000ed00 	.word	0xe000ed00

0800530c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800530c:	b580      	push	{r7, lr}
 800530e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005310:	4b05      	ldr	r3, [pc, #20]	@ (8005328 <SysTick_Handler+0x1c>)
 8005312:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005314:	f001 fed4 	bl	80070c0 <xTaskGetSchedulerState>
 8005318:	4603      	mov	r3, r0
 800531a:	2b01      	cmp	r3, #1
 800531c:	d001      	beq.n	8005322 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800531e:	f002 fccb 	bl	8007cb8 <xPortSysTickHandler>
  }
}
 8005322:	bf00      	nop
 8005324:	bd80      	pop	{r7, pc}
 8005326:	bf00      	nop
 8005328:	e000e010 	.word	0xe000e010

0800532c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800532c:	b580      	push	{r7, lr}
 800532e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005330:	2100      	movs	r1, #0
 8005332:	f06f 0004 	mvn.w	r0, #4
 8005336:	f7ff ffbf 	bl	80052b8 <__NVIC_SetPriority>
#endif
}
 800533a:	bf00      	nop
 800533c:	bd80      	pop	{r7, pc}
	...

08005340 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005340:	b480      	push	{r7}
 8005342:	b083      	sub	sp, #12
 8005344:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005346:	f3ef 8305 	mrs	r3, IPSR
 800534a:	603b      	str	r3, [r7, #0]
  return(result);
 800534c:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800534e:	2b00      	cmp	r3, #0
 8005350:	d003      	beq.n	800535a <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005352:	f06f 0305 	mvn.w	r3, #5
 8005356:	607b      	str	r3, [r7, #4]
 8005358:	e00c      	b.n	8005374 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800535a:	4b0a      	ldr	r3, [pc, #40]	@ (8005384 <osKernelInitialize+0x44>)
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	d105      	bne.n	800536e <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005362:	4b08      	ldr	r3, [pc, #32]	@ (8005384 <osKernelInitialize+0x44>)
 8005364:	2201      	movs	r2, #1
 8005366:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8005368:	2300      	movs	r3, #0
 800536a:	607b      	str	r3, [r7, #4]
 800536c:	e002      	b.n	8005374 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 800536e:	f04f 33ff 	mov.w	r3, #4294967295
 8005372:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005374:	687b      	ldr	r3, [r7, #4]
}
 8005376:	4618      	mov	r0, r3
 8005378:	370c      	adds	r7, #12
 800537a:	46bd      	mov	sp, r7
 800537c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005380:	4770      	bx	lr
 8005382:	bf00      	nop
 8005384:	200001a0 	.word	0x200001a0

08005388 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8005388:	b580      	push	{r7, lr}
 800538a:	b082      	sub	sp, #8
 800538c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800538e:	f3ef 8305 	mrs	r3, IPSR
 8005392:	603b      	str	r3, [r7, #0]
  return(result);
 8005394:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005396:	2b00      	cmp	r3, #0
 8005398:	d003      	beq.n	80053a2 <osKernelStart+0x1a>
    stat = osErrorISR;
 800539a:	f06f 0305 	mvn.w	r3, #5
 800539e:	607b      	str	r3, [r7, #4]
 80053a0:	e010      	b.n	80053c4 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80053a2:	4b0b      	ldr	r3, [pc, #44]	@ (80053d0 <osKernelStart+0x48>)
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	2b01      	cmp	r3, #1
 80053a8:	d109      	bne.n	80053be <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80053aa:	f7ff ffbf 	bl	800532c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80053ae:	4b08      	ldr	r3, [pc, #32]	@ (80053d0 <osKernelStart+0x48>)
 80053b0:	2202      	movs	r2, #2
 80053b2:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80053b4:	f001 fa20 	bl	80067f8 <vTaskStartScheduler>
      stat = osOK;
 80053b8:	2300      	movs	r3, #0
 80053ba:	607b      	str	r3, [r7, #4]
 80053bc:	e002      	b.n	80053c4 <osKernelStart+0x3c>
    } else {
      stat = osError;
 80053be:	f04f 33ff 	mov.w	r3, #4294967295
 80053c2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80053c4:	687b      	ldr	r3, [r7, #4]
}
 80053c6:	4618      	mov	r0, r3
 80053c8:	3708      	adds	r7, #8
 80053ca:	46bd      	mov	sp, r7
 80053cc:	bd80      	pop	{r7, pc}
 80053ce:	bf00      	nop
 80053d0:	200001a0 	.word	0x200001a0

080053d4 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 80053d4:	b580      	push	{r7, lr}
 80053d6:	b08e      	sub	sp, #56	@ 0x38
 80053d8:	af04      	add	r7, sp, #16
 80053da:	60f8      	str	r0, [r7, #12]
 80053dc:	60b9      	str	r1, [r7, #8]
 80053de:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80053e0:	2300      	movs	r3, #0
 80053e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80053e4:	f3ef 8305 	mrs	r3, IPSR
 80053e8:	617b      	str	r3, [r7, #20]
  return(result);
 80053ea:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d17e      	bne.n	80054ee <osThreadNew+0x11a>
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d07b      	beq.n	80054ee <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80053f6:	2380      	movs	r3, #128	@ 0x80
 80053f8:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80053fa:	2318      	movs	r3, #24
 80053fc:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80053fe:	2300      	movs	r3, #0
 8005400:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005402:	f04f 33ff 	mov.w	r3, #4294967295
 8005406:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	2b00      	cmp	r3, #0
 800540c:	d045      	beq.n	800549a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	2b00      	cmp	r3, #0
 8005414:	d002      	beq.n	800541c <osThreadNew+0x48>
        name = attr->name;
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	681b      	ldr	r3, [r3, #0]
 800541a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	699b      	ldr	r3, [r3, #24]
 8005420:	2b00      	cmp	r3, #0
 8005422:	d002      	beq.n	800542a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	699b      	ldr	r3, [r3, #24]
 8005428:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800542a:	69fb      	ldr	r3, [r7, #28]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d008      	beq.n	8005442 <osThreadNew+0x6e>
 8005430:	69fb      	ldr	r3, [r7, #28]
 8005432:	2b38      	cmp	r3, #56	@ 0x38
 8005434:	d805      	bhi.n	8005442 <osThreadNew+0x6e>
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	685b      	ldr	r3, [r3, #4]
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d001      	beq.n	8005446 <osThreadNew+0x72>
        return (NULL);
 8005442:	2300      	movs	r3, #0
 8005444:	e054      	b.n	80054f0 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	695b      	ldr	r3, [r3, #20]
 800544a:	2b00      	cmp	r3, #0
 800544c:	d003      	beq.n	8005456 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	695b      	ldr	r3, [r3, #20]
 8005452:	089b      	lsrs	r3, r3, #2
 8005454:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	689b      	ldr	r3, [r3, #8]
 800545a:	2b00      	cmp	r3, #0
 800545c:	d00e      	beq.n	800547c <osThreadNew+0xa8>
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	68db      	ldr	r3, [r3, #12]
 8005462:	2ba7      	cmp	r3, #167	@ 0xa7
 8005464:	d90a      	bls.n	800547c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800546a:	2b00      	cmp	r3, #0
 800546c:	d006      	beq.n	800547c <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	695b      	ldr	r3, [r3, #20]
 8005472:	2b00      	cmp	r3, #0
 8005474:	d002      	beq.n	800547c <osThreadNew+0xa8>
        mem = 1;
 8005476:	2301      	movs	r3, #1
 8005478:	61bb      	str	r3, [r7, #24]
 800547a:	e010      	b.n	800549e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	689b      	ldr	r3, [r3, #8]
 8005480:	2b00      	cmp	r3, #0
 8005482:	d10c      	bne.n	800549e <osThreadNew+0xca>
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	68db      	ldr	r3, [r3, #12]
 8005488:	2b00      	cmp	r3, #0
 800548a:	d108      	bne.n	800549e <osThreadNew+0xca>
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	691b      	ldr	r3, [r3, #16]
 8005490:	2b00      	cmp	r3, #0
 8005492:	d104      	bne.n	800549e <osThreadNew+0xca>
          mem = 0;
 8005494:	2300      	movs	r3, #0
 8005496:	61bb      	str	r3, [r7, #24]
 8005498:	e001      	b.n	800549e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800549a:	2300      	movs	r3, #0
 800549c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800549e:	69bb      	ldr	r3, [r7, #24]
 80054a0:	2b01      	cmp	r3, #1
 80054a2:	d110      	bne.n	80054c6 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80054a8:	687a      	ldr	r2, [r7, #4]
 80054aa:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80054ac:	9202      	str	r2, [sp, #8]
 80054ae:	9301      	str	r3, [sp, #4]
 80054b0:	69fb      	ldr	r3, [r7, #28]
 80054b2:	9300      	str	r3, [sp, #0]
 80054b4:	68bb      	ldr	r3, [r7, #8]
 80054b6:	6a3a      	ldr	r2, [r7, #32]
 80054b8:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054ba:	68f8      	ldr	r0, [r7, #12]
 80054bc:	f000 ffa8 	bl	8006410 <xTaskCreateStatic>
 80054c0:	4603      	mov	r3, r0
 80054c2:	613b      	str	r3, [r7, #16]
 80054c4:	e013      	b.n	80054ee <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 80054c6:	69bb      	ldr	r3, [r7, #24]
 80054c8:	2b00      	cmp	r3, #0
 80054ca:	d110      	bne.n	80054ee <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 80054cc:	6a3b      	ldr	r3, [r7, #32]
 80054ce:	b29a      	uxth	r2, r3
 80054d0:	f107 0310 	add.w	r3, r7, #16
 80054d4:	9301      	str	r3, [sp, #4]
 80054d6:	69fb      	ldr	r3, [r7, #28]
 80054d8:	9300      	str	r3, [sp, #0]
 80054da:	68bb      	ldr	r3, [r7, #8]
 80054dc:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80054de:	68f8      	ldr	r0, [r7, #12]
 80054e0:	f000 fff6 	bl	80064d0 <xTaskCreate>
 80054e4:	4603      	mov	r3, r0
 80054e6:	2b01      	cmp	r3, #1
 80054e8:	d001      	beq.n	80054ee <osThreadNew+0x11a>
            hTask = NULL;
 80054ea:	2300      	movs	r3, #0
 80054ec:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80054ee:	693b      	ldr	r3, [r7, #16]
}
 80054f0:	4618      	mov	r0, r3
 80054f2:	3728      	adds	r7, #40	@ 0x28
 80054f4:	46bd      	mov	sp, r7
 80054f6:	bd80      	pop	{r7, pc}

080054f8 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80054f8:	b580      	push	{r7, lr}
 80054fa:	b084      	sub	sp, #16
 80054fc:	af00      	add	r7, sp, #0
 80054fe:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005500:	f3ef 8305 	mrs	r3, IPSR
 8005504:	60bb      	str	r3, [r7, #8]
  return(result);
 8005506:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005508:	2b00      	cmp	r3, #0
 800550a:	d003      	beq.n	8005514 <osDelay+0x1c>
    stat = osErrorISR;
 800550c:	f06f 0305 	mvn.w	r3, #5
 8005510:	60fb      	str	r3, [r7, #12]
 8005512:	e007      	b.n	8005524 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005514:	2300      	movs	r3, #0
 8005516:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005518:	687b      	ldr	r3, [r7, #4]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d002      	beq.n	8005524 <osDelay+0x2c>
      vTaskDelay(ticks);
 800551e:	6878      	ldr	r0, [r7, #4]
 8005520:	f001 f934 	bl	800678c <vTaskDelay>
    }
  }

  return (stat);
 8005524:	68fb      	ldr	r3, [r7, #12]
}
 8005526:	4618      	mov	r0, r3
 8005528:	3710      	adds	r7, #16
 800552a:	46bd      	mov	sp, r7
 800552c:	bd80      	pop	{r7, pc}

0800552e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800552e:	b580      	push	{r7, lr}
 8005530:	b08a      	sub	sp, #40	@ 0x28
 8005532:	af02      	add	r7, sp, #8
 8005534:	60f8      	str	r0, [r7, #12]
 8005536:	60b9      	str	r1, [r7, #8]
 8005538:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800553a:	2300      	movs	r3, #0
 800553c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800553e:	f3ef 8305 	mrs	r3, IPSR
 8005542:	613b      	str	r3, [r7, #16]
  return(result);
 8005544:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005546:	2b00      	cmp	r3, #0
 8005548:	d15f      	bne.n	800560a <osMessageQueueNew+0xdc>
 800554a:	68fb      	ldr	r3, [r7, #12]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d05c      	beq.n	800560a <osMessageQueueNew+0xdc>
 8005550:	68bb      	ldr	r3, [r7, #8]
 8005552:	2b00      	cmp	r3, #0
 8005554:	d059      	beq.n	800560a <osMessageQueueNew+0xdc>
    mem = -1;
 8005556:	f04f 33ff 	mov.w	r3, #4294967295
 800555a:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	2b00      	cmp	r3, #0
 8005560:	d029      	beq.n	80055b6 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	689b      	ldr	r3, [r3, #8]
 8005566:	2b00      	cmp	r3, #0
 8005568:	d012      	beq.n	8005590 <osMessageQueueNew+0x62>
 800556a:	687b      	ldr	r3, [r7, #4]
 800556c:	68db      	ldr	r3, [r3, #12]
 800556e:	2b4f      	cmp	r3, #79	@ 0x4f
 8005570:	d90e      	bls.n	8005590 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005572:	687b      	ldr	r3, [r7, #4]
 8005574:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005576:	2b00      	cmp	r3, #0
 8005578:	d00a      	beq.n	8005590 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800557a:	687b      	ldr	r3, [r7, #4]
 800557c:	695a      	ldr	r2, [r3, #20]
 800557e:	68fb      	ldr	r3, [r7, #12]
 8005580:	68b9      	ldr	r1, [r7, #8]
 8005582:	fb01 f303 	mul.w	r3, r1, r3
 8005586:	429a      	cmp	r2, r3
 8005588:	d302      	bcc.n	8005590 <osMessageQueueNew+0x62>
        mem = 1;
 800558a:	2301      	movs	r3, #1
 800558c:	61bb      	str	r3, [r7, #24]
 800558e:	e014      	b.n	80055ba <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	689b      	ldr	r3, [r3, #8]
 8005594:	2b00      	cmp	r3, #0
 8005596:	d110      	bne.n	80055ba <osMessageQueueNew+0x8c>
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	68db      	ldr	r3, [r3, #12]
 800559c:	2b00      	cmp	r3, #0
 800559e:	d10c      	bne.n	80055ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d108      	bne.n	80055ba <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	695b      	ldr	r3, [r3, #20]
 80055ac:	2b00      	cmp	r3, #0
 80055ae:	d104      	bne.n	80055ba <osMessageQueueNew+0x8c>
          mem = 0;
 80055b0:	2300      	movs	r3, #0
 80055b2:	61bb      	str	r3, [r7, #24]
 80055b4:	e001      	b.n	80055ba <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 80055b6:	2300      	movs	r3, #0
 80055b8:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80055ba:	69bb      	ldr	r3, [r7, #24]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d10b      	bne.n	80055d8 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	691a      	ldr	r2, [r3, #16]
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	689b      	ldr	r3, [r3, #8]
 80055c8:	2100      	movs	r1, #0
 80055ca:	9100      	str	r1, [sp, #0]
 80055cc:	68b9      	ldr	r1, [r7, #8]
 80055ce:	68f8      	ldr	r0, [r7, #12]
 80055d0:	f000 f9d0 	bl	8005974 <xQueueGenericCreateStatic>
 80055d4:	61f8      	str	r0, [r7, #28]
 80055d6:	e008      	b.n	80055ea <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 80055d8:	69bb      	ldr	r3, [r7, #24]
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d105      	bne.n	80055ea <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80055de:	2200      	movs	r2, #0
 80055e0:	68b9      	ldr	r1, [r7, #8]
 80055e2:	68f8      	ldr	r0, [r7, #12]
 80055e4:	f000 fa43 	bl	8005a6e <xQueueGenericCreate>
 80055e8:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80055ea:	69fb      	ldr	r3, [r7, #28]
 80055ec:	2b00      	cmp	r3, #0
 80055ee:	d00c      	beq.n	800560a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d003      	beq.n	80055fe <osMessageQueueNew+0xd0>
        name = attr->name;
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	617b      	str	r3, [r7, #20]
 80055fc:	e001      	b.n	8005602 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80055fe:	2300      	movs	r3, #0
 8005600:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005602:	6979      	ldr	r1, [r7, #20]
 8005604:	69f8      	ldr	r0, [r7, #28]
 8005606:	f000 fea5 	bl	8006354 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800560a:	69fb      	ldr	r3, [r7, #28]
}
 800560c:	4618      	mov	r0, r3
 800560e:	3720      	adds	r7, #32
 8005610:	46bd      	mov	sp, r7
 8005612:	bd80      	pop	{r7, pc}

08005614 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005614:	b580      	push	{r7, lr}
 8005616:	b088      	sub	sp, #32
 8005618:	af00      	add	r7, sp, #0
 800561a:	60f8      	str	r0, [r7, #12]
 800561c:	60b9      	str	r1, [r7, #8]
 800561e:	607a      	str	r2, [r7, #4]
 8005620:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005622:	68fb      	ldr	r3, [r7, #12]
 8005624:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005626:	2300      	movs	r3, #0
 8005628:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800562a:	f3ef 8305 	mrs	r3, IPSR
 800562e:	617b      	str	r3, [r7, #20]
  return(result);
 8005630:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005632:	2b00      	cmp	r3, #0
 8005634:	d028      	beq.n	8005688 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005636:	69bb      	ldr	r3, [r7, #24]
 8005638:	2b00      	cmp	r3, #0
 800563a:	d005      	beq.n	8005648 <osMessageQueueGet+0x34>
 800563c:	68bb      	ldr	r3, [r7, #8]
 800563e:	2b00      	cmp	r3, #0
 8005640:	d002      	beq.n	8005648 <osMessageQueueGet+0x34>
 8005642:	683b      	ldr	r3, [r7, #0]
 8005644:	2b00      	cmp	r3, #0
 8005646:	d003      	beq.n	8005650 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8005648:	f06f 0303 	mvn.w	r3, #3
 800564c:	61fb      	str	r3, [r7, #28]
 800564e:	e037      	b.n	80056c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8005650:	2300      	movs	r3, #0
 8005652:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8005654:	f107 0310 	add.w	r3, r7, #16
 8005658:	461a      	mov	r2, r3
 800565a:	68b9      	ldr	r1, [r7, #8]
 800565c:	69b8      	ldr	r0, [r7, #24]
 800565e:	f000 fce7 	bl	8006030 <xQueueReceiveFromISR>
 8005662:	4603      	mov	r3, r0
 8005664:	2b01      	cmp	r3, #1
 8005666:	d003      	beq.n	8005670 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8005668:	f06f 0302 	mvn.w	r3, #2
 800566c:	61fb      	str	r3, [r7, #28]
 800566e:	e027      	b.n	80056c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8005670:	693b      	ldr	r3, [r7, #16]
 8005672:	2b00      	cmp	r3, #0
 8005674:	d024      	beq.n	80056c0 <osMessageQueueGet+0xac>
 8005676:	4b15      	ldr	r3, [pc, #84]	@ (80056cc <osMessageQueueGet+0xb8>)
 8005678:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800567c:	601a      	str	r2, [r3, #0]
 800567e:	f3bf 8f4f 	dsb	sy
 8005682:	f3bf 8f6f 	isb	sy
 8005686:	e01b      	b.n	80056c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8005688:	69bb      	ldr	r3, [r7, #24]
 800568a:	2b00      	cmp	r3, #0
 800568c:	d002      	beq.n	8005694 <osMessageQueueGet+0x80>
 800568e:	68bb      	ldr	r3, [r7, #8]
 8005690:	2b00      	cmp	r3, #0
 8005692:	d103      	bne.n	800569c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8005694:	f06f 0303 	mvn.w	r3, #3
 8005698:	61fb      	str	r3, [r7, #28]
 800569a:	e011      	b.n	80056c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800569c:	683a      	ldr	r2, [r7, #0]
 800569e:	68b9      	ldr	r1, [r7, #8]
 80056a0:	69b8      	ldr	r0, [r7, #24]
 80056a2:	f000 fbe3 	bl	8005e6c <xQueueReceive>
 80056a6:	4603      	mov	r3, r0
 80056a8:	2b01      	cmp	r3, #1
 80056aa:	d009      	beq.n	80056c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80056ac:	683b      	ldr	r3, [r7, #0]
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d003      	beq.n	80056ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80056b2:	f06f 0301 	mvn.w	r3, #1
 80056b6:	61fb      	str	r3, [r7, #28]
 80056b8:	e002      	b.n	80056c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80056ba:	f06f 0302 	mvn.w	r3, #2
 80056be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80056c0:	69fb      	ldr	r3, [r7, #28]
}
 80056c2:	4618      	mov	r0, r3
 80056c4:	3720      	adds	r7, #32
 80056c6:	46bd      	mov	sp, r7
 80056c8:	bd80      	pop	{r7, pc}
 80056ca:	bf00      	nop
 80056cc:	e000ed04 	.word	0xe000ed04

080056d0 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80056d0:	b480      	push	{r7}
 80056d2:	b085      	sub	sp, #20
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	60f8      	str	r0, [r7, #12]
 80056d8:	60b9      	str	r1, [r7, #8]
 80056da:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	4a07      	ldr	r2, [pc, #28]	@ (80056fc <vApplicationGetIdleTaskMemory+0x2c>)
 80056e0:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80056e2:	68bb      	ldr	r3, [r7, #8]
 80056e4:	4a06      	ldr	r2, [pc, #24]	@ (8005700 <vApplicationGetIdleTaskMemory+0x30>)
 80056e6:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	2280      	movs	r2, #128	@ 0x80
 80056ec:	601a      	str	r2, [r3, #0]
}
 80056ee:	bf00      	nop
 80056f0:	3714      	adds	r7, #20
 80056f2:	46bd      	mov	sp, r7
 80056f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056f8:	4770      	bx	lr
 80056fa:	bf00      	nop
 80056fc:	200001a4 	.word	0x200001a4
 8005700:	2000024c 	.word	0x2000024c

08005704 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005704:	b480      	push	{r7}
 8005706:	b085      	sub	sp, #20
 8005708:	af00      	add	r7, sp, #0
 800570a:	60f8      	str	r0, [r7, #12]
 800570c:	60b9      	str	r1, [r7, #8]
 800570e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	4a07      	ldr	r2, [pc, #28]	@ (8005730 <vApplicationGetTimerTaskMemory+0x2c>)
 8005714:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005716:	68bb      	ldr	r3, [r7, #8]
 8005718:	4a06      	ldr	r2, [pc, #24]	@ (8005734 <vApplicationGetTimerTaskMemory+0x30>)
 800571a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005722:	601a      	str	r2, [r3, #0]
}
 8005724:	bf00      	nop
 8005726:	3714      	adds	r7, #20
 8005728:	46bd      	mov	sp, r7
 800572a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800572e:	4770      	bx	lr
 8005730:	2000044c 	.word	0x2000044c
 8005734:	200004f4 	.word	0x200004f4

08005738 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005738:	b480      	push	{r7}
 800573a:	b083      	sub	sp, #12
 800573c:	af00      	add	r7, sp, #0
 800573e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005740:	687b      	ldr	r3, [r7, #4]
 8005742:	f103 0208 	add.w	r2, r3, #8
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800574a:	687b      	ldr	r3, [r7, #4]
 800574c:	f04f 32ff 	mov.w	r2, #4294967295
 8005750:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	f103 0208 	add.w	r2, r3, #8
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	f103 0208 	add.w	r2, r3, #8
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	2200      	movs	r2, #0
 800576a:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800576c:	bf00      	nop
 800576e:	370c      	adds	r7, #12
 8005770:	46bd      	mov	sp, r7
 8005772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005776:	4770      	bx	lr

08005778 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005778:	b480      	push	{r7}
 800577a:	b083      	sub	sp, #12
 800577c:	af00      	add	r7, sp, #0
 800577e:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	2200      	movs	r2, #0
 8005784:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005786:	bf00      	nop
 8005788:	370c      	adds	r7, #12
 800578a:	46bd      	mov	sp, r7
 800578c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005790:	4770      	bx	lr

08005792 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005792:	b480      	push	{r7}
 8005794:	b085      	sub	sp, #20
 8005796:	af00      	add	r7, sp, #0
 8005798:	6078      	str	r0, [r7, #4]
 800579a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	685b      	ldr	r3, [r3, #4]
 80057a0:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 80057a2:	683b      	ldr	r3, [r7, #0]
 80057a4:	68fa      	ldr	r2, [r7, #12]
 80057a6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 80057a8:	68fb      	ldr	r3, [r7, #12]
 80057aa:	689a      	ldr	r2, [r3, #8]
 80057ac:	683b      	ldr	r3, [r7, #0]
 80057ae:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 80057b0:	68fb      	ldr	r3, [r7, #12]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	683a      	ldr	r2, [r7, #0]
 80057b6:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 80057b8:	68fb      	ldr	r3, [r7, #12]
 80057ba:	683a      	ldr	r2, [r7, #0]
 80057bc:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 80057be:	683b      	ldr	r3, [r7, #0]
 80057c0:	687a      	ldr	r2, [r7, #4]
 80057c2:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	681b      	ldr	r3, [r3, #0]
 80057c8:	1c5a      	adds	r2, r3, #1
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	601a      	str	r2, [r3, #0]
}
 80057ce:	bf00      	nop
 80057d0:	3714      	adds	r7, #20
 80057d2:	46bd      	mov	sp, r7
 80057d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057d8:	4770      	bx	lr

080057da <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80057da:	b480      	push	{r7}
 80057dc:	b085      	sub	sp, #20
 80057de:	af00      	add	r7, sp, #0
 80057e0:	6078      	str	r0, [r7, #4]
 80057e2:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 80057e4:	683b      	ldr	r3, [r7, #0]
 80057e6:	681b      	ldr	r3, [r3, #0]
 80057e8:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 80057ea:	68bb      	ldr	r3, [r7, #8]
 80057ec:	f1b3 3fff 	cmp.w	r3, #4294967295
 80057f0:	d103      	bne.n	80057fa <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	691b      	ldr	r3, [r3, #16]
 80057f6:	60fb      	str	r3, [r7, #12]
 80057f8:	e00c      	b.n	8005814 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	3308      	adds	r3, #8
 80057fe:	60fb      	str	r3, [r7, #12]
 8005800:	e002      	b.n	8005808 <vListInsert+0x2e>
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	685b      	ldr	r3, [r3, #4]
 8005806:	60fb      	str	r3, [r7, #12]
 8005808:	68fb      	ldr	r3, [r7, #12]
 800580a:	685b      	ldr	r3, [r3, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	68ba      	ldr	r2, [r7, #8]
 8005810:	429a      	cmp	r2, r3
 8005812:	d2f6      	bcs.n	8005802 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005814:	68fb      	ldr	r3, [r7, #12]
 8005816:	685a      	ldr	r2, [r3, #4]
 8005818:	683b      	ldr	r3, [r7, #0]
 800581a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800581c:	683b      	ldr	r3, [r7, #0]
 800581e:	685b      	ldr	r3, [r3, #4]
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005824:	683b      	ldr	r3, [r7, #0]
 8005826:	68fa      	ldr	r2, [r7, #12]
 8005828:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800582a:	68fb      	ldr	r3, [r7, #12]
 800582c:	683a      	ldr	r2, [r7, #0]
 800582e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005830:	683b      	ldr	r3, [r7, #0]
 8005832:	687a      	ldr	r2, [r7, #4]
 8005834:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	681b      	ldr	r3, [r3, #0]
 800583a:	1c5a      	adds	r2, r3, #1
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	601a      	str	r2, [r3, #0]
}
 8005840:	bf00      	nop
 8005842:	3714      	adds	r7, #20
 8005844:	46bd      	mov	sp, r7
 8005846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800584a:	4770      	bx	lr

0800584c <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800584c:	b480      	push	{r7}
 800584e:	b085      	sub	sp, #20
 8005850:	af00      	add	r7, sp, #0
 8005852:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	691b      	ldr	r3, [r3, #16]
 8005858:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	687a      	ldr	r2, [r7, #4]
 8005860:	6892      	ldr	r2, [r2, #8]
 8005862:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	689b      	ldr	r3, [r3, #8]
 8005868:	687a      	ldr	r2, [r7, #4]
 800586a:	6852      	ldr	r2, [r2, #4]
 800586c:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800586e:	68fb      	ldr	r3, [r7, #12]
 8005870:	685b      	ldr	r3, [r3, #4]
 8005872:	687a      	ldr	r2, [r7, #4]
 8005874:	429a      	cmp	r2, r3
 8005876:	d103      	bne.n	8005880 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	689a      	ldr	r2, [r3, #8]
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	2200      	movs	r2, #0
 8005884:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	1e5a      	subs	r2, r3, #1
 800588c:	68fb      	ldr	r3, [r7, #12]
 800588e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005890:	68fb      	ldr	r3, [r7, #12]
 8005892:	681b      	ldr	r3, [r3, #0]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3714      	adds	r7, #20
 8005898:	46bd      	mov	sp, r7
 800589a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800589e:	4770      	bx	lr

080058a0 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 80058a0:	b580      	push	{r7, lr}
 80058a2:	b084      	sub	sp, #16
 80058a4:	af00      	add	r7, sp, #0
 80058a6:	6078      	str	r0, [r7, #4]
 80058a8:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	d10b      	bne.n	80058cc <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 80058b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058b8:	f383 8811 	msr	BASEPRI, r3
 80058bc:	f3bf 8f6f 	isb	sy
 80058c0:	f3bf 8f4f 	dsb	sy
 80058c4:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 80058c6:	bf00      	nop
 80058c8:	bf00      	nop
 80058ca:	e7fd      	b.n	80058c8 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 80058cc:	f002 f964 	bl	8007b98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	681a      	ldr	r2, [r3, #0]
 80058d4:	68fb      	ldr	r3, [r7, #12]
 80058d6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058d8:	68f9      	ldr	r1, [r7, #12]
 80058da:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 80058dc:	fb01 f303 	mul.w	r3, r1, r3
 80058e0:	441a      	add	r2, r3
 80058e2:	68fb      	ldr	r3, [r7, #12]
 80058e4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 80058e6:	68fb      	ldr	r3, [r7, #12]
 80058e8:	2200      	movs	r2, #0
 80058ea:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 80058ec:	68fb      	ldr	r3, [r7, #12]
 80058ee:	681a      	ldr	r2, [r3, #0]
 80058f0:	68fb      	ldr	r3, [r7, #12]
 80058f2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 80058f4:	68fb      	ldr	r3, [r7, #12]
 80058f6:	681a      	ldr	r2, [r3, #0]
 80058f8:	68fb      	ldr	r3, [r7, #12]
 80058fa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058fc:	3b01      	subs	r3, #1
 80058fe:	68f9      	ldr	r1, [r7, #12]
 8005900:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005902:	fb01 f303 	mul.w	r3, r1, r3
 8005906:	441a      	add	r2, r3
 8005908:	68fb      	ldr	r3, [r7, #12]
 800590a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800590c:	68fb      	ldr	r3, [r7, #12]
 800590e:	22ff      	movs	r2, #255	@ 0xff
 8005910:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005914:	68fb      	ldr	r3, [r7, #12]
 8005916:	22ff      	movs	r2, #255	@ 0xff
 8005918:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800591c:	683b      	ldr	r3, [r7, #0]
 800591e:	2b00      	cmp	r3, #0
 8005920:	d114      	bne.n	800594c <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005922:	68fb      	ldr	r3, [r7, #12]
 8005924:	691b      	ldr	r3, [r3, #16]
 8005926:	2b00      	cmp	r3, #0
 8005928:	d01a      	beq.n	8005960 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800592a:	68fb      	ldr	r3, [r7, #12]
 800592c:	3310      	adds	r3, #16
 800592e:	4618      	mov	r0, r3
 8005930:	f001 fa00 	bl	8006d34 <xTaskRemoveFromEventList>
 8005934:	4603      	mov	r3, r0
 8005936:	2b00      	cmp	r3, #0
 8005938:	d012      	beq.n	8005960 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800593a:	4b0d      	ldr	r3, [pc, #52]	@ (8005970 <xQueueGenericReset+0xd0>)
 800593c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005940:	601a      	str	r2, [r3, #0]
 8005942:	f3bf 8f4f 	dsb	sy
 8005946:	f3bf 8f6f 	isb	sy
 800594a:	e009      	b.n	8005960 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800594c:	68fb      	ldr	r3, [r7, #12]
 800594e:	3310      	adds	r3, #16
 8005950:	4618      	mov	r0, r3
 8005952:	f7ff fef1 	bl	8005738 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005956:	68fb      	ldr	r3, [r7, #12]
 8005958:	3324      	adds	r3, #36	@ 0x24
 800595a:	4618      	mov	r0, r3
 800595c:	f7ff feec 	bl	8005738 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005960:	f002 f94c 	bl	8007bfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005964:	2301      	movs	r3, #1
}
 8005966:	4618      	mov	r0, r3
 8005968:	3710      	adds	r7, #16
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}
 800596e:	bf00      	nop
 8005970:	e000ed04 	.word	0xe000ed04

08005974 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005974:	b580      	push	{r7, lr}
 8005976:	b08e      	sub	sp, #56	@ 0x38
 8005978:	af02      	add	r7, sp, #8
 800597a:	60f8      	str	r0, [r7, #12]
 800597c:	60b9      	str	r1, [r7, #8]
 800597e:	607a      	str	r2, [r7, #4]
 8005980:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005982:	68fb      	ldr	r3, [r7, #12]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d10b      	bne.n	80059a0 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005988:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598c:	f383 8811 	msr	BASEPRI, r3
 8005990:	f3bf 8f6f 	isb	sy
 8005994:	f3bf 8f4f 	dsb	sy
 8005998:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800599a:	bf00      	nop
 800599c:	bf00      	nop
 800599e:	e7fd      	b.n	800599c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 80059a0:	683b      	ldr	r3, [r7, #0]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10b      	bne.n	80059be <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 80059a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059aa:	f383 8811 	msr	BASEPRI, r3
 80059ae:	f3bf 8f6f 	isb	sy
 80059b2:	f3bf 8f4f 	dsb	sy
 80059b6:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059b8:	bf00      	nop
 80059ba:	bf00      	nop
 80059bc:	e7fd      	b.n	80059ba <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d002      	beq.n	80059ca <xQueueGenericCreateStatic+0x56>
 80059c4:	68bb      	ldr	r3, [r7, #8]
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <xQueueGenericCreateStatic+0x5a>
 80059ca:	2301      	movs	r3, #1
 80059cc:	e000      	b.n	80059d0 <xQueueGenericCreateStatic+0x5c>
 80059ce:	2300      	movs	r3, #0
 80059d0:	2b00      	cmp	r3, #0
 80059d2:	d10b      	bne.n	80059ec <xQueueGenericCreateStatic+0x78>
	__asm volatile
 80059d4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059d8:	f383 8811 	msr	BASEPRI, r3
 80059dc:	f3bf 8f6f 	isb	sy
 80059e0:	f3bf 8f4f 	dsb	sy
 80059e4:	623b      	str	r3, [r7, #32]
}
 80059e6:	bf00      	nop
 80059e8:	bf00      	nop
 80059ea:	e7fd      	b.n	80059e8 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	2b00      	cmp	r3, #0
 80059f0:	d102      	bne.n	80059f8 <xQueueGenericCreateStatic+0x84>
 80059f2:	68bb      	ldr	r3, [r7, #8]
 80059f4:	2b00      	cmp	r3, #0
 80059f6:	d101      	bne.n	80059fc <xQueueGenericCreateStatic+0x88>
 80059f8:	2301      	movs	r3, #1
 80059fa:	e000      	b.n	80059fe <xQueueGenericCreateStatic+0x8a>
 80059fc:	2300      	movs	r3, #0
 80059fe:	2b00      	cmp	r3, #0
 8005a00:	d10b      	bne.n	8005a1a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005a02:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a06:	f383 8811 	msr	BASEPRI, r3
 8005a0a:	f3bf 8f6f 	isb	sy
 8005a0e:	f3bf 8f4f 	dsb	sy
 8005a12:	61fb      	str	r3, [r7, #28]
}
 8005a14:	bf00      	nop
 8005a16:	bf00      	nop
 8005a18:	e7fd      	b.n	8005a16 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005a1a:	2350      	movs	r3, #80	@ 0x50
 8005a1c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005a1e:	697b      	ldr	r3, [r7, #20]
 8005a20:	2b50      	cmp	r3, #80	@ 0x50
 8005a22:	d00b      	beq.n	8005a3c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005a24:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a28:	f383 8811 	msr	BASEPRI, r3
 8005a2c:	f3bf 8f6f 	isb	sy
 8005a30:	f3bf 8f4f 	dsb	sy
 8005a34:	61bb      	str	r3, [r7, #24]
}
 8005a36:	bf00      	nop
 8005a38:	bf00      	nop
 8005a3a:	e7fd      	b.n	8005a38 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005a3c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005a3e:	683b      	ldr	r3, [r7, #0]
 8005a40:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005a42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d00d      	beq.n	8005a64 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005a48:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a4a:	2201      	movs	r2, #1
 8005a4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005a50:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005a54:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a56:	9300      	str	r3, [sp, #0]
 8005a58:	4613      	mov	r3, r2
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	68b9      	ldr	r1, [r7, #8]
 8005a5e:	68f8      	ldr	r0, [r7, #12]
 8005a60:	f000 f840 	bl	8005ae4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005a64:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005a66:	4618      	mov	r0, r3
 8005a68:	3730      	adds	r7, #48	@ 0x30
 8005a6a:	46bd      	mov	sp, r7
 8005a6c:	bd80      	pop	{r7, pc}

08005a6e <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005a6e:	b580      	push	{r7, lr}
 8005a70:	b08a      	sub	sp, #40	@ 0x28
 8005a72:	af02      	add	r7, sp, #8
 8005a74:	60f8      	str	r0, [r7, #12]
 8005a76:	60b9      	str	r1, [r7, #8]
 8005a78:	4613      	mov	r3, r2
 8005a7a:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	d10b      	bne.n	8005a9a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a86:	f383 8811 	msr	BASEPRI, r3
 8005a8a:	f3bf 8f6f 	isb	sy
 8005a8e:	f3bf 8f4f 	dsb	sy
 8005a92:	613b      	str	r3, [r7, #16]
}
 8005a94:	bf00      	nop
 8005a96:	bf00      	nop
 8005a98:	e7fd      	b.n	8005a96 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005a9a:	68fb      	ldr	r3, [r7, #12]
 8005a9c:	68ba      	ldr	r2, [r7, #8]
 8005a9e:	fb02 f303 	mul.w	r3, r2, r3
 8005aa2:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005aa4:	69fb      	ldr	r3, [r7, #28]
 8005aa6:	3350      	adds	r3, #80	@ 0x50
 8005aa8:	4618      	mov	r0, r3
 8005aaa:	f002 f997 	bl	8007ddc <pvPortMalloc>
 8005aae:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005ab0:	69bb      	ldr	r3, [r7, #24]
 8005ab2:	2b00      	cmp	r3, #0
 8005ab4:	d011      	beq.n	8005ada <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005ab6:	69bb      	ldr	r3, [r7, #24]
 8005ab8:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005aba:	697b      	ldr	r3, [r7, #20]
 8005abc:	3350      	adds	r3, #80	@ 0x50
 8005abe:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005ac0:	69bb      	ldr	r3, [r7, #24]
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005ac8:	79fa      	ldrb	r2, [r7, #7]
 8005aca:	69bb      	ldr	r3, [r7, #24]
 8005acc:	9300      	str	r3, [sp, #0]
 8005ace:	4613      	mov	r3, r2
 8005ad0:	697a      	ldr	r2, [r7, #20]
 8005ad2:	68b9      	ldr	r1, [r7, #8]
 8005ad4:	68f8      	ldr	r0, [r7, #12]
 8005ad6:	f000 f805 	bl	8005ae4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005ada:	69bb      	ldr	r3, [r7, #24]
	}
 8005adc:	4618      	mov	r0, r3
 8005ade:	3720      	adds	r7, #32
 8005ae0:	46bd      	mov	sp, r7
 8005ae2:	bd80      	pop	{r7, pc}

08005ae4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005ae4:	b580      	push	{r7, lr}
 8005ae6:	b084      	sub	sp, #16
 8005ae8:	af00      	add	r7, sp, #0
 8005aea:	60f8      	str	r0, [r7, #12]
 8005aec:	60b9      	str	r1, [r7, #8]
 8005aee:	607a      	str	r2, [r7, #4]
 8005af0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	2b00      	cmp	r3, #0
 8005af6:	d103      	bne.n	8005b00 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005af8:	69bb      	ldr	r3, [r7, #24]
 8005afa:	69ba      	ldr	r2, [r7, #24]
 8005afc:	601a      	str	r2, [r3, #0]
 8005afe:	e002      	b.n	8005b06 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005b00:	69bb      	ldr	r3, [r7, #24]
 8005b02:	687a      	ldr	r2, [r7, #4]
 8005b04:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005b06:	69bb      	ldr	r3, [r7, #24]
 8005b08:	68fa      	ldr	r2, [r7, #12]
 8005b0a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005b0c:	69bb      	ldr	r3, [r7, #24]
 8005b0e:	68ba      	ldr	r2, [r7, #8]
 8005b10:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005b12:	2101      	movs	r1, #1
 8005b14:	69b8      	ldr	r0, [r7, #24]
 8005b16:	f7ff fec3 	bl	80058a0 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005b1a:	69bb      	ldr	r3, [r7, #24]
 8005b1c:	78fa      	ldrb	r2, [r7, #3]
 8005b1e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005b22:	bf00      	nop
 8005b24:	3710      	adds	r7, #16
 8005b26:	46bd      	mov	sp, r7
 8005b28:	bd80      	pop	{r7, pc}
	...

08005b2c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005b2c:	b580      	push	{r7, lr}
 8005b2e:	b08e      	sub	sp, #56	@ 0x38
 8005b30:	af00      	add	r7, sp, #0
 8005b32:	60f8      	str	r0, [r7, #12]
 8005b34:	60b9      	str	r1, [r7, #8]
 8005b36:	607a      	str	r2, [r7, #4]
 8005b38:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005b3e:	68fb      	ldr	r3, [r7, #12]
 8005b40:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005b42:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10b      	bne.n	8005b60 <xQueueGenericSend+0x34>
	__asm volatile
 8005b48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b4c:	f383 8811 	msr	BASEPRI, r3
 8005b50:	f3bf 8f6f 	isb	sy
 8005b54:	f3bf 8f4f 	dsb	sy
 8005b58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005b5a:	bf00      	nop
 8005b5c:	bf00      	nop
 8005b5e:	e7fd      	b.n	8005b5c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005b60:	68bb      	ldr	r3, [r7, #8]
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d103      	bne.n	8005b6e <xQueueGenericSend+0x42>
 8005b66:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d101      	bne.n	8005b72 <xQueueGenericSend+0x46>
 8005b6e:	2301      	movs	r3, #1
 8005b70:	e000      	b.n	8005b74 <xQueueGenericSend+0x48>
 8005b72:	2300      	movs	r3, #0
 8005b74:	2b00      	cmp	r3, #0
 8005b76:	d10b      	bne.n	8005b90 <xQueueGenericSend+0x64>
	__asm volatile
 8005b78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005b7c:	f383 8811 	msr	BASEPRI, r3
 8005b80:	f3bf 8f6f 	isb	sy
 8005b84:	f3bf 8f4f 	dsb	sy
 8005b88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005b8a:	bf00      	nop
 8005b8c:	bf00      	nop
 8005b8e:	e7fd      	b.n	8005b8c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005b90:	683b      	ldr	r3, [r7, #0]
 8005b92:	2b02      	cmp	r3, #2
 8005b94:	d103      	bne.n	8005b9e <xQueueGenericSend+0x72>
 8005b96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005b9a:	2b01      	cmp	r3, #1
 8005b9c:	d101      	bne.n	8005ba2 <xQueueGenericSend+0x76>
 8005b9e:	2301      	movs	r3, #1
 8005ba0:	e000      	b.n	8005ba4 <xQueueGenericSend+0x78>
 8005ba2:	2300      	movs	r3, #0
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericSend+0x94>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	623b      	str	r3, [r7, #32]
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005bc0:	f001 fa7e 	bl	80070c0 <xTaskGetSchedulerState>
 8005bc4:	4603      	mov	r3, r0
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d102      	bne.n	8005bd0 <xQueueGenericSend+0xa4>
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d101      	bne.n	8005bd4 <xQueueGenericSend+0xa8>
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	e000      	b.n	8005bd6 <xQueueGenericSend+0xaa>
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d10b      	bne.n	8005bf2 <xQueueGenericSend+0xc6>
	__asm volatile
 8005bda:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bde:	f383 8811 	msr	BASEPRI, r3
 8005be2:	f3bf 8f6f 	isb	sy
 8005be6:	f3bf 8f4f 	dsb	sy
 8005bea:	61fb      	str	r3, [r7, #28]
}
 8005bec:	bf00      	nop
 8005bee:	bf00      	nop
 8005bf0:	e7fd      	b.n	8005bee <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005bf2:	f001 ffd1 	bl	8007b98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005bf6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bf8:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bfc:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfe:	429a      	cmp	r2, r3
 8005c00:	d302      	bcc.n	8005c08 <xQueueGenericSend+0xdc>
 8005c02:	683b      	ldr	r3, [r7, #0]
 8005c04:	2b02      	cmp	r3, #2
 8005c06:	d129      	bne.n	8005c5c <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c08:	683a      	ldr	r2, [r7, #0]
 8005c0a:	68b9      	ldr	r1, [r7, #8]
 8005c0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005c0e:	f000 fa91 	bl	8006134 <prvCopyDataToQueue>
 8005c12:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c14:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c16:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d010      	beq.n	8005c3e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c1e:	3324      	adds	r3, #36	@ 0x24
 8005c20:	4618      	mov	r0, r3
 8005c22:	f001 f887 	bl	8006d34 <xTaskRemoveFromEventList>
 8005c26:	4603      	mov	r3, r0
 8005c28:	2b00      	cmp	r3, #0
 8005c2a:	d013      	beq.n	8005c54 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005c2c:	4b3f      	ldr	r3, [pc, #252]	@ (8005d2c <xQueueGenericSend+0x200>)
 8005c2e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c32:	601a      	str	r2, [r3, #0]
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	f3bf 8f6f 	isb	sy
 8005c3c:	e00a      	b.n	8005c54 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005c3e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005c40:	2b00      	cmp	r3, #0
 8005c42:	d007      	beq.n	8005c54 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005c44:	4b39      	ldr	r3, [pc, #228]	@ (8005d2c <xQueueGenericSend+0x200>)
 8005c46:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c4a:	601a      	str	r2, [r3, #0]
 8005c4c:	f3bf 8f4f 	dsb	sy
 8005c50:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005c54:	f001 ffd2 	bl	8007bfc <vPortExitCritical>
				return pdPASS;
 8005c58:	2301      	movs	r3, #1
 8005c5a:	e063      	b.n	8005d24 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d103      	bne.n	8005c6a <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005c62:	f001 ffcb 	bl	8007bfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005c66:	2300      	movs	r3, #0
 8005c68:	e05c      	b.n	8005d24 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005c6a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	d106      	bne.n	8005c7e <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005c70:	f107 0314 	add.w	r3, r7, #20
 8005c74:	4618      	mov	r0, r3
 8005c76:	f001 f8c1 	bl	8006dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005c7a:	2301      	movs	r3, #1
 8005c7c:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005c7e:	f001 ffbd 	bl	8007bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005c82:	f000 fe29 	bl	80068d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005c86:	f001 ff87 	bl	8007b98 <vPortEnterCritical>
 8005c8a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c8c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c90:	b25b      	sxtb	r3, r3
 8005c92:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c96:	d103      	bne.n	8005ca0 <xQueueGenericSend+0x174>
 8005c98:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005c9a:	2200      	movs	r2, #0
 8005c9c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005ca0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ca2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ca6:	b25b      	sxtb	r3, r3
 8005ca8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cac:	d103      	bne.n	8005cb6 <xQueueGenericSend+0x18a>
 8005cae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cb0:	2200      	movs	r2, #0
 8005cb2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005cb6:	f001 ffa1 	bl	8007bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005cba:	1d3a      	adds	r2, r7, #4
 8005cbc:	f107 0314 	add.w	r3, r7, #20
 8005cc0:	4611      	mov	r1, r2
 8005cc2:	4618      	mov	r0, r3
 8005cc4:	f001 f8b0 	bl	8006e28 <xTaskCheckForTimeOut>
 8005cc8:	4603      	mov	r3, r0
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d124      	bne.n	8005d18 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005cce:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cd0:	f000 fb28 	bl	8006324 <prvIsQueueFull>
 8005cd4:	4603      	mov	r3, r0
 8005cd6:	2b00      	cmp	r3, #0
 8005cd8:	d018      	beq.n	8005d0c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005cda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005cdc:	3310      	adds	r3, #16
 8005cde:	687a      	ldr	r2, [r7, #4]
 8005ce0:	4611      	mov	r1, r2
 8005ce2:	4618      	mov	r0, r3
 8005ce4:	f000 ffd4 	bl	8006c90 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ce8:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005cea:	f000 fab3 	bl	8006254 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005cee:	f000 fe01 	bl	80068f4 <xTaskResumeAll>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	2b00      	cmp	r3, #0
 8005cf6:	f47f af7c 	bne.w	8005bf2 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8005d2c <xQueueGenericSend+0x200>)
 8005cfc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d00:	601a      	str	r2, [r3, #0]
 8005d02:	f3bf 8f4f 	dsb	sy
 8005d06:	f3bf 8f6f 	isb	sy
 8005d0a:	e772      	b.n	8005bf2 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005d0c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d0e:	f000 faa1 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005d12:	f000 fdef 	bl	80068f4 <xTaskResumeAll>
 8005d16:	e76c      	b.n	8005bf2 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005d18:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005d1a:	f000 fa9b 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005d1e:	f000 fde9 	bl	80068f4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005d22:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3738      	adds	r7, #56	@ 0x38
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}
 8005d2c:	e000ed04 	.word	0xe000ed04

08005d30 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b090      	sub	sp, #64	@ 0x40
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	60f8      	str	r0, [r7, #12]
 8005d38:	60b9      	str	r1, [r7, #8]
 8005d3a:	607a      	str	r2, [r7, #4]
 8005d3c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005d3e:	68fb      	ldr	r3, [r7, #12]
 8005d40:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005d42:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005d60:	68bb      	ldr	r3, [r7, #8]
 8005d62:	2b00      	cmp	r3, #0
 8005d64:	d103      	bne.n	8005d6e <xQueueGenericSendFromISR+0x3e>
 8005d66:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d68:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d101      	bne.n	8005d72 <xQueueGenericSendFromISR+0x42>
 8005d6e:	2301      	movs	r3, #1
 8005d70:	e000      	b.n	8005d74 <xQueueGenericSendFromISR+0x44>
 8005d72:	2300      	movs	r3, #0
 8005d74:	2b00      	cmp	r3, #0
 8005d76:	d10b      	bne.n	8005d90 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005d78:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d7c:	f383 8811 	msr	BASEPRI, r3
 8005d80:	f3bf 8f6f 	isb	sy
 8005d84:	f3bf 8f4f 	dsb	sy
 8005d88:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005d8a:	bf00      	nop
 8005d8c:	bf00      	nop
 8005d8e:	e7fd      	b.n	8005d8c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005d90:	683b      	ldr	r3, [r7, #0]
 8005d92:	2b02      	cmp	r3, #2
 8005d94:	d103      	bne.n	8005d9e <xQueueGenericSendFromISR+0x6e>
 8005d96:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d98:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005d9a:	2b01      	cmp	r3, #1
 8005d9c:	d101      	bne.n	8005da2 <xQueueGenericSendFromISR+0x72>
 8005d9e:	2301      	movs	r3, #1
 8005da0:	e000      	b.n	8005da4 <xQueueGenericSendFromISR+0x74>
 8005da2:	2300      	movs	r3, #0
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d10b      	bne.n	8005dc0 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005da8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dac:	f383 8811 	msr	BASEPRI, r3
 8005db0:	f3bf 8f6f 	isb	sy
 8005db4:	f3bf 8f4f 	dsb	sy
 8005db8:	623b      	str	r3, [r7, #32]
}
 8005dba:	bf00      	nop
 8005dbc:	bf00      	nop
 8005dbe:	e7fd      	b.n	8005dbc <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005dc0:	f001 ffca 	bl	8007d58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005dc4:	f3ef 8211 	mrs	r2, BASEPRI
 8005dc8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005dcc:	f383 8811 	msr	BASEPRI, r3
 8005dd0:	f3bf 8f6f 	isb	sy
 8005dd4:	f3bf 8f4f 	dsb	sy
 8005dd8:	61fa      	str	r2, [r7, #28]
 8005dda:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005ddc:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005dde:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005de0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005de4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005de6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005de8:	429a      	cmp	r2, r3
 8005dea:	d302      	bcc.n	8005df2 <xQueueGenericSendFromISR+0xc2>
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	2b02      	cmp	r3, #2
 8005df0:	d12f      	bne.n	8005e52 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005df2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005df4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005df8:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005dfe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005e00:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005e02:	683a      	ldr	r2, [r7, #0]
 8005e04:	68b9      	ldr	r1, [r7, #8]
 8005e06:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005e08:	f000 f994 	bl	8006134 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005e0c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005e10:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e14:	d112      	bne.n	8005e3c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005e16:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d016      	beq.n	8005e4c <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005e1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e20:	3324      	adds	r3, #36	@ 0x24
 8005e22:	4618      	mov	r0, r3
 8005e24:	f000 ff86 	bl	8006d34 <xTaskRemoveFromEventList>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d00e      	beq.n	8005e4c <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2b00      	cmp	r3, #0
 8005e32:	d00b      	beq.n	8005e4c <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	2201      	movs	r2, #1
 8005e38:	601a      	str	r2, [r3, #0]
 8005e3a:	e007      	b.n	8005e4c <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005e3c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005e40:	3301      	adds	r3, #1
 8005e42:	b2db      	uxtb	r3, r3
 8005e44:	b25a      	sxtb	r2, r3
 8005e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005e48:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005e50:	e001      	b.n	8005e56 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005e52:	2300      	movs	r3, #0
 8005e54:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e56:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005e58:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005e5a:	697b      	ldr	r3, [r7, #20]
 8005e5c:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005e60:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005e62:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005e64:	4618      	mov	r0, r3
 8005e66:	3740      	adds	r7, #64	@ 0x40
 8005e68:	46bd      	mov	sp, r7
 8005e6a:	bd80      	pop	{r7, pc}

08005e6c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005e6c:	b580      	push	{r7, lr}
 8005e6e:	b08c      	sub	sp, #48	@ 0x30
 8005e70:	af00      	add	r7, sp, #0
 8005e72:	60f8      	str	r0, [r7, #12]
 8005e74:	60b9      	str	r1, [r7, #8]
 8005e76:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005e78:	2300      	movs	r3, #0
 8005e7a:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e7c:	68fb      	ldr	r3, [r7, #12]
 8005e7e:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005e80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e82:	2b00      	cmp	r3, #0
 8005e84:	d10b      	bne.n	8005e9e <xQueueReceive+0x32>
	__asm volatile
 8005e86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e8a:	f383 8811 	msr	BASEPRI, r3
 8005e8e:	f3bf 8f6f 	isb	sy
 8005e92:	f3bf 8f4f 	dsb	sy
 8005e96:	623b      	str	r3, [r7, #32]
}
 8005e98:	bf00      	nop
 8005e9a:	bf00      	nop
 8005e9c:	e7fd      	b.n	8005e9a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e9e:	68bb      	ldr	r3, [r7, #8]
 8005ea0:	2b00      	cmp	r3, #0
 8005ea2:	d103      	bne.n	8005eac <xQueueReceive+0x40>
 8005ea4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ea6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ea8:	2b00      	cmp	r3, #0
 8005eaa:	d101      	bne.n	8005eb0 <xQueueReceive+0x44>
 8005eac:	2301      	movs	r3, #1
 8005eae:	e000      	b.n	8005eb2 <xQueueReceive+0x46>
 8005eb0:	2300      	movs	r3, #0
 8005eb2:	2b00      	cmp	r3, #0
 8005eb4:	d10b      	bne.n	8005ece <xQueueReceive+0x62>
	__asm volatile
 8005eb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eba:	f383 8811 	msr	BASEPRI, r3
 8005ebe:	f3bf 8f6f 	isb	sy
 8005ec2:	f3bf 8f4f 	dsb	sy
 8005ec6:	61fb      	str	r3, [r7, #28]
}
 8005ec8:	bf00      	nop
 8005eca:	bf00      	nop
 8005ecc:	e7fd      	b.n	8005eca <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ece:	f001 f8f7 	bl	80070c0 <xTaskGetSchedulerState>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d102      	bne.n	8005ede <xQueueReceive+0x72>
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d101      	bne.n	8005ee2 <xQueueReceive+0x76>
 8005ede:	2301      	movs	r3, #1
 8005ee0:	e000      	b.n	8005ee4 <xQueueReceive+0x78>
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	2b00      	cmp	r3, #0
 8005ee6:	d10b      	bne.n	8005f00 <xQueueReceive+0x94>
	__asm volatile
 8005ee8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eec:	f383 8811 	msr	BASEPRI, r3
 8005ef0:	f3bf 8f6f 	isb	sy
 8005ef4:	f3bf 8f4f 	dsb	sy
 8005ef8:	61bb      	str	r3, [r7, #24]
}
 8005efa:	bf00      	nop
 8005efc:	bf00      	nop
 8005efe:	e7fd      	b.n	8005efc <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005f00:	f001 fe4a 	bl	8007b98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f06:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f08:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d01f      	beq.n	8005f50 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f10:	68b9      	ldr	r1, [r7, #8]
 8005f12:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005f14:	f000 f978 	bl	8006208 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005f1a:	1e5a      	subs	r2, r3, #1
 8005f1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f1e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f22:	691b      	ldr	r3, [r3, #16]
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d00f      	beq.n	8005f48 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2a:	3310      	adds	r3, #16
 8005f2c:	4618      	mov	r0, r3
 8005f2e:	f000 ff01 	bl	8006d34 <xTaskRemoveFromEventList>
 8005f32:	4603      	mov	r3, r0
 8005f34:	2b00      	cmp	r3, #0
 8005f36:	d007      	beq.n	8005f48 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005f38:	4b3c      	ldr	r3, [pc, #240]	@ (800602c <xQueueReceive+0x1c0>)
 8005f3a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3e:	601a      	str	r2, [r3, #0]
 8005f40:	f3bf 8f4f 	dsb	sy
 8005f44:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005f48:	f001 fe58 	bl	8007bfc <vPortExitCritical>
				return pdPASS;
 8005f4c:	2301      	movs	r3, #1
 8005f4e:	e069      	b.n	8006024 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d103      	bne.n	8005f5e <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f56:	f001 fe51 	bl	8007bfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005f5a:	2300      	movs	r3, #0
 8005f5c:	e062      	b.n	8006024 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f5e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f60:	2b00      	cmp	r3, #0
 8005f62:	d106      	bne.n	8005f72 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f64:	f107 0310 	add.w	r3, r7, #16
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 ff47 	bl	8006dfc <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f6e:	2301      	movs	r3, #1
 8005f70:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f72:	f001 fe43 	bl	8007bfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f76:	f000 fcaf 	bl	80068d8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f7a:	f001 fe0d 	bl	8007b98 <vPortEnterCritical>
 8005f7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f80:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f84:	b25b      	sxtb	r3, r3
 8005f86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f8a:	d103      	bne.n	8005f94 <xQueueReceive+0x128>
 8005f8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f8e:	2200      	movs	r2, #0
 8005f90:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f96:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005f9a:	b25b      	sxtb	r3, r3
 8005f9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fa0:	d103      	bne.n	8005faa <xQueueReceive+0x13e>
 8005fa2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005faa:	f001 fe27 	bl	8007bfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fae:	1d3a      	adds	r2, r7, #4
 8005fb0:	f107 0310 	add.w	r3, r7, #16
 8005fb4:	4611      	mov	r1, r2
 8005fb6:	4618      	mov	r0, r3
 8005fb8:	f000 ff36 	bl	8006e28 <xTaskCheckForTimeOut>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d123      	bne.n	800600a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005fc2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fc4:	f000 f998 	bl	80062f8 <prvIsQueueEmpty>
 8005fc8:	4603      	mov	r3, r0
 8005fca:	2b00      	cmp	r3, #0
 8005fcc:	d017      	beq.n	8005ffe <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005fce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005fd0:	3324      	adds	r3, #36	@ 0x24
 8005fd2:	687a      	ldr	r2, [r7, #4]
 8005fd4:	4611      	mov	r1, r2
 8005fd6:	4618      	mov	r0, r3
 8005fd8:	f000 fe5a 	bl	8006c90 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005fdc:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005fde:	f000 f939 	bl	8006254 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005fe2:	f000 fc87 	bl	80068f4 <xTaskResumeAll>
 8005fe6:	4603      	mov	r3, r0
 8005fe8:	2b00      	cmp	r3, #0
 8005fea:	d189      	bne.n	8005f00 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005fec:	4b0f      	ldr	r3, [pc, #60]	@ (800602c <xQueueReceive+0x1c0>)
 8005fee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ff2:	601a      	str	r2, [r3, #0]
 8005ff4:	f3bf 8f4f 	dsb	sy
 8005ff8:	f3bf 8f6f 	isb	sy
 8005ffc:	e780      	b.n	8005f00 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005ffe:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006000:	f000 f928 	bl	8006254 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006004:	f000 fc76 	bl	80068f4 <xTaskResumeAll>
 8006008:	e77a      	b.n	8005f00 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800600a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800600c:	f000 f922 	bl	8006254 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006010:	f000 fc70 	bl	80068f4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006014:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006016:	f000 f96f 	bl	80062f8 <prvIsQueueEmpty>
 800601a:	4603      	mov	r3, r0
 800601c:	2b00      	cmp	r3, #0
 800601e:	f43f af6f 	beq.w	8005f00 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006022:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006024:	4618      	mov	r0, r3
 8006026:	3730      	adds	r7, #48	@ 0x30
 8006028:	46bd      	mov	sp, r7
 800602a:	bd80      	pop	{r7, pc}
 800602c:	e000ed04 	.word	0xe000ed04

08006030 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006030:	b580      	push	{r7, lr}
 8006032:	b08e      	sub	sp, #56	@ 0x38
 8006034:	af00      	add	r7, sp, #0
 8006036:	60f8      	str	r0, [r7, #12]
 8006038:	60b9      	str	r1, [r7, #8]
 800603a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800603c:	68fb      	ldr	r3, [r7, #12]
 800603e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8006040:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006042:	2b00      	cmp	r3, #0
 8006044:	d10b      	bne.n	800605e <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8006046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800604a:	f383 8811 	msr	BASEPRI, r3
 800604e:	f3bf 8f6f 	isb	sy
 8006052:	f3bf 8f4f 	dsb	sy
 8006056:	623b      	str	r3, [r7, #32]
}
 8006058:	bf00      	nop
 800605a:	bf00      	nop
 800605c:	e7fd      	b.n	800605a <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d103      	bne.n	800606c <xQueueReceiveFromISR+0x3c>
 8006064:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006066:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006068:	2b00      	cmp	r3, #0
 800606a:	d101      	bne.n	8006070 <xQueueReceiveFromISR+0x40>
 800606c:	2301      	movs	r3, #1
 800606e:	e000      	b.n	8006072 <xQueueReceiveFromISR+0x42>
 8006070:	2300      	movs	r3, #0
 8006072:	2b00      	cmp	r3, #0
 8006074:	d10b      	bne.n	800608e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8006076:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800607a:	f383 8811 	msr	BASEPRI, r3
 800607e:	f3bf 8f6f 	isb	sy
 8006082:	f3bf 8f4f 	dsb	sy
 8006086:	61fb      	str	r3, [r7, #28]
}
 8006088:	bf00      	nop
 800608a:	bf00      	nop
 800608c:	e7fd      	b.n	800608a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800608e:	f001 fe63 	bl	8007d58 <vPortValidateInterruptPriority>
	__asm volatile
 8006092:	f3ef 8211 	mrs	r2, BASEPRI
 8006096:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800609a:	f383 8811 	msr	BASEPRI, r3
 800609e:	f3bf 8f6f 	isb	sy
 80060a2:	f3bf 8f4f 	dsb	sy
 80060a6:	61ba      	str	r2, [r7, #24]
 80060a8:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80060aa:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80060ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060b0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80060b2:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80060b4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060b6:	2b00      	cmp	r3, #0
 80060b8:	d02f      	beq.n	800611a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 80060ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060bc:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80060c0:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 80060c4:	68b9      	ldr	r1, [r7, #8]
 80060c6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 80060c8:	f000 f89e 	bl	8006208 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80060cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80060ce:	1e5a      	subs	r2, r3, #1
 80060d0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060d2:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80060d4:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 80060d8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80060dc:	d112      	bne.n	8006104 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80060de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e0:	691b      	ldr	r3, [r3, #16]
 80060e2:	2b00      	cmp	r3, #0
 80060e4:	d016      	beq.n	8006114 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80060e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80060e8:	3310      	adds	r3, #16
 80060ea:	4618      	mov	r0, r3
 80060ec:	f000 fe22 	bl	8006d34 <xTaskRemoveFromEventList>
 80060f0:	4603      	mov	r3, r0
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d00e      	beq.n	8006114 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2b00      	cmp	r3, #0
 80060fa:	d00b      	beq.n	8006114 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	2201      	movs	r2, #1
 8006100:	601a      	str	r2, [r3, #0]
 8006102:	e007      	b.n	8006114 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8006104:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8006108:	3301      	adds	r3, #1
 800610a:	b2db      	uxtb	r3, r3
 800610c:	b25a      	sxtb	r2, r3
 800610e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006110:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8006114:	2301      	movs	r3, #1
 8006116:	637b      	str	r3, [r7, #52]	@ 0x34
 8006118:	e001      	b.n	800611e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800611a:	2300      	movs	r3, #0
 800611c:	637b      	str	r3, [r7, #52]	@ 0x34
 800611e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006120:	613b      	str	r3, [r7, #16]
	__asm volatile
 8006122:	693b      	ldr	r3, [r7, #16]
 8006124:	f383 8811 	msr	BASEPRI, r3
}
 8006128:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800612a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 800612c:	4618      	mov	r0, r3
 800612e:	3738      	adds	r7, #56	@ 0x38
 8006130:	46bd      	mov	sp, r7
 8006132:	bd80      	pop	{r7, pc}

08006134 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006134:	b580      	push	{r7, lr}
 8006136:	b086      	sub	sp, #24
 8006138:	af00      	add	r7, sp, #0
 800613a:	60f8      	str	r0, [r7, #12]
 800613c:	60b9      	str	r1, [r7, #8]
 800613e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006140:	2300      	movs	r3, #0
 8006142:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006148:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800614e:	2b00      	cmp	r3, #0
 8006150:	d10d      	bne.n	800616e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	2b00      	cmp	r3, #0
 8006158:	d14d      	bne.n	80061f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800615a:	68fb      	ldr	r3, [r7, #12]
 800615c:	689b      	ldr	r3, [r3, #8]
 800615e:	4618      	mov	r0, r3
 8006160:	f000 ffcc 	bl	80070fc <xTaskPriorityDisinherit>
 8006164:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8006166:	68fb      	ldr	r3, [r7, #12]
 8006168:	2200      	movs	r2, #0
 800616a:	609a      	str	r2, [r3, #8]
 800616c:	e043      	b.n	80061f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2b00      	cmp	r3, #0
 8006172:	d119      	bne.n	80061a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006174:	68fb      	ldr	r3, [r7, #12]
 8006176:	6858      	ldr	r0, [r3, #4]
 8006178:	68fb      	ldr	r3, [r7, #12]
 800617a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800617c:	461a      	mov	r2, r3
 800617e:	68b9      	ldr	r1, [r7, #8]
 8006180:	f002 fb0d 	bl	800879e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	685a      	ldr	r2, [r3, #4]
 8006188:	68fb      	ldr	r3, [r7, #12]
 800618a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800618c:	441a      	add	r2, r3
 800618e:	68fb      	ldr	r3, [r7, #12]
 8006190:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006192:	68fb      	ldr	r3, [r7, #12]
 8006194:	685a      	ldr	r2, [r3, #4]
 8006196:	68fb      	ldr	r3, [r7, #12]
 8006198:	689b      	ldr	r3, [r3, #8]
 800619a:	429a      	cmp	r2, r3
 800619c:	d32b      	bcc.n	80061f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800619e:	68fb      	ldr	r3, [r7, #12]
 80061a0:	681a      	ldr	r2, [r3, #0]
 80061a2:	68fb      	ldr	r3, [r7, #12]
 80061a4:	605a      	str	r2, [r3, #4]
 80061a6:	e026      	b.n	80061f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80061a8:	68fb      	ldr	r3, [r7, #12]
 80061aa:	68d8      	ldr	r0, [r3, #12]
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	461a      	mov	r2, r3
 80061b2:	68b9      	ldr	r1, [r7, #8]
 80061b4:	f002 faf3 	bl	800879e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80061b8:	68fb      	ldr	r3, [r7, #12]
 80061ba:	68da      	ldr	r2, [r3, #12]
 80061bc:	68fb      	ldr	r3, [r7, #12]
 80061be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061c0:	425b      	negs	r3, r3
 80061c2:	441a      	add	r2, r3
 80061c4:	68fb      	ldr	r3, [r7, #12]
 80061c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80061c8:	68fb      	ldr	r3, [r7, #12]
 80061ca:	68da      	ldr	r2, [r3, #12]
 80061cc:	68fb      	ldr	r3, [r7, #12]
 80061ce:	681b      	ldr	r3, [r3, #0]
 80061d0:	429a      	cmp	r2, r3
 80061d2:	d207      	bcs.n	80061e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	689a      	ldr	r2, [r3, #8]
 80061d8:	68fb      	ldr	r3, [r7, #12]
 80061da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061dc:	425b      	negs	r3, r3
 80061de:	441a      	add	r2, r3
 80061e0:	68fb      	ldr	r3, [r7, #12]
 80061e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2b02      	cmp	r3, #2
 80061e8:	d105      	bne.n	80061f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80061ea:	693b      	ldr	r3, [r7, #16]
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d002      	beq.n	80061f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80061f0:	693b      	ldr	r3, [r7, #16]
 80061f2:	3b01      	subs	r3, #1
 80061f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80061f6:	693b      	ldr	r3, [r7, #16]
 80061f8:	1c5a      	adds	r2, r3, #1
 80061fa:	68fb      	ldr	r3, [r7, #12]
 80061fc:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 80061fe:	697b      	ldr	r3, [r7, #20]
}
 8006200:	4618      	mov	r0, r3
 8006202:	3718      	adds	r7, #24
 8006204:	46bd      	mov	sp, r7
 8006206:	bd80      	pop	{r7, pc}

08006208 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006208:	b580      	push	{r7, lr}
 800620a:	b082      	sub	sp, #8
 800620c:	af00      	add	r7, sp, #0
 800620e:	6078      	str	r0, [r7, #4]
 8006210:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006216:	2b00      	cmp	r3, #0
 8006218:	d018      	beq.n	800624c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	68da      	ldr	r2, [r3, #12]
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006222:	441a      	add	r2, r3
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006228:	687b      	ldr	r3, [r7, #4]
 800622a:	68da      	ldr	r2, [r3, #12]
 800622c:	687b      	ldr	r3, [r7, #4]
 800622e:	689b      	ldr	r3, [r3, #8]
 8006230:	429a      	cmp	r2, r3
 8006232:	d303      	bcc.n	800623c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681a      	ldr	r2, [r3, #0]
 8006238:	687b      	ldr	r3, [r7, #4]
 800623a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	68d9      	ldr	r1, [r3, #12]
 8006240:	687b      	ldr	r3, [r7, #4]
 8006242:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006244:	461a      	mov	r2, r3
 8006246:	6838      	ldr	r0, [r7, #0]
 8006248:	f002 faa9 	bl	800879e <memcpy>
	}
}
 800624c:	bf00      	nop
 800624e:	3708      	adds	r7, #8
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}

08006254 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006254:	b580      	push	{r7, lr}
 8006256:	b084      	sub	sp, #16
 8006258:	af00      	add	r7, sp, #0
 800625a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800625c:	f001 fc9c 	bl	8007b98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006260:	687b      	ldr	r3, [r7, #4]
 8006262:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006266:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006268:	e011      	b.n	800628e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800626a:	687b      	ldr	r3, [r7, #4]
 800626c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800626e:	2b00      	cmp	r3, #0
 8006270:	d012      	beq.n	8006298 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	3324      	adds	r3, #36	@ 0x24
 8006276:	4618      	mov	r0, r3
 8006278:	f000 fd5c 	bl	8006d34 <xTaskRemoveFromEventList>
 800627c:	4603      	mov	r3, r0
 800627e:	2b00      	cmp	r3, #0
 8006280:	d001      	beq.n	8006286 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006282:	f000 fe35 	bl	8006ef0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8006286:	7bfb      	ldrb	r3, [r7, #15]
 8006288:	3b01      	subs	r3, #1
 800628a:	b2db      	uxtb	r3, r3
 800628c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800628e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006292:	2b00      	cmp	r3, #0
 8006294:	dce9      	bgt.n	800626a <prvUnlockQueue+0x16>
 8006296:	e000      	b.n	800629a <prvUnlockQueue+0x46>
					break;
 8006298:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	22ff      	movs	r2, #255	@ 0xff
 800629e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80062a2:	f001 fcab 	bl	8007bfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80062a6:	f001 fc77 	bl	8007b98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80062b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062b2:	e011      	b.n	80062d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	691b      	ldr	r3, [r3, #16]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d012      	beq.n	80062e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	3310      	adds	r3, #16
 80062c0:	4618      	mov	r0, r3
 80062c2:	f000 fd37 	bl	8006d34 <xTaskRemoveFromEventList>
 80062c6:	4603      	mov	r3, r0
 80062c8:	2b00      	cmp	r3, #0
 80062ca:	d001      	beq.n	80062d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80062cc:	f000 fe10 	bl	8006ef0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80062d0:	7bbb      	ldrb	r3, [r7, #14]
 80062d2:	3b01      	subs	r3, #1
 80062d4:	b2db      	uxtb	r3, r3
 80062d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80062d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80062dc:	2b00      	cmp	r3, #0
 80062de:	dce9      	bgt.n	80062b4 <prvUnlockQueue+0x60>
 80062e0:	e000      	b.n	80062e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80062e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	22ff      	movs	r2, #255	@ 0xff
 80062e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80062ec:	f001 fc86 	bl	8007bfc <vPortExitCritical>
}
 80062f0:	bf00      	nop
 80062f2:	3710      	adds	r7, #16
 80062f4:	46bd      	mov	sp, r7
 80062f6:	bd80      	pop	{r7, pc}

080062f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80062f8:	b580      	push	{r7, lr}
 80062fa:	b084      	sub	sp, #16
 80062fc:	af00      	add	r7, sp, #0
 80062fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006300:	f001 fc4a 	bl	8007b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006308:	2b00      	cmp	r3, #0
 800630a:	d102      	bne.n	8006312 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800630c:	2301      	movs	r3, #1
 800630e:	60fb      	str	r3, [r7, #12]
 8006310:	e001      	b.n	8006316 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006312:	2300      	movs	r3, #0
 8006314:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006316:	f001 fc71 	bl	8007bfc <vPortExitCritical>

	return xReturn;
 800631a:	68fb      	ldr	r3, [r7, #12]
}
 800631c:	4618      	mov	r0, r3
 800631e:	3710      	adds	r7, #16
 8006320:	46bd      	mov	sp, r7
 8006322:	bd80      	pop	{r7, pc}

08006324 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800632c:	f001 fc34 	bl	8007b98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006330:	687b      	ldr	r3, [r7, #4]
 8006332:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006338:	429a      	cmp	r2, r3
 800633a:	d102      	bne.n	8006342 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800633c:	2301      	movs	r3, #1
 800633e:	60fb      	str	r3, [r7, #12]
 8006340:	e001      	b.n	8006346 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006342:	2300      	movs	r3, #0
 8006344:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006346:	f001 fc59 	bl	8007bfc <vPortExitCritical>

	return xReturn;
 800634a:	68fb      	ldr	r3, [r7, #12]
}
 800634c:	4618      	mov	r0, r3
 800634e:	3710      	adds	r7, #16
 8006350:	46bd      	mov	sp, r7
 8006352:	bd80      	pop	{r7, pc}

08006354 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006354:	b480      	push	{r7}
 8006356:	b085      	sub	sp, #20
 8006358:	af00      	add	r7, sp, #0
 800635a:	6078      	str	r0, [r7, #4]
 800635c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800635e:	2300      	movs	r3, #0
 8006360:	60fb      	str	r3, [r7, #12]
 8006362:	e014      	b.n	800638e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006364:	4a0f      	ldr	r2, [pc, #60]	@ (80063a4 <vQueueAddToRegistry+0x50>)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800636c:	2b00      	cmp	r3, #0
 800636e:	d10b      	bne.n	8006388 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006370:	490c      	ldr	r1, [pc, #48]	@ (80063a4 <vQueueAddToRegistry+0x50>)
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	683a      	ldr	r2, [r7, #0]
 8006376:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800637a:	4a0a      	ldr	r2, [pc, #40]	@ (80063a4 <vQueueAddToRegistry+0x50>)
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	00db      	lsls	r3, r3, #3
 8006380:	4413      	add	r3, r2
 8006382:	687a      	ldr	r2, [r7, #4]
 8006384:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8006386:	e006      	b.n	8006396 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	3301      	adds	r3, #1
 800638c:	60fb      	str	r3, [r7, #12]
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	2b07      	cmp	r3, #7
 8006392:	d9e7      	bls.n	8006364 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006394:	bf00      	nop
 8006396:	bf00      	nop
 8006398:	3714      	adds	r7, #20
 800639a:	46bd      	mov	sp, r7
 800639c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a0:	4770      	bx	lr
 80063a2:	bf00      	nop
 80063a4:	200008f4 	.word	0x200008f4

080063a8 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b086      	sub	sp, #24
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80063b8:	f001 fbee 	bl	8007b98 <vPortEnterCritical>
 80063bc:	697b      	ldr	r3, [r7, #20]
 80063be:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80063c2:	b25b      	sxtb	r3, r3
 80063c4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063c8:	d103      	bne.n	80063d2 <vQueueWaitForMessageRestricted+0x2a>
 80063ca:	697b      	ldr	r3, [r7, #20]
 80063cc:	2200      	movs	r2, #0
 80063ce:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80063d2:	697b      	ldr	r3, [r7, #20]
 80063d4:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80063d8:	b25b      	sxtb	r3, r3
 80063da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063de:	d103      	bne.n	80063e8 <vQueueWaitForMessageRestricted+0x40>
 80063e0:	697b      	ldr	r3, [r7, #20]
 80063e2:	2200      	movs	r2, #0
 80063e4:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80063e8:	f001 fc08 	bl	8007bfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80063ec:	697b      	ldr	r3, [r7, #20]
 80063ee:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d106      	bne.n	8006402 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80063f4:	697b      	ldr	r3, [r7, #20]
 80063f6:	3324      	adds	r3, #36	@ 0x24
 80063f8:	687a      	ldr	r2, [r7, #4]
 80063fa:	68b9      	ldr	r1, [r7, #8]
 80063fc:	4618      	mov	r0, r3
 80063fe:	f000 fc6d 	bl	8006cdc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006402:	6978      	ldr	r0, [r7, #20]
 8006404:	f7ff ff26 	bl	8006254 <prvUnlockQueue>
	}
 8006408:	bf00      	nop
 800640a:	3718      	adds	r7, #24
 800640c:	46bd      	mov	sp, r7
 800640e:	bd80      	pop	{r7, pc}

08006410 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006410:	b580      	push	{r7, lr}
 8006412:	b08e      	sub	sp, #56	@ 0x38
 8006414:	af04      	add	r7, sp, #16
 8006416:	60f8      	str	r0, [r7, #12]
 8006418:	60b9      	str	r1, [r7, #8]
 800641a:	607a      	str	r2, [r7, #4]
 800641c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800641e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006420:	2b00      	cmp	r3, #0
 8006422:	d10b      	bne.n	800643c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006424:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006428:	f383 8811 	msr	BASEPRI, r3
 800642c:	f3bf 8f6f 	isb	sy
 8006430:	f3bf 8f4f 	dsb	sy
 8006434:	623b      	str	r3, [r7, #32]
}
 8006436:	bf00      	nop
 8006438:	bf00      	nop
 800643a:	e7fd      	b.n	8006438 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800643c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800643e:	2b00      	cmp	r3, #0
 8006440:	d10b      	bne.n	800645a <xTaskCreateStatic+0x4a>
	__asm volatile
 8006442:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006446:	f383 8811 	msr	BASEPRI, r3
 800644a:	f3bf 8f6f 	isb	sy
 800644e:	f3bf 8f4f 	dsb	sy
 8006452:	61fb      	str	r3, [r7, #28]
}
 8006454:	bf00      	nop
 8006456:	bf00      	nop
 8006458:	e7fd      	b.n	8006456 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800645a:	23a8      	movs	r3, #168	@ 0xa8
 800645c:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800645e:	693b      	ldr	r3, [r7, #16]
 8006460:	2ba8      	cmp	r3, #168	@ 0xa8
 8006462:	d00b      	beq.n	800647c <xTaskCreateStatic+0x6c>
	__asm volatile
 8006464:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006468:	f383 8811 	msr	BASEPRI, r3
 800646c:	f3bf 8f6f 	isb	sy
 8006470:	f3bf 8f4f 	dsb	sy
 8006474:	61bb      	str	r3, [r7, #24]
}
 8006476:	bf00      	nop
 8006478:	bf00      	nop
 800647a:	e7fd      	b.n	8006478 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800647c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800647e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006480:	2b00      	cmp	r3, #0
 8006482:	d01e      	beq.n	80064c2 <xTaskCreateStatic+0xb2>
 8006484:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006486:	2b00      	cmp	r3, #0
 8006488:	d01b      	beq.n	80064c2 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800648a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800648c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800648e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006490:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006492:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006494:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006496:	2202      	movs	r2, #2
 8006498:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800649c:	2300      	movs	r3, #0
 800649e:	9303      	str	r3, [sp, #12]
 80064a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80064a2:	9302      	str	r3, [sp, #8]
 80064a4:	f107 0314 	add.w	r3, r7, #20
 80064a8:	9301      	str	r3, [sp, #4]
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	9300      	str	r3, [sp, #0]
 80064ae:	683b      	ldr	r3, [r7, #0]
 80064b0:	687a      	ldr	r2, [r7, #4]
 80064b2:	68b9      	ldr	r1, [r7, #8]
 80064b4:	68f8      	ldr	r0, [r7, #12]
 80064b6:	f000 f851 	bl	800655c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80064ba:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80064bc:	f000 f8f6 	bl	80066ac <prvAddNewTaskToReadyList>
 80064c0:	e001      	b.n	80064c6 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80064c2:	2300      	movs	r3, #0
 80064c4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80064c6:	697b      	ldr	r3, [r7, #20]
	}
 80064c8:	4618      	mov	r0, r3
 80064ca:	3728      	adds	r7, #40	@ 0x28
 80064cc:	46bd      	mov	sp, r7
 80064ce:	bd80      	pop	{r7, pc}

080064d0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b08c      	sub	sp, #48	@ 0x30
 80064d4:	af04      	add	r7, sp, #16
 80064d6:	60f8      	str	r0, [r7, #12]
 80064d8:	60b9      	str	r1, [r7, #8]
 80064da:	603b      	str	r3, [r7, #0]
 80064dc:	4613      	mov	r3, r2
 80064de:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80064e0:	88fb      	ldrh	r3, [r7, #6]
 80064e2:	009b      	lsls	r3, r3, #2
 80064e4:	4618      	mov	r0, r3
 80064e6:	f001 fc79 	bl	8007ddc <pvPortMalloc>
 80064ea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80064ec:	697b      	ldr	r3, [r7, #20]
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	d00e      	beq.n	8006510 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80064f2:	20a8      	movs	r0, #168	@ 0xa8
 80064f4:	f001 fc72 	bl	8007ddc <pvPortMalloc>
 80064f8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80064fa:	69fb      	ldr	r3, [r7, #28]
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d003      	beq.n	8006508 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006500:	69fb      	ldr	r3, [r7, #28]
 8006502:	697a      	ldr	r2, [r7, #20]
 8006504:	631a      	str	r2, [r3, #48]	@ 0x30
 8006506:	e005      	b.n	8006514 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006508:	6978      	ldr	r0, [r7, #20]
 800650a:	f001 fd35 	bl	8007f78 <vPortFree>
 800650e:	e001      	b.n	8006514 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006510:	2300      	movs	r3, #0
 8006512:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006514:	69fb      	ldr	r3, [r7, #28]
 8006516:	2b00      	cmp	r3, #0
 8006518:	d017      	beq.n	800654a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800651a:	69fb      	ldr	r3, [r7, #28]
 800651c:	2200      	movs	r2, #0
 800651e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006522:	88fa      	ldrh	r2, [r7, #6]
 8006524:	2300      	movs	r3, #0
 8006526:	9303      	str	r3, [sp, #12]
 8006528:	69fb      	ldr	r3, [r7, #28]
 800652a:	9302      	str	r3, [sp, #8]
 800652c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800652e:	9301      	str	r3, [sp, #4]
 8006530:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006532:	9300      	str	r3, [sp, #0]
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	68b9      	ldr	r1, [r7, #8]
 8006538:	68f8      	ldr	r0, [r7, #12]
 800653a:	f000 f80f 	bl	800655c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800653e:	69f8      	ldr	r0, [r7, #28]
 8006540:	f000 f8b4 	bl	80066ac <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006544:	2301      	movs	r3, #1
 8006546:	61bb      	str	r3, [r7, #24]
 8006548:	e002      	b.n	8006550 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800654a:	f04f 33ff 	mov.w	r3, #4294967295
 800654e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006550:	69bb      	ldr	r3, [r7, #24]
	}
 8006552:	4618      	mov	r0, r3
 8006554:	3720      	adds	r7, #32
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
	...

0800655c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800655c:	b580      	push	{r7, lr}
 800655e:	b088      	sub	sp, #32
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
 8006568:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800656a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800656c:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	009b      	lsls	r3, r3, #2
 8006572:	461a      	mov	r2, r3
 8006574:	21a5      	movs	r1, #165	@ 0xa5
 8006576:	f002 f839 	bl	80085ec <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800657a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800657c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006584:	3b01      	subs	r3, #1
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800658c:	69bb      	ldr	r3, [r7, #24]
 800658e:	f023 0307 	bic.w	r3, r3, #7
 8006592:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006594:	69bb      	ldr	r3, [r7, #24]
 8006596:	f003 0307 	and.w	r3, r3, #7
 800659a:	2b00      	cmp	r3, #0
 800659c:	d00b      	beq.n	80065b6 <prvInitialiseNewTask+0x5a>
	__asm volatile
 800659e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065a2:	f383 8811 	msr	BASEPRI, r3
 80065a6:	f3bf 8f6f 	isb	sy
 80065aa:	f3bf 8f4f 	dsb	sy
 80065ae:	617b      	str	r3, [r7, #20]
}
 80065b0:	bf00      	nop
 80065b2:	bf00      	nop
 80065b4:	e7fd      	b.n	80065b2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80065b6:	68bb      	ldr	r3, [r7, #8]
 80065b8:	2b00      	cmp	r3, #0
 80065ba:	d01f      	beq.n	80065fc <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065bc:	2300      	movs	r3, #0
 80065be:	61fb      	str	r3, [r7, #28]
 80065c0:	e012      	b.n	80065e8 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80065c2:	68ba      	ldr	r2, [r7, #8]
 80065c4:	69fb      	ldr	r3, [r7, #28]
 80065c6:	4413      	add	r3, r2
 80065c8:	7819      	ldrb	r1, [r3, #0]
 80065ca:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80065cc:	69fb      	ldr	r3, [r7, #28]
 80065ce:	4413      	add	r3, r2
 80065d0:	3334      	adds	r3, #52	@ 0x34
 80065d2:	460a      	mov	r2, r1
 80065d4:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80065d6:	68ba      	ldr	r2, [r7, #8]
 80065d8:	69fb      	ldr	r3, [r7, #28]
 80065da:	4413      	add	r3, r2
 80065dc:	781b      	ldrb	r3, [r3, #0]
 80065de:	2b00      	cmp	r3, #0
 80065e0:	d006      	beq.n	80065f0 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80065e2:	69fb      	ldr	r3, [r7, #28]
 80065e4:	3301      	adds	r3, #1
 80065e6:	61fb      	str	r3, [r7, #28]
 80065e8:	69fb      	ldr	r3, [r7, #28]
 80065ea:	2b0f      	cmp	r3, #15
 80065ec:	d9e9      	bls.n	80065c2 <prvInitialiseNewTask+0x66>
 80065ee:	e000      	b.n	80065f2 <prvInitialiseNewTask+0x96>
			{
				break;
 80065f0:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80065f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065f4:	2200      	movs	r2, #0
 80065f6:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80065fa:	e003      	b.n	8006604 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 80065fc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006604:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006606:	2b37      	cmp	r3, #55	@ 0x37
 8006608:	d901      	bls.n	800660e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800660a:	2337      	movs	r3, #55	@ 0x37
 800660c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800660e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006610:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006612:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006614:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006616:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006618:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800661a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800661c:	2200      	movs	r2, #0
 800661e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006620:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006622:	3304      	adds	r3, #4
 8006624:	4618      	mov	r0, r3
 8006626:	f7ff f8a7 	bl	8005778 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800662a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800662c:	3318      	adds	r3, #24
 800662e:	4618      	mov	r0, r3
 8006630:	f7ff f8a2 	bl	8005778 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006634:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006636:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006638:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800663a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800663c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006640:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006642:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006644:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006646:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006648:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800664a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800664c:	2200      	movs	r2, #0
 800664e:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006652:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006654:	2200      	movs	r2, #0
 8006656:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800665a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800665c:	3354      	adds	r3, #84	@ 0x54
 800665e:	224c      	movs	r2, #76	@ 0x4c
 8006660:	2100      	movs	r1, #0
 8006662:	4618      	mov	r0, r3
 8006664:	f001 ffc2 	bl	80085ec <memset>
 8006668:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800666a:	4a0d      	ldr	r2, [pc, #52]	@ (80066a0 <prvInitialiseNewTask+0x144>)
 800666c:	659a      	str	r2, [r3, #88]	@ 0x58
 800666e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006670:	4a0c      	ldr	r2, [pc, #48]	@ (80066a4 <prvInitialiseNewTask+0x148>)
 8006672:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006674:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006676:	4a0c      	ldr	r2, [pc, #48]	@ (80066a8 <prvInitialiseNewTask+0x14c>)
 8006678:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800667a:	683a      	ldr	r2, [r7, #0]
 800667c:	68f9      	ldr	r1, [r7, #12]
 800667e:	69b8      	ldr	r0, [r7, #24]
 8006680:	f001 f95a 	bl	8007938 <pxPortInitialiseStack>
 8006684:	4602      	mov	r2, r0
 8006686:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006688:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800668a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800668c:	2b00      	cmp	r3, #0
 800668e:	d002      	beq.n	8006696 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006690:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006692:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006694:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006696:	bf00      	nop
 8006698:	3720      	adds	r7, #32
 800669a:	46bd      	mov	sp, r7
 800669c:	bd80      	pop	{r7, pc}
 800669e:	bf00      	nop
 80066a0:	20004b88 	.word	0x20004b88
 80066a4:	20004bf0 	.word	0x20004bf0
 80066a8:	20004c58 	.word	0x20004c58

080066ac <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80066ac:	b580      	push	{r7, lr}
 80066ae:	b082      	sub	sp, #8
 80066b0:	af00      	add	r7, sp, #0
 80066b2:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80066b4:	f001 fa70 	bl	8007b98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80066b8:	4b2d      	ldr	r3, [pc, #180]	@ (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	3301      	adds	r3, #1
 80066be:	4a2c      	ldr	r2, [pc, #176]	@ (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066c0:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80066c2:	4b2c      	ldr	r3, [pc, #176]	@ (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d109      	bne.n	80066de <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80066ca:	4a2a      	ldr	r2, [pc, #168]	@ (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066cc:	687b      	ldr	r3, [r7, #4]
 80066ce:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80066d0:	4b27      	ldr	r3, [pc, #156]	@ (8006770 <prvAddNewTaskToReadyList+0xc4>)
 80066d2:	681b      	ldr	r3, [r3, #0]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d110      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80066d8:	f000 fc2e 	bl	8006f38 <prvInitialiseTaskLists>
 80066dc:	e00d      	b.n	80066fa <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80066de:	4b26      	ldr	r3, [pc, #152]	@ (8006778 <prvAddNewTaskToReadyList+0xcc>)
 80066e0:	681b      	ldr	r3, [r3, #0]
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d109      	bne.n	80066fa <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80066e6:	4b23      	ldr	r3, [pc, #140]	@ (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066ec:	687b      	ldr	r3, [r7, #4]
 80066ee:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066f0:	429a      	cmp	r2, r3
 80066f2:	d802      	bhi.n	80066fa <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80066f4:	4a1f      	ldr	r2, [pc, #124]	@ (8006774 <prvAddNewTaskToReadyList+0xc8>)
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80066fa:	4b20      	ldr	r3, [pc, #128]	@ (800677c <prvAddNewTaskToReadyList+0xd0>)
 80066fc:	681b      	ldr	r3, [r3, #0]
 80066fe:	3301      	adds	r3, #1
 8006700:	4a1e      	ldr	r2, [pc, #120]	@ (800677c <prvAddNewTaskToReadyList+0xd0>)
 8006702:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006704:	4b1d      	ldr	r3, [pc, #116]	@ (800677c <prvAddNewTaskToReadyList+0xd0>)
 8006706:	681a      	ldr	r2, [r3, #0]
 8006708:	687b      	ldr	r3, [r7, #4]
 800670a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006710:	4b1b      	ldr	r3, [pc, #108]	@ (8006780 <prvAddNewTaskToReadyList+0xd4>)
 8006712:	681b      	ldr	r3, [r3, #0]
 8006714:	429a      	cmp	r2, r3
 8006716:	d903      	bls.n	8006720 <prvAddNewTaskToReadyList+0x74>
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800671c:	4a18      	ldr	r2, [pc, #96]	@ (8006780 <prvAddNewTaskToReadyList+0xd4>)
 800671e:	6013      	str	r3, [r2, #0]
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006724:	4613      	mov	r3, r2
 8006726:	009b      	lsls	r3, r3, #2
 8006728:	4413      	add	r3, r2
 800672a:	009b      	lsls	r3, r3, #2
 800672c:	4a15      	ldr	r2, [pc, #84]	@ (8006784 <prvAddNewTaskToReadyList+0xd8>)
 800672e:	441a      	add	r2, r3
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	3304      	adds	r3, #4
 8006734:	4619      	mov	r1, r3
 8006736:	4610      	mov	r0, r2
 8006738:	f7ff f82b 	bl	8005792 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800673c:	f001 fa5e 	bl	8007bfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006740:	4b0d      	ldr	r3, [pc, #52]	@ (8006778 <prvAddNewTaskToReadyList+0xcc>)
 8006742:	681b      	ldr	r3, [r3, #0]
 8006744:	2b00      	cmp	r3, #0
 8006746:	d00e      	beq.n	8006766 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8006748:	4b0a      	ldr	r3, [pc, #40]	@ (8006774 <prvAddNewTaskToReadyList+0xc8>)
 800674a:	681b      	ldr	r3, [r3, #0]
 800674c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006752:	429a      	cmp	r2, r3
 8006754:	d207      	bcs.n	8006766 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8006756:	4b0c      	ldr	r3, [pc, #48]	@ (8006788 <prvAddNewTaskToReadyList+0xdc>)
 8006758:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800675c:	601a      	str	r2, [r3, #0]
 800675e:	f3bf 8f4f 	dsb	sy
 8006762:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8006766:	bf00      	nop
 8006768:	3708      	adds	r7, #8
 800676a:	46bd      	mov	sp, r7
 800676c:	bd80      	pop	{r7, pc}
 800676e:	bf00      	nop
 8006770:	20000e08 	.word	0x20000e08
 8006774:	20000934 	.word	0x20000934
 8006778:	20000e14 	.word	0x20000e14
 800677c:	20000e24 	.word	0x20000e24
 8006780:	20000e10 	.word	0x20000e10
 8006784:	20000938 	.word	0x20000938
 8006788:	e000ed04 	.word	0xe000ed04

0800678c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800678c:	b580      	push	{r7, lr}
 800678e:	b084      	sub	sp, #16
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006794:	2300      	movs	r3, #0
 8006796:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006798:	687b      	ldr	r3, [r7, #4]
 800679a:	2b00      	cmp	r3, #0
 800679c:	d018      	beq.n	80067d0 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800679e:	4b14      	ldr	r3, [pc, #80]	@ (80067f0 <vTaskDelay+0x64>)
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	2b00      	cmp	r3, #0
 80067a4:	d00b      	beq.n	80067be <vTaskDelay+0x32>
	__asm volatile
 80067a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067aa:	f383 8811 	msr	BASEPRI, r3
 80067ae:	f3bf 8f6f 	isb	sy
 80067b2:	f3bf 8f4f 	dsb	sy
 80067b6:	60bb      	str	r3, [r7, #8]
}
 80067b8:	bf00      	nop
 80067ba:	bf00      	nop
 80067bc:	e7fd      	b.n	80067ba <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80067be:	f000 f88b 	bl	80068d8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80067c2:	2100      	movs	r1, #0
 80067c4:	6878      	ldr	r0, [r7, #4]
 80067c6:	f000 fd09 	bl	80071dc <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80067ca:	f000 f893 	bl	80068f4 <xTaskResumeAll>
 80067ce:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80067d0:	68fb      	ldr	r3, [r7, #12]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d107      	bne.n	80067e6 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80067d6:	4b07      	ldr	r3, [pc, #28]	@ (80067f4 <vTaskDelay+0x68>)
 80067d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067dc:	601a      	str	r2, [r3, #0]
 80067de:	f3bf 8f4f 	dsb	sy
 80067e2:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80067e6:	bf00      	nop
 80067e8:	3710      	adds	r7, #16
 80067ea:	46bd      	mov	sp, r7
 80067ec:	bd80      	pop	{r7, pc}
 80067ee:	bf00      	nop
 80067f0:	20000e30 	.word	0x20000e30
 80067f4:	e000ed04 	.word	0xe000ed04

080067f8 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80067f8:	b580      	push	{r7, lr}
 80067fa:	b08a      	sub	sp, #40	@ 0x28
 80067fc:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 80067fe:	2300      	movs	r3, #0
 8006800:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006802:	2300      	movs	r3, #0
 8006804:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006806:	463a      	mov	r2, r7
 8006808:	1d39      	adds	r1, r7, #4
 800680a:	f107 0308 	add.w	r3, r7, #8
 800680e:	4618      	mov	r0, r3
 8006810:	f7fe ff5e 	bl	80056d0 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006814:	6839      	ldr	r1, [r7, #0]
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	68ba      	ldr	r2, [r7, #8]
 800681a:	9202      	str	r2, [sp, #8]
 800681c:	9301      	str	r3, [sp, #4]
 800681e:	2300      	movs	r3, #0
 8006820:	9300      	str	r3, [sp, #0]
 8006822:	2300      	movs	r3, #0
 8006824:	460a      	mov	r2, r1
 8006826:	4924      	ldr	r1, [pc, #144]	@ (80068b8 <vTaskStartScheduler+0xc0>)
 8006828:	4824      	ldr	r0, [pc, #144]	@ (80068bc <vTaskStartScheduler+0xc4>)
 800682a:	f7ff fdf1 	bl	8006410 <xTaskCreateStatic>
 800682e:	4603      	mov	r3, r0
 8006830:	4a23      	ldr	r2, [pc, #140]	@ (80068c0 <vTaskStartScheduler+0xc8>)
 8006832:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006834:	4b22      	ldr	r3, [pc, #136]	@ (80068c0 <vTaskStartScheduler+0xc8>)
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d002      	beq.n	8006842 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800683c:	2301      	movs	r3, #1
 800683e:	617b      	str	r3, [r7, #20]
 8006840:	e001      	b.n	8006846 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006842:	2300      	movs	r3, #0
 8006844:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	2b01      	cmp	r3, #1
 800684a:	d102      	bne.n	8006852 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800684c:	f000 fd1a 	bl	8007284 <xTimerCreateTimerTask>
 8006850:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006852:	697b      	ldr	r3, [r7, #20]
 8006854:	2b01      	cmp	r3, #1
 8006856:	d11b      	bne.n	8006890 <vTaskStartScheduler+0x98>
	__asm volatile
 8006858:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800685c:	f383 8811 	msr	BASEPRI, r3
 8006860:	f3bf 8f6f 	isb	sy
 8006864:	f3bf 8f4f 	dsb	sy
 8006868:	613b      	str	r3, [r7, #16]
}
 800686a:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 800686c:	4b15      	ldr	r3, [pc, #84]	@ (80068c4 <vTaskStartScheduler+0xcc>)
 800686e:	681b      	ldr	r3, [r3, #0]
 8006870:	3354      	adds	r3, #84	@ 0x54
 8006872:	4a15      	ldr	r2, [pc, #84]	@ (80068c8 <vTaskStartScheduler+0xd0>)
 8006874:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006876:	4b15      	ldr	r3, [pc, #84]	@ (80068cc <vTaskStartScheduler+0xd4>)
 8006878:	f04f 32ff 	mov.w	r2, #4294967295
 800687c:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800687e:	4b14      	ldr	r3, [pc, #80]	@ (80068d0 <vTaskStartScheduler+0xd8>)
 8006880:	2201      	movs	r2, #1
 8006882:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006884:	4b13      	ldr	r3, [pc, #76]	@ (80068d4 <vTaskStartScheduler+0xdc>)
 8006886:	2200      	movs	r2, #0
 8006888:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800688a:	f001 f8e1 	bl	8007a50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800688e:	e00f      	b.n	80068b0 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006890:	697b      	ldr	r3, [r7, #20]
 8006892:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006896:	d10b      	bne.n	80068b0 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006898:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800689c:	f383 8811 	msr	BASEPRI, r3
 80068a0:	f3bf 8f6f 	isb	sy
 80068a4:	f3bf 8f4f 	dsb	sy
 80068a8:	60fb      	str	r3, [r7, #12]
}
 80068aa:	bf00      	nop
 80068ac:	bf00      	nop
 80068ae:	e7fd      	b.n	80068ac <vTaskStartScheduler+0xb4>
}
 80068b0:	bf00      	nop
 80068b2:	3718      	adds	r7, #24
 80068b4:	46bd      	mov	sp, r7
 80068b6:	bd80      	pop	{r7, pc}
 80068b8:	0800bc54 	.word	0x0800bc54
 80068bc:	08006f09 	.word	0x08006f09
 80068c0:	20000e2c 	.word	0x20000e2c
 80068c4:	20000934 	.word	0x20000934
 80068c8:	2000001c 	.word	0x2000001c
 80068cc:	20000e28 	.word	0x20000e28
 80068d0:	20000e14 	.word	0x20000e14
 80068d4:	20000e0c 	.word	0x20000e0c

080068d8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 80068d8:	b480      	push	{r7}
 80068da:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 80068dc:	4b04      	ldr	r3, [pc, #16]	@ (80068f0 <vTaskSuspendAll+0x18>)
 80068de:	681b      	ldr	r3, [r3, #0]
 80068e0:	3301      	adds	r3, #1
 80068e2:	4a03      	ldr	r2, [pc, #12]	@ (80068f0 <vTaskSuspendAll+0x18>)
 80068e4:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 80068e6:	bf00      	nop
 80068e8:	46bd      	mov	sp, r7
 80068ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ee:	4770      	bx	lr
 80068f0:	20000e30 	.word	0x20000e30

080068f4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 80068f4:	b580      	push	{r7, lr}
 80068f6:	b084      	sub	sp, #16
 80068f8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 80068fa:	2300      	movs	r3, #0
 80068fc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 80068fe:	2300      	movs	r3, #0
 8006900:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006902:	4b42      	ldr	r3, [pc, #264]	@ (8006a0c <xTaskResumeAll+0x118>)
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	2b00      	cmp	r3, #0
 8006908:	d10b      	bne.n	8006922 <xTaskResumeAll+0x2e>
	__asm volatile
 800690a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800690e:	f383 8811 	msr	BASEPRI, r3
 8006912:	f3bf 8f6f 	isb	sy
 8006916:	f3bf 8f4f 	dsb	sy
 800691a:	603b      	str	r3, [r7, #0]
}
 800691c:	bf00      	nop
 800691e:	bf00      	nop
 8006920:	e7fd      	b.n	800691e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006922:	f001 f939 	bl	8007b98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006926:	4b39      	ldr	r3, [pc, #228]	@ (8006a0c <xTaskResumeAll+0x118>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	3b01      	subs	r3, #1
 800692c:	4a37      	ldr	r2, [pc, #220]	@ (8006a0c <xTaskResumeAll+0x118>)
 800692e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006930:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <xTaskResumeAll+0x118>)
 8006932:	681b      	ldr	r3, [r3, #0]
 8006934:	2b00      	cmp	r3, #0
 8006936:	d162      	bne.n	80069fe <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006938:	4b35      	ldr	r3, [pc, #212]	@ (8006a10 <xTaskResumeAll+0x11c>)
 800693a:	681b      	ldr	r3, [r3, #0]
 800693c:	2b00      	cmp	r3, #0
 800693e:	d05e      	beq.n	80069fe <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006940:	e02f      	b.n	80069a2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006942:	4b34      	ldr	r3, [pc, #208]	@ (8006a14 <xTaskResumeAll+0x120>)
 8006944:	68db      	ldr	r3, [r3, #12]
 8006946:	68db      	ldr	r3, [r3, #12]
 8006948:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	3318      	adds	r3, #24
 800694e:	4618      	mov	r0, r3
 8006950:	f7fe ff7c 	bl	800584c <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	3304      	adds	r3, #4
 8006958:	4618      	mov	r0, r3
 800695a:	f7fe ff77 	bl	800584c <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800695e:	68fb      	ldr	r3, [r7, #12]
 8006960:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006962:	4b2d      	ldr	r3, [pc, #180]	@ (8006a18 <xTaskResumeAll+0x124>)
 8006964:	681b      	ldr	r3, [r3, #0]
 8006966:	429a      	cmp	r2, r3
 8006968:	d903      	bls.n	8006972 <xTaskResumeAll+0x7e>
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800696e:	4a2a      	ldr	r2, [pc, #168]	@ (8006a18 <xTaskResumeAll+0x124>)
 8006970:	6013      	str	r3, [r2, #0]
 8006972:	68fb      	ldr	r3, [r7, #12]
 8006974:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006976:	4613      	mov	r3, r2
 8006978:	009b      	lsls	r3, r3, #2
 800697a:	4413      	add	r3, r2
 800697c:	009b      	lsls	r3, r3, #2
 800697e:	4a27      	ldr	r2, [pc, #156]	@ (8006a1c <xTaskResumeAll+0x128>)
 8006980:	441a      	add	r2, r3
 8006982:	68fb      	ldr	r3, [r7, #12]
 8006984:	3304      	adds	r3, #4
 8006986:	4619      	mov	r1, r3
 8006988:	4610      	mov	r0, r2
 800698a:	f7fe ff02 	bl	8005792 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006992:	4b23      	ldr	r3, [pc, #140]	@ (8006a20 <xTaskResumeAll+0x12c>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006998:	429a      	cmp	r2, r3
 800699a:	d302      	bcc.n	80069a2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800699c:	4b21      	ldr	r3, [pc, #132]	@ (8006a24 <xTaskResumeAll+0x130>)
 800699e:	2201      	movs	r2, #1
 80069a0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80069a2:	4b1c      	ldr	r3, [pc, #112]	@ (8006a14 <xTaskResumeAll+0x120>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d1cb      	bne.n	8006942 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d001      	beq.n	80069b4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80069b0:	f000 fb66 	bl	8007080 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 80069b4:	4b1c      	ldr	r3, [pc, #112]	@ (8006a28 <xTaskResumeAll+0x134>)
 80069b6:	681b      	ldr	r3, [r3, #0]
 80069b8:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2b00      	cmp	r3, #0
 80069be:	d010      	beq.n	80069e2 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80069c0:	f000 f846 	bl	8006a50 <xTaskIncrementTick>
 80069c4:	4603      	mov	r3, r0
 80069c6:	2b00      	cmp	r3, #0
 80069c8:	d002      	beq.n	80069d0 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80069ca:	4b16      	ldr	r3, [pc, #88]	@ (8006a24 <xTaskResumeAll+0x130>)
 80069cc:	2201      	movs	r2, #1
 80069ce:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	3b01      	subs	r3, #1
 80069d4:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 80069d6:	687b      	ldr	r3, [r7, #4]
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d1f1      	bne.n	80069c0 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 80069dc:	4b12      	ldr	r3, [pc, #72]	@ (8006a28 <xTaskResumeAll+0x134>)
 80069de:	2200      	movs	r2, #0
 80069e0:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 80069e2:	4b10      	ldr	r3, [pc, #64]	@ (8006a24 <xTaskResumeAll+0x130>)
 80069e4:	681b      	ldr	r3, [r3, #0]
 80069e6:	2b00      	cmp	r3, #0
 80069e8:	d009      	beq.n	80069fe <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 80069ea:	2301      	movs	r3, #1
 80069ec:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 80069ee:	4b0f      	ldr	r3, [pc, #60]	@ (8006a2c <xTaskResumeAll+0x138>)
 80069f0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069f4:	601a      	str	r2, [r3, #0]
 80069f6:	f3bf 8f4f 	dsb	sy
 80069fa:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 80069fe:	f001 f8fd 	bl	8007bfc <vPortExitCritical>

	return xAlreadyYielded;
 8006a02:	68bb      	ldr	r3, [r7, #8]
}
 8006a04:	4618      	mov	r0, r3
 8006a06:	3710      	adds	r7, #16
 8006a08:	46bd      	mov	sp, r7
 8006a0a:	bd80      	pop	{r7, pc}
 8006a0c:	20000e30 	.word	0x20000e30
 8006a10:	20000e08 	.word	0x20000e08
 8006a14:	20000dc8 	.word	0x20000dc8
 8006a18:	20000e10 	.word	0x20000e10
 8006a1c:	20000938 	.word	0x20000938
 8006a20:	20000934 	.word	0x20000934
 8006a24:	20000e1c 	.word	0x20000e1c
 8006a28:	20000e18 	.word	0x20000e18
 8006a2c:	e000ed04 	.word	0xe000ed04

08006a30 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006a30:	b480      	push	{r7}
 8006a32:	b083      	sub	sp, #12
 8006a34:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006a36:	4b05      	ldr	r3, [pc, #20]	@ (8006a4c <xTaskGetTickCount+0x1c>)
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006a3c:	687b      	ldr	r3, [r7, #4]
}
 8006a3e:	4618      	mov	r0, r3
 8006a40:	370c      	adds	r7, #12
 8006a42:	46bd      	mov	sp, r7
 8006a44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a48:	4770      	bx	lr
 8006a4a:	bf00      	nop
 8006a4c:	20000e0c 	.word	0x20000e0c

08006a50 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006a50:	b580      	push	{r7, lr}
 8006a52:	b086      	sub	sp, #24
 8006a54:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006a56:	2300      	movs	r3, #0
 8006a58:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006a5a:	4b4f      	ldr	r3, [pc, #316]	@ (8006b98 <xTaskIncrementTick+0x148>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	2b00      	cmp	r3, #0
 8006a60:	f040 8090 	bne.w	8006b84 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006a64:	4b4d      	ldr	r3, [pc, #308]	@ (8006b9c <xTaskIncrementTick+0x14c>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	3301      	adds	r3, #1
 8006a6a:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006a6c:	4a4b      	ldr	r2, [pc, #300]	@ (8006b9c <xTaskIncrementTick+0x14c>)
 8006a6e:	693b      	ldr	r3, [r7, #16]
 8006a70:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006a72:	693b      	ldr	r3, [r7, #16]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	d121      	bne.n	8006abc <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006a78:	4b49      	ldr	r3, [pc, #292]	@ (8006ba0 <xTaskIncrementTick+0x150>)
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	2b00      	cmp	r3, #0
 8006a80:	d00b      	beq.n	8006a9a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a86:	f383 8811 	msr	BASEPRI, r3
 8006a8a:	f3bf 8f6f 	isb	sy
 8006a8e:	f3bf 8f4f 	dsb	sy
 8006a92:	603b      	str	r3, [r7, #0]
}
 8006a94:	bf00      	nop
 8006a96:	bf00      	nop
 8006a98:	e7fd      	b.n	8006a96 <xTaskIncrementTick+0x46>
 8006a9a:	4b41      	ldr	r3, [pc, #260]	@ (8006ba0 <xTaskIncrementTick+0x150>)
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	60fb      	str	r3, [r7, #12]
 8006aa0:	4b40      	ldr	r3, [pc, #256]	@ (8006ba4 <xTaskIncrementTick+0x154>)
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	4a3e      	ldr	r2, [pc, #248]	@ (8006ba0 <xTaskIncrementTick+0x150>)
 8006aa6:	6013      	str	r3, [r2, #0]
 8006aa8:	4a3e      	ldr	r2, [pc, #248]	@ (8006ba4 <xTaskIncrementTick+0x154>)
 8006aaa:	68fb      	ldr	r3, [r7, #12]
 8006aac:	6013      	str	r3, [r2, #0]
 8006aae:	4b3e      	ldr	r3, [pc, #248]	@ (8006ba8 <xTaskIncrementTick+0x158>)
 8006ab0:	681b      	ldr	r3, [r3, #0]
 8006ab2:	3301      	adds	r3, #1
 8006ab4:	4a3c      	ldr	r2, [pc, #240]	@ (8006ba8 <xTaskIncrementTick+0x158>)
 8006ab6:	6013      	str	r3, [r2, #0]
 8006ab8:	f000 fae2 	bl	8007080 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006abc:	4b3b      	ldr	r3, [pc, #236]	@ (8006bac <xTaskIncrementTick+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	693a      	ldr	r2, [r7, #16]
 8006ac2:	429a      	cmp	r2, r3
 8006ac4:	d349      	bcc.n	8006b5a <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ac6:	4b36      	ldr	r3, [pc, #216]	@ (8006ba0 <xTaskIncrementTick+0x150>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	681b      	ldr	r3, [r3, #0]
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d104      	bne.n	8006ada <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006ad0:	4b36      	ldr	r3, [pc, #216]	@ (8006bac <xTaskIncrementTick+0x15c>)
 8006ad2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad6:	601a      	str	r2, [r3, #0]
					break;
 8006ad8:	e03f      	b.n	8006b5a <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006ada:	4b31      	ldr	r3, [pc, #196]	@ (8006ba0 <xTaskIncrementTick+0x150>)
 8006adc:	681b      	ldr	r3, [r3, #0]
 8006ade:	68db      	ldr	r3, [r3, #12]
 8006ae0:	68db      	ldr	r3, [r3, #12]
 8006ae2:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ae4:	68bb      	ldr	r3, [r7, #8]
 8006ae6:	685b      	ldr	r3, [r3, #4]
 8006ae8:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006aea:	693a      	ldr	r2, [r7, #16]
 8006aec:	687b      	ldr	r3, [r7, #4]
 8006aee:	429a      	cmp	r2, r3
 8006af0:	d203      	bcs.n	8006afa <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006af2:	4a2e      	ldr	r2, [pc, #184]	@ (8006bac <xTaskIncrementTick+0x15c>)
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006af8:	e02f      	b.n	8006b5a <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006afa:	68bb      	ldr	r3, [r7, #8]
 8006afc:	3304      	adds	r3, #4
 8006afe:	4618      	mov	r0, r3
 8006b00:	f7fe fea4 	bl	800584c <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006b04:	68bb      	ldr	r3, [r7, #8]
 8006b06:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d004      	beq.n	8006b16 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b0c:	68bb      	ldr	r3, [r7, #8]
 8006b0e:	3318      	adds	r3, #24
 8006b10:	4618      	mov	r0, r3
 8006b12:	f7fe fe9b 	bl	800584c <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006b16:	68bb      	ldr	r3, [r7, #8]
 8006b18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b1a:	4b25      	ldr	r3, [pc, #148]	@ (8006bb0 <xTaskIncrementTick+0x160>)
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	429a      	cmp	r2, r3
 8006b20:	d903      	bls.n	8006b2a <xTaskIncrementTick+0xda>
 8006b22:	68bb      	ldr	r3, [r7, #8]
 8006b24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b26:	4a22      	ldr	r2, [pc, #136]	@ (8006bb0 <xTaskIncrementTick+0x160>)
 8006b28:	6013      	str	r3, [r2, #0]
 8006b2a:	68bb      	ldr	r3, [r7, #8]
 8006b2c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b2e:	4613      	mov	r3, r2
 8006b30:	009b      	lsls	r3, r3, #2
 8006b32:	4413      	add	r3, r2
 8006b34:	009b      	lsls	r3, r3, #2
 8006b36:	4a1f      	ldr	r2, [pc, #124]	@ (8006bb4 <xTaskIncrementTick+0x164>)
 8006b38:	441a      	add	r2, r3
 8006b3a:	68bb      	ldr	r3, [r7, #8]
 8006b3c:	3304      	adds	r3, #4
 8006b3e:	4619      	mov	r1, r3
 8006b40:	4610      	mov	r0, r2
 8006b42:	f7fe fe26 	bl	8005792 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b46:	68bb      	ldr	r3, [r7, #8]
 8006b48:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b4a:	4b1b      	ldr	r3, [pc, #108]	@ (8006bb8 <xTaskIncrementTick+0x168>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b50:	429a      	cmp	r2, r3
 8006b52:	d3b8      	bcc.n	8006ac6 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006b54:	2301      	movs	r3, #1
 8006b56:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006b58:	e7b5      	b.n	8006ac6 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006b5a:	4b17      	ldr	r3, [pc, #92]	@ (8006bb8 <xTaskIncrementTick+0x168>)
 8006b5c:	681b      	ldr	r3, [r3, #0]
 8006b5e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b60:	4914      	ldr	r1, [pc, #80]	@ (8006bb4 <xTaskIncrementTick+0x164>)
 8006b62:	4613      	mov	r3, r2
 8006b64:	009b      	lsls	r3, r3, #2
 8006b66:	4413      	add	r3, r2
 8006b68:	009b      	lsls	r3, r3, #2
 8006b6a:	440b      	add	r3, r1
 8006b6c:	681b      	ldr	r3, [r3, #0]
 8006b6e:	2b01      	cmp	r3, #1
 8006b70:	d901      	bls.n	8006b76 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006b72:	2301      	movs	r3, #1
 8006b74:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006b76:	4b11      	ldr	r3, [pc, #68]	@ (8006bbc <xTaskIncrementTick+0x16c>)
 8006b78:	681b      	ldr	r3, [r3, #0]
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d007      	beq.n	8006b8e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006b7e:	2301      	movs	r3, #1
 8006b80:	617b      	str	r3, [r7, #20]
 8006b82:	e004      	b.n	8006b8e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006b84:	4b0e      	ldr	r3, [pc, #56]	@ (8006bc0 <xTaskIncrementTick+0x170>)
 8006b86:	681b      	ldr	r3, [r3, #0]
 8006b88:	3301      	adds	r3, #1
 8006b8a:	4a0d      	ldr	r2, [pc, #52]	@ (8006bc0 <xTaskIncrementTick+0x170>)
 8006b8c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006b8e:	697b      	ldr	r3, [r7, #20]
}
 8006b90:	4618      	mov	r0, r3
 8006b92:	3718      	adds	r7, #24
 8006b94:	46bd      	mov	sp, r7
 8006b96:	bd80      	pop	{r7, pc}
 8006b98:	20000e30 	.word	0x20000e30
 8006b9c:	20000e0c 	.word	0x20000e0c
 8006ba0:	20000dc0 	.word	0x20000dc0
 8006ba4:	20000dc4 	.word	0x20000dc4
 8006ba8:	20000e20 	.word	0x20000e20
 8006bac:	20000e28 	.word	0x20000e28
 8006bb0:	20000e10 	.word	0x20000e10
 8006bb4:	20000938 	.word	0x20000938
 8006bb8:	20000934 	.word	0x20000934
 8006bbc:	20000e1c 	.word	0x20000e1c
 8006bc0:	20000e18 	.word	0x20000e18

08006bc4 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006bc4:	b480      	push	{r7}
 8006bc6:	b085      	sub	sp, #20
 8006bc8:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006bca:	4b2b      	ldr	r3, [pc, #172]	@ (8006c78 <vTaskSwitchContext+0xb4>)
 8006bcc:	681b      	ldr	r3, [r3, #0]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d003      	beq.n	8006bda <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006bd2:	4b2a      	ldr	r3, [pc, #168]	@ (8006c7c <vTaskSwitchContext+0xb8>)
 8006bd4:	2201      	movs	r2, #1
 8006bd6:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006bd8:	e047      	b.n	8006c6a <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006bda:	4b28      	ldr	r3, [pc, #160]	@ (8006c7c <vTaskSwitchContext+0xb8>)
 8006bdc:	2200      	movs	r2, #0
 8006bde:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006be0:	4b27      	ldr	r3, [pc, #156]	@ (8006c80 <vTaskSwitchContext+0xbc>)
 8006be2:	681b      	ldr	r3, [r3, #0]
 8006be4:	60fb      	str	r3, [r7, #12]
 8006be6:	e011      	b.n	8006c0c <vTaskSwitchContext+0x48>
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d10b      	bne.n	8006c06 <vTaskSwitchContext+0x42>
	__asm volatile
 8006bee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bf2:	f383 8811 	msr	BASEPRI, r3
 8006bf6:	f3bf 8f6f 	isb	sy
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	607b      	str	r3, [r7, #4]
}
 8006c00:	bf00      	nop
 8006c02:	bf00      	nop
 8006c04:	e7fd      	b.n	8006c02 <vTaskSwitchContext+0x3e>
 8006c06:	68fb      	ldr	r3, [r7, #12]
 8006c08:	3b01      	subs	r3, #1
 8006c0a:	60fb      	str	r3, [r7, #12]
 8006c0c:	491d      	ldr	r1, [pc, #116]	@ (8006c84 <vTaskSwitchContext+0xc0>)
 8006c0e:	68fa      	ldr	r2, [r7, #12]
 8006c10:	4613      	mov	r3, r2
 8006c12:	009b      	lsls	r3, r3, #2
 8006c14:	4413      	add	r3, r2
 8006c16:	009b      	lsls	r3, r3, #2
 8006c18:	440b      	add	r3, r1
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	2b00      	cmp	r3, #0
 8006c1e:	d0e3      	beq.n	8006be8 <vTaskSwitchContext+0x24>
 8006c20:	68fa      	ldr	r2, [r7, #12]
 8006c22:	4613      	mov	r3, r2
 8006c24:	009b      	lsls	r3, r3, #2
 8006c26:	4413      	add	r3, r2
 8006c28:	009b      	lsls	r3, r3, #2
 8006c2a:	4a16      	ldr	r2, [pc, #88]	@ (8006c84 <vTaskSwitchContext+0xc0>)
 8006c2c:	4413      	add	r3, r2
 8006c2e:	60bb      	str	r3, [r7, #8]
 8006c30:	68bb      	ldr	r3, [r7, #8]
 8006c32:	685b      	ldr	r3, [r3, #4]
 8006c34:	685a      	ldr	r2, [r3, #4]
 8006c36:	68bb      	ldr	r3, [r7, #8]
 8006c38:	605a      	str	r2, [r3, #4]
 8006c3a:	68bb      	ldr	r3, [r7, #8]
 8006c3c:	685a      	ldr	r2, [r3, #4]
 8006c3e:	68bb      	ldr	r3, [r7, #8]
 8006c40:	3308      	adds	r3, #8
 8006c42:	429a      	cmp	r2, r3
 8006c44:	d104      	bne.n	8006c50 <vTaskSwitchContext+0x8c>
 8006c46:	68bb      	ldr	r3, [r7, #8]
 8006c48:	685b      	ldr	r3, [r3, #4]
 8006c4a:	685a      	ldr	r2, [r3, #4]
 8006c4c:	68bb      	ldr	r3, [r7, #8]
 8006c4e:	605a      	str	r2, [r3, #4]
 8006c50:	68bb      	ldr	r3, [r7, #8]
 8006c52:	685b      	ldr	r3, [r3, #4]
 8006c54:	68db      	ldr	r3, [r3, #12]
 8006c56:	4a0c      	ldr	r2, [pc, #48]	@ (8006c88 <vTaskSwitchContext+0xc4>)
 8006c58:	6013      	str	r3, [r2, #0]
 8006c5a:	4a09      	ldr	r2, [pc, #36]	@ (8006c80 <vTaskSwitchContext+0xbc>)
 8006c5c:	68fb      	ldr	r3, [r7, #12]
 8006c5e:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006c60:	4b09      	ldr	r3, [pc, #36]	@ (8006c88 <vTaskSwitchContext+0xc4>)
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	3354      	adds	r3, #84	@ 0x54
 8006c66:	4a09      	ldr	r2, [pc, #36]	@ (8006c8c <vTaskSwitchContext+0xc8>)
 8006c68:	6013      	str	r3, [r2, #0]
}
 8006c6a:	bf00      	nop
 8006c6c:	3714      	adds	r7, #20
 8006c6e:	46bd      	mov	sp, r7
 8006c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c74:	4770      	bx	lr
 8006c76:	bf00      	nop
 8006c78:	20000e30 	.word	0x20000e30
 8006c7c:	20000e1c 	.word	0x20000e1c
 8006c80:	20000e10 	.word	0x20000e10
 8006c84:	20000938 	.word	0x20000938
 8006c88:	20000934 	.word	0x20000934
 8006c8c:	2000001c 	.word	0x2000001c

08006c90 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006c90:	b580      	push	{r7, lr}
 8006c92:	b084      	sub	sp, #16
 8006c94:	af00      	add	r7, sp, #0
 8006c96:	6078      	str	r0, [r7, #4]
 8006c98:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	d10b      	bne.n	8006cb8 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ca0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ca4:	f383 8811 	msr	BASEPRI, r3
 8006ca8:	f3bf 8f6f 	isb	sy
 8006cac:	f3bf 8f4f 	dsb	sy
 8006cb0:	60fb      	str	r3, [r7, #12]
}
 8006cb2:	bf00      	nop
 8006cb4:	bf00      	nop
 8006cb6:	e7fd      	b.n	8006cb4 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006cb8:	4b07      	ldr	r3, [pc, #28]	@ (8006cd8 <vTaskPlaceOnEventList+0x48>)
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	3318      	adds	r3, #24
 8006cbe:	4619      	mov	r1, r3
 8006cc0:	6878      	ldr	r0, [r7, #4]
 8006cc2:	f7fe fd8a 	bl	80057da <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006cc6:	2101      	movs	r1, #1
 8006cc8:	6838      	ldr	r0, [r7, #0]
 8006cca:	f000 fa87 	bl	80071dc <prvAddCurrentTaskToDelayedList>
}
 8006cce:	bf00      	nop
 8006cd0:	3710      	adds	r7, #16
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}
 8006cd6:	bf00      	nop
 8006cd8:	20000934 	.word	0x20000934

08006cdc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006cdc:	b580      	push	{r7, lr}
 8006cde:	b086      	sub	sp, #24
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	60f8      	str	r0, [r7, #12]
 8006ce4:	60b9      	str	r1, [r7, #8]
 8006ce6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006ce8:	68fb      	ldr	r3, [r7, #12]
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d10b      	bne.n	8006d06 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cf2:	f383 8811 	msr	BASEPRI, r3
 8006cf6:	f3bf 8f6f 	isb	sy
 8006cfa:	f3bf 8f4f 	dsb	sy
 8006cfe:	617b      	str	r3, [r7, #20]
}
 8006d00:	bf00      	nop
 8006d02:	bf00      	nop
 8006d04:	e7fd      	b.n	8006d02 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006d06:	4b0a      	ldr	r3, [pc, #40]	@ (8006d30 <vTaskPlaceOnEventListRestricted+0x54>)
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	3318      	adds	r3, #24
 8006d0c:	4619      	mov	r1, r3
 8006d0e:	68f8      	ldr	r0, [r7, #12]
 8006d10:	f7fe fd3f 	bl	8005792 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d002      	beq.n	8006d20 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006d1a:	f04f 33ff 	mov.w	r3, #4294967295
 8006d1e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006d20:	6879      	ldr	r1, [r7, #4]
 8006d22:	68b8      	ldr	r0, [r7, #8]
 8006d24:	f000 fa5a 	bl	80071dc <prvAddCurrentTaskToDelayedList>
	}
 8006d28:	bf00      	nop
 8006d2a:	3718      	adds	r7, #24
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}
 8006d30:	20000934 	.word	0x20000934

08006d34 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b086      	sub	sp, #24
 8006d38:	af00      	add	r7, sp, #0
 8006d3a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	68db      	ldr	r3, [r3, #12]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006d44:	693b      	ldr	r3, [r7, #16]
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10b      	bne.n	8006d62 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	60fb      	str	r3, [r7, #12]
}
 8006d5c:	bf00      	nop
 8006d5e:	bf00      	nop
 8006d60:	e7fd      	b.n	8006d5e <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006d62:	693b      	ldr	r3, [r7, #16]
 8006d64:	3318      	adds	r3, #24
 8006d66:	4618      	mov	r0, r3
 8006d68:	f7fe fd70 	bl	800584c <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006d6c:	4b1d      	ldr	r3, [pc, #116]	@ (8006de4 <xTaskRemoveFromEventList+0xb0>)
 8006d6e:	681b      	ldr	r3, [r3, #0]
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d11d      	bne.n	8006db0 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006d74:	693b      	ldr	r3, [r7, #16]
 8006d76:	3304      	adds	r3, #4
 8006d78:	4618      	mov	r0, r3
 8006d7a:	f7fe fd67 	bl	800584c <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006d7e:	693b      	ldr	r3, [r7, #16]
 8006d80:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d82:	4b19      	ldr	r3, [pc, #100]	@ (8006de8 <xTaskRemoveFromEventList+0xb4>)
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	429a      	cmp	r2, r3
 8006d88:	d903      	bls.n	8006d92 <xTaskRemoveFromEventList+0x5e>
 8006d8a:	693b      	ldr	r3, [r7, #16]
 8006d8c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d8e:	4a16      	ldr	r2, [pc, #88]	@ (8006de8 <xTaskRemoveFromEventList+0xb4>)
 8006d90:	6013      	str	r3, [r2, #0]
 8006d92:	693b      	ldr	r3, [r7, #16]
 8006d94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d96:	4613      	mov	r3, r2
 8006d98:	009b      	lsls	r3, r3, #2
 8006d9a:	4413      	add	r3, r2
 8006d9c:	009b      	lsls	r3, r3, #2
 8006d9e:	4a13      	ldr	r2, [pc, #76]	@ (8006dec <xTaskRemoveFromEventList+0xb8>)
 8006da0:	441a      	add	r2, r3
 8006da2:	693b      	ldr	r3, [r7, #16]
 8006da4:	3304      	adds	r3, #4
 8006da6:	4619      	mov	r1, r3
 8006da8:	4610      	mov	r0, r2
 8006daa:	f7fe fcf2 	bl	8005792 <vListInsertEnd>
 8006dae:	e005      	b.n	8006dbc <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006db0:	693b      	ldr	r3, [r7, #16]
 8006db2:	3318      	adds	r3, #24
 8006db4:	4619      	mov	r1, r3
 8006db6:	480e      	ldr	r0, [pc, #56]	@ (8006df0 <xTaskRemoveFromEventList+0xbc>)
 8006db8:	f7fe fceb 	bl	8005792 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006dbc:	693b      	ldr	r3, [r7, #16]
 8006dbe:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006dc0:	4b0c      	ldr	r3, [pc, #48]	@ (8006df4 <xTaskRemoveFromEventList+0xc0>)
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006dc6:	429a      	cmp	r2, r3
 8006dc8:	d905      	bls.n	8006dd6 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006dca:	2301      	movs	r3, #1
 8006dcc:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006dce:	4b0a      	ldr	r3, [pc, #40]	@ (8006df8 <xTaskRemoveFromEventList+0xc4>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	601a      	str	r2, [r3, #0]
 8006dd4:	e001      	b.n	8006dda <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006dd6:	2300      	movs	r3, #0
 8006dd8:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006dda:	697b      	ldr	r3, [r7, #20]
}
 8006ddc:	4618      	mov	r0, r3
 8006dde:	3718      	adds	r7, #24
 8006de0:	46bd      	mov	sp, r7
 8006de2:	bd80      	pop	{r7, pc}
 8006de4:	20000e30 	.word	0x20000e30
 8006de8:	20000e10 	.word	0x20000e10
 8006dec:	20000938 	.word	0x20000938
 8006df0:	20000dc8 	.word	0x20000dc8
 8006df4:	20000934 	.word	0x20000934
 8006df8:	20000e1c 	.word	0x20000e1c

08006dfc <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006dfc:	b480      	push	{r7}
 8006dfe:	b083      	sub	sp, #12
 8006e00:	af00      	add	r7, sp, #0
 8006e02:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006e04:	4b06      	ldr	r3, [pc, #24]	@ (8006e20 <vTaskInternalSetTimeOutState+0x24>)
 8006e06:	681a      	ldr	r2, [r3, #0]
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006e0c:	4b05      	ldr	r3, [pc, #20]	@ (8006e24 <vTaskInternalSetTimeOutState+0x28>)
 8006e0e:	681a      	ldr	r2, [r3, #0]
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	605a      	str	r2, [r3, #4]
}
 8006e14:	bf00      	nop
 8006e16:	370c      	adds	r7, #12
 8006e18:	46bd      	mov	sp, r7
 8006e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e1e:	4770      	bx	lr
 8006e20:	20000e20 	.word	0x20000e20
 8006e24:	20000e0c 	.word	0x20000e0c

08006e28 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006e28:	b580      	push	{r7, lr}
 8006e2a:	b088      	sub	sp, #32
 8006e2c:	af00      	add	r7, sp, #0
 8006e2e:	6078      	str	r0, [r7, #4]
 8006e30:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	2b00      	cmp	r3, #0
 8006e36:	d10b      	bne.n	8006e50 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006e38:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e3c:	f383 8811 	msr	BASEPRI, r3
 8006e40:	f3bf 8f6f 	isb	sy
 8006e44:	f3bf 8f4f 	dsb	sy
 8006e48:	613b      	str	r3, [r7, #16]
}
 8006e4a:	bf00      	nop
 8006e4c:	bf00      	nop
 8006e4e:	e7fd      	b.n	8006e4c <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	2b00      	cmp	r3, #0
 8006e54:	d10b      	bne.n	8006e6e <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006e56:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006e5a:	f383 8811 	msr	BASEPRI, r3
 8006e5e:	f3bf 8f6f 	isb	sy
 8006e62:	f3bf 8f4f 	dsb	sy
 8006e66:	60fb      	str	r3, [r7, #12]
}
 8006e68:	bf00      	nop
 8006e6a:	bf00      	nop
 8006e6c:	e7fd      	b.n	8006e6a <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006e6e:	f000 fe93 	bl	8007b98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006e72:	4b1d      	ldr	r3, [pc, #116]	@ (8006ee8 <xTaskCheckForTimeOut+0xc0>)
 8006e74:	681b      	ldr	r3, [r3, #0]
 8006e76:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	685b      	ldr	r3, [r3, #4]
 8006e7c:	69ba      	ldr	r2, [r7, #24]
 8006e7e:	1ad3      	subs	r3, r2, r3
 8006e80:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006e82:	683b      	ldr	r3, [r7, #0]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e8a:	d102      	bne.n	8006e92 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006e8c:	2300      	movs	r3, #0
 8006e8e:	61fb      	str	r3, [r7, #28]
 8006e90:	e023      	b.n	8006eda <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	681a      	ldr	r2, [r3, #0]
 8006e96:	4b15      	ldr	r3, [pc, #84]	@ (8006eec <xTaskCheckForTimeOut+0xc4>)
 8006e98:	681b      	ldr	r3, [r3, #0]
 8006e9a:	429a      	cmp	r2, r3
 8006e9c:	d007      	beq.n	8006eae <xTaskCheckForTimeOut+0x86>
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	69ba      	ldr	r2, [r7, #24]
 8006ea4:	429a      	cmp	r2, r3
 8006ea6:	d302      	bcc.n	8006eae <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006ea8:	2301      	movs	r3, #1
 8006eaa:	61fb      	str	r3, [r7, #28]
 8006eac:	e015      	b.n	8006eda <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006eae:	683b      	ldr	r3, [r7, #0]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	697a      	ldr	r2, [r7, #20]
 8006eb4:	429a      	cmp	r2, r3
 8006eb6:	d20b      	bcs.n	8006ed0 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006eb8:	683b      	ldr	r3, [r7, #0]
 8006eba:	681a      	ldr	r2, [r3, #0]
 8006ebc:	697b      	ldr	r3, [r7, #20]
 8006ebe:	1ad2      	subs	r2, r2, r3
 8006ec0:	683b      	ldr	r3, [r7, #0]
 8006ec2:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7ff ff99 	bl	8006dfc <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006eca:	2300      	movs	r3, #0
 8006ecc:	61fb      	str	r3, [r7, #28]
 8006ece:	e004      	b.n	8006eda <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006ed0:	683b      	ldr	r3, [r7, #0]
 8006ed2:	2200      	movs	r2, #0
 8006ed4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006ed6:	2301      	movs	r3, #1
 8006ed8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006eda:	f000 fe8f 	bl	8007bfc <vPortExitCritical>

	return xReturn;
 8006ede:	69fb      	ldr	r3, [r7, #28]
}
 8006ee0:	4618      	mov	r0, r3
 8006ee2:	3720      	adds	r7, #32
 8006ee4:	46bd      	mov	sp, r7
 8006ee6:	bd80      	pop	{r7, pc}
 8006ee8:	20000e0c 	.word	0x20000e0c
 8006eec:	20000e20 	.word	0x20000e20

08006ef0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006ef0:	b480      	push	{r7}
 8006ef2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006ef4:	4b03      	ldr	r3, [pc, #12]	@ (8006f04 <vTaskMissedYield+0x14>)
 8006ef6:	2201      	movs	r2, #1
 8006ef8:	601a      	str	r2, [r3, #0]
}
 8006efa:	bf00      	nop
 8006efc:	46bd      	mov	sp, r7
 8006efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f02:	4770      	bx	lr
 8006f04:	20000e1c 	.word	0x20000e1c

08006f08 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006f10:	f000 f852 	bl	8006fb8 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006f14:	4b06      	ldr	r3, [pc, #24]	@ (8006f30 <prvIdleTask+0x28>)
 8006f16:	681b      	ldr	r3, [r3, #0]
 8006f18:	2b01      	cmp	r3, #1
 8006f1a:	d9f9      	bls.n	8006f10 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006f1c:	4b05      	ldr	r3, [pc, #20]	@ (8006f34 <prvIdleTask+0x2c>)
 8006f1e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006f22:	601a      	str	r2, [r3, #0]
 8006f24:	f3bf 8f4f 	dsb	sy
 8006f28:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006f2c:	e7f0      	b.n	8006f10 <prvIdleTask+0x8>
 8006f2e:	bf00      	nop
 8006f30:	20000938 	.word	0x20000938
 8006f34:	e000ed04 	.word	0xe000ed04

08006f38 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b082      	sub	sp, #8
 8006f3c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f3e:	2300      	movs	r3, #0
 8006f40:	607b      	str	r3, [r7, #4]
 8006f42:	e00c      	b.n	8006f5e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006f44:	687a      	ldr	r2, [r7, #4]
 8006f46:	4613      	mov	r3, r2
 8006f48:	009b      	lsls	r3, r3, #2
 8006f4a:	4413      	add	r3, r2
 8006f4c:	009b      	lsls	r3, r3, #2
 8006f4e:	4a12      	ldr	r2, [pc, #72]	@ (8006f98 <prvInitialiseTaskLists+0x60>)
 8006f50:	4413      	add	r3, r2
 8006f52:	4618      	mov	r0, r3
 8006f54:	f7fe fbf0 	bl	8005738 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006f58:	687b      	ldr	r3, [r7, #4]
 8006f5a:	3301      	adds	r3, #1
 8006f5c:	607b      	str	r3, [r7, #4]
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	2b37      	cmp	r3, #55	@ 0x37
 8006f62:	d9ef      	bls.n	8006f44 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006f64:	480d      	ldr	r0, [pc, #52]	@ (8006f9c <prvInitialiseTaskLists+0x64>)
 8006f66:	f7fe fbe7 	bl	8005738 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006f6a:	480d      	ldr	r0, [pc, #52]	@ (8006fa0 <prvInitialiseTaskLists+0x68>)
 8006f6c:	f7fe fbe4 	bl	8005738 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006f70:	480c      	ldr	r0, [pc, #48]	@ (8006fa4 <prvInitialiseTaskLists+0x6c>)
 8006f72:	f7fe fbe1 	bl	8005738 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006f76:	480c      	ldr	r0, [pc, #48]	@ (8006fa8 <prvInitialiseTaskLists+0x70>)
 8006f78:	f7fe fbde 	bl	8005738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006f7c:	480b      	ldr	r0, [pc, #44]	@ (8006fac <prvInitialiseTaskLists+0x74>)
 8006f7e:	f7fe fbdb 	bl	8005738 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006f82:	4b0b      	ldr	r3, [pc, #44]	@ (8006fb0 <prvInitialiseTaskLists+0x78>)
 8006f84:	4a05      	ldr	r2, [pc, #20]	@ (8006f9c <prvInitialiseTaskLists+0x64>)
 8006f86:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006f88:	4b0a      	ldr	r3, [pc, #40]	@ (8006fb4 <prvInitialiseTaskLists+0x7c>)
 8006f8a:	4a05      	ldr	r2, [pc, #20]	@ (8006fa0 <prvInitialiseTaskLists+0x68>)
 8006f8c:	601a      	str	r2, [r3, #0]
}
 8006f8e:	bf00      	nop
 8006f90:	3708      	adds	r7, #8
 8006f92:	46bd      	mov	sp, r7
 8006f94:	bd80      	pop	{r7, pc}
 8006f96:	bf00      	nop
 8006f98:	20000938 	.word	0x20000938
 8006f9c:	20000d98 	.word	0x20000d98
 8006fa0:	20000dac 	.word	0x20000dac
 8006fa4:	20000dc8 	.word	0x20000dc8
 8006fa8:	20000ddc 	.word	0x20000ddc
 8006fac:	20000df4 	.word	0x20000df4
 8006fb0:	20000dc0 	.word	0x20000dc0
 8006fb4:	20000dc4 	.word	0x20000dc4

08006fb8 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b082      	sub	sp, #8
 8006fbc:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006fbe:	e019      	b.n	8006ff4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006fc0:	f000 fdea 	bl	8007b98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006fc4:	4b10      	ldr	r3, [pc, #64]	@ (8007008 <prvCheckTasksWaitingTermination+0x50>)
 8006fc6:	68db      	ldr	r3, [r3, #12]
 8006fc8:	68db      	ldr	r3, [r3, #12]
 8006fca:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006fcc:	687b      	ldr	r3, [r7, #4]
 8006fce:	3304      	adds	r3, #4
 8006fd0:	4618      	mov	r0, r3
 8006fd2:	f7fe fc3b 	bl	800584c <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006fd6:	4b0d      	ldr	r3, [pc, #52]	@ (800700c <prvCheckTasksWaitingTermination+0x54>)
 8006fd8:	681b      	ldr	r3, [r3, #0]
 8006fda:	3b01      	subs	r3, #1
 8006fdc:	4a0b      	ldr	r2, [pc, #44]	@ (800700c <prvCheckTasksWaitingTermination+0x54>)
 8006fde:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006fe0:	4b0b      	ldr	r3, [pc, #44]	@ (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	4a0a      	ldr	r2, [pc, #40]	@ (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006fe8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006fea:	f000 fe07 	bl	8007bfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006fee:	6878      	ldr	r0, [r7, #4]
 8006ff0:	f000 f810 	bl	8007014 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006ff4:	4b06      	ldr	r3, [pc, #24]	@ (8007010 <prvCheckTasksWaitingTermination+0x58>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	2b00      	cmp	r3, #0
 8006ffa:	d1e1      	bne.n	8006fc0 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	3708      	adds	r7, #8
 8007002:	46bd      	mov	sp, r7
 8007004:	bd80      	pop	{r7, pc}
 8007006:	bf00      	nop
 8007008:	20000ddc 	.word	0x20000ddc
 800700c:	20000e08 	.word	0x20000e08
 8007010:	20000df0 	.word	0x20000df0

08007014 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007014:	b580      	push	{r7, lr}
 8007016:	b084      	sub	sp, #16
 8007018:	af00      	add	r7, sp, #0
 800701a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	3354      	adds	r3, #84	@ 0x54
 8007020:	4618      	mov	r0, r3
 8007022:	f001 fafb 	bl	800861c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8007026:	687b      	ldr	r3, [r7, #4]
 8007028:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800702c:	2b00      	cmp	r3, #0
 800702e:	d108      	bne.n	8007042 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007034:	4618      	mov	r0, r3
 8007036:	f000 ff9f 	bl	8007f78 <vPortFree>
				vPortFree( pxTCB );
 800703a:	6878      	ldr	r0, [r7, #4]
 800703c:	f000 ff9c 	bl	8007f78 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007040:	e019      	b.n	8007076 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007048:	2b01      	cmp	r3, #1
 800704a:	d103      	bne.n	8007054 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800704c:	6878      	ldr	r0, [r7, #4]
 800704e:	f000 ff93 	bl	8007f78 <vPortFree>
	}
 8007052:	e010      	b.n	8007076 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007054:	687b      	ldr	r3, [r7, #4]
 8007056:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800705a:	2b02      	cmp	r3, #2
 800705c:	d00b      	beq.n	8007076 <prvDeleteTCB+0x62>
	__asm volatile
 800705e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007062:	f383 8811 	msr	BASEPRI, r3
 8007066:	f3bf 8f6f 	isb	sy
 800706a:	f3bf 8f4f 	dsb	sy
 800706e:	60fb      	str	r3, [r7, #12]
}
 8007070:	bf00      	nop
 8007072:	bf00      	nop
 8007074:	e7fd      	b.n	8007072 <prvDeleteTCB+0x5e>
	}
 8007076:	bf00      	nop
 8007078:	3710      	adds	r7, #16
 800707a:	46bd      	mov	sp, r7
 800707c:	bd80      	pop	{r7, pc}
	...

08007080 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007080:	b480      	push	{r7}
 8007082:	b083      	sub	sp, #12
 8007084:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007086:	4b0c      	ldr	r3, [pc, #48]	@ (80070b8 <prvResetNextTaskUnblockTime+0x38>)
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	2b00      	cmp	r3, #0
 800708e:	d104      	bne.n	800709a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007090:	4b0a      	ldr	r3, [pc, #40]	@ (80070bc <prvResetNextTaskUnblockTime+0x3c>)
 8007092:	f04f 32ff 	mov.w	r2, #4294967295
 8007096:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8007098:	e008      	b.n	80070ac <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800709a:	4b07      	ldr	r3, [pc, #28]	@ (80070b8 <prvResetNextTaskUnblockTime+0x38>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	68db      	ldr	r3, [r3, #12]
 80070a0:	68db      	ldr	r3, [r3, #12]
 80070a2:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80070a4:	687b      	ldr	r3, [r7, #4]
 80070a6:	685b      	ldr	r3, [r3, #4]
 80070a8:	4a04      	ldr	r2, [pc, #16]	@ (80070bc <prvResetNextTaskUnblockTime+0x3c>)
 80070aa:	6013      	str	r3, [r2, #0]
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr
 80070b8:	20000dc0 	.word	0x20000dc0
 80070bc:	20000e28 	.word	0x20000e28

080070c0 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80070c0:	b480      	push	{r7}
 80070c2:	b083      	sub	sp, #12
 80070c4:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80070c6:	4b0b      	ldr	r3, [pc, #44]	@ (80070f4 <xTaskGetSchedulerState+0x34>)
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	2b00      	cmp	r3, #0
 80070cc:	d102      	bne.n	80070d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80070ce:	2301      	movs	r3, #1
 80070d0:	607b      	str	r3, [r7, #4]
 80070d2:	e008      	b.n	80070e6 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80070d4:	4b08      	ldr	r3, [pc, #32]	@ (80070f8 <xTaskGetSchedulerState+0x38>)
 80070d6:	681b      	ldr	r3, [r3, #0]
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d102      	bne.n	80070e2 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80070dc:	2302      	movs	r3, #2
 80070de:	607b      	str	r3, [r7, #4]
 80070e0:	e001      	b.n	80070e6 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80070e2:	2300      	movs	r3, #0
 80070e4:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80070e6:	687b      	ldr	r3, [r7, #4]
	}
 80070e8:	4618      	mov	r0, r3
 80070ea:	370c      	adds	r7, #12
 80070ec:	46bd      	mov	sp, r7
 80070ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070f2:	4770      	bx	lr
 80070f4:	20000e14 	.word	0x20000e14
 80070f8:	20000e30 	.word	0x20000e30

080070fc <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 80070fc:	b580      	push	{r7, lr}
 80070fe:	b086      	sub	sp, #24
 8007100:	af00      	add	r7, sp, #0
 8007102:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8007108:	2300      	movs	r3, #0
 800710a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800710c:	687b      	ldr	r3, [r7, #4]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d058      	beq.n	80071c4 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007112:	4b2f      	ldr	r3, [pc, #188]	@ (80071d0 <xTaskPriorityDisinherit+0xd4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	693a      	ldr	r2, [r7, #16]
 8007118:	429a      	cmp	r2, r3
 800711a:	d00b      	beq.n	8007134 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800711c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007120:	f383 8811 	msr	BASEPRI, r3
 8007124:	f3bf 8f6f 	isb	sy
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	60fb      	str	r3, [r7, #12]
}
 800712e:	bf00      	nop
 8007130:	bf00      	nop
 8007132:	e7fd      	b.n	8007130 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007134:	693b      	ldr	r3, [r7, #16]
 8007136:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007138:	2b00      	cmp	r3, #0
 800713a:	d10b      	bne.n	8007154 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 800713c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007140:	f383 8811 	msr	BASEPRI, r3
 8007144:	f3bf 8f6f 	isb	sy
 8007148:	f3bf 8f4f 	dsb	sy
 800714c:	60bb      	str	r3, [r7, #8]
}
 800714e:	bf00      	nop
 8007150:	bf00      	nop
 8007152:	e7fd      	b.n	8007150 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007154:	693b      	ldr	r3, [r7, #16]
 8007156:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007158:	1e5a      	subs	r2, r3, #1
 800715a:	693b      	ldr	r3, [r7, #16]
 800715c:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800715e:	693b      	ldr	r3, [r7, #16]
 8007160:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007162:	693b      	ldr	r3, [r7, #16]
 8007164:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8007166:	429a      	cmp	r2, r3
 8007168:	d02c      	beq.n	80071c4 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800716a:	693b      	ldr	r3, [r7, #16]
 800716c:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800716e:	2b00      	cmp	r3, #0
 8007170:	d128      	bne.n	80071c4 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007172:	693b      	ldr	r3, [r7, #16]
 8007174:	3304      	adds	r3, #4
 8007176:	4618      	mov	r0, r3
 8007178:	f7fe fb68 	bl	800584c <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800717c:	693b      	ldr	r3, [r7, #16]
 800717e:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007180:	693b      	ldr	r3, [r7, #16]
 8007182:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007184:	693b      	ldr	r3, [r7, #16]
 8007186:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007188:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 800718c:	693b      	ldr	r3, [r7, #16]
 800718e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007190:	693b      	ldr	r3, [r7, #16]
 8007192:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007194:	4b0f      	ldr	r3, [pc, #60]	@ (80071d4 <xTaskPriorityDisinherit+0xd8>)
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	429a      	cmp	r2, r3
 800719a:	d903      	bls.n	80071a4 <xTaskPriorityDisinherit+0xa8>
 800719c:	693b      	ldr	r3, [r7, #16]
 800719e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80071a0:	4a0c      	ldr	r2, [pc, #48]	@ (80071d4 <xTaskPriorityDisinherit+0xd8>)
 80071a2:	6013      	str	r3, [r2, #0]
 80071a4:	693b      	ldr	r3, [r7, #16]
 80071a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80071a8:	4613      	mov	r3, r2
 80071aa:	009b      	lsls	r3, r3, #2
 80071ac:	4413      	add	r3, r2
 80071ae:	009b      	lsls	r3, r3, #2
 80071b0:	4a09      	ldr	r2, [pc, #36]	@ (80071d8 <xTaskPriorityDisinherit+0xdc>)
 80071b2:	441a      	add	r2, r3
 80071b4:	693b      	ldr	r3, [r7, #16]
 80071b6:	3304      	adds	r3, #4
 80071b8:	4619      	mov	r1, r3
 80071ba:	4610      	mov	r0, r2
 80071bc:	f7fe fae9 	bl	8005792 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80071c0:	2301      	movs	r3, #1
 80071c2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80071c4:	697b      	ldr	r3, [r7, #20]
	}
 80071c6:	4618      	mov	r0, r3
 80071c8:	3718      	adds	r7, #24
 80071ca:	46bd      	mov	sp, r7
 80071cc:	bd80      	pop	{r7, pc}
 80071ce:	bf00      	nop
 80071d0:	20000934 	.word	0x20000934
 80071d4:	20000e10 	.word	0x20000e10
 80071d8:	20000938 	.word	0x20000938

080071dc <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80071dc:	b580      	push	{r7, lr}
 80071de:	b084      	sub	sp, #16
 80071e0:	af00      	add	r7, sp, #0
 80071e2:	6078      	str	r0, [r7, #4]
 80071e4:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80071e6:	4b21      	ldr	r3, [pc, #132]	@ (800726c <prvAddCurrentTaskToDelayedList+0x90>)
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80071ec:	4b20      	ldr	r3, [pc, #128]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	3304      	adds	r3, #4
 80071f2:	4618      	mov	r0, r3
 80071f4:	f7fe fb2a 	bl	800584c <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071fe:	d10a      	bne.n	8007216 <prvAddCurrentTaskToDelayedList+0x3a>
 8007200:	683b      	ldr	r3, [r7, #0]
 8007202:	2b00      	cmp	r3, #0
 8007204:	d007      	beq.n	8007216 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007206:	4b1a      	ldr	r3, [pc, #104]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007208:	681b      	ldr	r3, [r3, #0]
 800720a:	3304      	adds	r3, #4
 800720c:	4619      	mov	r1, r3
 800720e:	4819      	ldr	r0, [pc, #100]	@ (8007274 <prvAddCurrentTaskToDelayedList+0x98>)
 8007210:	f7fe fabf 	bl	8005792 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007214:	e026      	b.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007216:	68fa      	ldr	r2, [r7, #12]
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	4413      	add	r3, r2
 800721c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800721e:	4b14      	ldr	r3, [pc, #80]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68ba      	ldr	r2, [r7, #8]
 8007224:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007226:	68ba      	ldr	r2, [r7, #8]
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	429a      	cmp	r2, r3
 800722c:	d209      	bcs.n	8007242 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800722e:	4b12      	ldr	r3, [pc, #72]	@ (8007278 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007230:	681a      	ldr	r2, [r3, #0]
 8007232:	4b0f      	ldr	r3, [pc, #60]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007234:	681b      	ldr	r3, [r3, #0]
 8007236:	3304      	adds	r3, #4
 8007238:	4619      	mov	r1, r3
 800723a:	4610      	mov	r0, r2
 800723c:	f7fe facd 	bl	80057da <vListInsert>
}
 8007240:	e010      	b.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007242:	4b0e      	ldr	r3, [pc, #56]	@ (800727c <prvAddCurrentTaskToDelayedList+0xa0>)
 8007244:	681a      	ldr	r2, [r3, #0]
 8007246:	4b0a      	ldr	r3, [pc, #40]	@ (8007270 <prvAddCurrentTaskToDelayedList+0x94>)
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	3304      	adds	r3, #4
 800724c:	4619      	mov	r1, r3
 800724e:	4610      	mov	r0, r2
 8007250:	f7fe fac3 	bl	80057da <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007254:	4b0a      	ldr	r3, [pc, #40]	@ (8007280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007256:	681b      	ldr	r3, [r3, #0]
 8007258:	68ba      	ldr	r2, [r7, #8]
 800725a:	429a      	cmp	r2, r3
 800725c:	d202      	bcs.n	8007264 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800725e:	4a08      	ldr	r2, [pc, #32]	@ (8007280 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007260:	68bb      	ldr	r3, [r7, #8]
 8007262:	6013      	str	r3, [r2, #0]
}
 8007264:	bf00      	nop
 8007266:	3710      	adds	r7, #16
 8007268:	46bd      	mov	sp, r7
 800726a:	bd80      	pop	{r7, pc}
 800726c:	20000e0c 	.word	0x20000e0c
 8007270:	20000934 	.word	0x20000934
 8007274:	20000df4 	.word	0x20000df4
 8007278:	20000dc4 	.word	0x20000dc4
 800727c:	20000dc0 	.word	0x20000dc0
 8007280:	20000e28 	.word	0x20000e28

08007284 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007284:	b580      	push	{r7, lr}
 8007286:	b08a      	sub	sp, #40	@ 0x28
 8007288:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800728a:	2300      	movs	r3, #0
 800728c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800728e:	f000 fb13 	bl	80078b8 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007292:	4b1d      	ldr	r3, [pc, #116]	@ (8007308 <xTimerCreateTimerTask+0x84>)
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d021      	beq.n	80072de <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800729a:	2300      	movs	r3, #0
 800729c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800729e:	2300      	movs	r3, #0
 80072a0:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80072a2:	1d3a      	adds	r2, r7, #4
 80072a4:	f107 0108 	add.w	r1, r7, #8
 80072a8:	f107 030c 	add.w	r3, r7, #12
 80072ac:	4618      	mov	r0, r3
 80072ae:	f7fe fa29 	bl	8005704 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80072b2:	6879      	ldr	r1, [r7, #4]
 80072b4:	68bb      	ldr	r3, [r7, #8]
 80072b6:	68fa      	ldr	r2, [r7, #12]
 80072b8:	9202      	str	r2, [sp, #8]
 80072ba:	9301      	str	r3, [sp, #4]
 80072bc:	2302      	movs	r3, #2
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	2300      	movs	r3, #0
 80072c2:	460a      	mov	r2, r1
 80072c4:	4911      	ldr	r1, [pc, #68]	@ (800730c <xTimerCreateTimerTask+0x88>)
 80072c6:	4812      	ldr	r0, [pc, #72]	@ (8007310 <xTimerCreateTimerTask+0x8c>)
 80072c8:	f7ff f8a2 	bl	8006410 <xTaskCreateStatic>
 80072cc:	4603      	mov	r3, r0
 80072ce:	4a11      	ldr	r2, [pc, #68]	@ (8007314 <xTimerCreateTimerTask+0x90>)
 80072d0:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80072d2:	4b10      	ldr	r3, [pc, #64]	@ (8007314 <xTimerCreateTimerTask+0x90>)
 80072d4:	681b      	ldr	r3, [r3, #0]
 80072d6:	2b00      	cmp	r3, #0
 80072d8:	d001      	beq.n	80072de <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80072da:	2301      	movs	r3, #1
 80072dc:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80072de:	697b      	ldr	r3, [r7, #20]
 80072e0:	2b00      	cmp	r3, #0
 80072e2:	d10b      	bne.n	80072fc <xTimerCreateTimerTask+0x78>
	__asm volatile
 80072e4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e8:	f383 8811 	msr	BASEPRI, r3
 80072ec:	f3bf 8f6f 	isb	sy
 80072f0:	f3bf 8f4f 	dsb	sy
 80072f4:	613b      	str	r3, [r7, #16]
}
 80072f6:	bf00      	nop
 80072f8:	bf00      	nop
 80072fa:	e7fd      	b.n	80072f8 <xTimerCreateTimerTask+0x74>
	return xReturn;
 80072fc:	697b      	ldr	r3, [r7, #20]
}
 80072fe:	4618      	mov	r0, r3
 8007300:	3718      	adds	r7, #24
 8007302:	46bd      	mov	sp, r7
 8007304:	bd80      	pop	{r7, pc}
 8007306:	bf00      	nop
 8007308:	20000e64 	.word	0x20000e64
 800730c:	0800bc5c 	.word	0x0800bc5c
 8007310:	08007451 	.word	0x08007451
 8007314:	20000e68 	.word	0x20000e68

08007318 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007318:	b580      	push	{r7, lr}
 800731a:	b08a      	sub	sp, #40	@ 0x28
 800731c:	af00      	add	r7, sp, #0
 800731e:	60f8      	str	r0, [r7, #12]
 8007320:	60b9      	str	r1, [r7, #8]
 8007322:	607a      	str	r2, [r7, #4]
 8007324:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007326:	2300      	movs	r3, #0
 8007328:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800732a:	68fb      	ldr	r3, [r7, #12]
 800732c:	2b00      	cmp	r3, #0
 800732e:	d10b      	bne.n	8007348 <xTimerGenericCommand+0x30>
	__asm volatile
 8007330:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007334:	f383 8811 	msr	BASEPRI, r3
 8007338:	f3bf 8f6f 	isb	sy
 800733c:	f3bf 8f4f 	dsb	sy
 8007340:	623b      	str	r3, [r7, #32]
}
 8007342:	bf00      	nop
 8007344:	bf00      	nop
 8007346:	e7fd      	b.n	8007344 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8007348:	4b19      	ldr	r3, [pc, #100]	@ (80073b0 <xTimerGenericCommand+0x98>)
 800734a:	681b      	ldr	r3, [r3, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d02a      	beq.n	80073a6 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007350:	68bb      	ldr	r3, [r7, #8]
 8007352:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800735c:	68bb      	ldr	r3, [r7, #8]
 800735e:	2b05      	cmp	r3, #5
 8007360:	dc18      	bgt.n	8007394 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007362:	f7ff fead 	bl	80070c0 <xTaskGetSchedulerState>
 8007366:	4603      	mov	r3, r0
 8007368:	2b02      	cmp	r3, #2
 800736a:	d109      	bne.n	8007380 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800736c:	4b10      	ldr	r3, [pc, #64]	@ (80073b0 <xTimerGenericCommand+0x98>)
 800736e:	6818      	ldr	r0, [r3, #0]
 8007370:	f107 0110 	add.w	r1, r7, #16
 8007374:	2300      	movs	r3, #0
 8007376:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8007378:	f7fe fbd8 	bl	8005b2c <xQueueGenericSend>
 800737c:	6278      	str	r0, [r7, #36]	@ 0x24
 800737e:	e012      	b.n	80073a6 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007380:	4b0b      	ldr	r3, [pc, #44]	@ (80073b0 <xTimerGenericCommand+0x98>)
 8007382:	6818      	ldr	r0, [r3, #0]
 8007384:	f107 0110 	add.w	r1, r7, #16
 8007388:	2300      	movs	r3, #0
 800738a:	2200      	movs	r2, #0
 800738c:	f7fe fbce 	bl	8005b2c <xQueueGenericSend>
 8007390:	6278      	str	r0, [r7, #36]	@ 0x24
 8007392:	e008      	b.n	80073a6 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007394:	4b06      	ldr	r3, [pc, #24]	@ (80073b0 <xTimerGenericCommand+0x98>)
 8007396:	6818      	ldr	r0, [r3, #0]
 8007398:	f107 0110 	add.w	r1, r7, #16
 800739c:	2300      	movs	r3, #0
 800739e:	683a      	ldr	r2, [r7, #0]
 80073a0:	f7fe fcc6 	bl	8005d30 <xQueueGenericSendFromISR>
 80073a4:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80073a6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80073a8:	4618      	mov	r0, r3
 80073aa:	3728      	adds	r7, #40	@ 0x28
 80073ac:	46bd      	mov	sp, r7
 80073ae:	bd80      	pop	{r7, pc}
 80073b0:	20000e64 	.word	0x20000e64

080073b4 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80073b4:	b580      	push	{r7, lr}
 80073b6:	b088      	sub	sp, #32
 80073b8:	af02      	add	r7, sp, #8
 80073ba:	6078      	str	r0, [r7, #4]
 80073bc:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80073be:	4b23      	ldr	r3, [pc, #140]	@ (800744c <prvProcessExpiredTimer+0x98>)
 80073c0:	681b      	ldr	r3, [r3, #0]
 80073c2:	68db      	ldr	r3, [r3, #12]
 80073c4:	68db      	ldr	r3, [r3, #12]
 80073c6:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80073c8:	697b      	ldr	r3, [r7, #20]
 80073ca:	3304      	adds	r3, #4
 80073cc:	4618      	mov	r0, r3
 80073ce:	f7fe fa3d 	bl	800584c <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80073d2:	697b      	ldr	r3, [r7, #20]
 80073d4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80073d8:	f003 0304 	and.w	r3, r3, #4
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d023      	beq.n	8007428 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80073e0:	697b      	ldr	r3, [r7, #20]
 80073e2:	699a      	ldr	r2, [r3, #24]
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	18d1      	adds	r1, r2, r3
 80073e8:	687b      	ldr	r3, [r7, #4]
 80073ea:	683a      	ldr	r2, [r7, #0]
 80073ec:	6978      	ldr	r0, [r7, #20]
 80073ee:	f000 f8d5 	bl	800759c <prvInsertTimerInActiveList>
 80073f2:	4603      	mov	r3, r0
 80073f4:	2b00      	cmp	r3, #0
 80073f6:	d020      	beq.n	800743a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80073f8:	2300      	movs	r3, #0
 80073fa:	9300      	str	r3, [sp, #0]
 80073fc:	2300      	movs	r3, #0
 80073fe:	687a      	ldr	r2, [r7, #4]
 8007400:	2100      	movs	r1, #0
 8007402:	6978      	ldr	r0, [r7, #20]
 8007404:	f7ff ff88 	bl	8007318 <xTimerGenericCommand>
 8007408:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800740a:	693b      	ldr	r3, [r7, #16]
 800740c:	2b00      	cmp	r3, #0
 800740e:	d114      	bne.n	800743a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	60fb      	str	r3, [r7, #12]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007428:	697b      	ldr	r3, [r7, #20]
 800742a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800742e:	f023 0301 	bic.w	r3, r3, #1
 8007432:	b2da      	uxtb	r2, r3
 8007434:	697b      	ldr	r3, [r7, #20]
 8007436:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800743a:	697b      	ldr	r3, [r7, #20]
 800743c:	6a1b      	ldr	r3, [r3, #32]
 800743e:	6978      	ldr	r0, [r7, #20]
 8007440:	4798      	blx	r3
}
 8007442:	bf00      	nop
 8007444:	3718      	adds	r7, #24
 8007446:	46bd      	mov	sp, r7
 8007448:	bd80      	pop	{r7, pc}
 800744a:	bf00      	nop
 800744c:	20000e5c 	.word	0x20000e5c

08007450 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007450:	b580      	push	{r7, lr}
 8007452:	b084      	sub	sp, #16
 8007454:	af00      	add	r7, sp, #0
 8007456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007458:	f107 0308 	add.w	r3, r7, #8
 800745c:	4618      	mov	r0, r3
 800745e:	f000 f859 	bl	8007514 <prvGetNextExpireTime>
 8007462:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	4619      	mov	r1, r3
 8007468:	68f8      	ldr	r0, [r7, #12]
 800746a:	f000 f805 	bl	8007478 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800746e:	f000 f8d7 	bl	8007620 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007472:	bf00      	nop
 8007474:	e7f0      	b.n	8007458 <prvTimerTask+0x8>
	...

08007478 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8007478:	b580      	push	{r7, lr}
 800747a:	b084      	sub	sp, #16
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
 8007480:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007482:	f7ff fa29 	bl	80068d8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007486:	f107 0308 	add.w	r3, r7, #8
 800748a:	4618      	mov	r0, r3
 800748c:	f000 f866 	bl	800755c <prvSampleTimeNow>
 8007490:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007492:	68bb      	ldr	r3, [r7, #8]
 8007494:	2b00      	cmp	r3, #0
 8007496:	d130      	bne.n	80074fa <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d10a      	bne.n	80074b4 <prvProcessTimerOrBlockTask+0x3c>
 800749e:	687a      	ldr	r2, [r7, #4]
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	429a      	cmp	r2, r3
 80074a4:	d806      	bhi.n	80074b4 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80074a6:	f7ff fa25 	bl	80068f4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80074aa:	68f9      	ldr	r1, [r7, #12]
 80074ac:	6878      	ldr	r0, [r7, #4]
 80074ae:	f7ff ff81 	bl	80073b4 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80074b2:	e024      	b.n	80074fe <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	2b00      	cmp	r3, #0
 80074b8:	d008      	beq.n	80074cc <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80074ba:	4b13      	ldr	r3, [pc, #76]	@ (8007508 <prvProcessTimerOrBlockTask+0x90>)
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	2b00      	cmp	r3, #0
 80074c2:	d101      	bne.n	80074c8 <prvProcessTimerOrBlockTask+0x50>
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <prvProcessTimerOrBlockTask+0x52>
 80074c8:	2300      	movs	r3, #0
 80074ca:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80074cc:	4b0f      	ldr	r3, [pc, #60]	@ (800750c <prvProcessTimerOrBlockTask+0x94>)
 80074ce:	6818      	ldr	r0, [r3, #0]
 80074d0:	687a      	ldr	r2, [r7, #4]
 80074d2:	68fb      	ldr	r3, [r7, #12]
 80074d4:	1ad3      	subs	r3, r2, r3
 80074d6:	683a      	ldr	r2, [r7, #0]
 80074d8:	4619      	mov	r1, r3
 80074da:	f7fe ff65 	bl	80063a8 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80074de:	f7ff fa09 	bl	80068f4 <xTaskResumeAll>
 80074e2:	4603      	mov	r3, r0
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10a      	bne.n	80074fe <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80074e8:	4b09      	ldr	r3, [pc, #36]	@ (8007510 <prvProcessTimerOrBlockTask+0x98>)
 80074ea:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80074ee:	601a      	str	r2, [r3, #0]
 80074f0:	f3bf 8f4f 	dsb	sy
 80074f4:	f3bf 8f6f 	isb	sy
}
 80074f8:	e001      	b.n	80074fe <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80074fa:	f7ff f9fb 	bl	80068f4 <xTaskResumeAll>
}
 80074fe:	bf00      	nop
 8007500:	3710      	adds	r7, #16
 8007502:	46bd      	mov	sp, r7
 8007504:	bd80      	pop	{r7, pc}
 8007506:	bf00      	nop
 8007508:	20000e60 	.word	0x20000e60
 800750c:	20000e64 	.word	0x20000e64
 8007510:	e000ed04 	.word	0xe000ed04

08007514 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007514:	b480      	push	{r7}
 8007516:	b085      	sub	sp, #20
 8007518:	af00      	add	r7, sp, #0
 800751a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800751c:	4b0e      	ldr	r3, [pc, #56]	@ (8007558 <prvGetNextExpireTime+0x44>)
 800751e:	681b      	ldr	r3, [r3, #0]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2b00      	cmp	r3, #0
 8007524:	d101      	bne.n	800752a <prvGetNextExpireTime+0x16>
 8007526:	2201      	movs	r2, #1
 8007528:	e000      	b.n	800752c <prvGetNextExpireTime+0x18>
 800752a:	2200      	movs	r2, #0
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007530:	687b      	ldr	r3, [r7, #4]
 8007532:	681b      	ldr	r3, [r3, #0]
 8007534:	2b00      	cmp	r3, #0
 8007536:	d105      	bne.n	8007544 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007538:	4b07      	ldr	r3, [pc, #28]	@ (8007558 <prvGetNextExpireTime+0x44>)
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	68db      	ldr	r3, [r3, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	60fb      	str	r3, [r7, #12]
 8007542:	e001      	b.n	8007548 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007544:	2300      	movs	r3, #0
 8007546:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8007548:	68fb      	ldr	r3, [r7, #12]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3714      	adds	r7, #20
 800754e:	46bd      	mov	sp, r7
 8007550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007554:	4770      	bx	lr
 8007556:	bf00      	nop
 8007558:	20000e5c 	.word	0x20000e5c

0800755c <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800755c:	b580      	push	{r7, lr}
 800755e:	b084      	sub	sp, #16
 8007560:	af00      	add	r7, sp, #0
 8007562:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007564:	f7ff fa64 	bl	8006a30 <xTaskGetTickCount>
 8007568:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800756a:	4b0b      	ldr	r3, [pc, #44]	@ (8007598 <prvSampleTimeNow+0x3c>)
 800756c:	681b      	ldr	r3, [r3, #0]
 800756e:	68fa      	ldr	r2, [r7, #12]
 8007570:	429a      	cmp	r2, r3
 8007572:	d205      	bcs.n	8007580 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007574:	f000 f93a 	bl	80077ec <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	2201      	movs	r2, #1
 800757c:	601a      	str	r2, [r3, #0]
 800757e:	e002      	b.n	8007586 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007580:	687b      	ldr	r3, [r7, #4]
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8007586:	4a04      	ldr	r2, [pc, #16]	@ (8007598 <prvSampleTimeNow+0x3c>)
 8007588:	68fb      	ldr	r3, [r7, #12]
 800758a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800758c:	68fb      	ldr	r3, [r7, #12]
}
 800758e:	4618      	mov	r0, r3
 8007590:	3710      	adds	r7, #16
 8007592:	46bd      	mov	sp, r7
 8007594:	bd80      	pop	{r7, pc}
 8007596:	bf00      	nop
 8007598:	20000e6c 	.word	0x20000e6c

0800759c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800759c:	b580      	push	{r7, lr}
 800759e:	b086      	sub	sp, #24
 80075a0:	af00      	add	r7, sp, #0
 80075a2:	60f8      	str	r0, [r7, #12]
 80075a4:	60b9      	str	r1, [r7, #8]
 80075a6:	607a      	str	r2, [r7, #4]
 80075a8:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80075aa:	2300      	movs	r3, #0
 80075ac:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80075ae:	68fb      	ldr	r3, [r7, #12]
 80075b0:	68ba      	ldr	r2, [r7, #8]
 80075b2:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	68fa      	ldr	r2, [r7, #12]
 80075b8:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80075ba:	68ba      	ldr	r2, [r7, #8]
 80075bc:	687b      	ldr	r3, [r7, #4]
 80075be:	429a      	cmp	r2, r3
 80075c0:	d812      	bhi.n	80075e8 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80075c2:	687a      	ldr	r2, [r7, #4]
 80075c4:	683b      	ldr	r3, [r7, #0]
 80075c6:	1ad2      	subs	r2, r2, r3
 80075c8:	68fb      	ldr	r3, [r7, #12]
 80075ca:	699b      	ldr	r3, [r3, #24]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d302      	bcc.n	80075d6 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80075d0:	2301      	movs	r3, #1
 80075d2:	617b      	str	r3, [r7, #20]
 80075d4:	e01b      	b.n	800760e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80075d6:	4b10      	ldr	r3, [pc, #64]	@ (8007618 <prvInsertTimerInActiveList+0x7c>)
 80075d8:	681a      	ldr	r2, [r3, #0]
 80075da:	68fb      	ldr	r3, [r7, #12]
 80075dc:	3304      	adds	r3, #4
 80075de:	4619      	mov	r1, r3
 80075e0:	4610      	mov	r0, r2
 80075e2:	f7fe f8fa 	bl	80057da <vListInsert>
 80075e6:	e012      	b.n	800760e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80075e8:	687a      	ldr	r2, [r7, #4]
 80075ea:	683b      	ldr	r3, [r7, #0]
 80075ec:	429a      	cmp	r2, r3
 80075ee:	d206      	bcs.n	80075fe <prvInsertTimerInActiveList+0x62>
 80075f0:	68ba      	ldr	r2, [r7, #8]
 80075f2:	683b      	ldr	r3, [r7, #0]
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d302      	bcc.n	80075fe <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80075f8:	2301      	movs	r3, #1
 80075fa:	617b      	str	r3, [r7, #20]
 80075fc:	e007      	b.n	800760e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80075fe:	4b07      	ldr	r3, [pc, #28]	@ (800761c <prvInsertTimerInActiveList+0x80>)
 8007600:	681a      	ldr	r2, [r3, #0]
 8007602:	68fb      	ldr	r3, [r7, #12]
 8007604:	3304      	adds	r3, #4
 8007606:	4619      	mov	r1, r3
 8007608:	4610      	mov	r0, r2
 800760a:	f7fe f8e6 	bl	80057da <vListInsert>
		}
	}

	return xProcessTimerNow;
 800760e:	697b      	ldr	r3, [r7, #20]
}
 8007610:	4618      	mov	r0, r3
 8007612:	3718      	adds	r7, #24
 8007614:	46bd      	mov	sp, r7
 8007616:	bd80      	pop	{r7, pc}
 8007618:	20000e60 	.word	0x20000e60
 800761c:	20000e5c 	.word	0x20000e5c

08007620 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007620:	b580      	push	{r7, lr}
 8007622:	b08e      	sub	sp, #56	@ 0x38
 8007624:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007626:	e0ce      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007628:	687b      	ldr	r3, [r7, #4]
 800762a:	2b00      	cmp	r3, #0
 800762c:	da19      	bge.n	8007662 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800762e:	1d3b      	adds	r3, r7, #4
 8007630:	3304      	adds	r3, #4
 8007632:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007634:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007636:	2b00      	cmp	r3, #0
 8007638:	d10b      	bne.n	8007652 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800763a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800763e:	f383 8811 	msr	BASEPRI, r3
 8007642:	f3bf 8f6f 	isb	sy
 8007646:	f3bf 8f4f 	dsb	sy
 800764a:	61fb      	str	r3, [r7, #28]
}
 800764c:	bf00      	nop
 800764e:	bf00      	nop
 8007650:	e7fd      	b.n	800764e <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007652:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007654:	681b      	ldr	r3, [r3, #0]
 8007656:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007658:	6850      	ldr	r0, [r2, #4]
 800765a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800765c:	6892      	ldr	r2, [r2, #8]
 800765e:	4611      	mov	r1, r2
 8007660:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	2b00      	cmp	r3, #0
 8007666:	f2c0 80ae 	blt.w	80077c6 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800766e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007670:	695b      	ldr	r3, [r3, #20]
 8007672:	2b00      	cmp	r3, #0
 8007674:	d004      	beq.n	8007680 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007676:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007678:	3304      	adds	r3, #4
 800767a:	4618      	mov	r0, r3
 800767c:	f7fe f8e6 	bl	800584c <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007680:	463b      	mov	r3, r7
 8007682:	4618      	mov	r0, r3
 8007684:	f7ff ff6a 	bl	800755c <prvSampleTimeNow>
 8007688:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2b09      	cmp	r3, #9
 800768e:	f200 8097 	bhi.w	80077c0 <prvProcessReceivedCommands+0x1a0>
 8007692:	a201      	add	r2, pc, #4	@ (adr r2, 8007698 <prvProcessReceivedCommands+0x78>)
 8007694:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007698:	080076c1 	.word	0x080076c1
 800769c:	080076c1 	.word	0x080076c1
 80076a0:	080076c1 	.word	0x080076c1
 80076a4:	08007737 	.word	0x08007737
 80076a8:	0800774b 	.word	0x0800774b
 80076ac:	08007797 	.word	0x08007797
 80076b0:	080076c1 	.word	0x080076c1
 80076b4:	080076c1 	.word	0x080076c1
 80076b8:	08007737 	.word	0x08007737
 80076bc:	0800774b 	.word	0x0800774b
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80076c0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076c2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076c6:	f043 0301 	orr.w	r3, r3, #1
 80076ca:	b2da      	uxtb	r2, r3
 80076cc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ce:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80076d2:	68ba      	ldr	r2, [r7, #8]
 80076d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076d6:	699b      	ldr	r3, [r3, #24]
 80076d8:	18d1      	adds	r1, r2, r3
 80076da:	68bb      	ldr	r3, [r7, #8]
 80076dc:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80076de:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076e0:	f7ff ff5c 	bl	800759c <prvInsertTimerInActiveList>
 80076e4:	4603      	mov	r3, r0
 80076e6:	2b00      	cmp	r3, #0
 80076e8:	d06c      	beq.n	80077c4 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80076ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076ec:	6a1b      	ldr	r3, [r3, #32]
 80076ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80076f0:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80076f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80076f4:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80076f8:	f003 0304 	and.w	r3, r3, #4
 80076fc:	2b00      	cmp	r3, #0
 80076fe:	d061      	beq.n	80077c4 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007700:	68ba      	ldr	r2, [r7, #8]
 8007702:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007704:	699b      	ldr	r3, [r3, #24]
 8007706:	441a      	add	r2, r3
 8007708:	2300      	movs	r3, #0
 800770a:	9300      	str	r3, [sp, #0]
 800770c:	2300      	movs	r3, #0
 800770e:	2100      	movs	r1, #0
 8007710:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007712:	f7ff fe01 	bl	8007318 <xTimerGenericCommand>
 8007716:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007718:	6a3b      	ldr	r3, [r7, #32]
 800771a:	2b00      	cmp	r3, #0
 800771c:	d152      	bne.n	80077c4 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800771e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007722:	f383 8811 	msr	BASEPRI, r3
 8007726:	f3bf 8f6f 	isb	sy
 800772a:	f3bf 8f4f 	dsb	sy
 800772e:	61bb      	str	r3, [r7, #24]
}
 8007730:	bf00      	nop
 8007732:	bf00      	nop
 8007734:	e7fd      	b.n	8007732 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007736:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007738:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800773c:	f023 0301 	bic.w	r3, r3, #1
 8007740:	b2da      	uxtb	r2, r3
 8007742:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007744:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8007748:	e03d      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800774a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800774c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007750:	f043 0301 	orr.w	r3, r3, #1
 8007754:	b2da      	uxtb	r2, r3
 8007756:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007758:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800775c:	68ba      	ldr	r2, [r7, #8]
 800775e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007760:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007762:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007764:	699b      	ldr	r3, [r3, #24]
 8007766:	2b00      	cmp	r3, #0
 8007768:	d10b      	bne.n	8007782 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800776a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800776e:	f383 8811 	msr	BASEPRI, r3
 8007772:	f3bf 8f6f 	isb	sy
 8007776:	f3bf 8f4f 	dsb	sy
 800777a:	617b      	str	r3, [r7, #20]
}
 800777c:	bf00      	nop
 800777e:	bf00      	nop
 8007780:	e7fd      	b.n	800777e <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007782:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007784:	699a      	ldr	r2, [r3, #24]
 8007786:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007788:	18d1      	adds	r1, r2, r3
 800778a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800778c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800778e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007790:	f7ff ff04 	bl	800759c <prvInsertTimerInActiveList>
					break;
 8007794:	e017      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007798:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800779c:	f003 0302 	and.w	r3, r3, #2
 80077a0:	2b00      	cmp	r3, #0
 80077a2:	d103      	bne.n	80077ac <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80077a4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80077a6:	f000 fbe7 	bl	8007f78 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80077aa:	e00c      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80077ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ae:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80077b2:	f023 0301 	bic.w	r3, r3, #1
 80077b6:	b2da      	uxtb	r2, r3
 80077b8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80077ba:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80077be:	e002      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80077c0:	bf00      	nop
 80077c2:	e000      	b.n	80077c6 <prvProcessReceivedCommands+0x1a6>
					break;
 80077c4:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80077c6:	4b08      	ldr	r3, [pc, #32]	@ (80077e8 <prvProcessReceivedCommands+0x1c8>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	1d39      	adds	r1, r7, #4
 80077cc:	2200      	movs	r2, #0
 80077ce:	4618      	mov	r0, r3
 80077d0:	f7fe fb4c 	bl	8005e6c <xQueueReceive>
 80077d4:	4603      	mov	r3, r0
 80077d6:	2b00      	cmp	r3, #0
 80077d8:	f47f af26 	bne.w	8007628 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80077dc:	bf00      	nop
 80077de:	bf00      	nop
 80077e0:	3730      	adds	r7, #48	@ 0x30
 80077e2:	46bd      	mov	sp, r7
 80077e4:	bd80      	pop	{r7, pc}
 80077e6:	bf00      	nop
 80077e8:	20000e64 	.word	0x20000e64

080077ec <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80077ec:	b580      	push	{r7, lr}
 80077ee:	b088      	sub	sp, #32
 80077f0:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80077f2:	e049      	b.n	8007888 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80077f4:	4b2e      	ldr	r3, [pc, #184]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	68db      	ldr	r3, [r3, #12]
 80077fa:	681b      	ldr	r3, [r3, #0]
 80077fc:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80077fe:	4b2c      	ldr	r3, [pc, #176]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 8007800:	681b      	ldr	r3, [r3, #0]
 8007802:	68db      	ldr	r3, [r3, #12]
 8007804:	68db      	ldr	r3, [r3, #12]
 8007806:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007808:	68fb      	ldr	r3, [r7, #12]
 800780a:	3304      	adds	r3, #4
 800780c:	4618      	mov	r0, r3
 800780e:	f7fe f81d 	bl	800584c <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007812:	68fb      	ldr	r3, [r7, #12]
 8007814:	6a1b      	ldr	r3, [r3, #32]
 8007816:	68f8      	ldr	r0, [r7, #12]
 8007818:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800781a:	68fb      	ldr	r3, [r7, #12]
 800781c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007820:	f003 0304 	and.w	r3, r3, #4
 8007824:	2b00      	cmp	r3, #0
 8007826:	d02f      	beq.n	8007888 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007828:	68fb      	ldr	r3, [r7, #12]
 800782a:	699b      	ldr	r3, [r3, #24]
 800782c:	693a      	ldr	r2, [r7, #16]
 800782e:	4413      	add	r3, r2
 8007830:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007832:	68ba      	ldr	r2, [r7, #8]
 8007834:	693b      	ldr	r3, [r7, #16]
 8007836:	429a      	cmp	r2, r3
 8007838:	d90e      	bls.n	8007858 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	68ba      	ldr	r2, [r7, #8]
 800783e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007840:	68fb      	ldr	r3, [r7, #12]
 8007842:	68fa      	ldr	r2, [r7, #12]
 8007844:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007846:	4b1a      	ldr	r3, [pc, #104]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	3304      	adds	r3, #4
 800784e:	4619      	mov	r1, r3
 8007850:	4610      	mov	r0, r2
 8007852:	f7fd ffc2 	bl	80057da <vListInsert>
 8007856:	e017      	b.n	8007888 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007858:	2300      	movs	r3, #0
 800785a:	9300      	str	r3, [sp, #0]
 800785c:	2300      	movs	r3, #0
 800785e:	693a      	ldr	r2, [r7, #16]
 8007860:	2100      	movs	r1, #0
 8007862:	68f8      	ldr	r0, [r7, #12]
 8007864:	f7ff fd58 	bl	8007318 <xTimerGenericCommand>
 8007868:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b00      	cmp	r3, #0
 800786e:	d10b      	bne.n	8007888 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007870:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007874:	f383 8811 	msr	BASEPRI, r3
 8007878:	f3bf 8f6f 	isb	sy
 800787c:	f3bf 8f4f 	dsb	sy
 8007880:	603b      	str	r3, [r7, #0]
}
 8007882:	bf00      	nop
 8007884:	bf00      	nop
 8007886:	e7fd      	b.n	8007884 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007888:	4b09      	ldr	r3, [pc, #36]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 800788a:	681b      	ldr	r3, [r3, #0]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	2b00      	cmp	r3, #0
 8007890:	d1b0      	bne.n	80077f4 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007892:	4b07      	ldr	r3, [pc, #28]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 8007894:	681b      	ldr	r3, [r3, #0]
 8007896:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007898:	4b06      	ldr	r3, [pc, #24]	@ (80078b4 <prvSwitchTimerLists+0xc8>)
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	4a04      	ldr	r2, [pc, #16]	@ (80078b0 <prvSwitchTimerLists+0xc4>)
 800789e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 80078a0:	4a04      	ldr	r2, [pc, #16]	@ (80078b4 <prvSwitchTimerLists+0xc8>)
 80078a2:	697b      	ldr	r3, [r7, #20]
 80078a4:	6013      	str	r3, [r2, #0]
}
 80078a6:	bf00      	nop
 80078a8:	3718      	adds	r7, #24
 80078aa:	46bd      	mov	sp, r7
 80078ac:	bd80      	pop	{r7, pc}
 80078ae:	bf00      	nop
 80078b0:	20000e5c 	.word	0x20000e5c
 80078b4:	20000e60 	.word	0x20000e60

080078b8 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 80078be:	f000 f96b 	bl	8007b98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 80078c2:	4b15      	ldr	r3, [pc, #84]	@ (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078c4:	681b      	ldr	r3, [r3, #0]
 80078c6:	2b00      	cmp	r3, #0
 80078c8:	d120      	bne.n	800790c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 80078ca:	4814      	ldr	r0, [pc, #80]	@ (800791c <prvCheckForValidListAndQueue+0x64>)
 80078cc:	f7fd ff34 	bl	8005738 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 80078d0:	4813      	ldr	r0, [pc, #76]	@ (8007920 <prvCheckForValidListAndQueue+0x68>)
 80078d2:	f7fd ff31 	bl	8005738 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 80078d6:	4b13      	ldr	r3, [pc, #76]	@ (8007924 <prvCheckForValidListAndQueue+0x6c>)
 80078d8:	4a10      	ldr	r2, [pc, #64]	@ (800791c <prvCheckForValidListAndQueue+0x64>)
 80078da:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 80078dc:	4b12      	ldr	r3, [pc, #72]	@ (8007928 <prvCheckForValidListAndQueue+0x70>)
 80078de:	4a10      	ldr	r2, [pc, #64]	@ (8007920 <prvCheckForValidListAndQueue+0x68>)
 80078e0:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 80078e2:	2300      	movs	r3, #0
 80078e4:	9300      	str	r3, [sp, #0]
 80078e6:	4b11      	ldr	r3, [pc, #68]	@ (800792c <prvCheckForValidListAndQueue+0x74>)
 80078e8:	4a11      	ldr	r2, [pc, #68]	@ (8007930 <prvCheckForValidListAndQueue+0x78>)
 80078ea:	2110      	movs	r1, #16
 80078ec:	200a      	movs	r0, #10
 80078ee:	f7fe f841 	bl	8005974 <xQueueGenericCreateStatic>
 80078f2:	4603      	mov	r3, r0
 80078f4:	4a08      	ldr	r2, [pc, #32]	@ (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078f6:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 80078f8:	4b07      	ldr	r3, [pc, #28]	@ (8007918 <prvCheckForValidListAndQueue+0x60>)
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	2b00      	cmp	r3, #0
 80078fe:	d005      	beq.n	800790c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007900:	4b05      	ldr	r3, [pc, #20]	@ (8007918 <prvCheckForValidListAndQueue+0x60>)
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	490b      	ldr	r1, [pc, #44]	@ (8007934 <prvCheckForValidListAndQueue+0x7c>)
 8007906:	4618      	mov	r0, r3
 8007908:	f7fe fd24 	bl	8006354 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800790c:	f000 f976 	bl	8007bfc <vPortExitCritical>
}
 8007910:	bf00      	nop
 8007912:	46bd      	mov	sp, r7
 8007914:	bd80      	pop	{r7, pc}
 8007916:	bf00      	nop
 8007918:	20000e64 	.word	0x20000e64
 800791c:	20000e34 	.word	0x20000e34
 8007920:	20000e48 	.word	0x20000e48
 8007924:	20000e5c 	.word	0x20000e5c
 8007928:	20000e60 	.word	0x20000e60
 800792c:	20000f10 	.word	0x20000f10
 8007930:	20000e70 	.word	0x20000e70
 8007934:	0800bc64 	.word	0x0800bc64

08007938 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	60f8      	str	r0, [r7, #12]
 8007940:	60b9      	str	r1, [r7, #8]
 8007942:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007944:	68fb      	ldr	r3, [r7, #12]
 8007946:	3b04      	subs	r3, #4
 8007948:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007950:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007952:	68fb      	ldr	r3, [r7, #12]
 8007954:	3b04      	subs	r3, #4
 8007956:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007958:	68bb      	ldr	r3, [r7, #8]
 800795a:	f023 0201 	bic.w	r2, r3, #1
 800795e:	68fb      	ldr	r3, [r7, #12]
 8007960:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007962:	68fb      	ldr	r3, [r7, #12]
 8007964:	3b04      	subs	r3, #4
 8007966:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007968:	4a0c      	ldr	r2, [pc, #48]	@ (800799c <pxPortInitialiseStack+0x64>)
 800796a:	68fb      	ldr	r3, [r7, #12]
 800796c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	3b14      	subs	r3, #20
 8007972:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007974:	687a      	ldr	r2, [r7, #4]
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	3b04      	subs	r3, #4
 800797e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	f06f 0202 	mvn.w	r2, #2
 8007986:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	3b20      	subs	r3, #32
 800798c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800798e:	68fb      	ldr	r3, [r7, #12]
}
 8007990:	4618      	mov	r0, r3
 8007992:	3714      	adds	r7, #20
 8007994:	46bd      	mov	sp, r7
 8007996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800799a:	4770      	bx	lr
 800799c:	080079a1 	.word	0x080079a1

080079a0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80079a0:	b480      	push	{r7}
 80079a2:	b085      	sub	sp, #20
 80079a4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80079a6:	2300      	movs	r3, #0
 80079a8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80079aa:	4b13      	ldr	r3, [pc, #76]	@ (80079f8 <prvTaskExitError+0x58>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	f1b3 3fff 	cmp.w	r3, #4294967295
 80079b2:	d00b      	beq.n	80079cc <prvTaskExitError+0x2c>
	__asm volatile
 80079b4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079b8:	f383 8811 	msr	BASEPRI, r3
 80079bc:	f3bf 8f6f 	isb	sy
 80079c0:	f3bf 8f4f 	dsb	sy
 80079c4:	60fb      	str	r3, [r7, #12]
}
 80079c6:	bf00      	nop
 80079c8:	bf00      	nop
 80079ca:	e7fd      	b.n	80079c8 <prvTaskExitError+0x28>
	__asm volatile
 80079cc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80079d0:	f383 8811 	msr	BASEPRI, r3
 80079d4:	f3bf 8f6f 	isb	sy
 80079d8:	f3bf 8f4f 	dsb	sy
 80079dc:	60bb      	str	r3, [r7, #8]
}
 80079de:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80079e0:	bf00      	nop
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2b00      	cmp	r3, #0
 80079e6:	d0fc      	beq.n	80079e2 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80079e8:	bf00      	nop
 80079ea:	bf00      	nop
 80079ec:	3714      	adds	r7, #20
 80079ee:	46bd      	mov	sp, r7
 80079f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f4:	4770      	bx	lr
 80079f6:	bf00      	nop
 80079f8:	2000000c 	.word	0x2000000c
 80079fc:	00000000 	.word	0x00000000

08007a00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007a00:	4b07      	ldr	r3, [pc, #28]	@ (8007a20 <pxCurrentTCBConst2>)
 8007a02:	6819      	ldr	r1, [r3, #0]
 8007a04:	6808      	ldr	r0, [r1, #0]
 8007a06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007a0a:	f380 8809 	msr	PSP, r0
 8007a0e:	f3bf 8f6f 	isb	sy
 8007a12:	f04f 0000 	mov.w	r0, #0
 8007a16:	f380 8811 	msr	BASEPRI, r0
 8007a1a:	4770      	bx	lr
 8007a1c:	f3af 8000 	nop.w

08007a20 <pxCurrentTCBConst2>:
 8007a20:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007a24:	bf00      	nop
 8007a26:	bf00      	nop

08007a28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007a28:	4808      	ldr	r0, [pc, #32]	@ (8007a4c <prvPortStartFirstTask+0x24>)
 8007a2a:	6800      	ldr	r0, [r0, #0]
 8007a2c:	6800      	ldr	r0, [r0, #0]
 8007a2e:	f380 8808 	msr	MSP, r0
 8007a32:	f04f 0000 	mov.w	r0, #0
 8007a36:	f380 8814 	msr	CONTROL, r0
 8007a3a:	b662      	cpsie	i
 8007a3c:	b661      	cpsie	f
 8007a3e:	f3bf 8f4f 	dsb	sy
 8007a42:	f3bf 8f6f 	isb	sy
 8007a46:	df00      	svc	0
 8007a48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007a4a:	bf00      	nop
 8007a4c:	e000ed08 	.word	0xe000ed08

08007a50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007a50:	b580      	push	{r7, lr}
 8007a52:	b086      	sub	sp, #24
 8007a54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007a56:	4b47      	ldr	r3, [pc, #284]	@ (8007b74 <xPortStartScheduler+0x124>)
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	4a47      	ldr	r2, [pc, #284]	@ (8007b78 <xPortStartScheduler+0x128>)
 8007a5c:	4293      	cmp	r3, r2
 8007a5e:	d10b      	bne.n	8007a78 <xPortStartScheduler+0x28>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	60fb      	str	r3, [r7, #12]
}
 8007a72:	bf00      	nop
 8007a74:	bf00      	nop
 8007a76:	e7fd      	b.n	8007a74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007a78:	4b3e      	ldr	r3, [pc, #248]	@ (8007b74 <xPortStartScheduler+0x124>)
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	4a3f      	ldr	r2, [pc, #252]	@ (8007b7c <xPortStartScheduler+0x12c>)
 8007a7e:	4293      	cmp	r3, r2
 8007a80:	d10b      	bne.n	8007a9a <xPortStartScheduler+0x4a>
	__asm volatile
 8007a82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a86:	f383 8811 	msr	BASEPRI, r3
 8007a8a:	f3bf 8f6f 	isb	sy
 8007a8e:	f3bf 8f4f 	dsb	sy
 8007a92:	613b      	str	r3, [r7, #16]
}
 8007a94:	bf00      	nop
 8007a96:	bf00      	nop
 8007a98:	e7fd      	b.n	8007a96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007a9a:	4b39      	ldr	r3, [pc, #228]	@ (8007b80 <xPortStartScheduler+0x130>)
 8007a9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007a9e:	697b      	ldr	r3, [r7, #20]
 8007aa0:	781b      	ldrb	r3, [r3, #0]
 8007aa2:	b2db      	uxtb	r3, r3
 8007aa4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	22ff      	movs	r2, #255	@ 0xff
 8007aaa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007aac:	697b      	ldr	r3, [r7, #20]
 8007aae:	781b      	ldrb	r3, [r3, #0]
 8007ab0:	b2db      	uxtb	r3, r3
 8007ab2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007ab4:	78fb      	ldrb	r3, [r7, #3]
 8007ab6:	b2db      	uxtb	r3, r3
 8007ab8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007abc:	b2da      	uxtb	r2, r3
 8007abe:	4b31      	ldr	r3, [pc, #196]	@ (8007b84 <xPortStartScheduler+0x134>)
 8007ac0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007ac2:	4b31      	ldr	r3, [pc, #196]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007ac4:	2207      	movs	r2, #7
 8007ac6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ac8:	e009      	b.n	8007ade <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007aca:	4b2f      	ldr	r3, [pc, #188]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	3b01      	subs	r3, #1
 8007ad0:	4a2d      	ldr	r2, [pc, #180]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007ad2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007ad4:	78fb      	ldrb	r3, [r7, #3]
 8007ad6:	b2db      	uxtb	r3, r3
 8007ad8:	005b      	lsls	r3, r3, #1
 8007ada:	b2db      	uxtb	r3, r3
 8007adc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007ade:	78fb      	ldrb	r3, [r7, #3]
 8007ae0:	b2db      	uxtb	r3, r3
 8007ae2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ae6:	2b80      	cmp	r3, #128	@ 0x80
 8007ae8:	d0ef      	beq.n	8007aca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007aea:	4b27      	ldr	r3, [pc, #156]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f1c3 0307 	rsb	r3, r3, #7
 8007af2:	2b04      	cmp	r3, #4
 8007af4:	d00b      	beq.n	8007b0e <xPortStartScheduler+0xbe>
	__asm volatile
 8007af6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007afa:	f383 8811 	msr	BASEPRI, r3
 8007afe:	f3bf 8f6f 	isb	sy
 8007b02:	f3bf 8f4f 	dsb	sy
 8007b06:	60bb      	str	r3, [r7, #8]
}
 8007b08:	bf00      	nop
 8007b0a:	bf00      	nop
 8007b0c:	e7fd      	b.n	8007b0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b10:	681b      	ldr	r3, [r3, #0]
 8007b12:	021b      	lsls	r3, r3, #8
 8007b14:	4a1c      	ldr	r2, [pc, #112]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007b18:	4b1b      	ldr	r3, [pc, #108]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007b20:	4a19      	ldr	r2, [pc, #100]	@ (8007b88 <xPortStartScheduler+0x138>)
 8007b22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	b2da      	uxtb	r2, r3
 8007b28:	697b      	ldr	r3, [r7, #20]
 8007b2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007b2c:	4b17      	ldr	r3, [pc, #92]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	4a16      	ldr	r2, [pc, #88]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007b36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007b38:	4b14      	ldr	r3, [pc, #80]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a13      	ldr	r2, [pc, #76]	@ (8007b8c <xPortStartScheduler+0x13c>)
 8007b3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007b42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007b44:	f000 f8da 	bl	8007cfc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007b48:	4b11      	ldr	r3, [pc, #68]	@ (8007b90 <xPortStartScheduler+0x140>)
 8007b4a:	2200      	movs	r2, #0
 8007b4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007b4e:	f000 f8f9 	bl	8007d44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007b52:	4b10      	ldr	r3, [pc, #64]	@ (8007b94 <xPortStartScheduler+0x144>)
 8007b54:	681b      	ldr	r3, [r3, #0]
 8007b56:	4a0f      	ldr	r2, [pc, #60]	@ (8007b94 <xPortStartScheduler+0x144>)
 8007b58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007b5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007b5e:	f7ff ff63 	bl	8007a28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007b62:	f7ff f82f 	bl	8006bc4 <vTaskSwitchContext>
	prvTaskExitError();
 8007b66:	f7ff ff1b 	bl	80079a0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007b6a:	2300      	movs	r3, #0
}
 8007b6c:	4618      	mov	r0, r3
 8007b6e:	3718      	adds	r7, #24
 8007b70:	46bd      	mov	sp, r7
 8007b72:	bd80      	pop	{r7, pc}
 8007b74:	e000ed00 	.word	0xe000ed00
 8007b78:	410fc271 	.word	0x410fc271
 8007b7c:	410fc270 	.word	0x410fc270
 8007b80:	e000e400 	.word	0xe000e400
 8007b84:	20000f60 	.word	0x20000f60
 8007b88:	20000f64 	.word	0x20000f64
 8007b8c:	e000ed20 	.word	0xe000ed20
 8007b90:	2000000c 	.word	0x2000000c
 8007b94:	e000ef34 	.word	0xe000ef34

08007b98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007b98:	b480      	push	{r7}
 8007b9a:	b083      	sub	sp, #12
 8007b9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ba2:	f383 8811 	msr	BASEPRI, r3
 8007ba6:	f3bf 8f6f 	isb	sy
 8007baa:	f3bf 8f4f 	dsb	sy
 8007bae:	607b      	str	r3, [r7, #4]
}
 8007bb0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007bb2:	4b10      	ldr	r3, [pc, #64]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bb4:	681b      	ldr	r3, [r3, #0]
 8007bb6:	3301      	adds	r3, #1
 8007bb8:	4a0e      	ldr	r2, [pc, #56]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007bbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007bf4 <vPortEnterCritical+0x5c>)
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	d110      	bne.n	8007be6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007bc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007bf8 <vPortEnterCritical+0x60>)
 8007bc6:	681b      	ldr	r3, [r3, #0]
 8007bc8:	b2db      	uxtb	r3, r3
 8007bca:	2b00      	cmp	r3, #0
 8007bcc:	d00b      	beq.n	8007be6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007bce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd2:	f383 8811 	msr	BASEPRI, r3
 8007bd6:	f3bf 8f6f 	isb	sy
 8007bda:	f3bf 8f4f 	dsb	sy
 8007bde:	603b      	str	r3, [r7, #0]
}
 8007be0:	bf00      	nop
 8007be2:	bf00      	nop
 8007be4:	e7fd      	b.n	8007be2 <vPortEnterCritical+0x4a>
	}
}
 8007be6:	bf00      	nop
 8007be8:	370c      	adds	r7, #12
 8007bea:	46bd      	mov	sp, r7
 8007bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf0:	4770      	bx	lr
 8007bf2:	bf00      	nop
 8007bf4:	2000000c 	.word	0x2000000c
 8007bf8:	e000ed04 	.word	0xe000ed04

08007bfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007bfc:	b480      	push	{r7}
 8007bfe:	b083      	sub	sp, #12
 8007c00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007c02:	4b12      	ldr	r3, [pc, #72]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c04:	681b      	ldr	r3, [r3, #0]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d10b      	bne.n	8007c22 <vPortExitCritical+0x26>
	__asm volatile
 8007c0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0e:	f383 8811 	msr	BASEPRI, r3
 8007c12:	f3bf 8f6f 	isb	sy
 8007c16:	f3bf 8f4f 	dsb	sy
 8007c1a:	607b      	str	r3, [r7, #4]
}
 8007c1c:	bf00      	nop
 8007c1e:	bf00      	nop
 8007c20:	e7fd      	b.n	8007c1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007c22:	4b0a      	ldr	r3, [pc, #40]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3b01      	subs	r3, #1
 8007c28:	4a08      	ldr	r2, [pc, #32]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007c2c:	4b07      	ldr	r3, [pc, #28]	@ (8007c4c <vPortExitCritical+0x50>)
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d105      	bne.n	8007c40 <vPortExitCritical+0x44>
 8007c34:	2300      	movs	r3, #0
 8007c36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007c38:	683b      	ldr	r3, [r7, #0]
 8007c3a:	f383 8811 	msr	BASEPRI, r3
}
 8007c3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007c40:	bf00      	nop
 8007c42:	370c      	adds	r7, #12
 8007c44:	46bd      	mov	sp, r7
 8007c46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c4a:	4770      	bx	lr
 8007c4c:	2000000c 	.word	0x2000000c

08007c50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007c50:	f3ef 8009 	mrs	r0, PSP
 8007c54:	f3bf 8f6f 	isb	sy
 8007c58:	4b15      	ldr	r3, [pc, #84]	@ (8007cb0 <pxCurrentTCBConst>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	f01e 0f10 	tst.w	lr, #16
 8007c60:	bf08      	it	eq
 8007c62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007c66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c6a:	6010      	str	r0, [r2, #0]
 8007c6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007c70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007c74:	f380 8811 	msr	BASEPRI, r0
 8007c78:	f3bf 8f4f 	dsb	sy
 8007c7c:	f3bf 8f6f 	isb	sy
 8007c80:	f7fe ffa0 	bl	8006bc4 <vTaskSwitchContext>
 8007c84:	f04f 0000 	mov.w	r0, #0
 8007c88:	f380 8811 	msr	BASEPRI, r0
 8007c8c:	bc09      	pop	{r0, r3}
 8007c8e:	6819      	ldr	r1, [r3, #0]
 8007c90:	6808      	ldr	r0, [r1, #0]
 8007c92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c96:	f01e 0f10 	tst.w	lr, #16
 8007c9a:	bf08      	it	eq
 8007c9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ca0:	f380 8809 	msr	PSP, r0
 8007ca4:	f3bf 8f6f 	isb	sy
 8007ca8:	4770      	bx	lr
 8007caa:	bf00      	nop
 8007cac:	f3af 8000 	nop.w

08007cb0 <pxCurrentTCBConst>:
 8007cb0:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007cb4:	bf00      	nop
 8007cb6:	bf00      	nop

08007cb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007cb8:	b580      	push	{r7, lr}
 8007cba:	b082      	sub	sp, #8
 8007cbc:	af00      	add	r7, sp, #0
	__asm volatile
 8007cbe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cc2:	f383 8811 	msr	BASEPRI, r3
 8007cc6:	f3bf 8f6f 	isb	sy
 8007cca:	f3bf 8f4f 	dsb	sy
 8007cce:	607b      	str	r3, [r7, #4]
}
 8007cd0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007cd2:	f7fe febd 	bl	8006a50 <xTaskIncrementTick>
 8007cd6:	4603      	mov	r3, r0
 8007cd8:	2b00      	cmp	r3, #0
 8007cda:	d003      	beq.n	8007ce4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007cdc:	4b06      	ldr	r3, [pc, #24]	@ (8007cf8 <xPortSysTickHandler+0x40>)
 8007cde:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ce2:	601a      	str	r2, [r3, #0]
 8007ce4:	2300      	movs	r3, #0
 8007ce6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ce8:	683b      	ldr	r3, [r7, #0]
 8007cea:	f383 8811 	msr	BASEPRI, r3
}
 8007cee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007cf0:	bf00      	nop
 8007cf2:	3708      	adds	r7, #8
 8007cf4:	46bd      	mov	sp, r7
 8007cf6:	bd80      	pop	{r7, pc}
 8007cf8:	e000ed04 	.word	0xe000ed04

08007cfc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007cfc:	b480      	push	{r7}
 8007cfe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007d00:	4b0b      	ldr	r3, [pc, #44]	@ (8007d30 <vPortSetupTimerInterrupt+0x34>)
 8007d02:	2200      	movs	r2, #0
 8007d04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007d06:	4b0b      	ldr	r3, [pc, #44]	@ (8007d34 <vPortSetupTimerInterrupt+0x38>)
 8007d08:	2200      	movs	r2, #0
 8007d0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007d0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007d38 <vPortSetupTimerInterrupt+0x3c>)
 8007d0e:	681b      	ldr	r3, [r3, #0]
 8007d10:	4a0a      	ldr	r2, [pc, #40]	@ (8007d3c <vPortSetupTimerInterrupt+0x40>)
 8007d12:	fba2 2303 	umull	r2, r3, r2, r3
 8007d16:	099b      	lsrs	r3, r3, #6
 8007d18:	4a09      	ldr	r2, [pc, #36]	@ (8007d40 <vPortSetupTimerInterrupt+0x44>)
 8007d1a:	3b01      	subs	r3, #1
 8007d1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007d1e:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <vPortSetupTimerInterrupt+0x34>)
 8007d20:	2207      	movs	r2, #7
 8007d22:	601a      	str	r2, [r3, #0]
}
 8007d24:	bf00      	nop
 8007d26:	46bd      	mov	sp, r7
 8007d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d2c:	4770      	bx	lr
 8007d2e:	bf00      	nop
 8007d30:	e000e010 	.word	0xe000e010
 8007d34:	e000e018 	.word	0xe000e018
 8007d38:	20000000 	.word	0x20000000
 8007d3c:	10624dd3 	.word	0x10624dd3
 8007d40:	e000e014 	.word	0xe000e014

08007d44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007d44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007d54 <vPortEnableVFP+0x10>
 8007d48:	6801      	ldr	r1, [r0, #0]
 8007d4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007d4e:	6001      	str	r1, [r0, #0]
 8007d50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007d52:	bf00      	nop
 8007d54:	e000ed88 	.word	0xe000ed88

08007d58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007d58:	b480      	push	{r7}
 8007d5a:	b085      	sub	sp, #20
 8007d5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007d5e:	f3ef 8305 	mrs	r3, IPSR
 8007d62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	2b0f      	cmp	r3, #15
 8007d68:	d915      	bls.n	8007d96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007d6a:	4a18      	ldr	r2, [pc, #96]	@ (8007dcc <vPortValidateInterruptPriority+0x74>)
 8007d6c:	68fb      	ldr	r3, [r7, #12]
 8007d6e:	4413      	add	r3, r2
 8007d70:	781b      	ldrb	r3, [r3, #0]
 8007d72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007d74:	4b16      	ldr	r3, [pc, #88]	@ (8007dd0 <vPortValidateInterruptPriority+0x78>)
 8007d76:	781b      	ldrb	r3, [r3, #0]
 8007d78:	7afa      	ldrb	r2, [r7, #11]
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d20b      	bcs.n	8007d96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007d7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d82:	f383 8811 	msr	BASEPRI, r3
 8007d86:	f3bf 8f6f 	isb	sy
 8007d8a:	f3bf 8f4f 	dsb	sy
 8007d8e:	607b      	str	r3, [r7, #4]
}
 8007d90:	bf00      	nop
 8007d92:	bf00      	nop
 8007d94:	e7fd      	b.n	8007d92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007d96:	4b0f      	ldr	r3, [pc, #60]	@ (8007dd4 <vPortValidateInterruptPriority+0x7c>)
 8007d98:	681b      	ldr	r3, [r3, #0]
 8007d9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007d9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007dd8 <vPortValidateInterruptPriority+0x80>)
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	429a      	cmp	r2, r3
 8007da4:	d90b      	bls.n	8007dbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007da6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007daa:	f383 8811 	msr	BASEPRI, r3
 8007dae:	f3bf 8f6f 	isb	sy
 8007db2:	f3bf 8f4f 	dsb	sy
 8007db6:	603b      	str	r3, [r7, #0]
}
 8007db8:	bf00      	nop
 8007dba:	bf00      	nop
 8007dbc:	e7fd      	b.n	8007dba <vPortValidateInterruptPriority+0x62>
	}
 8007dbe:	bf00      	nop
 8007dc0:	3714      	adds	r7, #20
 8007dc2:	46bd      	mov	sp, r7
 8007dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc8:	4770      	bx	lr
 8007dca:	bf00      	nop
 8007dcc:	e000e3f0 	.word	0xe000e3f0
 8007dd0:	20000f60 	.word	0x20000f60
 8007dd4:	e000ed0c 	.word	0xe000ed0c
 8007dd8:	20000f64 	.word	0x20000f64

08007ddc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007ddc:	b580      	push	{r7, lr}
 8007dde:	b08a      	sub	sp, #40	@ 0x28
 8007de0:	af00      	add	r7, sp, #0
 8007de2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007de4:	2300      	movs	r3, #0
 8007de6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007de8:	f7fe fd76 	bl	80068d8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007dec:	4b5c      	ldr	r3, [pc, #368]	@ (8007f60 <pvPortMalloc+0x184>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d101      	bne.n	8007df8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007df4:	f000 f924 	bl	8008040 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007df8:	4b5a      	ldr	r3, [pc, #360]	@ (8007f64 <pvPortMalloc+0x188>)
 8007dfa:	681a      	ldr	r2, [r3, #0]
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	4013      	ands	r3, r2
 8007e00:	2b00      	cmp	r3, #0
 8007e02:	f040 8095 	bne.w	8007f30 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007e06:	687b      	ldr	r3, [r7, #4]
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d01e      	beq.n	8007e4a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007e0c:	2208      	movs	r2, #8
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	4413      	add	r3, r2
 8007e12:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	f003 0307 	and.w	r3, r3, #7
 8007e1a:	2b00      	cmp	r3, #0
 8007e1c:	d015      	beq.n	8007e4a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	f023 0307 	bic.w	r3, r3, #7
 8007e24:	3308      	adds	r3, #8
 8007e26:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	f003 0307 	and.w	r3, r3, #7
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d00b      	beq.n	8007e4a <pvPortMalloc+0x6e>
	__asm volatile
 8007e32:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e36:	f383 8811 	msr	BASEPRI, r3
 8007e3a:	f3bf 8f6f 	isb	sy
 8007e3e:	f3bf 8f4f 	dsb	sy
 8007e42:	617b      	str	r3, [r7, #20]
}
 8007e44:	bf00      	nop
 8007e46:	bf00      	nop
 8007e48:	e7fd      	b.n	8007e46 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	2b00      	cmp	r3, #0
 8007e4e:	d06f      	beq.n	8007f30 <pvPortMalloc+0x154>
 8007e50:	4b45      	ldr	r3, [pc, #276]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	687a      	ldr	r2, [r7, #4]
 8007e56:	429a      	cmp	r2, r3
 8007e58:	d86a      	bhi.n	8007f30 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007e5a:	4b44      	ldr	r3, [pc, #272]	@ (8007f6c <pvPortMalloc+0x190>)
 8007e5c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007e5e:	4b43      	ldr	r3, [pc, #268]	@ (8007f6c <pvPortMalloc+0x190>)
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e64:	e004      	b.n	8007e70 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007e66:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e68:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007e6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007e70:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e72:	685b      	ldr	r3, [r3, #4]
 8007e74:	687a      	ldr	r2, [r7, #4]
 8007e76:	429a      	cmp	r2, r3
 8007e78:	d903      	bls.n	8007e82 <pvPortMalloc+0xa6>
 8007e7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	2b00      	cmp	r3, #0
 8007e80:	d1f1      	bne.n	8007e66 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007e82:	4b37      	ldr	r3, [pc, #220]	@ (8007f60 <pvPortMalloc+0x184>)
 8007e84:	681b      	ldr	r3, [r3, #0]
 8007e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007e88:	429a      	cmp	r2, r3
 8007e8a:	d051      	beq.n	8007f30 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007e8c:	6a3b      	ldr	r3, [r7, #32]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2208      	movs	r2, #8
 8007e92:	4413      	add	r3, r2
 8007e94:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007e96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007e98:	681a      	ldr	r2, [r3, #0]
 8007e9a:	6a3b      	ldr	r3, [r7, #32]
 8007e9c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007e9e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ea0:	685a      	ldr	r2, [r3, #4]
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	1ad2      	subs	r2, r2, r3
 8007ea6:	2308      	movs	r3, #8
 8007ea8:	005b      	lsls	r3, r3, #1
 8007eaa:	429a      	cmp	r2, r3
 8007eac:	d920      	bls.n	8007ef0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007eae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	4413      	add	r3, r2
 8007eb4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007eb6:	69bb      	ldr	r3, [r7, #24]
 8007eb8:	f003 0307 	and.w	r3, r3, #7
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d00b      	beq.n	8007ed8 <pvPortMalloc+0xfc>
	__asm volatile
 8007ec0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec4:	f383 8811 	msr	BASEPRI, r3
 8007ec8:	f3bf 8f6f 	isb	sy
 8007ecc:	f3bf 8f4f 	dsb	sy
 8007ed0:	613b      	str	r3, [r7, #16]
}
 8007ed2:	bf00      	nop
 8007ed4:	bf00      	nop
 8007ed6:	e7fd      	b.n	8007ed4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007ed8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007eda:	685a      	ldr	r2, [r3, #4]
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	1ad2      	subs	r2, r2, r3
 8007ee0:	69bb      	ldr	r3, [r7, #24]
 8007ee2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007ee4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ee6:	687a      	ldr	r2, [r7, #4]
 8007ee8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007eea:	69b8      	ldr	r0, [r7, #24]
 8007eec:	f000 f90a 	bl	8008104 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007ef0:	4b1d      	ldr	r3, [pc, #116]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007ef2:	681a      	ldr	r2, [r3, #0]
 8007ef4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ef6:	685b      	ldr	r3, [r3, #4]
 8007ef8:	1ad3      	subs	r3, r2, r3
 8007efa:	4a1b      	ldr	r2, [pc, #108]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007efc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007efe:	4b1a      	ldr	r3, [pc, #104]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007f00:	681a      	ldr	r2, [r3, #0]
 8007f02:	4b1b      	ldr	r3, [pc, #108]	@ (8007f70 <pvPortMalloc+0x194>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	429a      	cmp	r2, r3
 8007f08:	d203      	bcs.n	8007f12 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007f0a:	4b17      	ldr	r3, [pc, #92]	@ (8007f68 <pvPortMalloc+0x18c>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	4a18      	ldr	r2, [pc, #96]	@ (8007f70 <pvPortMalloc+0x194>)
 8007f10:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007f12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f14:	685a      	ldr	r2, [r3, #4]
 8007f16:	4b13      	ldr	r3, [pc, #76]	@ (8007f64 <pvPortMalloc+0x188>)
 8007f18:	681b      	ldr	r3, [r3, #0]
 8007f1a:	431a      	orrs	r2, r3
 8007f1c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f1e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007f20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007f22:	2200      	movs	r2, #0
 8007f24:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007f26:	4b13      	ldr	r3, [pc, #76]	@ (8007f74 <pvPortMalloc+0x198>)
 8007f28:	681b      	ldr	r3, [r3, #0]
 8007f2a:	3301      	adds	r3, #1
 8007f2c:	4a11      	ldr	r2, [pc, #68]	@ (8007f74 <pvPortMalloc+0x198>)
 8007f2e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007f30:	f7fe fce0 	bl	80068f4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007f34:	69fb      	ldr	r3, [r7, #28]
 8007f36:	f003 0307 	and.w	r3, r3, #7
 8007f3a:	2b00      	cmp	r3, #0
 8007f3c:	d00b      	beq.n	8007f56 <pvPortMalloc+0x17a>
	__asm volatile
 8007f3e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f42:	f383 8811 	msr	BASEPRI, r3
 8007f46:	f3bf 8f6f 	isb	sy
 8007f4a:	f3bf 8f4f 	dsb	sy
 8007f4e:	60fb      	str	r3, [r7, #12]
}
 8007f50:	bf00      	nop
 8007f52:	bf00      	nop
 8007f54:	e7fd      	b.n	8007f52 <pvPortMalloc+0x176>
	return pvReturn;
 8007f56:	69fb      	ldr	r3, [r7, #28]
}
 8007f58:	4618      	mov	r0, r3
 8007f5a:	3728      	adds	r7, #40	@ 0x28
 8007f5c:	46bd      	mov	sp, r7
 8007f5e:	bd80      	pop	{r7, pc}
 8007f60:	20004b70 	.word	0x20004b70
 8007f64:	20004b84 	.word	0x20004b84
 8007f68:	20004b74 	.word	0x20004b74
 8007f6c:	20004b68 	.word	0x20004b68
 8007f70:	20004b78 	.word	0x20004b78
 8007f74:	20004b7c 	.word	0x20004b7c

08007f78 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007f78:	b580      	push	{r7, lr}
 8007f7a:	b086      	sub	sp, #24
 8007f7c:	af00      	add	r7, sp, #0
 8007f7e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007f80:	687b      	ldr	r3, [r7, #4]
 8007f82:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007f84:	687b      	ldr	r3, [r7, #4]
 8007f86:	2b00      	cmp	r3, #0
 8007f88:	d04f      	beq.n	800802a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007f8a:	2308      	movs	r3, #8
 8007f8c:	425b      	negs	r3, r3
 8007f8e:	697a      	ldr	r2, [r7, #20]
 8007f90:	4413      	add	r3, r2
 8007f92:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007f94:	697b      	ldr	r3, [r7, #20]
 8007f96:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007f98:	693b      	ldr	r3, [r7, #16]
 8007f9a:	685a      	ldr	r2, [r3, #4]
 8007f9c:	4b25      	ldr	r3, [pc, #148]	@ (8008034 <vPortFree+0xbc>)
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	4013      	ands	r3, r2
 8007fa2:	2b00      	cmp	r3, #0
 8007fa4:	d10b      	bne.n	8007fbe <vPortFree+0x46>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	60fb      	str	r3, [r7, #12]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007fbe:	693b      	ldr	r3, [r7, #16]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	2b00      	cmp	r3, #0
 8007fc4:	d00b      	beq.n	8007fde <vPortFree+0x66>
	__asm volatile
 8007fc6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007fca:	f383 8811 	msr	BASEPRI, r3
 8007fce:	f3bf 8f6f 	isb	sy
 8007fd2:	f3bf 8f4f 	dsb	sy
 8007fd6:	60bb      	str	r3, [r7, #8]
}
 8007fd8:	bf00      	nop
 8007fda:	bf00      	nop
 8007fdc:	e7fd      	b.n	8007fda <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007fde:	693b      	ldr	r3, [r7, #16]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	4b14      	ldr	r3, [pc, #80]	@ (8008034 <vPortFree+0xbc>)
 8007fe4:	681b      	ldr	r3, [r3, #0]
 8007fe6:	4013      	ands	r3, r2
 8007fe8:	2b00      	cmp	r3, #0
 8007fea:	d01e      	beq.n	800802a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d11a      	bne.n	800802a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007ff4:	693b      	ldr	r3, [r7, #16]
 8007ff6:	685a      	ldr	r2, [r3, #4]
 8007ff8:	4b0e      	ldr	r3, [pc, #56]	@ (8008034 <vPortFree+0xbc>)
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	43db      	mvns	r3, r3
 8007ffe:	401a      	ands	r2, r3
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008004:	f7fe fc68 	bl	80068d8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008008:	693b      	ldr	r3, [r7, #16]
 800800a:	685a      	ldr	r2, [r3, #4]
 800800c:	4b0a      	ldr	r3, [pc, #40]	@ (8008038 <vPortFree+0xc0>)
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	4413      	add	r3, r2
 8008012:	4a09      	ldr	r2, [pc, #36]	@ (8008038 <vPortFree+0xc0>)
 8008014:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008016:	6938      	ldr	r0, [r7, #16]
 8008018:	f000 f874 	bl	8008104 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800801c:	4b07      	ldr	r3, [pc, #28]	@ (800803c <vPortFree+0xc4>)
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	3301      	adds	r3, #1
 8008022:	4a06      	ldr	r2, [pc, #24]	@ (800803c <vPortFree+0xc4>)
 8008024:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008026:	f7fe fc65 	bl	80068f4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800802a:	bf00      	nop
 800802c:	3718      	adds	r7, #24
 800802e:	46bd      	mov	sp, r7
 8008030:	bd80      	pop	{r7, pc}
 8008032:	bf00      	nop
 8008034:	20004b84 	.word	0x20004b84
 8008038:	20004b74 	.word	0x20004b74
 800803c:	20004b80 	.word	0x20004b80

08008040 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008040:	b480      	push	{r7}
 8008042:	b085      	sub	sp, #20
 8008044:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008046:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800804a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800804c:	4b27      	ldr	r3, [pc, #156]	@ (80080ec <prvHeapInit+0xac>)
 800804e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008050:	68fb      	ldr	r3, [r7, #12]
 8008052:	f003 0307 	and.w	r3, r3, #7
 8008056:	2b00      	cmp	r3, #0
 8008058:	d00c      	beq.n	8008074 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	3307      	adds	r3, #7
 800805e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	f023 0307 	bic.w	r3, r3, #7
 8008066:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008068:	68ba      	ldr	r2, [r7, #8]
 800806a:	68fb      	ldr	r3, [r7, #12]
 800806c:	1ad3      	subs	r3, r2, r3
 800806e:	4a1f      	ldr	r2, [pc, #124]	@ (80080ec <prvHeapInit+0xac>)
 8008070:	4413      	add	r3, r2
 8008072:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008078:	4a1d      	ldr	r2, [pc, #116]	@ (80080f0 <prvHeapInit+0xb0>)
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800807e:	4b1c      	ldr	r3, [pc, #112]	@ (80080f0 <prvHeapInit+0xb0>)
 8008080:	2200      	movs	r2, #0
 8008082:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	68ba      	ldr	r2, [r7, #8]
 8008088:	4413      	add	r3, r2
 800808a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800808c:	2208      	movs	r2, #8
 800808e:	68fb      	ldr	r3, [r7, #12]
 8008090:	1a9b      	subs	r3, r3, r2
 8008092:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	f023 0307 	bic.w	r3, r3, #7
 800809a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800809c:	68fb      	ldr	r3, [r7, #12]
 800809e:	4a15      	ldr	r2, [pc, #84]	@ (80080f4 <prvHeapInit+0xb4>)
 80080a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80080a2:	4b14      	ldr	r3, [pc, #80]	@ (80080f4 <prvHeapInit+0xb4>)
 80080a4:	681b      	ldr	r3, [r3, #0]
 80080a6:	2200      	movs	r2, #0
 80080a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80080aa:	4b12      	ldr	r3, [pc, #72]	@ (80080f4 <prvHeapInit+0xb4>)
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2200      	movs	r2, #0
 80080b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80080b6:	683b      	ldr	r3, [r7, #0]
 80080b8:	68fa      	ldr	r2, [r7, #12]
 80080ba:	1ad2      	subs	r2, r2, r3
 80080bc:	683b      	ldr	r3, [r7, #0]
 80080be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80080c0:	4b0c      	ldr	r3, [pc, #48]	@ (80080f4 <prvHeapInit+0xb4>)
 80080c2:	681a      	ldr	r2, [r3, #0]
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080c8:	683b      	ldr	r3, [r7, #0]
 80080ca:	685b      	ldr	r3, [r3, #4]
 80080cc:	4a0a      	ldr	r2, [pc, #40]	@ (80080f8 <prvHeapInit+0xb8>)
 80080ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80080d0:	683b      	ldr	r3, [r7, #0]
 80080d2:	685b      	ldr	r3, [r3, #4]
 80080d4:	4a09      	ldr	r2, [pc, #36]	@ (80080fc <prvHeapInit+0xbc>)
 80080d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80080d8:	4b09      	ldr	r3, [pc, #36]	@ (8008100 <prvHeapInit+0xc0>)
 80080da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80080de:	601a      	str	r2, [r3, #0]
}
 80080e0:	bf00      	nop
 80080e2:	3714      	adds	r7, #20
 80080e4:	46bd      	mov	sp, r7
 80080e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080ea:	4770      	bx	lr
 80080ec:	20000f68 	.word	0x20000f68
 80080f0:	20004b68 	.word	0x20004b68
 80080f4:	20004b70 	.word	0x20004b70
 80080f8:	20004b78 	.word	0x20004b78
 80080fc:	20004b74 	.word	0x20004b74
 8008100:	20004b84 	.word	0x20004b84

08008104 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008104:	b480      	push	{r7}
 8008106:	b085      	sub	sp, #20
 8008108:	af00      	add	r7, sp, #0
 800810a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800810c:	4b28      	ldr	r3, [pc, #160]	@ (80081b0 <prvInsertBlockIntoFreeList+0xac>)
 800810e:	60fb      	str	r3, [r7, #12]
 8008110:	e002      	b.n	8008118 <prvInsertBlockIntoFreeList+0x14>
 8008112:	68fb      	ldr	r3, [r7, #12]
 8008114:	681b      	ldr	r3, [r3, #0]
 8008116:	60fb      	str	r3, [r7, #12]
 8008118:	68fb      	ldr	r3, [r7, #12]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	687a      	ldr	r2, [r7, #4]
 800811e:	429a      	cmp	r2, r3
 8008120:	d8f7      	bhi.n	8008112 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008126:	68fb      	ldr	r3, [r7, #12]
 8008128:	685b      	ldr	r3, [r3, #4]
 800812a:	68ba      	ldr	r2, [r7, #8]
 800812c:	4413      	add	r3, r2
 800812e:	687a      	ldr	r2, [r7, #4]
 8008130:	429a      	cmp	r2, r3
 8008132:	d108      	bne.n	8008146 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008134:	68fb      	ldr	r3, [r7, #12]
 8008136:	685a      	ldr	r2, [r3, #4]
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	685b      	ldr	r3, [r3, #4]
 800813c:	441a      	add	r2, r3
 800813e:	68fb      	ldr	r3, [r7, #12]
 8008140:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	685b      	ldr	r3, [r3, #4]
 800814e:	68ba      	ldr	r2, [r7, #8]
 8008150:	441a      	add	r2, r3
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	429a      	cmp	r2, r3
 8008158:	d118      	bne.n	800818c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800815a:	68fb      	ldr	r3, [r7, #12]
 800815c:	681a      	ldr	r2, [r3, #0]
 800815e:	4b15      	ldr	r3, [pc, #84]	@ (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008160:	681b      	ldr	r3, [r3, #0]
 8008162:	429a      	cmp	r2, r3
 8008164:	d00d      	beq.n	8008182 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	685a      	ldr	r2, [r3, #4]
 800816a:	68fb      	ldr	r3, [r7, #12]
 800816c:	681b      	ldr	r3, [r3, #0]
 800816e:	685b      	ldr	r3, [r3, #4]
 8008170:	441a      	add	r2, r3
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008176:	68fb      	ldr	r3, [r7, #12]
 8008178:	681b      	ldr	r3, [r3, #0]
 800817a:	681a      	ldr	r2, [r3, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	601a      	str	r2, [r3, #0]
 8008180:	e008      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008182:	4b0c      	ldr	r3, [pc, #48]	@ (80081b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008184:	681a      	ldr	r2, [r3, #0]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	601a      	str	r2, [r3, #0]
 800818a:	e003      	b.n	8008194 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800818c:	68fb      	ldr	r3, [r7, #12]
 800818e:	681a      	ldr	r2, [r3, #0]
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	429a      	cmp	r2, r3
 800819a:	d002      	beq.n	80081a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800819c:	68fb      	ldr	r3, [r7, #12]
 800819e:	687a      	ldr	r2, [r7, #4]
 80081a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80081a2:	bf00      	nop
 80081a4:	3714      	adds	r7, #20
 80081a6:	46bd      	mov	sp, r7
 80081a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081ac:	4770      	bx	lr
 80081ae:	bf00      	nop
 80081b0:	20004b68 	.word	0x20004b68
 80081b4:	20004b70 	.word	0x20004b70

080081b8 <std>:
 80081b8:	2300      	movs	r3, #0
 80081ba:	b510      	push	{r4, lr}
 80081bc:	4604      	mov	r4, r0
 80081be:	e9c0 3300 	strd	r3, r3, [r0]
 80081c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80081c6:	6083      	str	r3, [r0, #8]
 80081c8:	8181      	strh	r1, [r0, #12]
 80081ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80081cc:	81c2      	strh	r2, [r0, #14]
 80081ce:	6183      	str	r3, [r0, #24]
 80081d0:	4619      	mov	r1, r3
 80081d2:	2208      	movs	r2, #8
 80081d4:	305c      	adds	r0, #92	@ 0x5c
 80081d6:	f000 fa09 	bl	80085ec <memset>
 80081da:	4b0d      	ldr	r3, [pc, #52]	@ (8008210 <std+0x58>)
 80081dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80081de:	4b0d      	ldr	r3, [pc, #52]	@ (8008214 <std+0x5c>)
 80081e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80081e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008218 <std+0x60>)
 80081e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80081e6:	4b0d      	ldr	r3, [pc, #52]	@ (800821c <std+0x64>)
 80081e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80081ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008220 <std+0x68>)
 80081ec:	6224      	str	r4, [r4, #32]
 80081ee:	429c      	cmp	r4, r3
 80081f0:	d006      	beq.n	8008200 <std+0x48>
 80081f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80081f6:	4294      	cmp	r4, r2
 80081f8:	d002      	beq.n	8008200 <std+0x48>
 80081fa:	33d0      	adds	r3, #208	@ 0xd0
 80081fc:	429c      	cmp	r4, r3
 80081fe:	d105      	bne.n	800820c <std+0x54>
 8008200:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008204:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008208:	f000 bac6 	b.w	8008798 <__retarget_lock_init_recursive>
 800820c:	bd10      	pop	{r4, pc}
 800820e:	bf00      	nop
 8008210:	0800841d 	.word	0x0800841d
 8008214:	0800843f 	.word	0x0800843f
 8008218:	08008477 	.word	0x08008477
 800821c:	0800849b 	.word	0x0800849b
 8008220:	20004b88 	.word	0x20004b88

08008224 <stdio_exit_handler>:
 8008224:	4a02      	ldr	r2, [pc, #8]	@ (8008230 <stdio_exit_handler+0xc>)
 8008226:	4903      	ldr	r1, [pc, #12]	@ (8008234 <stdio_exit_handler+0x10>)
 8008228:	4803      	ldr	r0, [pc, #12]	@ (8008238 <stdio_exit_handler+0x14>)
 800822a:	f000 b869 	b.w	8008300 <_fwalk_sglue>
 800822e:	bf00      	nop
 8008230:	20000010 	.word	0x20000010
 8008234:	08009051 	.word	0x08009051
 8008238:	20000020 	.word	0x20000020

0800823c <cleanup_stdio>:
 800823c:	6841      	ldr	r1, [r0, #4]
 800823e:	4b0c      	ldr	r3, [pc, #48]	@ (8008270 <cleanup_stdio+0x34>)
 8008240:	4299      	cmp	r1, r3
 8008242:	b510      	push	{r4, lr}
 8008244:	4604      	mov	r4, r0
 8008246:	d001      	beq.n	800824c <cleanup_stdio+0x10>
 8008248:	f000 ff02 	bl	8009050 <_fflush_r>
 800824c:	68a1      	ldr	r1, [r4, #8]
 800824e:	4b09      	ldr	r3, [pc, #36]	@ (8008274 <cleanup_stdio+0x38>)
 8008250:	4299      	cmp	r1, r3
 8008252:	d002      	beq.n	800825a <cleanup_stdio+0x1e>
 8008254:	4620      	mov	r0, r4
 8008256:	f000 fefb 	bl	8009050 <_fflush_r>
 800825a:	68e1      	ldr	r1, [r4, #12]
 800825c:	4b06      	ldr	r3, [pc, #24]	@ (8008278 <cleanup_stdio+0x3c>)
 800825e:	4299      	cmp	r1, r3
 8008260:	d004      	beq.n	800826c <cleanup_stdio+0x30>
 8008262:	4620      	mov	r0, r4
 8008264:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008268:	f000 bef2 	b.w	8009050 <_fflush_r>
 800826c:	bd10      	pop	{r4, pc}
 800826e:	bf00      	nop
 8008270:	20004b88 	.word	0x20004b88
 8008274:	20004bf0 	.word	0x20004bf0
 8008278:	20004c58 	.word	0x20004c58

0800827c <global_stdio_init.part.0>:
 800827c:	b510      	push	{r4, lr}
 800827e:	4b0b      	ldr	r3, [pc, #44]	@ (80082ac <global_stdio_init.part.0+0x30>)
 8008280:	4c0b      	ldr	r4, [pc, #44]	@ (80082b0 <global_stdio_init.part.0+0x34>)
 8008282:	4a0c      	ldr	r2, [pc, #48]	@ (80082b4 <global_stdio_init.part.0+0x38>)
 8008284:	601a      	str	r2, [r3, #0]
 8008286:	4620      	mov	r0, r4
 8008288:	2200      	movs	r2, #0
 800828a:	2104      	movs	r1, #4
 800828c:	f7ff ff94 	bl	80081b8 <std>
 8008290:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008294:	2201      	movs	r2, #1
 8008296:	2109      	movs	r1, #9
 8008298:	f7ff ff8e 	bl	80081b8 <std>
 800829c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80082a0:	2202      	movs	r2, #2
 80082a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082a6:	2112      	movs	r1, #18
 80082a8:	f7ff bf86 	b.w	80081b8 <std>
 80082ac:	20004cc0 	.word	0x20004cc0
 80082b0:	20004b88 	.word	0x20004b88
 80082b4:	08008225 	.word	0x08008225

080082b8 <__sfp_lock_acquire>:
 80082b8:	4801      	ldr	r0, [pc, #4]	@ (80082c0 <__sfp_lock_acquire+0x8>)
 80082ba:	f000 ba6e 	b.w	800879a <__retarget_lock_acquire_recursive>
 80082be:	bf00      	nop
 80082c0:	20004cc9 	.word	0x20004cc9

080082c4 <__sfp_lock_release>:
 80082c4:	4801      	ldr	r0, [pc, #4]	@ (80082cc <__sfp_lock_release+0x8>)
 80082c6:	f000 ba69 	b.w	800879c <__retarget_lock_release_recursive>
 80082ca:	bf00      	nop
 80082cc:	20004cc9 	.word	0x20004cc9

080082d0 <__sinit>:
 80082d0:	b510      	push	{r4, lr}
 80082d2:	4604      	mov	r4, r0
 80082d4:	f7ff fff0 	bl	80082b8 <__sfp_lock_acquire>
 80082d8:	6a23      	ldr	r3, [r4, #32]
 80082da:	b11b      	cbz	r3, 80082e4 <__sinit+0x14>
 80082dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80082e0:	f7ff bff0 	b.w	80082c4 <__sfp_lock_release>
 80082e4:	4b04      	ldr	r3, [pc, #16]	@ (80082f8 <__sinit+0x28>)
 80082e6:	6223      	str	r3, [r4, #32]
 80082e8:	4b04      	ldr	r3, [pc, #16]	@ (80082fc <__sinit+0x2c>)
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	2b00      	cmp	r3, #0
 80082ee:	d1f5      	bne.n	80082dc <__sinit+0xc>
 80082f0:	f7ff ffc4 	bl	800827c <global_stdio_init.part.0>
 80082f4:	e7f2      	b.n	80082dc <__sinit+0xc>
 80082f6:	bf00      	nop
 80082f8:	0800823d 	.word	0x0800823d
 80082fc:	20004cc0 	.word	0x20004cc0

08008300 <_fwalk_sglue>:
 8008300:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008304:	4607      	mov	r7, r0
 8008306:	4688      	mov	r8, r1
 8008308:	4614      	mov	r4, r2
 800830a:	2600      	movs	r6, #0
 800830c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008310:	f1b9 0901 	subs.w	r9, r9, #1
 8008314:	d505      	bpl.n	8008322 <_fwalk_sglue+0x22>
 8008316:	6824      	ldr	r4, [r4, #0]
 8008318:	2c00      	cmp	r4, #0
 800831a:	d1f7      	bne.n	800830c <_fwalk_sglue+0xc>
 800831c:	4630      	mov	r0, r6
 800831e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008322:	89ab      	ldrh	r3, [r5, #12]
 8008324:	2b01      	cmp	r3, #1
 8008326:	d907      	bls.n	8008338 <_fwalk_sglue+0x38>
 8008328:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800832c:	3301      	adds	r3, #1
 800832e:	d003      	beq.n	8008338 <_fwalk_sglue+0x38>
 8008330:	4629      	mov	r1, r5
 8008332:	4638      	mov	r0, r7
 8008334:	47c0      	blx	r8
 8008336:	4306      	orrs	r6, r0
 8008338:	3568      	adds	r5, #104	@ 0x68
 800833a:	e7e9      	b.n	8008310 <_fwalk_sglue+0x10>

0800833c <iprintf>:
 800833c:	b40f      	push	{r0, r1, r2, r3}
 800833e:	b507      	push	{r0, r1, r2, lr}
 8008340:	4906      	ldr	r1, [pc, #24]	@ (800835c <iprintf+0x20>)
 8008342:	ab04      	add	r3, sp, #16
 8008344:	6808      	ldr	r0, [r1, #0]
 8008346:	f853 2b04 	ldr.w	r2, [r3], #4
 800834a:	6881      	ldr	r1, [r0, #8]
 800834c:	9301      	str	r3, [sp, #4]
 800834e:	f000 fb57 	bl	8008a00 <_vfiprintf_r>
 8008352:	b003      	add	sp, #12
 8008354:	f85d eb04 	ldr.w	lr, [sp], #4
 8008358:	b004      	add	sp, #16
 800835a:	4770      	bx	lr
 800835c:	2000001c 	.word	0x2000001c

08008360 <_puts_r>:
 8008360:	6a03      	ldr	r3, [r0, #32]
 8008362:	b570      	push	{r4, r5, r6, lr}
 8008364:	6884      	ldr	r4, [r0, #8]
 8008366:	4605      	mov	r5, r0
 8008368:	460e      	mov	r6, r1
 800836a:	b90b      	cbnz	r3, 8008370 <_puts_r+0x10>
 800836c:	f7ff ffb0 	bl	80082d0 <__sinit>
 8008370:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008372:	07db      	lsls	r3, r3, #31
 8008374:	d405      	bmi.n	8008382 <_puts_r+0x22>
 8008376:	89a3      	ldrh	r3, [r4, #12]
 8008378:	0598      	lsls	r0, r3, #22
 800837a:	d402      	bmi.n	8008382 <_puts_r+0x22>
 800837c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800837e:	f000 fa0c 	bl	800879a <__retarget_lock_acquire_recursive>
 8008382:	89a3      	ldrh	r3, [r4, #12]
 8008384:	0719      	lsls	r1, r3, #28
 8008386:	d502      	bpl.n	800838e <_puts_r+0x2e>
 8008388:	6923      	ldr	r3, [r4, #16]
 800838a:	2b00      	cmp	r3, #0
 800838c:	d135      	bne.n	80083fa <_puts_r+0x9a>
 800838e:	4621      	mov	r1, r4
 8008390:	4628      	mov	r0, r5
 8008392:	f000 f8c5 	bl	8008520 <__swsetup_r>
 8008396:	b380      	cbz	r0, 80083fa <_puts_r+0x9a>
 8008398:	f04f 35ff 	mov.w	r5, #4294967295
 800839c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800839e:	07da      	lsls	r2, r3, #31
 80083a0:	d405      	bmi.n	80083ae <_puts_r+0x4e>
 80083a2:	89a3      	ldrh	r3, [r4, #12]
 80083a4:	059b      	lsls	r3, r3, #22
 80083a6:	d402      	bmi.n	80083ae <_puts_r+0x4e>
 80083a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80083aa:	f000 f9f7 	bl	800879c <__retarget_lock_release_recursive>
 80083ae:	4628      	mov	r0, r5
 80083b0:	bd70      	pop	{r4, r5, r6, pc}
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	da04      	bge.n	80083c0 <_puts_r+0x60>
 80083b6:	69a2      	ldr	r2, [r4, #24]
 80083b8:	429a      	cmp	r2, r3
 80083ba:	dc17      	bgt.n	80083ec <_puts_r+0x8c>
 80083bc:	290a      	cmp	r1, #10
 80083be:	d015      	beq.n	80083ec <_puts_r+0x8c>
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	1c5a      	adds	r2, r3, #1
 80083c4:	6022      	str	r2, [r4, #0]
 80083c6:	7019      	strb	r1, [r3, #0]
 80083c8:	68a3      	ldr	r3, [r4, #8]
 80083ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80083ce:	3b01      	subs	r3, #1
 80083d0:	60a3      	str	r3, [r4, #8]
 80083d2:	2900      	cmp	r1, #0
 80083d4:	d1ed      	bne.n	80083b2 <_puts_r+0x52>
 80083d6:	2b00      	cmp	r3, #0
 80083d8:	da11      	bge.n	80083fe <_puts_r+0x9e>
 80083da:	4622      	mov	r2, r4
 80083dc:	210a      	movs	r1, #10
 80083de:	4628      	mov	r0, r5
 80083e0:	f000 f85f 	bl	80084a2 <__swbuf_r>
 80083e4:	3001      	adds	r0, #1
 80083e6:	d0d7      	beq.n	8008398 <_puts_r+0x38>
 80083e8:	250a      	movs	r5, #10
 80083ea:	e7d7      	b.n	800839c <_puts_r+0x3c>
 80083ec:	4622      	mov	r2, r4
 80083ee:	4628      	mov	r0, r5
 80083f0:	f000 f857 	bl	80084a2 <__swbuf_r>
 80083f4:	3001      	adds	r0, #1
 80083f6:	d1e7      	bne.n	80083c8 <_puts_r+0x68>
 80083f8:	e7ce      	b.n	8008398 <_puts_r+0x38>
 80083fa:	3e01      	subs	r6, #1
 80083fc:	e7e4      	b.n	80083c8 <_puts_r+0x68>
 80083fe:	6823      	ldr	r3, [r4, #0]
 8008400:	1c5a      	adds	r2, r3, #1
 8008402:	6022      	str	r2, [r4, #0]
 8008404:	220a      	movs	r2, #10
 8008406:	701a      	strb	r2, [r3, #0]
 8008408:	e7ee      	b.n	80083e8 <_puts_r+0x88>
	...

0800840c <puts>:
 800840c:	4b02      	ldr	r3, [pc, #8]	@ (8008418 <puts+0xc>)
 800840e:	4601      	mov	r1, r0
 8008410:	6818      	ldr	r0, [r3, #0]
 8008412:	f7ff bfa5 	b.w	8008360 <_puts_r>
 8008416:	bf00      	nop
 8008418:	2000001c 	.word	0x2000001c

0800841c <__sread>:
 800841c:	b510      	push	{r4, lr}
 800841e:	460c      	mov	r4, r1
 8008420:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008424:	f000 f96a 	bl	80086fc <_read_r>
 8008428:	2800      	cmp	r0, #0
 800842a:	bfab      	itete	ge
 800842c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800842e:	89a3      	ldrhlt	r3, [r4, #12]
 8008430:	181b      	addge	r3, r3, r0
 8008432:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008436:	bfac      	ite	ge
 8008438:	6563      	strge	r3, [r4, #84]	@ 0x54
 800843a:	81a3      	strhlt	r3, [r4, #12]
 800843c:	bd10      	pop	{r4, pc}

0800843e <__swrite>:
 800843e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008442:	461f      	mov	r7, r3
 8008444:	898b      	ldrh	r3, [r1, #12]
 8008446:	05db      	lsls	r3, r3, #23
 8008448:	4605      	mov	r5, r0
 800844a:	460c      	mov	r4, r1
 800844c:	4616      	mov	r6, r2
 800844e:	d505      	bpl.n	800845c <__swrite+0x1e>
 8008450:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008454:	2302      	movs	r3, #2
 8008456:	2200      	movs	r2, #0
 8008458:	f000 f93e 	bl	80086d8 <_lseek_r>
 800845c:	89a3      	ldrh	r3, [r4, #12]
 800845e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008462:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008466:	81a3      	strh	r3, [r4, #12]
 8008468:	4632      	mov	r2, r6
 800846a:	463b      	mov	r3, r7
 800846c:	4628      	mov	r0, r5
 800846e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008472:	f000 b955 	b.w	8008720 <_write_r>

08008476 <__sseek>:
 8008476:	b510      	push	{r4, lr}
 8008478:	460c      	mov	r4, r1
 800847a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800847e:	f000 f92b 	bl	80086d8 <_lseek_r>
 8008482:	1c43      	adds	r3, r0, #1
 8008484:	89a3      	ldrh	r3, [r4, #12]
 8008486:	bf15      	itete	ne
 8008488:	6560      	strne	r0, [r4, #84]	@ 0x54
 800848a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800848e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008492:	81a3      	strheq	r3, [r4, #12]
 8008494:	bf18      	it	ne
 8008496:	81a3      	strhne	r3, [r4, #12]
 8008498:	bd10      	pop	{r4, pc}

0800849a <__sclose>:
 800849a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800849e:	f000 b8ad 	b.w	80085fc <_close_r>

080084a2 <__swbuf_r>:
 80084a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80084a4:	460e      	mov	r6, r1
 80084a6:	4614      	mov	r4, r2
 80084a8:	4605      	mov	r5, r0
 80084aa:	b118      	cbz	r0, 80084b4 <__swbuf_r+0x12>
 80084ac:	6a03      	ldr	r3, [r0, #32]
 80084ae:	b90b      	cbnz	r3, 80084b4 <__swbuf_r+0x12>
 80084b0:	f7ff ff0e 	bl	80082d0 <__sinit>
 80084b4:	69a3      	ldr	r3, [r4, #24]
 80084b6:	60a3      	str	r3, [r4, #8]
 80084b8:	89a3      	ldrh	r3, [r4, #12]
 80084ba:	071a      	lsls	r2, r3, #28
 80084bc:	d501      	bpl.n	80084c2 <__swbuf_r+0x20>
 80084be:	6923      	ldr	r3, [r4, #16]
 80084c0:	b943      	cbnz	r3, 80084d4 <__swbuf_r+0x32>
 80084c2:	4621      	mov	r1, r4
 80084c4:	4628      	mov	r0, r5
 80084c6:	f000 f82b 	bl	8008520 <__swsetup_r>
 80084ca:	b118      	cbz	r0, 80084d4 <__swbuf_r+0x32>
 80084cc:	f04f 37ff 	mov.w	r7, #4294967295
 80084d0:	4638      	mov	r0, r7
 80084d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80084d4:	6823      	ldr	r3, [r4, #0]
 80084d6:	6922      	ldr	r2, [r4, #16]
 80084d8:	1a98      	subs	r0, r3, r2
 80084da:	6963      	ldr	r3, [r4, #20]
 80084dc:	b2f6      	uxtb	r6, r6
 80084de:	4283      	cmp	r3, r0
 80084e0:	4637      	mov	r7, r6
 80084e2:	dc05      	bgt.n	80084f0 <__swbuf_r+0x4e>
 80084e4:	4621      	mov	r1, r4
 80084e6:	4628      	mov	r0, r5
 80084e8:	f000 fdb2 	bl	8009050 <_fflush_r>
 80084ec:	2800      	cmp	r0, #0
 80084ee:	d1ed      	bne.n	80084cc <__swbuf_r+0x2a>
 80084f0:	68a3      	ldr	r3, [r4, #8]
 80084f2:	3b01      	subs	r3, #1
 80084f4:	60a3      	str	r3, [r4, #8]
 80084f6:	6823      	ldr	r3, [r4, #0]
 80084f8:	1c5a      	adds	r2, r3, #1
 80084fa:	6022      	str	r2, [r4, #0]
 80084fc:	701e      	strb	r6, [r3, #0]
 80084fe:	6962      	ldr	r2, [r4, #20]
 8008500:	1c43      	adds	r3, r0, #1
 8008502:	429a      	cmp	r2, r3
 8008504:	d004      	beq.n	8008510 <__swbuf_r+0x6e>
 8008506:	89a3      	ldrh	r3, [r4, #12]
 8008508:	07db      	lsls	r3, r3, #31
 800850a:	d5e1      	bpl.n	80084d0 <__swbuf_r+0x2e>
 800850c:	2e0a      	cmp	r6, #10
 800850e:	d1df      	bne.n	80084d0 <__swbuf_r+0x2e>
 8008510:	4621      	mov	r1, r4
 8008512:	4628      	mov	r0, r5
 8008514:	f000 fd9c 	bl	8009050 <_fflush_r>
 8008518:	2800      	cmp	r0, #0
 800851a:	d0d9      	beq.n	80084d0 <__swbuf_r+0x2e>
 800851c:	e7d6      	b.n	80084cc <__swbuf_r+0x2a>
	...

08008520 <__swsetup_r>:
 8008520:	b538      	push	{r3, r4, r5, lr}
 8008522:	4b29      	ldr	r3, [pc, #164]	@ (80085c8 <__swsetup_r+0xa8>)
 8008524:	4605      	mov	r5, r0
 8008526:	6818      	ldr	r0, [r3, #0]
 8008528:	460c      	mov	r4, r1
 800852a:	b118      	cbz	r0, 8008534 <__swsetup_r+0x14>
 800852c:	6a03      	ldr	r3, [r0, #32]
 800852e:	b90b      	cbnz	r3, 8008534 <__swsetup_r+0x14>
 8008530:	f7ff fece 	bl	80082d0 <__sinit>
 8008534:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008538:	0719      	lsls	r1, r3, #28
 800853a:	d422      	bmi.n	8008582 <__swsetup_r+0x62>
 800853c:	06da      	lsls	r2, r3, #27
 800853e:	d407      	bmi.n	8008550 <__swsetup_r+0x30>
 8008540:	2209      	movs	r2, #9
 8008542:	602a      	str	r2, [r5, #0]
 8008544:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008548:	81a3      	strh	r3, [r4, #12]
 800854a:	f04f 30ff 	mov.w	r0, #4294967295
 800854e:	e033      	b.n	80085b8 <__swsetup_r+0x98>
 8008550:	0758      	lsls	r0, r3, #29
 8008552:	d512      	bpl.n	800857a <__swsetup_r+0x5a>
 8008554:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008556:	b141      	cbz	r1, 800856a <__swsetup_r+0x4a>
 8008558:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800855c:	4299      	cmp	r1, r3
 800855e:	d002      	beq.n	8008566 <__swsetup_r+0x46>
 8008560:	4628      	mov	r0, r5
 8008562:	f000 f92b 	bl	80087bc <_free_r>
 8008566:	2300      	movs	r3, #0
 8008568:	6363      	str	r3, [r4, #52]	@ 0x34
 800856a:	89a3      	ldrh	r3, [r4, #12]
 800856c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008570:	81a3      	strh	r3, [r4, #12]
 8008572:	2300      	movs	r3, #0
 8008574:	6063      	str	r3, [r4, #4]
 8008576:	6923      	ldr	r3, [r4, #16]
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	89a3      	ldrh	r3, [r4, #12]
 800857c:	f043 0308 	orr.w	r3, r3, #8
 8008580:	81a3      	strh	r3, [r4, #12]
 8008582:	6923      	ldr	r3, [r4, #16]
 8008584:	b94b      	cbnz	r3, 800859a <__swsetup_r+0x7a>
 8008586:	89a3      	ldrh	r3, [r4, #12]
 8008588:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800858c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008590:	d003      	beq.n	800859a <__swsetup_r+0x7a>
 8008592:	4621      	mov	r1, r4
 8008594:	4628      	mov	r0, r5
 8008596:	f000 fda9 	bl	80090ec <__smakebuf_r>
 800859a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800859e:	f013 0201 	ands.w	r2, r3, #1
 80085a2:	d00a      	beq.n	80085ba <__swsetup_r+0x9a>
 80085a4:	2200      	movs	r2, #0
 80085a6:	60a2      	str	r2, [r4, #8]
 80085a8:	6962      	ldr	r2, [r4, #20]
 80085aa:	4252      	negs	r2, r2
 80085ac:	61a2      	str	r2, [r4, #24]
 80085ae:	6922      	ldr	r2, [r4, #16]
 80085b0:	b942      	cbnz	r2, 80085c4 <__swsetup_r+0xa4>
 80085b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80085b6:	d1c5      	bne.n	8008544 <__swsetup_r+0x24>
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	0799      	lsls	r1, r3, #30
 80085bc:	bf58      	it	pl
 80085be:	6962      	ldrpl	r2, [r4, #20]
 80085c0:	60a2      	str	r2, [r4, #8]
 80085c2:	e7f4      	b.n	80085ae <__swsetup_r+0x8e>
 80085c4:	2000      	movs	r0, #0
 80085c6:	e7f7      	b.n	80085b8 <__swsetup_r+0x98>
 80085c8:	2000001c 	.word	0x2000001c

080085cc <memcmp>:
 80085cc:	b510      	push	{r4, lr}
 80085ce:	3901      	subs	r1, #1
 80085d0:	4402      	add	r2, r0
 80085d2:	4290      	cmp	r0, r2
 80085d4:	d101      	bne.n	80085da <memcmp+0xe>
 80085d6:	2000      	movs	r0, #0
 80085d8:	e005      	b.n	80085e6 <memcmp+0x1a>
 80085da:	7803      	ldrb	r3, [r0, #0]
 80085dc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 80085e0:	42a3      	cmp	r3, r4
 80085e2:	d001      	beq.n	80085e8 <memcmp+0x1c>
 80085e4:	1b18      	subs	r0, r3, r4
 80085e6:	bd10      	pop	{r4, pc}
 80085e8:	3001      	adds	r0, #1
 80085ea:	e7f2      	b.n	80085d2 <memcmp+0x6>

080085ec <memset>:
 80085ec:	4402      	add	r2, r0
 80085ee:	4603      	mov	r3, r0
 80085f0:	4293      	cmp	r3, r2
 80085f2:	d100      	bne.n	80085f6 <memset+0xa>
 80085f4:	4770      	bx	lr
 80085f6:	f803 1b01 	strb.w	r1, [r3], #1
 80085fa:	e7f9      	b.n	80085f0 <memset+0x4>

080085fc <_close_r>:
 80085fc:	b538      	push	{r3, r4, r5, lr}
 80085fe:	4d06      	ldr	r5, [pc, #24]	@ (8008618 <_close_r+0x1c>)
 8008600:	2300      	movs	r3, #0
 8008602:	4604      	mov	r4, r0
 8008604:	4608      	mov	r0, r1
 8008606:	602b      	str	r3, [r5, #0]
 8008608:	f7fa fc01 	bl	8002e0e <_close>
 800860c:	1c43      	adds	r3, r0, #1
 800860e:	d102      	bne.n	8008616 <_close_r+0x1a>
 8008610:	682b      	ldr	r3, [r5, #0]
 8008612:	b103      	cbz	r3, 8008616 <_close_r+0x1a>
 8008614:	6023      	str	r3, [r4, #0]
 8008616:	bd38      	pop	{r3, r4, r5, pc}
 8008618:	20004cc4 	.word	0x20004cc4

0800861c <_reclaim_reent>:
 800861c:	4b2d      	ldr	r3, [pc, #180]	@ (80086d4 <_reclaim_reent+0xb8>)
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	4283      	cmp	r3, r0
 8008622:	b570      	push	{r4, r5, r6, lr}
 8008624:	4604      	mov	r4, r0
 8008626:	d053      	beq.n	80086d0 <_reclaim_reent+0xb4>
 8008628:	69c3      	ldr	r3, [r0, #28]
 800862a:	b31b      	cbz	r3, 8008674 <_reclaim_reent+0x58>
 800862c:	68db      	ldr	r3, [r3, #12]
 800862e:	b163      	cbz	r3, 800864a <_reclaim_reent+0x2e>
 8008630:	2500      	movs	r5, #0
 8008632:	69e3      	ldr	r3, [r4, #28]
 8008634:	68db      	ldr	r3, [r3, #12]
 8008636:	5959      	ldr	r1, [r3, r5]
 8008638:	b9b1      	cbnz	r1, 8008668 <_reclaim_reent+0x4c>
 800863a:	3504      	adds	r5, #4
 800863c:	2d80      	cmp	r5, #128	@ 0x80
 800863e:	d1f8      	bne.n	8008632 <_reclaim_reent+0x16>
 8008640:	69e3      	ldr	r3, [r4, #28]
 8008642:	4620      	mov	r0, r4
 8008644:	68d9      	ldr	r1, [r3, #12]
 8008646:	f000 f8b9 	bl	80087bc <_free_r>
 800864a:	69e3      	ldr	r3, [r4, #28]
 800864c:	6819      	ldr	r1, [r3, #0]
 800864e:	b111      	cbz	r1, 8008656 <_reclaim_reent+0x3a>
 8008650:	4620      	mov	r0, r4
 8008652:	f000 f8b3 	bl	80087bc <_free_r>
 8008656:	69e3      	ldr	r3, [r4, #28]
 8008658:	689d      	ldr	r5, [r3, #8]
 800865a:	b15d      	cbz	r5, 8008674 <_reclaim_reent+0x58>
 800865c:	4629      	mov	r1, r5
 800865e:	4620      	mov	r0, r4
 8008660:	682d      	ldr	r5, [r5, #0]
 8008662:	f000 f8ab 	bl	80087bc <_free_r>
 8008666:	e7f8      	b.n	800865a <_reclaim_reent+0x3e>
 8008668:	680e      	ldr	r6, [r1, #0]
 800866a:	4620      	mov	r0, r4
 800866c:	f000 f8a6 	bl	80087bc <_free_r>
 8008670:	4631      	mov	r1, r6
 8008672:	e7e1      	b.n	8008638 <_reclaim_reent+0x1c>
 8008674:	6961      	ldr	r1, [r4, #20]
 8008676:	b111      	cbz	r1, 800867e <_reclaim_reent+0x62>
 8008678:	4620      	mov	r0, r4
 800867a:	f000 f89f 	bl	80087bc <_free_r>
 800867e:	69e1      	ldr	r1, [r4, #28]
 8008680:	b111      	cbz	r1, 8008688 <_reclaim_reent+0x6c>
 8008682:	4620      	mov	r0, r4
 8008684:	f000 f89a 	bl	80087bc <_free_r>
 8008688:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800868a:	b111      	cbz	r1, 8008692 <_reclaim_reent+0x76>
 800868c:	4620      	mov	r0, r4
 800868e:	f000 f895 	bl	80087bc <_free_r>
 8008692:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008694:	b111      	cbz	r1, 800869c <_reclaim_reent+0x80>
 8008696:	4620      	mov	r0, r4
 8008698:	f000 f890 	bl	80087bc <_free_r>
 800869c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800869e:	b111      	cbz	r1, 80086a6 <_reclaim_reent+0x8a>
 80086a0:	4620      	mov	r0, r4
 80086a2:	f000 f88b 	bl	80087bc <_free_r>
 80086a6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 80086a8:	b111      	cbz	r1, 80086b0 <_reclaim_reent+0x94>
 80086aa:	4620      	mov	r0, r4
 80086ac:	f000 f886 	bl	80087bc <_free_r>
 80086b0:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 80086b2:	b111      	cbz	r1, 80086ba <_reclaim_reent+0x9e>
 80086b4:	4620      	mov	r0, r4
 80086b6:	f000 f881 	bl	80087bc <_free_r>
 80086ba:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 80086bc:	b111      	cbz	r1, 80086c4 <_reclaim_reent+0xa8>
 80086be:	4620      	mov	r0, r4
 80086c0:	f000 f87c 	bl	80087bc <_free_r>
 80086c4:	6a23      	ldr	r3, [r4, #32]
 80086c6:	b11b      	cbz	r3, 80086d0 <_reclaim_reent+0xb4>
 80086c8:	4620      	mov	r0, r4
 80086ca:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80086ce:	4718      	bx	r3
 80086d0:	bd70      	pop	{r4, r5, r6, pc}
 80086d2:	bf00      	nop
 80086d4:	2000001c 	.word	0x2000001c

080086d8 <_lseek_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d07      	ldr	r5, [pc, #28]	@ (80086f8 <_lseek_r+0x20>)
 80086dc:	4604      	mov	r4, r0
 80086de:	4608      	mov	r0, r1
 80086e0:	4611      	mov	r1, r2
 80086e2:	2200      	movs	r2, #0
 80086e4:	602a      	str	r2, [r5, #0]
 80086e6:	461a      	mov	r2, r3
 80086e8:	f7fa fbb8 	bl	8002e5c <_lseek>
 80086ec:	1c43      	adds	r3, r0, #1
 80086ee:	d102      	bne.n	80086f6 <_lseek_r+0x1e>
 80086f0:	682b      	ldr	r3, [r5, #0]
 80086f2:	b103      	cbz	r3, 80086f6 <_lseek_r+0x1e>
 80086f4:	6023      	str	r3, [r4, #0]
 80086f6:	bd38      	pop	{r3, r4, r5, pc}
 80086f8:	20004cc4 	.word	0x20004cc4

080086fc <_read_r>:
 80086fc:	b538      	push	{r3, r4, r5, lr}
 80086fe:	4d07      	ldr	r5, [pc, #28]	@ (800871c <_read_r+0x20>)
 8008700:	4604      	mov	r4, r0
 8008702:	4608      	mov	r0, r1
 8008704:	4611      	mov	r1, r2
 8008706:	2200      	movs	r2, #0
 8008708:	602a      	str	r2, [r5, #0]
 800870a:	461a      	mov	r2, r3
 800870c:	f7fa fb62 	bl	8002dd4 <_read>
 8008710:	1c43      	adds	r3, r0, #1
 8008712:	d102      	bne.n	800871a <_read_r+0x1e>
 8008714:	682b      	ldr	r3, [r5, #0]
 8008716:	b103      	cbz	r3, 800871a <_read_r+0x1e>
 8008718:	6023      	str	r3, [r4, #0]
 800871a:	bd38      	pop	{r3, r4, r5, pc}
 800871c:	20004cc4 	.word	0x20004cc4

08008720 <_write_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4d07      	ldr	r5, [pc, #28]	@ (8008740 <_write_r+0x20>)
 8008724:	4604      	mov	r4, r0
 8008726:	4608      	mov	r0, r1
 8008728:	4611      	mov	r1, r2
 800872a:	2200      	movs	r2, #0
 800872c:	602a      	str	r2, [r5, #0]
 800872e:	461a      	mov	r2, r3
 8008730:	f7f8 fc6c 	bl	800100c <_write>
 8008734:	1c43      	adds	r3, r0, #1
 8008736:	d102      	bne.n	800873e <_write_r+0x1e>
 8008738:	682b      	ldr	r3, [r5, #0]
 800873a:	b103      	cbz	r3, 800873e <_write_r+0x1e>
 800873c:	6023      	str	r3, [r4, #0]
 800873e:	bd38      	pop	{r3, r4, r5, pc}
 8008740:	20004cc4 	.word	0x20004cc4

08008744 <__errno>:
 8008744:	4b01      	ldr	r3, [pc, #4]	@ (800874c <__errno+0x8>)
 8008746:	6818      	ldr	r0, [r3, #0]
 8008748:	4770      	bx	lr
 800874a:	bf00      	nop
 800874c:	2000001c 	.word	0x2000001c

08008750 <__libc_init_array>:
 8008750:	b570      	push	{r4, r5, r6, lr}
 8008752:	4d0d      	ldr	r5, [pc, #52]	@ (8008788 <__libc_init_array+0x38>)
 8008754:	4c0d      	ldr	r4, [pc, #52]	@ (800878c <__libc_init_array+0x3c>)
 8008756:	1b64      	subs	r4, r4, r5
 8008758:	10a4      	asrs	r4, r4, #2
 800875a:	2600      	movs	r6, #0
 800875c:	42a6      	cmp	r6, r4
 800875e:	d109      	bne.n	8008774 <__libc_init_array+0x24>
 8008760:	4d0b      	ldr	r5, [pc, #44]	@ (8008790 <__libc_init_array+0x40>)
 8008762:	4c0c      	ldr	r4, [pc, #48]	@ (8008794 <__libc_init_array+0x44>)
 8008764:	f000 fd30 	bl	80091c8 <_init>
 8008768:	1b64      	subs	r4, r4, r5
 800876a:	10a4      	asrs	r4, r4, #2
 800876c:	2600      	movs	r6, #0
 800876e:	42a6      	cmp	r6, r4
 8008770:	d105      	bne.n	800877e <__libc_init_array+0x2e>
 8008772:	bd70      	pop	{r4, r5, r6, pc}
 8008774:	f855 3b04 	ldr.w	r3, [r5], #4
 8008778:	4798      	blx	r3
 800877a:	3601      	adds	r6, #1
 800877c:	e7ee      	b.n	800875c <__libc_init_array+0xc>
 800877e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008782:	4798      	blx	r3
 8008784:	3601      	adds	r6, #1
 8008786:	e7f2      	b.n	800876e <__libc_init_array+0x1e>
 8008788:	0800bd50 	.word	0x0800bd50
 800878c:	0800bd50 	.word	0x0800bd50
 8008790:	0800bd50 	.word	0x0800bd50
 8008794:	0800bd54 	.word	0x0800bd54

08008798 <__retarget_lock_init_recursive>:
 8008798:	4770      	bx	lr

0800879a <__retarget_lock_acquire_recursive>:
 800879a:	4770      	bx	lr

0800879c <__retarget_lock_release_recursive>:
 800879c:	4770      	bx	lr

0800879e <memcpy>:
 800879e:	440a      	add	r2, r1
 80087a0:	4291      	cmp	r1, r2
 80087a2:	f100 33ff 	add.w	r3, r0, #4294967295
 80087a6:	d100      	bne.n	80087aa <memcpy+0xc>
 80087a8:	4770      	bx	lr
 80087aa:	b510      	push	{r4, lr}
 80087ac:	f811 4b01 	ldrb.w	r4, [r1], #1
 80087b0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80087b4:	4291      	cmp	r1, r2
 80087b6:	d1f9      	bne.n	80087ac <memcpy+0xe>
 80087b8:	bd10      	pop	{r4, pc}
	...

080087bc <_free_r>:
 80087bc:	b538      	push	{r3, r4, r5, lr}
 80087be:	4605      	mov	r5, r0
 80087c0:	2900      	cmp	r1, #0
 80087c2:	d041      	beq.n	8008848 <_free_r+0x8c>
 80087c4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087c8:	1f0c      	subs	r4, r1, #4
 80087ca:	2b00      	cmp	r3, #0
 80087cc:	bfb8      	it	lt
 80087ce:	18e4      	addlt	r4, r4, r3
 80087d0:	f000 f8e0 	bl	8008994 <__malloc_lock>
 80087d4:	4a1d      	ldr	r2, [pc, #116]	@ (800884c <_free_r+0x90>)
 80087d6:	6813      	ldr	r3, [r2, #0]
 80087d8:	b933      	cbnz	r3, 80087e8 <_free_r+0x2c>
 80087da:	6063      	str	r3, [r4, #4]
 80087dc:	6014      	str	r4, [r2, #0]
 80087de:	4628      	mov	r0, r5
 80087e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80087e4:	f000 b8dc 	b.w	80089a0 <__malloc_unlock>
 80087e8:	42a3      	cmp	r3, r4
 80087ea:	d908      	bls.n	80087fe <_free_r+0x42>
 80087ec:	6820      	ldr	r0, [r4, #0]
 80087ee:	1821      	adds	r1, r4, r0
 80087f0:	428b      	cmp	r3, r1
 80087f2:	bf01      	itttt	eq
 80087f4:	6819      	ldreq	r1, [r3, #0]
 80087f6:	685b      	ldreq	r3, [r3, #4]
 80087f8:	1809      	addeq	r1, r1, r0
 80087fa:	6021      	streq	r1, [r4, #0]
 80087fc:	e7ed      	b.n	80087da <_free_r+0x1e>
 80087fe:	461a      	mov	r2, r3
 8008800:	685b      	ldr	r3, [r3, #4]
 8008802:	b10b      	cbz	r3, 8008808 <_free_r+0x4c>
 8008804:	42a3      	cmp	r3, r4
 8008806:	d9fa      	bls.n	80087fe <_free_r+0x42>
 8008808:	6811      	ldr	r1, [r2, #0]
 800880a:	1850      	adds	r0, r2, r1
 800880c:	42a0      	cmp	r0, r4
 800880e:	d10b      	bne.n	8008828 <_free_r+0x6c>
 8008810:	6820      	ldr	r0, [r4, #0]
 8008812:	4401      	add	r1, r0
 8008814:	1850      	adds	r0, r2, r1
 8008816:	4283      	cmp	r3, r0
 8008818:	6011      	str	r1, [r2, #0]
 800881a:	d1e0      	bne.n	80087de <_free_r+0x22>
 800881c:	6818      	ldr	r0, [r3, #0]
 800881e:	685b      	ldr	r3, [r3, #4]
 8008820:	6053      	str	r3, [r2, #4]
 8008822:	4408      	add	r0, r1
 8008824:	6010      	str	r0, [r2, #0]
 8008826:	e7da      	b.n	80087de <_free_r+0x22>
 8008828:	d902      	bls.n	8008830 <_free_r+0x74>
 800882a:	230c      	movs	r3, #12
 800882c:	602b      	str	r3, [r5, #0]
 800882e:	e7d6      	b.n	80087de <_free_r+0x22>
 8008830:	6820      	ldr	r0, [r4, #0]
 8008832:	1821      	adds	r1, r4, r0
 8008834:	428b      	cmp	r3, r1
 8008836:	bf04      	itt	eq
 8008838:	6819      	ldreq	r1, [r3, #0]
 800883a:	685b      	ldreq	r3, [r3, #4]
 800883c:	6063      	str	r3, [r4, #4]
 800883e:	bf04      	itt	eq
 8008840:	1809      	addeq	r1, r1, r0
 8008842:	6021      	streq	r1, [r4, #0]
 8008844:	6054      	str	r4, [r2, #4]
 8008846:	e7ca      	b.n	80087de <_free_r+0x22>
 8008848:	bd38      	pop	{r3, r4, r5, pc}
 800884a:	bf00      	nop
 800884c:	20004cd0 	.word	0x20004cd0

08008850 <sbrk_aligned>:
 8008850:	b570      	push	{r4, r5, r6, lr}
 8008852:	4e0f      	ldr	r6, [pc, #60]	@ (8008890 <sbrk_aligned+0x40>)
 8008854:	460c      	mov	r4, r1
 8008856:	6831      	ldr	r1, [r6, #0]
 8008858:	4605      	mov	r5, r0
 800885a:	b911      	cbnz	r1, 8008862 <sbrk_aligned+0x12>
 800885c:	f000 fca4 	bl	80091a8 <_sbrk_r>
 8008860:	6030      	str	r0, [r6, #0]
 8008862:	4621      	mov	r1, r4
 8008864:	4628      	mov	r0, r5
 8008866:	f000 fc9f 	bl	80091a8 <_sbrk_r>
 800886a:	1c43      	adds	r3, r0, #1
 800886c:	d103      	bne.n	8008876 <sbrk_aligned+0x26>
 800886e:	f04f 34ff 	mov.w	r4, #4294967295
 8008872:	4620      	mov	r0, r4
 8008874:	bd70      	pop	{r4, r5, r6, pc}
 8008876:	1cc4      	adds	r4, r0, #3
 8008878:	f024 0403 	bic.w	r4, r4, #3
 800887c:	42a0      	cmp	r0, r4
 800887e:	d0f8      	beq.n	8008872 <sbrk_aligned+0x22>
 8008880:	1a21      	subs	r1, r4, r0
 8008882:	4628      	mov	r0, r5
 8008884:	f000 fc90 	bl	80091a8 <_sbrk_r>
 8008888:	3001      	adds	r0, #1
 800888a:	d1f2      	bne.n	8008872 <sbrk_aligned+0x22>
 800888c:	e7ef      	b.n	800886e <sbrk_aligned+0x1e>
 800888e:	bf00      	nop
 8008890:	20004ccc 	.word	0x20004ccc

08008894 <_malloc_r>:
 8008894:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008898:	1ccd      	adds	r5, r1, #3
 800889a:	f025 0503 	bic.w	r5, r5, #3
 800889e:	3508      	adds	r5, #8
 80088a0:	2d0c      	cmp	r5, #12
 80088a2:	bf38      	it	cc
 80088a4:	250c      	movcc	r5, #12
 80088a6:	2d00      	cmp	r5, #0
 80088a8:	4606      	mov	r6, r0
 80088aa:	db01      	blt.n	80088b0 <_malloc_r+0x1c>
 80088ac:	42a9      	cmp	r1, r5
 80088ae:	d904      	bls.n	80088ba <_malloc_r+0x26>
 80088b0:	230c      	movs	r3, #12
 80088b2:	6033      	str	r3, [r6, #0]
 80088b4:	2000      	movs	r0, #0
 80088b6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80088ba:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008990 <_malloc_r+0xfc>
 80088be:	f000 f869 	bl	8008994 <__malloc_lock>
 80088c2:	f8d8 3000 	ldr.w	r3, [r8]
 80088c6:	461c      	mov	r4, r3
 80088c8:	bb44      	cbnz	r4, 800891c <_malloc_r+0x88>
 80088ca:	4629      	mov	r1, r5
 80088cc:	4630      	mov	r0, r6
 80088ce:	f7ff ffbf 	bl	8008850 <sbrk_aligned>
 80088d2:	1c43      	adds	r3, r0, #1
 80088d4:	4604      	mov	r4, r0
 80088d6:	d158      	bne.n	800898a <_malloc_r+0xf6>
 80088d8:	f8d8 4000 	ldr.w	r4, [r8]
 80088dc:	4627      	mov	r7, r4
 80088de:	2f00      	cmp	r7, #0
 80088e0:	d143      	bne.n	800896a <_malloc_r+0xd6>
 80088e2:	2c00      	cmp	r4, #0
 80088e4:	d04b      	beq.n	800897e <_malloc_r+0xea>
 80088e6:	6823      	ldr	r3, [r4, #0]
 80088e8:	4639      	mov	r1, r7
 80088ea:	4630      	mov	r0, r6
 80088ec:	eb04 0903 	add.w	r9, r4, r3
 80088f0:	f000 fc5a 	bl	80091a8 <_sbrk_r>
 80088f4:	4581      	cmp	r9, r0
 80088f6:	d142      	bne.n	800897e <_malloc_r+0xea>
 80088f8:	6821      	ldr	r1, [r4, #0]
 80088fa:	1a6d      	subs	r5, r5, r1
 80088fc:	4629      	mov	r1, r5
 80088fe:	4630      	mov	r0, r6
 8008900:	f7ff ffa6 	bl	8008850 <sbrk_aligned>
 8008904:	3001      	adds	r0, #1
 8008906:	d03a      	beq.n	800897e <_malloc_r+0xea>
 8008908:	6823      	ldr	r3, [r4, #0]
 800890a:	442b      	add	r3, r5
 800890c:	6023      	str	r3, [r4, #0]
 800890e:	f8d8 3000 	ldr.w	r3, [r8]
 8008912:	685a      	ldr	r2, [r3, #4]
 8008914:	bb62      	cbnz	r2, 8008970 <_malloc_r+0xdc>
 8008916:	f8c8 7000 	str.w	r7, [r8]
 800891a:	e00f      	b.n	800893c <_malloc_r+0xa8>
 800891c:	6822      	ldr	r2, [r4, #0]
 800891e:	1b52      	subs	r2, r2, r5
 8008920:	d420      	bmi.n	8008964 <_malloc_r+0xd0>
 8008922:	2a0b      	cmp	r2, #11
 8008924:	d917      	bls.n	8008956 <_malloc_r+0xc2>
 8008926:	1961      	adds	r1, r4, r5
 8008928:	42a3      	cmp	r3, r4
 800892a:	6025      	str	r5, [r4, #0]
 800892c:	bf18      	it	ne
 800892e:	6059      	strne	r1, [r3, #4]
 8008930:	6863      	ldr	r3, [r4, #4]
 8008932:	bf08      	it	eq
 8008934:	f8c8 1000 	streq.w	r1, [r8]
 8008938:	5162      	str	r2, [r4, r5]
 800893a:	604b      	str	r3, [r1, #4]
 800893c:	4630      	mov	r0, r6
 800893e:	f000 f82f 	bl	80089a0 <__malloc_unlock>
 8008942:	f104 000b 	add.w	r0, r4, #11
 8008946:	1d23      	adds	r3, r4, #4
 8008948:	f020 0007 	bic.w	r0, r0, #7
 800894c:	1ac2      	subs	r2, r0, r3
 800894e:	bf1c      	itt	ne
 8008950:	1a1b      	subne	r3, r3, r0
 8008952:	50a3      	strne	r3, [r4, r2]
 8008954:	e7af      	b.n	80088b6 <_malloc_r+0x22>
 8008956:	6862      	ldr	r2, [r4, #4]
 8008958:	42a3      	cmp	r3, r4
 800895a:	bf0c      	ite	eq
 800895c:	f8c8 2000 	streq.w	r2, [r8]
 8008960:	605a      	strne	r2, [r3, #4]
 8008962:	e7eb      	b.n	800893c <_malloc_r+0xa8>
 8008964:	4623      	mov	r3, r4
 8008966:	6864      	ldr	r4, [r4, #4]
 8008968:	e7ae      	b.n	80088c8 <_malloc_r+0x34>
 800896a:	463c      	mov	r4, r7
 800896c:	687f      	ldr	r7, [r7, #4]
 800896e:	e7b6      	b.n	80088de <_malloc_r+0x4a>
 8008970:	461a      	mov	r2, r3
 8008972:	685b      	ldr	r3, [r3, #4]
 8008974:	42a3      	cmp	r3, r4
 8008976:	d1fb      	bne.n	8008970 <_malloc_r+0xdc>
 8008978:	2300      	movs	r3, #0
 800897a:	6053      	str	r3, [r2, #4]
 800897c:	e7de      	b.n	800893c <_malloc_r+0xa8>
 800897e:	230c      	movs	r3, #12
 8008980:	6033      	str	r3, [r6, #0]
 8008982:	4630      	mov	r0, r6
 8008984:	f000 f80c 	bl	80089a0 <__malloc_unlock>
 8008988:	e794      	b.n	80088b4 <_malloc_r+0x20>
 800898a:	6005      	str	r5, [r0, #0]
 800898c:	e7d6      	b.n	800893c <_malloc_r+0xa8>
 800898e:	bf00      	nop
 8008990:	20004cd0 	.word	0x20004cd0

08008994 <__malloc_lock>:
 8008994:	4801      	ldr	r0, [pc, #4]	@ (800899c <__malloc_lock+0x8>)
 8008996:	f7ff bf00 	b.w	800879a <__retarget_lock_acquire_recursive>
 800899a:	bf00      	nop
 800899c:	20004cc8 	.word	0x20004cc8

080089a0 <__malloc_unlock>:
 80089a0:	4801      	ldr	r0, [pc, #4]	@ (80089a8 <__malloc_unlock+0x8>)
 80089a2:	f7ff befb 	b.w	800879c <__retarget_lock_release_recursive>
 80089a6:	bf00      	nop
 80089a8:	20004cc8 	.word	0x20004cc8

080089ac <__sfputc_r>:
 80089ac:	6893      	ldr	r3, [r2, #8]
 80089ae:	3b01      	subs	r3, #1
 80089b0:	2b00      	cmp	r3, #0
 80089b2:	b410      	push	{r4}
 80089b4:	6093      	str	r3, [r2, #8]
 80089b6:	da08      	bge.n	80089ca <__sfputc_r+0x1e>
 80089b8:	6994      	ldr	r4, [r2, #24]
 80089ba:	42a3      	cmp	r3, r4
 80089bc:	db01      	blt.n	80089c2 <__sfputc_r+0x16>
 80089be:	290a      	cmp	r1, #10
 80089c0:	d103      	bne.n	80089ca <__sfputc_r+0x1e>
 80089c2:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089c6:	f7ff bd6c 	b.w	80084a2 <__swbuf_r>
 80089ca:	6813      	ldr	r3, [r2, #0]
 80089cc:	1c58      	adds	r0, r3, #1
 80089ce:	6010      	str	r0, [r2, #0]
 80089d0:	7019      	strb	r1, [r3, #0]
 80089d2:	4608      	mov	r0, r1
 80089d4:	f85d 4b04 	ldr.w	r4, [sp], #4
 80089d8:	4770      	bx	lr

080089da <__sfputs_r>:
 80089da:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80089dc:	4606      	mov	r6, r0
 80089de:	460f      	mov	r7, r1
 80089e0:	4614      	mov	r4, r2
 80089e2:	18d5      	adds	r5, r2, r3
 80089e4:	42ac      	cmp	r4, r5
 80089e6:	d101      	bne.n	80089ec <__sfputs_r+0x12>
 80089e8:	2000      	movs	r0, #0
 80089ea:	e007      	b.n	80089fc <__sfputs_r+0x22>
 80089ec:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089f0:	463a      	mov	r2, r7
 80089f2:	4630      	mov	r0, r6
 80089f4:	f7ff ffda 	bl	80089ac <__sfputc_r>
 80089f8:	1c43      	adds	r3, r0, #1
 80089fa:	d1f3      	bne.n	80089e4 <__sfputs_r+0xa>
 80089fc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008a00 <_vfiprintf_r>:
 8008a00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008a04:	460d      	mov	r5, r1
 8008a06:	b09d      	sub	sp, #116	@ 0x74
 8008a08:	4614      	mov	r4, r2
 8008a0a:	4698      	mov	r8, r3
 8008a0c:	4606      	mov	r6, r0
 8008a0e:	b118      	cbz	r0, 8008a18 <_vfiprintf_r+0x18>
 8008a10:	6a03      	ldr	r3, [r0, #32]
 8008a12:	b90b      	cbnz	r3, 8008a18 <_vfiprintf_r+0x18>
 8008a14:	f7ff fc5c 	bl	80082d0 <__sinit>
 8008a18:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a1a:	07d9      	lsls	r1, r3, #31
 8008a1c:	d405      	bmi.n	8008a2a <_vfiprintf_r+0x2a>
 8008a1e:	89ab      	ldrh	r3, [r5, #12]
 8008a20:	059a      	lsls	r2, r3, #22
 8008a22:	d402      	bmi.n	8008a2a <_vfiprintf_r+0x2a>
 8008a24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a26:	f7ff feb8 	bl	800879a <__retarget_lock_acquire_recursive>
 8008a2a:	89ab      	ldrh	r3, [r5, #12]
 8008a2c:	071b      	lsls	r3, r3, #28
 8008a2e:	d501      	bpl.n	8008a34 <_vfiprintf_r+0x34>
 8008a30:	692b      	ldr	r3, [r5, #16]
 8008a32:	b99b      	cbnz	r3, 8008a5c <_vfiprintf_r+0x5c>
 8008a34:	4629      	mov	r1, r5
 8008a36:	4630      	mov	r0, r6
 8008a38:	f7ff fd72 	bl	8008520 <__swsetup_r>
 8008a3c:	b170      	cbz	r0, 8008a5c <_vfiprintf_r+0x5c>
 8008a3e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a40:	07dc      	lsls	r4, r3, #31
 8008a42:	d504      	bpl.n	8008a4e <_vfiprintf_r+0x4e>
 8008a44:	f04f 30ff 	mov.w	r0, #4294967295
 8008a48:	b01d      	add	sp, #116	@ 0x74
 8008a4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a4e:	89ab      	ldrh	r3, [r5, #12]
 8008a50:	0598      	lsls	r0, r3, #22
 8008a52:	d4f7      	bmi.n	8008a44 <_vfiprintf_r+0x44>
 8008a54:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a56:	f7ff fea1 	bl	800879c <__retarget_lock_release_recursive>
 8008a5a:	e7f3      	b.n	8008a44 <_vfiprintf_r+0x44>
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a60:	2320      	movs	r3, #32
 8008a62:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008a66:	f8cd 800c 	str.w	r8, [sp, #12]
 8008a6a:	2330      	movs	r3, #48	@ 0x30
 8008a6c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008c1c <_vfiprintf_r+0x21c>
 8008a70:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008a74:	f04f 0901 	mov.w	r9, #1
 8008a78:	4623      	mov	r3, r4
 8008a7a:	469a      	mov	sl, r3
 8008a7c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008a80:	b10a      	cbz	r2, 8008a86 <_vfiprintf_r+0x86>
 8008a82:	2a25      	cmp	r2, #37	@ 0x25
 8008a84:	d1f9      	bne.n	8008a7a <_vfiprintf_r+0x7a>
 8008a86:	ebba 0b04 	subs.w	fp, sl, r4
 8008a8a:	d00b      	beq.n	8008aa4 <_vfiprintf_r+0xa4>
 8008a8c:	465b      	mov	r3, fp
 8008a8e:	4622      	mov	r2, r4
 8008a90:	4629      	mov	r1, r5
 8008a92:	4630      	mov	r0, r6
 8008a94:	f7ff ffa1 	bl	80089da <__sfputs_r>
 8008a98:	3001      	adds	r0, #1
 8008a9a:	f000 80a7 	beq.w	8008bec <_vfiprintf_r+0x1ec>
 8008a9e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008aa0:	445a      	add	r2, fp
 8008aa2:	9209      	str	r2, [sp, #36]	@ 0x24
 8008aa4:	f89a 3000 	ldrb.w	r3, [sl]
 8008aa8:	2b00      	cmp	r3, #0
 8008aaa:	f000 809f 	beq.w	8008bec <_vfiprintf_r+0x1ec>
 8008aae:	2300      	movs	r3, #0
 8008ab0:	f04f 32ff 	mov.w	r2, #4294967295
 8008ab4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008ab8:	f10a 0a01 	add.w	sl, sl, #1
 8008abc:	9304      	str	r3, [sp, #16]
 8008abe:	9307      	str	r3, [sp, #28]
 8008ac0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ac4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ac6:	4654      	mov	r4, sl
 8008ac8:	2205      	movs	r2, #5
 8008aca:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008ace:	4853      	ldr	r0, [pc, #332]	@ (8008c1c <_vfiprintf_r+0x21c>)
 8008ad0:	f7f7 fb7e 	bl	80001d0 <memchr>
 8008ad4:	9a04      	ldr	r2, [sp, #16]
 8008ad6:	b9d8      	cbnz	r0, 8008b10 <_vfiprintf_r+0x110>
 8008ad8:	06d1      	lsls	r1, r2, #27
 8008ada:	bf44      	itt	mi
 8008adc:	2320      	movmi	r3, #32
 8008ade:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ae2:	0713      	lsls	r3, r2, #28
 8008ae4:	bf44      	itt	mi
 8008ae6:	232b      	movmi	r3, #43	@ 0x2b
 8008ae8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008aec:	f89a 3000 	ldrb.w	r3, [sl]
 8008af0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008af2:	d015      	beq.n	8008b20 <_vfiprintf_r+0x120>
 8008af4:	9a07      	ldr	r2, [sp, #28]
 8008af6:	4654      	mov	r4, sl
 8008af8:	2000      	movs	r0, #0
 8008afa:	f04f 0c0a 	mov.w	ip, #10
 8008afe:	4621      	mov	r1, r4
 8008b00:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008b04:	3b30      	subs	r3, #48	@ 0x30
 8008b06:	2b09      	cmp	r3, #9
 8008b08:	d94b      	bls.n	8008ba2 <_vfiprintf_r+0x1a2>
 8008b0a:	b1b0      	cbz	r0, 8008b3a <_vfiprintf_r+0x13a>
 8008b0c:	9207      	str	r2, [sp, #28]
 8008b0e:	e014      	b.n	8008b3a <_vfiprintf_r+0x13a>
 8008b10:	eba0 0308 	sub.w	r3, r0, r8
 8008b14:	fa09 f303 	lsl.w	r3, r9, r3
 8008b18:	4313      	orrs	r3, r2
 8008b1a:	9304      	str	r3, [sp, #16]
 8008b1c:	46a2      	mov	sl, r4
 8008b1e:	e7d2      	b.n	8008ac6 <_vfiprintf_r+0xc6>
 8008b20:	9b03      	ldr	r3, [sp, #12]
 8008b22:	1d19      	adds	r1, r3, #4
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	9103      	str	r1, [sp, #12]
 8008b28:	2b00      	cmp	r3, #0
 8008b2a:	bfbb      	ittet	lt
 8008b2c:	425b      	neglt	r3, r3
 8008b2e:	f042 0202 	orrlt.w	r2, r2, #2
 8008b32:	9307      	strge	r3, [sp, #28]
 8008b34:	9307      	strlt	r3, [sp, #28]
 8008b36:	bfb8      	it	lt
 8008b38:	9204      	strlt	r2, [sp, #16]
 8008b3a:	7823      	ldrb	r3, [r4, #0]
 8008b3c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008b3e:	d10a      	bne.n	8008b56 <_vfiprintf_r+0x156>
 8008b40:	7863      	ldrb	r3, [r4, #1]
 8008b42:	2b2a      	cmp	r3, #42	@ 0x2a
 8008b44:	d132      	bne.n	8008bac <_vfiprintf_r+0x1ac>
 8008b46:	9b03      	ldr	r3, [sp, #12]
 8008b48:	1d1a      	adds	r2, r3, #4
 8008b4a:	681b      	ldr	r3, [r3, #0]
 8008b4c:	9203      	str	r2, [sp, #12]
 8008b4e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008b52:	3402      	adds	r4, #2
 8008b54:	9305      	str	r3, [sp, #20]
 8008b56:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008c2c <_vfiprintf_r+0x22c>
 8008b5a:	7821      	ldrb	r1, [r4, #0]
 8008b5c:	2203      	movs	r2, #3
 8008b5e:	4650      	mov	r0, sl
 8008b60:	f7f7 fb36 	bl	80001d0 <memchr>
 8008b64:	b138      	cbz	r0, 8008b76 <_vfiprintf_r+0x176>
 8008b66:	9b04      	ldr	r3, [sp, #16]
 8008b68:	eba0 000a 	sub.w	r0, r0, sl
 8008b6c:	2240      	movs	r2, #64	@ 0x40
 8008b6e:	4082      	lsls	r2, r0
 8008b70:	4313      	orrs	r3, r2
 8008b72:	3401      	adds	r4, #1
 8008b74:	9304      	str	r3, [sp, #16]
 8008b76:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008b7a:	4829      	ldr	r0, [pc, #164]	@ (8008c20 <_vfiprintf_r+0x220>)
 8008b7c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008b80:	2206      	movs	r2, #6
 8008b82:	f7f7 fb25 	bl	80001d0 <memchr>
 8008b86:	2800      	cmp	r0, #0
 8008b88:	d03f      	beq.n	8008c0a <_vfiprintf_r+0x20a>
 8008b8a:	4b26      	ldr	r3, [pc, #152]	@ (8008c24 <_vfiprintf_r+0x224>)
 8008b8c:	bb1b      	cbnz	r3, 8008bd6 <_vfiprintf_r+0x1d6>
 8008b8e:	9b03      	ldr	r3, [sp, #12]
 8008b90:	3307      	adds	r3, #7
 8008b92:	f023 0307 	bic.w	r3, r3, #7
 8008b96:	3308      	adds	r3, #8
 8008b98:	9303      	str	r3, [sp, #12]
 8008b9a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b9c:	443b      	add	r3, r7
 8008b9e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ba0:	e76a      	b.n	8008a78 <_vfiprintf_r+0x78>
 8008ba2:	fb0c 3202 	mla	r2, ip, r2, r3
 8008ba6:	460c      	mov	r4, r1
 8008ba8:	2001      	movs	r0, #1
 8008baa:	e7a8      	b.n	8008afe <_vfiprintf_r+0xfe>
 8008bac:	2300      	movs	r3, #0
 8008bae:	3401      	adds	r4, #1
 8008bb0:	9305      	str	r3, [sp, #20]
 8008bb2:	4619      	mov	r1, r3
 8008bb4:	f04f 0c0a 	mov.w	ip, #10
 8008bb8:	4620      	mov	r0, r4
 8008bba:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008bbe:	3a30      	subs	r2, #48	@ 0x30
 8008bc0:	2a09      	cmp	r2, #9
 8008bc2:	d903      	bls.n	8008bcc <_vfiprintf_r+0x1cc>
 8008bc4:	2b00      	cmp	r3, #0
 8008bc6:	d0c6      	beq.n	8008b56 <_vfiprintf_r+0x156>
 8008bc8:	9105      	str	r1, [sp, #20]
 8008bca:	e7c4      	b.n	8008b56 <_vfiprintf_r+0x156>
 8008bcc:	fb0c 2101 	mla	r1, ip, r1, r2
 8008bd0:	4604      	mov	r4, r0
 8008bd2:	2301      	movs	r3, #1
 8008bd4:	e7f0      	b.n	8008bb8 <_vfiprintf_r+0x1b8>
 8008bd6:	ab03      	add	r3, sp, #12
 8008bd8:	9300      	str	r3, [sp, #0]
 8008bda:	462a      	mov	r2, r5
 8008bdc:	4b12      	ldr	r3, [pc, #72]	@ (8008c28 <_vfiprintf_r+0x228>)
 8008bde:	a904      	add	r1, sp, #16
 8008be0:	4630      	mov	r0, r6
 8008be2:	f3af 8000 	nop.w
 8008be6:	4607      	mov	r7, r0
 8008be8:	1c78      	adds	r0, r7, #1
 8008bea:	d1d6      	bne.n	8008b9a <_vfiprintf_r+0x19a>
 8008bec:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bee:	07d9      	lsls	r1, r3, #31
 8008bf0:	d405      	bmi.n	8008bfe <_vfiprintf_r+0x1fe>
 8008bf2:	89ab      	ldrh	r3, [r5, #12]
 8008bf4:	059a      	lsls	r2, r3, #22
 8008bf6:	d402      	bmi.n	8008bfe <_vfiprintf_r+0x1fe>
 8008bf8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008bfa:	f7ff fdcf 	bl	800879c <__retarget_lock_release_recursive>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	065b      	lsls	r3, r3, #25
 8008c02:	f53f af1f 	bmi.w	8008a44 <_vfiprintf_r+0x44>
 8008c06:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008c08:	e71e      	b.n	8008a48 <_vfiprintf_r+0x48>
 8008c0a:	ab03      	add	r3, sp, #12
 8008c0c:	9300      	str	r3, [sp, #0]
 8008c0e:	462a      	mov	r2, r5
 8008c10:	4b05      	ldr	r3, [pc, #20]	@ (8008c28 <_vfiprintf_r+0x228>)
 8008c12:	a904      	add	r1, sp, #16
 8008c14:	4630      	mov	r0, r6
 8008c16:	f000 f879 	bl	8008d0c <_printf_i>
 8008c1a:	e7e4      	b.n	8008be6 <_vfiprintf_r+0x1e6>
 8008c1c:	0800bd14 	.word	0x0800bd14
 8008c20:	0800bd1e 	.word	0x0800bd1e
 8008c24:	00000000 	.word	0x00000000
 8008c28:	080089db 	.word	0x080089db
 8008c2c:	0800bd1a 	.word	0x0800bd1a

08008c30 <_printf_common>:
 8008c30:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008c34:	4616      	mov	r6, r2
 8008c36:	4698      	mov	r8, r3
 8008c38:	688a      	ldr	r2, [r1, #8]
 8008c3a:	690b      	ldr	r3, [r1, #16]
 8008c3c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008c40:	4293      	cmp	r3, r2
 8008c42:	bfb8      	it	lt
 8008c44:	4613      	movlt	r3, r2
 8008c46:	6033      	str	r3, [r6, #0]
 8008c48:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008c4c:	4607      	mov	r7, r0
 8008c4e:	460c      	mov	r4, r1
 8008c50:	b10a      	cbz	r2, 8008c56 <_printf_common+0x26>
 8008c52:	3301      	adds	r3, #1
 8008c54:	6033      	str	r3, [r6, #0]
 8008c56:	6823      	ldr	r3, [r4, #0]
 8008c58:	0699      	lsls	r1, r3, #26
 8008c5a:	bf42      	ittt	mi
 8008c5c:	6833      	ldrmi	r3, [r6, #0]
 8008c5e:	3302      	addmi	r3, #2
 8008c60:	6033      	strmi	r3, [r6, #0]
 8008c62:	6825      	ldr	r5, [r4, #0]
 8008c64:	f015 0506 	ands.w	r5, r5, #6
 8008c68:	d106      	bne.n	8008c78 <_printf_common+0x48>
 8008c6a:	f104 0a19 	add.w	sl, r4, #25
 8008c6e:	68e3      	ldr	r3, [r4, #12]
 8008c70:	6832      	ldr	r2, [r6, #0]
 8008c72:	1a9b      	subs	r3, r3, r2
 8008c74:	42ab      	cmp	r3, r5
 8008c76:	dc26      	bgt.n	8008cc6 <_printf_common+0x96>
 8008c78:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008c7c:	6822      	ldr	r2, [r4, #0]
 8008c7e:	3b00      	subs	r3, #0
 8008c80:	bf18      	it	ne
 8008c82:	2301      	movne	r3, #1
 8008c84:	0692      	lsls	r2, r2, #26
 8008c86:	d42b      	bmi.n	8008ce0 <_printf_common+0xb0>
 8008c88:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008c8c:	4641      	mov	r1, r8
 8008c8e:	4638      	mov	r0, r7
 8008c90:	47c8      	blx	r9
 8008c92:	3001      	adds	r0, #1
 8008c94:	d01e      	beq.n	8008cd4 <_printf_common+0xa4>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	6922      	ldr	r2, [r4, #16]
 8008c9a:	f003 0306 	and.w	r3, r3, #6
 8008c9e:	2b04      	cmp	r3, #4
 8008ca0:	bf02      	ittt	eq
 8008ca2:	68e5      	ldreq	r5, [r4, #12]
 8008ca4:	6833      	ldreq	r3, [r6, #0]
 8008ca6:	1aed      	subeq	r5, r5, r3
 8008ca8:	68a3      	ldr	r3, [r4, #8]
 8008caa:	bf0c      	ite	eq
 8008cac:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008cb0:	2500      	movne	r5, #0
 8008cb2:	4293      	cmp	r3, r2
 8008cb4:	bfc4      	itt	gt
 8008cb6:	1a9b      	subgt	r3, r3, r2
 8008cb8:	18ed      	addgt	r5, r5, r3
 8008cba:	2600      	movs	r6, #0
 8008cbc:	341a      	adds	r4, #26
 8008cbe:	42b5      	cmp	r5, r6
 8008cc0:	d11a      	bne.n	8008cf8 <_printf_common+0xc8>
 8008cc2:	2000      	movs	r0, #0
 8008cc4:	e008      	b.n	8008cd8 <_printf_common+0xa8>
 8008cc6:	2301      	movs	r3, #1
 8008cc8:	4652      	mov	r2, sl
 8008cca:	4641      	mov	r1, r8
 8008ccc:	4638      	mov	r0, r7
 8008cce:	47c8      	blx	r9
 8008cd0:	3001      	adds	r0, #1
 8008cd2:	d103      	bne.n	8008cdc <_printf_common+0xac>
 8008cd4:	f04f 30ff 	mov.w	r0, #4294967295
 8008cd8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cdc:	3501      	adds	r5, #1
 8008cde:	e7c6      	b.n	8008c6e <_printf_common+0x3e>
 8008ce0:	18e1      	adds	r1, r4, r3
 8008ce2:	1c5a      	adds	r2, r3, #1
 8008ce4:	2030      	movs	r0, #48	@ 0x30
 8008ce6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008cea:	4422      	add	r2, r4
 8008cec:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008cf0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008cf4:	3302      	adds	r3, #2
 8008cf6:	e7c7      	b.n	8008c88 <_printf_common+0x58>
 8008cf8:	2301      	movs	r3, #1
 8008cfa:	4622      	mov	r2, r4
 8008cfc:	4641      	mov	r1, r8
 8008cfe:	4638      	mov	r0, r7
 8008d00:	47c8      	blx	r9
 8008d02:	3001      	adds	r0, #1
 8008d04:	d0e6      	beq.n	8008cd4 <_printf_common+0xa4>
 8008d06:	3601      	adds	r6, #1
 8008d08:	e7d9      	b.n	8008cbe <_printf_common+0x8e>
	...

08008d0c <_printf_i>:
 8008d0c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008d10:	7e0f      	ldrb	r7, [r1, #24]
 8008d12:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008d14:	2f78      	cmp	r7, #120	@ 0x78
 8008d16:	4691      	mov	r9, r2
 8008d18:	4680      	mov	r8, r0
 8008d1a:	460c      	mov	r4, r1
 8008d1c:	469a      	mov	sl, r3
 8008d1e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008d22:	d807      	bhi.n	8008d34 <_printf_i+0x28>
 8008d24:	2f62      	cmp	r7, #98	@ 0x62
 8008d26:	d80a      	bhi.n	8008d3e <_printf_i+0x32>
 8008d28:	2f00      	cmp	r7, #0
 8008d2a:	f000 80d1 	beq.w	8008ed0 <_printf_i+0x1c4>
 8008d2e:	2f58      	cmp	r7, #88	@ 0x58
 8008d30:	f000 80b8 	beq.w	8008ea4 <_printf_i+0x198>
 8008d34:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008d38:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008d3c:	e03a      	b.n	8008db4 <_printf_i+0xa8>
 8008d3e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008d42:	2b15      	cmp	r3, #21
 8008d44:	d8f6      	bhi.n	8008d34 <_printf_i+0x28>
 8008d46:	a101      	add	r1, pc, #4	@ (adr r1, 8008d4c <_printf_i+0x40>)
 8008d48:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008d4c:	08008da5 	.word	0x08008da5
 8008d50:	08008db9 	.word	0x08008db9
 8008d54:	08008d35 	.word	0x08008d35
 8008d58:	08008d35 	.word	0x08008d35
 8008d5c:	08008d35 	.word	0x08008d35
 8008d60:	08008d35 	.word	0x08008d35
 8008d64:	08008db9 	.word	0x08008db9
 8008d68:	08008d35 	.word	0x08008d35
 8008d6c:	08008d35 	.word	0x08008d35
 8008d70:	08008d35 	.word	0x08008d35
 8008d74:	08008d35 	.word	0x08008d35
 8008d78:	08008eb7 	.word	0x08008eb7
 8008d7c:	08008de3 	.word	0x08008de3
 8008d80:	08008e71 	.word	0x08008e71
 8008d84:	08008d35 	.word	0x08008d35
 8008d88:	08008d35 	.word	0x08008d35
 8008d8c:	08008ed9 	.word	0x08008ed9
 8008d90:	08008d35 	.word	0x08008d35
 8008d94:	08008de3 	.word	0x08008de3
 8008d98:	08008d35 	.word	0x08008d35
 8008d9c:	08008d35 	.word	0x08008d35
 8008da0:	08008e79 	.word	0x08008e79
 8008da4:	6833      	ldr	r3, [r6, #0]
 8008da6:	1d1a      	adds	r2, r3, #4
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	6032      	str	r2, [r6, #0]
 8008dac:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008db0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008db4:	2301      	movs	r3, #1
 8008db6:	e09c      	b.n	8008ef2 <_printf_i+0x1e6>
 8008db8:	6833      	ldr	r3, [r6, #0]
 8008dba:	6820      	ldr	r0, [r4, #0]
 8008dbc:	1d19      	adds	r1, r3, #4
 8008dbe:	6031      	str	r1, [r6, #0]
 8008dc0:	0606      	lsls	r6, r0, #24
 8008dc2:	d501      	bpl.n	8008dc8 <_printf_i+0xbc>
 8008dc4:	681d      	ldr	r5, [r3, #0]
 8008dc6:	e003      	b.n	8008dd0 <_printf_i+0xc4>
 8008dc8:	0645      	lsls	r5, r0, #25
 8008dca:	d5fb      	bpl.n	8008dc4 <_printf_i+0xb8>
 8008dcc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008dd0:	2d00      	cmp	r5, #0
 8008dd2:	da03      	bge.n	8008ddc <_printf_i+0xd0>
 8008dd4:	232d      	movs	r3, #45	@ 0x2d
 8008dd6:	426d      	negs	r5, r5
 8008dd8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008ddc:	4858      	ldr	r0, [pc, #352]	@ (8008f40 <_printf_i+0x234>)
 8008dde:	230a      	movs	r3, #10
 8008de0:	e011      	b.n	8008e06 <_printf_i+0xfa>
 8008de2:	6821      	ldr	r1, [r4, #0]
 8008de4:	6833      	ldr	r3, [r6, #0]
 8008de6:	0608      	lsls	r0, r1, #24
 8008de8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008dec:	d402      	bmi.n	8008df4 <_printf_i+0xe8>
 8008dee:	0649      	lsls	r1, r1, #25
 8008df0:	bf48      	it	mi
 8008df2:	b2ad      	uxthmi	r5, r5
 8008df4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008df6:	4852      	ldr	r0, [pc, #328]	@ (8008f40 <_printf_i+0x234>)
 8008df8:	6033      	str	r3, [r6, #0]
 8008dfa:	bf14      	ite	ne
 8008dfc:	230a      	movne	r3, #10
 8008dfe:	2308      	moveq	r3, #8
 8008e00:	2100      	movs	r1, #0
 8008e02:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008e06:	6866      	ldr	r6, [r4, #4]
 8008e08:	60a6      	str	r6, [r4, #8]
 8008e0a:	2e00      	cmp	r6, #0
 8008e0c:	db05      	blt.n	8008e1a <_printf_i+0x10e>
 8008e0e:	6821      	ldr	r1, [r4, #0]
 8008e10:	432e      	orrs	r6, r5
 8008e12:	f021 0104 	bic.w	r1, r1, #4
 8008e16:	6021      	str	r1, [r4, #0]
 8008e18:	d04b      	beq.n	8008eb2 <_printf_i+0x1a6>
 8008e1a:	4616      	mov	r6, r2
 8008e1c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008e20:	fb03 5711 	mls	r7, r3, r1, r5
 8008e24:	5dc7      	ldrb	r7, [r0, r7]
 8008e26:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008e2a:	462f      	mov	r7, r5
 8008e2c:	42bb      	cmp	r3, r7
 8008e2e:	460d      	mov	r5, r1
 8008e30:	d9f4      	bls.n	8008e1c <_printf_i+0x110>
 8008e32:	2b08      	cmp	r3, #8
 8008e34:	d10b      	bne.n	8008e4e <_printf_i+0x142>
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	07df      	lsls	r7, r3, #31
 8008e3a:	d508      	bpl.n	8008e4e <_printf_i+0x142>
 8008e3c:	6923      	ldr	r3, [r4, #16]
 8008e3e:	6861      	ldr	r1, [r4, #4]
 8008e40:	4299      	cmp	r1, r3
 8008e42:	bfde      	ittt	le
 8008e44:	2330      	movle	r3, #48	@ 0x30
 8008e46:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008e4a:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008e4e:	1b92      	subs	r2, r2, r6
 8008e50:	6122      	str	r2, [r4, #16]
 8008e52:	f8cd a000 	str.w	sl, [sp]
 8008e56:	464b      	mov	r3, r9
 8008e58:	aa03      	add	r2, sp, #12
 8008e5a:	4621      	mov	r1, r4
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	f7ff fee7 	bl	8008c30 <_printf_common>
 8008e62:	3001      	adds	r0, #1
 8008e64:	d14a      	bne.n	8008efc <_printf_i+0x1f0>
 8008e66:	f04f 30ff 	mov.w	r0, #4294967295
 8008e6a:	b004      	add	sp, #16
 8008e6c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008e70:	6823      	ldr	r3, [r4, #0]
 8008e72:	f043 0320 	orr.w	r3, r3, #32
 8008e76:	6023      	str	r3, [r4, #0]
 8008e78:	4832      	ldr	r0, [pc, #200]	@ (8008f44 <_printf_i+0x238>)
 8008e7a:	2778      	movs	r7, #120	@ 0x78
 8008e7c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008e80:	6823      	ldr	r3, [r4, #0]
 8008e82:	6831      	ldr	r1, [r6, #0]
 8008e84:	061f      	lsls	r7, r3, #24
 8008e86:	f851 5b04 	ldr.w	r5, [r1], #4
 8008e8a:	d402      	bmi.n	8008e92 <_printf_i+0x186>
 8008e8c:	065f      	lsls	r7, r3, #25
 8008e8e:	bf48      	it	mi
 8008e90:	b2ad      	uxthmi	r5, r5
 8008e92:	6031      	str	r1, [r6, #0]
 8008e94:	07d9      	lsls	r1, r3, #31
 8008e96:	bf44      	itt	mi
 8008e98:	f043 0320 	orrmi.w	r3, r3, #32
 8008e9c:	6023      	strmi	r3, [r4, #0]
 8008e9e:	b11d      	cbz	r5, 8008ea8 <_printf_i+0x19c>
 8008ea0:	2310      	movs	r3, #16
 8008ea2:	e7ad      	b.n	8008e00 <_printf_i+0xf4>
 8008ea4:	4826      	ldr	r0, [pc, #152]	@ (8008f40 <_printf_i+0x234>)
 8008ea6:	e7e9      	b.n	8008e7c <_printf_i+0x170>
 8008ea8:	6823      	ldr	r3, [r4, #0]
 8008eaa:	f023 0320 	bic.w	r3, r3, #32
 8008eae:	6023      	str	r3, [r4, #0]
 8008eb0:	e7f6      	b.n	8008ea0 <_printf_i+0x194>
 8008eb2:	4616      	mov	r6, r2
 8008eb4:	e7bd      	b.n	8008e32 <_printf_i+0x126>
 8008eb6:	6833      	ldr	r3, [r6, #0]
 8008eb8:	6825      	ldr	r5, [r4, #0]
 8008eba:	6961      	ldr	r1, [r4, #20]
 8008ebc:	1d18      	adds	r0, r3, #4
 8008ebe:	6030      	str	r0, [r6, #0]
 8008ec0:	062e      	lsls	r6, r5, #24
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	d501      	bpl.n	8008eca <_printf_i+0x1be>
 8008ec6:	6019      	str	r1, [r3, #0]
 8008ec8:	e002      	b.n	8008ed0 <_printf_i+0x1c4>
 8008eca:	0668      	lsls	r0, r5, #25
 8008ecc:	d5fb      	bpl.n	8008ec6 <_printf_i+0x1ba>
 8008ece:	8019      	strh	r1, [r3, #0]
 8008ed0:	2300      	movs	r3, #0
 8008ed2:	6123      	str	r3, [r4, #16]
 8008ed4:	4616      	mov	r6, r2
 8008ed6:	e7bc      	b.n	8008e52 <_printf_i+0x146>
 8008ed8:	6833      	ldr	r3, [r6, #0]
 8008eda:	1d1a      	adds	r2, r3, #4
 8008edc:	6032      	str	r2, [r6, #0]
 8008ede:	681e      	ldr	r6, [r3, #0]
 8008ee0:	6862      	ldr	r2, [r4, #4]
 8008ee2:	2100      	movs	r1, #0
 8008ee4:	4630      	mov	r0, r6
 8008ee6:	f7f7 f973 	bl	80001d0 <memchr>
 8008eea:	b108      	cbz	r0, 8008ef0 <_printf_i+0x1e4>
 8008eec:	1b80      	subs	r0, r0, r6
 8008eee:	6060      	str	r0, [r4, #4]
 8008ef0:	6863      	ldr	r3, [r4, #4]
 8008ef2:	6123      	str	r3, [r4, #16]
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008efa:	e7aa      	b.n	8008e52 <_printf_i+0x146>
 8008efc:	6923      	ldr	r3, [r4, #16]
 8008efe:	4632      	mov	r2, r6
 8008f00:	4649      	mov	r1, r9
 8008f02:	4640      	mov	r0, r8
 8008f04:	47d0      	blx	sl
 8008f06:	3001      	adds	r0, #1
 8008f08:	d0ad      	beq.n	8008e66 <_printf_i+0x15a>
 8008f0a:	6823      	ldr	r3, [r4, #0]
 8008f0c:	079b      	lsls	r3, r3, #30
 8008f0e:	d413      	bmi.n	8008f38 <_printf_i+0x22c>
 8008f10:	68e0      	ldr	r0, [r4, #12]
 8008f12:	9b03      	ldr	r3, [sp, #12]
 8008f14:	4298      	cmp	r0, r3
 8008f16:	bfb8      	it	lt
 8008f18:	4618      	movlt	r0, r3
 8008f1a:	e7a6      	b.n	8008e6a <_printf_i+0x15e>
 8008f1c:	2301      	movs	r3, #1
 8008f1e:	4632      	mov	r2, r6
 8008f20:	4649      	mov	r1, r9
 8008f22:	4640      	mov	r0, r8
 8008f24:	47d0      	blx	sl
 8008f26:	3001      	adds	r0, #1
 8008f28:	d09d      	beq.n	8008e66 <_printf_i+0x15a>
 8008f2a:	3501      	adds	r5, #1
 8008f2c:	68e3      	ldr	r3, [r4, #12]
 8008f2e:	9903      	ldr	r1, [sp, #12]
 8008f30:	1a5b      	subs	r3, r3, r1
 8008f32:	42ab      	cmp	r3, r5
 8008f34:	dcf2      	bgt.n	8008f1c <_printf_i+0x210>
 8008f36:	e7eb      	b.n	8008f10 <_printf_i+0x204>
 8008f38:	2500      	movs	r5, #0
 8008f3a:	f104 0619 	add.w	r6, r4, #25
 8008f3e:	e7f5      	b.n	8008f2c <_printf_i+0x220>
 8008f40:	0800bd25 	.word	0x0800bd25
 8008f44:	0800bd36 	.word	0x0800bd36

08008f48 <__sflush_r>:
 8008f48:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008f4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008f50:	0716      	lsls	r6, r2, #28
 8008f52:	4605      	mov	r5, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	d454      	bmi.n	8009002 <__sflush_r+0xba>
 8008f58:	684b      	ldr	r3, [r1, #4]
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	dc02      	bgt.n	8008f64 <__sflush_r+0x1c>
 8008f5e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	dd48      	ble.n	8008ff6 <__sflush_r+0xae>
 8008f64:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f66:	2e00      	cmp	r6, #0
 8008f68:	d045      	beq.n	8008ff6 <__sflush_r+0xae>
 8008f6a:	2300      	movs	r3, #0
 8008f6c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008f70:	682f      	ldr	r7, [r5, #0]
 8008f72:	6a21      	ldr	r1, [r4, #32]
 8008f74:	602b      	str	r3, [r5, #0]
 8008f76:	d030      	beq.n	8008fda <__sflush_r+0x92>
 8008f78:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008f7a:	89a3      	ldrh	r3, [r4, #12]
 8008f7c:	0759      	lsls	r1, r3, #29
 8008f7e:	d505      	bpl.n	8008f8c <__sflush_r+0x44>
 8008f80:	6863      	ldr	r3, [r4, #4]
 8008f82:	1ad2      	subs	r2, r2, r3
 8008f84:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008f86:	b10b      	cbz	r3, 8008f8c <__sflush_r+0x44>
 8008f88:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008f8a:	1ad2      	subs	r2, r2, r3
 8008f8c:	2300      	movs	r3, #0
 8008f8e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008f90:	6a21      	ldr	r1, [r4, #32]
 8008f92:	4628      	mov	r0, r5
 8008f94:	47b0      	blx	r6
 8008f96:	1c43      	adds	r3, r0, #1
 8008f98:	89a3      	ldrh	r3, [r4, #12]
 8008f9a:	d106      	bne.n	8008faa <__sflush_r+0x62>
 8008f9c:	6829      	ldr	r1, [r5, #0]
 8008f9e:	291d      	cmp	r1, #29
 8008fa0:	d82b      	bhi.n	8008ffa <__sflush_r+0xb2>
 8008fa2:	4a2a      	ldr	r2, [pc, #168]	@ (800904c <__sflush_r+0x104>)
 8008fa4:	40ca      	lsrs	r2, r1
 8008fa6:	07d6      	lsls	r6, r2, #31
 8008fa8:	d527      	bpl.n	8008ffa <__sflush_r+0xb2>
 8008faa:	2200      	movs	r2, #0
 8008fac:	6062      	str	r2, [r4, #4]
 8008fae:	04d9      	lsls	r1, r3, #19
 8008fb0:	6922      	ldr	r2, [r4, #16]
 8008fb2:	6022      	str	r2, [r4, #0]
 8008fb4:	d504      	bpl.n	8008fc0 <__sflush_r+0x78>
 8008fb6:	1c42      	adds	r2, r0, #1
 8008fb8:	d101      	bne.n	8008fbe <__sflush_r+0x76>
 8008fba:	682b      	ldr	r3, [r5, #0]
 8008fbc:	b903      	cbnz	r3, 8008fc0 <__sflush_r+0x78>
 8008fbe:	6560      	str	r0, [r4, #84]	@ 0x54
 8008fc0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008fc2:	602f      	str	r7, [r5, #0]
 8008fc4:	b1b9      	cbz	r1, 8008ff6 <__sflush_r+0xae>
 8008fc6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008fca:	4299      	cmp	r1, r3
 8008fcc:	d002      	beq.n	8008fd4 <__sflush_r+0x8c>
 8008fce:	4628      	mov	r0, r5
 8008fd0:	f7ff fbf4 	bl	80087bc <_free_r>
 8008fd4:	2300      	movs	r3, #0
 8008fd6:	6363      	str	r3, [r4, #52]	@ 0x34
 8008fd8:	e00d      	b.n	8008ff6 <__sflush_r+0xae>
 8008fda:	2301      	movs	r3, #1
 8008fdc:	4628      	mov	r0, r5
 8008fde:	47b0      	blx	r6
 8008fe0:	4602      	mov	r2, r0
 8008fe2:	1c50      	adds	r0, r2, #1
 8008fe4:	d1c9      	bne.n	8008f7a <__sflush_r+0x32>
 8008fe6:	682b      	ldr	r3, [r5, #0]
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d0c6      	beq.n	8008f7a <__sflush_r+0x32>
 8008fec:	2b1d      	cmp	r3, #29
 8008fee:	d001      	beq.n	8008ff4 <__sflush_r+0xac>
 8008ff0:	2b16      	cmp	r3, #22
 8008ff2:	d11e      	bne.n	8009032 <__sflush_r+0xea>
 8008ff4:	602f      	str	r7, [r5, #0]
 8008ff6:	2000      	movs	r0, #0
 8008ff8:	e022      	b.n	8009040 <__sflush_r+0xf8>
 8008ffa:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008ffe:	b21b      	sxth	r3, r3
 8009000:	e01b      	b.n	800903a <__sflush_r+0xf2>
 8009002:	690f      	ldr	r7, [r1, #16]
 8009004:	2f00      	cmp	r7, #0
 8009006:	d0f6      	beq.n	8008ff6 <__sflush_r+0xae>
 8009008:	0793      	lsls	r3, r2, #30
 800900a:	680e      	ldr	r6, [r1, #0]
 800900c:	bf08      	it	eq
 800900e:	694b      	ldreq	r3, [r1, #20]
 8009010:	600f      	str	r7, [r1, #0]
 8009012:	bf18      	it	ne
 8009014:	2300      	movne	r3, #0
 8009016:	eba6 0807 	sub.w	r8, r6, r7
 800901a:	608b      	str	r3, [r1, #8]
 800901c:	f1b8 0f00 	cmp.w	r8, #0
 8009020:	dde9      	ble.n	8008ff6 <__sflush_r+0xae>
 8009022:	6a21      	ldr	r1, [r4, #32]
 8009024:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009026:	4643      	mov	r3, r8
 8009028:	463a      	mov	r2, r7
 800902a:	4628      	mov	r0, r5
 800902c:	47b0      	blx	r6
 800902e:	2800      	cmp	r0, #0
 8009030:	dc08      	bgt.n	8009044 <__sflush_r+0xfc>
 8009032:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009036:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800903a:	81a3      	strh	r3, [r4, #12]
 800903c:	f04f 30ff 	mov.w	r0, #4294967295
 8009040:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009044:	4407      	add	r7, r0
 8009046:	eba8 0800 	sub.w	r8, r8, r0
 800904a:	e7e7      	b.n	800901c <__sflush_r+0xd4>
 800904c:	20400001 	.word	0x20400001

08009050 <_fflush_r>:
 8009050:	b538      	push	{r3, r4, r5, lr}
 8009052:	690b      	ldr	r3, [r1, #16]
 8009054:	4605      	mov	r5, r0
 8009056:	460c      	mov	r4, r1
 8009058:	b913      	cbnz	r3, 8009060 <_fflush_r+0x10>
 800905a:	2500      	movs	r5, #0
 800905c:	4628      	mov	r0, r5
 800905e:	bd38      	pop	{r3, r4, r5, pc}
 8009060:	b118      	cbz	r0, 800906a <_fflush_r+0x1a>
 8009062:	6a03      	ldr	r3, [r0, #32]
 8009064:	b90b      	cbnz	r3, 800906a <_fflush_r+0x1a>
 8009066:	f7ff f933 	bl	80082d0 <__sinit>
 800906a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800906e:	2b00      	cmp	r3, #0
 8009070:	d0f3      	beq.n	800905a <_fflush_r+0xa>
 8009072:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009074:	07d0      	lsls	r0, r2, #31
 8009076:	d404      	bmi.n	8009082 <_fflush_r+0x32>
 8009078:	0599      	lsls	r1, r3, #22
 800907a:	d402      	bmi.n	8009082 <_fflush_r+0x32>
 800907c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800907e:	f7ff fb8c 	bl	800879a <__retarget_lock_acquire_recursive>
 8009082:	4628      	mov	r0, r5
 8009084:	4621      	mov	r1, r4
 8009086:	f7ff ff5f 	bl	8008f48 <__sflush_r>
 800908a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800908c:	07da      	lsls	r2, r3, #31
 800908e:	4605      	mov	r5, r0
 8009090:	d4e4      	bmi.n	800905c <_fflush_r+0xc>
 8009092:	89a3      	ldrh	r3, [r4, #12]
 8009094:	059b      	lsls	r3, r3, #22
 8009096:	d4e1      	bmi.n	800905c <_fflush_r+0xc>
 8009098:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800909a:	f7ff fb7f 	bl	800879c <__retarget_lock_release_recursive>
 800909e:	e7dd      	b.n	800905c <_fflush_r+0xc>

080090a0 <__swhatbuf_r>:
 80090a0:	b570      	push	{r4, r5, r6, lr}
 80090a2:	460c      	mov	r4, r1
 80090a4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80090a8:	2900      	cmp	r1, #0
 80090aa:	b096      	sub	sp, #88	@ 0x58
 80090ac:	4615      	mov	r5, r2
 80090ae:	461e      	mov	r6, r3
 80090b0:	da0d      	bge.n	80090ce <__swhatbuf_r+0x2e>
 80090b2:	89a3      	ldrh	r3, [r4, #12]
 80090b4:	f013 0f80 	tst.w	r3, #128	@ 0x80
 80090b8:	f04f 0100 	mov.w	r1, #0
 80090bc:	bf14      	ite	ne
 80090be:	2340      	movne	r3, #64	@ 0x40
 80090c0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80090c4:	2000      	movs	r0, #0
 80090c6:	6031      	str	r1, [r6, #0]
 80090c8:	602b      	str	r3, [r5, #0]
 80090ca:	b016      	add	sp, #88	@ 0x58
 80090cc:	bd70      	pop	{r4, r5, r6, pc}
 80090ce:	466a      	mov	r2, sp
 80090d0:	f000 f848 	bl	8009164 <_fstat_r>
 80090d4:	2800      	cmp	r0, #0
 80090d6:	dbec      	blt.n	80090b2 <__swhatbuf_r+0x12>
 80090d8:	9901      	ldr	r1, [sp, #4]
 80090da:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80090de:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80090e2:	4259      	negs	r1, r3
 80090e4:	4159      	adcs	r1, r3
 80090e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80090ea:	e7eb      	b.n	80090c4 <__swhatbuf_r+0x24>

080090ec <__smakebuf_r>:
 80090ec:	898b      	ldrh	r3, [r1, #12]
 80090ee:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80090f0:	079d      	lsls	r5, r3, #30
 80090f2:	4606      	mov	r6, r0
 80090f4:	460c      	mov	r4, r1
 80090f6:	d507      	bpl.n	8009108 <__smakebuf_r+0x1c>
 80090f8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80090fc:	6023      	str	r3, [r4, #0]
 80090fe:	6123      	str	r3, [r4, #16]
 8009100:	2301      	movs	r3, #1
 8009102:	6163      	str	r3, [r4, #20]
 8009104:	b003      	add	sp, #12
 8009106:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009108:	ab01      	add	r3, sp, #4
 800910a:	466a      	mov	r2, sp
 800910c:	f7ff ffc8 	bl	80090a0 <__swhatbuf_r>
 8009110:	9f00      	ldr	r7, [sp, #0]
 8009112:	4605      	mov	r5, r0
 8009114:	4639      	mov	r1, r7
 8009116:	4630      	mov	r0, r6
 8009118:	f7ff fbbc 	bl	8008894 <_malloc_r>
 800911c:	b948      	cbnz	r0, 8009132 <__smakebuf_r+0x46>
 800911e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009122:	059a      	lsls	r2, r3, #22
 8009124:	d4ee      	bmi.n	8009104 <__smakebuf_r+0x18>
 8009126:	f023 0303 	bic.w	r3, r3, #3
 800912a:	f043 0302 	orr.w	r3, r3, #2
 800912e:	81a3      	strh	r3, [r4, #12]
 8009130:	e7e2      	b.n	80090f8 <__smakebuf_r+0xc>
 8009132:	89a3      	ldrh	r3, [r4, #12]
 8009134:	6020      	str	r0, [r4, #0]
 8009136:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800913a:	81a3      	strh	r3, [r4, #12]
 800913c:	9b01      	ldr	r3, [sp, #4]
 800913e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009142:	b15b      	cbz	r3, 800915c <__smakebuf_r+0x70>
 8009144:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009148:	4630      	mov	r0, r6
 800914a:	f000 f81d 	bl	8009188 <_isatty_r>
 800914e:	b128      	cbz	r0, 800915c <__smakebuf_r+0x70>
 8009150:	89a3      	ldrh	r3, [r4, #12]
 8009152:	f023 0303 	bic.w	r3, r3, #3
 8009156:	f043 0301 	orr.w	r3, r3, #1
 800915a:	81a3      	strh	r3, [r4, #12]
 800915c:	89a3      	ldrh	r3, [r4, #12]
 800915e:	431d      	orrs	r5, r3
 8009160:	81a5      	strh	r5, [r4, #12]
 8009162:	e7cf      	b.n	8009104 <__smakebuf_r+0x18>

08009164 <_fstat_r>:
 8009164:	b538      	push	{r3, r4, r5, lr}
 8009166:	4d07      	ldr	r5, [pc, #28]	@ (8009184 <_fstat_r+0x20>)
 8009168:	2300      	movs	r3, #0
 800916a:	4604      	mov	r4, r0
 800916c:	4608      	mov	r0, r1
 800916e:	4611      	mov	r1, r2
 8009170:	602b      	str	r3, [r5, #0]
 8009172:	f7f9 fe58 	bl	8002e26 <_fstat>
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	d102      	bne.n	8009180 <_fstat_r+0x1c>
 800917a:	682b      	ldr	r3, [r5, #0]
 800917c:	b103      	cbz	r3, 8009180 <_fstat_r+0x1c>
 800917e:	6023      	str	r3, [r4, #0]
 8009180:	bd38      	pop	{r3, r4, r5, pc}
 8009182:	bf00      	nop
 8009184:	20004cc4 	.word	0x20004cc4

08009188 <_isatty_r>:
 8009188:	b538      	push	{r3, r4, r5, lr}
 800918a:	4d06      	ldr	r5, [pc, #24]	@ (80091a4 <_isatty_r+0x1c>)
 800918c:	2300      	movs	r3, #0
 800918e:	4604      	mov	r4, r0
 8009190:	4608      	mov	r0, r1
 8009192:	602b      	str	r3, [r5, #0]
 8009194:	f7f9 fe57 	bl	8002e46 <_isatty>
 8009198:	1c43      	adds	r3, r0, #1
 800919a:	d102      	bne.n	80091a2 <_isatty_r+0x1a>
 800919c:	682b      	ldr	r3, [r5, #0]
 800919e:	b103      	cbz	r3, 80091a2 <_isatty_r+0x1a>
 80091a0:	6023      	str	r3, [r4, #0]
 80091a2:	bd38      	pop	{r3, r4, r5, pc}
 80091a4:	20004cc4 	.word	0x20004cc4

080091a8 <_sbrk_r>:
 80091a8:	b538      	push	{r3, r4, r5, lr}
 80091aa:	4d06      	ldr	r5, [pc, #24]	@ (80091c4 <_sbrk_r+0x1c>)
 80091ac:	2300      	movs	r3, #0
 80091ae:	4604      	mov	r4, r0
 80091b0:	4608      	mov	r0, r1
 80091b2:	602b      	str	r3, [r5, #0]
 80091b4:	f7f9 fe60 	bl	8002e78 <_sbrk>
 80091b8:	1c43      	adds	r3, r0, #1
 80091ba:	d102      	bne.n	80091c2 <_sbrk_r+0x1a>
 80091bc:	682b      	ldr	r3, [r5, #0]
 80091be:	b103      	cbz	r3, 80091c2 <_sbrk_r+0x1a>
 80091c0:	6023      	str	r3, [r4, #0]
 80091c2:	bd38      	pop	{r3, r4, r5, pc}
 80091c4:	20004cc4 	.word	0x20004cc4

080091c8 <_init>:
 80091c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091ca:	bf00      	nop
 80091cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091ce:	bc08      	pop	{r3}
 80091d0:	469e      	mov	lr, r3
 80091d2:	4770      	bx	lr

080091d4 <_fini>:
 80091d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80091d6:	bf00      	nop
 80091d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80091da:	bc08      	pop	{r3}
 80091dc:	469e      	mov	lr, r3
 80091de:	4770      	bx	lr
