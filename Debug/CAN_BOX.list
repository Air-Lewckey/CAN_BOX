
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008eb0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000280c  08009040  08009040  0000a040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b84c  0800b84c  0000d06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b84c  0800b84c  0000c84c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b854  0800b854  0000d06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b854  0800b854  0000c854  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b858  0800b858  0000c858  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800b85c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000d06c  2**0
                  CONTENTS
 10 .bss          00004c68  2000006c  2000006c  0000d06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cd4  20004cd4  0000d06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000d06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b9dd  00000000  00000000  0000d09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7f  00000000  00000000  00028a79  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001868  00000000  00000000  0002c6f8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00001313  00000000  00000000  0002df60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f88  00000000  00000000  0002f273  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001aae9  00000000  00000000  000541fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da725  00000000  00000000  0006ece4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00149409  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006eec  00000000  00000000  0014944c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  00150338  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08009028 	.word	0x08009028

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08009028 	.word	0x08009028

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <CAN_App_Init>:
  * @brief  CAN应用初始化
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // 初始化MCP2515 (500Kbps波特率)
    if (MCP2515_Init(MCP2515_BAUD_500K) != MCP2515_OK) {
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 ff6d 	bl	8001480 <MCP2515_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d00c      	beq.n	80005c6 <CAN_App_Init+0x2a>
        printf("MCP2515 initialization failed!\r\n");
 80005ac:	4812      	ldr	r0, [pc, #72]	@ (80005f8 <CAN_App_Init+0x5c>)
 80005ae:	f007 fe5d 	bl	800826c <puts>
        printf("CAN application initialization failed!\r\n");
 80005b2:	4812      	ldr	r0, [pc, #72]	@ (80005fc <CAN_App_Init+0x60>)
 80005b4:	f007 fe5a 	bl	800826c <puts>
        
        printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 80005b8:	4811      	ldr	r0, [pc, #68]	@ (8000600 <CAN_App_Init+0x64>)
 80005ba:	f007 fe57 	bl	800826c <puts>
        
        // 调用初始化失败诊断函数
        MCP2515_InitFailureDiagnosis();
 80005be:	f002 f877 	bl	80026b0 <MCP2515_InitFailureDiagnosis>
        
        return CAN_APP_ERROR;
 80005c2:	2301      	movs	r3, #1
 80005c4:	e015      	b.n	80005f2 <CAN_App_Init+0x56>
    }
    
    printf("MCP2515 initialization successful!\r\n");
 80005c6:	480f      	ldr	r0, [pc, #60]	@ (8000604 <CAN_App_Init+0x68>)
 80005c8:	f007 fe50 	bl	800826c <puts>
    
    // 配置接收过滤器 (接收所有消息)
    MCP2515_SetMask(0, 0x00000000, 0);  // 掩码0: 接收所有标准帧
 80005cc:	2200      	movs	r2, #0
 80005ce:	2100      	movs	r1, #0
 80005d0:	2000      	movs	r0, #0
 80005d2:	f000 ffc5 	bl	8001560 <MCP2515_SetMask>
    MCP2515_SetMask(1, 0x00000000, 0);  // 掩码1: 接收所有标准帧
 80005d6:	2200      	movs	r2, #0
 80005d8:	2100      	movs	r1, #0
 80005da:	2001      	movs	r0, #1
 80005dc:	f000 ffc0 	bl	8001560 <MCP2515_SetMask>
    
    // 打印初始状态
    MCP2515_PrintStatus();
 80005e0:	f001 fa22 	bl	8001a28 <MCP2515_PrintStatus>
    
    can_app_initialized = 1;
 80005e4:	4b08      	ldr	r3, [pc, #32]	@ (8000608 <CAN_App_Init+0x6c>)
 80005e6:	2201      	movs	r2, #1
 80005e8:	701a      	strb	r2, [r3, #0]
    
    printf("CAN application initialization completed!\r\n");
 80005ea:	4808      	ldr	r0, [pc, #32]	@ (800060c <CAN_App_Init+0x70>)
 80005ec:	f007 fe3e 	bl	800826c <puts>
    return CAN_APP_OK;
 80005f0:	2300      	movs	r3, #0
}
 80005f2:	4618      	mov	r0, r3
 80005f4:	bd80      	pop	{r7, pc}
 80005f6:	bf00      	nop
 80005f8:	08009040 	.word	0x08009040
 80005fc:	08009060 	.word	0x08009060
 8000600:	08009088 	.word	0x08009088
 8000604:	080090c8 	.word	0x080090c8
 8000608:	20000094 	.word	0x20000094
 800060c:	080090ec 	.word	0x080090ec

08000610 <CAN_App_GetStats>:
  * @brief  获取CAN应用统计信息
  * @param  stats: 统计信息结构体指针
  * @retval None
  */
void CAN_App_GetStats(CAN_App_Stats_t *stats)
{
 8000610:	b480      	push	{r7}
 8000612:	b083      	sub	sp, #12
 8000614:	af00      	add	r7, sp, #0
 8000616:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000618:	687b      	ldr	r3, [r7, #4]
 800061a:	2b00      	cmp	r3, #0
 800061c:	d00f      	beq.n	800063e <CAN_App_GetStats+0x2e>
        stats->tx_count = can_tx_counter;
 800061e:	4b0b      	ldr	r3, [pc, #44]	@ (800064c <CAN_App_GetStats+0x3c>)
 8000620:	681a      	ldr	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	601a      	str	r2, [r3, #0]
        stats->rx_count = can_rx_counter;
 8000626:	4b0a      	ldr	r3, [pc, #40]	@ (8000650 <CAN_App_GetStats+0x40>)
 8000628:	681a      	ldr	r2, [r3, #0]
 800062a:	687b      	ldr	r3, [r7, #4]
 800062c:	605a      	str	r2, [r3, #4]
        stats->error_count = can_error_counter;
 800062e:	4b09      	ldr	r3, [pc, #36]	@ (8000654 <CAN_App_GetStats+0x44>)
 8000630:	681a      	ldr	r2, [r3, #0]
 8000632:	687b      	ldr	r3, [r7, #4]
 8000634:	609a      	str	r2, [r3, #8]
        stats->initialized = can_app_initialized;
 8000636:	4b08      	ldr	r3, [pc, #32]	@ (8000658 <CAN_App_GetStats+0x48>)
 8000638:	781a      	ldrb	r2, [r3, #0]
 800063a:	687b      	ldr	r3, [r7, #4]
 800063c:	751a      	strb	r2, [r3, #20]
    }
}
 800063e:	bf00      	nop
 8000640:	370c      	adds	r7, #12
 8000642:	46bd      	mov	sp, r7
 8000644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000648:	4770      	bx	lr
 800064a:	bf00      	nop
 800064c:	20000088 	.word	0x20000088
 8000650:	2000008c 	.word	0x2000008c
 8000654:	20000090 	.word	0x20000090
 8000658:	20000094 	.word	0x20000094

0800065c <CAN_SendTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANSendTask中调用
  */
void CAN_SendTask_Main(void *argument)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	b08c      	sub	sp, #48	@ 0x30
 8000660:	af00      	add	r7, sp, #0
 8000662:	6078      	str	r0, [r7, #4]
    uint32_t last_heartbeat = 0;
 8000664:	2300      	movs	r3, #0
 8000666:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t last_data_send = 0;
 8000668:	2300      	movs	r3, #0
 800066a:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_time;
    
    printf("CAN send task started\r\n");
 800066c:	4826      	ldr	r0, [pc, #152]	@ (8000708 <CAN_SendTask_Main+0xac>)
 800066e:	f007 fdfd 	bl	800826c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 8000672:	e002      	b.n	800067a <CAN_SendTask_Main+0x1e>
        osDelay(100);
 8000674:	2064      	movs	r0, #100	@ 0x64
 8000676:	f004 fe6f 	bl	8005358 <osDelay>
    while (!can_app_initialized) {
 800067a:	4b24      	ldr	r3, [pc, #144]	@ (800070c <CAN_SendTask_Main+0xb0>)
 800067c:	781b      	ldrb	r3, [r3, #0]
 800067e:	2b00      	cmp	r3, #0
 8000680:	d0f8      	beq.n	8000674 <CAN_SendTask_Main+0x18>
    }
    
    for (;;) {
        current_time = HAL_GetTick();
 8000682:	f002 fbd1 	bl	8002e28 <HAL_GetTick>
 8000686:	6278      	str	r0, [r7, #36]	@ 0x24
        
        // 每1秒发送一次心跳消息
        if ((current_time - last_heartbeat) >= 1000) {
 8000688:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800068a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800068c:	1ad3      	subs	r3, r2, r3
 800068e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8000692:	d303      	bcc.n	800069c <CAN_SendTask_Main+0x40>
            CAN_SendHeartbeat();
 8000694:	f000 f846 	bl	8000724 <CAN_SendHeartbeat>
            last_heartbeat = current_time;
 8000698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800069a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        
        // 每2秒发送一次测试数据
        if ((current_time - last_data_send) >= 2000) {
 800069c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800069e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80006a0:	1ad3      	subs	r3, r2, r3
 80006a2:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80006a6:	d303      	bcc.n	80006b0 <CAN_SendTask_Main+0x54>
            CAN_SendTestData();
 80006a8:	f000 f892 	bl	80007d0 <CAN_SendTestData>
            last_data_send = current_time;
 80006ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80006ae:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        // 检查是否有来自队列的发送请求
        CAN_QueueMessage_t queue_msg;
        if (osMessageQueueGet(myQueue01Handle, &queue_msg, NULL, 10) == osOK) {
 80006b0:	4b17      	ldr	r3, [pc, #92]	@ (8000710 <CAN_SendTask_Main+0xb4>)
 80006b2:	6818      	ldr	r0, [r3, #0]
 80006b4:	f107 010c 	add.w	r1, r7, #12
 80006b8:	230a      	movs	r3, #10
 80006ba:	2200      	movs	r2, #0
 80006bc:	f004 feda 	bl	8005474 <osMessageQueueGet>
 80006c0:	4603      	mov	r3, r0
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	d11c      	bne.n	8000700 <CAN_SendTask_Main+0xa4>
            // 处理队列中的发送请求
            if (MCP2515_SendMessage(&queue_msg.message) == MCP2515_OK) {
 80006c6:	f107 030c 	add.w	r3, r7, #12
 80006ca:	4618      	mov	r0, r3
 80006cc:	f000 ffcc 	bl	8001668 <MCP2515_SendMessage>
 80006d0:	4603      	mov	r3, r0
 80006d2:	2b00      	cmp	r3, #0
 80006d4:	d10a      	bne.n	80006ec <CAN_SendTask_Main+0x90>
                can_tx_counter++;
 80006d6:	4b0f      	ldr	r3, [pc, #60]	@ (8000714 <CAN_SendTask_Main+0xb8>)
 80006d8:	681b      	ldr	r3, [r3, #0]
 80006da:	3301      	adds	r3, #1
 80006dc:	4a0d      	ldr	r2, [pc, #52]	@ (8000714 <CAN_SendTask_Main+0xb8>)
 80006de:	6013      	str	r3, [r2, #0]
                printf("Queue message sent successfully, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006e0:	68fb      	ldr	r3, [r7, #12]
 80006e2:	4619      	mov	r1, r3
 80006e4:	480c      	ldr	r0, [pc, #48]	@ (8000718 <CAN_SendTask_Main+0xbc>)
 80006e6:	f007 fd59 	bl	800819c <iprintf>
 80006ea:	e009      	b.n	8000700 <CAN_SendTask_Main+0xa4>
            } else {
                can_error_counter++;
 80006ec:	4b0b      	ldr	r3, [pc, #44]	@ (800071c <CAN_SendTask_Main+0xc0>)
 80006ee:	681b      	ldr	r3, [r3, #0]
 80006f0:	3301      	adds	r3, #1
 80006f2:	4a0a      	ldr	r2, [pc, #40]	@ (800071c <CAN_SendTask_Main+0xc0>)
 80006f4:	6013      	str	r3, [r2, #0]
                printf("Queue message send failed, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006f6:	68fb      	ldr	r3, [r7, #12]
 80006f8:	4619      	mov	r1, r3
 80006fa:	4809      	ldr	r0, [pc, #36]	@ (8000720 <CAN_SendTask_Main+0xc4>)
 80006fc:	f007 fd4e 	bl	800819c <iprintf>
            }
        }
        
        osDelay(50);  // 50ms周期
 8000700:	2032      	movs	r0, #50	@ 0x32
 8000702:	f004 fe29 	bl	8005358 <osDelay>
    for (;;) {
 8000706:	e7bc      	b.n	8000682 <CAN_SendTask_Main+0x26>
 8000708:	08009118 	.word	0x08009118
 800070c:	20000094 	.word	0x20000094
 8000710:	20000144 	.word	0x20000144
 8000714:	20000088 	.word	0x20000088
 8000718:	08009130 	.word	0x08009130
 800071c:	20000090 	.word	0x20000090
 8000720:	08009160 	.word	0x08009160

08000724 <CAN_SendHeartbeat>:
  * @brief  发送心跳消息
  * @param  None
  * @retval None
  */
static void CAN_SendHeartbeat(void)
{
 8000724:	b580      	push	{r7, lr}
 8000726:	b084      	sub	sp, #16
 8000728:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t heartbeat;
    
    // 构造心跳消息
    heartbeat.id = CAN_HEARTBEAT_ID;
 800072a:	f44f 7380 	mov.w	r3, #256	@ 0x100
 800072e:	603b      	str	r3, [r7, #0]
    heartbeat.ide = 0;  // 标准帧
 8000730:	2300      	movs	r3, #0
 8000732:	713b      	strb	r3, [r7, #4]
    heartbeat.rtr = 0;  // 数据帧
 8000734:	2300      	movs	r3, #0
 8000736:	717b      	strb	r3, [r7, #5]
    heartbeat.dlc = 8;  // 8字节数据
 8000738:	2308      	movs	r3, #8
 800073a:	71bb      	strb	r3, [r7, #6]
    
    // 填充心跳数据
    heartbeat.data[0] = 0xAA;  // 心跳标识
 800073c:	23aa      	movs	r3, #170	@ 0xaa
 800073e:	71fb      	strb	r3, [r7, #7]
    heartbeat.data[1] = 0x55;
 8000740:	2355      	movs	r3, #85	@ 0x55
 8000742:	723b      	strb	r3, [r7, #8]
    heartbeat.data[2] = (uint8_t)(can_tx_counter >> 24);
 8000744:	4b1e      	ldr	r3, [pc, #120]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	0e1b      	lsrs	r3, r3, #24
 800074a:	b2db      	uxtb	r3, r3
 800074c:	727b      	strb	r3, [r7, #9]
    heartbeat.data[3] = (uint8_t)(can_tx_counter >> 16);
 800074e:	4b1c      	ldr	r3, [pc, #112]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000750:	681b      	ldr	r3, [r3, #0]
 8000752:	0c1b      	lsrs	r3, r3, #16
 8000754:	b2db      	uxtb	r3, r3
 8000756:	72bb      	strb	r3, [r7, #10]
    heartbeat.data[4] = (uint8_t)(can_tx_counter >> 8);
 8000758:	4b19      	ldr	r3, [pc, #100]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 800075a:	681b      	ldr	r3, [r3, #0]
 800075c:	0a1b      	lsrs	r3, r3, #8
 800075e:	b2db      	uxtb	r3, r3
 8000760:	72fb      	strb	r3, [r7, #11]
    heartbeat.data[5] = (uint8_t)can_tx_counter;
 8000762:	4b17      	ldr	r3, [pc, #92]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000764:	681b      	ldr	r3, [r3, #0]
 8000766:	b2db      	uxtb	r3, r3
 8000768:	733b      	strb	r3, [r7, #12]
    heartbeat.data[6] = (uint8_t)(HAL_GetTick() >> 8);
 800076a:	f002 fb5d 	bl	8002e28 <HAL_GetTick>
 800076e:	4603      	mov	r3, r0
 8000770:	0a1b      	lsrs	r3, r3, #8
 8000772:	b2db      	uxtb	r3, r3
 8000774:	737b      	strb	r3, [r7, #13]
    heartbeat.data[7] = (uint8_t)HAL_GetTick();
 8000776:	f002 fb57 	bl	8002e28 <HAL_GetTick>
 800077a:	4603      	mov	r3, r0
 800077c:	b2db      	uxtb	r3, r3
 800077e:	73bb      	strb	r3, [r7, #14]
    
    // 发送心跳消息
    if (MCP2515_SendMessage(&heartbeat) == MCP2515_OK) {
 8000780:	463b      	mov	r3, r7
 8000782:	4618      	mov	r0, r3
 8000784:	f000 ff70 	bl	8001668 <MCP2515_SendMessage>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d10b      	bne.n	80007a6 <CAN_SendHeartbeat+0x82>
        can_tx_counter++;
 800078e:	4b0c      	ldr	r3, [pc, #48]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a0a      	ldr	r2, [pc, #40]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 8000796:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message sent successfully [%lu]\r\n", can_tx_counter);
 8000798:	4b09      	ldr	r3, [pc, #36]	@ (80007c0 <CAN_SendHeartbeat+0x9c>)
 800079a:	681b      	ldr	r3, [r3, #0]
 800079c:	4619      	mov	r1, r3
 800079e:	4809      	ldr	r0, [pc, #36]	@ (80007c4 <CAN_SendHeartbeat+0xa0>)
 80007a0:	f007 fcfc 	bl	800819c <iprintf>
    } else {
        can_error_counter++;
        printf("Heartbeat message send failed\r\n");
    }
}
 80007a4:	e007      	b.n	80007b6 <CAN_SendHeartbeat+0x92>
        can_error_counter++;
 80007a6:	4b08      	ldr	r3, [pc, #32]	@ (80007c8 <CAN_SendHeartbeat+0xa4>)
 80007a8:	681b      	ldr	r3, [r3, #0]
 80007aa:	3301      	adds	r3, #1
 80007ac:	4a06      	ldr	r2, [pc, #24]	@ (80007c8 <CAN_SendHeartbeat+0xa4>)
 80007ae:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message send failed\r\n");
 80007b0:	4806      	ldr	r0, [pc, #24]	@ (80007cc <CAN_SendHeartbeat+0xa8>)
 80007b2:	f007 fd5b 	bl	800826c <puts>
}
 80007b6:	bf00      	nop
 80007b8:	3710      	adds	r7, #16
 80007ba:	46bd      	mov	sp, r7
 80007bc:	bd80      	pop	{r7, pc}
 80007be:	bf00      	nop
 80007c0:	20000088 	.word	0x20000088
 80007c4:	08009188 	.word	0x08009188
 80007c8:	20000090 	.word	0x20000090
 80007cc:	080091b4 	.word	0x080091b4

080007d0 <CAN_SendTestData>:
  * @brief  发送测试数据
  * @param  None
  * @retval None
  */
static void CAN_SendTestData(void)
{
 80007d0:	b580      	push	{r7, lr}
 80007d2:	b084      	sub	sp, #16
 80007d4:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_data;
    static uint16_t data_counter = 0;
    
    // 构造测试数据消息
    test_data.id = CAN_DATA_ID;
 80007d6:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007da:	603b      	str	r3, [r7, #0]
    test_data.ide = 0;  // 标准帧
 80007dc:	2300      	movs	r3, #0
 80007de:	713b      	strb	r3, [r7, #4]
    test_data.rtr = 0;  // 数据帧
 80007e0:	2300      	movs	r3, #0
 80007e2:	717b      	strb	r3, [r7, #5]
    test_data.dlc = 6;  // 6字节数据
 80007e4:	2306      	movs	r3, #6
 80007e6:	71bb      	strb	r3, [r7, #6]
    
    // 填充测试数据
    test_data.data[0] = 0x12;  // 数据标识
 80007e8:	2312      	movs	r3, #18
 80007ea:	71fb      	strb	r3, [r7, #7]
    test_data.data[1] = 0x34;
 80007ec:	2334      	movs	r3, #52	@ 0x34
 80007ee:	723b      	strb	r3, [r7, #8]
    test_data.data[2] = (uint8_t)(data_counter >> 8);
 80007f0:	4b1d      	ldr	r3, [pc, #116]	@ (8000868 <CAN_SendTestData+0x98>)
 80007f2:	881b      	ldrh	r3, [r3, #0]
 80007f4:	0a1b      	lsrs	r3, r3, #8
 80007f6:	b29b      	uxth	r3, r3
 80007f8:	b2db      	uxtb	r3, r3
 80007fa:	727b      	strb	r3, [r7, #9]
    test_data.data[3] = (uint8_t)data_counter;
 80007fc:	4b1a      	ldr	r3, [pc, #104]	@ (8000868 <CAN_SendTestData+0x98>)
 80007fe:	881b      	ldrh	r3, [r3, #0]
 8000800:	b2db      	uxtb	r3, r3
 8000802:	72bb      	strb	r3, [r7, #10]
    test_data.data[4] = (uint8_t)(HAL_GetTick() >> 16);
 8000804:	f002 fb10 	bl	8002e28 <HAL_GetTick>
 8000808:	4603      	mov	r3, r0
 800080a:	0c1b      	lsrs	r3, r3, #16
 800080c:	b2db      	uxtb	r3, r3
 800080e:	72fb      	strb	r3, [r7, #11]
    test_data.data[5] = (uint8_t)(HAL_GetTick() >> 8);
 8000810:	f002 fb0a 	bl	8002e28 <HAL_GetTick>
 8000814:	4603      	mov	r3, r0
 8000816:	0a1b      	lsrs	r3, r3, #8
 8000818:	b2db      	uxtb	r3, r3
 800081a:	733b      	strb	r3, [r7, #12]
    
    // 发送测试数据
    if (MCP2515_SendMessage(&test_data) == MCP2515_OK) {
 800081c:	463b      	mov	r3, r7
 800081e:	4618      	mov	r0, r3
 8000820:	f000 ff22 	bl	8001668 <MCP2515_SendMessage>
 8000824:	4603      	mov	r3, r0
 8000826:	2b00      	cmp	r3, #0
 8000828:	d111      	bne.n	800084e <CAN_SendTestData+0x7e>
        can_tx_counter++;
 800082a:	4b10      	ldr	r3, [pc, #64]	@ (800086c <CAN_SendTestData+0x9c>)
 800082c:	681b      	ldr	r3, [r3, #0]
 800082e:	3301      	adds	r3, #1
 8000830:	4a0e      	ldr	r2, [pc, #56]	@ (800086c <CAN_SendTestData+0x9c>)
 8000832:	6013      	str	r3, [r2, #0]
        data_counter++;
 8000834:	4b0c      	ldr	r3, [pc, #48]	@ (8000868 <CAN_SendTestData+0x98>)
 8000836:	881b      	ldrh	r3, [r3, #0]
 8000838:	3301      	adds	r3, #1
 800083a:	b29a      	uxth	r2, r3
 800083c:	4b0a      	ldr	r3, [pc, #40]	@ (8000868 <CAN_SendTestData+0x98>)
 800083e:	801a      	strh	r2, [r3, #0]
        printf("Test data sent successfully, count: %d\r\n", data_counter);
 8000840:	4b09      	ldr	r3, [pc, #36]	@ (8000868 <CAN_SendTestData+0x98>)
 8000842:	881b      	ldrh	r3, [r3, #0]
 8000844:	4619      	mov	r1, r3
 8000846:	480a      	ldr	r0, [pc, #40]	@ (8000870 <CAN_SendTestData+0xa0>)
 8000848:	f007 fca8 	bl	800819c <iprintf>
    } else {
        can_error_counter++;
        printf("Test data send failed\r\n");
    }
}
 800084c:	e007      	b.n	800085e <CAN_SendTestData+0x8e>
        can_error_counter++;
 800084e:	4b09      	ldr	r3, [pc, #36]	@ (8000874 <CAN_SendTestData+0xa4>)
 8000850:	681b      	ldr	r3, [r3, #0]
 8000852:	3301      	adds	r3, #1
 8000854:	4a07      	ldr	r2, [pc, #28]	@ (8000874 <CAN_SendTestData+0xa4>)
 8000856:	6013      	str	r3, [r2, #0]
        printf("Test data send failed\r\n");
 8000858:	4807      	ldr	r0, [pc, #28]	@ (8000878 <CAN_SendTestData+0xa8>)
 800085a:	f007 fd07 	bl	800826c <puts>
}
 800085e:	bf00      	nop
 8000860:	3710      	adds	r7, #16
 8000862:	46bd      	mov	sp, r7
 8000864:	bd80      	pop	{r7, pc}
 8000866:	bf00      	nop
 8000868:	20000096 	.word	0x20000096
 800086c:	20000088 	.word	0x20000088
 8000870:	080091d4 	.word	0x080091d4
 8000874:	20000090 	.word	0x20000090
 8000878:	08009200 	.word	0x08009200

0800087c <CAN_ReceiveTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANReceiveTask中调用
  */
void CAN_ReceiveTask_Main(void *argument)
{
 800087c:	b580      	push	{r7, lr}
 800087e:	b086      	sub	sp, #24
 8000880:	af00      	add	r7, sp, #0
 8000882:	6078      	str	r0, [r7, #4]
    MCP2515_CANMessage_t received_message;
    
    printf("CAN receive task started\r\n");
 8000884:	481a      	ldr	r0, [pc, #104]	@ (80008f0 <CAN_ReceiveTask_Main+0x74>)
 8000886:	f007 fcf1 	bl	800826c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 800088a:	e002      	b.n	8000892 <CAN_ReceiveTask_Main+0x16>
        osDelay(100);
 800088c:	2064      	movs	r0, #100	@ 0x64
 800088e:	f004 fd63 	bl	8005358 <osDelay>
    while (!can_app_initialized) {
 8000892:	4b18      	ldr	r3, [pc, #96]	@ (80008f4 <CAN_ReceiveTask_Main+0x78>)
 8000894:	781b      	ldrb	r3, [r3, #0]
 8000896:	2b00      	cmp	r3, #0
 8000898:	d0f8      	beq.n	800088c <CAN_ReceiveTask_Main+0x10>
    }
    
    for (;;) {
        // 检查是否有消息接收
        if (MCP2515_CheckReceive()) {
 800089a:	f000 ff6f 	bl	800177c <MCP2515_CheckReceive>
 800089e:	4603      	mov	r3, r0
 80008a0:	2b00      	cmp	r3, #0
 80008a2:	d020      	beq.n	80008e6 <CAN_ReceiveTask_Main+0x6a>
            // 接收消息
            if (MCP2515_ReceiveMessage(&received_message) == MCP2515_OK) {
 80008a4:	f107 0308 	add.w	r3, r7, #8
 80008a8:	4618      	mov	r0, r3
 80008aa:	f000 ff33 	bl	8001714 <MCP2515_ReceiveMessage>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d110      	bne.n	80008d6 <CAN_ReceiveTask_Main+0x5a>
                can_rx_counter++;
 80008b4:	4b10      	ldr	r3, [pc, #64]	@ (80008f8 <CAN_ReceiveTask_Main+0x7c>)
 80008b6:	681b      	ldr	r3, [r3, #0]
 80008b8:	3301      	adds	r3, #1
 80008ba:	4a0f      	ldr	r2, [pc, #60]	@ (80008f8 <CAN_ReceiveTask_Main+0x7c>)
 80008bc:	6013      	str	r3, [r2, #0]
                
                // 打印接收到的消息
                CAN_PrintMessage("Received", &received_message);
 80008be:	f107 0308 	add.w	r3, r7, #8
 80008c2:	4619      	mov	r1, r3
 80008c4:	480d      	ldr	r0, [pc, #52]	@ (80008fc <CAN_ReceiveTask_Main+0x80>)
 80008c6:	f000 f91f 	bl	8000b08 <CAN_PrintMessage>
                
                // 处理接收到的消息
                CAN_ProcessReceivedMessage(&received_message);
 80008ca:	f107 0308 	add.w	r3, r7, #8
 80008ce:	4618      	mov	r0, r3
 80008d0:	f000 f81a 	bl	8000908 <CAN_ProcessReceivedMessage>
 80008d4:	e007      	b.n	80008e6 <CAN_ReceiveTask_Main+0x6a>
            } else {
                can_error_counter++;
 80008d6:	4b0a      	ldr	r3, [pc, #40]	@ (8000900 <CAN_ReceiveTask_Main+0x84>)
 80008d8:	681b      	ldr	r3, [r3, #0]
 80008da:	3301      	adds	r3, #1
 80008dc:	4a08      	ldr	r2, [pc, #32]	@ (8000900 <CAN_ReceiveTask_Main+0x84>)
 80008de:	6013      	str	r3, [r2, #0]
                printf("Message receive failed\r\n");
 80008e0:	4808      	ldr	r0, [pc, #32]	@ (8000904 <CAN_ReceiveTask_Main+0x88>)
 80008e2:	f007 fcc3 	bl	800826c <puts>
            }
        }
        
        osDelay(10);  // 10ms周期检查
 80008e6:	200a      	movs	r0, #10
 80008e8:	f004 fd36 	bl	8005358 <osDelay>
        if (MCP2515_CheckReceive()) {
 80008ec:	e7d5      	b.n	800089a <CAN_ReceiveTask_Main+0x1e>
 80008ee:	bf00      	nop
 80008f0:	08009218 	.word	0x08009218
 80008f4:	20000094 	.word	0x20000094
 80008f8:	2000008c 	.word	0x2000008c
 80008fc:	08009234 	.word	0x08009234
 8000900:	20000090 	.word	0x20000090
 8000904:	08009240 	.word	0x08009240

08000908 <CAN_ProcessReceivedMessage>:
  * @brief  处理接收到的CAN消息
  * @param  message: 接收到的消息
  * @retval None
  */
static void CAN_ProcessReceivedMessage(MCP2515_CANMessage_t *message)
{
 8000908:	b580      	push	{r7, lr}
 800090a:	b084      	sub	sp, #16
 800090c:	af00      	add	r7, sp, #0
 800090e:	6078      	str	r0, [r7, #4]
    switch (message->id) {
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	681b      	ldr	r3, [r3, #0]
 8000914:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000918:	d036      	beq.n	8000988 <CAN_ProcessReceivedMessage+0x80>
 800091a:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 800091e:	d837      	bhi.n	8000990 <CAN_ProcessReceivedMessage+0x88>
 8000920:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000924:	d003      	beq.n	800092e <CAN_ProcessReceivedMessage+0x26>
 8000926:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800092a:	d010      	beq.n	800094e <CAN_ProcessReceivedMessage+0x46>
 800092c:	e030      	b.n	8000990 <CAN_ProcessReceivedMessage+0x88>
        case CAN_HEARTBEAT_ID:
            // 处理心跳消息
            if (message->dlc >= 2 && message->data[0] == 0xAA && message->data[1] == 0x55) {
 800092e:	687b      	ldr	r3, [r7, #4]
 8000930:	799b      	ldrb	r3, [r3, #6]
 8000932:	2b01      	cmp	r3, #1
 8000934:	d933      	bls.n	800099e <CAN_ProcessReceivedMessage+0x96>
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	79db      	ldrb	r3, [r3, #7]
 800093a:	2baa      	cmp	r3, #170	@ 0xaa
 800093c:	d12f      	bne.n	800099e <CAN_ProcessReceivedMessage+0x96>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	7a1b      	ldrb	r3, [r3, #8]
 8000942:	2b55      	cmp	r3, #85	@ 0x55
 8000944:	d12b      	bne.n	800099e <CAN_ProcessReceivedMessage+0x96>
                printf("Heartbeat message received\r\n");
 8000946:	4819      	ldr	r0, [pc, #100]	@ (80009ac <CAN_ProcessReceivedMessage+0xa4>)
 8000948:	f007 fc90 	bl	800826c <puts>
            }
            break;
 800094c:	e027      	b.n	800099e <CAN_ProcessReceivedMessage+0x96>
            
        case CAN_DATA_ID:
            // 处理数据消息
            if (message->dlc >= 2 && message->data[0] == 0x12 && message->data[1] == 0x34) {
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	799b      	ldrb	r3, [r3, #6]
 8000952:	2b01      	cmp	r3, #1
 8000954:	d925      	bls.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
 8000956:	687b      	ldr	r3, [r7, #4]
 8000958:	79db      	ldrb	r3, [r3, #7]
 800095a:	2b12      	cmp	r3, #18
 800095c:	d121      	bne.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
 800095e:	687b      	ldr	r3, [r7, #4]
 8000960:	7a1b      	ldrb	r3, [r3, #8]
 8000962:	2b34      	cmp	r3, #52	@ 0x34
 8000964:	d11d      	bne.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
                uint16_t counter = (message->data[2] << 8) | message->data[3];
 8000966:	687b      	ldr	r3, [r7, #4]
 8000968:	7a5b      	ldrb	r3, [r3, #9]
 800096a:	b21b      	sxth	r3, r3
 800096c:	021b      	lsls	r3, r3, #8
 800096e:	b21a      	sxth	r2, r3
 8000970:	687b      	ldr	r3, [r7, #4]
 8000972:	7a9b      	ldrb	r3, [r3, #10]
 8000974:	b21b      	sxth	r3, r3
 8000976:	4313      	orrs	r3, r2
 8000978:	b21b      	sxth	r3, r3
 800097a:	81fb      	strh	r3, [r7, #14]
                printf("Test data received, count: %d\r\n", counter);
 800097c:	89fb      	ldrh	r3, [r7, #14]
 800097e:	4619      	mov	r1, r3
 8000980:	480b      	ldr	r0, [pc, #44]	@ (80009b0 <CAN_ProcessReceivedMessage+0xa8>)
 8000982:	f007 fc0b 	bl	800819c <iprintf>
            }
            break;
 8000986:	e00c      	b.n	80009a2 <CAN_ProcessReceivedMessage+0x9a>
            
        case CAN_STATUS_ID:
            // 处理状态消息
            printf("Status message received\r\n");
 8000988:	480a      	ldr	r0, [pc, #40]	@ (80009b4 <CAN_ProcessReceivedMessage+0xac>)
 800098a:	f007 fc6f 	bl	800826c <puts>
            break;
 800098e:	e009      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            
        default:
            // 处理其他消息
            printf("Unknown message received, ID: 0x%03X\r\n", (unsigned int)message->id);
 8000990:	687b      	ldr	r3, [r7, #4]
 8000992:	681b      	ldr	r3, [r3, #0]
 8000994:	4619      	mov	r1, r3
 8000996:	4808      	ldr	r0, [pc, #32]	@ (80009b8 <CAN_ProcessReceivedMessage+0xb0>)
 8000998:	f007 fc00 	bl	800819c <iprintf>
            break;
 800099c:	e002      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            break;
 800099e:	bf00      	nop
 80009a0:	e000      	b.n	80009a4 <CAN_ProcessReceivedMessage+0x9c>
            break;
 80009a2:	bf00      	nop
    }
}
 80009a4:	bf00      	nop
 80009a6:	3710      	adds	r7, #16
 80009a8:	46bd      	mov	sp, r7
 80009aa:	bd80      	pop	{r7, pc}
 80009ac:	08009258 	.word	0x08009258
 80009b0:	08009274 	.word	0x08009274
 80009b4:	08009294 	.word	0x08009294
 80009b8:	080092b0 	.word	0x080092b0

080009bc <CAN_App_SelfTest>:
  * @brief  CAN应用自检测试
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_SelfTest(void)
{
 80009bc:	b580      	push	{r7, lr}
 80009be:	b08a      	sub	sp, #40	@ 0x28
 80009c0:	af00      	add	r7, sp, #0
    printf("Starting CAN application self-test...\r\n");
 80009c2:	4845      	ldr	r0, [pc, #276]	@ (8000ad8 <CAN_App_SelfTest+0x11c>)
 80009c4:	f007 fc52 	bl	800826c <puts>
    
    // 检查MCP2515硬件
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80009c8:	f000 ff3c 	bl	8001844 <MCP2515_SelfTest>
 80009cc:	4603      	mov	r3, r0
 80009ce:	2b00      	cmp	r3, #0
 80009d0:	d004      	beq.n	80009dc <CAN_App_SelfTest+0x20>
        printf("MCP2515 hardware test failed!\r\n");
 80009d2:	4842      	ldr	r0, [pc, #264]	@ (8000adc <CAN_App_SelfTest+0x120>)
 80009d4:	f007 fc4a 	bl	800826c <puts>
        return CAN_APP_ERROR;
 80009d8:	2301      	movs	r3, #1
 80009da:	e078      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("MCP2515 hardware test passed\r\n");
 80009dc:	4840      	ldr	r0, [pc, #256]	@ (8000ae0 <CAN_App_SelfTest+0x124>)
 80009de:	f007 fc45 	bl	800826c <puts>
    
    // 检查回环模式
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80009e2:	2040      	movs	r0, #64	@ 0x40
 80009e4:	f000 fcc8 	bl	8001378 <MCP2515_SetMode>
 80009e8:	4603      	mov	r3, r0
 80009ea:	2b00      	cmp	r3, #0
 80009ec:	d004      	beq.n	80009f8 <CAN_App_SelfTest+0x3c>
        printf("Set loopback mode failed!\r\n");
 80009ee:	483d      	ldr	r0, [pc, #244]	@ (8000ae4 <CAN_App_SelfTest+0x128>)
 80009f0:	f007 fc3c 	bl	800826c <puts>
        return CAN_APP_ERROR;
 80009f4:	2301      	movs	r3, #1
 80009f6:	e06a      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback mode set successfully\r\n");
 80009f8:	483b      	ldr	r0, [pc, #236]	@ (8000ae8 <CAN_App_SelfTest+0x12c>)
 80009fa:	f007 fc37 	bl	800826c <puts>
    
    // 发送测试消息
    MCP2515_CANMessage_t test_msg;
    test_msg.id = 0x123;
 80009fe:	f240 1323 	movw	r3, #291	@ 0x123
 8000a02:	617b      	str	r3, [r7, #20]
    test_msg.ide = 0;
 8000a04:	2300      	movs	r3, #0
 8000a06:	763b      	strb	r3, [r7, #24]
    test_msg.rtr = 0;
 8000a08:	2300      	movs	r3, #0
 8000a0a:	767b      	strb	r3, [r7, #25]
    test_msg.dlc = 8;
 8000a0c:	2308      	movs	r3, #8
 8000a0e:	76bb      	strb	r3, [r7, #26]
    for (int i = 0; i < 8; i++) {
 8000a10:	2300      	movs	r3, #0
 8000a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a14:	e00c      	b.n	8000a30 <CAN_App_SelfTest+0x74>
        test_msg.data[i] = i + 1;
 8000a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a18:	b2db      	uxtb	r3, r3
 8000a1a:	3301      	adds	r3, #1
 8000a1c:	b2d9      	uxtb	r1, r3
 8000a1e:	f107 021b 	add.w	r2, r7, #27
 8000a22:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a24:	4413      	add	r3, r2
 8000a26:	460a      	mov	r2, r1
 8000a28:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000a2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a2c:	3301      	adds	r3, #1
 8000a2e:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a30:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a32:	2b07      	cmp	r3, #7
 8000a34:	ddef      	ble.n	8000a16 <CAN_App_SelfTest+0x5a>
    }
    
    if (MCP2515_SendMessage(&test_msg) != MCP2515_OK) {
 8000a36:	f107 0314 	add.w	r3, r7, #20
 8000a3a:	4618      	mov	r0, r3
 8000a3c:	f000 fe14 	bl	8001668 <MCP2515_SendMessage>
 8000a40:	4603      	mov	r3, r0
 8000a42:	2b00      	cmp	r3, #0
 8000a44:	d004      	beq.n	8000a50 <CAN_App_SelfTest+0x94>
        printf("Loopback test message send failed!\r\n");
 8000a46:	4829      	ldr	r0, [pc, #164]	@ (8000aec <CAN_App_SelfTest+0x130>)
 8000a48:	f007 fc10 	bl	800826c <puts>
        return CAN_APP_ERROR;
 8000a4c:	2301      	movs	r3, #1
 8000a4e:	e03e      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback test message sent successfully\r\n");
 8000a50:	4827      	ldr	r0, [pc, #156]	@ (8000af0 <CAN_App_SelfTest+0x134>)
 8000a52:	f007 fc0b 	bl	800826c <puts>
    
    // 等待并接收消息
    osDelay(100);
 8000a56:	2064      	movs	r0, #100	@ 0x64
 8000a58:	f004 fc7e 	bl	8005358 <osDelay>
    
    MCP2515_CANMessage_t received_msg;
    if (MCP2515_ReceiveMessage(&received_msg) == MCP2515_OK) {
 8000a5c:	1d3b      	adds	r3, r7, #4
 8000a5e:	4618      	mov	r0, r3
 8000a60:	f000 fe58 	bl	8001714 <MCP2515_ReceiveMessage>
 8000a64:	4603      	mov	r3, r0
 8000a66:	2b00      	cmp	r3, #0
 8000a68:	d123      	bne.n	8000ab2 <CAN_App_SelfTest+0xf6>
        // 验证接收到的消息
        if (received_msg.id == test_msg.id && 
 8000a6a:	687a      	ldr	r2, [r7, #4]
 8000a6c:	697b      	ldr	r3, [r7, #20]
 8000a6e:	429a      	cmp	r2, r3
 8000a70:	d11a      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            received_msg.dlc == test_msg.dlc &&
 8000a72:	7aba      	ldrb	r2, [r7, #10]
 8000a74:	7ebb      	ldrb	r3, [r7, #26]
        if (received_msg.id == test_msg.id && 
 8000a76:	429a      	cmp	r2, r3
 8000a78:	d116      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            memcmp(received_msg.data, test_msg.data, test_msg.dlc) == 0) {
 8000a7a:	7ebb      	ldrb	r3, [r7, #26]
 8000a7c:	461a      	mov	r2, r3
 8000a7e:	f107 0314 	add.w	r3, r7, #20
 8000a82:	1dd9      	adds	r1, r3, #7
 8000a84:	1d3b      	adds	r3, r7, #4
 8000a86:	3307      	adds	r3, #7
 8000a88:	4618      	mov	r0, r3
 8000a8a:	f007 fccf 	bl	800842c <memcmp>
 8000a8e:	4603      	mov	r3, r0
            received_msg.dlc == test_msg.dlc &&
 8000a90:	2b00      	cmp	r3, #0
 8000a92:	d109      	bne.n	8000aa8 <CAN_App_SelfTest+0xec>
            printf("Loopback test successful!\r\n");
 8000a94:	4817      	ldr	r0, [pc, #92]	@ (8000af4 <CAN_App_SelfTest+0x138>)
 8000a96:	f007 fbe9 	bl	800826c <puts>
        printf("Loopback test message receive failed!\r\n");
        return CAN_APP_ERROR;
    }
    
    // 恢复正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8000a9a:	2000      	movs	r0, #0
 8000a9c:	f000 fc6c 	bl	8001378 <MCP2515_SetMode>
 8000aa0:	4603      	mov	r3, r0
 8000aa2:	2b00      	cmp	r3, #0
 8000aa4:	d00f      	beq.n	8000ac6 <CAN_App_SelfTest+0x10a>
 8000aa6:	e009      	b.n	8000abc <CAN_App_SelfTest+0x100>
            printf("Loopback test data mismatch!\r\n");
 8000aa8:	4813      	ldr	r0, [pc, #76]	@ (8000af8 <CAN_App_SelfTest+0x13c>)
 8000aaa:	f007 fbdf 	bl	800826c <puts>
            return CAN_APP_ERROR;
 8000aae:	2301      	movs	r3, #1
 8000ab0:	e00d      	b.n	8000ace <CAN_App_SelfTest+0x112>
        printf("Loopback test message receive failed!\r\n");
 8000ab2:	4812      	ldr	r0, [pc, #72]	@ (8000afc <CAN_App_SelfTest+0x140>)
 8000ab4:	f007 fbda 	bl	800826c <puts>
        return CAN_APP_ERROR;
 8000ab8:	2301      	movs	r3, #1
 8000aba:	e008      	b.n	8000ace <CAN_App_SelfTest+0x112>
        printf("Restore normal mode failed!\r\n");
 8000abc:	4810      	ldr	r0, [pc, #64]	@ (8000b00 <CAN_App_SelfTest+0x144>)
 8000abe:	f007 fbd5 	bl	800826c <puts>
        return CAN_APP_ERROR;
 8000ac2:	2301      	movs	r3, #1
 8000ac4:	e003      	b.n	8000ace <CAN_App_SelfTest+0x112>
    }
    
    printf("CAN application self-test completed!\r\n");
 8000ac6:	480f      	ldr	r0, [pc, #60]	@ (8000b04 <CAN_App_SelfTest+0x148>)
 8000ac8:	f007 fbd0 	bl	800826c <puts>
    return CAN_APP_OK;
 8000acc:	2300      	movs	r3, #0
}
 8000ace:	4618      	mov	r0, r3
 8000ad0:	3728      	adds	r7, #40	@ 0x28
 8000ad2:	46bd      	mov	sp, r7
 8000ad4:	bd80      	pop	{r7, pc}
 8000ad6:	bf00      	nop
 8000ad8:	08009364 	.word	0x08009364
 8000adc:	0800938c 	.word	0x0800938c
 8000ae0:	080093ac 	.word	0x080093ac
 8000ae4:	080093cc 	.word	0x080093cc
 8000ae8:	080093e8 	.word	0x080093e8
 8000aec:	08009408 	.word	0x08009408
 8000af0:	0800942c 	.word	0x0800942c
 8000af4:	08009458 	.word	0x08009458
 8000af8:	08009474 	.word	0x08009474
 8000afc:	08009494 	.word	0x08009494
 8000b00:	080094bc 	.word	0x080094bc
 8000b04:	080094dc 	.word	0x080094dc

08000b08 <CAN_PrintMessage>:
  * @param  prefix: 前缀字符串
  * @param  message: CAN消息指针
  * @retval None
  */
static void CAN_PrintMessage(const char *prefix, MCP2515_CANMessage_t *message)
{
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b086      	sub	sp, #24
 8000b0c:	af02      	add	r7, sp, #8
 8000b0e:	6078      	str	r0, [r7, #4]
 8000b10:	6039      	str	r1, [r7, #0]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
           prefix,
           (unsigned int)message->id,
 8000b12:	683b      	ldr	r3, [r7, #0]
 8000b14:	6819      	ldr	r1, [r3, #0]
           message->ide ? "Extended" : "Standard",
 8000b16:	683b      	ldr	r3, [r7, #0]
 8000b18:	791b      	ldrb	r3, [r3, #4]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b1a:	2b00      	cmp	r3, #0
 8000b1c:	d001      	beq.n	8000b22 <CAN_PrintMessage+0x1a>
 8000b1e:	481b      	ldr	r0, [pc, #108]	@ (8000b8c <CAN_PrintMessage+0x84>)
 8000b20:	e000      	b.n	8000b24 <CAN_PrintMessage+0x1c>
 8000b22:	481b      	ldr	r0, [pc, #108]	@ (8000b90 <CAN_PrintMessage+0x88>)
           message->rtr ? "Remote" : "Data",
 8000b24:	683b      	ldr	r3, [r7, #0]
 8000b26:	795b      	ldrb	r3, [r3, #5]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d001      	beq.n	8000b30 <CAN_PrintMessage+0x28>
 8000b2c:	4b19      	ldr	r3, [pc, #100]	@ (8000b94 <CAN_PrintMessage+0x8c>)
 8000b2e:	e000      	b.n	8000b32 <CAN_PrintMessage+0x2a>
 8000b30:	4b19      	ldr	r3, [pc, #100]	@ (8000b98 <CAN_PrintMessage+0x90>)
           message->dlc);
 8000b32:	683a      	ldr	r2, [r7, #0]
 8000b34:	7992      	ldrb	r2, [r2, #6]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b36:	9201      	str	r2, [sp, #4]
 8000b38:	9300      	str	r3, [sp, #0]
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	460a      	mov	r2, r1
 8000b3e:	6879      	ldr	r1, [r7, #4]
 8000b40:	4816      	ldr	r0, [pc, #88]	@ (8000b9c <CAN_PrintMessage+0x94>)
 8000b42:	f007 fb2b 	bl	800819c <iprintf>
    
    if (!message->rtr) {
 8000b46:	683b      	ldr	r3, [r7, #0]
 8000b48:	795b      	ldrb	r3, [r3, #5]
 8000b4a:	2b00      	cmp	r3, #0
 8000b4c:	d117      	bne.n	8000b7e <CAN_PrintMessage+0x76>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	60fb      	str	r3, [r7, #12]
 8000b52:	e00b      	b.n	8000b6c <CAN_PrintMessage+0x64>
            printf("%02X ", message->data[i]);
 8000b54:	683a      	ldr	r2, [r7, #0]
 8000b56:	68fb      	ldr	r3, [r7, #12]
 8000b58:	4413      	add	r3, r2
 8000b5a:	3307      	adds	r3, #7
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	4619      	mov	r1, r3
 8000b60:	480f      	ldr	r0, [pc, #60]	@ (8000ba0 <CAN_PrintMessage+0x98>)
 8000b62:	f007 fb1b 	bl	800819c <iprintf>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b66:	68fb      	ldr	r3, [r7, #12]
 8000b68:	3301      	adds	r3, #1
 8000b6a:	60fb      	str	r3, [r7, #12]
 8000b6c:	683b      	ldr	r3, [r7, #0]
 8000b6e:	799b      	ldrb	r3, [r3, #6]
 8000b70:	461a      	mov	r2, r3
 8000b72:	68fb      	ldr	r3, [r7, #12]
 8000b74:	4293      	cmp	r3, r2
 8000b76:	da02      	bge.n	8000b7e <CAN_PrintMessage+0x76>
 8000b78:	68fb      	ldr	r3, [r7, #12]
 8000b7a:	2b07      	cmp	r3, #7
 8000b7c:	ddea      	ble.n	8000b54 <CAN_PrintMessage+0x4c>
        }
    }
    
    printf("\r\n");
 8000b7e:	4809      	ldr	r0, [pc, #36]	@ (8000ba4 <CAN_PrintMessage+0x9c>)
 8000b80:	f007 fb74 	bl	800826c <puts>
}
 8000b84:	bf00      	nop
 8000b86:	3710      	adds	r7, #16
 8000b88:	46bd      	mov	sp, r7
 8000b8a:	bd80      	pop	{r7, pc}
 8000b8c:	08009504 	.word	0x08009504
 8000b90:	08009510 	.word	0x08009510
 8000b94:	0800951c 	.word	0x0800951c
 8000b98:	08009524 	.word	0x08009524
 8000b9c:	0800952c 	.word	0x0800952c
 8000ba0:	0800955c 	.word	0x0800955c
 8000ba4:	08009564 	.word	0x08009564

08000ba8 <CAN_App_PrintStatus>:
  * @brief  打印CAN应用状态
  * @param  None
  * @retval None
  */
void CAN_App_PrintStatus(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
    CAN_App_Stats_t stats;
    CAN_App_GetStats(&stats);
 8000bae:	463b      	mov	r3, r7
 8000bb0:	4618      	mov	r0, r3
 8000bb2:	f7ff fd2d 	bl	8000610 <CAN_App_GetStats>
    
    printf("\r\n=== CAN Application Status ===\r\n");
 8000bb6:	481c      	ldr	r0, [pc, #112]	@ (8000c28 <CAN_App_PrintStatus+0x80>)
 8000bb8:	f007 fb58 	bl	800826c <puts>
    printf("Initialization Status: %s\r\n", stats.initialized ? "Initialized" : "Not Initialized");
 8000bbc:	7d3b      	ldrb	r3, [r7, #20]
 8000bbe:	2b00      	cmp	r3, #0
 8000bc0:	d001      	beq.n	8000bc6 <CAN_App_PrintStatus+0x1e>
 8000bc2:	4b1a      	ldr	r3, [pc, #104]	@ (8000c2c <CAN_App_PrintStatus+0x84>)
 8000bc4:	e000      	b.n	8000bc8 <CAN_App_PrintStatus+0x20>
 8000bc6:	4b1a      	ldr	r3, [pc, #104]	@ (8000c30 <CAN_App_PrintStatus+0x88>)
 8000bc8:	4619      	mov	r1, r3
 8000bca:	481a      	ldr	r0, [pc, #104]	@ (8000c34 <CAN_App_PrintStatus+0x8c>)
 8000bcc:	f007 fae6 	bl	800819c <iprintf>
    printf("TX Count: %lu\r\n", stats.tx_count);
 8000bd0:	683b      	ldr	r3, [r7, #0]
 8000bd2:	4619      	mov	r1, r3
 8000bd4:	4818      	ldr	r0, [pc, #96]	@ (8000c38 <CAN_App_PrintStatus+0x90>)
 8000bd6:	f007 fae1 	bl	800819c <iprintf>
    printf("RX Count: %lu\r\n", stats.rx_count);
 8000bda:	687b      	ldr	r3, [r7, #4]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4817      	ldr	r0, [pc, #92]	@ (8000c3c <CAN_App_PrintStatus+0x94>)
 8000be0:	f007 fadc 	bl	800819c <iprintf>
    printf("Error Count: %lu\r\n", stats.error_count);
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4619      	mov	r1, r3
 8000be8:	4815      	ldr	r0, [pc, #84]	@ (8000c40 <CAN_App_PrintStatus+0x98>)
 8000bea:	f007 fad7 	bl	800819c <iprintf>
    printf("TX Buffer Free: %d\r\n", MCP2515_CheckTransmit());
 8000bee:	f000 fdd8 	bl	80017a2 <MCP2515_CheckTransmit>
 8000bf2:	4603      	mov	r3, r0
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4813      	ldr	r0, [pc, #76]	@ (8000c44 <CAN_App_PrintStatus+0x9c>)
 8000bf8:	f007 fad0 	bl	800819c <iprintf>
    printf("RX Status: %s\r\n", MCP2515_CheckReceive() ? "Message Available" : "No Message");
 8000bfc:	f000 fdbe 	bl	800177c <MCP2515_CheckReceive>
 8000c00:	4603      	mov	r3, r0
 8000c02:	2b00      	cmp	r3, #0
 8000c04:	d001      	beq.n	8000c0a <CAN_App_PrintStatus+0x62>
 8000c06:	4b10      	ldr	r3, [pc, #64]	@ (8000c48 <CAN_App_PrintStatus+0xa0>)
 8000c08:	e000      	b.n	8000c0c <CAN_App_PrintStatus+0x64>
 8000c0a:	4b10      	ldr	r3, [pc, #64]	@ (8000c4c <CAN_App_PrintStatus+0xa4>)
 8000c0c:	4619      	mov	r1, r3
 8000c0e:	4810      	ldr	r0, [pc, #64]	@ (8000c50 <CAN_App_PrintStatus+0xa8>)
 8000c10:	f007 fac4 	bl	800819c <iprintf>
    
    // 打印MCP2515状态
    MCP2515_PrintStatus();
 8000c14:	f000 ff08 	bl	8001a28 <MCP2515_PrintStatus>
    
    printf("==================\r\n\r\n");
 8000c18:	480e      	ldr	r0, [pc, #56]	@ (8000c54 <CAN_App_PrintStatus+0xac>)
 8000c1a:	f007 fb27 	bl	800826c <puts>
}
 8000c1e:	bf00      	nop
 8000c20:	3718      	adds	r7, #24
 8000c22:	46bd      	mov	sp, r7
 8000c24:	bd80      	pop	{r7, pc}
 8000c26:	bf00      	nop
 8000c28:	08009568 	.word	0x08009568
 8000c2c:	0800958c 	.word	0x0800958c
 8000c30:	08009598 	.word	0x08009598
 8000c34:	080095a8 	.word	0x080095a8
 8000c38:	080095c4 	.word	0x080095c4
 8000c3c:	080095d4 	.word	0x080095d4
 8000c40:	080095e4 	.word	0x080095e4
 8000c44:	080095f8 	.word	0x080095f8
 8000c48:	08009610 	.word	0x08009610
 8000c4c:	08009624 	.word	0x08009624
 8000c50:	08009630 	.word	0x08009630
 8000c54:	08009640 	.word	0x08009640

08000c58 <CAN_App_IRQ_Callback>:
  * @retval None
  * @note   此函数在外部中断服务程序中被调用
  *         用于处理MCP2515的中断信号
  */
void CAN_App_IRQ_Callback(void)
{
 8000c58:	b480      	push	{r7}
 8000c5a:	af00      	add	r7, sp, #0
    // 可以在这里设置事件标志或信号量来通知任务
    // 这里暂时不做具体处理，实际处理在接收任务的轮询中进行
    
    // 如果需要立即处理，可以发送信号给接收任务
    // 例如：osThreadFlagsSet(CANReceiveTaskHandle, 0x01);
 8000c5c:	bf00      	nop
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
	...

08000c68 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c6c:	f002 f8a6 	bl	8002dbc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c70:	f000 f89a 	bl	8000da8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c74:	f000 f962 	bl	8000f3c <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c78:	f000 f900 	bl	8000e7c <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c7c:	f000 f934 	bl	8000ee8 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化CAN应用
  printf("\r\n=== STM32F407 + MCP2515 CAN Communication System Startup ===\r\n");
 8000c80:	4833      	ldr	r0, [pc, #204]	@ (8000d50 <main+0xe8>)
 8000c82:	f007 faf3 	bl	800826c <puts>
  printf("System Clock: %lu MHz\r\n", HAL_RCC_GetHCLKFreq() / 1000000);
 8000c86:	f003 f81f 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	4a31      	ldr	r2, [pc, #196]	@ (8000d54 <main+0xec>)
 8000c8e:	fba2 2303 	umull	r2, r3, r2, r3
 8000c92:	0c9b      	lsrs	r3, r3, #18
 8000c94:	4619      	mov	r1, r3
 8000c96:	4830      	ldr	r0, [pc, #192]	@ (8000d58 <main+0xf0>)
 8000c98:	f007 fa80 	bl	800819c <iprintf>
  printf("SPI1 Clock: %lu MHz\r\n", HAL_RCC_GetPCLK2Freq() / 1000000 / 32);  // SPI1预分频32
 8000c9c:	f003 f834 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8000ca0:	4603      	mov	r3, r0
 8000ca2:	4a2c      	ldr	r2, [pc, #176]	@ (8000d54 <main+0xec>)
 8000ca4:	fba2 2303 	umull	r2, r3, r2, r3
 8000ca8:	0ddb      	lsrs	r3, r3, #23
 8000caa:	4619      	mov	r1, r3
 8000cac:	482b      	ldr	r0, [pc, #172]	@ (8000d5c <main+0xf4>)
 8000cae:	f007 fa75 	bl	800819c <iprintf>
  
  // 延时等待硬件稳定
  HAL_Delay(100);
 8000cb2:	2064      	movs	r0, #100	@ 0x64
 8000cb4:	f002 f8c4 	bl	8002e40 <HAL_Delay>
  
  // 初始化CAN应用
  if (CAN_App_Init() == CAN_APP_OK) {
 8000cb8:	f7ff fc70 	bl	800059c <CAN_App_Init>
 8000cbc:	4603      	mov	r3, r0
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d114      	bne.n	8000cec <main+0x84>
    printf("CAN application initialization successful!\r\n");
 8000cc2:	4827      	ldr	r0, [pc, #156]	@ (8000d60 <main+0xf8>)
 8000cc4:	f007 fad2 	bl	800826c <puts>
    
    // 执行自检测试
    if (CAN_App_SelfTest() == CAN_APP_OK) {
 8000cc8:	f7ff fe78 	bl	80009bc <CAN_App_SelfTest>
 8000ccc:	4603      	mov	r3, r0
 8000cce:	2b00      	cmp	r3, #0
 8000cd0:	d103      	bne.n	8000cda <main+0x72>
      printf("CAN self-test passed!\r\n");
 8000cd2:	4824      	ldr	r0, [pc, #144]	@ (8000d64 <main+0xfc>)
 8000cd4:	f007 faca 	bl	800826c <puts>
 8000cd8:	e010      	b.n	8000cfc <main+0x94>
    } else {
      printf("CAN self-test failed!\r\n");
 8000cda:	4823      	ldr	r0, [pc, #140]	@ (8000d68 <main+0x100>)
 8000cdc:	f007 fac6 	bl	800826c <puts>
      // If self-test fails, run diagnosis
      printf("\r\nWARNING: CAN communication problem detected, starting diagnosis...\r\n");
 8000ce0:	4822      	ldr	r0, [pc, #136]	@ (8000d6c <main+0x104>)
 8000ce2:	f007 fac3 	bl	800826c <puts>
      CAN_DiagnoseAndFix();
 8000ce6:	f001 fdc5 	bl	8002874 <CAN_DiagnoseAndFix>
 8000cea:	e007      	b.n	8000cfc <main+0x94>
    }
  } else {
    printf("CAN application initialization failed!\r\n");
 8000cec:	4820      	ldr	r0, [pc, #128]	@ (8000d70 <main+0x108>)
 8000cee:	f007 fabd 	bl	800826c <puts>
    // If initialization fails, run diagnosis
    printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 8000cf2:	4820      	ldr	r0, [pc, #128]	@ (8000d74 <main+0x10c>)
 8000cf4:	f007 faba 	bl	800826c <puts>
    CAN_DiagnoseAndFix();
 8000cf8:	f001 fdbc 	bl	8002874 <CAN_DiagnoseAndFix>
  }
  
  printf("System initialization completed, starting operation...\r\n\r\n");
 8000cfc:	481e      	ldr	r0, [pc, #120]	@ (8000d78 <main+0x110>)
 8000cfe:	f007 fab5 	bl	800826c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000d02:	f004 fa4d 	bl	80051a0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 8000d06:	4a1d      	ldr	r2, [pc, #116]	@ (8000d7c <main+0x114>)
 8000d08:	210d      	movs	r1, #13
 8000d0a:	200a      	movs	r0, #10
 8000d0c:	f004 fb3f 	bl	800538e <osMessageQueueNew>
 8000d10:	4603      	mov	r3, r0
 8000d12:	4a1b      	ldr	r2, [pc, #108]	@ (8000d80 <main+0x118>)
 8000d14:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000d16:	4a1b      	ldr	r2, [pc, #108]	@ (8000d84 <main+0x11c>)
 8000d18:	2100      	movs	r1, #0
 8000d1a:	481b      	ldr	r0, [pc, #108]	@ (8000d88 <main+0x120>)
 8000d1c:	f004 fa8a 	bl	8005234 <osThreadNew>
 8000d20:	4603      	mov	r3, r0
 8000d22:	4a1a      	ldr	r2, [pc, #104]	@ (8000d8c <main+0x124>)
 8000d24:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 8000d26:	4a1a      	ldr	r2, [pc, #104]	@ (8000d90 <main+0x128>)
 8000d28:	2100      	movs	r1, #0
 8000d2a:	481a      	ldr	r0, [pc, #104]	@ (8000d94 <main+0x12c>)
 8000d2c:	f004 fa82 	bl	8005234 <osThreadNew>
 8000d30:	4603      	mov	r3, r0
 8000d32:	4a19      	ldr	r2, [pc, #100]	@ (8000d98 <main+0x130>)
 8000d34:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 8000d36:	4a19      	ldr	r2, [pc, #100]	@ (8000d9c <main+0x134>)
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4819      	ldr	r0, [pc, #100]	@ (8000da0 <main+0x138>)
 8000d3c:	f004 fa7a 	bl	8005234 <osThreadNew>
 8000d40:	4603      	mov	r3, r0
 8000d42:	4a18      	ldr	r2, [pc, #96]	@ (8000da4 <main+0x13c>)
 8000d44:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d46:	f004 fa4f 	bl	80051e8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d4a:	bf00      	nop
 8000d4c:	e7fd      	b.n	8000d4a <main+0xe2>
 8000d4e:	bf00      	nop
 8000d50:	0800968c 	.word	0x0800968c
 8000d54:	431bde83 	.word	0x431bde83
 8000d58:	080096cc 	.word	0x080096cc
 8000d5c:	080096e4 	.word	0x080096e4
 8000d60:	080096fc 	.word	0x080096fc
 8000d64:	08009728 	.word	0x08009728
 8000d68:	08009740 	.word	0x08009740
 8000d6c:	08009758 	.word	0x08009758
 8000d70:	080097a0 	.word	0x080097a0
 8000d74:	080097c8 	.word	0x080097c8
 8000d78:	08009808 	.word	0x08009808
 8000d7c:	0800b7dc 	.word	0x0800b7dc
 8000d80:	20000144 	.word	0x20000144
 8000d84:	0800b770 	.word	0x0800b770
 8000d88:	08001039 	.word	0x08001039
 8000d8c:	20000138 	.word	0x20000138
 8000d90:	0800b794 	.word	0x0800b794
 8000d94:	080010c5 	.word	0x080010c5
 8000d98:	2000013c 	.word	0x2000013c
 8000d9c:	0800b7b8 	.word	0x0800b7b8
 8000da0:	080010db 	.word	0x080010db
 8000da4:	20000140 	.word	0x20000140

08000da8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000da8:	b580      	push	{r7, lr}
 8000daa:	b094      	sub	sp, #80	@ 0x50
 8000dac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000dae:	f107 0320 	add.w	r3, r7, #32
 8000db2:	2230      	movs	r2, #48	@ 0x30
 8000db4:	2100      	movs	r1, #0
 8000db6:	4618      	mov	r0, r3
 8000db8:	f007 fb48 	bl	800844c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000dbc:	f107 030c 	add.w	r3, r7, #12
 8000dc0:	2200      	movs	r2, #0
 8000dc2:	601a      	str	r2, [r3, #0]
 8000dc4:	605a      	str	r2, [r3, #4]
 8000dc6:	609a      	str	r2, [r3, #8]
 8000dc8:	60da      	str	r2, [r3, #12]
 8000dca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000dcc:	2300      	movs	r3, #0
 8000dce:	60bb      	str	r3, [r7, #8]
 8000dd0:	4b28      	ldr	r3, [pc, #160]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dd2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dd4:	4a27      	ldr	r2, [pc, #156]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dd6:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dda:	6413      	str	r3, [r2, #64]	@ 0x40
 8000ddc:	4b25      	ldr	r3, [pc, #148]	@ (8000e74 <SystemClock_Config+0xcc>)
 8000dde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000de0:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000de4:	60bb      	str	r3, [r7, #8]
 8000de6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000de8:	2300      	movs	r3, #0
 8000dea:	607b      	str	r3, [r7, #4]
 8000dec:	4b22      	ldr	r3, [pc, #136]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000dee:	681b      	ldr	r3, [r3, #0]
 8000df0:	4a21      	ldr	r2, [pc, #132]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000df2:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000df6:	6013      	str	r3, [r2, #0]
 8000df8:	4b1f      	ldr	r3, [pc, #124]	@ (8000e78 <SystemClock_Config+0xd0>)
 8000dfa:	681b      	ldr	r3, [r3, #0]
 8000dfc:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000e00:	607b      	str	r3, [r7, #4]
 8000e02:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000e04:	2301      	movs	r3, #1
 8000e06:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000e08:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000e0c:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e0e:	2302      	movs	r3, #2
 8000e10:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000e12:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000e16:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e18:	2308      	movs	r3, #8
 8000e1a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e1c:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e20:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e22:	2302      	movs	r3, #2
 8000e24:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e26:	2304      	movs	r3, #4
 8000e28:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e2a:	f107 0320 	add.w	r3, r7, #32
 8000e2e:	4618      	mov	r0, r3
 8000e30:	f002 fae6 	bl	8003400 <HAL_RCC_OscConfig>
 8000e34:	4603      	mov	r3, r0
 8000e36:	2b00      	cmp	r3, #0
 8000e38:	d001      	beq.n	8000e3e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e3a:	f000 f96b 	bl	8001114 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e3e:	230f      	movs	r3, #15
 8000e40:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e42:	2302      	movs	r3, #2
 8000e44:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e4a:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e4e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e50:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e54:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e56:	f107 030c 	add.w	r3, r7, #12
 8000e5a:	2105      	movs	r1, #5
 8000e5c:	4618      	mov	r0, r3
 8000e5e:	f002 fd47 	bl	80038f0 <HAL_RCC_ClockConfig>
 8000e62:	4603      	mov	r3, r0
 8000e64:	2b00      	cmp	r3, #0
 8000e66:	d001      	beq.n	8000e6c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e68:	f000 f954 	bl	8001114 <Error_Handler>
  }
}
 8000e6c:	bf00      	nop
 8000e6e:	3750      	adds	r7, #80	@ 0x50
 8000e70:	46bd      	mov	sp, r7
 8000e72:	bd80      	pop	{r7, pc}
 8000e74:	40023800 	.word	0x40023800
 8000e78:	40007000 	.word	0x40007000

08000e7c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e80:	4b17      	ldr	r3, [pc, #92]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e82:	4a18      	ldr	r2, [pc, #96]	@ (8000ee4 <MX_SPI1_Init+0x68>)
 8000e84:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e86:	4b16      	ldr	r3, [pc, #88]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e88:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e8c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e8e:	4b14      	ldr	r3, [pc, #80]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e90:	2200      	movs	r2, #0
 8000e92:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e94:	4b12      	ldr	r3, [pc, #72]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e96:	2200      	movs	r2, #0
 8000e98:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e9a:	4b11      	ldr	r3, [pc, #68]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000e9c:	2200      	movs	r2, #0
 8000e9e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000ea6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ea8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000eac:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000eae:	4b0c      	ldr	r3, [pc, #48]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb0:	2230      	movs	r2, #48	@ 0x30
 8000eb2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000eb4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000eb6:	2200      	movs	r2, #0
 8000eb8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eba:	4b09      	ldr	r3, [pc, #36]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ebc:	2200      	movs	r2, #0
 8000ebe:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ec0:	4b07      	ldr	r3, [pc, #28]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec2:	2200      	movs	r2, #0
 8000ec4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ec6:	4b06      	ldr	r3, [pc, #24]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ec8:	220a      	movs	r2, #10
 8000eca:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000ecc:	4804      	ldr	r0, [pc, #16]	@ (8000ee0 <MX_SPI1_Init+0x64>)
 8000ece:	f002 ff61 	bl	8003d94 <HAL_SPI_Init>
 8000ed2:	4603      	mov	r3, r0
 8000ed4:	2b00      	cmp	r3, #0
 8000ed6:	d001      	beq.n	8000edc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ed8:	f000 f91c 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000edc:	bf00      	nop
 8000ede:	bd80      	pop	{r7, pc}
 8000ee0:	20000098 	.word	0x20000098
 8000ee4:	40013000 	.word	0x40013000

08000ee8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ee8:	b580      	push	{r7, lr}
 8000eea:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000eec:	4b11      	ldr	r3, [pc, #68]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000eee:	4a12      	ldr	r2, [pc, #72]	@ (8000f38 <MX_USART2_UART_Init+0x50>)
 8000ef0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000ef2:	4b10      	ldr	r3, [pc, #64]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000ef4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ef8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000efa:	4b0e      	ldr	r3, [pc, #56]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000f00:	4b0c      	ldr	r3, [pc, #48]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000f06:	4b0b      	ldr	r3, [pc, #44]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f08:	2200      	movs	r2, #0
 8000f0a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000f0c:	4b09      	ldr	r3, [pc, #36]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f0e:	220c      	movs	r2, #12
 8000f10:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000f12:	4b08      	ldr	r3, [pc, #32]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f14:	2200      	movs	r2, #0
 8000f16:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f18:	4b06      	ldr	r3, [pc, #24]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f1a:	2200      	movs	r2, #0
 8000f1c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f1e:	4805      	ldr	r0, [pc, #20]	@ (8000f34 <MX_USART2_UART_Init+0x4c>)
 8000f20:	f003 fcee 	bl	8004900 <HAL_UART_Init>
 8000f24:	4603      	mov	r3, r0
 8000f26:	2b00      	cmp	r3, #0
 8000f28:	d001      	beq.n	8000f2e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f2a:	f000 f8f3 	bl	8001114 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f2e:	bf00      	nop
 8000f30:	bd80      	pop	{r7, pc}
 8000f32:	bf00      	nop
 8000f34:	200000f0 	.word	0x200000f0
 8000f38:	40004400 	.word	0x40004400

08000f3c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f3c:	b580      	push	{r7, lr}
 8000f3e:	b088      	sub	sp, #32
 8000f40:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f42:	f107 030c 	add.w	r3, r7, #12
 8000f46:	2200      	movs	r2, #0
 8000f48:	601a      	str	r2, [r3, #0]
 8000f4a:	605a      	str	r2, [r3, #4]
 8000f4c:	609a      	str	r2, [r3, #8]
 8000f4e:	60da      	str	r2, [r3, #12]
 8000f50:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f52:	2300      	movs	r3, #0
 8000f54:	60bb      	str	r3, [r7, #8]
 8000f56:	4b2b      	ldr	r3, [pc, #172]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5a:	4a2a      	ldr	r2, [pc, #168]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f5c:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f60:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f62:	4b28      	ldr	r3, [pc, #160]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f64:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f6a:	60bb      	str	r3, [r7, #8]
 8000f6c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f6e:	2300      	movs	r3, #0
 8000f70:	607b      	str	r3, [r7, #4]
 8000f72:	4b24      	ldr	r3, [pc, #144]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f76:	4a23      	ldr	r2, [pc, #140]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f78:	f043 0301 	orr.w	r3, r3, #1
 8000f7c:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f7e:	4b21      	ldr	r3, [pc, #132]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f82:	f003 0301 	and.w	r3, r3, #1
 8000f86:	607b      	str	r3, [r7, #4]
 8000f88:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f8a:	2300      	movs	r3, #0
 8000f8c:	603b      	str	r3, [r7, #0]
 8000f8e:	4b1d      	ldr	r3, [pc, #116]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f92:	4a1c      	ldr	r2, [pc, #112]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f94:	f043 0302 	orr.w	r3, r3, #2
 8000f98:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f9a:	4b1a      	ldr	r3, [pc, #104]	@ (8001004 <MX_GPIO_Init+0xc8>)
 8000f9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f9e:	f003 0302 	and.w	r3, r3, #2
 8000fa2:	603b      	str	r3, [r7, #0]
 8000fa4:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 8000fa6:	2200      	movs	r2, #0
 8000fa8:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000fac:	4816      	ldr	r0, [pc, #88]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fae:	f002 f9e9 	bl	8003384 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000fb2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fb6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fb8:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fbc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fbe:	2301      	movs	r3, #1
 8000fc0:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000fc2:	f107 030c 	add.w	r3, r7, #12
 8000fc6:	4619      	mov	r1, r3
 8000fc8:	480f      	ldr	r0, [pc, #60]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fca:	f002 f83f 	bl	800304c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 8000fce:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fd2:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fd4:	2301      	movs	r3, #1
 8000fd6:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fd8:	2300      	movs	r3, #0
 8000fda:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fdc:	2302      	movs	r3, #2
 8000fde:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 8000fe0:	f107 030c 	add.w	r3, r7, #12
 8000fe4:	4619      	mov	r1, r3
 8000fe6:	4808      	ldr	r0, [pc, #32]	@ (8001008 <MX_GPIO_Init+0xcc>)
 8000fe8:	f002 f830 	bl	800304c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000fec:	2200      	movs	r2, #0
 8000fee:	2106      	movs	r1, #6
 8000ff0:	2028      	movs	r0, #40	@ 0x28
 8000ff2:	f002 f801 	bl	8002ff8 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000ff6:	2028      	movs	r0, #40	@ 0x28
 8000ff8:	f002 f81a 	bl	8003030 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000ffc:	bf00      	nop
 8000ffe:	3720      	adds	r7, #32
 8001000:	46bd      	mov	sp, r7
 8001002:	bd80      	pop	{r7, pc}
 8001004:	40023800 	.word	0x40023800
 8001008:	40020400 	.word	0x40020400

0800100c <_write>:
  * @param  ptr: 数据指针
  * @param  len: 数据长度
  * @retval 发送的字节数
  */
int _write(int file, char *ptr, int len)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	60b9      	str	r1, [r7, #8]
 8001016:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	b29a      	uxth	r2, r3
 800101c:	f04f 33ff 	mov.w	r3, #4294967295
 8001020:	68b9      	ldr	r1, [r7, #8]
 8001022:	4804      	ldr	r0, [pc, #16]	@ (8001034 <_write+0x28>)
 8001024:	f003 fcbc 	bl	80049a0 <HAL_UART_Transmit>
  return len;
 8001028:	687b      	ldr	r3, [r7, #4]
}
 800102a:	4618      	mov	r0, r3
 800102c:	3710      	adds	r7, #16
 800102e:	46bd      	mov	sp, r7
 8001030:	bd80      	pop	{r7, pc}
 8001032:	bf00      	nop
 8001034:	200000f0 	.word	0x200000f0

08001038 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b086      	sub	sp, #24
 800103c:	af00      	add	r7, sp, #0
 800103e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t last_status_print = 0;
 8001040:	2300      	movs	r3, #0
 8001042:	617b      	str	r3, [r7, #20]
  uint32_t last_heartbeat_print = 0;
 8001044:	2300      	movs	r3, #0
 8001046:	613b      	str	r3, [r7, #16]
  uint32_t heartbeat_counter = 0;
 8001048:	2300      	movs	r3, #0
 800104a:	60fb      	str	r3, [r7, #12]
  
  printf("Default Task Started\r\n");  // 使用英文避免乱码
 800104c:	4818      	ldr	r0, [pc, #96]	@ (80010b0 <StartDefaultTask+0x78>)
 800104e:	f007 f90d 	bl	800826c <puts>
  printf("System Heartbeat Monitor Active\r\n");
 8001052:	4818      	ldr	r0, [pc, #96]	@ (80010b4 <StartDefaultTask+0x7c>)
 8001054:	f007 f90a 	bl	800826c <puts>
  
  /* Infinite loop */
  for(;;)
  {
    uint32_t current_time = HAL_GetTick();
 8001058:	f001 fee6 	bl	8002e28 <HAL_GetTick>
 800105c:	60b8      	str	r0, [r7, #8]
    
    // 每2秒发送一次心跳数据包（增加频率）
    if ((current_time - last_heartbeat_print) >= 2000) {
 800105e:	68ba      	ldr	r2, [r7, #8]
 8001060:	693b      	ldr	r3, [r7, #16]
 8001062:	1ad3      	subs	r3, r2, r3
 8001064:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001068:	d30a      	bcc.n	8001080 <StartDefaultTask+0x48>
      heartbeat_counter++;
 800106a:	68fb      	ldr	r3, [r7, #12]
 800106c:	3301      	adds	r3, #1
 800106e:	60fb      	str	r3, [r7, #12]
      printf("[%lu] Heartbeat #%lu - System Running OK - Time: %lu ms\r\n", 
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	68fa      	ldr	r2, [r7, #12]
 8001074:	68f9      	ldr	r1, [r7, #12]
 8001076:	4810      	ldr	r0, [pc, #64]	@ (80010b8 <StartDefaultTask+0x80>)
 8001078:	f007 f890 	bl	800819c <iprintf>
             heartbeat_counter, heartbeat_counter, current_time);
      last_heartbeat_print = current_time;
 800107c:	68bb      	ldr	r3, [r7, #8]
 800107e:	613b      	str	r3, [r7, #16]
    }
    
    // 每10秒打印一次详细系统状态
    if ((current_time - last_status_print) >= 10000) {
 8001080:	68ba      	ldr	r2, [r7, #8]
 8001082:	697b      	ldr	r3, [r7, #20]
 8001084:	1ad3      	subs	r3, r2, r3
 8001086:	f242 720f 	movw	r2, #9999	@ 0x270f
 800108a:	4293      	cmp	r3, r2
 800108c:	d90a      	bls.n	80010a4 <StartDefaultTask+0x6c>
      printf("\r\n=== System Status Report #%lu ===\r\n", heartbeat_counter);
 800108e:	68f9      	ldr	r1, [r7, #12]
 8001090:	480a      	ldr	r0, [pc, #40]	@ (80010bc <StartDefaultTask+0x84>)
 8001092:	f007 f883 	bl	800819c <iprintf>
      CAN_App_PrintStatus();
 8001096:	f7ff fd87 	bl	8000ba8 <CAN_App_PrintStatus>
      printf("=== End of Status Report ===\r\n\r\n");
 800109a:	4809      	ldr	r0, [pc, #36]	@ (80010c0 <StartDefaultTask+0x88>)
 800109c:	f007 f8e6 	bl	800826c <puts>
      last_status_print = current_time;
 80010a0:	68bb      	ldr	r3, [r7, #8]
 80010a2:	617b      	str	r3, [r7, #20]
    }
    
    // 检查系统运行状态
    // 这里可以添加系统监控代码
    
    osDelay(500);  // 减少到500ms周期，提高响应性
 80010a4:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80010a8:	f004 f956 	bl	8005358 <osDelay>
  {
 80010ac:	e7d4      	b.n	8001058 <StartDefaultTask+0x20>
 80010ae:	bf00      	nop
 80010b0:	08009844 	.word	0x08009844
 80010b4:	0800985c 	.word	0x0800985c
 80010b8:	08009880 	.word	0x08009880
 80010bc:	080098bc 	.word	0x080098bc
 80010c0:	080098e4 	.word	0x080098e4

080010c4 <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 80010c4:	b580      	push	{r7, lr}
 80010c6:	b082      	sub	sp, #8
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  // 调用CAN发送任务主函数
  CAN_SendTask_Main(argument);
 80010cc:	6878      	ldr	r0, [r7, #4]
 80010ce:	f7ff fac5 	bl	800065c <CAN_SendTask_Main>
  /* USER CODE END StartCANSendTask */
}
 80010d2:	bf00      	nop
 80010d4:	3708      	adds	r7, #8
 80010d6:	46bd      	mov	sp, r7
 80010d8:	bd80      	pop	{r7, pc}

080010da <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 80010da:	b580      	push	{r7, lr}
 80010dc:	b082      	sub	sp, #8
 80010de:	af00      	add	r7, sp, #0
 80010e0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  // 调用CAN接收任务主函数
  CAN_ReceiveTask_Main(argument);
 80010e2:	6878      	ldr	r0, [r7, #4]
 80010e4:	f7ff fbca 	bl	800087c <CAN_ReceiveTask_Main>
  /* USER CODE END StartCANReceiveTask */
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}

080010f0 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010f0:	b580      	push	{r7, lr}
 80010f2:	b082      	sub	sp, #8
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010f8:	687b      	ldr	r3, [r7, #4]
 80010fa:	681b      	ldr	r3, [r3, #0]
 80010fc:	4a04      	ldr	r2, [pc, #16]	@ (8001110 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010fe:	4293      	cmp	r3, r2
 8001100:	d101      	bne.n	8001106 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 8001102:	f001 fe7d 	bl	8002e00 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40010000 	.word	0x40010000

08001114 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001118:	b672      	cpsid	i
}
 800111a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800111c:	bf00      	nop
 800111e:	e7fd      	b.n	800111c <Error_Handler+0x8>

08001120 <MCP2515_SPI_ReadWrite>:
  * @brief  SPI读写一个字节
  * @param  data: 要发送的数据
  * @retval 接收到的数据
  */
uint8_t MCP2515_SPI_ReadWrite(uint8_t data)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b088      	sub	sp, #32
 8001124:	af02      	add	r7, sp, #8
 8001126:	4603      	mov	r3, r0
 8001128:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 800112a:	2300      	movs	r3, #0
 800112c:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    
    // 使用HAL库进行SPI通信
    status = HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, MCP2515_SPI_TIMEOUT);
 800112e:	f107 020f 	add.w	r2, r7, #15
 8001132:	1df9      	adds	r1, r7, #7
 8001134:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001138:	9300      	str	r3, [sp, #0]
 800113a:	2301      	movs	r3, #1
 800113c:	4818      	ldr	r0, [pc, #96]	@ (80011a0 <MCP2515_SPI_ReadWrite+0x80>)
 800113e:	f002 feb2 	bl	8003ea6 <HAL_SPI_TransmitReceive>
 8001142:	4603      	mov	r3, r0
 8001144:	75fb      	strb	r3, [r7, #23]
    
    if (status != HAL_OK) {
 8001146:	7dfb      	ldrb	r3, [r7, #23]
 8001148:	2b00      	cmp	r3, #0
 800114a:	d023      	beq.n	8001194 <MCP2515_SPI_ReadWrite+0x74>
        printf("SPI Error: Status=%d, TX=0x%02X\r\n", status, data);
 800114c:	7dfb      	ldrb	r3, [r7, #23]
 800114e:	79fa      	ldrb	r2, [r7, #7]
 8001150:	4619      	mov	r1, r3
 8001152:	4814      	ldr	r0, [pc, #80]	@ (80011a4 <MCP2515_SPI_ReadWrite+0x84>)
 8001154:	f007 f822 	bl	800819c <iprintf>
        
        // 检查具体错误类型
        if (status == HAL_TIMEOUT) {
 8001158:	7dfb      	ldrb	r3, [r7, #23]
 800115a:	2b03      	cmp	r3, #3
 800115c:	d103      	bne.n	8001166 <MCP2515_SPI_ReadWrite+0x46>
            printf("SPI Timeout - Check MISO connection\r\n");
 800115e:	4812      	ldr	r0, [pc, #72]	@ (80011a8 <MCP2515_SPI_ReadWrite+0x88>)
 8001160:	f007 f884 	bl	800826c <puts>
 8001164:	e014      	b.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_ERROR) {
 8001166:	7dfb      	ldrb	r3, [r7, #23]
 8001168:	2b01      	cmp	r3, #1
 800116a:	d10b      	bne.n	8001184 <MCP2515_SPI_ReadWrite+0x64>
            printf("SPI Hardware Error - Check configuration\r\n");
 800116c:	480f      	ldr	r0, [pc, #60]	@ (80011ac <MCP2515_SPI_ReadWrite+0x8c>)
 800116e:	f007 f87d 	bl	800826c <puts>
            uint32_t error = HAL_SPI_GetError(&hspi1);
 8001172:	480b      	ldr	r0, [pc, #44]	@ (80011a0 <MCP2515_SPI_ReadWrite+0x80>)
 8001174:	f003 f840 	bl	80041f8 <HAL_SPI_GetError>
 8001178:	6138      	str	r0, [r7, #16]
            printf("SPI Error Code: 0x%08lX\r\n", error);
 800117a:	6939      	ldr	r1, [r7, #16]
 800117c:	480c      	ldr	r0, [pc, #48]	@ (80011b0 <MCP2515_SPI_ReadWrite+0x90>)
 800117e:	f007 f80d 	bl	800819c <iprintf>
 8001182:	e005      	b.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_BUSY) {
 8001184:	7dfb      	ldrb	r3, [r7, #23]
 8001186:	2b02      	cmp	r3, #2
 8001188:	d102      	bne.n	8001190 <MCP2515_SPI_ReadWrite+0x70>
            printf("SPI Busy - Previous operation not completed\r\n");
 800118a:	480a      	ldr	r0, [pc, #40]	@ (80011b4 <MCP2515_SPI_ReadWrite+0x94>)
 800118c:	f007 f86e 	bl	800826c <puts>
        }
        
        return 0xFF;
 8001190:	23ff      	movs	r3, #255	@ 0xff
 8001192:	e000      	b.n	8001196 <MCP2515_SPI_ReadWrite+0x76>
    }
    
    return rx_data;
 8001194:	7bfb      	ldrb	r3, [r7, #15]
}
 8001196:	4618      	mov	r0, r3
 8001198:	3718      	adds	r7, #24
 800119a:	46bd      	mov	sp, r7
 800119c:	bd80      	pop	{r7, pc}
 800119e:	bf00      	nop
 80011a0:	20000098 	.word	0x20000098
 80011a4:	08009904 	.word	0x08009904
 80011a8:	08009928 	.word	0x08009928
 80011ac:	08009950 	.word	0x08009950
 80011b0:	0800997c 	.word	0x0800997c
 80011b4:	08009998 	.word	0x08009998

080011b8 <MCP2515_CS_Low>:
  * @brief  拉低MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_Low(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 80011bc:	2200      	movs	r2, #0
 80011be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <MCP2515_CS_Low+0x14>)
 80011c4:	f002 f8de 	bl	8003384 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <MCP2515_CS_High>:
  * @brief  拉高MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_High(void)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
 80011d4:	2201      	movs	r2, #1
 80011d6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011da:	4802      	ldr	r0, [pc, #8]	@ (80011e4 <MCP2515_CS_High+0x14>)
 80011dc:	f002 f8d2 	bl	8003384 <HAL_GPIO_WritePin>
}
 80011e0:	bf00      	nop
 80011e2:	bd80      	pop	{r7, pc}
 80011e4:	40020400 	.word	0x40020400

080011e8 <MCP2515_ReadRegister>:
  * @brief  读取MCP2515寄存器
  * @param  address: 寄存器地址
  * @retval 寄存器值
  */
uint8_t MCP2515_ReadRegister(uint8_t address)
{
 80011e8:	b580      	push	{r7, lr}
 80011ea:	b084      	sub	sp, #16
 80011ec:	af00      	add	r7, sp, #0
 80011ee:	4603      	mov	r3, r0
 80011f0:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    
    MCP2515_CS_Low();                           // 拉低片选
 80011f2:	f7ff ffe1 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ);    // 发送读指令
 80011f6:	2003      	movs	r0, #3
 80011f8:	f7ff ff92 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 80011fc:	79fb      	ldrb	r3, [r7, #7]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff8e 	bl	8001120 <MCP2515_SPI_ReadWrite>
    data = MCP2515_SPI_ReadWrite(0x00);         // 读取数据
 8001204:	2000      	movs	r0, #0
 8001206:	f7ff ff8b 	bl	8001120 <MCP2515_SPI_ReadWrite>
 800120a:	4603      	mov	r3, r0
 800120c:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_High();                          // 拉高片选
 800120e:	f7ff ffdf 	bl	80011d0 <MCP2515_CS_High>
    
    return data;
 8001212:	7bfb      	ldrb	r3, [r7, #15]
}
 8001214:	4618      	mov	r0, r3
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}

0800121c <MCP2515_WriteRegister>:
  * @param  address: 寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void MCP2515_WriteRegister(uint8_t address, uint8_t data)
{
 800121c:	b580      	push	{r7, lr}
 800121e:	b082      	sub	sp, #8
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_Low();                           // 拉低片选
 800122c:	f7ff ffc4 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_WRITE);   // 发送写指令
 8001230:	2002      	movs	r0, #2
 8001232:	f7ff ff75 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 8001236:	79fb      	ldrb	r3, [r7, #7]
 8001238:	4618      	mov	r0, r3
 800123a:	f7ff ff71 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                // 发送数据
 800123e:	79bb      	ldrb	r3, [r7, #6]
 8001240:	4618      	mov	r0, r3
 8001242:	f7ff ff6d 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                          // 拉高片选
 8001246:	f7ff ffc3 	bl	80011d0 <MCP2515_CS_High>
}
 800124a:	bf00      	nop
 800124c:	3708      	adds	r7, #8
 800124e:	46bd      	mov	sp, r7
 8001250:	bd80      	pop	{r7, pc}

08001252 <MCP2515_ModifyRegister>:
  * @param  mask: 位掩码
  * @param  data: 新的位值
  * @retval None
  */
void MCP2515_ModifyRegister(uint8_t address, uint8_t mask, uint8_t data)
{
 8001252:	b580      	push	{r7, lr}
 8001254:	b082      	sub	sp, #8
 8001256:	af00      	add	r7, sp, #0
 8001258:	4603      	mov	r3, r0
 800125a:	71fb      	strb	r3, [r7, #7]
 800125c:	460b      	mov	r3, r1
 800125e:	71bb      	strb	r3, [r7, #6]
 8001260:	4613      	mov	r3, r2
 8001262:	717b      	strb	r3, [r7, #5]
    MCP2515_CS_Low();                               // 拉低片选
 8001264:	f7ff ffa8 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_BIT_MODIFY);  // 发送位修改指令
 8001268:	2005      	movs	r0, #5
 800126a:	f7ff ff59 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);                 // 发送寄存器地址
 800126e:	79fb      	ldrb	r3, [r7, #7]
 8001270:	4618      	mov	r0, r3
 8001272:	f7ff ff55 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(mask);                    // 发送位掩码
 8001276:	79bb      	ldrb	r3, [r7, #6]
 8001278:	4618      	mov	r0, r3
 800127a:	f7ff ff51 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                    // 发送新数据
 800127e:	797b      	ldrb	r3, [r7, #5]
 8001280:	4618      	mov	r0, r3
 8001282:	f7ff ff4d 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                              // 拉高片选
 8001286:	f7ff ffa3 	bl	80011d0 <MCP2515_CS_High>
}
 800128a:	bf00      	nop
 800128c:	3708      	adds	r7, #8
 800128e:	46bd      	mov	sp, r7
 8001290:	bd80      	pop	{r7, pc}
	...

08001294 <MCP2515_Reset>:
  * @brief  复位MCP2515
  * @param  None
  * @retval None
  */
void MCP2515_Reset(void)
{
 8001294:	b580      	push	{r7, lr}
 8001296:	b082      	sub	sp, #8
 8001298:	af00      	add	r7, sp, #0
    printf("Starting MCP2515 reset...\r\n");
 800129a:	482a      	ldr	r0, [pc, #168]	@ (8001344 <MCP2515_Reset+0xb0>)
 800129c:	f006 ffe6 	bl	800826c <puts>
    
    MCP2515_CS_Low();
 80012a0:	f7ff ff8a 	bl	80011b8 <MCP2515_CS_Low>
    printf("CS pulled low\r\n");
 80012a4:	4828      	ldr	r0, [pc, #160]	@ (8001348 <MCP2515_Reset+0xb4>)
 80012a6:	f006 ffe1 	bl	800826c <puts>
    
    uint8_t result = MCP2515_SPI_ReadWrite(MCP2515_CMD_RESET);
 80012aa:	20c0      	movs	r0, #192	@ 0xc0
 80012ac:	f7ff ff38 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80012b0:	4603      	mov	r3, r0
 80012b2:	71fb      	strb	r3, [r7, #7]
    printf("Reset command sent, SPI result: 0x%02X\r\n", result);
 80012b4:	79fb      	ldrb	r3, [r7, #7]
 80012b6:	4619      	mov	r1, r3
 80012b8:	4824      	ldr	r0, [pc, #144]	@ (800134c <MCP2515_Reset+0xb8>)
 80012ba:	f006 ff6f 	bl	800819c <iprintf>
    
    MCP2515_CS_High();
 80012be:	f7ff ff87 	bl	80011d0 <MCP2515_CS_High>
    printf("CS pulled high\r\n");
 80012c2:	4823      	ldr	r0, [pc, #140]	@ (8001350 <MCP2515_Reset+0xbc>)
 80012c4:	f006 ffd2 	bl	800826c <puts>
    
    osDelay(20);  // 增加延时确保复位完成
 80012c8:	2014      	movs	r0, #20
 80012ca:	f004 f845 	bl	8005358 <osDelay>
    printf("Reset delay completed\r\n");
 80012ce:	4821      	ldr	r0, [pc, #132]	@ (8001354 <MCP2515_Reset+0xc0>)
 80012d0:	f006 ffcc 	bl	800826c <puts>
    
    // 验证复位状态
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80012d4:	200e      	movs	r0, #14
 80012d6:	f7ff ff87 	bl	80011e8 <MCP2515_ReadRegister>
 80012da:	4603      	mov	r3, r0
 80012dc:	71bb      	strb	r3, [r7, #6]
    printf("CANSTAT after reset: 0x%02X\r\n", canstat);
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	4619      	mov	r1, r3
 80012e2:	481d      	ldr	r0, [pc, #116]	@ (8001358 <MCP2515_Reset+0xc4>)
 80012e4:	f006 ff5a 	bl	800819c <iprintf>
    
    // 检查复位状态 - 允许多种有效状态
    if (canstat == 0x80) {
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b80      	cmp	r3, #128	@ 0x80
 80012ec:	d103      	bne.n	80012f6 <MCP2515_Reset+0x62>
        printf("✓ MCP2515 reset successful (Configuration mode)\r\n");
 80012ee:	481b      	ldr	r0, [pc, #108]	@ (800135c <MCP2515_Reset+0xc8>)
 80012f0:	f006 ffbc 	bl	800826c <puts>
        printf("✗ No SPI response - Check MISO connection\r\n");
    } else {
        printf("⚠ Unexpected reset state: 0x%02X\r\n", canstat);
        printf("  Continuing initialization attempt...\r\n");
    }
}
 80012f4:	e022      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0x40) {
 80012f6:	79bb      	ldrb	r3, [r7, #6]
 80012f8:	2b40      	cmp	r3, #64	@ 0x40
 80012fa:	d106      	bne.n	800130a <MCP2515_Reset+0x76>
        printf("✓ MCP2515 reset successful (Loopback mode detected)\r\n");
 80012fc:	4818      	ldr	r0, [pc, #96]	@ (8001360 <MCP2515_Reset+0xcc>)
 80012fe:	f006 ffb5 	bl	800826c <puts>
        printf("  Note: This is normal, will switch to config mode\r\n");
 8001302:	4818      	ldr	r0, [pc, #96]	@ (8001364 <MCP2515_Reset+0xd0>)
 8001304:	f006 ffb2 	bl	800826c <puts>
}
 8001308:	e018      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0x00) {
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	2b00      	cmp	r3, #0
 800130e:	d106      	bne.n	800131e <MCP2515_Reset+0x8a>
        printf("✓ MCP2515 reset successful (Normal mode detected)\r\n");
 8001310:	4815      	ldr	r0, [pc, #84]	@ (8001368 <MCP2515_Reset+0xd4>)
 8001312:	f006 ffab 	bl	800826c <puts>
        printf("  Note: This is normal, will switch to config mode\r\n");
 8001316:	4813      	ldr	r0, [pc, #76]	@ (8001364 <MCP2515_Reset+0xd0>)
 8001318:	f006 ffa8 	bl	800826c <puts>
}
 800131c:	e00e      	b.n	800133c <MCP2515_Reset+0xa8>
    } else if (canstat == 0xFF) {
 800131e:	79bb      	ldrb	r3, [r7, #6]
 8001320:	2bff      	cmp	r3, #255	@ 0xff
 8001322:	d103      	bne.n	800132c <MCP2515_Reset+0x98>
        printf("✗ No SPI response - Check MISO connection\r\n");
 8001324:	4811      	ldr	r0, [pc, #68]	@ (800136c <MCP2515_Reset+0xd8>)
 8001326:	f006 ffa1 	bl	800826c <puts>
}
 800132a:	e007      	b.n	800133c <MCP2515_Reset+0xa8>
        printf("⚠ Unexpected reset state: 0x%02X\r\n", canstat);
 800132c:	79bb      	ldrb	r3, [r7, #6]
 800132e:	4619      	mov	r1, r3
 8001330:	480f      	ldr	r0, [pc, #60]	@ (8001370 <MCP2515_Reset+0xdc>)
 8001332:	f006 ff33 	bl	800819c <iprintf>
        printf("  Continuing initialization attempt...\r\n");
 8001336:	480f      	ldr	r0, [pc, #60]	@ (8001374 <MCP2515_Reset+0xe0>)
 8001338:	f006 ff98 	bl	800826c <puts>
}
 800133c:	bf00      	nop
 800133e:	3708      	adds	r7, #8
 8001340:	46bd      	mov	sp, r7
 8001342:	bd80      	pop	{r7, pc}
 8001344:	080099c8 	.word	0x080099c8
 8001348:	080099e4 	.word	0x080099e4
 800134c:	080099f4 	.word	0x080099f4
 8001350:	08009a20 	.word	0x08009a20
 8001354:	08009a30 	.word	0x08009a30
 8001358:	08009a48 	.word	0x08009a48
 800135c:	08009a68 	.word	0x08009a68
 8001360:	08009a9c 	.word	0x08009a9c
 8001364:	08009ad4 	.word	0x08009ad4
 8001368:	08009b08 	.word	0x08009b08
 800136c:	08009b40 	.word	0x08009b40
 8001370:	08009b70 	.word	0x08009b70
 8001374:	08009b98 	.word	0x08009b98

08001378 <MCP2515_SetMode>:
  * @brief  设置MCP2515工作模式
  * @param  mode: 工作模式
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SetMode(uint8_t mode)
{
 8001378:	b580      	push	{r7, lr}
 800137a:	b084      	sub	sp, #16
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	71fb      	strb	r3, [r7, #7]
    printf("Setting mode to 0x%02X...", mode);
 8001382:	79fb      	ldrb	r3, [r7, #7]
 8001384:	4619      	mov	r1, r3
 8001386:	4814      	ldr	r0, [pc, #80]	@ (80013d8 <MCP2515_SetMode+0x60>)
 8001388:	f006 ff08 	bl	800819c <iprintf>
    
    // 修改CANCTRL寄存器的模式位
    MCP2515_ModifyRegister(MCP2515_CANCTRL, 0xE0, mode);
 800138c:	79fb      	ldrb	r3, [r7, #7]
 800138e:	461a      	mov	r2, r3
 8001390:	21e0      	movs	r1, #224	@ 0xe0
 8001392:	200f      	movs	r0, #15
 8001394:	f7ff ff5d 	bl	8001252 <MCP2515_ModifyRegister>
    
    // 等待模式切换完成
    uint8_t result = MCP2515_WaitForMode(mode, MCP2515_MODE_TIMEOUT);
 8001398:	79fb      	ldrb	r3, [r7, #7]
 800139a:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 800139e:	4618      	mov	r0, r3
 80013a0:	f000 fbbc 	bl	8001b1c <MCP2515_WaitForMode>
 80013a4:	4603      	mov	r3, r0
 80013a6:	73fb      	strb	r3, [r7, #15]
    
    if (result == MCP2515_OK) {
 80013a8:	7bfb      	ldrb	r3, [r7, #15]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d103      	bne.n	80013b6 <MCP2515_SetMode+0x3e>
        printf(" SUCCESS\r\n");
 80013ae:	480b      	ldr	r0, [pc, #44]	@ (80013dc <MCP2515_SetMode+0x64>)
 80013b0:	f006 ff5c 	bl	800826c <puts>
 80013b4:	e00b      	b.n	80013ce <MCP2515_SetMode+0x56>
    } else {
        printf(" TIMEOUT\r\n");
 80013b6:	480a      	ldr	r0, [pc, #40]	@ (80013e0 <MCP2515_SetMode+0x68>)
 80013b8:	f006 ff58 	bl	800826c <puts>
        printf("Current mode: 0x%02X, Expected: 0x%02X\r\n", MCP2515_GetMode(), mode);
 80013bc:	f000 f814 	bl	80013e8 <MCP2515_GetMode>
 80013c0:	4603      	mov	r3, r0
 80013c2:	4619      	mov	r1, r3
 80013c4:	79fb      	ldrb	r3, [r7, #7]
 80013c6:	461a      	mov	r2, r3
 80013c8:	4806      	ldr	r0, [pc, #24]	@ (80013e4 <MCP2515_SetMode+0x6c>)
 80013ca:	f006 fee7 	bl	800819c <iprintf>
    }
    
    return result;
 80013ce:	7bfb      	ldrb	r3, [r7, #15]
}
 80013d0:	4618      	mov	r0, r3
 80013d2:	3710      	adds	r7, #16
 80013d4:	46bd      	mov	sp, r7
 80013d6:	bd80      	pop	{r7, pc}
 80013d8:	08009bc0 	.word	0x08009bc0
 80013dc:	08009bdc 	.word	0x08009bdc
 80013e0:	08009be8 	.word	0x08009be8
 80013e4:	08009bf4 	.word	0x08009bf4

080013e8 <MCP2515_GetMode>:
  * @brief  获取MCP2515当前工作模式
  * @param  None
  * @retval 当前工作模式
  */
uint8_t MCP2515_GetMode(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
    uint8_t mode = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80013ee:	200e      	movs	r0, #14
 80013f0:	f7ff fefa 	bl	80011e8 <MCP2515_ReadRegister>
 80013f4:	4603      	mov	r3, r0
 80013f6:	71fb      	strb	r3, [r7, #7]
    return (mode & 0xE0);  // 返回模式位
 80013f8:	79fb      	ldrb	r3, [r7, #7]
 80013fa:	f023 031f 	bic.w	r3, r3, #31
 80013fe:	b2db      	uxtb	r3, r3
}
 8001400:	4618      	mov	r0, r3
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MCP2515_SetBaudRate>:
  * @brief  设置CAN波特率
  * @param  baudrate: 波特率选择 (MCP2515_BAUD_125K ~ MCP2515_BAUD_1000K)
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetBaudRate(uint8_t baudrate)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b082      	sub	sp, #8
 800140c:	af00      	add	r7, sp, #0
 800140e:	4603      	mov	r3, r0
 8001410:	71fb      	strb	r3, [r7, #7]
    if (baudrate > MCP2515_BAUD_1000K) {
 8001412:	79fb      	ldrb	r3, [r7, #7]
 8001414:	2b03      	cmp	r3, #3
 8001416:	d901      	bls.n	800141c <MCP2515_SetBaudRate+0x14>
        return MCP2515_ERROR;  // 无效的波特率参数
 8001418:	2301      	movs	r3, #1
 800141a:	e02b      	b.n	8001474 <MCP2515_SetBaudRate+0x6c>
    }
    
    // 必须在配置模式下设置波特率
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 800141c:	2080      	movs	r0, #128	@ 0x80
 800141e:	f7ff ffab 	bl	8001378 <MCP2515_SetMode>
 8001422:	4603      	mov	r3, r0
 8001424:	2b00      	cmp	r3, #0
 8001426:	d001      	beq.n	800142c <MCP2515_SetBaudRate+0x24>
        return MCP2515_ERROR;
 8001428:	2301      	movs	r3, #1
 800142a:	e023      	b.n	8001474 <MCP2515_SetBaudRate+0x6c>
    }
    
    // 写入波特率配置寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, mcp2515_baud_config[baudrate][0]);
 800142c:	79fa      	ldrb	r2, [r7, #7]
 800142e:	4913      	ldr	r1, [pc, #76]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 8001430:	4613      	mov	r3, r2
 8001432:	005b      	lsls	r3, r3, #1
 8001434:	4413      	add	r3, r2
 8001436:	440b      	add	r3, r1
 8001438:	781b      	ldrb	r3, [r3, #0]
 800143a:	4619      	mov	r1, r3
 800143c:	202a      	movs	r0, #42	@ 0x2a
 800143e:	f7ff feed 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF2, mcp2515_baud_config[baudrate][1]);
 8001442:	79fa      	ldrb	r2, [r7, #7]
 8001444:	490d      	ldr	r1, [pc, #52]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 8001446:	4613      	mov	r3, r2
 8001448:	005b      	lsls	r3, r3, #1
 800144a:	4413      	add	r3, r2
 800144c:	440b      	add	r3, r1
 800144e:	3301      	adds	r3, #1
 8001450:	781b      	ldrb	r3, [r3, #0]
 8001452:	4619      	mov	r1, r3
 8001454:	2029      	movs	r0, #41	@ 0x29
 8001456:	f7ff fee1 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF3, mcp2515_baud_config[baudrate][2]);
 800145a:	79fa      	ldrb	r2, [r7, #7]
 800145c:	4907      	ldr	r1, [pc, #28]	@ (800147c <MCP2515_SetBaudRate+0x74>)
 800145e:	4613      	mov	r3, r2
 8001460:	005b      	lsls	r3, r3, #1
 8001462:	4413      	add	r3, r2
 8001464:	440b      	add	r3, r1
 8001466:	3302      	adds	r3, #2
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	4619      	mov	r1, r3
 800146c:	2028      	movs	r0, #40	@ 0x28
 800146e:	f7ff fed5 	bl	800121c <MCP2515_WriteRegister>
    
    return MCP2515_OK;
 8001472:	2300      	movs	r3, #0
}
 8001474:	4618      	mov	r0, r3
 8001476:	3708      	adds	r7, #8
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	0800b7f4 	.word	0x0800b7f4

08001480 <MCP2515_Init>:
  * @brief  初始化MCP2515
  * @param  baudrate: CAN波特率
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_Init(uint8_t baudrate)
{
 8001480:	b580      	push	{r7, lr}
 8001482:	b082      	sub	sp, #8
 8001484:	af00      	add	r7, sp, #0
 8001486:	4603      	mov	r3, r0
 8001488:	71fb      	strb	r3, [r7, #7]
    // 复位MCP2515
    MCP2515_Reset();
 800148a:	f7ff ff03 	bl	8001294 <MCP2515_Reset>
    
    // 强制切换到配置模式，不依赖复位状态
    printf("Forcing switch to configuration mode...\r\n");
 800148e:	482c      	ldr	r0, [pc, #176]	@ (8001540 <MCP2515_Init+0xc0>)
 8001490:	f006 feec 	bl	800826c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001494:	2080      	movs	r0, #128	@ 0x80
 8001496:	f7ff ff6f 	bl	8001378 <MCP2515_SetMode>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d015      	beq.n	80014cc <MCP2515_Init+0x4c>
        printf("✗ Failed to enter configuration mode\r\n");
 80014a0:	4828      	ldr	r0, [pc, #160]	@ (8001544 <MCP2515_Init+0xc4>)
 80014a2:	f006 fee3 	bl	800826c <puts>
        // 尝试再次复位和切换
        printf("Retrying reset and mode switch...\r\n");
 80014a6:	4828      	ldr	r0, [pc, #160]	@ (8001548 <MCP2515_Init+0xc8>)
 80014a8:	f006 fee0 	bl	800826c <puts>
        MCP2515_Reset();
 80014ac:	f7ff fef2 	bl	8001294 <MCP2515_Reset>
        osDelay(50);  // 增加延时
 80014b0:	2032      	movs	r0, #50	@ 0x32
 80014b2:	f003 ff51 	bl	8005358 <osDelay>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 80014b6:	2080      	movs	r0, #128	@ 0x80
 80014b8:	f7ff ff5e 	bl	8001378 <MCP2515_SetMode>
 80014bc:	4603      	mov	r3, r0
 80014be:	2b00      	cmp	r3, #0
 80014c0:	d004      	beq.n	80014cc <MCP2515_Init+0x4c>
            printf("✗ Second attempt failed\r\n");
 80014c2:	4822      	ldr	r0, [pc, #136]	@ (800154c <MCP2515_Init+0xcc>)
 80014c4:	f006 fed2 	bl	800826c <puts>
            return MCP2515_ERROR;
 80014c8:	2301      	movs	r3, #1
 80014ca:	e034      	b.n	8001536 <MCP2515_Init+0xb6>
        }
    }
    printf("✓ Successfully entered configuration mode\r\n");
 80014cc:	4820      	ldr	r0, [pc, #128]	@ (8001550 <MCP2515_Init+0xd0>)
 80014ce:	f006 fecd 	bl	800826c <puts>
    
    // 检查MCP2515是否响应（在配置模式下测试）
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80014d2:	f000 f9b7 	bl	8001844 <MCP2515_SelfTest>
 80014d6:	4603      	mov	r3, r0
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d004      	beq.n	80014e6 <MCP2515_Init+0x66>
        printf("✗ MCP2515 self-test failed\r\n");
 80014dc:	481d      	ldr	r0, [pc, #116]	@ (8001554 <MCP2515_Init+0xd4>)
 80014de:	f006 fec5 	bl	800826c <puts>
        return MCP2515_ERROR;
 80014e2:	2301      	movs	r3, #1
 80014e4:	e027      	b.n	8001536 <MCP2515_Init+0xb6>
    }
    printf("✓ MCP2515 self-test passed\r\n");
 80014e6:	481c      	ldr	r0, [pc, #112]	@ (8001558 <MCP2515_Init+0xd8>)
 80014e8:	f006 fec0 	bl	800826c <puts>
    
    // 已经在配置模式下，直接进行波特率设置
    
    // 设置波特率
    if (MCP2515_SetBaudRate(baudrate) != MCP2515_OK) {
 80014ec:	79fb      	ldrb	r3, [r7, #7]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff ff8a 	bl	8001408 <MCP2515_SetBaudRate>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MCP2515_Init+0x7e>
        return MCP2515_ERROR;
 80014fa:	2301      	movs	r3, #1
 80014fc:	e01b      	b.n	8001536 <MCP2515_Init+0xb6>
    }
    
    // 配置接收缓冲区控制寄存器
    MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);  // 接收所有消息
 80014fe:	2160      	movs	r1, #96	@ 0x60
 8001500:	2060      	movs	r0, #96	@ 0x60
 8001502:	f7ff fe8b 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);  // 接收所有消息
 8001506:	2160      	movs	r1, #96	@ 0x60
 8001508:	2070      	movs	r0, #112	@ 0x70
 800150a:	f7ff fe87 	bl	800121c <MCP2515_WriteRegister>
    
    // 清除所有中断标志
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 800150e:	2100      	movs	r1, #0
 8001510:	202c      	movs	r0, #44	@ 0x2c
 8001512:	f7ff fe83 	bl	800121c <MCP2515_WriteRegister>
    
    // 启用接收中断
    MCP2515_WriteRegister(MCP2515_CANINTE, MCP2515_INT_RX0IF | MCP2515_INT_RX1IF);
 8001516:	2103      	movs	r1, #3
 8001518:	202b      	movs	r0, #43	@ 0x2b
 800151a:	f7ff fe7f 	bl	800121c <MCP2515_WriteRegister>
    
    // 切换到正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 800151e:	2000      	movs	r0, #0
 8001520:	f7ff ff2a 	bl	8001378 <MCP2515_SetMode>
 8001524:	4603      	mov	r3, r0
 8001526:	2b00      	cmp	r3, #0
 8001528:	d001      	beq.n	800152e <MCP2515_Init+0xae>
        return MCP2515_ERROR;
 800152a:	2301      	movs	r3, #1
 800152c:	e003      	b.n	8001536 <MCP2515_Init+0xb6>
    }
    
    mcp2515_initialized = 1;  // 设置初始化标志
 800152e:	4b0b      	ldr	r3, [pc, #44]	@ (800155c <MCP2515_Init+0xdc>)
 8001530:	2201      	movs	r2, #1
 8001532:	701a      	strb	r2, [r3, #0]
    
    return MCP2515_OK;
 8001534:	2300      	movs	r3, #0
}
 8001536:	4618      	mov	r0, r3
 8001538:	3708      	adds	r7, #8
 800153a:	46bd      	mov	sp, r7
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	08009c20 	.word	0x08009c20
 8001544:	08009c4c 	.word	0x08009c4c
 8001548:	08009c74 	.word	0x08009c74
 800154c:	08009c98 	.word	0x08009c98
 8001550:	08009cb4 	.word	0x08009cb4
 8001554:	08009ce4 	.word	0x08009ce4
 8001558:	08009d04 	.word	0x08009d04
 800155c:	20000148 	.word	0x20000148

08001560 <MCP2515_SetMask>:
  * @param  mask_value: 掩码值
  * @param  extended: 0=标准帧, 1=扩展帧
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetMask(uint8_t mask_num, uint32_t mask_value, uint8_t extended)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b086      	sub	sp, #24
 8001564:	af00      	add	r7, sp, #0
 8001566:	4603      	mov	r3, r0
 8001568:	6039      	str	r1, [r7, #0]
 800156a:	71fb      	strb	r3, [r7, #7]
 800156c:	4613      	mov	r3, r2
 800156e:	71bb      	strb	r3, [r7, #6]
    uint8_t sidh, sidl, eid8, eid0;
    uint8_t mask_regs[2][4] = {
 8001570:	4a3c      	ldr	r2, [pc, #240]	@ (8001664 <MCP2515_SetMask+0x104>)
 8001572:	f107 0308 	add.w	r3, r7, #8
 8001576:	e892 0003 	ldmia.w	r2, {r0, r1}
 800157a:	e883 0003 	stmia.w	r3, {r0, r1}
        {0x20, 0x21, 0x22, 0x23},  // RXM0
        {0x24, 0x25, 0x26, 0x27}   // RXM1
    };
    
    if (mask_num > 1) {
 800157e:	79fb      	ldrb	r3, [r7, #7]
 8001580:	2b01      	cmp	r3, #1
 8001582:	d901      	bls.n	8001588 <MCP2515_SetMask+0x28>
        return MCP2515_ERROR;
 8001584:	2301      	movs	r3, #1
 8001586:	e069      	b.n	800165c <MCP2515_SetMask+0xfc>
    }
    
    // 必须在配置模式下设置掩码
    uint8_t current_mode = MCP2515_GetMode();
 8001588:	f7ff ff2e 	bl	80013e8 <MCP2515_GetMode>
 800158c:	4603      	mov	r3, r0
 800158e:	74fb      	strb	r3, [r7, #19]
    if (current_mode != MCP2515_MODE_CONFIG) {
 8001590:	7cfb      	ldrb	r3, [r7, #19]
 8001592:	2b80      	cmp	r3, #128	@ 0x80
 8001594:	d007      	beq.n	80015a6 <MCP2515_SetMask+0x46>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001596:	2080      	movs	r0, #128	@ 0x80
 8001598:	f7ff feee 	bl	8001378 <MCP2515_SetMode>
 800159c:	4603      	mov	r3, r0
 800159e:	2b00      	cmp	r3, #0
 80015a0:	d001      	beq.n	80015a6 <MCP2515_SetMask+0x46>
            return MCP2515_ERROR;
 80015a2:	2301      	movs	r3, #1
 80015a4:	e05a      	b.n	800165c <MCP2515_SetMask+0xfc>
        }
    }
    
    if (extended) {
 80015a6:	79bb      	ldrb	r3, [r7, #6]
 80015a8:	2b00      	cmp	r3, #0
 80015aa:	d018      	beq.n	80015de <MCP2515_SetMask+0x7e>
        // 扩展帧掩码配置
        sidh = (uint8_t)(mask_value >> 21);
 80015ac:	683b      	ldr	r3, [r7, #0]
 80015ae:	0d5b      	lsrs	r3, r3, #21
 80015b0:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)(((mask_value >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((mask_value >> 16) & 0x03);
 80015b2:	683b      	ldr	r3, [r7, #0]
 80015b4:	0c9b      	lsrs	r3, r3, #18
 80015b6:	b2db      	uxtb	r3, r3
 80015b8:	015b      	lsls	r3, r3, #5
 80015ba:	b2da      	uxtb	r2, r3
 80015bc:	683b      	ldr	r3, [r7, #0]
 80015be:	0c1b      	lsrs	r3, r3, #16
 80015c0:	b2db      	uxtb	r3, r3
 80015c2:	f003 0303 	and.w	r3, r3, #3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	4313      	orrs	r3, r2
 80015ca:	b2db      	uxtb	r3, r3
 80015cc:	f043 0308 	orr.w	r3, r3, #8
 80015d0:	75bb      	strb	r3, [r7, #22]
        eid8 = (uint8_t)(mask_value >> 8);
 80015d2:	683b      	ldr	r3, [r7, #0]
 80015d4:	0a1b      	lsrs	r3, r3, #8
 80015d6:	757b      	strb	r3, [r7, #21]
        eid0 = (uint8_t)mask_value;
 80015d8:	683b      	ldr	r3, [r7, #0]
 80015da:	753b      	strb	r3, [r7, #20]
 80015dc:	e00a      	b.n	80015f4 <MCP2515_SetMask+0x94>
    } else {
        // 标准帧掩码配置
        sidh = (uint8_t)(mask_value >> 3);
 80015de:	683b      	ldr	r3, [r7, #0]
 80015e0:	08db      	lsrs	r3, r3, #3
 80015e2:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)((mask_value & 0x07) << 5);
 80015e4:	683b      	ldr	r3, [r7, #0]
 80015e6:	b2db      	uxtb	r3, r3
 80015e8:	015b      	lsls	r3, r3, #5
 80015ea:	75bb      	strb	r3, [r7, #22]
        eid8 = 0;
 80015ec:	2300      	movs	r3, #0
 80015ee:	757b      	strb	r3, [r7, #21]
        eid0 = 0;
 80015f0:	2300      	movs	r3, #0
 80015f2:	753b      	strb	r3, [r7, #20]
    }
    
    // 写入掩码寄存器
    MCP2515_WriteRegister(mask_regs[mask_num][0], sidh);
 80015f4:	79fb      	ldrb	r3, [r7, #7]
 80015f6:	009b      	lsls	r3, r3, #2
 80015f8:	3318      	adds	r3, #24
 80015fa:	443b      	add	r3, r7
 80015fc:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 8001600:	7dfa      	ldrb	r2, [r7, #23]
 8001602:	4611      	mov	r1, r2
 8001604:	4618      	mov	r0, r3
 8001606:	f7ff fe09 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][1], sidl);
 800160a:	79fb      	ldrb	r3, [r7, #7]
 800160c:	009b      	lsls	r3, r3, #2
 800160e:	3318      	adds	r3, #24
 8001610:	443b      	add	r3, r7
 8001612:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8001616:	7dba      	ldrb	r2, [r7, #22]
 8001618:	4611      	mov	r1, r2
 800161a:	4618      	mov	r0, r3
 800161c:	f7ff fdfe 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][2], eid8);
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	3318      	adds	r3, #24
 8001626:	443b      	add	r3, r7
 8001628:	f813 3c0e 	ldrb.w	r3, [r3, #-14]
 800162c:	7d7a      	ldrb	r2, [r7, #21]
 800162e:	4611      	mov	r1, r2
 8001630:	4618      	mov	r0, r3
 8001632:	f7ff fdf3 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][3], eid0);
 8001636:	79fb      	ldrb	r3, [r7, #7]
 8001638:	009b      	lsls	r3, r3, #2
 800163a:	3318      	adds	r3, #24
 800163c:	443b      	add	r3, r7
 800163e:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 8001642:	7d3a      	ldrb	r2, [r7, #20]
 8001644:	4611      	mov	r1, r2
 8001646:	4618      	mov	r0, r3
 8001648:	f7ff fde8 	bl	800121c <MCP2515_WriteRegister>
    
    // 恢复原来的模式
    if (current_mode != MCP2515_MODE_CONFIG) {
 800164c:	7cfb      	ldrb	r3, [r7, #19]
 800164e:	2b80      	cmp	r3, #128	@ 0x80
 8001650:	d003      	beq.n	800165a <MCP2515_SetMask+0xfa>
        MCP2515_SetMode(current_mode);
 8001652:	7cfb      	ldrb	r3, [r7, #19]
 8001654:	4618      	mov	r0, r3
 8001656:	f7ff fe8f 	bl	8001378 <MCP2515_SetMode>
    }
    
    return MCP2515_OK;
 800165a:	2300      	movs	r3, #0
}
 800165c:	4618      	mov	r0, r3
 800165e:	3718      	adds	r7, #24
 8001660:	46bd      	mov	sp, r7
 8001662:	bd80      	pop	{r7, pc}
 8001664:	08009d3c 	.word	0x08009d3c

08001668 <MCP2515_SendMessage>:
  * @brief  发送CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SendMessage(MCP2515_CANMessage_t *message)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b084      	sub	sp, #16
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    uint32_t timeout = 0;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
    
    if (!mcp2515_initialized || message == NULL) {
 8001674:	4b26      	ldr	r3, [pc, #152]	@ (8001710 <MCP2515_SendMessage+0xa8>)
 8001676:	781b      	ldrb	r3, [r3, #0]
 8001678:	2b00      	cmp	r3, #0
 800167a:	d002      	beq.n	8001682 <MCP2515_SendMessage+0x1a>
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d101      	bne.n	8001686 <MCP2515_SendMessage+0x1e>
        return MCP2515_ERROR;
 8001682:	2301      	movs	r3, #1
 8001684:	e03f      	b.n	8001706 <MCP2515_SendMessage+0x9e>
    }
    
    // 查找空闲的发送缓冲区
    buffer = MCP2515_GetTxBuffer();
 8001686:	f000 fa93 	bl	8001bb0 <MCP2515_GetTxBuffer>
 800168a:	4603      	mov	r3, r0
 800168c:	72fb      	strb	r3, [r7, #11]
    if (buffer == 0xFF) {
 800168e:	7afb      	ldrb	r3, [r7, #11]
 8001690:	2bff      	cmp	r3, #255	@ 0xff
 8001692:	d101      	bne.n	8001698 <MCP2515_SendMessage+0x30>
        return MCP2515_ERROR;  // 没有空闲的发送缓冲区
 8001694:	2301      	movs	r3, #1
 8001696:	e036      	b.n	8001706 <MCP2515_SendMessage+0x9e>
    }
    
    // 加载消息到发送缓冲区
    MCP2515_LoadTxBuffer(buffer, message);
 8001698:	7afb      	ldrb	r3, [r7, #11]
 800169a:	6879      	ldr	r1, [r7, #4]
 800169c:	4618      	mov	r0, r3
 800169e:	f000 faa8 	bl	8001bf2 <MCP2515_LoadTxBuffer>
    
    // 请求发送
    MCP2515_CS_Low();
 80016a2:	f7ff fd89 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_RTS | (1 << buffer));
 80016a6:	7afb      	ldrb	r3, [r7, #11]
 80016a8:	2201      	movs	r2, #1
 80016aa:	fa02 f303 	lsl.w	r3, r2, r3
 80016ae:	b25b      	sxtb	r3, r3
 80016b0:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80016b4:	b25b      	sxtb	r3, r3
 80016b6:	b2db      	uxtb	r3, r3
 80016b8:	4618      	mov	r0, r3
 80016ba:	f7ff fd31 	bl	8001120 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();
 80016be:	f7ff fd87 	bl	80011d0 <MCP2515_CS_High>
    
    // 等待发送完成
    while (timeout < 1000) {
 80016c2:	e01b      	b.n	80016fc <MCP2515_SendMessage+0x94>
        uint8_t status = MCP2515_GetInterruptFlags();
 80016c4:	f000 f893 	bl	80017ee <MCP2515_GetInterruptFlags>
 80016c8:	4603      	mov	r3, r0
 80016ca:	72bb      	strb	r3, [r7, #10]
        if (status & (MCP2515_INT_TX0IF << buffer)) {
 80016cc:	7aba      	ldrb	r2, [r7, #10]
 80016ce:	7afb      	ldrb	r3, [r7, #11]
 80016d0:	2104      	movs	r1, #4
 80016d2:	fa01 f303 	lsl.w	r3, r1, r3
 80016d6:	4013      	ands	r3, r2
 80016d8:	2b00      	cmp	r3, #0
 80016da:	d009      	beq.n	80016f0 <MCP2515_SendMessage+0x88>
            // 清除发送完成中断标志
            MCP2515_ClearInterruptFlags(MCP2515_INT_TX0IF << buffer);
 80016dc:	7afb      	ldrb	r3, [r7, #11]
 80016de:	2204      	movs	r2, #4
 80016e0:	fa02 f303 	lsl.w	r3, r2, r3
 80016e4:	b2db      	uxtb	r3, r3
 80016e6:	4618      	mov	r0, r3
 80016e8:	f000 f889 	bl	80017fe <MCP2515_ClearInterruptFlags>
            return MCP2515_OK;
 80016ec:	2300      	movs	r3, #0
 80016ee:	e00a      	b.n	8001706 <MCP2515_SendMessage+0x9e>
        }
        osDelay(1);
 80016f0:	2001      	movs	r0, #1
 80016f2:	f003 fe31 	bl	8005358 <osDelay>
        timeout++;
 80016f6:	68fb      	ldr	r3, [r7, #12]
 80016f8:	3301      	adds	r3, #1
 80016fa:	60fb      	str	r3, [r7, #12]
    while (timeout < 1000) {
 80016fc:	68fb      	ldr	r3, [r7, #12]
 80016fe:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001702:	d3df      	bcc.n	80016c4 <MCP2515_SendMessage+0x5c>
    }
    
    return MCP2515_TIMEOUT;
 8001704:	2302      	movs	r3, #2
}
 8001706:	4618      	mov	r0, r3
 8001708:	3710      	adds	r7, #16
 800170a:	46bd      	mov	sp, r7
 800170c:	bd80      	pop	{r7, pc}
 800170e:	bf00      	nop
 8001710:	20000148 	.word	0x20000148

08001714 <MCP2515_ReceiveMessage>:
  * @brief  接收CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_ReceiveMessage(MCP2515_CANMessage_t *message)
{
 8001714:	b580      	push	{r7, lr}
 8001716:	b084      	sub	sp, #16
 8001718:	af00      	add	r7, sp, #0
 800171a:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (!mcp2515_initialized || message == NULL) {
 800171c:	4b16      	ldr	r3, [pc, #88]	@ (8001778 <MCP2515_ReceiveMessage+0x64>)
 800171e:	781b      	ldrb	r3, [r3, #0]
 8001720:	2b00      	cmp	r3, #0
 8001722:	d002      	beq.n	800172a <MCP2515_ReceiveMessage+0x16>
 8001724:	687b      	ldr	r3, [r7, #4]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d101      	bne.n	800172e <MCP2515_ReceiveMessage+0x1a>
        return MCP2515_ERROR;
 800172a:	2301      	movs	r3, #1
 800172c:	e020      	b.n	8001770 <MCP2515_ReceiveMessage+0x5c>
    }
    
    status = MCP2515_GetInterruptFlags();
 800172e:	f000 f85e 	bl	80017ee <MCP2515_GetInterruptFlags>
 8001732:	4603      	mov	r3, r0
 8001734:	73fb      	strb	r3, [r7, #15]
    
    if (status & MCP2515_INT_RX0IF) {
 8001736:	7bfb      	ldrb	r3, [r7, #15]
 8001738:	f003 0301 	and.w	r3, r3, #1
 800173c:	2b00      	cmp	r3, #0
 800173e:	d008      	beq.n	8001752 <MCP2515_ReceiveMessage+0x3e>
        // 从接收缓冲区0读取消息
        MCP2515_ReadRxBuffer(0, message);
 8001740:	6879      	ldr	r1, [r7, #4]
 8001742:	2000      	movs	r0, #0
 8001744:	f000 fae3 	bl	8001d0e <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX0IF);
 8001748:	2001      	movs	r0, #1
 800174a:	f000 f858 	bl	80017fe <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 800174e:	2300      	movs	r3, #0
 8001750:	e00e      	b.n	8001770 <MCP2515_ReceiveMessage+0x5c>
    } else if (status & MCP2515_INT_RX1IF) {
 8001752:	7bfb      	ldrb	r3, [r7, #15]
 8001754:	f003 0302 	and.w	r3, r3, #2
 8001758:	2b00      	cmp	r3, #0
 800175a:	d008      	beq.n	800176e <MCP2515_ReceiveMessage+0x5a>
        // 从接收缓冲区1读取消息
        MCP2515_ReadRxBuffer(1, message);
 800175c:	6879      	ldr	r1, [r7, #4]
 800175e:	2001      	movs	r0, #1
 8001760:	f000 fad5 	bl	8001d0e <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX1IF);
 8001764:	2002      	movs	r0, #2
 8001766:	f000 f84a 	bl	80017fe <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 800176a:	2300      	movs	r3, #0
 800176c:	e000      	b.n	8001770 <MCP2515_ReceiveMessage+0x5c>
    }
    
    return MCP2515_ERROR;  // 没有接收到消息
 800176e:	2301      	movs	r3, #1
}
 8001770:	4618      	mov	r0, r3
 8001772:	3710      	adds	r7, #16
 8001774:	46bd      	mov	sp, r7
 8001776:	bd80      	pop	{r7, pc}
 8001778:	20000148 	.word	0x20000148

0800177c <MCP2515_CheckReceive>:
  * @brief  检查是否有消息接收
  * @param  None
  * @retval 1: 有消息, 0: 无消息
  */
uint8_t MCP2515_CheckReceive(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetInterruptFlags();
 8001782:	f000 f834 	bl	80017ee <MCP2515_GetInterruptFlags>
 8001786:	4603      	mov	r3, r0
 8001788:	71fb      	strb	r3, [r7, #7]
    return (status & (MCP2515_INT_RX0IF | MCP2515_INT_RX1IF)) ? 1 : 0;
 800178a:	79fb      	ldrb	r3, [r7, #7]
 800178c:	f003 0303 	and.w	r3, r3, #3
 8001790:	2b00      	cmp	r3, #0
 8001792:	bf14      	ite	ne
 8001794:	2301      	movne	r3, #1
 8001796:	2300      	moveq	r3, #0
 8001798:	b2db      	uxtb	r3, r3
}
 800179a:	4618      	mov	r0, r3
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <MCP2515_CheckTransmit>:
  * @brief  检查发送缓冲区状态
  * @param  None
  * @retval 发送缓冲区空闲数量
  */
uint8_t MCP2515_CheckTransmit(void)
{
 80017a2:	b580      	push	{r7, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80017a8:	f000 f838 	bl	800181c <MCP2515_GetStatus>
 80017ac:	4603      	mov	r3, r0
 80017ae:	71bb      	strb	r3, [r7, #6]
    uint8_t free_buffers = 0;
 80017b0:	2300      	movs	r3, #0
 80017b2:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) free_buffers++;  // TXB0空闲
 80017b4:	79bb      	ldrb	r3, [r7, #6]
 80017b6:	f003 0304 	and.w	r3, r3, #4
 80017ba:	2b00      	cmp	r3, #0
 80017bc:	d102      	bne.n	80017c4 <MCP2515_CheckTransmit+0x22>
 80017be:	79fb      	ldrb	r3, [r7, #7]
 80017c0:	3301      	adds	r3, #1
 80017c2:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x10)) free_buffers++;  // TXB1空闲
 80017c4:	79bb      	ldrb	r3, [r7, #6]
 80017c6:	f003 0310 	and.w	r3, r3, #16
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d102      	bne.n	80017d4 <MCP2515_CheckTransmit+0x32>
 80017ce:	79fb      	ldrb	r3, [r7, #7]
 80017d0:	3301      	adds	r3, #1
 80017d2:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x40)) free_buffers++;  // TXB2空闲
 80017d4:	79bb      	ldrb	r3, [r7, #6]
 80017d6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80017da:	2b00      	cmp	r3, #0
 80017dc:	d102      	bne.n	80017e4 <MCP2515_CheckTransmit+0x42>
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	3301      	adds	r3, #1
 80017e2:	71fb      	strb	r3, [r7, #7]
    
    return free_buffers;
 80017e4:	79fb      	ldrb	r3, [r7, #7]
}
 80017e6:	4618      	mov	r0, r3
 80017e8:	3708      	adds	r7, #8
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}

080017ee <MCP2515_GetInterruptFlags>:
  * @brief  获取中断标志
  * @param  None
  * @retval 中断标志寄存器值
  */
uint8_t MCP2515_GetInterruptFlags(void)
{
 80017ee:	b580      	push	{r7, lr}
 80017f0:	af00      	add	r7, sp, #0
    return MCP2515_ReadRegister(MCP2515_CANINTF);
 80017f2:	202c      	movs	r0, #44	@ 0x2c
 80017f4:	f7ff fcf8 	bl	80011e8 <MCP2515_ReadRegister>
 80017f8:	4603      	mov	r3, r0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	bd80      	pop	{r7, pc}

080017fe <MCP2515_ClearInterruptFlags>:
  * @brief  清除中断标志
  * @param  flags: 要清除的中断标志
  * @retval None
  */
void MCP2515_ClearInterruptFlags(uint8_t flags)
{
 80017fe:	b580      	push	{r7, lr}
 8001800:	b082      	sub	sp, #8
 8001802:	af00      	add	r7, sp, #0
 8001804:	4603      	mov	r3, r0
 8001806:	71fb      	strb	r3, [r7, #7]
    MCP2515_ModifyRegister(MCP2515_CANINTF, flags, 0x00);
 8001808:	79fb      	ldrb	r3, [r7, #7]
 800180a:	2200      	movs	r2, #0
 800180c:	4619      	mov	r1, r3
 800180e:	202c      	movs	r0, #44	@ 0x2c
 8001810:	f7ff fd1f 	bl	8001252 <MCP2515_ModifyRegister>
}
 8001814:	bf00      	nop
 8001816:	3708      	adds	r7, #8
 8001818:	46bd      	mov	sp, r7
 800181a:	bd80      	pop	{r7, pc}

0800181c <MCP2515_GetStatus>:
  * @brief  获取MCP2515状态
  * @param  None
  * @retval 状态寄存器值
  */
uint8_t MCP2515_GetStatus(void)
{
 800181c:	b580      	push	{r7, lr}
 800181e:	b082      	sub	sp, #8
 8001820:	af00      	add	r7, sp, #0
    uint8_t status;
    
    MCP2515_CS_Low();
 8001822:	f7ff fcc9 	bl	80011b8 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ_STATUS);
 8001826:	20a0      	movs	r0, #160	@ 0xa0
 8001828:	f7ff fc7a 	bl	8001120 <MCP2515_SPI_ReadWrite>
    status = MCP2515_SPI_ReadWrite(0x00);
 800182c:	2000      	movs	r0, #0
 800182e:	f7ff fc77 	bl	8001120 <MCP2515_SPI_ReadWrite>
 8001832:	4603      	mov	r3, r0
 8001834:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_High();
 8001836:	f7ff fccb 	bl	80011d0 <MCP2515_CS_High>
    
    return status;
 800183a:	79fb      	ldrb	r3, [r7, #7]
}
 800183c:	4618      	mov	r0, r3
 800183e:	3708      	adds	r7, #8
 8001840:	46bd      	mov	sp, r7
 8001842:	bd80      	pop	{r7, pc}

08001844 <MCP2515_SelfTest>:
  * @brief  MCP2515自检测试
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SelfTest(void)
{
 8001844:	b580      	push	{r7, lr}
 8001846:	b082      	sub	sp, #8
 8001848:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xAA;
 800184a:	23aa      	movs	r3, #170	@ 0xaa
 800184c:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data;
    
    // 写入测试数据到一个可读写的寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800184e:	79fb      	ldrb	r3, [r7, #7]
 8001850:	4619      	mov	r1, r3
 8001852:	202a      	movs	r0, #42	@ 0x2a
 8001854:	f7ff fce2 	bl	800121c <MCP2515_WriteRegister>
    
    // 读回数据进行比较
    read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001858:	202a      	movs	r0, #42	@ 0x2a
 800185a:	f7ff fcc5 	bl	80011e8 <MCP2515_ReadRegister>
 800185e:	4603      	mov	r3, r0
 8001860:	71bb      	strb	r3, [r7, #6]
    
    if (read_data == test_data) {
 8001862:	79ba      	ldrb	r2, [r7, #6]
 8001864:	79fb      	ldrb	r3, [r7, #7]
 8001866:	429a      	cmp	r2, r3
 8001868:	d111      	bne.n	800188e <MCP2515_SelfTest+0x4a>
        // 再次测试不同的数据
        test_data = 0x55;
 800186a:	2355      	movs	r3, #85	@ 0x55
 800186c:	71fb      	strb	r3, [r7, #7]
        MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800186e:	79fb      	ldrb	r3, [r7, #7]
 8001870:	4619      	mov	r1, r3
 8001872:	202a      	movs	r0, #42	@ 0x2a
 8001874:	f7ff fcd2 	bl	800121c <MCP2515_WriteRegister>
        read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001878:	202a      	movs	r0, #42	@ 0x2a
 800187a:	f7ff fcb5 	bl	80011e8 <MCP2515_ReadRegister>
 800187e:	4603      	mov	r3, r0
 8001880:	71bb      	strb	r3, [r7, #6]
        
        if (read_data == test_data) {
 8001882:	79ba      	ldrb	r2, [r7, #6]
 8001884:	79fb      	ldrb	r3, [r7, #7]
 8001886:	429a      	cmp	r2, r3
 8001888:	d101      	bne.n	800188e <MCP2515_SelfTest+0x4a>
            return MCP2515_OK;
 800188a:	2300      	movs	r3, #0
 800188c:	e000      	b.n	8001890 <MCP2515_SelfTest+0x4c>
        }
    }
    
    return MCP2515_ERROR;
 800188e:	2301      	movs	r3, #1
}
 8001890:	4618      	mov	r0, r3
 8001892:	3708      	adds	r7, #8
 8001894:	46bd      	mov	sp, r7
 8001896:	bd80      	pop	{r7, pc}

08001898 <MCP2515_HardwareTest>:
  * @brief  MCP2515硬件连接测试函数
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_HardwareTest(void)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
    printf("\r\n=== MCP2515 Hardware Connection Test ===\r\n");
 800189e:	4851      	ldr	r0, [pc, #324]	@ (80019e4 <MCP2515_HardwareTest+0x14c>)
 80018a0:	f006 fce4 	bl	800826c <puts>
    
    // 1. CS引脚控制测试
    printf("Step 1: Testing CS pin control...\r\n");
 80018a4:	4850      	ldr	r0, [pc, #320]	@ (80019e8 <MCP2515_HardwareTest+0x150>)
 80018a6:	f006 fce1 	bl	800826c <puts>
    for (int i = 0; i < 3; i++) {
 80018aa:	2300      	movs	r3, #0
 80018ac:	60fb      	str	r3, [r7, #12]
 80018ae:	e00c      	b.n	80018ca <MCP2515_HardwareTest+0x32>
        MCP2515_CS_High();
 80018b0:	f7ff fc8e 	bl	80011d0 <MCP2515_CS_High>
        osDelay(1);
 80018b4:	2001      	movs	r0, #1
 80018b6:	f003 fd4f 	bl	8005358 <osDelay>
        MCP2515_CS_Low();
 80018ba:	f7ff fc7d 	bl	80011b8 <MCP2515_CS_Low>
        osDelay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f003 fd4a 	bl	8005358 <osDelay>
    for (int i = 0; i < 3; i++) {
 80018c4:	68fb      	ldr	r3, [r7, #12]
 80018c6:	3301      	adds	r3, #1
 80018c8:	60fb      	str	r3, [r7, #12]
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	2b02      	cmp	r3, #2
 80018ce:	ddef      	ble.n	80018b0 <MCP2515_HardwareTest+0x18>
    }
    MCP2515_CS_High();
 80018d0:	f7ff fc7e 	bl	80011d0 <MCP2515_CS_High>
    printf("✓ CS pin control test completed\r\n");
 80018d4:	4845      	ldr	r0, [pc, #276]	@ (80019ec <MCP2515_HardwareTest+0x154>)
 80018d6:	f006 fcc9 	bl	800826c <puts>
    
    // 2. SPI基础通信测试
    printf("Step 2: Testing basic SPI communication...\r\n");
 80018da:	4845      	ldr	r0, [pc, #276]	@ (80019f0 <MCP2515_HardwareTest+0x158>)
 80018dc:	f006 fcc6 	bl	800826c <puts>
    MCP2515_CS_Low();
 80018e0:	f7ff fc6a 	bl	80011b8 <MCP2515_CS_Low>
    uint8_t dummy1 = MCP2515_SPI_ReadWrite(0x00);
 80018e4:	2000      	movs	r0, #0
 80018e6:	f7ff fc1b 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80018ea:	4603      	mov	r3, r0
 80018ec:	72fb      	strb	r3, [r7, #11]
    uint8_t dummy2 = MCP2515_SPI_ReadWrite(0xFF);
 80018ee:	20ff      	movs	r0, #255	@ 0xff
 80018f0:	f7ff fc16 	bl	8001120 <MCP2515_SPI_ReadWrite>
 80018f4:	4603      	mov	r3, r0
 80018f6:	72bb      	strb	r3, [r7, #10]
    MCP2515_CS_High();
 80018f8:	f7ff fc6a 	bl	80011d0 <MCP2515_CS_High>
    printf("SPI test results: 0x00->0x%02X, 0xFF->0x%02X\r\n", dummy1, dummy2);
 80018fc:	7afb      	ldrb	r3, [r7, #11]
 80018fe:	7aba      	ldrb	r2, [r7, #10]
 8001900:	4619      	mov	r1, r3
 8001902:	483c      	ldr	r0, [pc, #240]	@ (80019f4 <MCP2515_HardwareTest+0x15c>)
 8001904:	f006 fc4a 	bl	800819c <iprintf>
    
    if (dummy1 == 0xFF && dummy2 == 0xFF) {
 8001908:	7afb      	ldrb	r3, [r7, #11]
 800190a:	2bff      	cmp	r3, #255	@ 0xff
 800190c:	d108      	bne.n	8001920 <MCP2515_HardwareTest+0x88>
 800190e:	7abb      	ldrb	r3, [r7, #10]
 8001910:	2bff      	cmp	r3, #255	@ 0xff
 8001912:	d105      	bne.n	8001920 <MCP2515_HardwareTest+0x88>
        printf("⚠ Warning: All SPI reads return 0xFF\r\n");
 8001914:	4838      	ldr	r0, [pc, #224]	@ (80019f8 <MCP2515_HardwareTest+0x160>)
 8001916:	f006 fca9 	bl	800826c <puts>
        printf("  This suggests MISO line issue or MCP2515 not responding\r\n");
 800191a:	4838      	ldr	r0, [pc, #224]	@ (80019fc <MCP2515_HardwareTest+0x164>)
 800191c:	f006 fca6 	bl	800826c <puts>
    }
    
    // 3. 复位测试
    printf("Step 3: Testing MCP2515 reset...\r\n");
 8001920:	4837      	ldr	r0, [pc, #220]	@ (8001a00 <MCP2515_HardwareTest+0x168>)
 8001922:	f006 fca3 	bl	800826c <puts>
    MCP2515_Reset();
 8001926:	f7ff fcb5 	bl	8001294 <MCP2515_Reset>
    
    // 4. 寄存器读写测试
    printf("Step 4: Testing register read/write...\r\n");
 800192a:	4836      	ldr	r0, [pc, #216]	@ (8001a04 <MCP2515_HardwareTest+0x16c>)
 800192c:	f006 fc9e 	bl	800826c <puts>
    
    // 测试CNF1寄存器（可读写）
    uint8_t original = MCP2515_ReadRegister(MCP2515_CNF1);
 8001930:	202a      	movs	r0, #42	@ 0x2a
 8001932:	f7ff fc59 	bl	80011e8 <MCP2515_ReadRegister>
 8001936:	4603      	mov	r3, r0
 8001938:	727b      	strb	r3, [r7, #9]
    printf("CNF1 original value: 0x%02X\r\n", original);
 800193a:	7a7b      	ldrb	r3, [r7, #9]
 800193c:	4619      	mov	r1, r3
 800193e:	4832      	ldr	r0, [pc, #200]	@ (8001a08 <MCP2515_HardwareTest+0x170>)
 8001940:	f006 fc2c 	bl	800819c <iprintf>
    
    // 写入测试值
    uint8_t test_value = 0xAA;
 8001944:	23aa      	movs	r3, #170	@ 0xaa
 8001946:	723b      	strb	r3, [r7, #8]
    MCP2515_WriteRegister(MCP2515_CNF1, test_value);
 8001948:	7a3b      	ldrb	r3, [r7, #8]
 800194a:	4619      	mov	r1, r3
 800194c:	202a      	movs	r0, #42	@ 0x2a
 800194e:	f7ff fc65 	bl	800121c <MCP2515_WriteRegister>
    uint8_t read_back = MCP2515_ReadRegister(MCP2515_CNF1);
 8001952:	202a      	movs	r0, #42	@ 0x2a
 8001954:	f7ff fc48 	bl	80011e8 <MCP2515_ReadRegister>
 8001958:	4603      	mov	r3, r0
 800195a:	71fb      	strb	r3, [r7, #7]
    printf("CNF1 write 0x%02X, read back 0x%02X\r\n", test_value, read_back);
 800195c:	7a3b      	ldrb	r3, [r7, #8]
 800195e:	79fa      	ldrb	r2, [r7, #7]
 8001960:	4619      	mov	r1, r3
 8001962:	482a      	ldr	r0, [pc, #168]	@ (8001a0c <MCP2515_HardwareTest+0x174>)
 8001964:	f006 fc1a 	bl	800819c <iprintf>
    
    if (read_back == test_value) {
 8001968:	79fa      	ldrb	r2, [r7, #7]
 800196a:	7a3b      	ldrb	r3, [r7, #8]
 800196c:	429a      	cmp	r2, r3
 800196e:	d119      	bne.n	80019a4 <MCP2515_HardwareTest+0x10c>
        printf("✓ Register write test 1 passed\r\n");
 8001970:	4827      	ldr	r0, [pc, #156]	@ (8001a10 <MCP2515_HardwareTest+0x178>)
 8001972:	f006 fc7b 	bl	800826c <puts>
        printf("✗ Register write test 1 failed\r\n");
        return MCP2515_ERROR;
    }
    
    // 测试另一个值
    test_value = 0x55;
 8001976:	2355      	movs	r3, #85	@ 0x55
 8001978:	723b      	strb	r3, [r7, #8]
    MCP2515_WriteRegister(MCP2515_CNF1, test_value);
 800197a:	7a3b      	ldrb	r3, [r7, #8]
 800197c:	4619      	mov	r1, r3
 800197e:	202a      	movs	r0, #42	@ 0x2a
 8001980:	f7ff fc4c 	bl	800121c <MCP2515_WriteRegister>
    read_back = MCP2515_ReadRegister(MCP2515_CNF1);
 8001984:	202a      	movs	r0, #42	@ 0x2a
 8001986:	f7ff fc2f 	bl	80011e8 <MCP2515_ReadRegister>
 800198a:	4603      	mov	r3, r0
 800198c:	71fb      	strb	r3, [r7, #7]
    printf("CNF1 write 0x%02X, read back 0x%02X\r\n", test_value, read_back);
 800198e:	7a3b      	ldrb	r3, [r7, #8]
 8001990:	79fa      	ldrb	r2, [r7, #7]
 8001992:	4619      	mov	r1, r3
 8001994:	481d      	ldr	r0, [pc, #116]	@ (8001a0c <MCP2515_HardwareTest+0x174>)
 8001996:	f006 fc01 	bl	800819c <iprintf>
    
    if (read_back == test_value) {
 800199a:	79fa      	ldrb	r2, [r7, #7]
 800199c:	7a3b      	ldrb	r3, [r7, #8]
 800199e:	429a      	cmp	r2, r3
 80019a0:	d117      	bne.n	80019d2 <MCP2515_HardwareTest+0x13a>
 80019a2:	e004      	b.n	80019ae <MCP2515_HardwareTest+0x116>
        printf("✗ Register write test 1 failed\r\n");
 80019a4:	481b      	ldr	r0, [pc, #108]	@ (8001a14 <MCP2515_HardwareTest+0x17c>)
 80019a6:	f006 fc61 	bl	800826c <puts>
        return MCP2515_ERROR;
 80019aa:	2301      	movs	r3, #1
 80019ac:	e015      	b.n	80019da <MCP2515_HardwareTest+0x142>
        printf("✓ Register write test 2 passed\r\n");
 80019ae:	481a      	ldr	r0, [pc, #104]	@ (8001a18 <MCP2515_HardwareTest+0x180>)
 80019b0:	f006 fc5c 	bl	800826c <puts>
        printf("✗ Register write test 2 failed\r\n");
        return MCP2515_ERROR;
    }
    
    // 恢复原始值
    MCP2515_WriteRegister(MCP2515_CNF1, original);
 80019b4:	7a7b      	ldrb	r3, [r7, #9]
 80019b6:	4619      	mov	r1, r3
 80019b8:	202a      	movs	r0, #42	@ 0x2a
 80019ba:	f7ff fc2f 	bl	800121c <MCP2515_WriteRegister>
    printf("CNF1 restored to original value: 0x%02X\r\n", original);
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	4619      	mov	r1, r3
 80019c2:	4816      	ldr	r0, [pc, #88]	@ (8001a1c <MCP2515_HardwareTest+0x184>)
 80019c4:	f006 fbea 	bl	800819c <iprintf>
    
    printf("✓ All hardware tests passed!\r\n");
 80019c8:	4815      	ldr	r0, [pc, #84]	@ (8001a20 <MCP2515_HardwareTest+0x188>)
 80019ca:	f006 fc4f 	bl	800826c <puts>
    return MCP2515_OK;
 80019ce:	2300      	movs	r3, #0
 80019d0:	e003      	b.n	80019da <MCP2515_HardwareTest+0x142>
        printf("✗ Register write test 2 failed\r\n");
 80019d2:	4814      	ldr	r0, [pc, #80]	@ (8001a24 <MCP2515_HardwareTest+0x18c>)
 80019d4:	f006 fc4a 	bl	800826c <puts>
        return MCP2515_ERROR;
 80019d8:	2301      	movs	r3, #1
}
 80019da:	4618      	mov	r0, r3
 80019dc:	3710      	adds	r7, #16
 80019de:	46bd      	mov	sp, r7
 80019e0:	bd80      	pop	{r7, pc}
 80019e2:	bf00      	nop
 80019e4:	08009d44 	.word	0x08009d44
 80019e8:	08009d70 	.word	0x08009d70
 80019ec:	08009d94 	.word	0x08009d94
 80019f0:	08009db8 	.word	0x08009db8
 80019f4:	08009de4 	.word	0x08009de4
 80019f8:	08009e14 	.word	0x08009e14
 80019fc:	08009e3c 	.word	0x08009e3c
 8001a00:	08009e78 	.word	0x08009e78
 8001a04:	08009e9c 	.word	0x08009e9c
 8001a08:	08009ec4 	.word	0x08009ec4
 8001a0c:	08009ee4 	.word	0x08009ee4
 8001a10:	08009f0c 	.word	0x08009f0c
 8001a14:	08009f30 	.word	0x08009f30
 8001a18:	08009f54 	.word	0x08009f54
 8001a1c:	08009f9c 	.word	0x08009f9c
 8001a20:	08009fc8 	.word	0x08009fc8
 8001a24:	08009f78 	.word	0x08009f78

08001a28 <MCP2515_PrintStatus>:
  * @brief  打印MCP2515状态信息
  * @param  None
  * @retval None
  */
void MCP2515_PrintStatus(void)
{
 8001a28:	b580      	push	{r7, lr}
 8001a2a:	b082      	sub	sp, #8
 8001a2c:	af00      	add	r7, sp, #0
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 8001a2e:	200e      	movs	r0, #14
 8001a30:	f7ff fbda 	bl	80011e8 <MCP2515_ReadRegister>
 8001a34:	4603      	mov	r3, r0
 8001a36:	71fb      	strb	r3, [r7, #7]
    uint8_t canctrl = MCP2515_ReadRegister(MCP2515_CANCTRL);
 8001a38:	200f      	movs	r0, #15
 8001a3a:	f7ff fbd5 	bl	80011e8 <MCP2515_ReadRegister>
 8001a3e:	4603      	mov	r3, r0
 8001a40:	71bb      	strb	r3, [r7, #6]
    uint8_t canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001a42:	202c      	movs	r0, #44	@ 0x2c
 8001a44:	f7ff fbd0 	bl	80011e8 <MCP2515_ReadRegister>
 8001a48:	4603      	mov	r3, r0
 8001a4a:	717b      	strb	r3, [r7, #5]
    uint8_t eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001a4c:	202d      	movs	r0, #45	@ 0x2d
 8001a4e:	f7ff fbcb 	bl	80011e8 <MCP2515_ReadRegister>
 8001a52:	4603      	mov	r3, r0
 8001a54:	713b      	strb	r3, [r7, #4]
    
    printf("MCP2515 Status:\r\n");
 8001a56:	4825      	ldr	r0, [pc, #148]	@ (8001aec <MCP2515_PrintStatus+0xc4>)
 8001a58:	f006 fc08 	bl	800826c <puts>
    printf("CANSTAT: 0x%02X\r\n", canstat);
 8001a5c:	79fb      	ldrb	r3, [r7, #7]
 8001a5e:	4619      	mov	r1, r3
 8001a60:	4823      	ldr	r0, [pc, #140]	@ (8001af0 <MCP2515_PrintStatus+0xc8>)
 8001a62:	f006 fb9b 	bl	800819c <iprintf>
    printf("CANCTRL: 0x%02X\r\n", canctrl);
 8001a66:	79bb      	ldrb	r3, [r7, #6]
 8001a68:	4619      	mov	r1, r3
 8001a6a:	4822      	ldr	r0, [pc, #136]	@ (8001af4 <MCP2515_PrintStatus+0xcc>)
 8001a6c:	f006 fb96 	bl	800819c <iprintf>
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001a70:	797b      	ldrb	r3, [r7, #5]
 8001a72:	4619      	mov	r1, r3
 8001a74:	4820      	ldr	r0, [pc, #128]	@ (8001af8 <MCP2515_PrintStatus+0xd0>)
 8001a76:	f006 fb91 	bl	800819c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001a7a:	793b      	ldrb	r3, [r7, #4]
 8001a7c:	4619      	mov	r1, r3
 8001a7e:	481f      	ldr	r0, [pc, #124]	@ (8001afc <MCP2515_PrintStatus+0xd4>)
 8001a80:	f006 fb8c 	bl	800819c <iprintf>
    printf("Mode: ");
 8001a84:	481e      	ldr	r0, [pc, #120]	@ (8001b00 <MCP2515_PrintStatus+0xd8>)
 8001a86:	f006 fb89 	bl	800819c <iprintf>
    
    switch (canstat & 0xE0) {
 8001a8a:	79fb      	ldrb	r3, [r7, #7]
 8001a8c:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 8001a90:	2b80      	cmp	r3, #128	@ 0x80
 8001a92:	d01e      	beq.n	8001ad2 <MCP2515_PrintStatus+0xaa>
 8001a94:	2b80      	cmp	r3, #128	@ 0x80
 8001a96:	dc20      	bgt.n	8001ada <MCP2515_PrintStatus+0xb2>
 8001a98:	2b60      	cmp	r3, #96	@ 0x60
 8001a9a:	d016      	beq.n	8001aca <MCP2515_PrintStatus+0xa2>
 8001a9c:	2b60      	cmp	r3, #96	@ 0x60
 8001a9e:	dc1c      	bgt.n	8001ada <MCP2515_PrintStatus+0xb2>
 8001aa0:	2b40      	cmp	r3, #64	@ 0x40
 8001aa2:	d00e      	beq.n	8001ac2 <MCP2515_PrintStatus+0x9a>
 8001aa4:	2b40      	cmp	r3, #64	@ 0x40
 8001aa6:	dc18      	bgt.n	8001ada <MCP2515_PrintStatus+0xb2>
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d002      	beq.n	8001ab2 <MCP2515_PrintStatus+0x8a>
 8001aac:	2b20      	cmp	r3, #32
 8001aae:	d004      	beq.n	8001aba <MCP2515_PrintStatus+0x92>
 8001ab0:	e013      	b.n	8001ada <MCP2515_PrintStatus+0xb2>
        case MCP2515_MODE_NORMAL:
            printf("Normal\r\n");
 8001ab2:	4814      	ldr	r0, [pc, #80]	@ (8001b04 <MCP2515_PrintStatus+0xdc>)
 8001ab4:	f006 fbda 	bl	800826c <puts>
            break;
 8001ab8:	e013      	b.n	8001ae2 <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_SLEEP:
            printf("Sleep\r\n");
 8001aba:	4813      	ldr	r0, [pc, #76]	@ (8001b08 <MCP2515_PrintStatus+0xe0>)
 8001abc:	f006 fbd6 	bl	800826c <puts>
            break;
 8001ac0:	e00f      	b.n	8001ae2 <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LOOPBACK:
            printf("Loopback\r\n");
 8001ac2:	4812      	ldr	r0, [pc, #72]	@ (8001b0c <MCP2515_PrintStatus+0xe4>)
 8001ac4:	f006 fbd2 	bl	800826c <puts>
            break;
 8001ac8:	e00b      	b.n	8001ae2 <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LISTENONLY:
            printf("Listen Only\r\n");
 8001aca:	4811      	ldr	r0, [pc, #68]	@ (8001b10 <MCP2515_PrintStatus+0xe8>)
 8001acc:	f006 fbce 	bl	800826c <puts>
            break;
 8001ad0:	e007      	b.n	8001ae2 <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_CONFIG:
            printf("Configuration\r\n");
 8001ad2:	4810      	ldr	r0, [pc, #64]	@ (8001b14 <MCP2515_PrintStatus+0xec>)
 8001ad4:	f006 fbca 	bl	800826c <puts>
            break;
 8001ad8:	e003      	b.n	8001ae2 <MCP2515_PrintStatus+0xba>
        default:
            printf("Unknown\r\n");
 8001ada:	480f      	ldr	r0, [pc, #60]	@ (8001b18 <MCP2515_PrintStatus+0xf0>)
 8001adc:	f006 fbc6 	bl	800826c <puts>
            break;
 8001ae0:	bf00      	nop
    }
}
 8001ae2:	bf00      	nop
 8001ae4:	3708      	adds	r7, #8
 8001ae6:	46bd      	mov	sp, r7
 8001ae8:	bd80      	pop	{r7, pc}
 8001aea:	bf00      	nop
 8001aec:	08009fe8 	.word	0x08009fe8
 8001af0:	08009ffc 	.word	0x08009ffc
 8001af4:	0800a010 	.word	0x0800a010
 8001af8:	0800a024 	.word	0x0800a024
 8001afc:	0800a038 	.word	0x0800a038
 8001b00:	0800a048 	.word	0x0800a048
 8001b04:	0800a050 	.word	0x0800a050
 8001b08:	0800a058 	.word	0x0800a058
 8001b0c:	0800a060 	.word	0x0800a060
 8001b10:	0800a06c 	.word	0x0800a06c
 8001b14:	0800a07c 	.word	0x0800a07c
 8001b18:	0800a08c 	.word	0x0800a08c

08001b1c <MCP2515_WaitForMode>:
  * @param  mode: 目标模式
  * @param  timeout: 超时时间(ms)
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
static uint8_t MCP2515_WaitForMode(uint8_t mode, uint32_t timeout)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	b086      	sub	sp, #24
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	4603      	mov	r3, r0
 8001b24:	6039      	str	r1, [r7, #0]
 8001b26:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 8001b28:	f001 f97e 	bl	8002e28 <HAL_GetTick>
 8001b2c:	6138      	str	r0, [r7, #16]
    uint32_t check_count = 0;
 8001b2e:	2300      	movs	r3, #0
 8001b30:	617b      	str	r3, [r7, #20]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 8001b32:	e024      	b.n	8001b7e <MCP2515_WaitForMode+0x62>
        uint8_t current_mode = MCP2515_GetMode();
 8001b34:	f7ff fc58 	bl	80013e8 <MCP2515_GetMode>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	73fb      	strb	r3, [r7, #15]
        check_count++;
 8001b3c:	697b      	ldr	r3, [r7, #20]
 8001b3e:	3301      	adds	r3, #1
 8001b40:	617b      	str	r3, [r7, #20]
        
        if (current_mode == mode) {
 8001b42:	7bfa      	ldrb	r2, [r7, #15]
 8001b44:	79fb      	ldrb	r3, [r7, #7]
 8001b46:	429a      	cmp	r2, r3
 8001b48:	d105      	bne.n	8001b56 <MCP2515_WaitForMode+0x3a>
            printf("Mode switch completed after %lu checks\r\n", check_count);
 8001b4a:	6979      	ldr	r1, [r7, #20]
 8001b4c:	4814      	ldr	r0, [pc, #80]	@ (8001ba0 <MCP2515_WaitForMode+0x84>)
 8001b4e:	f006 fb25 	bl	800819c <iprintf>
            return MCP2515_OK;
 8001b52:	2300      	movs	r3, #0
 8001b54:	e020      	b.n	8001b98 <MCP2515_WaitForMode+0x7c>
        }
        
        // 每100次检查输出一次状态
        if (check_count % 100 == 0) {
 8001b56:	697a      	ldr	r2, [r7, #20]
 8001b58:	4b12      	ldr	r3, [pc, #72]	@ (8001ba4 <MCP2515_WaitForMode+0x88>)
 8001b5a:	fba3 1302 	umull	r1, r3, r3, r2
 8001b5e:	095b      	lsrs	r3, r3, #5
 8001b60:	2164      	movs	r1, #100	@ 0x64
 8001b62:	fb01 f303 	mul.w	r3, r1, r3
 8001b66:	1ad3      	subs	r3, r2, r3
 8001b68:	2b00      	cmp	r3, #0
 8001b6a:	d105      	bne.n	8001b78 <MCP2515_WaitForMode+0x5c>
            printf("Waiting for mode 0x%02X, current: 0x%02X (check #%lu)\r\n", 
 8001b6c:	79f9      	ldrb	r1, [r7, #7]
 8001b6e:	7bfa      	ldrb	r2, [r7, #15]
 8001b70:	697b      	ldr	r3, [r7, #20]
 8001b72:	480d      	ldr	r0, [pc, #52]	@ (8001ba8 <MCP2515_WaitForMode+0x8c>)
 8001b74:	f006 fb12 	bl	800819c <iprintf>
                   mode, current_mode, check_count);
        }
        
        osDelay(1);
 8001b78:	2001      	movs	r0, #1
 8001b7a:	f003 fbed 	bl	8005358 <osDelay>
    while ((HAL_GetTick() - start_time) < timeout) {
 8001b7e:	f001 f953 	bl	8002e28 <HAL_GetTick>
 8001b82:	4602      	mov	r2, r0
 8001b84:	693b      	ldr	r3, [r7, #16]
 8001b86:	1ad3      	subs	r3, r2, r3
 8001b88:	683a      	ldr	r2, [r7, #0]
 8001b8a:	429a      	cmp	r2, r3
 8001b8c:	d8d2      	bhi.n	8001b34 <MCP2515_WaitForMode+0x18>
    }
    
    printf("Mode switch timeout after %lu checks\r\n", check_count);
 8001b8e:	6979      	ldr	r1, [r7, #20]
 8001b90:	4806      	ldr	r0, [pc, #24]	@ (8001bac <MCP2515_WaitForMode+0x90>)
 8001b92:	f006 fb03 	bl	800819c <iprintf>
    return MCP2515_TIMEOUT;
 8001b96:	2302      	movs	r3, #2
}
 8001b98:	4618      	mov	r0, r3
 8001b9a:	3718      	adds	r7, #24
 8001b9c:	46bd      	mov	sp, r7
 8001b9e:	bd80      	pop	{r7, pc}
 8001ba0:	0800a098 	.word	0x0800a098
 8001ba4:	51eb851f 	.word	0x51eb851f
 8001ba8:	0800a0c4 	.word	0x0800a0c4
 8001bac:	0800a0fc 	.word	0x0800a0fc

08001bb0 <MCP2515_GetTxBuffer>:
  * @brief  获取空闲的发送缓冲区
  * @param  None
  * @retval 缓冲区编号 (0-2), 0xFF表示无空闲缓冲区
  */
static uint8_t MCP2515_GetTxBuffer(void)
{
 8001bb0:	b580      	push	{r7, lr}
 8001bb2:	b082      	sub	sp, #8
 8001bb4:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 8001bb6:	f7ff fe31 	bl	800181c <MCP2515_GetStatus>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) return 0;  // TXB0空闲
 8001bbe:	79fb      	ldrb	r3, [r7, #7]
 8001bc0:	f003 0304 	and.w	r3, r3, #4
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <MCP2515_GetTxBuffer+0x1c>
 8001bc8:	2300      	movs	r3, #0
 8001bca:	e00e      	b.n	8001bea <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x10)) return 1;  // TXB1空闲
 8001bcc:	79fb      	ldrb	r3, [r7, #7]
 8001bce:	f003 0310 	and.w	r3, r3, #16
 8001bd2:	2b00      	cmp	r3, #0
 8001bd4:	d101      	bne.n	8001bda <MCP2515_GetTxBuffer+0x2a>
 8001bd6:	2301      	movs	r3, #1
 8001bd8:	e007      	b.n	8001bea <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x40)) return 2;  // TXB2空闲
 8001bda:	79fb      	ldrb	r3, [r7, #7]
 8001bdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	d101      	bne.n	8001be8 <MCP2515_GetTxBuffer+0x38>
 8001be4:	2302      	movs	r3, #2
 8001be6:	e000      	b.n	8001bea <MCP2515_GetTxBuffer+0x3a>
    
    return 0xFF;  // 无空闲缓冲区
 8001be8:	23ff      	movs	r3, #255	@ 0xff
}
 8001bea:	4618      	mov	r0, r3
 8001bec:	3708      	adds	r7, #8
 8001bee:	46bd      	mov	sp, r7
 8001bf0:	bd80      	pop	{r7, pc}

08001bf2 <MCP2515_LoadTxBuffer>:
  * @param  buffer: 缓冲区编号 (0-2)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_LoadTxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001bf2:	b580      	push	{r7, lr}
 8001bf4:	b084      	sub	sp, #16
 8001bf6:	af00      	add	r7, sp, #0
 8001bf8:	4603      	mov	r3, r0
 8001bfa:	6039      	str	r1, [r7, #0]
 8001bfc:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x30 + (buffer * 0x10);  // 计算缓冲区基地址
 8001bfe:	79fb      	ldrb	r3, [r7, #7]
 8001c00:	3303      	adds	r3, #3
 8001c02:	b2db      	uxtb	r3, r3
 8001c04:	011b      	lsls	r3, r3, #4
 8001c06:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    
    // 准备ID寄存器值
    if (message->ide) {
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	791b      	ldrb	r3, [r3, #4]
 8001c0c:	2b00      	cmp	r3, #0
 8001c0e:	d01d      	beq.n	8001c4c <MCP2515_LoadTxBuffer+0x5a>
        // 扩展帧
        sidh = (uint8_t)(message->id >> 21);
 8001c10:	683b      	ldr	r3, [r7, #0]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	0d5b      	lsrs	r3, r3, #21
 8001c16:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)(((message->id >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((message->id >> 16) & 0x03);
 8001c18:	683b      	ldr	r3, [r7, #0]
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	0c9b      	lsrs	r3, r3, #18
 8001c1e:	b2db      	uxtb	r3, r3
 8001c20:	015b      	lsls	r3, r3, #5
 8001c22:	b2da      	uxtb	r2, r3
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	0c1b      	lsrs	r3, r3, #16
 8001c2a:	b2db      	uxtb	r3, r3
 8001c2c:	f003 0303 	and.w	r3, r3, #3
 8001c30:	b2db      	uxtb	r3, r3
 8001c32:	4313      	orrs	r3, r2
 8001c34:	b2db      	uxtb	r3, r3
 8001c36:	f043 0308 	orr.w	r3, r3, #8
 8001c3a:	73bb      	strb	r3, [r7, #14]
        eid8 = (uint8_t)(message->id >> 8);
 8001c3c:	683b      	ldr	r3, [r7, #0]
 8001c3e:	681b      	ldr	r3, [r3, #0]
 8001c40:	0a1b      	lsrs	r3, r3, #8
 8001c42:	737b      	strb	r3, [r7, #13]
        eid0 = (uint8_t)message->id;
 8001c44:	683b      	ldr	r3, [r7, #0]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	733b      	strb	r3, [r7, #12]
 8001c4a:	e00c      	b.n	8001c66 <MCP2515_LoadTxBuffer+0x74>
    } else {
        // 标准帧
        sidh = (uint8_t)(message->id >> 3);
 8001c4c:	683b      	ldr	r3, [r7, #0]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	08db      	lsrs	r3, r3, #3
 8001c52:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)((message->id & 0x07) << 5);
 8001c54:	683b      	ldr	r3, [r7, #0]
 8001c56:	681b      	ldr	r3, [r3, #0]
 8001c58:	b2db      	uxtb	r3, r3
 8001c5a:	015b      	lsls	r3, r3, #5
 8001c5c:	73bb      	strb	r3, [r7, #14]
        eid8 = 0;
 8001c5e:	2300      	movs	r3, #0
 8001c60:	737b      	strb	r3, [r7, #13]
        eid0 = 0;
 8001c62:	2300      	movs	r3, #0
 8001c64:	733b      	strb	r3, [r7, #12]
    }
    
    // 准备DLC寄存器值
    dlc = message->dlc & 0x0F;
 8001c66:	683b      	ldr	r3, [r7, #0]
 8001c68:	799b      	ldrb	r3, [r3, #6]
 8001c6a:	f003 030f 	and.w	r3, r3, #15
 8001c6e:	72fb      	strb	r3, [r7, #11]
    if (message->rtr) {
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	795b      	ldrb	r3, [r3, #5]
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	d003      	beq.n	8001c80 <MCP2515_LoadTxBuffer+0x8e>
        dlc |= 0x40;  // 设置RTR位
 8001c78:	7afb      	ldrb	r3, [r7, #11]
 8001c7a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8001c7e:	72fb      	strb	r3, [r7, #11]
    }
    
    // 写入ID和控制信息
    MCP2515_WriteRegister(base_addr + 1, sidh);  // SIDH
 8001c80:	7a7b      	ldrb	r3, [r7, #9]
 8001c82:	3301      	adds	r3, #1
 8001c84:	b2db      	uxtb	r3, r3
 8001c86:	7bfa      	ldrb	r2, [r7, #15]
 8001c88:	4611      	mov	r1, r2
 8001c8a:	4618      	mov	r0, r3
 8001c8c:	f7ff fac6 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 2, sidl);  // SIDL
 8001c90:	7a7b      	ldrb	r3, [r7, #9]
 8001c92:	3302      	adds	r3, #2
 8001c94:	b2db      	uxtb	r3, r3
 8001c96:	7bba      	ldrb	r2, [r7, #14]
 8001c98:	4611      	mov	r1, r2
 8001c9a:	4618      	mov	r0, r3
 8001c9c:	f7ff fabe 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 3, eid8);  // EID8
 8001ca0:	7a7b      	ldrb	r3, [r7, #9]
 8001ca2:	3303      	adds	r3, #3
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	7b7a      	ldrb	r2, [r7, #13]
 8001ca8:	4611      	mov	r1, r2
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7ff fab6 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 4, eid0);  // EID0
 8001cb0:	7a7b      	ldrb	r3, [r7, #9]
 8001cb2:	3304      	adds	r3, #4
 8001cb4:	b2db      	uxtb	r3, r3
 8001cb6:	7b3a      	ldrb	r2, [r7, #12]
 8001cb8:	4611      	mov	r1, r2
 8001cba:	4618      	mov	r0, r3
 8001cbc:	f7ff faae 	bl	800121c <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 5, dlc);   // DLC
 8001cc0:	7a7b      	ldrb	r3, [r7, #9]
 8001cc2:	3305      	adds	r3, #5
 8001cc4:	b2db      	uxtb	r3, r3
 8001cc6:	7afa      	ldrb	r2, [r7, #11]
 8001cc8:	4611      	mov	r1, r2
 8001cca:	4618      	mov	r0, r3
 8001ccc:	f7ff faa6 	bl	800121c <MCP2515_WriteRegister>
    
    // 写入数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	72bb      	strb	r3, [r7, #10]
 8001cd4:	e00f      	b.n	8001cf6 <MCP2515_LoadTxBuffer+0x104>
        MCP2515_WriteRegister(base_addr + 6 + i, message->data[i]);
 8001cd6:	7a7a      	ldrb	r2, [r7, #9]
 8001cd8:	7abb      	ldrb	r3, [r7, #10]
 8001cda:	4413      	add	r3, r2
 8001cdc:	b2db      	uxtb	r3, r3
 8001cde:	3306      	adds	r3, #6
 8001ce0:	b2d8      	uxtb	r0, r3
 8001ce2:	7abb      	ldrb	r3, [r7, #10]
 8001ce4:	683a      	ldr	r2, [r7, #0]
 8001ce6:	4413      	add	r3, r2
 8001ce8:	79db      	ldrb	r3, [r3, #7]
 8001cea:	4619      	mov	r1, r3
 8001cec:	f7ff fa96 	bl	800121c <MCP2515_WriteRegister>
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001cf0:	7abb      	ldrb	r3, [r7, #10]
 8001cf2:	3301      	adds	r3, #1
 8001cf4:	72bb      	strb	r3, [r7, #10]
 8001cf6:	683b      	ldr	r3, [r7, #0]
 8001cf8:	799b      	ldrb	r3, [r3, #6]
 8001cfa:	7aba      	ldrb	r2, [r7, #10]
 8001cfc:	429a      	cmp	r2, r3
 8001cfe:	d202      	bcs.n	8001d06 <MCP2515_LoadTxBuffer+0x114>
 8001d00:	7abb      	ldrb	r3, [r7, #10]
 8001d02:	2b07      	cmp	r3, #7
 8001d04:	d9e7      	bls.n	8001cd6 <MCP2515_LoadTxBuffer+0xe4>
    }
}
 8001d06:	bf00      	nop
 8001d08:	3710      	adds	r7, #16
 8001d0a:	46bd      	mov	sp, r7
 8001d0c:	bd80      	pop	{r7, pc}

08001d0e <MCP2515_ReadRxBuffer>:
  * @param  buffer: 缓冲区编号 (0-1)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_ReadRxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001d0e:	b590      	push	{r4, r7, lr}
 8001d10:	b085      	sub	sp, #20
 8001d12:	af00      	add	r7, sp, #0
 8001d14:	4603      	mov	r3, r0
 8001d16:	6039      	str	r1, [r7, #0]
 8001d18:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x60 + (buffer * 0x10);  // 计算缓冲区基地址
 8001d1a:	79fb      	ldrb	r3, [r7, #7]
 8001d1c:	3306      	adds	r3, #6
 8001d1e:	b2db      	uxtb	r3, r3
 8001d20:	011b      	lsls	r3, r3, #4
 8001d22:	73bb      	strb	r3, [r7, #14]
    uint8_t i;
    
    // 读取ID和控制信息
    sidh = MCP2515_ReadRegister(base_addr + 1);  // SIDH
 8001d24:	7bbb      	ldrb	r3, [r7, #14]
 8001d26:	3301      	adds	r3, #1
 8001d28:	b2db      	uxtb	r3, r3
 8001d2a:	4618      	mov	r0, r3
 8001d2c:	f7ff fa5c 	bl	80011e8 <MCP2515_ReadRegister>
 8001d30:	4603      	mov	r3, r0
 8001d32:	737b      	strb	r3, [r7, #13]
    sidl = MCP2515_ReadRegister(base_addr + 2);  // SIDL
 8001d34:	7bbb      	ldrb	r3, [r7, #14]
 8001d36:	3302      	adds	r3, #2
 8001d38:	b2db      	uxtb	r3, r3
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f7ff fa54 	bl	80011e8 <MCP2515_ReadRegister>
 8001d40:	4603      	mov	r3, r0
 8001d42:	733b      	strb	r3, [r7, #12]
    eid8 = MCP2515_ReadRegister(base_addr + 3);  // EID8
 8001d44:	7bbb      	ldrb	r3, [r7, #14]
 8001d46:	3303      	adds	r3, #3
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	4618      	mov	r0, r3
 8001d4c:	f7ff fa4c 	bl	80011e8 <MCP2515_ReadRegister>
 8001d50:	4603      	mov	r3, r0
 8001d52:	72fb      	strb	r3, [r7, #11]
    eid0 = MCP2515_ReadRegister(base_addr + 4);  // EID0
 8001d54:	7bbb      	ldrb	r3, [r7, #14]
 8001d56:	3304      	adds	r3, #4
 8001d58:	b2db      	uxtb	r3, r3
 8001d5a:	4618      	mov	r0, r3
 8001d5c:	f7ff fa44 	bl	80011e8 <MCP2515_ReadRegister>
 8001d60:	4603      	mov	r3, r0
 8001d62:	72bb      	strb	r3, [r7, #10]
    dlc = MCP2515_ReadRegister(base_addr + 5);   // DLC
 8001d64:	7bbb      	ldrb	r3, [r7, #14]
 8001d66:	3305      	adds	r3, #5
 8001d68:	b2db      	uxtb	r3, r3
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	f7ff fa3c 	bl	80011e8 <MCP2515_ReadRegister>
 8001d70:	4603      	mov	r3, r0
 8001d72:	727b      	strb	r3, [r7, #9]
    
    // 解析ID
    if (sidl & 0x08) {
 8001d74:	7b3b      	ldrb	r3, [r7, #12]
 8001d76:	f003 0308 	and.w	r3, r3, #8
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d016      	beq.n	8001dac <MCP2515_ReadRxBuffer+0x9e>
        // 扩展帧
        message->ide = 1;
 8001d7e:	683b      	ldr	r3, [r7, #0]
 8001d80:	2201      	movs	r2, #1
 8001d82:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 21) | 
 8001d84:	7b7b      	ldrb	r3, [r7, #13]
 8001d86:	055a      	lsls	r2, r3, #21
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001d88:	7b3b      	ldrb	r3, [r7, #12]
 8001d8a:	035b      	lsls	r3, r3, #13
 8001d8c:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
        message->id = ((uint32_t)sidh << 21) | 
 8001d90:	431a      	orrs	r2, r3
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001d92:	7b3b      	ldrb	r3, [r7, #12]
 8001d94:	041b      	lsls	r3, r3, #16
 8001d96:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001d9a:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001d9c:	7afb      	ldrb	r3, [r7, #11]
 8001d9e:	021b      	lsls	r3, r3, #8
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001da0:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001da2:	7abb      	ldrb	r3, [r7, #10]
 8001da4:	431a      	orrs	r2, r3
        message->id = ((uint32_t)sidh << 21) | 
 8001da6:	683b      	ldr	r3, [r7, #0]
 8001da8:	601a      	str	r2, [r3, #0]
 8001daa:	e00a      	b.n	8001dc2 <MCP2515_ReadRxBuffer+0xb4>
                      eid0;
    } else {
        // 标准帧
        message->ide = 0;
 8001dac:	683b      	ldr	r3, [r7, #0]
 8001dae:	2200      	movs	r2, #0
 8001db0:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 3) | ((sidl & 0xE0) >> 5);
 8001db2:	7b7b      	ldrb	r3, [r7, #13]
 8001db4:	00db      	lsls	r3, r3, #3
 8001db6:	7b3a      	ldrb	r2, [r7, #12]
 8001db8:	0952      	lsrs	r2, r2, #5
 8001dba:	b2d2      	uxtb	r2, r2
 8001dbc:	431a      	orrs	r2, r3
 8001dbe:	683b      	ldr	r3, [r7, #0]
 8001dc0:	601a      	str	r2, [r3, #0]
    }
    
    // 解析控制信息
    message->rtr = (dlc & 0x40) ? 1 : 0;
 8001dc2:	7a7b      	ldrb	r3, [r7, #9]
 8001dc4:	119b      	asrs	r3, r3, #6
 8001dc6:	b2db      	uxtb	r3, r3
 8001dc8:	f003 0301 	and.w	r3, r3, #1
 8001dcc:	b2da      	uxtb	r2, r3
 8001dce:	683b      	ldr	r3, [r7, #0]
 8001dd0:	715a      	strb	r2, [r3, #5]
    message->dlc = dlc & 0x0F;
 8001dd2:	7a7b      	ldrb	r3, [r7, #9]
 8001dd4:	f003 030f 	and.w	r3, r3, #15
 8001dd8:	b2da      	uxtb	r2, r3
 8001dda:	683b      	ldr	r3, [r7, #0]
 8001ddc:	719a      	strb	r2, [r3, #6]
    
    // 读取数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001dde:	2300      	movs	r3, #0
 8001de0:	73fb      	strb	r3, [r7, #15]
 8001de2:	e011      	b.n	8001e08 <MCP2515_ReadRxBuffer+0xfa>
        message->data[i] = MCP2515_ReadRegister(base_addr + 6 + i);
 8001de4:	7bba      	ldrb	r2, [r7, #14]
 8001de6:	7bfb      	ldrb	r3, [r7, #15]
 8001de8:	4413      	add	r3, r2
 8001dea:	b2db      	uxtb	r3, r3
 8001dec:	3306      	adds	r3, #6
 8001dee:	b2db      	uxtb	r3, r3
 8001df0:	7bfc      	ldrb	r4, [r7, #15]
 8001df2:	4618      	mov	r0, r3
 8001df4:	f7ff f9f8 	bl	80011e8 <MCP2515_ReadRegister>
 8001df8:	4603      	mov	r3, r0
 8001dfa:	461a      	mov	r2, r3
 8001dfc:	683b      	ldr	r3, [r7, #0]
 8001dfe:	4423      	add	r3, r4
 8001e00:	71da      	strb	r2, [r3, #7]
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001e02:	7bfb      	ldrb	r3, [r7, #15]
 8001e04:	3301      	adds	r3, #1
 8001e06:	73fb      	strb	r3, [r7, #15]
 8001e08:	683b      	ldr	r3, [r7, #0]
 8001e0a:	799b      	ldrb	r3, [r3, #6]
 8001e0c:	7bfa      	ldrb	r2, [r7, #15]
 8001e0e:	429a      	cmp	r2, r3
 8001e10:	d20b      	bcs.n	8001e2a <MCP2515_ReadRxBuffer+0x11c>
 8001e12:	7bfb      	ldrb	r3, [r7, #15]
 8001e14:	2b07      	cmp	r3, #7
 8001e16:	d9e5      	bls.n	8001de4 <MCP2515_ReadRxBuffer+0xd6>
    }
    
    // 清空剩余数据字节
    for (; i < 8; i++) {
 8001e18:	e007      	b.n	8001e2a <MCP2515_ReadRxBuffer+0x11c>
        message->data[i] = 0;
 8001e1a:	7bfb      	ldrb	r3, [r7, #15]
 8001e1c:	683a      	ldr	r2, [r7, #0]
 8001e1e:	4413      	add	r3, r2
 8001e20:	2200      	movs	r2, #0
 8001e22:	71da      	strb	r2, [r3, #7]
    for (; i < 8; i++) {
 8001e24:	7bfb      	ldrb	r3, [r7, #15]
 8001e26:	3301      	adds	r3, #1
 8001e28:	73fb      	strb	r3, [r7, #15]
 8001e2a:	7bfb      	ldrb	r3, [r7, #15]
 8001e2c:	2b07      	cmp	r3, #7
 8001e2e:	d9f4      	bls.n	8001e1a <MCP2515_ReadRxBuffer+0x10c>
    }
}
 8001e30:	bf00      	nop
 8001e32:	bf00      	nop
 8001e34:	3714      	adds	r7, #20
 8001e36:	46bd      	mov	sp, r7
 8001e38:	bd90      	pop	{r4, r7, pc}

08001e3a <MCP2515_GetErrorCounters>:
  * @param  tec: 发送错误计数器指针
  * @param  rec: 接收错误计数器指针
  * @retval None
  */
void MCP2515_GetErrorCounters(uint8_t *tec, uint8_t *rec)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b082      	sub	sp, #8
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
 8001e42:	6039      	str	r1, [r7, #0]
    *tec = MCP2515_ReadRegister(MCP2515_TEC);
 8001e44:	201c      	movs	r0, #28
 8001e46:	f7ff f9cf 	bl	80011e8 <MCP2515_ReadRegister>
 8001e4a:	4603      	mov	r3, r0
 8001e4c:	461a      	mov	r2, r3
 8001e4e:	687b      	ldr	r3, [r7, #4]
 8001e50:	701a      	strb	r2, [r3, #0]
    *rec = MCP2515_ReadRegister(MCP2515_REC);
 8001e52:	201d      	movs	r0, #29
 8001e54:	f7ff f9c8 	bl	80011e8 <MCP2515_ReadRegister>
 8001e58:	4603      	mov	r3, r0
 8001e5a:	461a      	mov	r2, r3
 8001e5c:	683b      	ldr	r3, [r7, #0]
 8001e5e:	701a      	strb	r2, [r3, #0]
}
 8001e60:	bf00      	nop
 8001e62:	3708      	adds	r7, #8
 8001e64:	46bd      	mov	sp, r7
 8001e66:	bd80      	pop	{r7, pc}

08001e68 <MCP2515_DiagnoseErrors>:
  * @brief  详细的错误状态诊断
  * @param  None
  * @retval None
  */
void MCP2515_DiagnoseErrors(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	b082      	sub	sp, #8
 8001e6c:	af00      	add	r7, sp, #0
    uint8_t canintf, eflg, tec, rec;
    
    printf("\r\n=== MCP2515 Error Diagnosis ===\r\n");
 8001e6e:	4869      	ldr	r0, [pc, #420]	@ (8002014 <MCP2515_DiagnoseErrors+0x1ac>)
 8001e70:	f006 f9fc 	bl	800826c <puts>
    
    // Read status registers
    canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001e74:	202c      	movs	r0, #44	@ 0x2c
 8001e76:	f7ff f9b7 	bl	80011e8 <MCP2515_ReadRegister>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	71fb      	strb	r3, [r7, #7]
    eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001e7e:	202d      	movs	r0, #45	@ 0x2d
 8001e80:	f7ff f9b2 	bl	80011e8 <MCP2515_ReadRegister>
 8001e84:	4603      	mov	r3, r0
 8001e86:	71bb      	strb	r3, [r7, #6]
    MCP2515_GetErrorCounters(&tec, &rec);
 8001e88:	1d3a      	adds	r2, r7, #4
 8001e8a:	1d7b      	adds	r3, r7, #5
 8001e8c:	4611      	mov	r1, r2
 8001e8e:	4618      	mov	r0, r3
 8001e90:	f7ff ffd3 	bl	8001e3a <MCP2515_GetErrorCounters>
    
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001e94:	79fb      	ldrb	r3, [r7, #7]
 8001e96:	4619      	mov	r1, r3
 8001e98:	485f      	ldr	r0, [pc, #380]	@ (8002018 <MCP2515_DiagnoseErrors+0x1b0>)
 8001e9a:	f006 f97f 	bl	800819c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001e9e:	79bb      	ldrb	r3, [r7, #6]
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	485e      	ldr	r0, [pc, #376]	@ (800201c <MCP2515_DiagnoseErrors+0x1b4>)
 8001ea4:	f006 f97a 	bl	800819c <iprintf>
    printf("Transmit Error Counter (TEC): %d\r\n", tec);
 8001ea8:	797b      	ldrb	r3, [r7, #5]
 8001eaa:	4619      	mov	r1, r3
 8001eac:	485c      	ldr	r0, [pc, #368]	@ (8002020 <MCP2515_DiagnoseErrors+0x1b8>)
 8001eae:	f006 f975 	bl	800819c <iprintf>
    printf("Receive Error Counter (REC): %d\r\n", rec);
 8001eb2:	793b      	ldrb	r3, [r7, #4]
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	485b      	ldr	r0, [pc, #364]	@ (8002024 <MCP2515_DiagnoseErrors+0x1bc>)
 8001eb8:	f006 f970 	bl	800819c <iprintf>
    
    // Analyze CANINTF
    printf("\r\n--- CANINTF Analysis ---\r\n");
 8001ebc:	485a      	ldr	r0, [pc, #360]	@ (8002028 <MCP2515_DiagnoseErrors+0x1c0>)
 8001ebe:	f006 f9d5 	bl	800826c <puts>
    if (canintf & 0x80) printf("WARNING: MERRF - Message Error Interrupt\r\n");
 8001ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ec6:	2b00      	cmp	r3, #0
 8001ec8:	da02      	bge.n	8001ed0 <MCP2515_DiagnoseErrors+0x68>
 8001eca:	4858      	ldr	r0, [pc, #352]	@ (800202c <MCP2515_DiagnoseErrors+0x1c4>)
 8001ecc:	f006 f9ce 	bl	800826c <puts>
    if (canintf & 0x40) printf("INFO: WAKIF - Wake-up Interrupt\r\n");
 8001ed0:	79fb      	ldrb	r3, [r7, #7]
 8001ed2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d002      	beq.n	8001ee0 <MCP2515_DiagnoseErrors+0x78>
 8001eda:	4855      	ldr	r0, [pc, #340]	@ (8002030 <MCP2515_DiagnoseErrors+0x1c8>)
 8001edc:	f006 f9c6 	bl	800826c <puts>
    if (canintf & 0x20) printf("WARNING: ERRIF - Error Interrupt\r\n");
 8001ee0:	79fb      	ldrb	r3, [r7, #7]
 8001ee2:	f003 0320 	and.w	r3, r3, #32
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d002      	beq.n	8001ef0 <MCP2515_DiagnoseErrors+0x88>
 8001eea:	4852      	ldr	r0, [pc, #328]	@ (8002034 <MCP2515_DiagnoseErrors+0x1cc>)
 8001eec:	f006 f9be 	bl	800826c <puts>
    if (canintf & 0x10) printf("OK: TX2IF - Transmit Buffer 2 Interrupt\r\n");
 8001ef0:	79fb      	ldrb	r3, [r7, #7]
 8001ef2:	f003 0310 	and.w	r3, r3, #16
 8001ef6:	2b00      	cmp	r3, #0
 8001ef8:	d002      	beq.n	8001f00 <MCP2515_DiagnoseErrors+0x98>
 8001efa:	484f      	ldr	r0, [pc, #316]	@ (8002038 <MCP2515_DiagnoseErrors+0x1d0>)
 8001efc:	f006 f9b6 	bl	800826c <puts>
    if (canintf & 0x08) printf("OK: TX1IF - Transmit Buffer 1 Interrupt\r\n");
 8001f00:	79fb      	ldrb	r3, [r7, #7]
 8001f02:	f003 0308 	and.w	r3, r3, #8
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d002      	beq.n	8001f10 <MCP2515_DiagnoseErrors+0xa8>
 8001f0a:	484c      	ldr	r0, [pc, #304]	@ (800203c <MCP2515_DiagnoseErrors+0x1d4>)
 8001f0c:	f006 f9ae 	bl	800826c <puts>
    if (canintf & 0x04) printf("OK: TX0IF - Transmit Buffer 0 Interrupt\r\n");
 8001f10:	79fb      	ldrb	r3, [r7, #7]
 8001f12:	f003 0304 	and.w	r3, r3, #4
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d002      	beq.n	8001f20 <MCP2515_DiagnoseErrors+0xb8>
 8001f1a:	4849      	ldr	r0, [pc, #292]	@ (8002040 <MCP2515_DiagnoseErrors+0x1d8>)
 8001f1c:	f006 f9a6 	bl	800826c <puts>
    if (canintf & 0x02) printf("INFO: RX1IF - Receive Buffer 1 Interrupt\r\n");
 8001f20:	79fb      	ldrb	r3, [r7, #7]
 8001f22:	f003 0302 	and.w	r3, r3, #2
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d002      	beq.n	8001f30 <MCP2515_DiagnoseErrors+0xc8>
 8001f2a:	4846      	ldr	r0, [pc, #280]	@ (8002044 <MCP2515_DiagnoseErrors+0x1dc>)
 8001f2c:	f006 f99e 	bl	800826c <puts>
    if (canintf & 0x01) printf("INFO: RX0IF - Receive Buffer 0 Interrupt\r\n");
 8001f30:	79fb      	ldrb	r3, [r7, #7]
 8001f32:	f003 0301 	and.w	r3, r3, #1
 8001f36:	2b00      	cmp	r3, #0
 8001f38:	d002      	beq.n	8001f40 <MCP2515_DiagnoseErrors+0xd8>
 8001f3a:	4843      	ldr	r0, [pc, #268]	@ (8002048 <MCP2515_DiagnoseErrors+0x1e0>)
 8001f3c:	f006 f996 	bl	800826c <puts>
    
    // Analyze EFLG
    printf("\r\n--- EFLG Analysis ---\r\n");
 8001f40:	4842      	ldr	r0, [pc, #264]	@ (800204c <MCP2515_DiagnoseErrors+0x1e4>)
 8001f42:	f006 f993 	bl	800826c <puts>
    if (eflg & 0x80) printf("ERROR: RX1OVR - Receive Buffer 1 Overflow\r\n");
 8001f46:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	da02      	bge.n	8001f54 <MCP2515_DiagnoseErrors+0xec>
 8001f4e:	4840      	ldr	r0, [pc, #256]	@ (8002050 <MCP2515_DiagnoseErrors+0x1e8>)
 8001f50:	f006 f98c 	bl	800826c <puts>
    if (eflg & 0x40) printf("ERROR: RX0OVR - Receive Buffer 0 Overflow\r\n");
 8001f54:	79bb      	ldrb	r3, [r7, #6]
 8001f56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001f5a:	2b00      	cmp	r3, #0
 8001f5c:	d002      	beq.n	8001f64 <MCP2515_DiagnoseErrors+0xfc>
 8001f5e:	483d      	ldr	r0, [pc, #244]	@ (8002054 <MCP2515_DiagnoseErrors+0x1ec>)
 8001f60:	f006 f984 	bl	800826c <puts>
    if (eflg & 0x20) printf("ERROR: TXBO - Bus-Off State\r\n");
 8001f64:	79bb      	ldrb	r3, [r7, #6]
 8001f66:	f003 0320 	and.w	r3, r3, #32
 8001f6a:	2b00      	cmp	r3, #0
 8001f6c:	d002      	beq.n	8001f74 <MCP2515_DiagnoseErrors+0x10c>
 8001f6e:	483a      	ldr	r0, [pc, #232]	@ (8002058 <MCP2515_DiagnoseErrors+0x1f0>)
 8001f70:	f006 f97c 	bl	800826c <puts>
    if (eflg & 0x10) printf("WARNING: TXEP - Transmit Error Passive\r\n");
 8001f74:	79bb      	ldrb	r3, [r7, #6]
 8001f76:	f003 0310 	and.w	r3, r3, #16
 8001f7a:	2b00      	cmp	r3, #0
 8001f7c:	d002      	beq.n	8001f84 <MCP2515_DiagnoseErrors+0x11c>
 8001f7e:	4837      	ldr	r0, [pc, #220]	@ (800205c <MCP2515_DiagnoseErrors+0x1f4>)
 8001f80:	f006 f974 	bl	800826c <puts>
    if (eflg & 0x08) printf("WARNING: RXEP - Receive Error Passive\r\n");
 8001f84:	79bb      	ldrb	r3, [r7, #6]
 8001f86:	f003 0308 	and.w	r3, r3, #8
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d002      	beq.n	8001f94 <MCP2515_DiagnoseErrors+0x12c>
 8001f8e:	4834      	ldr	r0, [pc, #208]	@ (8002060 <MCP2515_DiagnoseErrors+0x1f8>)
 8001f90:	f006 f96c 	bl	800826c <puts>
    if (eflg & 0x04) printf("WARNING: TXWAR - Transmit Error Warning\r\n");
 8001f94:	79bb      	ldrb	r3, [r7, #6]
 8001f96:	f003 0304 	and.w	r3, r3, #4
 8001f9a:	2b00      	cmp	r3, #0
 8001f9c:	d002      	beq.n	8001fa4 <MCP2515_DiagnoseErrors+0x13c>
 8001f9e:	4831      	ldr	r0, [pc, #196]	@ (8002064 <MCP2515_DiagnoseErrors+0x1fc>)
 8001fa0:	f006 f964 	bl	800826c <puts>
    if (eflg & 0x02) printf("WARNING: RXWAR - Receive Error Warning\r\n");
 8001fa4:	79bb      	ldrb	r3, [r7, #6]
 8001fa6:	f003 0302 	and.w	r3, r3, #2
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d002      	beq.n	8001fb4 <MCP2515_DiagnoseErrors+0x14c>
 8001fae:	482e      	ldr	r0, [pc, #184]	@ (8002068 <MCP2515_DiagnoseErrors+0x200>)
 8001fb0:	f006 f95c 	bl	800826c <puts>
    if (eflg & 0x01) printf("WARNING: EWARN - Error Warning\r\n");
 8001fb4:	79bb      	ldrb	r3, [r7, #6]
 8001fb6:	f003 0301 	and.w	r3, r3, #1
 8001fba:	2b00      	cmp	r3, #0
 8001fbc:	d002      	beq.n	8001fc4 <MCP2515_DiagnoseErrors+0x15c>
 8001fbe:	482b      	ldr	r0, [pc, #172]	@ (800206c <MCP2515_DiagnoseErrors+0x204>)
 8001fc0:	f006 f954 	bl	800826c <puts>
    
    // Error level assessment
    printf("\r\n--- Error Level Assessment ---\r\n");
 8001fc4:	482a      	ldr	r0, [pc, #168]	@ (8002070 <MCP2515_DiagnoseErrors+0x208>)
 8001fc6:	f006 f951 	bl	800826c <puts>
    if (eflg & 0x20) {
 8001fca:	79bb      	ldrb	r3, [r7, #6]
 8001fcc:	f003 0320 	and.w	r3, r3, #32
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d003      	beq.n	8001fdc <MCP2515_DiagnoseErrors+0x174>
        printf("CRITICAL: Bus-Off state, requires re-initialization\r\n");
 8001fd4:	4827      	ldr	r0, [pc, #156]	@ (8002074 <MCP2515_DiagnoseErrors+0x20c>)
 8001fd6:	f006 f949 	bl	800826c <puts>
 8001fda:	e013      	b.n	8002004 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x10) {
 8001fdc:	79bb      	ldrb	r3, [r7, #6]
 8001fde:	f003 0310 	and.w	r3, r3, #16
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d006      	beq.n	8001ff4 <MCP2515_DiagnoseErrors+0x18c>
        printf("WARNING: Transmit Error Passive, TEC >= 128\r\n");
 8001fe6:	4824      	ldr	r0, [pc, #144]	@ (8002078 <MCP2515_DiagnoseErrors+0x210>)
 8001fe8:	f006 f940 	bl	800826c <puts>
        printf("   Suggestion: Check bus connection and termination resistors\r\n");
 8001fec:	4823      	ldr	r0, [pc, #140]	@ (800207c <MCP2515_DiagnoseErrors+0x214>)
 8001fee:	f006 f93d 	bl	800826c <puts>
 8001ff2:	e007      	b.n	8002004 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x04) {
 8001ff4:	79bb      	ldrb	r3, [r7, #6]
 8001ff6:	f003 0304 	and.w	r3, r3, #4
 8001ffa:	2b00      	cmp	r3, #0
 8001ffc:	d002      	beq.n	8002004 <MCP2515_DiagnoseErrors+0x19c>
        printf("INFO: Transmit Error Warning, TEC >= 96\r\n");
 8001ffe:	4820      	ldr	r0, [pc, #128]	@ (8002080 <MCP2515_DiagnoseErrors+0x218>)
 8002000:	f006 f934 	bl	800826c <puts>
    }
    
    printf("===============================\r\n");
 8002004:	481f      	ldr	r0, [pc, #124]	@ (8002084 <MCP2515_DiagnoseErrors+0x21c>)
 8002006:	f006 f931 	bl	800826c <puts>
}
 800200a:	bf00      	nop
 800200c:	3708      	adds	r7, #8
 800200e:	46bd      	mov	sp, r7
 8002010:	bd80      	pop	{r7, pc}
 8002012:	bf00      	nop
 8002014:	0800a168 	.word	0x0800a168
 8002018:	0800a024 	.word	0x0800a024
 800201c:	0800a038 	.word	0x0800a038
 8002020:	0800a18c 	.word	0x0800a18c
 8002024:	0800a1b0 	.word	0x0800a1b0
 8002028:	0800a1d4 	.word	0x0800a1d4
 800202c:	0800a1f0 	.word	0x0800a1f0
 8002030:	0800a21c 	.word	0x0800a21c
 8002034:	0800a240 	.word	0x0800a240
 8002038:	0800a264 	.word	0x0800a264
 800203c:	0800a290 	.word	0x0800a290
 8002040:	0800a2bc 	.word	0x0800a2bc
 8002044:	0800a2e8 	.word	0x0800a2e8
 8002048:	0800a314 	.word	0x0800a314
 800204c:	0800a340 	.word	0x0800a340
 8002050:	0800a35c 	.word	0x0800a35c
 8002054:	0800a388 	.word	0x0800a388
 8002058:	0800a3b4 	.word	0x0800a3b4
 800205c:	0800a3d4 	.word	0x0800a3d4
 8002060:	0800a3fc 	.word	0x0800a3fc
 8002064:	0800a424 	.word	0x0800a424
 8002068:	0800a450 	.word	0x0800a450
 800206c:	0800a478 	.word	0x0800a478
 8002070:	0800a498 	.word	0x0800a498
 8002074:	0800a4bc 	.word	0x0800a4bc
 8002078:	0800a4f4 	.word	0x0800a4f4
 800207c:	0800a524 	.word	0x0800a524
 8002080:	0800a564 	.word	0x0800a564
 8002084:	0800a590 	.word	0x0800a590

08002088 <MCP2515_ClearAllErrors>:
  * @brief  清除所有错误标志和中断标志
  * @param  None
  * @retval None
  */
void MCP2515_ClearAllErrors(void)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	af00      	add	r7, sp, #0
    printf("Clearing error flags...\r\n");
 800208c:	4805      	ldr	r0, [pc, #20]	@ (80020a4 <MCP2515_ClearAllErrors+0x1c>)
 800208e:	f006 f8ed 	bl	800826c <puts>
    
    // Clear interrupt flags
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8002092:	2100      	movs	r1, #0
 8002094:	202c      	movs	r0, #44	@ 0x2c
 8002096:	f7ff f8c1 	bl	800121c <MCP2515_WriteRegister>
    
    printf("Error flags cleared\r\n");
 800209a:	4803      	ldr	r0, [pc, #12]	@ (80020a8 <MCP2515_ClearAllErrors+0x20>)
 800209c:	f006 f8e6 	bl	800826c <puts>
}
 80020a0:	bf00      	nop
 80020a2:	bd80      	pop	{r7, pc}
 80020a4:	0800a5b4 	.word	0x0800a5b4
 80020a8:	0800a5d0 	.word	0x0800a5d0

080020ac <MCP2515_LoopbackTest>:
  * @brief  回环模式测试
  * @param  None
  * @retval 测试结果 (MCP2515_OK: 成功, MCP2515_ERROR: 失败)
  */
uint8_t MCP2515_LoopbackTest(void)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b08e      	sub	sp, #56	@ 0x38
 80020b0:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    MCP2515_CANMessage_t recv_msg;
    uint8_t result = MCP2515_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
    
    printf("\r\n=== Loopback Mode Test ===\r\n");
 80020b8:	488f      	ldr	r0, [pc, #572]	@ (80022f8 <MCP2515_LoopbackTest+0x24c>)
 80020ba:	f006 f8d7 	bl	800826c <puts>
    
    // Switch to loopback mode
    printf("Switching to loopback mode...\r\n");
 80020be:	488f      	ldr	r0, [pc, #572]	@ (80022fc <MCP2515_LoopbackTest+0x250>)
 80020c0:	f006 f8d4 	bl	800826c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80020c4:	2040      	movs	r0, #64	@ 0x40
 80020c6:	f7ff f957 	bl	8001378 <MCP2515_SetMode>
 80020ca:	4603      	mov	r3, r0
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d004      	beq.n	80020da <MCP2515_LoopbackTest+0x2e>
        printf("ERROR: Failed to switch to loopback mode\r\n");
 80020d0:	488b      	ldr	r0, [pc, #556]	@ (8002300 <MCP2515_LoopbackTest+0x254>)
 80020d2:	f006 f8cb 	bl	800826c <puts>
        return MCP2515_ERROR;
 80020d6:	2301      	movs	r3, #1
 80020d8:	e109      	b.n	80022ee <MCP2515_LoopbackTest+0x242>
    }
    
    printf("✓ Switched to loopback mode\r\n");
 80020da:	488a      	ldr	r0, [pc, #552]	@ (8002304 <MCP2515_LoopbackTest+0x258>)
 80020dc:	f006 f8c6 	bl	800826c <puts>
    printf("📋 Starting loopback test...\r\n");
 80020e0:	4889      	ldr	r0, [pc, #548]	@ (8002308 <MCP2515_LoopbackTest+0x25c>)
 80020e2:	f006 f8c3 	bl	800826c <puts>
    printf("Waiting 100ms for mode stabilization...\r\n");
 80020e6:	4889      	ldr	r0, [pc, #548]	@ (800230c <MCP2515_LoopbackTest+0x260>)
 80020e8:	f006 f8c0 	bl	800826c <puts>
    HAL_Delay(100);  // Wait for mode switch completion
 80020ec:	2064      	movs	r0, #100	@ 0x64
 80020ee:	f000 fea7 	bl	8002e40 <HAL_Delay>
    printf("Wait completed, preparing test message...\r\n");
 80020f2:	4887      	ldr	r0, [pc, #540]	@ (8002310 <MCP2515_LoopbackTest+0x264>)
 80020f4:	f006 f8ba 	bl	800826c <puts>
    
    // Prepare test message
    printf("Preparing test message structure...\r\n");
 80020f8:	4886      	ldr	r0, [pc, #536]	@ (8002314 <MCP2515_LoopbackTest+0x268>)
 80020fa:	f006 f8b7 	bl	800826c <puts>
    test_msg.id = 0x123;
 80020fe:	f240 1323 	movw	r3, #291	@ 0x123
 8002102:	613b      	str	r3, [r7, #16]
    test_msg.dlc = 8;
 8002104:	2308      	movs	r3, #8
 8002106:	75bb      	strb	r3, [r7, #22]
    test_msg.rtr = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	757b      	strb	r3, [r7, #21]
    test_msg.ide = 0;
 800210c:	2300      	movs	r3, #0
 800210e:	753b      	strb	r3, [r7, #20]
    printf("Filling test data...\r\n");
 8002110:	4881      	ldr	r0, [pc, #516]	@ (8002318 <MCP2515_LoopbackTest+0x26c>)
 8002112:	f006 f8ab 	bl	800826c <puts>
    for (int i = 0; i < 8; i++) {
 8002116:	2300      	movs	r3, #0
 8002118:	633b      	str	r3, [r7, #48]	@ 0x30
 800211a:	e00c      	b.n	8002136 <MCP2515_LoopbackTest+0x8a>
        test_msg.data[i] = 0xA0 + i;
 800211c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800211e:	b2db      	uxtb	r3, r3
 8002120:	3b60      	subs	r3, #96	@ 0x60
 8002122:	b2d9      	uxtb	r1, r3
 8002124:	f107 0217 	add.w	r2, r7, #23
 8002128:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800212a:	4413      	add	r3, r2
 800212c:	460a      	mov	r2, r1
 800212e:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8002130:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002132:	3301      	adds	r3, #1
 8002134:	633b      	str	r3, [r7, #48]	@ 0x30
 8002136:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002138:	2b07      	cmp	r3, #7
 800213a:	ddef      	ble.n	800211c <MCP2515_LoopbackTest+0x70>
    }
    printf("Test message prepared successfully\r\n");
 800213c:	4877      	ldr	r0, [pc, #476]	@ (800231c <MCP2515_LoopbackTest+0x270>)
 800213e:	f006 f895 	bl	800826c <puts>
    
    printf("Sending test message ID:0x%03lX...\r\n", test_msg.id);
 8002142:	693b      	ldr	r3, [r7, #16]
 8002144:	4619      	mov	r1, r3
 8002146:	4876      	ldr	r0, [pc, #472]	@ (8002320 <MCP2515_LoopbackTest+0x274>)
 8002148:	f006 f828 	bl	800819c <iprintf>
    printf("Test data: ");
 800214c:	4875      	ldr	r0, [pc, #468]	@ (8002324 <MCP2515_LoopbackTest+0x278>)
 800214e:	f006 f825 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 8002152:	2300      	movs	r3, #0
 8002154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002156:	e00b      	b.n	8002170 <MCP2515_LoopbackTest+0xc4>
        printf("0x%02X ", test_msg.data[i]);
 8002158:	f107 0217 	add.w	r2, r7, #23
 800215c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800215e:	4413      	add	r3, r2
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	4619      	mov	r1, r3
 8002164:	4870      	ldr	r0, [pc, #448]	@ (8002328 <MCP2515_LoopbackTest+0x27c>)
 8002166:	f006 f819 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 800216a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800216c:	3301      	adds	r3, #1
 800216e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002170:	7dbb      	ldrb	r3, [r7, #22]
 8002172:	461a      	mov	r2, r3
 8002174:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002176:	4293      	cmp	r3, r2
 8002178:	dbee      	blt.n	8002158 <MCP2515_LoopbackTest+0xac>
    }
    printf("\r\n");
 800217a:	486c      	ldr	r0, [pc, #432]	@ (800232c <MCP2515_LoopbackTest+0x280>)
 800217c:	f006 f876 	bl	800826c <puts>
    
    // Send message
    printf("Calling MCP2515_SendMessage...\r\n");
 8002180:	486b      	ldr	r0, [pc, #428]	@ (8002330 <MCP2515_LoopbackTest+0x284>)
 8002182:	f006 f873 	bl	800826c <puts>
    uint8_t send_result = MCP2515_SendMessage(&test_msg);
 8002186:	f107 0310 	add.w	r3, r7, #16
 800218a:	4618      	mov	r0, r3
 800218c:	f7ff fa6c 	bl	8001668 <MCP2515_SendMessage>
 8002190:	4603      	mov	r3, r0
 8002192:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
    printf("Send result: %d\r\n", send_result);
 8002196:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 800219a:	4619      	mov	r1, r3
 800219c:	4865      	ldr	r0, [pc, #404]	@ (8002334 <MCP2515_LoopbackTest+0x288>)
 800219e:	f005 fffd 	bl	800819c <iprintf>
    
    if (send_result == MCP2515_OK) {
 80021a2:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80021a6:	2b00      	cmp	r3, #0
 80021a8:	d172      	bne.n	8002290 <MCP2515_LoopbackTest+0x1e4>
        printf("OK: Message sent successfully\r\n");
 80021aa:	4863      	ldr	r0, [pc, #396]	@ (8002338 <MCP2515_LoopbackTest+0x28c>)
 80021ac:	f006 f85e 	bl	800826c <puts>
        
        // Wait for a while
        printf("Waiting 50ms for loopback...\r\n");
 80021b0:	4862      	ldr	r0, [pc, #392]	@ (800233c <MCP2515_LoopbackTest+0x290>)
 80021b2:	f006 f85b 	bl	800826c <puts>
        HAL_Delay(50);
 80021b6:	2032      	movs	r0, #50	@ 0x32
 80021b8:	f000 fe42 	bl	8002e40 <HAL_Delay>
        
        // Check if message received
        printf("Checking for received message...\r\n");
 80021bc:	4860      	ldr	r0, [pc, #384]	@ (8002340 <MCP2515_LoopbackTest+0x294>)
 80021be:	f006 f855 	bl	800826c <puts>
        uint8_t check_result = MCP2515_CheckReceive();
 80021c2:	f7ff fadb 	bl	800177c <MCP2515_CheckReceive>
 80021c6:	4603      	mov	r3, r0
 80021c8:	f887 3022 	strb.w	r3, [r7, #34]	@ 0x22
        printf("Check receive result: %d\r\n", check_result);
 80021cc:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021d0:	4619      	mov	r1, r3
 80021d2:	485c      	ldr	r0, [pc, #368]	@ (8002344 <MCP2515_LoopbackTest+0x298>)
 80021d4:	f005 ffe2 	bl	800819c <iprintf>
        
        if (check_result == MCP2515_OK) {
 80021d8:	f897 3022 	ldrb.w	r3, [r7, #34]	@ 0x22
 80021dc:	2b00      	cmp	r3, #0
 80021de:	d147      	bne.n	8002270 <MCP2515_LoopbackTest+0x1c4>
            if (MCP2515_ReceiveMessage(&recv_msg) == MCP2515_OK) {
 80021e0:	463b      	mov	r3, r7
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7ff fa96 	bl	8001714 <MCP2515_ReceiveMessage>
 80021e8:	4603      	mov	r3, r0
 80021ea:	2b00      	cmp	r3, #0
 80021ec:	d13c      	bne.n	8002268 <MCP2515_LoopbackTest+0x1bc>
                printf("OK: Received loopback message ID:0x%03lX\r\n", recv_msg.id);
 80021ee:	683b      	ldr	r3, [r7, #0]
 80021f0:	4619      	mov	r1, r3
 80021f2:	4855      	ldr	r0, [pc, #340]	@ (8002348 <MCP2515_LoopbackTest+0x29c>)
 80021f4:	f005 ffd2 	bl	800819c <iprintf>
                
                // Verify data
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 80021f8:	683a      	ldr	r2, [r7, #0]
 80021fa:	693b      	ldr	r3, [r7, #16]
 80021fc:	429a      	cmp	r2, r3
 80021fe:	d12f      	bne.n	8002260 <MCP2515_LoopbackTest+0x1b4>
 8002200:	79ba      	ldrb	r2, [r7, #6]
 8002202:	7dbb      	ldrb	r3, [r7, #22]
 8002204:	429a      	cmp	r2, r3
 8002206:	d12b      	bne.n	8002260 <MCP2515_LoopbackTest+0x1b4>
                    uint8_t data_match = 1;
 8002208:	2301      	movs	r3, #1
 800220a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                    for (int i = 0; i < test_msg.dlc; i++) {
 800220e:	2300      	movs	r3, #0
 8002210:	627b      	str	r3, [r7, #36]	@ 0x24
 8002212:	e011      	b.n	8002238 <MCP2515_LoopbackTest+0x18c>
                        if (recv_msg.data[i] != test_msg.data[i]) {
 8002214:	1dfa      	adds	r2, r7, #7
 8002216:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002218:	4413      	add	r3, r2
 800221a:	781a      	ldrb	r2, [r3, #0]
 800221c:	f107 0117 	add.w	r1, r7, #23
 8002220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002222:	440b      	add	r3, r1
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	429a      	cmp	r2, r3
 8002228:	d003      	beq.n	8002232 <MCP2515_LoopbackTest+0x186>
                            data_match = 0;
 800222a:	2300      	movs	r3, #0
 800222c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
                            break;
 8002230:	e007      	b.n	8002242 <MCP2515_LoopbackTest+0x196>
                    for (int i = 0; i < test_msg.dlc; i++) {
 8002232:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002234:	3301      	adds	r3, #1
 8002236:	627b      	str	r3, [r7, #36]	@ 0x24
 8002238:	7dbb      	ldrb	r3, [r7, #22]
 800223a:	461a      	mov	r2, r3
 800223c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223e:	4293      	cmp	r3, r2
 8002240:	dbe8      	blt.n	8002214 <MCP2515_LoopbackTest+0x168>
                        }
                    }
                    
                    if (data_match) {
 8002242:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
 8002246:	2b00      	cmp	r3, #0
 8002248:	d006      	beq.n	8002258 <MCP2515_LoopbackTest+0x1ac>
                        printf("SUCCESS: Loopback test passed! MCP2515 hardware is working\r\n");
 800224a:	4840      	ldr	r0, [pc, #256]	@ (800234c <MCP2515_LoopbackTest+0x2a0>)
 800224c:	f006 f80e 	bl	800826c <puts>
                        result = MCP2515_OK;
 8002250:	2300      	movs	r3, #0
 8002252:	f887 3037 	strb.w	r3, [r7, #55]	@ 0x37
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8002256:	e03c      	b.n	80022d2 <MCP2515_LoopbackTest+0x226>
                    } else {
                        printf("ERROR: Data mismatch\r\n");
 8002258:	483d      	ldr	r0, [pc, #244]	@ (8002350 <MCP2515_LoopbackTest+0x2a4>)
 800225a:	f006 f807 	bl	800826c <puts>
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 800225e:	e038      	b.n	80022d2 <MCP2515_LoopbackTest+0x226>
                    }
                } else {
                    printf("ERROR: ID or DLC mismatch\r\n");
 8002260:	483c      	ldr	r0, [pc, #240]	@ (8002354 <MCP2515_LoopbackTest+0x2a8>)
 8002262:	f006 f803 	bl	800826c <puts>
 8002266:	e034      	b.n	80022d2 <MCP2515_LoopbackTest+0x226>
                }
            } else {
                printf("ERROR: Failed to receive message\r\n");
 8002268:	483b      	ldr	r0, [pc, #236]	@ (8002358 <MCP2515_LoopbackTest+0x2ac>)
 800226a:	f005 ffff 	bl	800826c <puts>
 800226e:	e030      	b.n	80022d2 <MCP2515_LoopbackTest+0x226>
            }
        } else {
            printf("ERROR: No loopback message received\r\n");
 8002270:	483a      	ldr	r0, [pc, #232]	@ (800235c <MCP2515_LoopbackTest+0x2b0>)
 8002272:	f005 fffb 	bl	800826c <puts>
            printf("Possible causes:\r\n");
 8002276:	483a      	ldr	r0, [pc, #232]	@ (8002360 <MCP2515_LoopbackTest+0x2b4>)
 8002278:	f005 fff8 	bl	800826c <puts>
            printf("  - MCP2515 not in loopback mode\r\n");
 800227c:	4839      	ldr	r0, [pc, #228]	@ (8002364 <MCP2515_LoopbackTest+0x2b8>)
 800227e:	f005 fff5 	bl	800826c <puts>
            printf("  - Receive buffer configuration issue\r\n");
 8002282:	4839      	ldr	r0, [pc, #228]	@ (8002368 <MCP2515_LoopbackTest+0x2bc>)
 8002284:	f005 fff2 	bl	800826c <puts>
            printf("  - Message filtering problem\r\n");
 8002288:	4838      	ldr	r0, [pc, #224]	@ (800236c <MCP2515_LoopbackTest+0x2c0>)
 800228a:	f005 ffef 	bl	800826c <puts>
 800228e:	e020      	b.n	80022d2 <MCP2515_LoopbackTest+0x226>
        }
    } else {
        printf("ERROR: Message send failed (result: %d)\r\n", send_result);
 8002290:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002294:	4619      	mov	r1, r3
 8002296:	4836      	ldr	r0, [pc, #216]	@ (8002370 <MCP2515_LoopbackTest+0x2c4>)
 8002298:	f005 ff80 	bl	800819c <iprintf>
        if (send_result == MCP2515_TIMEOUT) {
 800229c:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022a0:	2b02      	cmp	r3, #2
 80022a2:	d103      	bne.n	80022ac <MCP2515_LoopbackTest+0x200>
            printf("  - Send timeout occurred\r\n");
 80022a4:	4833      	ldr	r0, [pc, #204]	@ (8002374 <MCP2515_LoopbackTest+0x2c8>)
 80022a6:	f005 ffe1 	bl	800826c <puts>
 80022aa:	e006      	b.n	80022ba <MCP2515_LoopbackTest+0x20e>
        } else if (send_result == MCP2515_ERROR) {
 80022ac:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 80022b0:	2b01      	cmp	r3, #1
 80022b2:	d102      	bne.n	80022ba <MCP2515_LoopbackTest+0x20e>
            printf("  - General send error\r\n");
 80022b4:	4830      	ldr	r0, [pc, #192]	@ (8002378 <MCP2515_LoopbackTest+0x2cc>)
 80022b6:	f005 ffd9 	bl	800826c <puts>
        }
        printf("Possible causes:\r\n");
 80022ba:	4829      	ldr	r0, [pc, #164]	@ (8002360 <MCP2515_LoopbackTest+0x2b4>)
 80022bc:	f005 ffd6 	bl	800826c <puts>
        printf("  - No available transmit buffer\r\n");
 80022c0:	482e      	ldr	r0, [pc, #184]	@ (800237c <MCP2515_LoopbackTest+0x2d0>)
 80022c2:	f005 ffd3 	bl	800826c <puts>
        printf("  - MCP2515 not in correct mode\r\n");
 80022c6:	482e      	ldr	r0, [pc, #184]	@ (8002380 <MCP2515_LoopbackTest+0x2d4>)
 80022c8:	f005 ffd0 	bl	800826c <puts>
        printf("  - SPI communication problem\r\n");
 80022cc:	482d      	ldr	r0, [pc, #180]	@ (8002384 <MCP2515_LoopbackTest+0x2d8>)
 80022ce:	f005 ffcd 	bl	800826c <puts>
    }
    
    // Switch back to normal mode
    printf("Switching back to normal mode...\r\n");
 80022d2:	482d      	ldr	r0, [pc, #180]	@ (8002388 <MCP2515_LoopbackTest+0x2dc>)
 80022d4:	f005 ffca 	bl	800826c <puts>
    MCP2515_SetMode(MCP2515_MODE_NORMAL);
 80022d8:	2000      	movs	r0, #0
 80022da:	f7ff f84d 	bl	8001378 <MCP2515_SetMode>
    HAL_Delay(100);
 80022de:	2064      	movs	r0, #100	@ 0x64
 80022e0:	f000 fdae 	bl	8002e40 <HAL_Delay>
    
    printf("==========================\r\n");
 80022e4:	4829      	ldr	r0, [pc, #164]	@ (800238c <MCP2515_LoopbackTest+0x2e0>)
 80022e6:	f005 ffc1 	bl	800826c <puts>
    return result;
 80022ea:	f897 3037 	ldrb.w	r3, [r7, #55]	@ 0x37
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	3738      	adds	r7, #56	@ 0x38
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bd80      	pop	{r7, pc}
 80022f6:	bf00      	nop
 80022f8:	0800a5e8 	.word	0x0800a5e8
 80022fc:	0800a608 	.word	0x0800a608
 8002300:	0800a628 	.word	0x0800a628
 8002304:	0800a654 	.word	0x0800a654
 8002308:	0800a674 	.word	0x0800a674
 800230c:	0800a694 	.word	0x0800a694
 8002310:	0800a6c0 	.word	0x0800a6c0
 8002314:	0800a6ec 	.word	0x0800a6ec
 8002318:	0800a714 	.word	0x0800a714
 800231c:	0800a72c 	.word	0x0800a72c
 8002320:	0800a750 	.word	0x0800a750
 8002324:	0800a778 	.word	0x0800a778
 8002328:	0800a784 	.word	0x0800a784
 800232c:	0800a78c 	.word	0x0800a78c
 8002330:	0800a790 	.word	0x0800a790
 8002334:	0800a7b0 	.word	0x0800a7b0
 8002338:	0800a7c4 	.word	0x0800a7c4
 800233c:	0800a7e4 	.word	0x0800a7e4
 8002340:	0800a804 	.word	0x0800a804
 8002344:	0800a828 	.word	0x0800a828
 8002348:	0800a844 	.word	0x0800a844
 800234c:	0800a870 	.word	0x0800a870
 8002350:	0800a8ac 	.word	0x0800a8ac
 8002354:	0800a8c4 	.word	0x0800a8c4
 8002358:	0800a8e0 	.word	0x0800a8e0
 800235c:	0800a904 	.word	0x0800a904
 8002360:	0800a92c 	.word	0x0800a92c
 8002364:	0800a940 	.word	0x0800a940
 8002368:	0800a964 	.word	0x0800a964
 800236c:	0800a98c 	.word	0x0800a98c
 8002370:	0800a9ac 	.word	0x0800a9ac
 8002374:	0800a9d8 	.word	0x0800a9d8
 8002378:	0800a9f4 	.word	0x0800a9f4
 800237c:	0800aa0c 	.word	0x0800aa0c
 8002380:	0800aa30 	.word	0x0800aa30
 8002384:	0800aa54 	.word	0x0800aa54
 8002388:	0800aa74 	.word	0x0800aa74
 800238c:	0800aa98 	.word	0x0800aa98

08002390 <MCP2515_CANOETest>:
  * @retval None
  * @note   此函数专门用于配合CANOE工具进行CAN总线测试
  *         发送报文后立即通过串口输出发送的数据，便于对比验证
  */
void MCP2515_CANOETest(void)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b088      	sub	sp, #32
 8002394:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    uint8_t result;
    static uint32_t test_counter = 0;
    
    printf("\r\n=== CANOE Test Mode - CAN Message Transmission ===\r\n");
 8002396:	48a0      	ldr	r0, [pc, #640]	@ (8002618 <MCP2515_CANOETest+0x288>)
 8002398:	f005 ff68 	bl	800826c <puts>
    
    // 确保处于正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 800239c:	2000      	movs	r0, #0
 800239e:	f7fe ffeb 	bl	8001378 <MCP2515_SetMode>
 80023a2:	4603      	mov	r3, r0
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d003      	beq.n	80023b0 <MCP2515_CANOETest+0x20>
        printf("ERROR: Failed to switch to normal mode\r\n");
 80023a8:	489c      	ldr	r0, [pc, #624]	@ (800261c <MCP2515_CANOETest+0x28c>)
 80023aa:	f005 ff5f 	bl	800826c <puts>
 80023ae:	e130      	b.n	8002612 <MCP2515_CANOETest+0x282>
        return;
    }
    
    // 准备测试报文1 - 标准帧
    test_msg.id = 0x123;
 80023b0:	f240 1323 	movw	r3, #291	@ 0x123
 80023b4:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 8;
 80023b6:	2308      	movs	r3, #8
 80023b8:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 80023ba:	2300      	movs	r3, #0
 80023bc:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 80023be:	2300      	movs	r3, #0
 80023c0:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0x11;
 80023c2:	2311      	movs	r3, #17
 80023c4:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0x22;
 80023c6:	2322      	movs	r3, #34	@ 0x22
 80023c8:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0x33;
 80023ca:	2333      	movs	r3, #51	@ 0x33
 80023cc:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0x44;
 80023ce:	2344      	movs	r3, #68	@ 0x44
 80023d0:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(test_counter & 0xFF);
 80023d2:	4b93      	ldr	r3, [pc, #588]	@ (8002620 <MCP2515_CANOETest+0x290>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	b2db      	uxtb	r3, r3
 80023d8:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((test_counter >> 8) & 0xFF);
 80023da:	4b91      	ldr	r3, [pc, #580]	@ (8002620 <MCP2515_CANOETest+0x290>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	0a1b      	lsrs	r3, r3, #8
 80023e0:	b2db      	uxtb	r3, r3
 80023e2:	743b      	strb	r3, [r7, #16]
    test_msg.data[6] = 0xAA;
 80023e4:	23aa      	movs	r3, #170	@ 0xaa
 80023e6:	747b      	strb	r3, [r7, #17]
    test_msg.data[7] = 0xBB;
 80023e8:	23bb      	movs	r3, #187	@ 0xbb
 80023ea:	74bb      	strb	r3, [r7, #18]
    
    printf("\r\n--- Test Message 1 (Standard Frame) ---\r\n");
 80023ec:	488d      	ldr	r0, [pc, #564]	@ (8002624 <MCP2515_CANOETest+0x294>)
 80023ee:	f005 ff3d 	bl	800826c <puts>
    printf("Sending CAN message to bus...\r\n");
 80023f2:	488d      	ldr	r0, [pc, #564]	@ (8002628 <MCP2515_CANOETest+0x298>)
 80023f4:	f005 ff3a 	bl	800826c <puts>
    printf("CAN ID: 0x%03lX (Standard Frame)\r\n", test_msg.id);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	4619      	mov	r1, r3
 80023fc:	488b      	ldr	r0, [pc, #556]	@ (800262c <MCP2515_CANOETest+0x29c>)
 80023fe:	f005 fecd 	bl	800819c <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 8002402:	7abb      	ldrb	r3, [r7, #10]
 8002404:	4619      	mov	r1, r3
 8002406:	488a      	ldr	r0, [pc, #552]	@ (8002630 <MCP2515_CANOETest+0x2a0>)
 8002408:	f005 fec8 	bl	800819c <iprintf>
    printf("Data: ");
 800240c:	4889      	ldr	r0, [pc, #548]	@ (8002634 <MCP2515_CANOETest+0x2a4>)
 800240e:	f005 fec5 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 8002412:	2300      	movs	r3, #0
 8002414:	61fb      	str	r3, [r7, #28]
 8002416:	e00b      	b.n	8002430 <MCP2515_CANOETest+0xa0>
        printf("0x%02X ", test_msg.data[i]);
 8002418:	f107 020b 	add.w	r2, r7, #11
 800241c:	69fb      	ldr	r3, [r7, #28]
 800241e:	4413      	add	r3, r2
 8002420:	781b      	ldrb	r3, [r3, #0]
 8002422:	4619      	mov	r1, r3
 8002424:	4884      	ldr	r0, [pc, #528]	@ (8002638 <MCP2515_CANOETest+0x2a8>)
 8002426:	f005 feb9 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 800242a:	69fb      	ldr	r3, [r7, #28]
 800242c:	3301      	adds	r3, #1
 800242e:	61fb      	str	r3, [r7, #28]
 8002430:	7abb      	ldrb	r3, [r7, #10]
 8002432:	461a      	mov	r2, r3
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	4293      	cmp	r3, r2
 8002438:	dbee      	blt.n	8002418 <MCP2515_CANOETest+0x88>
    }
    printf("\r\n");
 800243a:	4880      	ldr	r0, [pc, #512]	@ (800263c <MCP2515_CANOETest+0x2ac>)
 800243c:	f005 ff16 	bl	800826c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 8002440:	1d3b      	adds	r3, r7, #4
 8002442:	4618      	mov	r0, r3
 8002444:	f7ff f910 	bl	8001668 <MCP2515_SendMessage>
 8002448:	4603      	mov	r3, r0
 800244a:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 800244c:	7dfb      	ldrb	r3, [r7, #23]
 800244e:	2b00      	cmp	r3, #0
 8002450:	d106      	bne.n	8002460 <MCP2515_CANOETest+0xd0>
        printf("✓ Message sent successfully to CAN bus\r\n");
 8002452:	487b      	ldr	r0, [pc, #492]	@ (8002640 <MCP2515_CANOETest+0x2b0>)
 8002454:	f005 ff0a 	bl	800826c <puts>
        printf(">> Check CANOE for received message with ID 0x123\r\n");
 8002458:	487a      	ldr	r0, [pc, #488]	@ (8002644 <MCP2515_CANOETest+0x2b4>)
 800245a:	f005 ff07 	bl	800826c <puts>
 800245e:	e00f      	b.n	8002480 <MCP2515_CANOETest+0xf0>
    } else if (result == MCP2515_TIMEOUT) {
 8002460:	7dfb      	ldrb	r3, [r7, #23]
 8002462:	2b02      	cmp	r3, #2
 8002464:	d109      	bne.n	800247a <MCP2515_CANOETest+0xea>
        printf("⚠ Message send timeout - No ACK received\r\n");
 8002466:	4878      	ldr	r0, [pc, #480]	@ (8002648 <MCP2515_CANOETest+0x2b8>)
 8002468:	f005 ff00 	bl	800826c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 800246c:	4877      	ldr	r0, [pc, #476]	@ (800264c <MCP2515_CANOETest+0x2bc>)
 800246e:	f005 fefd 	bl	800826c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 8002472:	4877      	ldr	r0, [pc, #476]	@ (8002650 <MCP2515_CANOETest+0x2c0>)
 8002474:	f005 fefa 	bl	800826c <puts>
 8002478:	e002      	b.n	8002480 <MCP2515_CANOETest+0xf0>
    } else {
        printf("✗ Message send failed\r\n");
 800247a:	4876      	ldr	r0, [pc, #472]	@ (8002654 <MCP2515_CANOETest+0x2c4>)
 800247c:	f005 fef6 	bl	800826c <puts>
    }
    
    HAL_Delay(500);  // 延时500ms
 8002480:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002484:	f000 fcdc 	bl	8002e40 <HAL_Delay>
    
    // 准备测试报文2 - 扩展帧
    test_msg.id = 0x12345678;
 8002488:	4b73      	ldr	r3, [pc, #460]	@ (8002658 <MCP2515_CANOETest+0x2c8>)
 800248a:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 6;
 800248c:	2306      	movs	r3, #6
 800248e:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 8002490:	2300      	movs	r3, #0
 8002492:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 1;  // 扩展帧
 8002494:	2301      	movs	r3, #1
 8002496:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0xCA;
 8002498:	23ca      	movs	r3, #202	@ 0xca
 800249a:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0xFE;
 800249c:	23fe      	movs	r3, #254	@ 0xfe
 800249e:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0xBA;
 80024a0:	23ba      	movs	r3, #186	@ 0xba
 80024a2:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0xBE;
 80024a4:	23be      	movs	r3, #190	@ 0xbe
 80024a6:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(HAL_GetTick() & 0xFF);
 80024a8:	f000 fcbe 	bl	8002e28 <HAL_GetTick>
 80024ac:	4603      	mov	r3, r0
 80024ae:	b2db      	uxtb	r3, r3
 80024b0:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((HAL_GetTick() >> 8) & 0xFF);
 80024b2:	f000 fcb9 	bl	8002e28 <HAL_GetTick>
 80024b6:	4603      	mov	r3, r0
 80024b8:	0a1b      	lsrs	r3, r3, #8
 80024ba:	b2db      	uxtb	r3, r3
 80024bc:	743b      	strb	r3, [r7, #16]
    
    printf("\r\n--- Test Message 2 (Extended Frame) ---\r\n");
 80024be:	4867      	ldr	r0, [pc, #412]	@ (800265c <MCP2515_CANOETest+0x2cc>)
 80024c0:	f005 fed4 	bl	800826c <puts>
    printf("Sending CAN message to bus...\r\n");
 80024c4:	4858      	ldr	r0, [pc, #352]	@ (8002628 <MCP2515_CANOETest+0x298>)
 80024c6:	f005 fed1 	bl	800826c <puts>
    printf("CAN ID: 0x%08lX (Extended Frame)\r\n", test_msg.id);
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	4619      	mov	r1, r3
 80024ce:	4864      	ldr	r0, [pc, #400]	@ (8002660 <MCP2515_CANOETest+0x2d0>)
 80024d0:	f005 fe64 	bl	800819c <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 80024d4:	7abb      	ldrb	r3, [r7, #10]
 80024d6:	4619      	mov	r1, r3
 80024d8:	4855      	ldr	r0, [pc, #340]	@ (8002630 <MCP2515_CANOETest+0x2a0>)
 80024da:	f005 fe5f 	bl	800819c <iprintf>
    printf("Data: ");
 80024de:	4855      	ldr	r0, [pc, #340]	@ (8002634 <MCP2515_CANOETest+0x2a4>)
 80024e0:	f005 fe5c 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80024e4:	2300      	movs	r3, #0
 80024e6:	61bb      	str	r3, [r7, #24]
 80024e8:	e00b      	b.n	8002502 <MCP2515_CANOETest+0x172>
        printf("0x%02X ", test_msg.data[i]);
 80024ea:	f107 020b 	add.w	r2, r7, #11
 80024ee:	69bb      	ldr	r3, [r7, #24]
 80024f0:	4413      	add	r3, r2
 80024f2:	781b      	ldrb	r3, [r3, #0]
 80024f4:	4619      	mov	r1, r3
 80024f6:	4850      	ldr	r0, [pc, #320]	@ (8002638 <MCP2515_CANOETest+0x2a8>)
 80024f8:	f005 fe50 	bl	800819c <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80024fc:	69bb      	ldr	r3, [r7, #24]
 80024fe:	3301      	adds	r3, #1
 8002500:	61bb      	str	r3, [r7, #24]
 8002502:	7abb      	ldrb	r3, [r7, #10]
 8002504:	461a      	mov	r2, r3
 8002506:	69bb      	ldr	r3, [r7, #24]
 8002508:	4293      	cmp	r3, r2
 800250a:	dbee      	blt.n	80024ea <MCP2515_CANOETest+0x15a>
    }
    printf("\r\n");
 800250c:	484b      	ldr	r0, [pc, #300]	@ (800263c <MCP2515_CANOETest+0x2ac>)
 800250e:	f005 fead 	bl	800826c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 8002512:	1d3b      	adds	r3, r7, #4
 8002514:	4618      	mov	r0, r3
 8002516:	f7ff f8a7 	bl	8001668 <MCP2515_SendMessage>
 800251a:	4603      	mov	r3, r0
 800251c:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 800251e:	7dfb      	ldrb	r3, [r7, #23]
 8002520:	2b00      	cmp	r3, #0
 8002522:	d106      	bne.n	8002532 <MCP2515_CANOETest+0x1a2>
        printf("✓ Message sent successfully to CAN bus\r\n");
 8002524:	4846      	ldr	r0, [pc, #280]	@ (8002640 <MCP2515_CANOETest+0x2b0>)
 8002526:	f005 fea1 	bl	800826c <puts>
        printf(">> Check CANOE for received message with ID 0x12345678\r\n");
 800252a:	484e      	ldr	r0, [pc, #312]	@ (8002664 <MCP2515_CANOETest+0x2d4>)
 800252c:	f005 fe9e 	bl	800826c <puts>
 8002530:	e00f      	b.n	8002552 <MCP2515_CANOETest+0x1c2>
    } else if (result == MCP2515_TIMEOUT) {
 8002532:	7dfb      	ldrb	r3, [r7, #23]
 8002534:	2b02      	cmp	r3, #2
 8002536:	d109      	bne.n	800254c <MCP2515_CANOETest+0x1bc>
        printf("⚠ Message send timeout - No ACK received\r\n");
 8002538:	4843      	ldr	r0, [pc, #268]	@ (8002648 <MCP2515_CANOETest+0x2b8>)
 800253a:	f005 fe97 	bl	800826c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 800253e:	4843      	ldr	r0, [pc, #268]	@ (800264c <MCP2515_CANOETest+0x2bc>)
 8002540:	f005 fe94 	bl	800826c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 8002544:	4842      	ldr	r0, [pc, #264]	@ (8002650 <MCP2515_CANOETest+0x2c0>)
 8002546:	f005 fe91 	bl	800826c <puts>
 800254a:	e002      	b.n	8002552 <MCP2515_CANOETest+0x1c2>
    } else {
        printf("✗ Message send failed\r\n");
 800254c:	4841      	ldr	r0, [pc, #260]	@ (8002654 <MCP2515_CANOETest+0x2c4>)
 800254e:	f005 fe8d 	bl	800826c <puts>
    }
    
    HAL_Delay(500);  // 延时500ms
 8002552:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002556:	f000 fc73 	bl	8002e40 <HAL_Delay>
    
    // 准备测试报文3 - RTR帧
    test_msg.id = 0x456;
 800255a:	f240 4356 	movw	r3, #1110	@ 0x456
 800255e:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 4;
 8002560:	2304      	movs	r3, #4
 8002562:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 1;  // RTR帧
 8002564:	2301      	movs	r3, #1
 8002566:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 8002568:	2300      	movs	r3, #0
 800256a:	723b      	strb	r3, [r7, #8]
    
    printf("\r\n--- Test Message 3 (RTR Frame) ---\r\n");
 800256c:	483e      	ldr	r0, [pc, #248]	@ (8002668 <MCP2515_CANOETest+0x2d8>)
 800256e:	f005 fe7d 	bl	800826c <puts>
    printf("Sending RTR message to bus...\r\n");
 8002572:	483e      	ldr	r0, [pc, #248]	@ (800266c <MCP2515_CANOETest+0x2dc>)
 8002574:	f005 fe7a 	bl	800826c <puts>
    printf("CAN ID: 0x%03lX (Standard RTR Frame)\r\n", test_msg.id);
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	4619      	mov	r1, r3
 800257c:	483c      	ldr	r0, [pc, #240]	@ (8002670 <MCP2515_CANOETest+0x2e0>)
 800257e:	f005 fe0d 	bl	800819c <iprintf>
    printf("DLC: %d bytes (RTR - no data)\r\n", test_msg.dlc);
 8002582:	7abb      	ldrb	r3, [r7, #10]
 8002584:	4619      	mov	r1, r3
 8002586:	483b      	ldr	r0, [pc, #236]	@ (8002674 <MCP2515_CANOETest+0x2e4>)
 8002588:	f005 fe08 	bl	800819c <iprintf>
    
    // 发送RTR报文
    result = MCP2515_SendMessage(&test_msg);
 800258c:	1d3b      	adds	r3, r7, #4
 800258e:	4618      	mov	r0, r3
 8002590:	f7ff f86a 	bl	8001668 <MCP2515_SendMessage>
 8002594:	4603      	mov	r3, r0
 8002596:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 8002598:	7dfb      	ldrb	r3, [r7, #23]
 800259a:	2b00      	cmp	r3, #0
 800259c:	d106      	bne.n	80025ac <MCP2515_CANOETest+0x21c>
        printf("✓ RTR message sent successfully to CAN bus\r\n");
 800259e:	4836      	ldr	r0, [pc, #216]	@ (8002678 <MCP2515_CANOETest+0x2e8>)
 80025a0:	f005 fe64 	bl	800826c <puts>
        printf(">> Check CANOE for received RTR message with ID 0x456\r\n");
 80025a4:	4835      	ldr	r0, [pc, #212]	@ (800267c <MCP2515_CANOETest+0x2ec>)
 80025a6:	f005 fe61 	bl	800826c <puts>
 80025aa:	e00f      	b.n	80025cc <MCP2515_CANOETest+0x23c>
    } else if (result == MCP2515_TIMEOUT) {
 80025ac:	7dfb      	ldrb	r3, [r7, #23]
 80025ae:	2b02      	cmp	r3, #2
 80025b0:	d109      	bne.n	80025c6 <MCP2515_CANOETest+0x236>
        printf("⚠ RTR message send timeout - No ACK received\r\n");
 80025b2:	4833      	ldr	r0, [pc, #204]	@ (8002680 <MCP2515_CANOETest+0x2f0>)
 80025b4:	f005 fe5a 	bl	800826c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 80025b8:	4824      	ldr	r0, [pc, #144]	@ (800264c <MCP2515_CANOETest+0x2bc>)
 80025ba:	f005 fe57 	bl	800826c <puts>
        printf(">> Check CANOE for transmitted RTR message attempt\r\n");
 80025be:	4831      	ldr	r0, [pc, #196]	@ (8002684 <MCP2515_CANOETest+0x2f4>)
 80025c0:	f005 fe54 	bl	800826c <puts>
 80025c4:	e002      	b.n	80025cc <MCP2515_CANOETest+0x23c>
    } else {
        printf("✗ RTR message send failed\r\n");
 80025c6:	4830      	ldr	r0, [pc, #192]	@ (8002688 <MCP2515_CANOETest+0x2f8>)
 80025c8:	f005 fe50 	bl	800826c <puts>
    }
    
    test_counter++;
 80025cc:	4b14      	ldr	r3, [pc, #80]	@ (8002620 <MCP2515_CANOETest+0x290>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	3301      	adds	r3, #1
 80025d2:	4a13      	ldr	r2, [pc, #76]	@ (8002620 <MCP2515_CANOETest+0x290>)
 80025d4:	6013      	str	r3, [r2, #0]
    
    printf("\r\n=== CANOE Test Summary ===\r\n");
 80025d6:	482d      	ldr	r0, [pc, #180]	@ (800268c <MCP2515_CANOETest+0x2fc>)
 80025d8:	f005 fe48 	bl	800826c <puts>
    printf("Test sequence #%lu completed\r\n", test_counter);
 80025dc:	4b10      	ldr	r3, [pc, #64]	@ (8002620 <MCP2515_CANOETest+0x290>)
 80025de:	681b      	ldr	r3, [r3, #0]
 80025e0:	4619      	mov	r1, r3
 80025e2:	482b      	ldr	r0, [pc, #172]	@ (8002690 <MCP2515_CANOETest+0x300>)
 80025e4:	f005 fdda 	bl	800819c <iprintf>
    printf("Messages sent to CAN bus:\r\n");
 80025e8:	482a      	ldr	r0, [pc, #168]	@ (8002694 <MCP2515_CANOETest+0x304>)
 80025ea:	f005 fe3f 	bl	800826c <puts>
    printf("  1. Standard Frame: ID=0x123, 8 bytes data\r\n");
 80025ee:	482a      	ldr	r0, [pc, #168]	@ (8002698 <MCP2515_CANOETest+0x308>)
 80025f0:	f005 fe3c 	bl	800826c <puts>
    printf("  2. Extended Frame: ID=0x12345678, 6 bytes data\r\n");
 80025f4:	4829      	ldr	r0, [pc, #164]	@ (800269c <MCP2515_CANOETest+0x30c>)
 80025f6:	f005 fe39 	bl	800826c <puts>
    printf("  3. RTR Frame: ID=0x456, 4 bytes requested\r\n");
 80025fa:	4829      	ldr	r0, [pc, #164]	@ (80026a0 <MCP2515_CANOETest+0x310>)
 80025fc:	f005 fe36 	bl	800826c <puts>
    printf("\r\nPlease check CANOE trace window for these messages\r\n");
 8002600:	4828      	ldr	r0, [pc, #160]	@ (80026a4 <MCP2515_CANOETest+0x314>)
 8002602:	f005 fe33 	bl	800826c <puts>
    printf("If messages appear in CANOE, CAN transmission is working!\r\n");
 8002606:	4828      	ldr	r0, [pc, #160]	@ (80026a8 <MCP2515_CANOETest+0x318>)
 8002608:	f005 fe30 	bl	800826c <puts>
    printf("===============================\r\n");
 800260c:	4827      	ldr	r0, [pc, #156]	@ (80026ac <MCP2515_CANOETest+0x31c>)
 800260e:	f005 fe2d 	bl	800826c <puts>
}
 8002612:	3720      	adds	r7, #32
 8002614:	46bd      	mov	sp, r7
 8002616:	bd80      	pop	{r7, pc}
 8002618:	0800aab4 	.word	0x0800aab4
 800261c:	0800aaec 	.word	0x0800aaec
 8002620:	2000014c 	.word	0x2000014c
 8002624:	0800ab14 	.word	0x0800ab14
 8002628:	0800ab40 	.word	0x0800ab40
 800262c:	0800ab60 	.word	0x0800ab60
 8002630:	0800ab84 	.word	0x0800ab84
 8002634:	0800ab94 	.word	0x0800ab94
 8002638:	0800a784 	.word	0x0800a784
 800263c:	0800a78c 	.word	0x0800a78c
 8002640:	0800ab9c 	.word	0x0800ab9c
 8002644:	0800abc8 	.word	0x0800abc8
 8002648:	0800abfc 	.word	0x0800abfc
 800264c:	0800ac28 	.word	0x0800ac28
 8002650:	0800ac60 	.word	0x0800ac60
 8002654:	0800ac90 	.word	0x0800ac90
 8002658:	12345678 	.word	0x12345678
 800265c:	0800acac 	.word	0x0800acac
 8002660:	0800acd8 	.word	0x0800acd8
 8002664:	0800acfc 	.word	0x0800acfc
 8002668:	0800ad34 	.word	0x0800ad34
 800266c:	0800ad5c 	.word	0x0800ad5c
 8002670:	0800ad7c 	.word	0x0800ad7c
 8002674:	0800ada4 	.word	0x0800ada4
 8002678:	0800adc4 	.word	0x0800adc4
 800267c:	0800adf4 	.word	0x0800adf4
 8002680:	0800ae2c 	.word	0x0800ae2c
 8002684:	0800ae5c 	.word	0x0800ae5c
 8002688:	0800ae90 	.word	0x0800ae90
 800268c:	0800aeb0 	.word	0x0800aeb0
 8002690:	0800aed0 	.word	0x0800aed0
 8002694:	0800aef0 	.word	0x0800aef0
 8002698:	0800af0c 	.word	0x0800af0c
 800269c:	0800af3c 	.word	0x0800af3c
 80026a0:	0800af70 	.word	0x0800af70
 80026a4:	0800afa0 	.word	0x0800afa0
 80026a8:	0800afd8 	.word	0x0800afd8
 80026ac:	0800a590 	.word	0x0800a590

080026b0 <MCP2515_InitFailureDiagnosis>:
  * @brief  初始化失败专用诊断函数
  * @param  None
  * @retval None
  */
void MCP2515_InitFailureDiagnosis(void)
{
 80026b0:	b580      	push	{r7, lr}
 80026b2:	b082      	sub	sp, #8
 80026b4:	af00      	add	r7, sp, #0
    printf("\r\n=== MCP2515 Initialization Failure Diagnosis ===\r\n");
 80026b6:	4854      	ldr	r0, [pc, #336]	@ (8002808 <MCP2515_InitFailureDiagnosis+0x158>)
 80026b8:	f005 fdd8 	bl	800826c <puts>
    
    // 1. 详细的硬件连接测试
    printf("\r\nStep 1: Comprehensive hardware test...\r\n");
 80026bc:	4853      	ldr	r0, [pc, #332]	@ (800280c <MCP2515_InitFailureDiagnosis+0x15c>)
 80026be:	f005 fdd5 	bl	800826c <puts>
    if (MCP2515_HardwareTest() == MCP2515_OK) {
 80026c2:	f7ff f8e9 	bl	8001898 <MCP2515_HardwareTest>
 80026c6:	4603      	mov	r3, r0
 80026c8:	2b00      	cmp	r3, #0
 80026ca:	d108      	bne.n	80026de <MCP2515_InitFailureDiagnosis+0x2e>
        printf("✓ Hardware connections appear to be working\r\n");
 80026cc:	4850      	ldr	r0, [pc, #320]	@ (8002810 <MCP2515_InitFailureDiagnosis+0x160>)
 80026ce:	f005 fdcd 	bl	800826c <puts>
        printf("  □ Decoupling capacitors: 100nF near MCP2515\r\n");
        return;
    }
    
    // 2. 多次复位尝试
    printf("\r\nStep 2: Multiple reset attempts...\r\n");
 80026d2:	4850      	ldr	r0, [pc, #320]	@ (8002814 <MCP2515_InitFailureDiagnosis+0x164>)
 80026d4:	f005 fdca 	bl	800826c <puts>
    for (int i = 0; i < 3; i++) {
 80026d8:	2300      	movs	r3, #0
 80026da:	607b      	str	r3, [r7, #4]
 80026dc:	e03a      	b.n	8002754 <MCP2515_InitFailureDiagnosis+0xa4>
        printf("✗ Hardware test failed - Check connections\r\n");
 80026de:	484e      	ldr	r0, [pc, #312]	@ (8002818 <MCP2515_InitFailureDiagnosis+0x168>)
 80026e0:	f005 fdc4 	bl	800826c <puts>
        printf("\r\nHardware troubleshooting checklist:\r\n");
 80026e4:	484d      	ldr	r0, [pc, #308]	@ (800281c <MCP2515_InitFailureDiagnosis+0x16c>)
 80026e6:	f005 fdc1 	bl	800826c <puts>
        printf("  □ SPI connections: SCK(PB3), MISO(PB4), MOSI(PB5)\r\n");
 80026ea:	484d      	ldr	r0, [pc, #308]	@ (8002820 <MCP2515_InitFailureDiagnosis+0x170>)
 80026ec:	f005 fdbe 	bl	800826c <puts>
        printf("  □ CS connection: PB12\r\n");
 80026f0:	484c      	ldr	r0, [pc, #304]	@ (8002824 <MCP2515_InitFailureDiagnosis+0x174>)
 80026f2:	f005 fdbb 	bl	800826c <puts>
        printf("  □ Power supply: 3.3V to MCP2515 VCC\r\n");
 80026f6:	484c      	ldr	r0, [pc, #304]	@ (8002828 <MCP2515_InitFailureDiagnosis+0x178>)
 80026f8:	f005 fdb8 	bl	800826c <puts>
        printf("  □ Ground connection: GND\r\n");
 80026fc:	484b      	ldr	r0, [pc, #300]	@ (800282c <MCP2515_InitFailureDiagnosis+0x17c>)
 80026fe:	f005 fdb5 	bl	800826c <puts>
        printf("  □ Crystal oscillator: 8MHz or 16MHz\r\n");
 8002702:	484b      	ldr	r0, [pc, #300]	@ (8002830 <MCP2515_InitFailureDiagnosis+0x180>)
 8002704:	f005 fdb2 	bl	800826c <puts>
        printf("  □ Decoupling capacitors: 100nF near MCP2515\r\n");
 8002708:	484a      	ldr	r0, [pc, #296]	@ (8002834 <MCP2515_InitFailureDiagnosis+0x184>)
 800270a:	f005 fdaf 	bl	800826c <puts>
        return;
 800270e:	e077      	b.n	8002800 <MCP2515_InitFailureDiagnosis+0x150>
        printf("Reset attempt %d/3:\r\n", i + 1);
 8002710:	687b      	ldr	r3, [r7, #4]
 8002712:	3301      	adds	r3, #1
 8002714:	4619      	mov	r1, r3
 8002716:	4848      	ldr	r0, [pc, #288]	@ (8002838 <MCP2515_InitFailureDiagnosis+0x188>)
 8002718:	f005 fd40 	bl	800819c <iprintf>
        MCP2515_Reset();
 800271c:	f7fe fdba 	bl	8001294 <MCP2515_Reset>
        osDelay(100);
 8002720:	2064      	movs	r0, #100	@ 0x64
 8002722:	f002 fe19 	bl	8005358 <osDelay>
        
        uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 8002726:	200e      	movs	r0, #14
 8002728:	f7fe fd5e 	bl	80011e8 <MCP2515_ReadRegister>
 800272c:	4603      	mov	r3, r0
 800272e:	70fb      	strb	r3, [r7, #3]
        printf("  CANSTAT: 0x%02X\r\n", canstat);
 8002730:	78fb      	ldrb	r3, [r7, #3]
 8002732:	4619      	mov	r1, r3
 8002734:	4841      	ldr	r0, [pc, #260]	@ (800283c <MCP2515_InitFailureDiagnosis+0x18c>)
 8002736:	f005 fd31 	bl	800819c <iprintf>
        
        if (canstat != 0xFF) {
 800273a:	78fb      	ldrb	r3, [r7, #3]
 800273c:	2bff      	cmp	r3, #255	@ 0xff
 800273e:	d003      	beq.n	8002748 <MCP2515_InitFailureDiagnosis+0x98>
            printf("  ✓ MCP2515 responding\r\n");
 8002740:	483f      	ldr	r0, [pc, #252]	@ (8002840 <MCP2515_InitFailureDiagnosis+0x190>)
 8002742:	f005 fd93 	bl	800826c <puts>
            break;
 8002746:	e008      	b.n	800275a <MCP2515_InitFailureDiagnosis+0xaa>
        } else {
            printf("  ✗ No response\r\n");
 8002748:	483e      	ldr	r0, [pc, #248]	@ (8002844 <MCP2515_InitFailureDiagnosis+0x194>)
 800274a:	f005 fd8f 	bl	800826c <puts>
    for (int i = 0; i < 3; i++) {
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	3301      	adds	r3, #1
 8002752:	607b      	str	r3, [r7, #4]
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	2b02      	cmp	r3, #2
 8002758:	ddda      	ble.n	8002710 <MCP2515_InitFailureDiagnosis+0x60>
        }
    }
    
    // 3. 强制初始化尝试
    printf("\r\nStep 3: Force initialization attempt...\r\n");
 800275a:	483b      	ldr	r0, [pc, #236]	@ (8002848 <MCP2515_InitFailureDiagnosis+0x198>)
 800275c:	f005 fd86 	bl	800826c <puts>
    
    // 直接设置配置模式
    printf("Attempting to force configuration mode...\r\n");
 8002760:	483a      	ldr	r0, [pc, #232]	@ (800284c <MCP2515_InitFailureDiagnosis+0x19c>)
 8002762:	f005 fd83 	bl	800826c <puts>
    MCP2515_WriteRegister(MCP2515_CANCTRL, MCP2515_MODE_CONFIG);
 8002766:	2180      	movs	r1, #128	@ 0x80
 8002768:	200f      	movs	r0, #15
 800276a:	f7fe fd57 	bl	800121c <MCP2515_WriteRegister>
    osDelay(50);
 800276e:	2032      	movs	r0, #50	@ 0x32
 8002770:	f002 fdf2 	bl	8005358 <osDelay>
    
    uint8_t mode = MCP2515_GetMode();
 8002774:	f7fe fe38 	bl	80013e8 <MCP2515_GetMode>
 8002778:	4603      	mov	r3, r0
 800277a:	70bb      	strb	r3, [r7, #2]
    printf("Current mode: 0x%02X\r\n", mode);
 800277c:	78bb      	ldrb	r3, [r7, #2]
 800277e:	4619      	mov	r1, r3
 8002780:	4833      	ldr	r0, [pc, #204]	@ (8002850 <MCP2515_InitFailureDiagnosis+0x1a0>)
 8002782:	f005 fd0b 	bl	800819c <iprintf>
    
    if (mode == MCP2515_MODE_CONFIG) {
 8002786:	78bb      	ldrb	r3, [r7, #2]
 8002788:	2b80      	cmp	r3, #128	@ 0x80
 800278a:	d133      	bne.n	80027f4 <MCP2515_InitFailureDiagnosis+0x144>
        printf("✓ Successfully entered configuration mode\r\n");
 800278c:	4831      	ldr	r0, [pc, #196]	@ (8002854 <MCP2515_InitFailureDiagnosis+0x1a4>)
 800278e:	f005 fd6d 	bl	800826c <puts>
        
        // 尝试配置波特率
        printf("Configuring 500K baud rate...\r\n");
 8002792:	4831      	ldr	r0, [pc, #196]	@ (8002858 <MCP2515_InitFailureDiagnosis+0x1a8>)
 8002794:	f005 fd6a 	bl	800826c <puts>
        MCP2515_WriteRegister(MCP2515_CNF1, 0x00);
 8002798:	2100      	movs	r1, #0
 800279a:	202a      	movs	r0, #42	@ 0x2a
 800279c:	f7fe fd3e 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_CNF2, 0xB1);
 80027a0:	21b1      	movs	r1, #177	@ 0xb1
 80027a2:	2029      	movs	r0, #41	@ 0x29
 80027a4:	f7fe fd3a 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_CNF3, 0x85);
 80027a8:	2185      	movs	r1, #133	@ 0x85
 80027aa:	2028      	movs	r0, #40	@ 0x28
 80027ac:	f7fe fd36 	bl	800121c <MCP2515_WriteRegister>
        
        // 配置接收缓冲区
        MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);
 80027b0:	2160      	movs	r1, #96	@ 0x60
 80027b2:	2060      	movs	r0, #96	@ 0x60
 80027b4:	f7fe fd32 	bl	800121c <MCP2515_WriteRegister>
        MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);
 80027b8:	2160      	movs	r1, #96	@ 0x60
 80027ba:	2070      	movs	r0, #112	@ 0x70
 80027bc:	f7fe fd2e 	bl	800121c <MCP2515_WriteRegister>
        
        // 清除中断标志
        MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 80027c0:	2100      	movs	r1, #0
 80027c2:	202c      	movs	r0, #44	@ 0x2c
 80027c4:	f7fe fd2a 	bl	800121c <MCP2515_WriteRegister>
        
        // 尝试切换到正常模式
        printf("Switching to normal mode...\r\n");
 80027c8:	4824      	ldr	r0, [pc, #144]	@ (800285c <MCP2515_InitFailureDiagnosis+0x1ac>)
 80027ca:	f005 fd4f 	bl	800826c <puts>
        if (MCP2515_SetMode(MCP2515_MODE_NORMAL) == MCP2515_OK) {
 80027ce:	2000      	movs	r0, #0
 80027d0:	f7fe fdd2 	bl	8001378 <MCP2515_SetMode>
 80027d4:	4603      	mov	r3, r0
 80027d6:	2b00      	cmp	r3, #0
 80027d8:	d108      	bne.n	80027ec <MCP2515_InitFailureDiagnosis+0x13c>
            printf("✓ Force initialization successful!\r\n");
 80027da:	4821      	ldr	r0, [pc, #132]	@ (8002860 <MCP2515_InitFailureDiagnosis+0x1b0>)
 80027dc:	f005 fd46 	bl	800826c <puts>
            printf("\r\n--- Starting CANOE Test Mode ---\r\n");
 80027e0:	4820      	ldr	r0, [pc, #128]	@ (8002864 <MCP2515_InitFailureDiagnosis+0x1b4>)
 80027e2:	f005 fd43 	bl	800826c <puts>
            MCP2515_CANOETest();
 80027e6:	f7ff fdd3 	bl	8002390 <MCP2515_CANOETest>
 80027ea:	e006      	b.n	80027fa <MCP2515_InitFailureDiagnosis+0x14a>
        } else {
            printf("✗ Failed to switch to normal mode\r\n");
 80027ec:	481e      	ldr	r0, [pc, #120]	@ (8002868 <MCP2515_InitFailureDiagnosis+0x1b8>)
 80027ee:	f005 fd3d 	bl	800826c <puts>
 80027f2:	e002      	b.n	80027fa <MCP2515_InitFailureDiagnosis+0x14a>
        }
    } else {
        printf("✗ Cannot enter configuration mode\r\n");
 80027f4:	481d      	ldr	r0, [pc, #116]	@ (800286c <MCP2515_InitFailureDiagnosis+0x1bc>)
 80027f6:	f005 fd39 	bl	800826c <puts>
    }
    
    printf("\r\n=== Diagnosis completed ===\r\n");
 80027fa:	481d      	ldr	r0, [pc, #116]	@ (8002870 <MCP2515_InitFailureDiagnosis+0x1c0>)
 80027fc:	f005 fd36 	bl	800826c <puts>
}
 8002800:	3708      	adds	r7, #8
 8002802:	46bd      	mov	sp, r7
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	0800b014 	.word	0x0800b014
 800280c:	0800b048 	.word	0x0800b048
 8002810:	0800b074 	.word	0x0800b074
 8002814:	0800b1fc 	.word	0x0800b1fc
 8002818:	0800b0a4 	.word	0x0800b0a4
 800281c:	0800b0d4 	.word	0x0800b0d4
 8002820:	0800b0fc 	.word	0x0800b0fc
 8002824:	0800b134 	.word	0x0800b134
 8002828:	0800b150 	.word	0x0800b150
 800282c:	0800b17c 	.word	0x0800b17c
 8002830:	0800b19c 	.word	0x0800b19c
 8002834:	0800b1c8 	.word	0x0800b1c8
 8002838:	0800b224 	.word	0x0800b224
 800283c:	0800b23c 	.word	0x0800b23c
 8002840:	0800b250 	.word	0x0800b250
 8002844:	0800b26c 	.word	0x0800b26c
 8002848:	0800b280 	.word	0x0800b280
 800284c:	0800b2ac 	.word	0x0800b2ac
 8002850:	0800b2d8 	.word	0x0800b2d8
 8002854:	08009cb4 	.word	0x08009cb4
 8002858:	0800b2f0 	.word	0x0800b2f0
 800285c:	0800b310 	.word	0x0800b310
 8002860:	0800b330 	.word	0x0800b330
 8002864:	0800b358 	.word	0x0800b358
 8002868:	0800b37c 	.word	0x0800b37c
 800286c:	0800b3a4 	.word	0x0800b3a4
 8002870:	0800b3cc 	.word	0x0800b3cc

08002874 <CAN_DiagnoseAndFix>:
  * @brief  完整的CAN问题诊断和修复流程
  * @param  None
  * @retval None
  */
void CAN_DiagnoseAndFix(void)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	af00      	add	r7, sp, #0
    printf("\r\nStarting CAN problem diagnosis and repair process...\r\n");
 8002878:	4829      	ldr	r0, [pc, #164]	@ (8002920 <CAN_DiagnoseAndFix+0xac>)
 800287a:	f005 fcf7 	bl	800826c <puts>
    
    // Step 1: Diagnose current error status
    MCP2515_DiagnoseErrors();
 800287e:	f7ff faf3 	bl	8001e68 <MCP2515_DiagnoseErrors>
    
    // Step 2: Clear error flags
    MCP2515_ClearAllErrors();
 8002882:	f7ff fc01 	bl	8002088 <MCP2515_ClearAllErrors>
    
    // Step 3: Loopback mode test
    if (MCP2515_LoopbackTest() == MCP2515_OK) {
 8002886:	f7ff fc11 	bl	80020ac <MCP2515_LoopbackTest>
 800288a:	4603      	mov	r3, r0
 800288c:	2b00      	cmp	r3, #0
 800288e:	d123      	bne.n	80028d8 <CAN_DiagnoseAndFix+0x64>
        printf("\r\nSUCCESS: MCP2515 hardware is functioning normally\r\n");
 8002890:	4824      	ldr	r0, [pc, #144]	@ (8002924 <CAN_DiagnoseAndFix+0xb0>)
 8002892:	f005 fceb 	bl	800826c <puts>
        printf("Possible issues:\r\n");
 8002896:	4824      	ldr	r0, [pc, #144]	@ (8002928 <CAN_DiagnoseAndFix+0xb4>)
 8002898:	f005 fce8 	bl	800826c <puts>
        printf("   1. No other CAN nodes on the bus to acknowledge\r\n");
 800289c:	4823      	ldr	r0, [pc, #140]	@ (800292c <CAN_DiagnoseAndFix+0xb8>)
 800289e:	f005 fce5 	bl	800826c <puts>
        printf("   2. Termination resistors not properly installed\r\n");
 80028a2:	4823      	ldr	r0, [pc, #140]	@ (8002930 <CAN_DiagnoseAndFix+0xbc>)
 80028a4:	f005 fce2 	bl	800826c <puts>
        printf("   3. CAN transceiver connection problems\r\n");
 80028a8:	4822      	ldr	r0, [pc, #136]	@ (8002934 <CAN_DiagnoseAndFix+0xc0>)
 80028aa:	f005 fcdf 	bl	800826c <puts>
        
        printf("\r\nSuggested solutions:\r\n");
 80028ae:	4822      	ldr	r0, [pc, #136]	@ (8002938 <CAN_DiagnoseAndFix+0xc4>)
 80028b0:	f005 fcdc 	bl	800826c <puts>
        printf("   1. Add 120 ohm resistor between CAN_H and CAN_L\r\n");
 80028b4:	4821      	ldr	r0, [pc, #132]	@ (800293c <CAN_DiagnoseAndFix+0xc8>)
 80028b6:	f005 fcd9 	bl	800826c <puts>
        printf("   2. Connect a second CAN node or CAN analyzer\r\n");
 80028ba:	4821      	ldr	r0, [pc, #132]	@ (8002940 <CAN_DiagnoseAndFix+0xcc>)
 80028bc:	f005 fcd6 	bl	800826c <puts>
        printf("   3. Check TJA1050 transceiver connections\r\n");
 80028c0:	4820      	ldr	r0, [pc, #128]	@ (8002944 <CAN_DiagnoseAndFix+0xd0>)
 80028c2:	f005 fcd3 	bl	800826c <puts>
        
        printf("\r\n--- Starting CANOE Test Mode ---\r\n");
 80028c6:	4820      	ldr	r0, [pc, #128]	@ (8002948 <CAN_DiagnoseAndFix+0xd4>)
 80028c8:	f005 fcd0 	bl	800826c <puts>
        printf("Since hardware is OK, testing CAN transmission for CANOE...\r\n");
 80028cc:	481f      	ldr	r0, [pc, #124]	@ (800294c <CAN_DiagnoseAndFix+0xd8>)
 80028ce:	f005 fccd 	bl	800826c <puts>
        MCP2515_CANOETest();
 80028d2:	f7ff fd5d 	bl	8002390 <MCP2515_CANOETest>
 80028d6:	e00e      	b.n	80028f6 <CAN_DiagnoseAndFix+0x82>
    } else {
        printf("\r\nERROR: MCP2515 hardware may have problems\r\n");
 80028d8:	481d      	ldr	r0, [pc, #116]	@ (8002950 <CAN_DiagnoseAndFix+0xdc>)
 80028da:	f005 fcc7 	bl	800826c <puts>
        printf("Suggested checks:\r\n");
 80028de:	481d      	ldr	r0, [pc, #116]	@ (8002954 <CAN_DiagnoseAndFix+0xe0>)
 80028e0:	f005 fcc4 	bl	800826c <puts>
        printf("   1. Verify SPI connections are correct\r\n");
 80028e4:	481c      	ldr	r0, [pc, #112]	@ (8002958 <CAN_DiagnoseAndFix+0xe4>)
 80028e6:	f005 fcc1 	bl	800826c <puts>
        printf("   2. Check MCP2515 power supply\r\n");
 80028ea:	481c      	ldr	r0, [pc, #112]	@ (800295c <CAN_DiagnoseAndFix+0xe8>)
 80028ec:	f005 fcbe 	bl	800826c <puts>
        printf("   3. Verify crystal oscillator is working\r\n");
 80028f0:	481b      	ldr	r0, [pc, #108]	@ (8002960 <CAN_DiagnoseAndFix+0xec>)
 80028f2:	f005 fcbb 	bl	800826c <puts>
    }
    
    // Step 4: Re-initialize
    printf("\r\nRe-initializing MCP2515...\r\n");
 80028f6:	481b      	ldr	r0, [pc, #108]	@ (8002964 <CAN_DiagnoseAndFix+0xf0>)
 80028f8:	f005 fcb8 	bl	800826c <puts>
    if (MCP2515_Init(MCP2515_BAUD_500K) == MCP2515_OK) {
 80028fc:	2002      	movs	r0, #2
 80028fe:	f7fe fdbf 	bl	8001480 <MCP2515_Init>
 8002902:	4603      	mov	r3, r0
 8002904:	2b00      	cmp	r3, #0
 8002906:	d103      	bne.n	8002910 <CAN_DiagnoseAndFix+0x9c>
        printf("OK: MCP2515 re-initialization successful\r\n");
 8002908:	4817      	ldr	r0, [pc, #92]	@ (8002968 <CAN_DiagnoseAndFix+0xf4>)
 800290a:	f005 fcaf 	bl	800826c <puts>
 800290e:	e002      	b.n	8002916 <CAN_DiagnoseAndFix+0xa2>
    } else {
        printf("ERROR: MCP2515 re-initialization failed\r\n");
 8002910:	4816      	ldr	r0, [pc, #88]	@ (800296c <CAN_DiagnoseAndFix+0xf8>)
 8002912:	f005 fcab 	bl	800826c <puts>
    }
    
    printf("\r\nDiagnosis and repair process completed\r\n");
 8002916:	4816      	ldr	r0, [pc, #88]	@ (8002970 <CAN_DiagnoseAndFix+0xfc>)
 8002918:	f005 fca8 	bl	800826c <puts>
 800291c:	bf00      	nop
 800291e:	bd80      	pop	{r7, pc}
 8002920:	0800b3ec 	.word	0x0800b3ec
 8002924:	0800b424 	.word	0x0800b424
 8002928:	0800b45c 	.word	0x0800b45c
 800292c:	0800b470 	.word	0x0800b470
 8002930:	0800b4a4 	.word	0x0800b4a4
 8002934:	0800b4d8 	.word	0x0800b4d8
 8002938:	0800b504 	.word	0x0800b504
 800293c:	0800b51c 	.word	0x0800b51c
 8002940:	0800b550 	.word	0x0800b550
 8002944:	0800b584 	.word	0x0800b584
 8002948:	0800b358 	.word	0x0800b358
 800294c:	0800b5b4 	.word	0x0800b5b4
 8002950:	0800b5f4 	.word	0x0800b5f4
 8002954:	0800b624 	.word	0x0800b624
 8002958:	0800b638 	.word	0x0800b638
 800295c:	0800b664 	.word	0x0800b664
 8002960:	0800b688 	.word	0x0800b688
 8002964:	0800b6b4 	.word	0x0800b6b4
 8002968:	0800b6d4 	.word	0x0800b6d4
 800296c:	0800b700 	.word	0x0800b700
 8002970:	0800b72c 	.word	0x0800b72c

08002974 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002974:	b580      	push	{r7, lr}
 8002976:	b082      	sub	sp, #8
 8002978:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800297a:	2300      	movs	r3, #0
 800297c:	607b      	str	r3, [r7, #4]
 800297e:	4b12      	ldr	r3, [pc, #72]	@ (80029c8 <HAL_MspInit+0x54>)
 8002980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002982:	4a11      	ldr	r2, [pc, #68]	@ (80029c8 <HAL_MspInit+0x54>)
 8002984:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002988:	6453      	str	r3, [r2, #68]	@ 0x44
 800298a:	4b0f      	ldr	r3, [pc, #60]	@ (80029c8 <HAL_MspInit+0x54>)
 800298c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800298e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002992:	607b      	str	r3, [r7, #4]
 8002994:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002996:	2300      	movs	r3, #0
 8002998:	603b      	str	r3, [r7, #0]
 800299a:	4b0b      	ldr	r3, [pc, #44]	@ (80029c8 <HAL_MspInit+0x54>)
 800299c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800299e:	4a0a      	ldr	r2, [pc, #40]	@ (80029c8 <HAL_MspInit+0x54>)
 80029a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80029a6:	4b08      	ldr	r3, [pc, #32]	@ (80029c8 <HAL_MspInit+0x54>)
 80029a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80029aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029ae:	603b      	str	r3, [r7, #0]
 80029b0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80029b2:	2200      	movs	r2, #0
 80029b4:	210f      	movs	r1, #15
 80029b6:	f06f 0001 	mvn.w	r0, #1
 80029ba:	f000 fb1d 	bl	8002ff8 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029be:	bf00      	nop
 80029c0:	3708      	adds	r7, #8
 80029c2:	46bd      	mov	sp, r7
 80029c4:	bd80      	pop	{r7, pc}
 80029c6:	bf00      	nop
 80029c8:	40023800 	.word	0x40023800

080029cc <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b08a      	sub	sp, #40	@ 0x28
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80029d4:	f107 0314 	add.w	r3, r7, #20
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
 80029dc:	605a      	str	r2, [r3, #4]
 80029de:	609a      	str	r2, [r3, #8]
 80029e0:	60da      	str	r2, [r3, #12]
 80029e2:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	4a19      	ldr	r2, [pc, #100]	@ (8002a50 <HAL_SPI_MspInit+0x84>)
 80029ea:	4293      	cmp	r3, r2
 80029ec:	d12b      	bne.n	8002a46 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80029ee:	2300      	movs	r3, #0
 80029f0:	613b      	str	r3, [r7, #16]
 80029f2:	4b18      	ldr	r3, [pc, #96]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 80029f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80029f6:	4a17      	ldr	r2, [pc, #92]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 80029f8:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80029fc:	6453      	str	r3, [r2, #68]	@ 0x44
 80029fe:	4b15      	ldr	r3, [pc, #84]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 8002a00:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002a02:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a06:	613b      	str	r3, [r7, #16]
 8002a08:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	4b11      	ldr	r3, [pc, #68]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 8002a10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a12:	4a10      	ldr	r2, [pc, #64]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 8002a14:	f043 0302 	orr.w	r3, r3, #2
 8002a18:	6313      	str	r3, [r2, #48]	@ 0x30
 8002a1a:	4b0e      	ldr	r3, [pc, #56]	@ (8002a54 <HAL_SPI_MspInit+0x88>)
 8002a1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002a1e:	f003 0302 	and.w	r3, r3, #2
 8002a22:	60fb      	str	r3, [r7, #12]
 8002a24:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002a26:	2338      	movs	r3, #56	@ 0x38
 8002a28:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a2a:	2302      	movs	r3, #2
 8002a2c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2e:	2300      	movs	r3, #0
 8002a30:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a32:	2303      	movs	r3, #3
 8002a34:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002a36:	2305      	movs	r3, #5
 8002a38:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002a3a:	f107 0314 	add.w	r3, r7, #20
 8002a3e:	4619      	mov	r1, r3
 8002a40:	4805      	ldr	r0, [pc, #20]	@ (8002a58 <HAL_SPI_MspInit+0x8c>)
 8002a42:	f000 fb03 	bl	800304c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a46:	bf00      	nop
 8002a48:	3728      	adds	r7, #40	@ 0x28
 8002a4a:	46bd      	mov	sp, r7
 8002a4c:	bd80      	pop	{r7, pc}
 8002a4e:	bf00      	nop
 8002a50:	40013000 	.word	0x40013000
 8002a54:	40023800 	.word	0x40023800
 8002a58:	40020400 	.word	0x40020400

08002a5c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002a5c:	b580      	push	{r7, lr}
 8002a5e:	b08a      	sub	sp, #40	@ 0x28
 8002a60:	af00      	add	r7, sp, #0
 8002a62:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a64:	f107 0314 	add.w	r3, r7, #20
 8002a68:	2200      	movs	r2, #0
 8002a6a:	601a      	str	r2, [r3, #0]
 8002a6c:	605a      	str	r2, [r3, #4]
 8002a6e:	609a      	str	r2, [r3, #8]
 8002a70:	60da      	str	r2, [r3, #12]
 8002a72:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	4a19      	ldr	r2, [pc, #100]	@ (8002ae0 <HAL_UART_MspInit+0x84>)
 8002a7a:	4293      	cmp	r3, r2
 8002a7c:	d12b      	bne.n	8002ad6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002a7e:	2300      	movs	r3, #0
 8002a80:	613b      	str	r3, [r7, #16]
 8002a82:	4b18      	ldr	r3, [pc, #96]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002a84:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a86:	4a17      	ldr	r2, [pc, #92]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002a88:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a8c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002a8e:	4b15      	ldr	r3, [pc, #84]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002a90:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a92:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a96:	613b      	str	r3, [r7, #16]
 8002a98:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a9a:	2300      	movs	r3, #0
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	4b11      	ldr	r3, [pc, #68]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002aa0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aa2:	4a10      	ldr	r2, [pc, #64]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002aa4:	f043 0301 	orr.w	r3, r3, #1
 8002aa8:	6313      	str	r3, [r2, #48]	@ 0x30
 8002aaa:	4b0e      	ldr	r3, [pc, #56]	@ (8002ae4 <HAL_UART_MspInit+0x88>)
 8002aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002aae:	f003 0301 	and.w	r3, r3, #1
 8002ab2:	60fb      	str	r3, [r7, #12]
 8002ab4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002ab6:	230c      	movs	r3, #12
 8002ab8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aba:	2302      	movs	r3, #2
 8002abc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002abe:	2300      	movs	r3, #0
 8002ac0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ac2:	2303      	movs	r3, #3
 8002ac4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002ac6:	2307      	movs	r3, #7
 8002ac8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aca:	f107 0314 	add.w	r3, r7, #20
 8002ace:	4619      	mov	r1, r3
 8002ad0:	4805      	ldr	r0, [pc, #20]	@ (8002ae8 <HAL_UART_MspInit+0x8c>)
 8002ad2:	f000 fabb 	bl	800304c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002ad6:	bf00      	nop
 8002ad8:	3728      	adds	r7, #40	@ 0x28
 8002ada:	46bd      	mov	sp, r7
 8002adc:	bd80      	pop	{r7, pc}
 8002ade:	bf00      	nop
 8002ae0:	40004400 	.word	0x40004400
 8002ae4:	40023800 	.word	0x40023800
 8002ae8:	40020000 	.word	0x40020000

08002aec <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	b08c      	sub	sp, #48	@ 0x30
 8002af0:	af00      	add	r7, sp, #0
 8002af2:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002af4:	2300      	movs	r3, #0
 8002af6:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002af8:	2300      	movs	r3, #0
 8002afa:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8002afc:	2300      	movs	r3, #0
 8002afe:	60bb      	str	r3, [r7, #8]
 8002b00:	4b2f      	ldr	r3, [pc, #188]	@ (8002bc0 <HAL_InitTick+0xd4>)
 8002b02:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b04:	4a2e      	ldr	r2, [pc, #184]	@ (8002bc0 <HAL_InitTick+0xd4>)
 8002b06:	f043 0301 	orr.w	r3, r3, #1
 8002b0a:	6453      	str	r3, [r2, #68]	@ 0x44
 8002b0c:	4b2c      	ldr	r3, [pc, #176]	@ (8002bc0 <HAL_InitTick+0xd4>)
 8002b0e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002b10:	f003 0301 	and.w	r3, r3, #1
 8002b14:	60bb      	str	r3, [r7, #8]
 8002b16:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002b18:	f107 020c 	add.w	r2, r7, #12
 8002b1c:	f107 0310 	add.w	r3, r7, #16
 8002b20:	4611      	mov	r1, r2
 8002b22:	4618      	mov	r0, r3
 8002b24:	f001 f904 	bl	8003d30 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002b28:	f001 f8ee 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8002b2c:	4603      	mov	r3, r0
 8002b2e:	005b      	lsls	r3, r3, #1
 8002b30:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002b32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002b34:	4a23      	ldr	r2, [pc, #140]	@ (8002bc4 <HAL_InitTick+0xd8>)
 8002b36:	fba2 2303 	umull	r2, r3, r2, r3
 8002b3a:	0c9b      	lsrs	r3, r3, #18
 8002b3c:	3b01      	subs	r3, #1
 8002b3e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002b40:	4b21      	ldr	r3, [pc, #132]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b42:	4a22      	ldr	r2, [pc, #136]	@ (8002bcc <HAL_InitTick+0xe0>)
 8002b44:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002b46:	4b20      	ldr	r3, [pc, #128]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b48:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002b4c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002b4e:	4a1e      	ldr	r2, [pc, #120]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b56:	2200      	movs	r2, #0
 8002b58:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002b5a:	4b1b      	ldr	r3, [pc, #108]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b5c:	2200      	movs	r2, #0
 8002b5e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002b60:	4b19      	ldr	r3, [pc, #100]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b62:	2200      	movs	r2, #0
 8002b64:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002b66:	4818      	ldr	r0, [pc, #96]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b68:	f001 fc2e 	bl	80043c8 <HAL_TIM_Base_Init>
 8002b6c:	4603      	mov	r3, r0
 8002b6e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002b72:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	d11b      	bne.n	8002bb2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002b7a:	4813      	ldr	r0, [pc, #76]	@ (8002bc8 <HAL_InitTick+0xdc>)
 8002b7c:	f001 fc7e 	bl	800447c <HAL_TIM_Base_Start_IT>
 8002b80:	4603      	mov	r3, r0
 8002b82:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8002b86:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d111      	bne.n	8002bb2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002b8e:	2019      	movs	r0, #25
 8002b90:	f000 fa4e 	bl	8003030 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	2b0f      	cmp	r3, #15
 8002b98:	d808      	bhi.n	8002bac <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	6879      	ldr	r1, [r7, #4]
 8002b9e:	2019      	movs	r0, #25
 8002ba0:	f000 fa2a 	bl	8002ff8 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8002ba4:	4a0a      	ldr	r2, [pc, #40]	@ (8002bd0 <HAL_InitTick+0xe4>)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	6013      	str	r3, [r2, #0]
 8002baa:	e002      	b.n	8002bb2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002bac:	2301      	movs	r3, #1
 8002bae:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8002bb2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8002bb6:	4618      	mov	r0, r3
 8002bb8:	3730      	adds	r7, #48	@ 0x30
 8002bba:	46bd      	mov	sp, r7
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023800 	.word	0x40023800
 8002bc4:	431bde83 	.word	0x431bde83
 8002bc8:	20000150 	.word	0x20000150
 8002bcc:	40010000 	.word	0x40010000
 8002bd0:	20000004 	.word	0x20000004

08002bd4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bd4:	b480      	push	{r7}
 8002bd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bd8:	bf00      	nop
 8002bda:	e7fd      	b.n	8002bd8 <NMI_Handler+0x4>

08002bdc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bdc:	b480      	push	{r7}
 8002bde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002be0:	bf00      	nop
 8002be2:	e7fd      	b.n	8002be0 <HardFault_Handler+0x4>

08002be4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002be4:	b480      	push	{r7}
 8002be6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002be8:	bf00      	nop
 8002bea:	e7fd      	b.n	8002be8 <MemManage_Handler+0x4>

08002bec <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bec:	b480      	push	{r7}
 8002bee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bf0:	bf00      	nop
 8002bf2:	e7fd      	b.n	8002bf0 <BusFault_Handler+0x4>

08002bf4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002bf8:	bf00      	nop
 8002bfa:	e7fd      	b.n	8002bf8 <UsageFault_Handler+0x4>

08002bfc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bfc:	b480      	push	{r7}
 8002bfe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c00:	bf00      	nop
 8002c02:	46bd      	mov	sp, r7
 8002c04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c08:	4770      	bx	lr
	...

08002c0c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002c10:	4802      	ldr	r0, [pc, #8]	@ (8002c1c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002c12:	f001 fca3 	bl	800455c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002c16:	bf00      	nop
 8002c18:	bd80      	pop	{r7, pc}
 8002c1a:	bf00      	nop
 8002c1c:	20000150 	.word	0x20000150

08002c20 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002c20:	b580      	push	{r7, lr}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 8002c24:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002c28:	f000 fbc6 	bl	80033b8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  // MCP2515中断处理
  // 注意：这里只是触发中断标志，实际处理在CAN任务中进行
  CAN_App_IRQ_Callback();
 8002c2c:	f7fe f814 	bl	8000c58 <CAN_App_IRQ_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002c30:	bf00      	nop
 8002c32:	bd80      	pop	{r7, pc}

08002c34 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002c34:	b580      	push	{r7, lr}
 8002c36:	b086      	sub	sp, #24
 8002c38:	af00      	add	r7, sp, #0
 8002c3a:	60f8      	str	r0, [r7, #12]
 8002c3c:	60b9      	str	r1, [r7, #8]
 8002c3e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c40:	2300      	movs	r3, #0
 8002c42:	617b      	str	r3, [r7, #20]
 8002c44:	e00a      	b.n	8002c5c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002c46:	f3af 8000 	nop.w
 8002c4a:	4601      	mov	r1, r0
 8002c4c:	68bb      	ldr	r3, [r7, #8]
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	60ba      	str	r2, [r7, #8]
 8002c52:	b2ca      	uxtb	r2, r1
 8002c54:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002c56:	697b      	ldr	r3, [r7, #20]
 8002c58:	3301      	adds	r3, #1
 8002c5a:	617b      	str	r3, [r7, #20]
 8002c5c:	697a      	ldr	r2, [r7, #20]
 8002c5e:	687b      	ldr	r3, [r7, #4]
 8002c60:	429a      	cmp	r2, r3
 8002c62:	dbf0      	blt.n	8002c46 <_read+0x12>
  }

  return len;
 8002c64:	687b      	ldr	r3, [r7, #4]
}
 8002c66:	4618      	mov	r0, r3
 8002c68:	3718      	adds	r7, #24
 8002c6a:	46bd      	mov	sp, r7
 8002c6c:	bd80      	pop	{r7, pc}

08002c6e <_close>:
  }
  return len;
}

int _close(int file)
{
 8002c6e:	b480      	push	{r7}
 8002c70:	b083      	sub	sp, #12
 8002c72:	af00      	add	r7, sp, #0
 8002c74:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002c76:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002c7a:	4618      	mov	r0, r3
 8002c7c:	370c      	adds	r7, #12
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c84:	4770      	bx	lr

08002c86 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002c86:	b480      	push	{r7}
 8002c88:	b083      	sub	sp, #12
 8002c8a:	af00      	add	r7, sp, #0
 8002c8c:	6078      	str	r0, [r7, #4]
 8002c8e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002c90:	683b      	ldr	r3, [r7, #0]
 8002c92:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002c96:	605a      	str	r2, [r3, #4]
  return 0;
 8002c98:	2300      	movs	r3, #0
}
 8002c9a:	4618      	mov	r0, r3
 8002c9c:	370c      	adds	r7, #12
 8002c9e:	46bd      	mov	sp, r7
 8002ca0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca4:	4770      	bx	lr

08002ca6 <_isatty>:

int _isatty(int file)
{
 8002ca6:	b480      	push	{r7}
 8002ca8:	b083      	sub	sp, #12
 8002caa:	af00      	add	r7, sp, #0
 8002cac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002cae:	2301      	movs	r3, #1
}
 8002cb0:	4618      	mov	r0, r3
 8002cb2:	370c      	adds	r7, #12
 8002cb4:	46bd      	mov	sp, r7
 8002cb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cba:	4770      	bx	lr

08002cbc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002cbc:	b480      	push	{r7}
 8002cbe:	b085      	sub	sp, #20
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002cc8:	2300      	movs	r3, #0
}
 8002cca:	4618      	mov	r0, r3
 8002ccc:	3714      	adds	r7, #20
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cd4:	4770      	bx	lr
	...

08002cd8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002cd8:	b580      	push	{r7, lr}
 8002cda:	b086      	sub	sp, #24
 8002cdc:	af00      	add	r7, sp, #0
 8002cde:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002ce0:	4a14      	ldr	r2, [pc, #80]	@ (8002d34 <_sbrk+0x5c>)
 8002ce2:	4b15      	ldr	r3, [pc, #84]	@ (8002d38 <_sbrk+0x60>)
 8002ce4:	1ad3      	subs	r3, r2, r3
 8002ce6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002ce8:	697b      	ldr	r3, [r7, #20]
 8002cea:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002cec:	4b13      	ldr	r3, [pc, #76]	@ (8002d3c <_sbrk+0x64>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d102      	bne.n	8002cfa <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002cf4:	4b11      	ldr	r3, [pc, #68]	@ (8002d3c <_sbrk+0x64>)
 8002cf6:	4a12      	ldr	r2, [pc, #72]	@ (8002d40 <_sbrk+0x68>)
 8002cf8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002cfa:	4b10      	ldr	r3, [pc, #64]	@ (8002d3c <_sbrk+0x64>)
 8002cfc:	681a      	ldr	r2, [r3, #0]
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	4413      	add	r3, r2
 8002d02:	693a      	ldr	r2, [r7, #16]
 8002d04:	429a      	cmp	r2, r3
 8002d06:	d207      	bcs.n	8002d18 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002d08:	f005 fc4c 	bl	80085a4 <__errno>
 8002d0c:	4603      	mov	r3, r0
 8002d0e:	220c      	movs	r2, #12
 8002d10:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002d12:	f04f 33ff 	mov.w	r3, #4294967295
 8002d16:	e009      	b.n	8002d2c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002d18:	4b08      	ldr	r3, [pc, #32]	@ (8002d3c <_sbrk+0x64>)
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002d1e:	4b07      	ldr	r3, [pc, #28]	@ (8002d3c <_sbrk+0x64>)
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	4413      	add	r3, r2
 8002d26:	4a05      	ldr	r2, [pc, #20]	@ (8002d3c <_sbrk+0x64>)
 8002d28:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002d2a:	68fb      	ldr	r3, [r7, #12]
}
 8002d2c:	4618      	mov	r0, r3
 8002d2e:	3718      	adds	r7, #24
 8002d30:	46bd      	mov	sp, r7
 8002d32:	bd80      	pop	{r7, pc}
 8002d34:	20020000 	.word	0x20020000
 8002d38:	00000400 	.word	0x00000400
 8002d3c:	20000198 	.word	0x20000198
 8002d40:	20004cd8 	.word	0x20004cd8

08002d44 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002d44:	b480      	push	{r7}
 8002d46:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002d48:	4b06      	ldr	r3, [pc, #24]	@ (8002d64 <SystemInit+0x20>)
 8002d4a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002d4e:	4a05      	ldr	r2, [pc, #20]	@ (8002d64 <SystemInit+0x20>)
 8002d50:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002d54:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002d58:	bf00      	nop
 8002d5a:	46bd      	mov	sp, r7
 8002d5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d60:	4770      	bx	lr
 8002d62:	bf00      	nop
 8002d64:	e000ed00 	.word	0xe000ed00

08002d68 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002d68:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002da0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002d6c:	f7ff ffea 	bl	8002d44 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002d70:	480c      	ldr	r0, [pc, #48]	@ (8002da4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002d72:	490d      	ldr	r1, [pc, #52]	@ (8002da8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002d74:	4a0d      	ldr	r2, [pc, #52]	@ (8002dac <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002d76:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002d78:	e002      	b.n	8002d80 <LoopCopyDataInit>

08002d7a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002d7a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002d7c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002d7e:	3304      	adds	r3, #4

08002d80 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002d80:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002d82:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002d84:	d3f9      	bcc.n	8002d7a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002d86:	4a0a      	ldr	r2, [pc, #40]	@ (8002db0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002d88:	4c0a      	ldr	r4, [pc, #40]	@ (8002db4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002d8a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002d8c:	e001      	b.n	8002d92 <LoopFillZerobss>

08002d8e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002d8e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002d90:	3204      	adds	r2, #4

08002d92 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002d92:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002d94:	d3fb      	bcc.n	8002d8e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002d96:	f005 fc0b 	bl	80085b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d9a:	f7fd ff65 	bl	8000c68 <main>
  bx  lr    
 8002d9e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002da0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002da4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002da8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002dac:	0800b85c 	.word	0x0800b85c
  ldr r2, =_sbss
 8002db0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 8002db4:	20004cd4 	.word	0x20004cd4

08002db8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002db8:	e7fe      	b.n	8002db8 <ADC_IRQHandler>
	...

08002dbc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002dbc:	b580      	push	{r7, lr}
 8002dbe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002dc0:	4b0e      	ldr	r3, [pc, #56]	@ (8002dfc <HAL_Init+0x40>)
 8002dc2:	681b      	ldr	r3, [r3, #0]
 8002dc4:	4a0d      	ldr	r2, [pc, #52]	@ (8002dfc <HAL_Init+0x40>)
 8002dc6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002dca:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002dcc:	4b0b      	ldr	r3, [pc, #44]	@ (8002dfc <HAL_Init+0x40>)
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <HAL_Init+0x40>)
 8002dd2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002dd6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002dd8:	4b08      	ldr	r3, [pc, #32]	@ (8002dfc <HAL_Init+0x40>)
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	4a07      	ldr	r2, [pc, #28]	@ (8002dfc <HAL_Init+0x40>)
 8002dde:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002de2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002de4:	2003      	movs	r0, #3
 8002de6:	f000 f8fc 	bl	8002fe2 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002dea:	200f      	movs	r0, #15
 8002dec:	f7ff fe7e 	bl	8002aec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002df0:	f7ff fdc0 	bl	8002974 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002df4:	2300      	movs	r3, #0
}
 8002df6:	4618      	mov	r0, r3
 8002df8:	bd80      	pop	{r7, pc}
 8002dfa:	bf00      	nop
 8002dfc:	40023c00 	.word	0x40023c00

08002e00 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002e00:	b480      	push	{r7}
 8002e02:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002e04:	4b06      	ldr	r3, [pc, #24]	@ (8002e20 <HAL_IncTick+0x20>)
 8002e06:	781b      	ldrb	r3, [r3, #0]
 8002e08:	461a      	mov	r2, r3
 8002e0a:	4b06      	ldr	r3, [pc, #24]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e0c:	681b      	ldr	r3, [r3, #0]
 8002e0e:	4413      	add	r3, r2
 8002e10:	4a04      	ldr	r2, [pc, #16]	@ (8002e24 <HAL_IncTick+0x24>)
 8002e12:	6013      	str	r3, [r2, #0]
}
 8002e14:	bf00      	nop
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
 8002e1e:	bf00      	nop
 8002e20:	20000008 	.word	0x20000008
 8002e24:	2000019c 	.word	0x2000019c

08002e28 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002e28:	b480      	push	{r7}
 8002e2a:	af00      	add	r7, sp, #0
  return uwTick;
 8002e2c:	4b03      	ldr	r3, [pc, #12]	@ (8002e3c <HAL_GetTick+0x14>)
 8002e2e:	681b      	ldr	r3, [r3, #0]
}
 8002e30:	4618      	mov	r0, r3
 8002e32:	46bd      	mov	sp, r7
 8002e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e38:	4770      	bx	lr
 8002e3a:	bf00      	nop
 8002e3c:	2000019c 	.word	0x2000019c

08002e40 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002e48:	f7ff ffee 	bl	8002e28 <HAL_GetTick>
 8002e4c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002e52:	68fb      	ldr	r3, [r7, #12]
 8002e54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e58:	d005      	beq.n	8002e66 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002e5a:	4b0a      	ldr	r3, [pc, #40]	@ (8002e84 <HAL_Delay+0x44>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	461a      	mov	r2, r3
 8002e60:	68fb      	ldr	r3, [r7, #12]
 8002e62:	4413      	add	r3, r2
 8002e64:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002e66:	bf00      	nop
 8002e68:	f7ff ffde 	bl	8002e28 <HAL_GetTick>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	68bb      	ldr	r3, [r7, #8]
 8002e70:	1ad3      	subs	r3, r2, r3
 8002e72:	68fa      	ldr	r2, [r7, #12]
 8002e74:	429a      	cmp	r2, r3
 8002e76:	d8f7      	bhi.n	8002e68 <HAL_Delay+0x28>
  {
  }
}
 8002e78:	bf00      	nop
 8002e7a:	bf00      	nop
 8002e7c:	3710      	adds	r7, #16
 8002e7e:	46bd      	mov	sp, r7
 8002e80:	bd80      	pop	{r7, pc}
 8002e82:	bf00      	nop
 8002e84:	20000008 	.word	0x20000008

08002e88 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e88:	b480      	push	{r7}
 8002e8a:	b085      	sub	sp, #20
 8002e8c:	af00      	add	r7, sp, #0
 8002e8e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e98:	4b0c      	ldr	r3, [pc, #48]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002e9a:	68db      	ldr	r3, [r3, #12]
 8002e9c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e9e:	68ba      	ldr	r2, [r7, #8]
 8002ea0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002eac:	68bb      	ldr	r3, [r7, #8]
 8002eae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002eb0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002eb4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002eb8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002eba:	4a04      	ldr	r2, [pc, #16]	@ (8002ecc <__NVIC_SetPriorityGrouping+0x44>)
 8002ebc:	68bb      	ldr	r3, [r7, #8]
 8002ebe:	60d3      	str	r3, [r2, #12]
}
 8002ec0:	bf00      	nop
 8002ec2:	3714      	adds	r7, #20
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eca:	4770      	bx	lr
 8002ecc:	e000ed00 	.word	0xe000ed00

08002ed0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ed4:	4b04      	ldr	r3, [pc, #16]	@ (8002ee8 <__NVIC_GetPriorityGrouping+0x18>)
 8002ed6:	68db      	ldr	r3, [r3, #12]
 8002ed8:	0a1b      	lsrs	r3, r3, #8
 8002eda:	f003 0307 	and.w	r3, r3, #7
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	46bd      	mov	sp, r7
 8002ee2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ee6:	4770      	bx	lr
 8002ee8:	e000ed00 	.word	0xe000ed00

08002eec <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	4603      	mov	r3, r0
 8002ef4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ef6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	db0b      	blt.n	8002f16 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002efe:	79fb      	ldrb	r3, [r7, #7]
 8002f00:	f003 021f 	and.w	r2, r3, #31
 8002f04:	4907      	ldr	r1, [pc, #28]	@ (8002f24 <__NVIC_EnableIRQ+0x38>)
 8002f06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0a:	095b      	lsrs	r3, r3, #5
 8002f0c:	2001      	movs	r0, #1
 8002f0e:	fa00 f202 	lsl.w	r2, r0, r2
 8002f12:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002f16:	bf00      	nop
 8002f18:	370c      	adds	r7, #12
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	e000e100 	.word	0xe000e100

08002f28 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002f28:	b480      	push	{r7}
 8002f2a:	b083      	sub	sp, #12
 8002f2c:	af00      	add	r7, sp, #0
 8002f2e:	4603      	mov	r3, r0
 8002f30:	6039      	str	r1, [r7, #0]
 8002f32:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002f34:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	db0a      	blt.n	8002f52 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f3c:	683b      	ldr	r3, [r7, #0]
 8002f3e:	b2da      	uxtb	r2, r3
 8002f40:	490c      	ldr	r1, [pc, #48]	@ (8002f74 <__NVIC_SetPriority+0x4c>)
 8002f42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f46:	0112      	lsls	r2, r2, #4
 8002f48:	b2d2      	uxtb	r2, r2
 8002f4a:	440b      	add	r3, r1
 8002f4c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f50:	e00a      	b.n	8002f68 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f52:	683b      	ldr	r3, [r7, #0]
 8002f54:	b2da      	uxtb	r2, r3
 8002f56:	4908      	ldr	r1, [pc, #32]	@ (8002f78 <__NVIC_SetPriority+0x50>)
 8002f58:	79fb      	ldrb	r3, [r7, #7]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	3b04      	subs	r3, #4
 8002f60:	0112      	lsls	r2, r2, #4
 8002f62:	b2d2      	uxtb	r2, r2
 8002f64:	440b      	add	r3, r1
 8002f66:	761a      	strb	r2, [r3, #24]
}
 8002f68:	bf00      	nop
 8002f6a:	370c      	adds	r7, #12
 8002f6c:	46bd      	mov	sp, r7
 8002f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f72:	4770      	bx	lr
 8002f74:	e000e100 	.word	0xe000e100
 8002f78:	e000ed00 	.word	0xe000ed00

08002f7c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f7c:	b480      	push	{r7}
 8002f7e:	b089      	sub	sp, #36	@ 0x24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	60f8      	str	r0, [r7, #12]
 8002f84:	60b9      	str	r1, [r7, #8]
 8002f86:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	f003 0307 	and.w	r3, r3, #7
 8002f8e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f90:	69fb      	ldr	r3, [r7, #28]
 8002f92:	f1c3 0307 	rsb	r3, r3, #7
 8002f96:	2b04      	cmp	r3, #4
 8002f98:	bf28      	it	cs
 8002f9a:	2304      	movcs	r3, #4
 8002f9c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f9e:	69fb      	ldr	r3, [r7, #28]
 8002fa0:	3304      	adds	r3, #4
 8002fa2:	2b06      	cmp	r3, #6
 8002fa4:	d902      	bls.n	8002fac <NVIC_EncodePriority+0x30>
 8002fa6:	69fb      	ldr	r3, [r7, #28]
 8002fa8:	3b03      	subs	r3, #3
 8002faa:	e000      	b.n	8002fae <NVIC_EncodePriority+0x32>
 8002fac:	2300      	movs	r3, #0
 8002fae:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fb0:	f04f 32ff 	mov.w	r2, #4294967295
 8002fb4:	69bb      	ldr	r3, [r7, #24]
 8002fb6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fba:	43da      	mvns	r2, r3
 8002fbc:	68bb      	ldr	r3, [r7, #8]
 8002fbe:	401a      	ands	r2, r3
 8002fc0:	697b      	ldr	r3, [r7, #20]
 8002fc2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002fc4:	f04f 31ff 	mov.w	r1, #4294967295
 8002fc8:	697b      	ldr	r3, [r7, #20]
 8002fca:	fa01 f303 	lsl.w	r3, r1, r3
 8002fce:	43d9      	mvns	r1, r3
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002fd4:	4313      	orrs	r3, r2
         );
}
 8002fd6:	4618      	mov	r0, r3
 8002fd8:	3724      	adds	r7, #36	@ 0x24
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fe0:	4770      	bx	lr

08002fe2 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002fe2:	b580      	push	{r7, lr}
 8002fe4:	b082      	sub	sp, #8
 8002fe6:	af00      	add	r7, sp, #0
 8002fe8:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002fea:	6878      	ldr	r0, [r7, #4]
 8002fec:	f7ff ff4c 	bl	8002e88 <__NVIC_SetPriorityGrouping>
}
 8002ff0:	bf00      	nop
 8002ff2:	3708      	adds	r7, #8
 8002ff4:	46bd      	mov	sp, r7
 8002ff6:	bd80      	pop	{r7, pc}

08002ff8 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ff8:	b580      	push	{r7, lr}
 8002ffa:	b086      	sub	sp, #24
 8002ffc:	af00      	add	r7, sp, #0
 8002ffe:	4603      	mov	r3, r0
 8003000:	60b9      	str	r1, [r7, #8]
 8003002:	607a      	str	r2, [r7, #4]
 8003004:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003006:	2300      	movs	r3, #0
 8003008:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800300a:	f7ff ff61 	bl	8002ed0 <__NVIC_GetPriorityGrouping>
 800300e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003010:	687a      	ldr	r2, [r7, #4]
 8003012:	68b9      	ldr	r1, [r7, #8]
 8003014:	6978      	ldr	r0, [r7, #20]
 8003016:	f7ff ffb1 	bl	8002f7c <NVIC_EncodePriority>
 800301a:	4602      	mov	r2, r0
 800301c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003020:	4611      	mov	r1, r2
 8003022:	4618      	mov	r0, r3
 8003024:	f7ff ff80 	bl	8002f28 <__NVIC_SetPriority>
}
 8003028:	bf00      	nop
 800302a:	3718      	adds	r7, #24
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}

08003030 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003030:	b580      	push	{r7, lr}
 8003032:	b082      	sub	sp, #8
 8003034:	af00      	add	r7, sp, #0
 8003036:	4603      	mov	r3, r0
 8003038:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800303a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800303e:	4618      	mov	r0, r3
 8003040:	f7ff ff54 	bl	8002eec <__NVIC_EnableIRQ>
}
 8003044:	bf00      	nop
 8003046:	3708      	adds	r7, #8
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800304c:	b480      	push	{r7}
 800304e:	b089      	sub	sp, #36	@ 0x24
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
 8003054:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003056:	2300      	movs	r3, #0
 8003058:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800305a:	2300      	movs	r3, #0
 800305c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800305e:	2300      	movs	r3, #0
 8003060:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003062:	2300      	movs	r3, #0
 8003064:	61fb      	str	r3, [r7, #28]
 8003066:	e16b      	b.n	8003340 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003068:	2201      	movs	r2, #1
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	fa02 f303 	lsl.w	r3, r2, r3
 8003070:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003072:	683b      	ldr	r3, [r7, #0]
 8003074:	681b      	ldr	r3, [r3, #0]
 8003076:	697a      	ldr	r2, [r7, #20]
 8003078:	4013      	ands	r3, r2
 800307a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800307c:	693a      	ldr	r2, [r7, #16]
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	429a      	cmp	r2, r3
 8003082:	f040 815a 	bne.w	800333a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003086:	683b      	ldr	r3, [r7, #0]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	f003 0303 	and.w	r3, r3, #3
 800308e:	2b01      	cmp	r3, #1
 8003090:	d005      	beq.n	800309e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	685b      	ldr	r3, [r3, #4]
 8003096:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800309a:	2b02      	cmp	r3, #2
 800309c:	d130      	bne.n	8003100 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	689b      	ldr	r3, [r3, #8]
 80030a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80030a4:	69fb      	ldr	r3, [r7, #28]
 80030a6:	005b      	lsls	r3, r3, #1
 80030a8:	2203      	movs	r2, #3
 80030aa:	fa02 f303 	lsl.w	r3, r2, r3
 80030ae:	43db      	mvns	r3, r3
 80030b0:	69ba      	ldr	r2, [r7, #24]
 80030b2:	4013      	ands	r3, r2
 80030b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80030b6:	683b      	ldr	r3, [r7, #0]
 80030b8:	68da      	ldr	r2, [r3, #12]
 80030ba:	69fb      	ldr	r3, [r7, #28]
 80030bc:	005b      	lsls	r3, r3, #1
 80030be:	fa02 f303 	lsl.w	r3, r2, r3
 80030c2:	69ba      	ldr	r2, [r7, #24]
 80030c4:	4313      	orrs	r3, r2
 80030c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	69ba      	ldr	r2, [r7, #24]
 80030cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80030d4:	2201      	movs	r2, #1
 80030d6:	69fb      	ldr	r3, [r7, #28]
 80030d8:	fa02 f303 	lsl.w	r3, r2, r3
 80030dc:	43db      	mvns	r3, r3
 80030de:	69ba      	ldr	r2, [r7, #24]
 80030e0:	4013      	ands	r3, r2
 80030e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80030e4:	683b      	ldr	r3, [r7, #0]
 80030e6:	685b      	ldr	r3, [r3, #4]
 80030e8:	091b      	lsrs	r3, r3, #4
 80030ea:	f003 0201 	and.w	r2, r3, #1
 80030ee:	69fb      	ldr	r3, [r7, #28]
 80030f0:	fa02 f303 	lsl.w	r3, r2, r3
 80030f4:	69ba      	ldr	r2, [r7, #24]
 80030f6:	4313      	orrs	r3, r2
 80030f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	69ba      	ldr	r2, [r7, #24]
 80030fe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003100:	683b      	ldr	r3, [r7, #0]
 8003102:	685b      	ldr	r3, [r3, #4]
 8003104:	f003 0303 	and.w	r3, r3, #3
 8003108:	2b03      	cmp	r3, #3
 800310a:	d017      	beq.n	800313c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800310c:	687b      	ldr	r3, [r7, #4]
 800310e:	68db      	ldr	r3, [r3, #12]
 8003110:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003112:	69fb      	ldr	r3, [r7, #28]
 8003114:	005b      	lsls	r3, r3, #1
 8003116:	2203      	movs	r2, #3
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	69ba      	ldr	r2, [r7, #24]
 8003120:	4013      	ands	r3, r2
 8003122:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	689a      	ldr	r2, [r3, #8]
 8003128:	69fb      	ldr	r3, [r7, #28]
 800312a:	005b      	lsls	r3, r3, #1
 800312c:	fa02 f303 	lsl.w	r3, r2, r3
 8003130:	69ba      	ldr	r2, [r7, #24]
 8003132:	4313      	orrs	r3, r2
 8003134:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	69ba      	ldr	r2, [r7, #24]
 800313a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313c:	683b      	ldr	r3, [r7, #0]
 800313e:	685b      	ldr	r3, [r3, #4]
 8003140:	f003 0303 	and.w	r3, r3, #3
 8003144:	2b02      	cmp	r3, #2
 8003146:	d123      	bne.n	8003190 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	08da      	lsrs	r2, r3, #3
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	3208      	adds	r2, #8
 8003150:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003154:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003156:	69fb      	ldr	r3, [r7, #28]
 8003158:	f003 0307 	and.w	r3, r3, #7
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4013      	ands	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800316c:	683b      	ldr	r3, [r7, #0]
 800316e:	691a      	ldr	r2, [r3, #16]
 8003170:	69fb      	ldr	r3, [r7, #28]
 8003172:	f003 0307 	and.w	r3, r3, #7
 8003176:	009b      	lsls	r3, r3, #2
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	69ba      	ldr	r2, [r7, #24]
 800317e:	4313      	orrs	r3, r2
 8003180:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	08da      	lsrs	r2, r3, #3
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	3208      	adds	r2, #8
 800318a:	69b9      	ldr	r1, [r7, #24]
 800318c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	681b      	ldr	r3, [r3, #0]
 8003194:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003196:	69fb      	ldr	r3, [r7, #28]
 8003198:	005b      	lsls	r3, r3, #1
 800319a:	2203      	movs	r2, #3
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f003 0203 	and.w	r2, r3, #3
 80031b0:	69fb      	ldr	r3, [r7, #28]
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	fa02 f303 	lsl.w	r3, r2, r3
 80031b8:	69ba      	ldr	r2, [r7, #24]
 80031ba:	4313      	orrs	r3, r2
 80031bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80031be:	687b      	ldr	r3, [r7, #4]
 80031c0:	69ba      	ldr	r2, [r7, #24]
 80031c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	f000 80b4 	beq.w	800333a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80031d2:	2300      	movs	r3, #0
 80031d4:	60fb      	str	r3, [r7, #12]
 80031d6:	4b60      	ldr	r3, [pc, #384]	@ (8003358 <HAL_GPIO_Init+0x30c>)
 80031d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031da:	4a5f      	ldr	r2, [pc, #380]	@ (8003358 <HAL_GPIO_Init+0x30c>)
 80031dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80031e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80031e2:	4b5d      	ldr	r3, [pc, #372]	@ (8003358 <HAL_GPIO_Init+0x30c>)
 80031e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80031e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80031ea:	60fb      	str	r3, [r7, #12]
 80031ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80031ee:	4a5b      	ldr	r2, [pc, #364]	@ (800335c <HAL_GPIO_Init+0x310>)
 80031f0:	69fb      	ldr	r3, [r7, #28]
 80031f2:	089b      	lsrs	r3, r3, #2
 80031f4:	3302      	adds	r3, #2
 80031f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80031fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80031fc:	69fb      	ldr	r3, [r7, #28]
 80031fe:	f003 0303 	and.w	r3, r3, #3
 8003202:	009b      	lsls	r3, r3, #2
 8003204:	220f      	movs	r2, #15
 8003206:	fa02 f303 	lsl.w	r3, r2, r3
 800320a:	43db      	mvns	r3, r3
 800320c:	69ba      	ldr	r2, [r7, #24]
 800320e:	4013      	ands	r3, r2
 8003210:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	4a52      	ldr	r2, [pc, #328]	@ (8003360 <HAL_GPIO_Init+0x314>)
 8003216:	4293      	cmp	r3, r2
 8003218:	d02b      	beq.n	8003272 <HAL_GPIO_Init+0x226>
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	4a51      	ldr	r2, [pc, #324]	@ (8003364 <HAL_GPIO_Init+0x318>)
 800321e:	4293      	cmp	r3, r2
 8003220:	d025      	beq.n	800326e <HAL_GPIO_Init+0x222>
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	4a50      	ldr	r2, [pc, #320]	@ (8003368 <HAL_GPIO_Init+0x31c>)
 8003226:	4293      	cmp	r3, r2
 8003228:	d01f      	beq.n	800326a <HAL_GPIO_Init+0x21e>
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	4a4f      	ldr	r2, [pc, #316]	@ (800336c <HAL_GPIO_Init+0x320>)
 800322e:	4293      	cmp	r3, r2
 8003230:	d019      	beq.n	8003266 <HAL_GPIO_Init+0x21a>
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	4a4e      	ldr	r2, [pc, #312]	@ (8003370 <HAL_GPIO_Init+0x324>)
 8003236:	4293      	cmp	r3, r2
 8003238:	d013      	beq.n	8003262 <HAL_GPIO_Init+0x216>
 800323a:	687b      	ldr	r3, [r7, #4]
 800323c:	4a4d      	ldr	r2, [pc, #308]	@ (8003374 <HAL_GPIO_Init+0x328>)
 800323e:	4293      	cmp	r3, r2
 8003240:	d00d      	beq.n	800325e <HAL_GPIO_Init+0x212>
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	4a4c      	ldr	r2, [pc, #304]	@ (8003378 <HAL_GPIO_Init+0x32c>)
 8003246:	4293      	cmp	r3, r2
 8003248:	d007      	beq.n	800325a <HAL_GPIO_Init+0x20e>
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	4a4b      	ldr	r2, [pc, #300]	@ (800337c <HAL_GPIO_Init+0x330>)
 800324e:	4293      	cmp	r3, r2
 8003250:	d101      	bne.n	8003256 <HAL_GPIO_Init+0x20a>
 8003252:	2307      	movs	r3, #7
 8003254:	e00e      	b.n	8003274 <HAL_GPIO_Init+0x228>
 8003256:	2308      	movs	r3, #8
 8003258:	e00c      	b.n	8003274 <HAL_GPIO_Init+0x228>
 800325a:	2306      	movs	r3, #6
 800325c:	e00a      	b.n	8003274 <HAL_GPIO_Init+0x228>
 800325e:	2305      	movs	r3, #5
 8003260:	e008      	b.n	8003274 <HAL_GPIO_Init+0x228>
 8003262:	2304      	movs	r3, #4
 8003264:	e006      	b.n	8003274 <HAL_GPIO_Init+0x228>
 8003266:	2303      	movs	r3, #3
 8003268:	e004      	b.n	8003274 <HAL_GPIO_Init+0x228>
 800326a:	2302      	movs	r3, #2
 800326c:	e002      	b.n	8003274 <HAL_GPIO_Init+0x228>
 800326e:	2301      	movs	r3, #1
 8003270:	e000      	b.n	8003274 <HAL_GPIO_Init+0x228>
 8003272:	2300      	movs	r3, #0
 8003274:	69fa      	ldr	r2, [r7, #28]
 8003276:	f002 0203 	and.w	r2, r2, #3
 800327a:	0092      	lsls	r2, r2, #2
 800327c:	4093      	lsls	r3, r2
 800327e:	69ba      	ldr	r2, [r7, #24]
 8003280:	4313      	orrs	r3, r2
 8003282:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003284:	4935      	ldr	r1, [pc, #212]	@ (800335c <HAL_GPIO_Init+0x310>)
 8003286:	69fb      	ldr	r3, [r7, #28]
 8003288:	089b      	lsrs	r3, r3, #2
 800328a:	3302      	adds	r3, #2
 800328c:	69ba      	ldr	r2, [r7, #24]
 800328e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003292:	4b3b      	ldr	r3, [pc, #236]	@ (8003380 <HAL_GPIO_Init+0x334>)
 8003294:	689b      	ldr	r3, [r3, #8]
 8003296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003298:	693b      	ldr	r3, [r7, #16]
 800329a:	43db      	mvns	r3, r3
 800329c:	69ba      	ldr	r2, [r7, #24]
 800329e:	4013      	ands	r3, r2
 80032a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	685b      	ldr	r3, [r3, #4]
 80032a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d003      	beq.n	80032b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80032ae:	69ba      	ldr	r2, [r7, #24]
 80032b0:	693b      	ldr	r3, [r7, #16]
 80032b2:	4313      	orrs	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80032b6:	4a32      	ldr	r2, [pc, #200]	@ (8003380 <HAL_GPIO_Init+0x334>)
 80032b8:	69bb      	ldr	r3, [r7, #24]
 80032ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80032bc:	4b30      	ldr	r3, [pc, #192]	@ (8003380 <HAL_GPIO_Init+0x334>)
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032c2:	693b      	ldr	r3, [r7, #16]
 80032c4:	43db      	mvns	r3, r3
 80032c6:	69ba      	ldr	r2, [r7, #24]
 80032c8:	4013      	ands	r3, r2
 80032ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80032cc:	683b      	ldr	r3, [r7, #0]
 80032ce:	685b      	ldr	r3, [r3, #4]
 80032d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80032d4:	2b00      	cmp	r3, #0
 80032d6:	d003      	beq.n	80032e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80032d8:	69ba      	ldr	r2, [r7, #24]
 80032da:	693b      	ldr	r3, [r7, #16]
 80032dc:	4313      	orrs	r3, r2
 80032de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80032e0:	4a27      	ldr	r2, [pc, #156]	@ (8003380 <HAL_GPIO_Init+0x334>)
 80032e2:	69bb      	ldr	r3, [r7, #24]
 80032e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80032e6:	4b26      	ldr	r3, [pc, #152]	@ (8003380 <HAL_GPIO_Init+0x334>)
 80032e8:	685b      	ldr	r3, [r3, #4]
 80032ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80032ec:	693b      	ldr	r3, [r7, #16]
 80032ee:	43db      	mvns	r3, r3
 80032f0:	69ba      	ldr	r2, [r7, #24]
 80032f2:	4013      	ands	r3, r2
 80032f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80032f6:	683b      	ldr	r3, [r7, #0]
 80032f8:	685b      	ldr	r3, [r3, #4]
 80032fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d003      	beq.n	800330a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8003302:	69ba      	ldr	r2, [r7, #24]
 8003304:	693b      	ldr	r3, [r7, #16]
 8003306:	4313      	orrs	r3, r2
 8003308:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800330a:	4a1d      	ldr	r2, [pc, #116]	@ (8003380 <HAL_GPIO_Init+0x334>)
 800330c:	69bb      	ldr	r3, [r7, #24]
 800330e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003310:	4b1b      	ldr	r3, [pc, #108]	@ (8003380 <HAL_GPIO_Init+0x334>)
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	43db      	mvns	r3, r3
 800331a:	69ba      	ldr	r2, [r7, #24]
 800331c:	4013      	ands	r3, r2
 800331e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003320:	683b      	ldr	r3, [r7, #0]
 8003322:	685b      	ldr	r3, [r3, #4]
 8003324:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d003      	beq.n	8003334 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800332c:	69ba      	ldr	r2, [r7, #24]
 800332e:	693b      	ldr	r3, [r7, #16]
 8003330:	4313      	orrs	r3, r2
 8003332:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003334:	4a12      	ldr	r2, [pc, #72]	@ (8003380 <HAL_GPIO_Init+0x334>)
 8003336:	69bb      	ldr	r3, [r7, #24]
 8003338:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800333a:	69fb      	ldr	r3, [r7, #28]
 800333c:	3301      	adds	r3, #1
 800333e:	61fb      	str	r3, [r7, #28]
 8003340:	69fb      	ldr	r3, [r7, #28]
 8003342:	2b0f      	cmp	r3, #15
 8003344:	f67f ae90 	bls.w	8003068 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003348:	bf00      	nop
 800334a:	bf00      	nop
 800334c:	3724      	adds	r7, #36	@ 0x24
 800334e:	46bd      	mov	sp, r7
 8003350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003354:	4770      	bx	lr
 8003356:	bf00      	nop
 8003358:	40023800 	.word	0x40023800
 800335c:	40013800 	.word	0x40013800
 8003360:	40020000 	.word	0x40020000
 8003364:	40020400 	.word	0x40020400
 8003368:	40020800 	.word	0x40020800
 800336c:	40020c00 	.word	0x40020c00
 8003370:	40021000 	.word	0x40021000
 8003374:	40021400 	.word	0x40021400
 8003378:	40021800 	.word	0x40021800
 800337c:	40021c00 	.word	0x40021c00
 8003380:	40013c00 	.word	0x40013c00

08003384 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003384:	b480      	push	{r7}
 8003386:	b083      	sub	sp, #12
 8003388:	af00      	add	r7, sp, #0
 800338a:	6078      	str	r0, [r7, #4]
 800338c:	460b      	mov	r3, r1
 800338e:	807b      	strh	r3, [r7, #2]
 8003390:	4613      	mov	r3, r2
 8003392:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003394:	787b      	ldrb	r3, [r7, #1]
 8003396:	2b00      	cmp	r3, #0
 8003398:	d003      	beq.n	80033a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800339a:	887a      	ldrh	r2, [r7, #2]
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80033a0:	e003      	b.n	80033aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80033a2:	887b      	ldrh	r3, [r7, #2]
 80033a4:	041a      	lsls	r2, r3, #16
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	619a      	str	r2, [r3, #24]
}
 80033aa:	bf00      	nop
 80033ac:	370c      	adds	r7, #12
 80033ae:	46bd      	mov	sp, r7
 80033b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033b4:	4770      	bx	lr
	...

080033b8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b082      	sub	sp, #8
 80033bc:	af00      	add	r7, sp, #0
 80033be:	4603      	mov	r3, r0
 80033c0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80033c2:	4b08      	ldr	r3, [pc, #32]	@ (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033c4:	695a      	ldr	r2, [r3, #20]
 80033c6:	88fb      	ldrh	r3, [r7, #6]
 80033c8:	4013      	ands	r3, r2
 80033ca:	2b00      	cmp	r3, #0
 80033cc:	d006      	beq.n	80033dc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80033ce:	4a05      	ldr	r2, [pc, #20]	@ (80033e4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80033d0:	88fb      	ldrh	r3, [r7, #6]
 80033d2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80033d4:	88fb      	ldrh	r3, [r7, #6]
 80033d6:	4618      	mov	r0, r3
 80033d8:	f000 f806 	bl	80033e8 <HAL_GPIO_EXTI_Callback>
  }
}
 80033dc:	bf00      	nop
 80033de:	3708      	adds	r7, #8
 80033e0:	46bd      	mov	sp, r7
 80033e2:	bd80      	pop	{r7, pc}
 80033e4:	40013c00 	.word	0x40013c00

080033e8 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 80033e8:	b480      	push	{r7}
 80033ea:	b083      	sub	sp, #12
 80033ec:	af00      	add	r7, sp, #0
 80033ee:	4603      	mov	r3, r0
 80033f0:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 80033f2:	bf00      	nop
 80033f4:	370c      	adds	r7, #12
 80033f6:	46bd      	mov	sp, r7
 80033f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033fc:	4770      	bx	lr
	...

08003400 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003400:	b580      	push	{r7, lr}
 8003402:	b086      	sub	sp, #24
 8003404:	af00      	add	r7, sp, #0
 8003406:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d101      	bne.n	8003412 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800340e:	2301      	movs	r3, #1
 8003410:	e267      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0301 	and.w	r3, r3, #1
 800341a:	2b00      	cmp	r3, #0
 800341c:	d075      	beq.n	800350a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800341e:	4b88      	ldr	r3, [pc, #544]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 030c 	and.w	r3, r3, #12
 8003426:	2b04      	cmp	r3, #4
 8003428:	d00c      	beq.n	8003444 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800342a:	4b85      	ldr	r3, [pc, #532]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800342c:	689b      	ldr	r3, [r3, #8]
 800342e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003432:	2b08      	cmp	r3, #8
 8003434:	d112      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003436:	4b82      	ldr	r3, [pc, #520]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003438:	685b      	ldr	r3, [r3, #4]
 800343a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800343e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003442:	d10b      	bne.n	800345c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	4b7e      	ldr	r3, [pc, #504]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800344c:	2b00      	cmp	r3, #0
 800344e:	d05b      	beq.n	8003508 <HAL_RCC_OscConfig+0x108>
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	685b      	ldr	r3, [r3, #4]
 8003454:	2b00      	cmp	r3, #0
 8003456:	d157      	bne.n	8003508 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003458:	2301      	movs	r3, #1
 800345a:	e242      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	685b      	ldr	r3, [r3, #4]
 8003460:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003464:	d106      	bne.n	8003474 <HAL_RCC_OscConfig+0x74>
 8003466:	4b76      	ldr	r3, [pc, #472]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	4a75      	ldr	r2, [pc, #468]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800346c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003470:	6013      	str	r3, [r2, #0]
 8003472:	e01d      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003474:	687b      	ldr	r3, [r7, #4]
 8003476:	685b      	ldr	r3, [r3, #4]
 8003478:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800347c:	d10c      	bne.n	8003498 <HAL_RCC_OscConfig+0x98>
 800347e:	4b70      	ldr	r3, [pc, #448]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4a6f      	ldr	r2, [pc, #444]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003484:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003488:	6013      	str	r3, [r2, #0]
 800348a:	4b6d      	ldr	r3, [pc, #436]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	4a6c      	ldr	r2, [pc, #432]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003490:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003494:	6013      	str	r3, [r2, #0]
 8003496:	e00b      	b.n	80034b0 <HAL_RCC_OscConfig+0xb0>
 8003498:	4b69      	ldr	r3, [pc, #420]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800349a:	681b      	ldr	r3, [r3, #0]
 800349c:	4a68      	ldr	r2, [pc, #416]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800349e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034a2:	6013      	str	r3, [r2, #0]
 80034a4:	4b66      	ldr	r3, [pc, #408]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4a65      	ldr	r2, [pc, #404]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80034aa:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	685b      	ldr	r3, [r3, #4]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d013      	beq.n	80034e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b8:	f7ff fcb6 	bl	8002e28 <HAL_GetTick>
 80034bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034be:	e008      	b.n	80034d2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034c0:	f7ff fcb2 	bl	8002e28 <HAL_GetTick>
 80034c4:	4602      	mov	r2, r0
 80034c6:	693b      	ldr	r3, [r7, #16]
 80034c8:	1ad3      	subs	r3, r2, r3
 80034ca:	2b64      	cmp	r3, #100	@ 0x64
 80034cc:	d901      	bls.n	80034d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034ce:	2303      	movs	r3, #3
 80034d0:	e207      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034d2:	4b5b      	ldr	r3, [pc, #364]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d0f0      	beq.n	80034c0 <HAL_RCC_OscConfig+0xc0>
 80034de:	e014      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e0:	f7ff fca2 	bl	8002e28 <HAL_GetTick>
 80034e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034e6:	e008      	b.n	80034fa <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034e8:	f7ff fc9e 	bl	8002e28 <HAL_GetTick>
 80034ec:	4602      	mov	r2, r0
 80034ee:	693b      	ldr	r3, [r7, #16]
 80034f0:	1ad3      	subs	r3, r2, r3
 80034f2:	2b64      	cmp	r3, #100	@ 0x64
 80034f4:	d901      	bls.n	80034fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80034f6:	2303      	movs	r3, #3
 80034f8:	e1f3      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80034fa:	4b51      	ldr	r3, [pc, #324]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003502:	2b00      	cmp	r3, #0
 8003504:	d1f0      	bne.n	80034e8 <HAL_RCC_OscConfig+0xe8>
 8003506:	e000      	b.n	800350a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003508:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	681b      	ldr	r3, [r3, #0]
 800350e:	f003 0302 	and.w	r3, r3, #2
 8003512:	2b00      	cmp	r3, #0
 8003514:	d063      	beq.n	80035de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003516:	4b4a      	ldr	r3, [pc, #296]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003518:	689b      	ldr	r3, [r3, #8]
 800351a:	f003 030c 	and.w	r3, r3, #12
 800351e:	2b00      	cmp	r3, #0
 8003520:	d00b      	beq.n	800353a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003522:	4b47      	ldr	r3, [pc, #284]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800352a:	2b08      	cmp	r3, #8
 800352c:	d11c      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800352e:	4b44      	ldr	r3, [pc, #272]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003530:	685b      	ldr	r3, [r3, #4]
 8003532:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800353a:	4b41      	ldr	r3, [pc, #260]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d005      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68db      	ldr	r3, [r3, #12]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d001      	beq.n	8003552 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800354e:	2301      	movs	r3, #1
 8003550:	e1c7      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003552:	4b3b      	ldr	r3, [pc, #236]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	691b      	ldr	r3, [r3, #16]
 800355e:	00db      	lsls	r3, r3, #3
 8003560:	4937      	ldr	r1, [pc, #220]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003562:	4313      	orrs	r3, r2
 8003564:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003566:	e03a      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	68db      	ldr	r3, [r3, #12]
 800356c:	2b00      	cmp	r3, #0
 800356e:	d020      	beq.n	80035b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003570:	4b34      	ldr	r3, [pc, #208]	@ (8003644 <HAL_RCC_OscConfig+0x244>)
 8003572:	2201      	movs	r2, #1
 8003574:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003576:	f7ff fc57 	bl	8002e28 <HAL_GetTick>
 800357a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800357c:	e008      	b.n	8003590 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800357e:	f7ff fc53 	bl	8002e28 <HAL_GetTick>
 8003582:	4602      	mov	r2, r0
 8003584:	693b      	ldr	r3, [r7, #16]
 8003586:	1ad3      	subs	r3, r2, r3
 8003588:	2b02      	cmp	r3, #2
 800358a:	d901      	bls.n	8003590 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800358c:	2303      	movs	r3, #3
 800358e:	e1a8      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003590:	4b2b      	ldr	r3, [pc, #172]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003592:	681b      	ldr	r3, [r3, #0]
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d0f0      	beq.n	800357e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800359c:	4b28      	ldr	r3, [pc, #160]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	691b      	ldr	r3, [r3, #16]
 80035a8:	00db      	lsls	r3, r3, #3
 80035aa:	4925      	ldr	r1, [pc, #148]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80035ac:	4313      	orrs	r3, r2
 80035ae:	600b      	str	r3, [r1, #0]
 80035b0:	e015      	b.n	80035de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035b2:	4b24      	ldr	r3, [pc, #144]	@ (8003644 <HAL_RCC_OscConfig+0x244>)
 80035b4:	2200      	movs	r2, #0
 80035b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035b8:	f7ff fc36 	bl	8002e28 <HAL_GetTick>
 80035bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035be:	e008      	b.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035c0:	f7ff fc32 	bl	8002e28 <HAL_GetTick>
 80035c4:	4602      	mov	r2, r0
 80035c6:	693b      	ldr	r3, [r7, #16]
 80035c8:	1ad3      	subs	r3, r2, r3
 80035ca:	2b02      	cmp	r3, #2
 80035cc:	d901      	bls.n	80035d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035ce:	2303      	movs	r3, #3
 80035d0:	e187      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035d2:	4b1b      	ldr	r3, [pc, #108]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d1f0      	bne.n	80035c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	f003 0308 	and.w	r3, r3, #8
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d036      	beq.n	8003658 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	695b      	ldr	r3, [r3, #20]
 80035ee:	2b00      	cmp	r3, #0
 80035f0:	d016      	beq.n	8003620 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035f2:	4b15      	ldr	r3, [pc, #84]	@ (8003648 <HAL_RCC_OscConfig+0x248>)
 80035f4:	2201      	movs	r2, #1
 80035f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035f8:	f7ff fc16 	bl	8002e28 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003600:	f7ff fc12 	bl	8002e28 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e167      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003612:	4b0b      	ldr	r3, [pc, #44]	@ (8003640 <HAL_RCC_OscConfig+0x240>)
 8003614:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003616:	f003 0302 	and.w	r3, r3, #2
 800361a:	2b00      	cmp	r3, #0
 800361c:	d0f0      	beq.n	8003600 <HAL_RCC_OscConfig+0x200>
 800361e:	e01b      	b.n	8003658 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003620:	4b09      	ldr	r3, [pc, #36]	@ (8003648 <HAL_RCC_OscConfig+0x248>)
 8003622:	2200      	movs	r2, #0
 8003624:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003626:	f7ff fbff 	bl	8002e28 <HAL_GetTick>
 800362a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800362c:	e00e      	b.n	800364c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800362e:	f7ff fbfb 	bl	8002e28 <HAL_GetTick>
 8003632:	4602      	mov	r2, r0
 8003634:	693b      	ldr	r3, [r7, #16]
 8003636:	1ad3      	subs	r3, r2, r3
 8003638:	2b02      	cmp	r3, #2
 800363a:	d907      	bls.n	800364c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800363c:	2303      	movs	r3, #3
 800363e:	e150      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003640:	40023800 	.word	0x40023800
 8003644:	42470000 	.word	0x42470000
 8003648:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800364c:	4b88      	ldr	r3, [pc, #544]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800364e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003650:	f003 0302 	and.w	r3, r3, #2
 8003654:	2b00      	cmp	r3, #0
 8003656:	d1ea      	bne.n	800362e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 0304 	and.w	r3, r3, #4
 8003660:	2b00      	cmp	r3, #0
 8003662:	f000 8097 	beq.w	8003794 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003666:	2300      	movs	r3, #0
 8003668:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800366a:	4b81      	ldr	r3, [pc, #516]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800366c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800366e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003672:	2b00      	cmp	r3, #0
 8003674:	d10f      	bne.n	8003696 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003676:	2300      	movs	r3, #0
 8003678:	60bb      	str	r3, [r7, #8]
 800367a:	4b7d      	ldr	r3, [pc, #500]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800367c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800367e:	4a7c      	ldr	r2, [pc, #496]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003680:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003684:	6413      	str	r3, [r2, #64]	@ 0x40
 8003686:	4b7a      	ldr	r3, [pc, #488]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003688:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800368a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800368e:	60bb      	str	r3, [r7, #8]
 8003690:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003692:	2301      	movs	r3, #1
 8003694:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003696:	4b77      	ldr	r3, [pc, #476]	@ (8003874 <HAL_RCC_OscConfig+0x474>)
 8003698:	681b      	ldr	r3, [r3, #0]
 800369a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800369e:	2b00      	cmp	r3, #0
 80036a0:	d118      	bne.n	80036d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036a2:	4b74      	ldr	r3, [pc, #464]	@ (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a4:	681b      	ldr	r3, [r3, #0]
 80036a6:	4a73      	ldr	r2, [pc, #460]	@ (8003874 <HAL_RCC_OscConfig+0x474>)
 80036a8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036ae:	f7ff fbbb 	bl	8002e28 <HAL_GetTick>
 80036b2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036b4:	e008      	b.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036b6:	f7ff fbb7 	bl	8002e28 <HAL_GetTick>
 80036ba:	4602      	mov	r2, r0
 80036bc:	693b      	ldr	r3, [r7, #16]
 80036be:	1ad3      	subs	r3, r2, r3
 80036c0:	2b02      	cmp	r3, #2
 80036c2:	d901      	bls.n	80036c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e10c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c8:	4b6a      	ldr	r3, [pc, #424]	@ (8003874 <HAL_RCC_OscConfig+0x474>)
 80036ca:	681b      	ldr	r3, [r3, #0]
 80036cc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036d0:	2b00      	cmp	r3, #0
 80036d2:	d0f0      	beq.n	80036b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	689b      	ldr	r3, [r3, #8]
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d106      	bne.n	80036ea <HAL_RCC_OscConfig+0x2ea>
 80036dc:	4b64      	ldr	r3, [pc, #400]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80036de:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036e0:	4a63      	ldr	r2, [pc, #396]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80036e2:	f043 0301 	orr.w	r3, r3, #1
 80036e6:	6713      	str	r3, [r2, #112]	@ 0x70
 80036e8:	e01c      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	689b      	ldr	r3, [r3, #8]
 80036ee:	2b05      	cmp	r3, #5
 80036f0:	d10c      	bne.n	800370c <HAL_RCC_OscConfig+0x30c>
 80036f2:	4b5f      	ldr	r3, [pc, #380]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80036f6:	4a5e      	ldr	r2, [pc, #376]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80036f8:	f043 0304 	orr.w	r3, r3, #4
 80036fc:	6713      	str	r3, [r2, #112]	@ 0x70
 80036fe:	4b5c      	ldr	r3, [pc, #368]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003700:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003702:	4a5b      	ldr	r2, [pc, #364]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003704:	f043 0301 	orr.w	r3, r3, #1
 8003708:	6713      	str	r3, [r2, #112]	@ 0x70
 800370a:	e00b      	b.n	8003724 <HAL_RCC_OscConfig+0x324>
 800370c:	4b58      	ldr	r3, [pc, #352]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a57      	ldr	r2, [pc, #348]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003712:	f023 0301 	bic.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	4b55      	ldr	r3, [pc, #340]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800371a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800371c:	4a54      	ldr	r2, [pc, #336]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800371e:	f023 0304 	bic.w	r3, r3, #4
 8003722:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	2b00      	cmp	r3, #0
 800372a:	d015      	beq.n	8003758 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800372c:	f7ff fb7c 	bl	8002e28 <HAL_GetTick>
 8003730:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003732:	e00a      	b.n	800374a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003734:	f7ff fb78 	bl	8002e28 <HAL_GetTick>
 8003738:	4602      	mov	r2, r0
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	1ad3      	subs	r3, r2, r3
 800373e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003742:	4293      	cmp	r3, r2
 8003744:	d901      	bls.n	800374a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003746:	2303      	movs	r3, #3
 8003748:	e0cb      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374a:	4b49      	ldr	r3, [pc, #292]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800374c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374e:	f003 0302 	and.w	r3, r3, #2
 8003752:	2b00      	cmp	r3, #0
 8003754:	d0ee      	beq.n	8003734 <HAL_RCC_OscConfig+0x334>
 8003756:	e014      	b.n	8003782 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003758:	f7ff fb66 	bl	8002e28 <HAL_GetTick>
 800375c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800375e:	e00a      	b.n	8003776 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003760:	f7ff fb62 	bl	8002e28 <HAL_GetTick>
 8003764:	4602      	mov	r2, r0
 8003766:	693b      	ldr	r3, [r7, #16]
 8003768:	1ad3      	subs	r3, r2, r3
 800376a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800376e:	4293      	cmp	r3, r2
 8003770:	d901      	bls.n	8003776 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003772:	2303      	movs	r3, #3
 8003774:	e0b5      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003776:	4b3e      	ldr	r3, [pc, #248]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003778:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377a:	f003 0302 	and.w	r3, r3, #2
 800377e:	2b00      	cmp	r3, #0
 8003780:	d1ee      	bne.n	8003760 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003782:	7dfb      	ldrb	r3, [r7, #23]
 8003784:	2b01      	cmp	r3, #1
 8003786:	d105      	bne.n	8003794 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003788:	4b39      	ldr	r3, [pc, #228]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800378a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800378c:	4a38      	ldr	r2, [pc, #224]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800378e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003792:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	699b      	ldr	r3, [r3, #24]
 8003798:	2b00      	cmp	r3, #0
 800379a:	f000 80a1 	beq.w	80038e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800379e:	4b34      	ldr	r3, [pc, #208]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80037a0:	689b      	ldr	r3, [r3, #8]
 80037a2:	f003 030c 	and.w	r3, r3, #12
 80037a6:	2b08      	cmp	r3, #8
 80037a8:	d05c      	beq.n	8003864 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	699b      	ldr	r3, [r3, #24]
 80037ae:	2b02      	cmp	r3, #2
 80037b0:	d141      	bne.n	8003836 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037b2:	4b31      	ldr	r3, [pc, #196]	@ (8003878 <HAL_RCC_OscConfig+0x478>)
 80037b4:	2200      	movs	r2, #0
 80037b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037b8:	f7ff fb36 	bl	8002e28 <HAL_GetTick>
 80037bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037be:	e008      	b.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c0:	f7ff fb32 	bl	8002e28 <HAL_GetTick>
 80037c4:	4602      	mov	r2, r0
 80037c6:	693b      	ldr	r3, [r7, #16]
 80037c8:	1ad3      	subs	r3, r2, r3
 80037ca:	2b02      	cmp	r3, #2
 80037cc:	d901      	bls.n	80037d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037ce:	2303      	movs	r3, #3
 80037d0:	e087      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037d2:	4b27      	ldr	r3, [pc, #156]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d1f0      	bne.n	80037c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	69da      	ldr	r2, [r3, #28]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	6a1b      	ldr	r3, [r3, #32]
 80037e6:	431a      	orrs	r2, r3
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ec:	019b      	lsls	r3, r3, #6
 80037ee:	431a      	orrs	r2, r3
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80037f4:	085b      	lsrs	r3, r3, #1
 80037f6:	3b01      	subs	r3, #1
 80037f8:	041b      	lsls	r3, r3, #16
 80037fa:	431a      	orrs	r2, r3
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003800:	061b      	lsls	r3, r3, #24
 8003802:	491b      	ldr	r1, [pc, #108]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003804:	4313      	orrs	r3, r2
 8003806:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003808:	4b1b      	ldr	r3, [pc, #108]	@ (8003878 <HAL_RCC_OscConfig+0x478>)
 800380a:	2201      	movs	r2, #1
 800380c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800380e:	f7ff fb0b 	bl	8002e28 <HAL_GetTick>
 8003812:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003814:	e008      	b.n	8003828 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003816:	f7ff fb07 	bl	8002e28 <HAL_GetTick>
 800381a:	4602      	mov	r2, r0
 800381c:	693b      	ldr	r3, [r7, #16]
 800381e:	1ad3      	subs	r3, r2, r3
 8003820:	2b02      	cmp	r3, #2
 8003822:	d901      	bls.n	8003828 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003824:	2303      	movs	r3, #3
 8003826:	e05c      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003828:	4b11      	ldr	r3, [pc, #68]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003830:	2b00      	cmp	r3, #0
 8003832:	d0f0      	beq.n	8003816 <HAL_RCC_OscConfig+0x416>
 8003834:	e054      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003836:	4b10      	ldr	r3, [pc, #64]	@ (8003878 <HAL_RCC_OscConfig+0x478>)
 8003838:	2200      	movs	r2, #0
 800383a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383c:	f7ff faf4 	bl	8002e28 <HAL_GetTick>
 8003840:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003842:	e008      	b.n	8003856 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003844:	f7ff faf0 	bl	8002e28 <HAL_GetTick>
 8003848:	4602      	mov	r2, r0
 800384a:	693b      	ldr	r3, [r7, #16]
 800384c:	1ad3      	subs	r3, r2, r3
 800384e:	2b02      	cmp	r3, #2
 8003850:	d901      	bls.n	8003856 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003852:	2303      	movs	r3, #3
 8003854:	e045      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003856:	4b06      	ldr	r3, [pc, #24]	@ (8003870 <HAL_RCC_OscConfig+0x470>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d1f0      	bne.n	8003844 <HAL_RCC_OscConfig+0x444>
 8003862:	e03d      	b.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	699b      	ldr	r3, [r3, #24]
 8003868:	2b01      	cmp	r3, #1
 800386a:	d107      	bne.n	800387c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800386c:	2301      	movs	r3, #1
 800386e:	e038      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
 8003870:	40023800 	.word	0x40023800
 8003874:	40007000 	.word	0x40007000
 8003878:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800387c:	4b1b      	ldr	r3, [pc, #108]	@ (80038ec <HAL_RCC_OscConfig+0x4ec>)
 800387e:	685b      	ldr	r3, [r3, #4]
 8003880:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	2b01      	cmp	r3, #1
 8003888:	d028      	beq.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003894:	429a      	cmp	r2, r3
 8003896:	d121      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003898:	68fb      	ldr	r3, [r7, #12]
 800389a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038a2:	429a      	cmp	r2, r3
 80038a4:	d11a      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038a6:	68fa      	ldr	r2, [r7, #12]
 80038a8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038ac:	4013      	ands	r3, r2
 80038ae:	687a      	ldr	r2, [r7, #4]
 80038b0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038b4:	4293      	cmp	r3, r2
 80038b6:	d111      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038b8:	68fb      	ldr	r3, [r7, #12]
 80038ba:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038c2:	085b      	lsrs	r3, r3, #1
 80038c4:	3b01      	subs	r3, #1
 80038c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038c8:	429a      	cmp	r2, r3
 80038ca:	d107      	bne.n	80038dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80038d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038d8:	429a      	cmp	r2, r3
 80038da:	d001      	beq.n	80038e0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80038dc:	2301      	movs	r3, #1
 80038de:	e000      	b.n	80038e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3718      	adds	r7, #24
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}
 80038ea:	bf00      	nop
 80038ec:	40023800 	.word	0x40023800

080038f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80038f0:	b580      	push	{r7, lr}
 80038f2:	b084      	sub	sp, #16
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d101      	bne.n	8003904 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003900:	2301      	movs	r3, #1
 8003902:	e0cc      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003904:	4b68      	ldr	r3, [pc, #416]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	f003 0307 	and.w	r3, r3, #7
 800390c:	683a      	ldr	r2, [r7, #0]
 800390e:	429a      	cmp	r2, r3
 8003910:	d90c      	bls.n	800392c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003912:	4b65      	ldr	r3, [pc, #404]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003914:	683a      	ldr	r2, [r7, #0]
 8003916:	b2d2      	uxtb	r2, r2
 8003918:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800391a:	4b63      	ldr	r3, [pc, #396]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f003 0307 	and.w	r3, r3, #7
 8003922:	683a      	ldr	r2, [r7, #0]
 8003924:	429a      	cmp	r2, r3
 8003926:	d001      	beq.n	800392c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003928:	2301      	movs	r3, #1
 800392a:	e0b8      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f003 0302 	and.w	r3, r3, #2
 8003934:	2b00      	cmp	r3, #0
 8003936:	d020      	beq.n	800397a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f003 0304 	and.w	r3, r3, #4
 8003940:	2b00      	cmp	r3, #0
 8003942:	d005      	beq.n	8003950 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003944:	4b59      	ldr	r3, [pc, #356]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003946:	689b      	ldr	r3, [r3, #8]
 8003948:	4a58      	ldr	r2, [pc, #352]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800394a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800394e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	681b      	ldr	r3, [r3, #0]
 8003954:	f003 0308 	and.w	r3, r3, #8
 8003958:	2b00      	cmp	r3, #0
 800395a:	d005      	beq.n	8003968 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800395c:	4b53      	ldr	r3, [pc, #332]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800395e:	689b      	ldr	r3, [r3, #8]
 8003960:	4a52      	ldr	r2, [pc, #328]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003962:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003966:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003968:	4b50      	ldr	r3, [pc, #320]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	689b      	ldr	r3, [r3, #8]
 8003974:	494d      	ldr	r1, [pc, #308]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	4313      	orrs	r3, r2
 8003978:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800397a:	687b      	ldr	r3, [r7, #4]
 800397c:	681b      	ldr	r3, [r3, #0]
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d044      	beq.n	8003a10 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	685b      	ldr	r3, [r3, #4]
 800398a:	2b01      	cmp	r3, #1
 800398c:	d107      	bne.n	800399e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800398e:	4b47      	ldr	r3, [pc, #284]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003996:	2b00      	cmp	r3, #0
 8003998:	d119      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800399a:	2301      	movs	r3, #1
 800399c:	e07f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	685b      	ldr	r3, [r3, #4]
 80039a2:	2b02      	cmp	r3, #2
 80039a4:	d003      	beq.n	80039ae <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039aa:	2b03      	cmp	r3, #3
 80039ac:	d107      	bne.n	80039be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039ae:	4b3f      	ldr	r3, [pc, #252]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d109      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ba:	2301      	movs	r3, #1
 80039bc:	e06f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039be:	4b3b      	ldr	r3, [pc, #236]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f003 0302 	and.w	r3, r3, #2
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d101      	bne.n	80039ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e067      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039ce:	4b37      	ldr	r3, [pc, #220]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039d0:	689b      	ldr	r3, [r3, #8]
 80039d2:	f023 0203 	bic.w	r2, r3, #3
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
 80039da:	4934      	ldr	r1, [pc, #208]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 80039dc:	4313      	orrs	r3, r2
 80039de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80039e0:	f7ff fa22 	bl	8002e28 <HAL_GetTick>
 80039e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039e6:	e00a      	b.n	80039fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80039e8:	f7ff fa1e 	bl	8002e28 <HAL_GetTick>
 80039ec:	4602      	mov	r2, r0
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	1ad3      	subs	r3, r2, r3
 80039f2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80039f6:	4293      	cmp	r3, r2
 80039f8:	d901      	bls.n	80039fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80039fa:	2303      	movs	r3, #3
 80039fc:	e04f      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80039fe:	4b2b      	ldr	r3, [pc, #172]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f003 020c 	and.w	r2, r3, #12
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	009b      	lsls	r3, r3, #2
 8003a0c:	429a      	cmp	r2, r3
 8003a0e:	d1eb      	bne.n	80039e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a10:	4b25      	ldr	r3, [pc, #148]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 0307 	and.w	r3, r3, #7
 8003a18:	683a      	ldr	r2, [r7, #0]
 8003a1a:	429a      	cmp	r2, r3
 8003a1c:	d20c      	bcs.n	8003a38 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a1e:	4b22      	ldr	r3, [pc, #136]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a20:	683a      	ldr	r2, [r7, #0]
 8003a22:	b2d2      	uxtb	r2, r2
 8003a24:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a26:	4b20      	ldr	r3, [pc, #128]	@ (8003aa8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	f003 0307 	and.w	r3, r3, #7
 8003a2e:	683a      	ldr	r2, [r7, #0]
 8003a30:	429a      	cmp	r2, r3
 8003a32:	d001      	beq.n	8003a38 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a34:	2301      	movs	r3, #1
 8003a36:	e032      	b.n	8003a9e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f003 0304 	and.w	r3, r3, #4
 8003a40:	2b00      	cmp	r3, #0
 8003a42:	d008      	beq.n	8003a56 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a44:	4b19      	ldr	r3, [pc, #100]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a46:	689b      	ldr	r3, [r3, #8]
 8003a48:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	68db      	ldr	r3, [r3, #12]
 8003a50:	4916      	ldr	r1, [pc, #88]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a52:	4313      	orrs	r3, r2
 8003a54:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0308 	and.w	r3, r3, #8
 8003a5e:	2b00      	cmp	r3, #0
 8003a60:	d009      	beq.n	8003a76 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a62:	4b12      	ldr	r3, [pc, #72]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a64:	689b      	ldr	r3, [r3, #8]
 8003a66:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	691b      	ldr	r3, [r3, #16]
 8003a6e:	00db      	lsls	r3, r3, #3
 8003a70:	490e      	ldr	r1, [pc, #56]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a72:	4313      	orrs	r3, r2
 8003a74:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003a76:	f000 f821 	bl	8003abc <HAL_RCC_GetSysClockFreq>
 8003a7a:	4602      	mov	r2, r0
 8003a7c:	4b0b      	ldr	r3, [pc, #44]	@ (8003aac <HAL_RCC_ClockConfig+0x1bc>)
 8003a7e:	689b      	ldr	r3, [r3, #8]
 8003a80:	091b      	lsrs	r3, r3, #4
 8003a82:	f003 030f 	and.w	r3, r3, #15
 8003a86:	490a      	ldr	r1, [pc, #40]	@ (8003ab0 <HAL_RCC_ClockConfig+0x1c0>)
 8003a88:	5ccb      	ldrb	r3, [r1, r3]
 8003a8a:	fa22 f303 	lsr.w	r3, r2, r3
 8003a8e:	4a09      	ldr	r2, [pc, #36]	@ (8003ab4 <HAL_RCC_ClockConfig+0x1c4>)
 8003a90:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003a92:	4b09      	ldr	r3, [pc, #36]	@ (8003ab8 <HAL_RCC_ClockConfig+0x1c8>)
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	4618      	mov	r0, r3
 8003a98:	f7ff f828 	bl	8002aec <HAL_InitTick>

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3710      	adds	r7, #16
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}
 8003aa6:	bf00      	nop
 8003aa8:	40023c00 	.word	0x40023c00
 8003aac:	40023800 	.word	0x40023800
 8003ab0:	0800b800 	.word	0x0800b800
 8003ab4:	20000000 	.word	0x20000000
 8003ab8:	20000004 	.word	0x20000004

08003abc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003abc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003ac0:	b094      	sub	sp, #80	@ 0x50
 8003ac2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003ac4:	2300      	movs	r3, #0
 8003ac6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003ac8:	2300      	movs	r3, #0
 8003aca:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003acc:	2300      	movs	r3, #0
 8003ace:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003ad0:	2300      	movs	r3, #0
 8003ad2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003ad4:	4b79      	ldr	r3, [pc, #484]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003ad6:	689b      	ldr	r3, [r3, #8]
 8003ad8:	f003 030c 	and.w	r3, r3, #12
 8003adc:	2b08      	cmp	r3, #8
 8003ade:	d00d      	beq.n	8003afc <HAL_RCC_GetSysClockFreq+0x40>
 8003ae0:	2b08      	cmp	r3, #8
 8003ae2:	f200 80e1 	bhi.w	8003ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003ae6:	2b00      	cmp	r3, #0
 8003ae8:	d002      	beq.n	8003af0 <HAL_RCC_GetSysClockFreq+0x34>
 8003aea:	2b04      	cmp	r3, #4
 8003aec:	d003      	beq.n	8003af6 <HAL_RCC_GetSysClockFreq+0x3a>
 8003aee:	e0db      	b.n	8003ca8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003af0:	4b73      	ldr	r3, [pc, #460]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003af2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003af4:	e0db      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003af6:	4b73      	ldr	r3, [pc, #460]	@ (8003cc4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003af8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003afa:	e0d8      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003afc:	4b6f      	ldr	r3, [pc, #444]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b04:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b06:	4b6d      	ldr	r3, [pc, #436]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b0e:	2b00      	cmp	r3, #0
 8003b10:	d063      	beq.n	8003bda <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b12:	4b6a      	ldr	r3, [pc, #424]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003b14:	685b      	ldr	r3, [r3, #4]
 8003b16:	099b      	lsrs	r3, r3, #6
 8003b18:	2200      	movs	r2, #0
 8003b1a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b1c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b1e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b20:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b24:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b26:	2300      	movs	r3, #0
 8003b28:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b2a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b2e:	4622      	mov	r2, r4
 8003b30:	462b      	mov	r3, r5
 8003b32:	f04f 0000 	mov.w	r0, #0
 8003b36:	f04f 0100 	mov.w	r1, #0
 8003b3a:	0159      	lsls	r1, r3, #5
 8003b3c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b40:	0150      	lsls	r0, r2, #5
 8003b42:	4602      	mov	r2, r0
 8003b44:	460b      	mov	r3, r1
 8003b46:	4621      	mov	r1, r4
 8003b48:	1a51      	subs	r1, r2, r1
 8003b4a:	6139      	str	r1, [r7, #16]
 8003b4c:	4629      	mov	r1, r5
 8003b4e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b52:	617b      	str	r3, [r7, #20]
 8003b54:	f04f 0200 	mov.w	r2, #0
 8003b58:	f04f 0300 	mov.w	r3, #0
 8003b5c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b60:	4659      	mov	r1, fp
 8003b62:	018b      	lsls	r3, r1, #6
 8003b64:	4651      	mov	r1, sl
 8003b66:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b6a:	4651      	mov	r1, sl
 8003b6c:	018a      	lsls	r2, r1, #6
 8003b6e:	4651      	mov	r1, sl
 8003b70:	ebb2 0801 	subs.w	r8, r2, r1
 8003b74:	4659      	mov	r1, fp
 8003b76:	eb63 0901 	sbc.w	r9, r3, r1
 8003b7a:	f04f 0200 	mov.w	r2, #0
 8003b7e:	f04f 0300 	mov.w	r3, #0
 8003b82:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003b86:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003b8a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003b8e:	4690      	mov	r8, r2
 8003b90:	4699      	mov	r9, r3
 8003b92:	4623      	mov	r3, r4
 8003b94:	eb18 0303 	adds.w	r3, r8, r3
 8003b98:	60bb      	str	r3, [r7, #8]
 8003b9a:	462b      	mov	r3, r5
 8003b9c:	eb49 0303 	adc.w	r3, r9, r3
 8003ba0:	60fb      	str	r3, [r7, #12]
 8003ba2:	f04f 0200 	mov.w	r2, #0
 8003ba6:	f04f 0300 	mov.w	r3, #0
 8003baa:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bae:	4629      	mov	r1, r5
 8003bb0:	024b      	lsls	r3, r1, #9
 8003bb2:	4621      	mov	r1, r4
 8003bb4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003bb8:	4621      	mov	r1, r4
 8003bba:	024a      	lsls	r2, r1, #9
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bc2:	2200      	movs	r2, #0
 8003bc4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bc6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bc8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bcc:	f7fc fb50 	bl	8000270 <__aeabi_uldivmod>
 8003bd0:	4602      	mov	r2, r0
 8003bd2:	460b      	mov	r3, r1
 8003bd4:	4613      	mov	r3, r2
 8003bd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003bd8:	e058      	b.n	8003c8c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003bda:	4b38      	ldr	r3, [pc, #224]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003bdc:	685b      	ldr	r3, [r3, #4]
 8003bde:	099b      	lsrs	r3, r3, #6
 8003be0:	2200      	movs	r2, #0
 8003be2:	4618      	mov	r0, r3
 8003be4:	4611      	mov	r1, r2
 8003be6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003bea:	623b      	str	r3, [r7, #32]
 8003bec:	2300      	movs	r3, #0
 8003bee:	627b      	str	r3, [r7, #36]	@ 0x24
 8003bf0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003bf4:	4642      	mov	r2, r8
 8003bf6:	464b      	mov	r3, r9
 8003bf8:	f04f 0000 	mov.w	r0, #0
 8003bfc:	f04f 0100 	mov.w	r1, #0
 8003c00:	0159      	lsls	r1, r3, #5
 8003c02:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c06:	0150      	lsls	r0, r2, #5
 8003c08:	4602      	mov	r2, r0
 8003c0a:	460b      	mov	r3, r1
 8003c0c:	4641      	mov	r1, r8
 8003c0e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c12:	4649      	mov	r1, r9
 8003c14:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c18:	f04f 0200 	mov.w	r2, #0
 8003c1c:	f04f 0300 	mov.w	r3, #0
 8003c20:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c24:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c28:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c2c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c30:	eb63 050b 	sbc.w	r5, r3, fp
 8003c34:	f04f 0200 	mov.w	r2, #0
 8003c38:	f04f 0300 	mov.w	r3, #0
 8003c3c:	00eb      	lsls	r3, r5, #3
 8003c3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c42:	00e2      	lsls	r2, r4, #3
 8003c44:	4614      	mov	r4, r2
 8003c46:	461d      	mov	r5, r3
 8003c48:	4643      	mov	r3, r8
 8003c4a:	18e3      	adds	r3, r4, r3
 8003c4c:	603b      	str	r3, [r7, #0]
 8003c4e:	464b      	mov	r3, r9
 8003c50:	eb45 0303 	adc.w	r3, r5, r3
 8003c54:	607b      	str	r3, [r7, #4]
 8003c56:	f04f 0200 	mov.w	r2, #0
 8003c5a:	f04f 0300 	mov.w	r3, #0
 8003c5e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c62:	4629      	mov	r1, r5
 8003c64:	028b      	lsls	r3, r1, #10
 8003c66:	4621      	mov	r1, r4
 8003c68:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c6c:	4621      	mov	r1, r4
 8003c6e:	028a      	lsls	r2, r1, #10
 8003c70:	4610      	mov	r0, r2
 8003c72:	4619      	mov	r1, r3
 8003c74:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003c76:	2200      	movs	r2, #0
 8003c78:	61bb      	str	r3, [r7, #24]
 8003c7a:	61fa      	str	r2, [r7, #28]
 8003c7c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003c80:	f7fc faf6 	bl	8000270 <__aeabi_uldivmod>
 8003c84:	4602      	mov	r2, r0
 8003c86:	460b      	mov	r3, r1
 8003c88:	4613      	mov	r3, r2
 8003c8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8003cbc <HAL_RCC_GetSysClockFreq+0x200>)
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	0c1b      	lsrs	r3, r3, #16
 8003c92:	f003 0303 	and.w	r3, r3, #3
 8003c96:	3301      	adds	r3, #1
 8003c98:	005b      	lsls	r3, r3, #1
 8003c9a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003c9c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003c9e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003ca0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003ca6:	e002      	b.n	8003cae <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003ca8:	4b05      	ldr	r3, [pc, #20]	@ (8003cc0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003caa:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cac:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cae:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003cb0:	4618      	mov	r0, r3
 8003cb2:	3750      	adds	r7, #80	@ 0x50
 8003cb4:	46bd      	mov	sp, r7
 8003cb6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cba:	bf00      	nop
 8003cbc:	40023800 	.word	0x40023800
 8003cc0:	00f42400 	.word	0x00f42400
 8003cc4:	007a1200 	.word	0x007a1200

08003cc8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cc8:	b480      	push	{r7}
 8003cca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003ccc:	4b03      	ldr	r3, [pc, #12]	@ (8003cdc <HAL_RCC_GetHCLKFreq+0x14>)
 8003cce:	681b      	ldr	r3, [r3, #0]
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	20000000 	.word	0x20000000

08003ce0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003ce4:	f7ff fff0 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003ce8:	4602      	mov	r2, r0
 8003cea:	4b05      	ldr	r3, [pc, #20]	@ (8003d00 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	0a9b      	lsrs	r3, r3, #10
 8003cf0:	f003 0307 	and.w	r3, r3, #7
 8003cf4:	4903      	ldr	r1, [pc, #12]	@ (8003d04 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003cf6:	5ccb      	ldrb	r3, [r1, r3]
 8003cf8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	bd80      	pop	{r7, pc}
 8003d00:	40023800 	.word	0x40023800
 8003d04:	0800b810 	.word	0x0800b810

08003d08 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d08:	b580      	push	{r7, lr}
 8003d0a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d0c:	f7ff ffdc 	bl	8003cc8 <HAL_RCC_GetHCLKFreq>
 8003d10:	4602      	mov	r2, r0
 8003d12:	4b05      	ldr	r3, [pc, #20]	@ (8003d28 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d14:	689b      	ldr	r3, [r3, #8]
 8003d16:	0b5b      	lsrs	r3, r3, #13
 8003d18:	f003 0307 	and.w	r3, r3, #7
 8003d1c:	4903      	ldr	r1, [pc, #12]	@ (8003d2c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d1e:	5ccb      	ldrb	r3, [r1, r3]
 8003d20:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d24:	4618      	mov	r0, r3
 8003d26:	bd80      	pop	{r7, pc}
 8003d28:	40023800 	.word	0x40023800
 8003d2c:	0800b810 	.word	0x0800b810

08003d30 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d30:	b480      	push	{r7}
 8003d32:	b083      	sub	sp, #12
 8003d34:	af00      	add	r7, sp, #0
 8003d36:	6078      	str	r0, [r7, #4]
 8003d38:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	220f      	movs	r2, #15
 8003d3e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d40:	4b12      	ldr	r3, [pc, #72]	@ (8003d8c <HAL_RCC_GetClockConfig+0x5c>)
 8003d42:	689b      	ldr	r3, [r3, #8]
 8003d44:	f003 0203 	and.w	r2, r3, #3
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8003d8c <HAL_RCC_GetClockConfig+0x5c>)
 8003d4e:	689b      	ldr	r3, [r3, #8]
 8003d50:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d58:	4b0c      	ldr	r3, [pc, #48]	@ (8003d8c <HAL_RCC_GetClockConfig+0x5c>)
 8003d5a:	689b      	ldr	r3, [r3, #8]
 8003d5c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d64:	4b09      	ldr	r3, [pc, #36]	@ (8003d8c <HAL_RCC_GetClockConfig+0x5c>)
 8003d66:	689b      	ldr	r3, [r3, #8]
 8003d68:	08db      	lsrs	r3, r3, #3
 8003d6a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003d72:	4b07      	ldr	r3, [pc, #28]	@ (8003d90 <HAL_RCC_GetClockConfig+0x60>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	f003 0207 	and.w	r2, r3, #7
 8003d7a:	683b      	ldr	r3, [r7, #0]
 8003d7c:	601a      	str	r2, [r3, #0]
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d88:	4770      	bx	lr
 8003d8a:	bf00      	nop
 8003d8c:	40023800 	.word	0x40023800
 8003d90:	40023c00 	.word	0x40023c00

08003d94 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003d94:	b580      	push	{r7, lr}
 8003d96:	b082      	sub	sp, #8
 8003d98:	af00      	add	r7, sp, #0
 8003d9a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2b00      	cmp	r3, #0
 8003da0:	d101      	bne.n	8003da6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003da2:	2301      	movs	r3, #1
 8003da4:	e07b      	b.n	8003e9e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003daa:	2b00      	cmp	r3, #0
 8003dac:	d108      	bne.n	8003dc0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dae:	687b      	ldr	r3, [r7, #4]
 8003db0:	685b      	ldr	r3, [r3, #4]
 8003db2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003db6:	d009      	beq.n	8003dcc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	2200      	movs	r2, #0
 8003dbc:	61da      	str	r2, [r3, #28]
 8003dbe:	e005      	b.n	8003dcc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2200      	movs	r2, #0
 8003dd0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003dd8:	b2db      	uxtb	r3, r3
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d106      	bne.n	8003dec <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	2200      	movs	r2, #0
 8003de2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003de6:	6878      	ldr	r0, [r7, #4]
 8003de8:	f7fe fdf0 	bl	80029cc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2202      	movs	r2, #2
 8003df0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	681a      	ldr	r2, [r3, #0]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e02:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	685b      	ldr	r3, [r3, #4]
 8003e08:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	689b      	ldr	r3, [r3, #8]
 8003e10:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e14:	431a      	orrs	r2, r3
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	68db      	ldr	r3, [r3, #12]
 8003e1a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e1e:	431a      	orrs	r2, r3
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	691b      	ldr	r3, [r3, #16]
 8003e24:	f003 0302 	and.w	r3, r3, #2
 8003e28:	431a      	orrs	r2, r3
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	695b      	ldr	r3, [r3, #20]
 8003e2e:	f003 0301 	and.w	r3, r3, #1
 8003e32:	431a      	orrs	r2, r3
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	699b      	ldr	r3, [r3, #24]
 8003e38:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e3c:	431a      	orrs	r2, r3
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	69db      	ldr	r3, [r3, #28]
 8003e42:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e46:	431a      	orrs	r2, r3
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	6a1b      	ldr	r3, [r3, #32]
 8003e4c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e50:	ea42 0103 	orr.w	r1, r2, r3
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e58:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	430a      	orrs	r2, r1
 8003e62:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	0c1b      	lsrs	r3, r3, #16
 8003e6a:	f003 0104 	and.w	r1, r3, #4
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e72:	f003 0210 	and.w	r2, r3, #16
 8003e76:	687b      	ldr	r3, [r7, #4]
 8003e78:	681b      	ldr	r3, [r3, #0]
 8003e7a:	430a      	orrs	r2, r1
 8003e7c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	69da      	ldr	r2, [r3, #28]
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003e8c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	2200      	movs	r2, #0
 8003e92:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2201      	movs	r2, #1
 8003e98:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003e9c:	2300      	movs	r3, #0
}
 8003e9e:	4618      	mov	r0, r3
 8003ea0:	3708      	adds	r7, #8
 8003ea2:	46bd      	mov	sp, r7
 8003ea4:	bd80      	pop	{r7, pc}

08003ea6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 8003ea6:	b580      	push	{r7, lr}
 8003ea8:	b08a      	sub	sp, #40	@ 0x28
 8003eaa:	af00      	add	r7, sp, #0
 8003eac:	60f8      	str	r0, [r7, #12]
 8003eae:	60b9      	str	r1, [r7, #8]
 8003eb0:	607a      	str	r2, [r7, #4]
 8003eb2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003eb4:	2301      	movs	r3, #1
 8003eb6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003eb8:	f7fe ffb6 	bl	8002e28 <HAL_GetTick>
 8003ebc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ec4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	685b      	ldr	r3, [r3, #4]
 8003eca:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 8003ecc:	887b      	ldrh	r3, [r7, #2]
 8003ece:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8003ed0:	7ffb      	ldrb	r3, [r7, #31]
 8003ed2:	2b01      	cmp	r3, #1
 8003ed4:	d00c      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x4a>
 8003ed6:	69bb      	ldr	r3, [r7, #24]
 8003ed8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003edc:	d106      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	689b      	ldr	r3, [r3, #8]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d102      	bne.n	8003eec <HAL_SPI_TransmitReceive+0x46>
 8003ee6:	7ffb      	ldrb	r3, [r7, #31]
 8003ee8:	2b04      	cmp	r3, #4
 8003eea:	d001      	beq.n	8003ef0 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 8003eec:	2302      	movs	r3, #2
 8003eee:	e17f      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	2b00      	cmp	r3, #0
 8003ef4:	d005      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x5c>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d002      	beq.n	8003f02 <HAL_SPI_TransmitReceive+0x5c>
 8003efc:	887b      	ldrh	r3, [r7, #2]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d101      	bne.n	8003f06 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003f02:	2301      	movs	r3, #1
 8003f04:	e174      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8003f0c:	2b01      	cmp	r3, #1
 8003f0e:	d101      	bne.n	8003f14 <HAL_SPI_TransmitReceive+0x6e>
 8003f10:	2302      	movs	r3, #2
 8003f12:	e16d      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	2201      	movs	r2, #1
 8003f18:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f22:	b2db      	uxtb	r3, r3
 8003f24:	2b04      	cmp	r3, #4
 8003f26:	d003      	beq.n	8003f30 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2205      	movs	r2, #5
 8003f2c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	2200      	movs	r2, #0
 8003f34:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	687a      	ldr	r2, [r7, #4]
 8003f3a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003f3c:	68fb      	ldr	r3, [r7, #12]
 8003f3e:	887a      	ldrh	r2, [r7, #2]
 8003f40:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	887a      	ldrh	r2, [r7, #2]
 8003f46:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	68ba      	ldr	r2, [r7, #8]
 8003f4c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	887a      	ldrh	r2, [r7, #2]
 8003f52:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	887a      	ldrh	r2, [r7, #2]
 8003f58:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	2200      	movs	r2, #0
 8003f64:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	681b      	ldr	r3, [r3, #0]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003f70:	2b40      	cmp	r3, #64	@ 0x40
 8003f72:	d007      	beq.n	8003f84 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	681b      	ldr	r3, [r3, #0]
 8003f78:	681a      	ldr	r2, [r3, #0]
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	681b      	ldr	r3, [r3, #0]
 8003f7e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8003f82:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	68db      	ldr	r3, [r3, #12]
 8003f88:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003f8c:	d17e      	bne.n	800408c <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	685b      	ldr	r3, [r3, #4]
 8003f92:	2b00      	cmp	r3, #0
 8003f94:	d002      	beq.n	8003f9c <HAL_SPI_TransmitReceive+0xf6>
 8003f96:	8afb      	ldrh	r3, [r7, #22]
 8003f98:	2b01      	cmp	r3, #1
 8003f9a:	d16c      	bne.n	8004076 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003f9c:	68fb      	ldr	r3, [r7, #12]
 8003f9e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fa0:	881a      	ldrh	r2, [r3, #0]
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fa8:	68fb      	ldr	r3, [r7, #12]
 8003faa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fac:	1c9a      	adds	r2, r3, #2
 8003fae:	68fb      	ldr	r3, [r7, #12]
 8003fb0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fb6:	b29b      	uxth	r3, r3
 8003fb8:	3b01      	subs	r3, #1
 8003fba:	b29a      	uxth	r2, r3
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003fc0:	e059      	b.n	8004076 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	689b      	ldr	r3, [r3, #8]
 8003fc8:	f003 0302 	and.w	r3, r3, #2
 8003fcc:	2b02      	cmp	r3, #2
 8003fce:	d11b      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x162>
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003fd4:	b29b      	uxth	r3, r3
 8003fd6:	2b00      	cmp	r3, #0
 8003fd8:	d016      	beq.n	8004008 <HAL_SPI_TransmitReceive+0x162>
 8003fda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003fdc:	2b01      	cmp	r3, #1
 8003fde:	d113      	bne.n	8004008 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	881a      	ldrh	r2, [r3, #0]
 8003fe6:	68fb      	ldr	r3, [r7, #12]
 8003fe8:	681b      	ldr	r3, [r3, #0]
 8003fea:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ff0:	1c9a      	adds	r2, r3, #2
 8003ff2:	68fb      	ldr	r3, [r7, #12]
 8003ff4:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ffa:	b29b      	uxth	r3, r3
 8003ffc:	3b01      	subs	r3, #1
 8003ffe:	b29a      	uxth	r2, r3
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004004:	2300      	movs	r3, #0
 8004006:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	689b      	ldr	r3, [r3, #8]
 800400e:	f003 0301 	and.w	r3, r3, #1
 8004012:	2b01      	cmp	r3, #1
 8004014:	d119      	bne.n	800404a <HAL_SPI_TransmitReceive+0x1a4>
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800401a:	b29b      	uxth	r3, r3
 800401c:	2b00      	cmp	r3, #0
 800401e:	d014      	beq.n	800404a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68da      	ldr	r2, [r3, #12]
 8004026:	68fb      	ldr	r3, [r7, #12]
 8004028:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800402a:	b292      	uxth	r2, r2
 800402c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800402e:	68fb      	ldr	r3, [r7, #12]
 8004030:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004032:	1c9a      	adds	r2, r3, #2
 8004034:	68fb      	ldr	r3, [r7, #12]
 8004036:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	68fb      	ldr	r3, [r7, #12]
 8004044:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004046:	2301      	movs	r3, #1
 8004048:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800404a:	f7fe feed 	bl	8002e28 <HAL_GetTick>
 800404e:	4602      	mov	r2, r0
 8004050:	6a3b      	ldr	r3, [r7, #32]
 8004052:	1ad3      	subs	r3, r2, r3
 8004054:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004056:	429a      	cmp	r2, r3
 8004058:	d80d      	bhi.n	8004076 <HAL_SPI_TransmitReceive+0x1d0>
 800405a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800405c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004060:	d009      	beq.n	8004076 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8004062:	68fb      	ldr	r3, [r7, #12]
 8004064:	2201      	movs	r2, #1
 8004066:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	2200      	movs	r2, #0
 800406e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8004072:	2303      	movs	r3, #3
 8004074:	e0bc      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800407a:	b29b      	uxth	r3, r3
 800407c:	2b00      	cmp	r3, #0
 800407e:	d1a0      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x11c>
 8004080:	68fb      	ldr	r3, [r7, #12]
 8004082:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8004084:	b29b      	uxth	r3, r3
 8004086:	2b00      	cmp	r3, #0
 8004088:	d19b      	bne.n	8003fc2 <HAL_SPI_TransmitReceive+0x11c>
 800408a:	e082      	b.n	8004192 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800408c:	68fb      	ldr	r3, [r7, #12]
 800408e:	685b      	ldr	r3, [r3, #4]
 8004090:	2b00      	cmp	r3, #0
 8004092:	d002      	beq.n	800409a <HAL_SPI_TransmitReceive+0x1f4>
 8004094:	8afb      	ldrh	r3, [r7, #22]
 8004096:	2b01      	cmp	r3, #1
 8004098:	d171      	bne.n	800417e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800409e:	68fb      	ldr	r3, [r7, #12]
 80040a0:	681b      	ldr	r3, [r3, #0]
 80040a2:	330c      	adds	r3, #12
 80040a4:	7812      	ldrb	r2, [r2, #0]
 80040a6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040ac:	1c5a      	adds	r2, r3, #1
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040c0:	e05d      	b.n	800417e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	689b      	ldr	r3, [r3, #8]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b02      	cmp	r3, #2
 80040ce:	d11c      	bne.n	800410a <HAL_SPI_TransmitReceive+0x264>
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040d4:	b29b      	uxth	r3, r3
 80040d6:	2b00      	cmp	r3, #0
 80040d8:	d017      	beq.n	800410a <HAL_SPI_TransmitReceive+0x264>
 80040da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80040dc:	2b01      	cmp	r3, #1
 80040de:	d114      	bne.n	800410a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80040e0:	68fb      	ldr	r3, [r7, #12]
 80040e2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80040e4:	68fb      	ldr	r3, [r7, #12]
 80040e6:	681b      	ldr	r3, [r3, #0]
 80040e8:	330c      	adds	r3, #12
 80040ea:	7812      	ldrb	r2, [r2, #0]
 80040ec:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80040ee:	68fb      	ldr	r3, [r7, #12]
 80040f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f2:	1c5a      	adds	r2, r3, #1
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80040fc:	b29b      	uxth	r3, r3
 80040fe:	3b01      	subs	r3, #1
 8004100:	b29a      	uxth	r2, r3
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004106:	2300      	movs	r3, #0
 8004108:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800410a:	68fb      	ldr	r3, [r7, #12]
 800410c:	681b      	ldr	r3, [r3, #0]
 800410e:	689b      	ldr	r3, [r3, #8]
 8004110:	f003 0301 	and.w	r3, r3, #1
 8004114:	2b01      	cmp	r3, #1
 8004116:	d119      	bne.n	800414c <HAL_SPI_TransmitReceive+0x2a6>
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800411c:	b29b      	uxth	r3, r3
 800411e:	2b00      	cmp	r3, #0
 8004120:	d014      	beq.n	800414c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	68da      	ldr	r2, [r3, #12]
 8004128:	68fb      	ldr	r3, [r7, #12]
 800412a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800412c:	b2d2      	uxtb	r2, r2
 800412e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004134:	1c5a      	adds	r2, r3, #1
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800413e:	b29b      	uxth	r3, r3
 8004140:	3b01      	subs	r3, #1
 8004142:	b29a      	uxth	r2, r3
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004148:	2301      	movs	r3, #1
 800414a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800414c:	f7fe fe6c 	bl	8002e28 <HAL_GetTick>
 8004150:	4602      	mov	r2, r0
 8004152:	6a3b      	ldr	r3, [r7, #32]
 8004154:	1ad3      	subs	r3, r2, r3
 8004156:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004158:	429a      	cmp	r2, r3
 800415a:	d803      	bhi.n	8004164 <HAL_SPI_TransmitReceive+0x2be>
 800415c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800415e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004162:	d102      	bne.n	800416a <HAL_SPI_TransmitReceive+0x2c4>
 8004164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004166:	2b00      	cmp	r3, #0
 8004168:	d109      	bne.n	800417e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	2200      	movs	r2, #0
 8004176:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800417a:	2303      	movs	r3, #3
 800417c:	e038      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8004182:	b29b      	uxth	r3, r3
 8004184:	2b00      	cmp	r3, #0
 8004186:	d19c      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x21c>
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800418c:	b29b      	uxth	r3, r3
 800418e:	2b00      	cmp	r3, #0
 8004190:	d197      	bne.n	80040c2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8004192:	6a3a      	ldr	r2, [r7, #32]
 8004194:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f000 f8c2 	bl	8004320 <SPI_EndRxTxTransaction>
 800419c:	4603      	mov	r3, r0
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d008      	beq.n	80041b4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	2220      	movs	r2, #32
 80041a6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	2200      	movs	r2, #0
 80041ac:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 80041b0:	2301      	movs	r3, #1
 80041b2:	e01d      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	689b      	ldr	r3, [r3, #8]
 80041b8:	2b00      	cmp	r3, #0
 80041ba:	d10a      	bne.n	80041d2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80041bc:	2300      	movs	r3, #0
 80041be:	613b      	str	r3, [r7, #16]
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	68db      	ldr	r3, [r3, #12]
 80041c6:	613b      	str	r3, [r7, #16]
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	689b      	ldr	r3, [r3, #8]
 80041ce:	613b      	str	r3, [r7, #16]
 80041d0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	2201      	movs	r2, #1
 80041d6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	2200      	movs	r2, #0
 80041de:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80041e6:	2b00      	cmp	r3, #0
 80041e8:	d001      	beq.n	80041ee <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80041ea:	2301      	movs	r3, #1
 80041ec:	e000      	b.n	80041f0 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80041ee:	2300      	movs	r3, #0
  }
}
 80041f0:	4618      	mov	r0, r3
 80041f2:	3728      	adds	r7, #40	@ 0x28
 80041f4:	46bd      	mov	sp, r7
 80041f6:	bd80      	pop	{r7, pc}

080041f8 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8004204:	4618      	mov	r0, r3
 8004206:	370c      	adds	r7, #12
 8004208:	46bd      	mov	sp, r7
 800420a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800420e:	4770      	bx	lr

08004210 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004210:	b580      	push	{r7, lr}
 8004212:	b088      	sub	sp, #32
 8004214:	af00      	add	r7, sp, #0
 8004216:	60f8      	str	r0, [r7, #12]
 8004218:	60b9      	str	r1, [r7, #8]
 800421a:	603b      	str	r3, [r7, #0]
 800421c:	4613      	mov	r3, r2
 800421e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004220:	f7fe fe02 	bl	8002e28 <HAL_GetTick>
 8004224:	4602      	mov	r2, r0
 8004226:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004228:	1a9b      	subs	r3, r3, r2
 800422a:	683a      	ldr	r2, [r7, #0]
 800422c:	4413      	add	r3, r2
 800422e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004230:	f7fe fdfa 	bl	8002e28 <HAL_GetTick>
 8004234:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004236:	4b39      	ldr	r3, [pc, #228]	@ (800431c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	015b      	lsls	r3, r3, #5
 800423c:	0d1b      	lsrs	r3, r3, #20
 800423e:	69fa      	ldr	r2, [r7, #28]
 8004240:	fb02 f303 	mul.w	r3, r2, r3
 8004244:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004246:	e055      	b.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800424e:	d051      	beq.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004250:	f7fe fdea 	bl	8002e28 <HAL_GetTick>
 8004254:	4602      	mov	r2, r0
 8004256:	69bb      	ldr	r3, [r7, #24]
 8004258:	1ad3      	subs	r3, r2, r3
 800425a:	69fa      	ldr	r2, [r7, #28]
 800425c:	429a      	cmp	r2, r3
 800425e:	d902      	bls.n	8004266 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004260:	69fb      	ldr	r3, [r7, #28]
 8004262:	2b00      	cmp	r3, #0
 8004264:	d13d      	bne.n	80042e2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	685a      	ldr	r2, [r3, #4]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004274:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	685b      	ldr	r3, [r3, #4]
 800427a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800427e:	d111      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	689b      	ldr	r3, [r3, #8]
 8004284:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004288:	d004      	beq.n	8004294 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800428a:	68fb      	ldr	r3, [r7, #12]
 800428c:	689b      	ldr	r3, [r3, #8]
 800428e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004292:	d107      	bne.n	80042a4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80042a2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80042a8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ac:	d10f      	bne.n	80042ce <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80042bc:	601a      	str	r2, [r3, #0]
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	681a      	ldr	r2, [r3, #0]
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	681b      	ldr	r3, [r3, #0]
 80042c8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80042cc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80042ce:	68fb      	ldr	r3, [r7, #12]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	2200      	movs	r2, #0
 80042da:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80042de:	2303      	movs	r3, #3
 80042e0:	e018      	b.n	8004314 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80042e2:	697b      	ldr	r3, [r7, #20]
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d102      	bne.n	80042ee <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80042e8:	2300      	movs	r3, #0
 80042ea:	61fb      	str	r3, [r7, #28]
 80042ec:	e002      	b.n	80042f4 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80042ee:	697b      	ldr	r3, [r7, #20]
 80042f0:	3b01      	subs	r3, #1
 80042f2:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80042f4:	68fb      	ldr	r3, [r7, #12]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	689a      	ldr	r2, [r3, #8]
 80042fa:	68bb      	ldr	r3, [r7, #8]
 80042fc:	4013      	ands	r3, r2
 80042fe:	68ba      	ldr	r2, [r7, #8]
 8004300:	429a      	cmp	r2, r3
 8004302:	bf0c      	ite	eq
 8004304:	2301      	moveq	r3, #1
 8004306:	2300      	movne	r3, #0
 8004308:	b2db      	uxtb	r3, r3
 800430a:	461a      	mov	r2, r3
 800430c:	79fb      	ldrb	r3, [r7, #7]
 800430e:	429a      	cmp	r2, r3
 8004310:	d19a      	bne.n	8004248 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8004312:	2300      	movs	r3, #0
}
 8004314:	4618      	mov	r0, r3
 8004316:	3720      	adds	r7, #32
 8004318:	46bd      	mov	sp, r7
 800431a:	bd80      	pop	{r7, pc}
 800431c:	20000000 	.word	0x20000000

08004320 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b088      	sub	sp, #32
 8004324:	af02      	add	r7, sp, #8
 8004326:	60f8      	str	r0, [r7, #12]
 8004328:	60b9      	str	r1, [r7, #8]
 800432a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	9300      	str	r3, [sp, #0]
 8004330:	68bb      	ldr	r3, [r7, #8]
 8004332:	2201      	movs	r2, #1
 8004334:	2102      	movs	r1, #2
 8004336:	68f8      	ldr	r0, [r7, #12]
 8004338:	f7ff ff6a 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 800433c:	4603      	mov	r3, r0
 800433e:	2b00      	cmp	r3, #0
 8004340:	d007      	beq.n	8004352 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004346:	f043 0220 	orr.w	r2, r3, #32
 800434a:	68fb      	ldr	r3, [r7, #12]
 800434c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 800434e:	2303      	movs	r3, #3
 8004350:	e032      	b.n	80043b8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8004352:	4b1b      	ldr	r3, [pc, #108]	@ (80043c0 <SPI_EndRxTxTransaction+0xa0>)
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	4a1b      	ldr	r2, [pc, #108]	@ (80043c4 <SPI_EndRxTxTransaction+0xa4>)
 8004358:	fba2 2303 	umull	r2, r3, r2, r3
 800435c:	0d5b      	lsrs	r3, r3, #21
 800435e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8004362:	fb02 f303 	mul.w	r3, r2, r3
 8004366:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8004368:	68fb      	ldr	r3, [r7, #12]
 800436a:	685b      	ldr	r3, [r3, #4]
 800436c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8004370:	d112      	bne.n	8004398 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	9300      	str	r3, [sp, #0]
 8004376:	68bb      	ldr	r3, [r7, #8]
 8004378:	2200      	movs	r2, #0
 800437a:	2180      	movs	r1, #128	@ 0x80
 800437c:	68f8      	ldr	r0, [r7, #12]
 800437e:	f7ff ff47 	bl	8004210 <SPI_WaitFlagStateUntilTimeout>
 8004382:	4603      	mov	r3, r0
 8004384:	2b00      	cmp	r3, #0
 8004386:	d016      	beq.n	80043b6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004388:	68fb      	ldr	r3, [r7, #12]
 800438a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800438c:	f043 0220 	orr.w	r2, r3, #32
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8004394:	2303      	movs	r3, #3
 8004396:	e00f      	b.n	80043b8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8004398:	697b      	ldr	r3, [r7, #20]
 800439a:	2b00      	cmp	r3, #0
 800439c:	d00a      	beq.n	80043b4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 800439e:	697b      	ldr	r3, [r7, #20]
 80043a0:	3b01      	subs	r3, #1
 80043a2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 80043a4:	68fb      	ldr	r3, [r7, #12]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80043ae:	2b80      	cmp	r3, #128	@ 0x80
 80043b0:	d0f2      	beq.n	8004398 <SPI_EndRxTxTransaction+0x78>
 80043b2:	e000      	b.n	80043b6 <SPI_EndRxTxTransaction+0x96>
        break;
 80043b4:	bf00      	nop
  }

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3718      	adds	r7, #24
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}
 80043c0:	20000000 	.word	0x20000000
 80043c4:	165e9f81 	.word	0x165e9f81

080043c8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80043c8:	b580      	push	{r7, lr}
 80043ca:	b082      	sub	sp, #8
 80043cc:	af00      	add	r7, sp, #0
 80043ce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d101      	bne.n	80043da <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80043d6:	2301      	movs	r3, #1
 80043d8:	e041      	b.n	800445e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d106      	bne.n	80043f4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	2200      	movs	r2, #0
 80043ea:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 f839 	bl	8004466 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	2202      	movs	r2, #2
 80043f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681a      	ldr	r2, [r3, #0]
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3304      	adds	r3, #4
 8004404:	4619      	mov	r1, r3
 8004406:	4610      	mov	r0, r2
 8004408:	f000 f9c0 	bl	800478c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	2201      	movs	r2, #1
 8004410:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	2201      	movs	r2, #1
 8004418:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2201      	movs	r2, #1
 8004428:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	2201      	movs	r2, #1
 8004430:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2201      	movs	r2, #1
 8004450:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	2201      	movs	r2, #1
 8004458:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800445c:	2300      	movs	r3, #0
}
 800445e:	4618      	mov	r0, r3
 8004460:	3708      	adds	r7, #8
 8004462:	46bd      	mov	sp, r7
 8004464:	bd80      	pop	{r7, pc}

08004466 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8004466:	b480      	push	{r7}
 8004468:	b083      	sub	sp, #12
 800446a:	af00      	add	r7, sp, #0
 800446c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800446e:	bf00      	nop
 8004470:	370c      	adds	r7, #12
 8004472:	46bd      	mov	sp, r7
 8004474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004478:	4770      	bx	lr
	...

0800447c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800447c:	b480      	push	{r7}
 800447e:	b085      	sub	sp, #20
 8004480:	af00      	add	r7, sp, #0
 8004482:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800448a:	b2db      	uxtb	r3, r3
 800448c:	2b01      	cmp	r3, #1
 800448e:	d001      	beq.n	8004494 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8004490:	2301      	movs	r3, #1
 8004492:	e04e      	b.n	8004532 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	2202      	movs	r2, #2
 8004498:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	68da      	ldr	r2, [r3, #12]
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	681b      	ldr	r3, [r3, #0]
 80044a6:	f042 0201 	orr.w	r2, r2, #1
 80044aa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	681b      	ldr	r3, [r3, #0]
 80044b0:	4a23      	ldr	r2, [pc, #140]	@ (8004540 <HAL_TIM_Base_Start_IT+0xc4>)
 80044b2:	4293      	cmp	r3, r2
 80044b4:	d022      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044be:	d01d      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	4a1f      	ldr	r2, [pc, #124]	@ (8004544 <HAL_TIM_Base_Start_IT+0xc8>)
 80044c6:	4293      	cmp	r3, r2
 80044c8:	d018      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	4a1e      	ldr	r2, [pc, #120]	@ (8004548 <HAL_TIM_Base_Start_IT+0xcc>)
 80044d0:	4293      	cmp	r3, r2
 80044d2:	d013      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	4a1c      	ldr	r2, [pc, #112]	@ (800454c <HAL_TIM_Base_Start_IT+0xd0>)
 80044da:	4293      	cmp	r3, r2
 80044dc:	d00e      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4a1b      	ldr	r2, [pc, #108]	@ (8004550 <HAL_TIM_Base_Start_IT+0xd4>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d009      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	4a19      	ldr	r2, [pc, #100]	@ (8004554 <HAL_TIM_Base_Start_IT+0xd8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d004      	beq.n	80044fc <HAL_TIM_Base_Start_IT+0x80>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	4a18      	ldr	r2, [pc, #96]	@ (8004558 <HAL_TIM_Base_Start_IT+0xdc>)
 80044f8:	4293      	cmp	r3, r2
 80044fa:	d111      	bne.n	8004520 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	689b      	ldr	r3, [r3, #8]
 8004502:	f003 0307 	and.w	r3, r3, #7
 8004506:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004508:	68fb      	ldr	r3, [r7, #12]
 800450a:	2b06      	cmp	r3, #6
 800450c:	d010      	beq.n	8004530 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	681b      	ldr	r3, [r3, #0]
 8004512:	681a      	ldr	r2, [r3, #0]
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	f042 0201 	orr.w	r2, r2, #1
 800451c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800451e:	e007      	b.n	8004530 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8004520:	687b      	ldr	r3, [r7, #4]
 8004522:	681b      	ldr	r3, [r3, #0]
 8004524:	681a      	ldr	r2, [r3, #0]
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f042 0201 	orr.w	r2, r2, #1
 800452e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8004530:	2300      	movs	r3, #0
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop
 8004540:	40010000 	.word	0x40010000
 8004544:	40000400 	.word	0x40000400
 8004548:	40000800 	.word	0x40000800
 800454c:	40000c00 	.word	0x40000c00
 8004550:	40010400 	.word	0x40010400
 8004554:	40014000 	.word	0x40014000
 8004558:	40001800 	.word	0x40001800

0800455c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800455c:	b580      	push	{r7, lr}
 800455e:	b084      	sub	sp, #16
 8004560:	af00      	add	r7, sp, #0
 8004562:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	681b      	ldr	r3, [r3, #0]
 8004568:	68db      	ldr	r3, [r3, #12]
 800456a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	691b      	ldr	r3, [r3, #16]
 8004572:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8004574:	68bb      	ldr	r3, [r7, #8]
 8004576:	f003 0302 	and.w	r3, r3, #2
 800457a:	2b00      	cmp	r3, #0
 800457c:	d020      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	f003 0302 	and.w	r3, r3, #2
 8004584:	2b00      	cmp	r3, #0
 8004586:	d01b      	beq.n	80045c0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	f06f 0202 	mvn.w	r2, #2
 8004590:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	2201      	movs	r2, #1
 8004596:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	699b      	ldr	r3, [r3, #24]
 800459e:	f003 0303 	and.w	r3, r3, #3
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d003      	beq.n	80045ae <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80045a6:	6878      	ldr	r0, [r7, #4]
 80045a8:	f000 f8d2 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 80045ac:	e005      	b.n	80045ba <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80045ae:	6878      	ldr	r0, [r7, #4]
 80045b0:	f000 f8c4 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80045b4:	6878      	ldr	r0, [r7, #4]
 80045b6:	f000 f8d5 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	2200      	movs	r2, #0
 80045be:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80045c0:	68bb      	ldr	r3, [r7, #8]
 80045c2:	f003 0304 	and.w	r3, r3, #4
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d020      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	f003 0304 	and.w	r3, r3, #4
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d01b      	beq.n	800460c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	f06f 0204 	mvn.w	r2, #4
 80045dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2202      	movs	r2, #2
 80045e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	699b      	ldr	r3, [r3, #24]
 80045ea:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80045ee:	2b00      	cmp	r3, #0
 80045f0:	d003      	beq.n	80045fa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80045f2:	6878      	ldr	r0, [r7, #4]
 80045f4:	f000 f8ac 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 80045f8:	e005      	b.n	8004606 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80045fa:	6878      	ldr	r0, [r7, #4]
 80045fc:	f000 f89e 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004600:	6878      	ldr	r0, [r7, #4]
 8004602:	f000 f8af 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	2200      	movs	r2, #0
 800460a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800460c:	68bb      	ldr	r3, [r7, #8]
 800460e:	f003 0308 	and.w	r3, r3, #8
 8004612:	2b00      	cmp	r3, #0
 8004614:	d020      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f003 0308 	and.w	r3, r3, #8
 800461c:	2b00      	cmp	r3, #0
 800461e:	d01b      	beq.n	8004658 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	f06f 0208 	mvn.w	r2, #8
 8004628:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	2204      	movs	r2, #4
 800462e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	681b      	ldr	r3, [r3, #0]
 8004634:	69db      	ldr	r3, [r3, #28]
 8004636:	f003 0303 	and.w	r3, r3, #3
 800463a:	2b00      	cmp	r3, #0
 800463c:	d003      	beq.n	8004646 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f000 f886 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 8004644:	e005      	b.n	8004652 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004646:	6878      	ldr	r0, [r7, #4]
 8004648:	f000 f878 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800464c:	6878      	ldr	r0, [r7, #4]
 800464e:	f000 f889 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2200      	movs	r2, #0
 8004656:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004658:	68bb      	ldr	r3, [r7, #8]
 800465a:	f003 0310 	and.w	r3, r3, #16
 800465e:	2b00      	cmp	r3, #0
 8004660:	d020      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	f003 0310 	and.w	r3, r3, #16
 8004668:	2b00      	cmp	r3, #0
 800466a:	d01b      	beq.n	80046a4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	f06f 0210 	mvn.w	r2, #16
 8004674:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	2208      	movs	r2, #8
 800467a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	69db      	ldr	r3, [r3, #28]
 8004682:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004686:	2b00      	cmp	r3, #0
 8004688:	d003      	beq.n	8004692 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800468a:	6878      	ldr	r0, [r7, #4]
 800468c:	f000 f860 	bl	8004750 <HAL_TIM_IC_CaptureCallback>
 8004690:	e005      	b.n	800469e <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004692:	6878      	ldr	r0, [r7, #4]
 8004694:	f000 f852 	bl	800473c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004698:	6878      	ldr	r0, [r7, #4]
 800469a:	f000 f863 	bl	8004764 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	2200      	movs	r2, #0
 80046a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00c      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	f003 0301 	and.w	r3, r3, #1
 80046b4:	2b00      	cmp	r3, #0
 80046b6:	d007      	beq.n	80046c8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	f06f 0201 	mvn.w	r2, #1
 80046c0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80046c2:	6878      	ldr	r0, [r7, #4]
 80046c4:	f7fc fd14 	bl	80010f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b00      	cmp	r3, #0
 80046d0:	d00c      	beq.n	80046ec <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046d8:	2b00      	cmp	r3, #0
 80046da:	d007      	beq.n	80046ec <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80046e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 f900 	bl	80048ec <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80046ec:	68bb      	ldr	r3, [r7, #8]
 80046ee:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d00c      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 80046f6:	68fb      	ldr	r3, [r7, #12]
 80046f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80046fc:	2b00      	cmp	r3, #0
 80046fe:	d007      	beq.n	8004710 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004700:	687b      	ldr	r3, [r7, #4]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004708:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800470a:	6878      	ldr	r0, [r7, #4]
 800470c:	f000 f834 	bl	8004778 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004710:	68bb      	ldr	r3, [r7, #8]
 8004712:	f003 0320 	and.w	r3, r3, #32
 8004716:	2b00      	cmp	r3, #0
 8004718:	d00c      	beq.n	8004734 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800471a:	68fb      	ldr	r3, [r7, #12]
 800471c:	f003 0320 	and.w	r3, r3, #32
 8004720:	2b00      	cmp	r3, #0
 8004722:	d007      	beq.n	8004734 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	681b      	ldr	r3, [r3, #0]
 8004728:	f06f 0220 	mvn.w	r2, #32
 800472c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800472e:	6878      	ldr	r0, [r7, #4]
 8004730:	f000 f8d2 	bl	80048d8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004734:	bf00      	nop
 8004736:	3710      	adds	r7, #16
 8004738:	46bd      	mov	sp, r7
 800473a:	bd80      	pop	{r7, pc}

0800473c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800473c:	b480      	push	{r7}
 800473e:	b083      	sub	sp, #12
 8004740:	af00      	add	r7, sp, #0
 8004742:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004744:	bf00      	nop
 8004746:	370c      	adds	r7, #12
 8004748:	46bd      	mov	sp, r7
 800474a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800474e:	4770      	bx	lr

08004750 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004750:	b480      	push	{r7}
 8004752:	b083      	sub	sp, #12
 8004754:	af00      	add	r7, sp, #0
 8004756:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004758:	bf00      	nop
 800475a:	370c      	adds	r7, #12
 800475c:	46bd      	mov	sp, r7
 800475e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004762:	4770      	bx	lr

08004764 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004764:	b480      	push	{r7}
 8004766:	b083      	sub	sp, #12
 8004768:	af00      	add	r7, sp, #0
 800476a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800476c:	bf00      	nop
 800476e:	370c      	adds	r7, #12
 8004770:	46bd      	mov	sp, r7
 8004772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004776:	4770      	bx	lr

08004778 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004778:	b480      	push	{r7}
 800477a:	b083      	sub	sp, #12
 800477c:	af00      	add	r7, sp, #0
 800477e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004780:	bf00      	nop
 8004782:	370c      	adds	r7, #12
 8004784:	46bd      	mov	sp, r7
 8004786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800478a:	4770      	bx	lr

0800478c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800478c:	b480      	push	{r7}
 800478e:	b085      	sub	sp, #20
 8004790:	af00      	add	r7, sp, #0
 8004792:	6078      	str	r0, [r7, #4]
 8004794:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	4a43      	ldr	r2, [pc, #268]	@ (80048ac <TIM_Base_SetConfig+0x120>)
 80047a0:	4293      	cmp	r3, r2
 80047a2:	d013      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047aa:	d00f      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	4a40      	ldr	r2, [pc, #256]	@ (80048b0 <TIM_Base_SetConfig+0x124>)
 80047b0:	4293      	cmp	r3, r2
 80047b2:	d00b      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	4a3f      	ldr	r2, [pc, #252]	@ (80048b4 <TIM_Base_SetConfig+0x128>)
 80047b8:	4293      	cmp	r3, r2
 80047ba:	d007      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	4a3e      	ldr	r2, [pc, #248]	@ (80048b8 <TIM_Base_SetConfig+0x12c>)
 80047c0:	4293      	cmp	r3, r2
 80047c2:	d003      	beq.n	80047cc <TIM_Base_SetConfig+0x40>
 80047c4:	687b      	ldr	r3, [r7, #4]
 80047c6:	4a3d      	ldr	r2, [pc, #244]	@ (80048bc <TIM_Base_SetConfig+0x130>)
 80047c8:	4293      	cmp	r3, r2
 80047ca:	d108      	bne.n	80047de <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80047d2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80047d4:	683b      	ldr	r3, [r7, #0]
 80047d6:	685b      	ldr	r3, [r3, #4]
 80047d8:	68fa      	ldr	r2, [r7, #12]
 80047da:	4313      	orrs	r3, r2
 80047dc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	4a32      	ldr	r2, [pc, #200]	@ (80048ac <TIM_Base_SetConfig+0x120>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d02b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047e6:	687b      	ldr	r3, [r7, #4]
 80047e8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80047ec:	d027      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	4a2f      	ldr	r2, [pc, #188]	@ (80048b0 <TIM_Base_SetConfig+0x124>)
 80047f2:	4293      	cmp	r3, r2
 80047f4:	d023      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	4a2e      	ldr	r2, [pc, #184]	@ (80048b4 <TIM_Base_SetConfig+0x128>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d01f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	4a2d      	ldr	r2, [pc, #180]	@ (80048b8 <TIM_Base_SetConfig+0x12c>)
 8004802:	4293      	cmp	r3, r2
 8004804:	d01b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	4a2c      	ldr	r2, [pc, #176]	@ (80048bc <TIM_Base_SetConfig+0x130>)
 800480a:	4293      	cmp	r3, r2
 800480c:	d017      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	4a2b      	ldr	r2, [pc, #172]	@ (80048c0 <TIM_Base_SetConfig+0x134>)
 8004812:	4293      	cmp	r3, r2
 8004814:	d013      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	4a2a      	ldr	r2, [pc, #168]	@ (80048c4 <TIM_Base_SetConfig+0x138>)
 800481a:	4293      	cmp	r3, r2
 800481c:	d00f      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800481e:	687b      	ldr	r3, [r7, #4]
 8004820:	4a29      	ldr	r2, [pc, #164]	@ (80048c8 <TIM_Base_SetConfig+0x13c>)
 8004822:	4293      	cmp	r3, r2
 8004824:	d00b      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	4a28      	ldr	r2, [pc, #160]	@ (80048cc <TIM_Base_SetConfig+0x140>)
 800482a:	4293      	cmp	r3, r2
 800482c:	d007      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 800482e:	687b      	ldr	r3, [r7, #4]
 8004830:	4a27      	ldr	r2, [pc, #156]	@ (80048d0 <TIM_Base_SetConfig+0x144>)
 8004832:	4293      	cmp	r3, r2
 8004834:	d003      	beq.n	800483e <TIM_Base_SetConfig+0xb2>
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	4a26      	ldr	r2, [pc, #152]	@ (80048d4 <TIM_Base_SetConfig+0x148>)
 800483a:	4293      	cmp	r3, r2
 800483c:	d108      	bne.n	8004850 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004844:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004846:	683b      	ldr	r3, [r7, #0]
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	68fa      	ldr	r2, [r7, #12]
 800484c:	4313      	orrs	r3, r2
 800484e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004850:	68fb      	ldr	r3, [r7, #12]
 8004852:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004856:	683b      	ldr	r3, [r7, #0]
 8004858:	695b      	ldr	r3, [r3, #20]
 800485a:	4313      	orrs	r3, r2
 800485c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	689a      	ldr	r2, [r3, #8]
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004866:	683b      	ldr	r3, [r7, #0]
 8004868:	681a      	ldr	r2, [r3, #0]
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	4a0e      	ldr	r2, [pc, #56]	@ (80048ac <TIM_Base_SetConfig+0x120>)
 8004872:	4293      	cmp	r3, r2
 8004874:	d003      	beq.n	800487e <TIM_Base_SetConfig+0xf2>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	4a10      	ldr	r2, [pc, #64]	@ (80048bc <TIM_Base_SetConfig+0x130>)
 800487a:	4293      	cmp	r3, r2
 800487c:	d103      	bne.n	8004886 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	691a      	ldr	r2, [r3, #16]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	681b      	ldr	r3, [r3, #0]
 800488a:	f043 0204 	orr.w	r2, r3, #4
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2201      	movs	r2, #1
 8004896:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	68fa      	ldr	r2, [r7, #12]
 800489c:	601a      	str	r2, [r3, #0]
}
 800489e:	bf00      	nop
 80048a0:	3714      	adds	r7, #20
 80048a2:	46bd      	mov	sp, r7
 80048a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048a8:	4770      	bx	lr
 80048aa:	bf00      	nop
 80048ac:	40010000 	.word	0x40010000
 80048b0:	40000400 	.word	0x40000400
 80048b4:	40000800 	.word	0x40000800
 80048b8:	40000c00 	.word	0x40000c00
 80048bc:	40010400 	.word	0x40010400
 80048c0:	40014000 	.word	0x40014000
 80048c4:	40014400 	.word	0x40014400
 80048c8:	40014800 	.word	0x40014800
 80048cc:	40001800 	.word	0x40001800
 80048d0:	40001c00 	.word	0x40001c00
 80048d4:	40002000 	.word	0x40002000

080048d8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80048d8:	b480      	push	{r7}
 80048da:	b083      	sub	sp, #12
 80048dc:	af00      	add	r7, sp, #0
 80048de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80048e0:	bf00      	nop
 80048e2:	370c      	adds	r7, #12
 80048e4:	46bd      	mov	sp, r7
 80048e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048ea:	4770      	bx	lr

080048ec <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80048ec:	b480      	push	{r7}
 80048ee:	b083      	sub	sp, #12
 80048f0:	af00      	add	r7, sp, #0
 80048f2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80048f4:	bf00      	nop
 80048f6:	370c      	adds	r7, #12
 80048f8:	46bd      	mov	sp, r7
 80048fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048fe:	4770      	bx	lr

08004900 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004900:	b580      	push	{r7, lr}
 8004902:	b082      	sub	sp, #8
 8004904:	af00      	add	r7, sp, #0
 8004906:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2b00      	cmp	r3, #0
 800490c:	d101      	bne.n	8004912 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800490e:	2301      	movs	r3, #1
 8004910:	e042      	b.n	8004998 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004912:	687b      	ldr	r3, [r7, #4]
 8004914:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004918:	b2db      	uxtb	r3, r3
 800491a:	2b00      	cmp	r3, #0
 800491c:	d106      	bne.n	800492c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	2200      	movs	r2, #0
 8004922:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004926:	6878      	ldr	r0, [r7, #4]
 8004928:	f7fe f898 	bl	8002a5c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800492c:	687b      	ldr	r3, [r7, #4]
 800492e:	2224      	movs	r2, #36	@ 0x24
 8004930:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	68da      	ldr	r2, [r3, #12]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004942:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004944:	6878      	ldr	r0, [r7, #4]
 8004946:	f000 f973 	bl	8004c30 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	691a      	ldr	r2, [r3, #16]
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	681b      	ldr	r3, [r3, #0]
 8004954:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004958:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	681b      	ldr	r3, [r3, #0]
 800495e:	695a      	ldr	r2, [r3, #20]
 8004960:	687b      	ldr	r3, [r7, #4]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004968:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	681b      	ldr	r3, [r3, #0]
 800496e:	68da      	ldr	r2, [r3, #12]
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	681b      	ldr	r3, [r3, #0]
 8004974:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004978:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800497a:	687b      	ldr	r3, [r7, #4]
 800497c:	2200      	movs	r2, #0
 800497e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	2220      	movs	r2, #32
 8004984:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	2220      	movs	r2, #32
 800498c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8004996:	2300      	movs	r3, #0
}
 8004998:	4618      	mov	r0, r3
 800499a:	3708      	adds	r7, #8
 800499c:	46bd      	mov	sp, r7
 800499e:	bd80      	pop	{r7, pc}

080049a0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80049a0:	b580      	push	{r7, lr}
 80049a2:	b08a      	sub	sp, #40	@ 0x28
 80049a4:	af02      	add	r7, sp, #8
 80049a6:	60f8      	str	r0, [r7, #12]
 80049a8:	60b9      	str	r1, [r7, #8]
 80049aa:	603b      	str	r3, [r7, #0]
 80049ac:	4613      	mov	r3, r2
 80049ae:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80049b0:	2300      	movs	r3, #0
 80049b2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80049ba:	b2db      	uxtb	r3, r3
 80049bc:	2b20      	cmp	r3, #32
 80049be:	d175      	bne.n	8004aac <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80049c0:	68bb      	ldr	r3, [r7, #8]
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d002      	beq.n	80049cc <HAL_UART_Transmit+0x2c>
 80049c6:	88fb      	ldrh	r3, [r7, #6]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d101      	bne.n	80049d0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80049cc:	2301      	movs	r3, #1
 80049ce:	e06e      	b.n	8004aae <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	2200      	movs	r2, #0
 80049d4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80049d6:	68fb      	ldr	r3, [r7, #12]
 80049d8:	2221      	movs	r2, #33	@ 0x21
 80049da:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80049de:	f7fe fa23 	bl	8002e28 <HAL_GetTick>
 80049e2:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80049e4:	68fb      	ldr	r3, [r7, #12]
 80049e6:	88fa      	ldrh	r2, [r7, #6]
 80049e8:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	88fa      	ldrh	r2, [r7, #6]
 80049ee:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80049f0:	68fb      	ldr	r3, [r7, #12]
 80049f2:	689b      	ldr	r3, [r3, #8]
 80049f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80049f8:	d108      	bne.n	8004a0c <HAL_UART_Transmit+0x6c>
 80049fa:	68fb      	ldr	r3, [r7, #12]
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	2b00      	cmp	r3, #0
 8004a00:	d104      	bne.n	8004a0c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004a02:	2300      	movs	r3, #0
 8004a04:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004a06:	68bb      	ldr	r3, [r7, #8]
 8004a08:	61bb      	str	r3, [r7, #24]
 8004a0a:	e003      	b.n	8004a14 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004a0c:	68bb      	ldr	r3, [r7, #8]
 8004a0e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004a10:	2300      	movs	r3, #0
 8004a12:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004a14:	e02e      	b.n	8004a74 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004a16:	683b      	ldr	r3, [r7, #0]
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	697b      	ldr	r3, [r7, #20]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	2180      	movs	r1, #128	@ 0x80
 8004a20:	68f8      	ldr	r0, [r7, #12]
 8004a22:	f000 f848 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a26:	4603      	mov	r3, r0
 8004a28:	2b00      	cmp	r3, #0
 8004a2a:	d005      	beq.n	8004a38 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004a2c:	68fb      	ldr	r3, [r7, #12]
 8004a2e:	2220      	movs	r2, #32
 8004a30:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004a34:	2303      	movs	r3, #3
 8004a36:	e03a      	b.n	8004aae <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004a38:	69fb      	ldr	r3, [r7, #28]
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d10b      	bne.n	8004a56 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004a3e:	69bb      	ldr	r3, [r7, #24]
 8004a40:	881b      	ldrh	r3, [r3, #0]
 8004a42:	461a      	mov	r2, r3
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004a4c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004a4e:	69bb      	ldr	r3, [r7, #24]
 8004a50:	3302      	adds	r3, #2
 8004a52:	61bb      	str	r3, [r7, #24]
 8004a54:	e007      	b.n	8004a66 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004a56:	69fb      	ldr	r3, [r7, #28]
 8004a58:	781a      	ldrb	r2, [r3, #0]
 8004a5a:	68fb      	ldr	r3, [r7, #12]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004a60:	69fb      	ldr	r3, [r7, #28]
 8004a62:	3301      	adds	r3, #1
 8004a64:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004a66:	68fb      	ldr	r3, [r7, #12]
 8004a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a6a:	b29b      	uxth	r3, r3
 8004a6c:	3b01      	subs	r3, #1
 8004a6e:	b29a      	uxth	r2, r3
 8004a70:	68fb      	ldr	r3, [r7, #12]
 8004a72:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004a78:	b29b      	uxth	r3, r3
 8004a7a:	2b00      	cmp	r3, #0
 8004a7c:	d1cb      	bne.n	8004a16 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004a7e:	683b      	ldr	r3, [r7, #0]
 8004a80:	9300      	str	r3, [sp, #0]
 8004a82:	697b      	ldr	r3, [r7, #20]
 8004a84:	2200      	movs	r2, #0
 8004a86:	2140      	movs	r1, #64	@ 0x40
 8004a88:	68f8      	ldr	r0, [r7, #12]
 8004a8a:	f000 f814 	bl	8004ab6 <UART_WaitOnFlagUntilTimeout>
 8004a8e:	4603      	mov	r3, r0
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d005      	beq.n	8004aa0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8004a94:	68fb      	ldr	r3, [r7, #12]
 8004a96:	2220      	movs	r2, #32
 8004a98:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a9c:	2303      	movs	r3, #3
 8004a9e:	e006      	b.n	8004aae <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004aa0:	68fb      	ldr	r3, [r7, #12]
 8004aa2:	2220      	movs	r2, #32
 8004aa4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004aa8:	2300      	movs	r3, #0
 8004aaa:	e000      	b.n	8004aae <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004aac:	2302      	movs	r3, #2
  }
}
 8004aae:	4618      	mov	r0, r3
 8004ab0:	3720      	adds	r7, #32
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bd80      	pop	{r7, pc}

08004ab6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004ab6:	b580      	push	{r7, lr}
 8004ab8:	b086      	sub	sp, #24
 8004aba:	af00      	add	r7, sp, #0
 8004abc:	60f8      	str	r0, [r7, #12]
 8004abe:	60b9      	str	r1, [r7, #8]
 8004ac0:	603b      	str	r3, [r7, #0]
 8004ac2:	4613      	mov	r3, r2
 8004ac4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004ac6:	e03b      	b.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004ac8:	6a3b      	ldr	r3, [r7, #32]
 8004aca:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004ace:	d037      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004ad0:	f7fe f9aa 	bl	8002e28 <HAL_GetTick>
 8004ad4:	4602      	mov	r2, r0
 8004ad6:	683b      	ldr	r3, [r7, #0]
 8004ad8:	1ad3      	subs	r3, r2, r3
 8004ada:	6a3a      	ldr	r2, [r7, #32]
 8004adc:	429a      	cmp	r2, r3
 8004ade:	d302      	bcc.n	8004ae6 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ae0:	6a3b      	ldr	r3, [r7, #32]
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d101      	bne.n	8004aea <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ae6:	2303      	movs	r3, #3
 8004ae8:	e03a      	b.n	8004b60 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	68db      	ldr	r3, [r3, #12]
 8004af0:	f003 0304 	and.w	r3, r3, #4
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d023      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004af8:	68bb      	ldr	r3, [r7, #8]
 8004afa:	2b80      	cmp	r3, #128	@ 0x80
 8004afc:	d020      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004afe:	68bb      	ldr	r3, [r7, #8]
 8004b00:	2b40      	cmp	r3, #64	@ 0x40
 8004b02:	d01d      	beq.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004b04:	68fb      	ldr	r3, [r7, #12]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	681b      	ldr	r3, [r3, #0]
 8004b0a:	f003 0308 	and.w	r3, r3, #8
 8004b0e:	2b08      	cmp	r3, #8
 8004b10:	d116      	bne.n	8004b40 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004b12:	2300      	movs	r3, #0
 8004b14:	617b      	str	r3, [r7, #20]
 8004b16:	68fb      	ldr	r3, [r7, #12]
 8004b18:	681b      	ldr	r3, [r3, #0]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	617b      	str	r3, [r7, #20]
 8004b1e:	68fb      	ldr	r3, [r7, #12]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685b      	ldr	r3, [r3, #4]
 8004b24:	617b      	str	r3, [r7, #20]
 8004b26:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004b28:	68f8      	ldr	r0, [r7, #12]
 8004b2a:	f000 f81d 	bl	8004b68 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004b2e:	68fb      	ldr	r3, [r7, #12]
 8004b30:	2208      	movs	r2, #8
 8004b32:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004b34:	68fb      	ldr	r3, [r7, #12]
 8004b36:	2200      	movs	r2, #0
 8004b38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004b3c:	2301      	movs	r3, #1
 8004b3e:	e00f      	b.n	8004b60 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b40:	68fb      	ldr	r3, [r7, #12]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	681a      	ldr	r2, [r3, #0]
 8004b46:	68bb      	ldr	r3, [r7, #8]
 8004b48:	4013      	ands	r3, r2
 8004b4a:	68ba      	ldr	r2, [r7, #8]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	bf0c      	ite	eq
 8004b50:	2301      	moveq	r3, #1
 8004b52:	2300      	movne	r3, #0
 8004b54:	b2db      	uxtb	r3, r3
 8004b56:	461a      	mov	r2, r3
 8004b58:	79fb      	ldrb	r3, [r7, #7]
 8004b5a:	429a      	cmp	r2, r3
 8004b5c:	d0b4      	beq.n	8004ac8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004b5e:	2300      	movs	r3, #0
}
 8004b60:	4618      	mov	r0, r3
 8004b62:	3718      	adds	r7, #24
 8004b64:	46bd      	mov	sp, r7
 8004b66:	bd80      	pop	{r7, pc}

08004b68 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004b68:	b480      	push	{r7}
 8004b6a:	b095      	sub	sp, #84	@ 0x54
 8004b6c:	af00      	add	r7, sp, #0
 8004b6e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	681b      	ldr	r3, [r3, #0]
 8004b74:	330c      	adds	r3, #12
 8004b76:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b78:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004b7a:	e853 3f00 	ldrex	r3, [r3]
 8004b7e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004b80:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004b82:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004b86:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	330c      	adds	r3, #12
 8004b8e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004b90:	643a      	str	r2, [r7, #64]	@ 0x40
 8004b92:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b94:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004b96:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004b98:	e841 2300 	strex	r3, r2, [r1]
 8004b9c:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004b9e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004ba0:	2b00      	cmp	r3, #0
 8004ba2:	d1e5      	bne.n	8004b70 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ba4:	687b      	ldr	r3, [r7, #4]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	3314      	adds	r3, #20
 8004baa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bac:	6a3b      	ldr	r3, [r7, #32]
 8004bae:	e853 3f00 	ldrex	r3, [r3]
 8004bb2:	61fb      	str	r3, [r7, #28]
   return(result);
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	f023 0301 	bic.w	r3, r3, #1
 8004bba:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	681b      	ldr	r3, [r3, #0]
 8004bc0:	3314      	adds	r3, #20
 8004bc2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004bc4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004bc6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bc8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004bca:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004bcc:	e841 2300 	strex	r3, r2, [r1]
 8004bd0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004bd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d1e5      	bne.n	8004ba4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004bdc:	2b01      	cmp	r3, #1
 8004bde:	d119      	bne.n	8004c14 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	330c      	adds	r3, #12
 8004be6:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004be8:	68fb      	ldr	r3, [r7, #12]
 8004bea:	e853 3f00 	ldrex	r3, [r3]
 8004bee:	60bb      	str	r3, [r7, #8]
   return(result);
 8004bf0:	68bb      	ldr	r3, [r7, #8]
 8004bf2:	f023 0310 	bic.w	r3, r3, #16
 8004bf6:	647b      	str	r3, [r7, #68]	@ 0x44
 8004bf8:	687b      	ldr	r3, [r7, #4]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	330c      	adds	r3, #12
 8004bfe:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c00:	61ba      	str	r2, [r7, #24]
 8004c02:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c04:	6979      	ldr	r1, [r7, #20]
 8004c06:	69ba      	ldr	r2, [r7, #24]
 8004c08:	e841 2300 	strex	r3, r2, [r1]
 8004c0c:	613b      	str	r3, [r7, #16]
   return(result);
 8004c0e:	693b      	ldr	r3, [r7, #16]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	d1e5      	bne.n	8004be0 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	2220      	movs	r2, #32
 8004c18:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	2200      	movs	r2, #0
 8004c20:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004c22:	bf00      	nop
 8004c24:	3754      	adds	r7, #84	@ 0x54
 8004c26:	46bd      	mov	sp, r7
 8004c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c2c:	4770      	bx	lr
	...

08004c30 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004c30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004c34:	b0c0      	sub	sp, #256	@ 0x100
 8004c36:	af00      	add	r7, sp, #0
 8004c38:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004c3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	691b      	ldr	r3, [r3, #16]
 8004c44:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004c48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c4c:	68d9      	ldr	r1, [r3, #12]
 8004c4e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c52:	681a      	ldr	r2, [r3, #0]
 8004c54:	ea40 0301 	orr.w	r3, r0, r1
 8004c58:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004c5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c5e:	689a      	ldr	r2, [r3, #8]
 8004c60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c64:	691b      	ldr	r3, [r3, #16]
 8004c66:	431a      	orrs	r2, r3
 8004c68:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c6c:	695b      	ldr	r3, [r3, #20]
 8004c6e:	431a      	orrs	r2, r3
 8004c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	4313      	orrs	r3, r2
 8004c78:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004c7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	68db      	ldr	r3, [r3, #12]
 8004c84:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004c88:	f021 010c 	bic.w	r1, r1, #12
 8004c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c90:	681a      	ldr	r2, [r3, #0]
 8004c92:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8004c96:	430b      	orrs	r3, r1
 8004c98:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004c9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	695b      	ldr	r3, [r3, #20]
 8004ca2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8004ca6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004caa:	6999      	ldr	r1, [r3, #24]
 8004cac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cb0:	681a      	ldr	r2, [r3, #0]
 8004cb2:	ea40 0301 	orr.w	r3, r0, r1
 8004cb6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004cb8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cbc:	681a      	ldr	r2, [r3, #0]
 8004cbe:	4b8f      	ldr	r3, [pc, #572]	@ (8004efc <UART_SetConfig+0x2cc>)
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d005      	beq.n	8004cd0 <UART_SetConfig+0xa0>
 8004cc4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004cc8:	681a      	ldr	r2, [r3, #0]
 8004cca:	4b8d      	ldr	r3, [pc, #564]	@ (8004f00 <UART_SetConfig+0x2d0>)
 8004ccc:	429a      	cmp	r2, r3
 8004cce:	d104      	bne.n	8004cda <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8004cd0:	f7ff f81a 	bl	8003d08 <HAL_RCC_GetPCLK2Freq>
 8004cd4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8004cd8:	e003      	b.n	8004ce2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004cda:	f7ff f801 	bl	8003ce0 <HAL_RCC_GetPCLK1Freq>
 8004cde:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004ce2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ce6:	69db      	ldr	r3, [r3, #28]
 8004ce8:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8004cec:	f040 810c 	bne.w	8004f08 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004cf0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004cf4:	2200      	movs	r2, #0
 8004cf6:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8004cfa:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8004cfe:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004d02:	4622      	mov	r2, r4
 8004d04:	462b      	mov	r3, r5
 8004d06:	1891      	adds	r1, r2, r2
 8004d08:	65b9      	str	r1, [r7, #88]	@ 0x58
 8004d0a:	415b      	adcs	r3, r3
 8004d0c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8004d0e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004d12:	4621      	mov	r1, r4
 8004d14:	eb12 0801 	adds.w	r8, r2, r1
 8004d18:	4629      	mov	r1, r5
 8004d1a:	eb43 0901 	adc.w	r9, r3, r1
 8004d1e:	f04f 0200 	mov.w	r2, #0
 8004d22:	f04f 0300 	mov.w	r3, #0
 8004d26:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004d2a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004d2e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004d32:	4690      	mov	r8, r2
 8004d34:	4699      	mov	r9, r3
 8004d36:	4623      	mov	r3, r4
 8004d38:	eb18 0303 	adds.w	r3, r8, r3
 8004d3c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004d40:	462b      	mov	r3, r5
 8004d42:	eb49 0303 	adc.w	r3, r9, r3
 8004d46:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004d4e:	685b      	ldr	r3, [r3, #4]
 8004d50:	2200      	movs	r2, #0
 8004d52:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004d56:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004d5a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004d5e:	460b      	mov	r3, r1
 8004d60:	18db      	adds	r3, r3, r3
 8004d62:	653b      	str	r3, [r7, #80]	@ 0x50
 8004d64:	4613      	mov	r3, r2
 8004d66:	eb42 0303 	adc.w	r3, r2, r3
 8004d6a:	657b      	str	r3, [r7, #84]	@ 0x54
 8004d6c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004d70:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004d74:	f7fb fa7c 	bl	8000270 <__aeabi_uldivmod>
 8004d78:	4602      	mov	r2, r0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4b61      	ldr	r3, [pc, #388]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004d7e:	fba3 2302 	umull	r2, r3, r3, r2
 8004d82:	095b      	lsrs	r3, r3, #5
 8004d84:	011c      	lsls	r4, r3, #4
 8004d86:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004d8a:	2200      	movs	r2, #0
 8004d8c:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004d90:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8004d94:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004d98:	4642      	mov	r2, r8
 8004d9a:	464b      	mov	r3, r9
 8004d9c:	1891      	adds	r1, r2, r2
 8004d9e:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004da0:	415b      	adcs	r3, r3
 8004da2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004da4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004da8:	4641      	mov	r1, r8
 8004daa:	eb12 0a01 	adds.w	sl, r2, r1
 8004dae:	4649      	mov	r1, r9
 8004db0:	eb43 0b01 	adc.w	fp, r3, r1
 8004db4:	f04f 0200 	mov.w	r2, #0
 8004db8:	f04f 0300 	mov.w	r3, #0
 8004dbc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8004dc0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8004dc4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8004dc8:	4692      	mov	sl, r2
 8004dca:	469b      	mov	fp, r3
 8004dcc:	4643      	mov	r3, r8
 8004dce:	eb1a 0303 	adds.w	r3, sl, r3
 8004dd2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004dd6:	464b      	mov	r3, r9
 8004dd8:	eb4b 0303 	adc.w	r3, fp, r3
 8004ddc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004de0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004de4:	685b      	ldr	r3, [r3, #4]
 8004de6:	2200      	movs	r2, #0
 8004de8:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004dec:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004df0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004df4:	460b      	mov	r3, r1
 8004df6:	18db      	adds	r3, r3, r3
 8004df8:	643b      	str	r3, [r7, #64]	@ 0x40
 8004dfa:	4613      	mov	r3, r2
 8004dfc:	eb42 0303 	adc.w	r3, r2, r3
 8004e00:	647b      	str	r3, [r7, #68]	@ 0x44
 8004e02:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004e06:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8004e0a:	f7fb fa31 	bl	8000270 <__aeabi_uldivmod>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	4b3b      	ldr	r3, [pc, #236]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e16:	fba3 2301 	umull	r2, r3, r3, r1
 8004e1a:	095b      	lsrs	r3, r3, #5
 8004e1c:	2264      	movs	r2, #100	@ 0x64
 8004e1e:	fb02 f303 	mul.w	r3, r2, r3
 8004e22:	1acb      	subs	r3, r1, r3
 8004e24:	00db      	lsls	r3, r3, #3
 8004e26:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004e2a:	4b36      	ldr	r3, [pc, #216]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004e2c:	fba3 2302 	umull	r2, r3, r3, r2
 8004e30:	095b      	lsrs	r3, r3, #5
 8004e32:	005b      	lsls	r3, r3, #1
 8004e34:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004e38:	441c      	add	r4, r3
 8004e3a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004e3e:	2200      	movs	r2, #0
 8004e40:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004e44:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004e48:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004e4c:	4642      	mov	r2, r8
 8004e4e:	464b      	mov	r3, r9
 8004e50:	1891      	adds	r1, r2, r2
 8004e52:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004e54:	415b      	adcs	r3, r3
 8004e56:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004e58:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004e5c:	4641      	mov	r1, r8
 8004e5e:	1851      	adds	r1, r2, r1
 8004e60:	6339      	str	r1, [r7, #48]	@ 0x30
 8004e62:	4649      	mov	r1, r9
 8004e64:	414b      	adcs	r3, r1
 8004e66:	637b      	str	r3, [r7, #52]	@ 0x34
 8004e68:	f04f 0200 	mov.w	r2, #0
 8004e6c:	f04f 0300 	mov.w	r3, #0
 8004e70:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004e74:	4659      	mov	r1, fp
 8004e76:	00cb      	lsls	r3, r1, #3
 8004e78:	4651      	mov	r1, sl
 8004e7a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004e7e:	4651      	mov	r1, sl
 8004e80:	00ca      	lsls	r2, r1, #3
 8004e82:	4610      	mov	r0, r2
 8004e84:	4619      	mov	r1, r3
 8004e86:	4603      	mov	r3, r0
 8004e88:	4642      	mov	r2, r8
 8004e8a:	189b      	adds	r3, r3, r2
 8004e8c:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004e90:	464b      	mov	r3, r9
 8004e92:	460a      	mov	r2, r1
 8004e94:	eb42 0303 	adc.w	r3, r2, r3
 8004e98:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ea0:	685b      	ldr	r3, [r3, #4]
 8004ea2:	2200      	movs	r2, #0
 8004ea4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004ea8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004eac:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	18db      	adds	r3, r3, r3
 8004eb4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8004eb6:	4613      	mov	r3, r2
 8004eb8:	eb42 0303 	adc.w	r3, r2, r3
 8004ebc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8004ebe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004ec2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8004ec6:	f7fb f9d3 	bl	8000270 <__aeabi_uldivmod>
 8004eca:	4602      	mov	r2, r0
 8004ecc:	460b      	mov	r3, r1
 8004ece:	4b0d      	ldr	r3, [pc, #52]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ed0:	fba3 1302 	umull	r1, r3, r3, r2
 8004ed4:	095b      	lsrs	r3, r3, #5
 8004ed6:	2164      	movs	r1, #100	@ 0x64
 8004ed8:	fb01 f303 	mul.w	r3, r1, r3
 8004edc:	1ad3      	subs	r3, r2, r3
 8004ede:	00db      	lsls	r3, r3, #3
 8004ee0:	3332      	adds	r3, #50	@ 0x32
 8004ee2:	4a08      	ldr	r2, [pc, #32]	@ (8004f04 <UART_SetConfig+0x2d4>)
 8004ee4:	fba2 2303 	umull	r2, r3, r2, r3
 8004ee8:	095b      	lsrs	r3, r3, #5
 8004eea:	f003 0207 	and.w	r2, r3, #7
 8004eee:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ef2:	681b      	ldr	r3, [r3, #0]
 8004ef4:	4422      	add	r2, r4
 8004ef6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004ef8:	e106      	b.n	8005108 <UART_SetConfig+0x4d8>
 8004efa:	bf00      	nop
 8004efc:	40011000 	.word	0x40011000
 8004f00:	40011400 	.word	0x40011400
 8004f04:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004f08:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f0c:	2200      	movs	r2, #0
 8004f0e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004f12:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004f16:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004f1a:	4642      	mov	r2, r8
 8004f1c:	464b      	mov	r3, r9
 8004f1e:	1891      	adds	r1, r2, r2
 8004f20:	6239      	str	r1, [r7, #32]
 8004f22:	415b      	adcs	r3, r3
 8004f24:	627b      	str	r3, [r7, #36]	@ 0x24
 8004f26:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004f2a:	4641      	mov	r1, r8
 8004f2c:	1854      	adds	r4, r2, r1
 8004f2e:	4649      	mov	r1, r9
 8004f30:	eb43 0501 	adc.w	r5, r3, r1
 8004f34:	f04f 0200 	mov.w	r2, #0
 8004f38:	f04f 0300 	mov.w	r3, #0
 8004f3c:	00eb      	lsls	r3, r5, #3
 8004f3e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004f42:	00e2      	lsls	r2, r4, #3
 8004f44:	4614      	mov	r4, r2
 8004f46:	461d      	mov	r5, r3
 8004f48:	4643      	mov	r3, r8
 8004f4a:	18e3      	adds	r3, r4, r3
 8004f4c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004f50:	464b      	mov	r3, r9
 8004f52:	eb45 0303 	adc.w	r3, r5, r3
 8004f56:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004f5a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004f5e:	685b      	ldr	r3, [r3, #4]
 8004f60:	2200      	movs	r2, #0
 8004f62:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004f66:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004f6a:	f04f 0200 	mov.w	r2, #0
 8004f6e:	f04f 0300 	mov.w	r3, #0
 8004f72:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004f76:	4629      	mov	r1, r5
 8004f78:	008b      	lsls	r3, r1, #2
 8004f7a:	4621      	mov	r1, r4
 8004f7c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004f80:	4621      	mov	r1, r4
 8004f82:	008a      	lsls	r2, r1, #2
 8004f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004f88:	f7fb f972 	bl	8000270 <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b60      	ldr	r3, [pc, #384]	@ (8005114 <UART_SetConfig+0x4e4>)
 8004f92:	fba3 2302 	umull	r2, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	011c      	lsls	r4, r3, #4
 8004f9a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8004fa4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004fa8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004fac:	4642      	mov	r2, r8
 8004fae:	464b      	mov	r3, r9
 8004fb0:	1891      	adds	r1, r2, r2
 8004fb2:	61b9      	str	r1, [r7, #24]
 8004fb4:	415b      	adcs	r3, r3
 8004fb6:	61fb      	str	r3, [r7, #28]
 8004fb8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004fbc:	4641      	mov	r1, r8
 8004fbe:	1851      	adds	r1, r2, r1
 8004fc0:	6139      	str	r1, [r7, #16]
 8004fc2:	4649      	mov	r1, r9
 8004fc4:	414b      	adcs	r3, r1
 8004fc6:	617b      	str	r3, [r7, #20]
 8004fc8:	f04f 0200 	mov.w	r2, #0
 8004fcc:	f04f 0300 	mov.w	r3, #0
 8004fd0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	00cb      	lsls	r3, r1, #3
 8004fd8:	4651      	mov	r1, sl
 8004fda:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004fde:	4651      	mov	r1, sl
 8004fe0:	00ca      	lsls	r2, r1, #3
 8004fe2:	4610      	mov	r0, r2
 8004fe4:	4619      	mov	r1, r3
 8004fe6:	4603      	mov	r3, r0
 8004fe8:	4642      	mov	r2, r8
 8004fea:	189b      	adds	r3, r3, r2
 8004fec:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004ff0:	464b      	mov	r3, r9
 8004ff2:	460a      	mov	r2, r1
 8004ff4:	eb42 0303 	adc.w	r3, r2, r3
 8004ff8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004ffc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005000:	685b      	ldr	r3, [r3, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	67bb      	str	r3, [r7, #120]	@ 0x78
 8005006:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005008:	f04f 0200 	mov.w	r2, #0
 800500c:	f04f 0300 	mov.w	r3, #0
 8005010:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005014:	4649      	mov	r1, r9
 8005016:	008b      	lsls	r3, r1, #2
 8005018:	4641      	mov	r1, r8
 800501a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800501e:	4641      	mov	r1, r8
 8005020:	008a      	lsls	r2, r1, #2
 8005022:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8005026:	f7fb f923 	bl	8000270 <__aeabi_uldivmod>
 800502a:	4602      	mov	r2, r0
 800502c:	460b      	mov	r3, r1
 800502e:	4611      	mov	r1, r2
 8005030:	4b38      	ldr	r3, [pc, #224]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005032:	fba3 2301 	umull	r2, r3, r3, r1
 8005036:	095b      	lsrs	r3, r3, #5
 8005038:	2264      	movs	r2, #100	@ 0x64
 800503a:	fb02 f303 	mul.w	r3, r2, r3
 800503e:	1acb      	subs	r3, r1, r3
 8005040:	011b      	lsls	r3, r3, #4
 8005042:	3332      	adds	r3, #50	@ 0x32
 8005044:	4a33      	ldr	r2, [pc, #204]	@ (8005114 <UART_SetConfig+0x4e4>)
 8005046:	fba2 2303 	umull	r2, r3, r2, r3
 800504a:	095b      	lsrs	r3, r3, #5
 800504c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005050:	441c      	add	r4, r3
 8005052:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005056:	2200      	movs	r2, #0
 8005058:	673b      	str	r3, [r7, #112]	@ 0x70
 800505a:	677a      	str	r2, [r7, #116]	@ 0x74
 800505c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005060:	4642      	mov	r2, r8
 8005062:	464b      	mov	r3, r9
 8005064:	1891      	adds	r1, r2, r2
 8005066:	60b9      	str	r1, [r7, #8]
 8005068:	415b      	adcs	r3, r3
 800506a:	60fb      	str	r3, [r7, #12]
 800506c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005070:	4641      	mov	r1, r8
 8005072:	1851      	adds	r1, r2, r1
 8005074:	6039      	str	r1, [r7, #0]
 8005076:	4649      	mov	r1, r9
 8005078:	414b      	adcs	r3, r1
 800507a:	607b      	str	r3, [r7, #4]
 800507c:	f04f 0200 	mov.w	r2, #0
 8005080:	f04f 0300 	mov.w	r3, #0
 8005084:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005088:	4659      	mov	r1, fp
 800508a:	00cb      	lsls	r3, r1, #3
 800508c:	4651      	mov	r1, sl
 800508e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005092:	4651      	mov	r1, sl
 8005094:	00ca      	lsls	r2, r1, #3
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	4603      	mov	r3, r0
 800509c:	4642      	mov	r2, r8
 800509e:	189b      	adds	r3, r3, r2
 80050a0:	66bb      	str	r3, [r7, #104]	@ 0x68
 80050a2:	464b      	mov	r3, r9
 80050a4:	460a      	mov	r2, r1
 80050a6:	eb42 0303 	adc.w	r3, r2, r3
 80050aa:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80050ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80050b0:	685b      	ldr	r3, [r3, #4]
 80050b2:	2200      	movs	r2, #0
 80050b4:	663b      	str	r3, [r7, #96]	@ 0x60
 80050b6:	667a      	str	r2, [r7, #100]	@ 0x64
 80050b8:	f04f 0200 	mov.w	r2, #0
 80050bc:	f04f 0300 	mov.w	r3, #0
 80050c0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80050c4:	4649      	mov	r1, r9
 80050c6:	008b      	lsls	r3, r1, #2
 80050c8:	4641      	mov	r1, r8
 80050ca:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80050ce:	4641      	mov	r1, r8
 80050d0:	008a      	lsls	r2, r1, #2
 80050d2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80050d6:	f7fb f8cb 	bl	8000270 <__aeabi_uldivmod>
 80050da:	4602      	mov	r2, r0
 80050dc:	460b      	mov	r3, r1
 80050de:	4b0d      	ldr	r3, [pc, #52]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050e0:	fba3 1302 	umull	r1, r3, r3, r2
 80050e4:	095b      	lsrs	r3, r3, #5
 80050e6:	2164      	movs	r1, #100	@ 0x64
 80050e8:	fb01 f303 	mul.w	r3, r1, r3
 80050ec:	1ad3      	subs	r3, r2, r3
 80050ee:	011b      	lsls	r3, r3, #4
 80050f0:	3332      	adds	r3, #50	@ 0x32
 80050f2:	4a08      	ldr	r2, [pc, #32]	@ (8005114 <UART_SetConfig+0x4e4>)
 80050f4:	fba2 2303 	umull	r2, r3, r2, r3
 80050f8:	095b      	lsrs	r3, r3, #5
 80050fa:	f003 020f 	and.w	r2, r3, #15
 80050fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	4422      	add	r2, r4
 8005106:	609a      	str	r2, [r3, #8]
}
 8005108:	bf00      	nop
 800510a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 800510e:	46bd      	mov	sp, r7
 8005110:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005114:	51eb851f 	.word	0x51eb851f

08005118 <__NVIC_SetPriority>:
{
 8005118:	b480      	push	{r7}
 800511a:	b083      	sub	sp, #12
 800511c:	af00      	add	r7, sp, #0
 800511e:	4603      	mov	r3, r0
 8005120:	6039      	str	r1, [r7, #0]
 8005122:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005124:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005128:	2b00      	cmp	r3, #0
 800512a:	db0a      	blt.n	8005142 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800512c:	683b      	ldr	r3, [r7, #0]
 800512e:	b2da      	uxtb	r2, r3
 8005130:	490c      	ldr	r1, [pc, #48]	@ (8005164 <__NVIC_SetPriority+0x4c>)
 8005132:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005136:	0112      	lsls	r2, r2, #4
 8005138:	b2d2      	uxtb	r2, r2
 800513a:	440b      	add	r3, r1
 800513c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8005140:	e00a      	b.n	8005158 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005142:	683b      	ldr	r3, [r7, #0]
 8005144:	b2da      	uxtb	r2, r3
 8005146:	4908      	ldr	r1, [pc, #32]	@ (8005168 <__NVIC_SetPriority+0x50>)
 8005148:	79fb      	ldrb	r3, [r7, #7]
 800514a:	f003 030f 	and.w	r3, r3, #15
 800514e:	3b04      	subs	r3, #4
 8005150:	0112      	lsls	r2, r2, #4
 8005152:	b2d2      	uxtb	r2, r2
 8005154:	440b      	add	r3, r1
 8005156:	761a      	strb	r2, [r3, #24]
}
 8005158:	bf00      	nop
 800515a:	370c      	adds	r7, #12
 800515c:	46bd      	mov	sp, r7
 800515e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005162:	4770      	bx	lr
 8005164:	e000e100 	.word	0xe000e100
 8005168:	e000ed00 	.word	0xe000ed00

0800516c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800516c:	b580      	push	{r7, lr}
 800516e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005170:	4b05      	ldr	r3, [pc, #20]	@ (8005188 <SysTick_Handler+0x1c>)
 8005172:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005174:	f001 fed4 	bl	8006f20 <xTaskGetSchedulerState>
 8005178:	4603      	mov	r3, r0
 800517a:	2b01      	cmp	r3, #1
 800517c:	d001      	beq.n	8005182 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800517e:	f002 fccb 	bl	8007b18 <xPortSysTickHandler>
  }
}
 8005182:	bf00      	nop
 8005184:	bd80      	pop	{r7, pc}
 8005186:	bf00      	nop
 8005188:	e000e010 	.word	0xe000e010

0800518c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800518c:	b580      	push	{r7, lr}
 800518e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8005190:	2100      	movs	r1, #0
 8005192:	f06f 0004 	mvn.w	r0, #4
 8005196:	f7ff ffbf 	bl	8005118 <__NVIC_SetPriority>
#endif
}
 800519a:	bf00      	nop
 800519c:	bd80      	pop	{r7, pc}
	...

080051a0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051a6:	f3ef 8305 	mrs	r3, IPSR
 80051aa:	603b      	str	r3, [r7, #0]
  return(result);
 80051ac:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d003      	beq.n	80051ba <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80051b2:	f06f 0305 	mvn.w	r3, #5
 80051b6:	607b      	str	r3, [r7, #4]
 80051b8:	e00c      	b.n	80051d4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80051ba:	4b0a      	ldr	r3, [pc, #40]	@ (80051e4 <osKernelInitialize+0x44>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	2b00      	cmp	r3, #0
 80051c0:	d105      	bne.n	80051ce <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80051c2:	4b08      	ldr	r3, [pc, #32]	@ (80051e4 <osKernelInitialize+0x44>)
 80051c4:	2201      	movs	r2, #1
 80051c6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80051c8:	2300      	movs	r3, #0
 80051ca:	607b      	str	r3, [r7, #4]
 80051cc:	e002      	b.n	80051d4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80051ce:	f04f 33ff 	mov.w	r3, #4294967295
 80051d2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80051d4:	687b      	ldr	r3, [r7, #4]
}
 80051d6:	4618      	mov	r0, r3
 80051d8:	370c      	adds	r7, #12
 80051da:	46bd      	mov	sp, r7
 80051dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e0:	4770      	bx	lr
 80051e2:	bf00      	nop
 80051e4:	200001a0 	.word	0x200001a0

080051e8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80051ee:	f3ef 8305 	mrs	r3, IPSR
 80051f2:	603b      	str	r3, [r7, #0]
  return(result);
 80051f4:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d003      	beq.n	8005202 <osKernelStart+0x1a>
    stat = osErrorISR;
 80051fa:	f06f 0305 	mvn.w	r3, #5
 80051fe:	607b      	str	r3, [r7, #4]
 8005200:	e010      	b.n	8005224 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005202:	4b0b      	ldr	r3, [pc, #44]	@ (8005230 <osKernelStart+0x48>)
 8005204:	681b      	ldr	r3, [r3, #0]
 8005206:	2b01      	cmp	r3, #1
 8005208:	d109      	bne.n	800521e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800520a:	f7ff ffbf 	bl	800518c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800520e:	4b08      	ldr	r3, [pc, #32]	@ (8005230 <osKernelStart+0x48>)
 8005210:	2202      	movs	r2, #2
 8005212:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005214:	f001 fa20 	bl	8006658 <vTaskStartScheduler>
      stat = osOK;
 8005218:	2300      	movs	r3, #0
 800521a:	607b      	str	r3, [r7, #4]
 800521c:	e002      	b.n	8005224 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800521e:	f04f 33ff 	mov.w	r3, #4294967295
 8005222:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005224:	687b      	ldr	r3, [r7, #4]
}
 8005226:	4618      	mov	r0, r3
 8005228:	3708      	adds	r7, #8
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}
 800522e:	bf00      	nop
 8005230:	200001a0 	.word	0x200001a0

08005234 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005234:	b580      	push	{r7, lr}
 8005236:	b08e      	sub	sp, #56	@ 0x38
 8005238:	af04      	add	r7, sp, #16
 800523a:	60f8      	str	r0, [r7, #12]
 800523c:	60b9      	str	r1, [r7, #8]
 800523e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8005240:	2300      	movs	r3, #0
 8005242:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005244:	f3ef 8305 	mrs	r3, IPSR
 8005248:	617b      	str	r3, [r7, #20]
  return(result);
 800524a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 800524c:	2b00      	cmp	r3, #0
 800524e:	d17e      	bne.n	800534e <osThreadNew+0x11a>
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	2b00      	cmp	r3, #0
 8005254:	d07b      	beq.n	800534e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8005256:	2380      	movs	r3, #128	@ 0x80
 8005258:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 800525a:	2318      	movs	r3, #24
 800525c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800525e:	2300      	movs	r3, #0
 8005260:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8005262:	f04f 33ff 	mov.w	r3, #4294967295
 8005266:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	2b00      	cmp	r3, #0
 800526c:	d045      	beq.n	80052fa <osThreadNew+0xc6>
      if (attr->name != NULL) {
 800526e:	687b      	ldr	r3, [r7, #4]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	2b00      	cmp	r3, #0
 8005274:	d002      	beq.n	800527c <osThreadNew+0x48>
        name = attr->name;
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	681b      	ldr	r3, [r3, #0]
 800527a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	699b      	ldr	r3, [r3, #24]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d002      	beq.n	800528a <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	699b      	ldr	r3, [r3, #24]
 8005288:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800528a:	69fb      	ldr	r3, [r7, #28]
 800528c:	2b00      	cmp	r3, #0
 800528e:	d008      	beq.n	80052a2 <osThreadNew+0x6e>
 8005290:	69fb      	ldr	r3, [r7, #28]
 8005292:	2b38      	cmp	r3, #56	@ 0x38
 8005294:	d805      	bhi.n	80052a2 <osThreadNew+0x6e>
 8005296:	687b      	ldr	r3, [r7, #4]
 8005298:	685b      	ldr	r3, [r3, #4]
 800529a:	f003 0301 	and.w	r3, r3, #1
 800529e:	2b00      	cmp	r3, #0
 80052a0:	d001      	beq.n	80052a6 <osThreadNew+0x72>
        return (NULL);
 80052a2:	2300      	movs	r3, #0
 80052a4:	e054      	b.n	8005350 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	695b      	ldr	r3, [r3, #20]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d003      	beq.n	80052b6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	695b      	ldr	r3, [r3, #20]
 80052b2:	089b      	lsrs	r3, r3, #2
 80052b4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	689b      	ldr	r3, [r3, #8]
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d00e      	beq.n	80052dc <osThreadNew+0xa8>
 80052be:	687b      	ldr	r3, [r7, #4]
 80052c0:	68db      	ldr	r3, [r3, #12]
 80052c2:	2ba7      	cmp	r3, #167	@ 0xa7
 80052c4:	d90a      	bls.n	80052dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80052ca:	2b00      	cmp	r3, #0
 80052cc:	d006      	beq.n	80052dc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	695b      	ldr	r3, [r3, #20]
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d002      	beq.n	80052dc <osThreadNew+0xa8>
        mem = 1;
 80052d6:	2301      	movs	r3, #1
 80052d8:	61bb      	str	r3, [r7, #24]
 80052da:	e010      	b.n	80052fe <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	689b      	ldr	r3, [r3, #8]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10c      	bne.n	80052fe <osThreadNew+0xca>
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	68db      	ldr	r3, [r3, #12]
 80052e8:	2b00      	cmp	r3, #0
 80052ea:	d108      	bne.n	80052fe <osThreadNew+0xca>
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	691b      	ldr	r3, [r3, #16]
 80052f0:	2b00      	cmp	r3, #0
 80052f2:	d104      	bne.n	80052fe <osThreadNew+0xca>
          mem = 0;
 80052f4:	2300      	movs	r3, #0
 80052f6:	61bb      	str	r3, [r7, #24]
 80052f8:	e001      	b.n	80052fe <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80052fa:	2300      	movs	r3, #0
 80052fc:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80052fe:	69bb      	ldr	r3, [r7, #24]
 8005300:	2b01      	cmp	r3, #1
 8005302:	d110      	bne.n	8005326 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005308:	687a      	ldr	r2, [r7, #4]
 800530a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800530c:	9202      	str	r2, [sp, #8]
 800530e:	9301      	str	r3, [sp, #4]
 8005310:	69fb      	ldr	r3, [r7, #28]
 8005312:	9300      	str	r3, [sp, #0]
 8005314:	68bb      	ldr	r3, [r7, #8]
 8005316:	6a3a      	ldr	r2, [r7, #32]
 8005318:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800531a:	68f8      	ldr	r0, [r7, #12]
 800531c:	f000 ffa8 	bl	8006270 <xTaskCreateStatic>
 8005320:	4603      	mov	r3, r0
 8005322:	613b      	str	r3, [r7, #16]
 8005324:	e013      	b.n	800534e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8005326:	69bb      	ldr	r3, [r7, #24]
 8005328:	2b00      	cmp	r3, #0
 800532a:	d110      	bne.n	800534e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800532c:	6a3b      	ldr	r3, [r7, #32]
 800532e:	b29a      	uxth	r2, r3
 8005330:	f107 0310 	add.w	r3, r7, #16
 8005334:	9301      	str	r3, [sp, #4]
 8005336:	69fb      	ldr	r3, [r7, #28]
 8005338:	9300      	str	r3, [sp, #0]
 800533a:	68bb      	ldr	r3, [r7, #8]
 800533c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800533e:	68f8      	ldr	r0, [r7, #12]
 8005340:	f000 fff6 	bl	8006330 <xTaskCreate>
 8005344:	4603      	mov	r3, r0
 8005346:	2b01      	cmp	r3, #1
 8005348:	d001      	beq.n	800534e <osThreadNew+0x11a>
            hTask = NULL;
 800534a:	2300      	movs	r3, #0
 800534c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 800534e:	693b      	ldr	r3, [r7, #16]
}
 8005350:	4618      	mov	r0, r3
 8005352:	3728      	adds	r7, #40	@ 0x28
 8005354:	46bd      	mov	sp, r7
 8005356:	bd80      	pop	{r7, pc}

08005358 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005358:	b580      	push	{r7, lr}
 800535a:	b084      	sub	sp, #16
 800535c:	af00      	add	r7, sp, #0
 800535e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005360:	f3ef 8305 	mrs	r3, IPSR
 8005364:	60bb      	str	r3, [r7, #8]
  return(result);
 8005366:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005368:	2b00      	cmp	r3, #0
 800536a:	d003      	beq.n	8005374 <osDelay+0x1c>
    stat = osErrorISR;
 800536c:	f06f 0305 	mvn.w	r3, #5
 8005370:	60fb      	str	r3, [r7, #12]
 8005372:	e007      	b.n	8005384 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005374:	2300      	movs	r3, #0
 8005376:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2b00      	cmp	r3, #0
 800537c:	d002      	beq.n	8005384 <osDelay+0x2c>
      vTaskDelay(ticks);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f001 f934 	bl	80065ec <vTaskDelay>
    }
  }

  return (stat);
 8005384:	68fb      	ldr	r3, [r7, #12]
}
 8005386:	4618      	mov	r0, r3
 8005388:	3710      	adds	r7, #16
 800538a:	46bd      	mov	sp, r7
 800538c:	bd80      	pop	{r7, pc}

0800538e <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 800538e:	b580      	push	{r7, lr}
 8005390:	b08a      	sub	sp, #40	@ 0x28
 8005392:	af02      	add	r7, sp, #8
 8005394:	60f8      	str	r0, [r7, #12]
 8005396:	60b9      	str	r1, [r7, #8]
 8005398:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 800539a:	2300      	movs	r3, #0
 800539c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800539e:	f3ef 8305 	mrs	r3, IPSR
 80053a2:	613b      	str	r3, [r7, #16]
  return(result);
 80053a4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d15f      	bne.n	800546a <osMessageQueueNew+0xdc>
 80053aa:	68fb      	ldr	r3, [r7, #12]
 80053ac:	2b00      	cmp	r3, #0
 80053ae:	d05c      	beq.n	800546a <osMessageQueueNew+0xdc>
 80053b0:	68bb      	ldr	r3, [r7, #8]
 80053b2:	2b00      	cmp	r3, #0
 80053b4:	d059      	beq.n	800546a <osMessageQueueNew+0xdc>
    mem = -1;
 80053b6:	f04f 33ff 	mov.w	r3, #4294967295
 80053ba:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d029      	beq.n	8005416 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	689b      	ldr	r3, [r3, #8]
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d012      	beq.n	80053f0 <osMessageQueueNew+0x62>
 80053ca:	687b      	ldr	r3, [r7, #4]
 80053cc:	68db      	ldr	r3, [r3, #12]
 80053ce:	2b4f      	cmp	r3, #79	@ 0x4f
 80053d0:	d90e      	bls.n	80053f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053d2:	687b      	ldr	r3, [r7, #4]
 80053d4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d00a      	beq.n	80053f0 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 80053da:	687b      	ldr	r3, [r7, #4]
 80053dc:	695a      	ldr	r2, [r3, #20]
 80053de:	68fb      	ldr	r3, [r7, #12]
 80053e0:	68b9      	ldr	r1, [r7, #8]
 80053e2:	fb01 f303 	mul.w	r3, r1, r3
 80053e6:	429a      	cmp	r2, r3
 80053e8:	d302      	bcc.n	80053f0 <osMessageQueueNew+0x62>
        mem = 1;
 80053ea:	2301      	movs	r3, #1
 80053ec:	61bb      	str	r3, [r7, #24]
 80053ee:	e014      	b.n	800541a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	689b      	ldr	r3, [r3, #8]
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d110      	bne.n	800541a <osMessageQueueNew+0x8c>
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	68db      	ldr	r3, [r3, #12]
 80053fc:	2b00      	cmp	r3, #0
 80053fe:	d10c      	bne.n	800541a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005404:	2b00      	cmp	r3, #0
 8005406:	d108      	bne.n	800541a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	2b00      	cmp	r3, #0
 800540e:	d104      	bne.n	800541a <osMessageQueueNew+0x8c>
          mem = 0;
 8005410:	2300      	movs	r3, #0
 8005412:	61bb      	str	r3, [r7, #24]
 8005414:	e001      	b.n	800541a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005416:	2300      	movs	r3, #0
 8005418:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800541a:	69bb      	ldr	r3, [r7, #24]
 800541c:	2b01      	cmp	r3, #1
 800541e:	d10b      	bne.n	8005438 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	691a      	ldr	r2, [r3, #16]
 8005424:	687b      	ldr	r3, [r7, #4]
 8005426:	689b      	ldr	r3, [r3, #8]
 8005428:	2100      	movs	r1, #0
 800542a:	9100      	str	r1, [sp, #0]
 800542c:	68b9      	ldr	r1, [r7, #8]
 800542e:	68f8      	ldr	r0, [r7, #12]
 8005430:	f000 f9d0 	bl	80057d4 <xQueueGenericCreateStatic>
 8005434:	61f8      	str	r0, [r7, #28]
 8005436:	e008      	b.n	800544a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8005438:	69bb      	ldr	r3, [r7, #24]
 800543a:	2b00      	cmp	r3, #0
 800543c:	d105      	bne.n	800544a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800543e:	2200      	movs	r2, #0
 8005440:	68b9      	ldr	r1, [r7, #8]
 8005442:	68f8      	ldr	r0, [r7, #12]
 8005444:	f000 fa43 	bl	80058ce <xQueueGenericCreate>
 8005448:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 800544a:	69fb      	ldr	r3, [r7, #28]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d00c      	beq.n	800546a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	2b00      	cmp	r3, #0
 8005454:	d003      	beq.n	800545e <osMessageQueueNew+0xd0>
        name = attr->name;
 8005456:	687b      	ldr	r3, [r7, #4]
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	617b      	str	r3, [r7, #20]
 800545c:	e001      	b.n	8005462 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800545e:	2300      	movs	r3, #0
 8005460:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8005462:	6979      	ldr	r1, [r7, #20]
 8005464:	69f8      	ldr	r0, [r7, #28]
 8005466:	f000 fea5 	bl	80061b4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 800546a:	69fb      	ldr	r3, [r7, #28]
}
 800546c:	4618      	mov	r0, r3
 800546e:	3720      	adds	r7, #32
 8005470:	46bd      	mov	sp, r7
 8005472:	bd80      	pop	{r7, pc}

08005474 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8005474:	b580      	push	{r7, lr}
 8005476:	b088      	sub	sp, #32
 8005478:	af00      	add	r7, sp, #0
 800547a:	60f8      	str	r0, [r7, #12]
 800547c:	60b9      	str	r1, [r7, #8]
 800547e:	607a      	str	r2, [r7, #4]
 8005480:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8005482:	68fb      	ldr	r3, [r7, #12]
 8005484:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8005486:	2300      	movs	r3, #0
 8005488:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800548a:	f3ef 8305 	mrs	r3, IPSR
 800548e:	617b      	str	r3, [r7, #20]
  return(result);
 8005490:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8005492:	2b00      	cmp	r3, #0
 8005494:	d028      	beq.n	80054e8 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8005496:	69bb      	ldr	r3, [r7, #24]
 8005498:	2b00      	cmp	r3, #0
 800549a:	d005      	beq.n	80054a8 <osMessageQueueGet+0x34>
 800549c:	68bb      	ldr	r3, [r7, #8]
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <osMessageQueueGet+0x34>
 80054a2:	683b      	ldr	r3, [r7, #0]
 80054a4:	2b00      	cmp	r3, #0
 80054a6:	d003      	beq.n	80054b0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 80054a8:	f06f 0303 	mvn.w	r3, #3
 80054ac:	61fb      	str	r3, [r7, #28]
 80054ae:	e037      	b.n	8005520 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 80054b4:	f107 0310 	add.w	r3, r7, #16
 80054b8:	461a      	mov	r2, r3
 80054ba:	68b9      	ldr	r1, [r7, #8]
 80054bc:	69b8      	ldr	r0, [r7, #24]
 80054be:	f000 fce7 	bl	8005e90 <xQueueReceiveFromISR>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b01      	cmp	r3, #1
 80054c6:	d003      	beq.n	80054d0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 80054c8:	f06f 0302 	mvn.w	r3, #2
 80054cc:	61fb      	str	r3, [r7, #28]
 80054ce:	e027      	b.n	8005520 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 80054d0:	693b      	ldr	r3, [r7, #16]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d024      	beq.n	8005520 <osMessageQueueGet+0xac>
 80054d6:	4b15      	ldr	r3, [pc, #84]	@ (800552c <osMessageQueueGet+0xb8>)
 80054d8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054dc:	601a      	str	r2, [r3, #0]
 80054de:	f3bf 8f4f 	dsb	sy
 80054e2:	f3bf 8f6f 	isb	sy
 80054e6:	e01b      	b.n	8005520 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80054e8:	69bb      	ldr	r3, [r7, #24]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d002      	beq.n	80054f4 <osMessageQueueGet+0x80>
 80054ee:	68bb      	ldr	r3, [r7, #8]
 80054f0:	2b00      	cmp	r3, #0
 80054f2:	d103      	bne.n	80054fc <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 80054f4:	f06f 0303 	mvn.w	r3, #3
 80054f8:	61fb      	str	r3, [r7, #28]
 80054fa:	e011      	b.n	8005520 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80054fc:	683a      	ldr	r2, [r7, #0]
 80054fe:	68b9      	ldr	r1, [r7, #8]
 8005500:	69b8      	ldr	r0, [r7, #24]
 8005502:	f000 fbe3 	bl	8005ccc <xQueueReceive>
 8005506:	4603      	mov	r3, r0
 8005508:	2b01      	cmp	r3, #1
 800550a:	d009      	beq.n	8005520 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 800550c:	683b      	ldr	r3, [r7, #0]
 800550e:	2b00      	cmp	r3, #0
 8005510:	d003      	beq.n	800551a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8005512:	f06f 0301 	mvn.w	r3, #1
 8005516:	61fb      	str	r3, [r7, #28]
 8005518:	e002      	b.n	8005520 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 800551a:	f06f 0302 	mvn.w	r3, #2
 800551e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8005520:	69fb      	ldr	r3, [r7, #28]
}
 8005522:	4618      	mov	r0, r3
 8005524:	3720      	adds	r7, #32
 8005526:	46bd      	mov	sp, r7
 8005528:	bd80      	pop	{r7, pc}
 800552a:	bf00      	nop
 800552c:	e000ed04 	.word	0xe000ed04

08005530 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8005530:	b480      	push	{r7}
 8005532:	b085      	sub	sp, #20
 8005534:	af00      	add	r7, sp, #0
 8005536:	60f8      	str	r0, [r7, #12]
 8005538:	60b9      	str	r1, [r7, #8]
 800553a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800553c:	68fb      	ldr	r3, [r7, #12]
 800553e:	4a07      	ldr	r2, [pc, #28]	@ (800555c <vApplicationGetIdleTaskMemory+0x2c>)
 8005540:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8005542:	68bb      	ldr	r3, [r7, #8]
 8005544:	4a06      	ldr	r2, [pc, #24]	@ (8005560 <vApplicationGetIdleTaskMemory+0x30>)
 8005546:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8005548:	687b      	ldr	r3, [r7, #4]
 800554a:	2280      	movs	r2, #128	@ 0x80
 800554c:	601a      	str	r2, [r3, #0]
}
 800554e:	bf00      	nop
 8005550:	3714      	adds	r7, #20
 8005552:	46bd      	mov	sp, r7
 8005554:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005558:	4770      	bx	lr
 800555a:	bf00      	nop
 800555c:	200001a4 	.word	0x200001a4
 8005560:	2000024c 	.word	0x2000024c

08005564 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005564:	b480      	push	{r7}
 8005566:	b085      	sub	sp, #20
 8005568:	af00      	add	r7, sp, #0
 800556a:	60f8      	str	r0, [r7, #12]
 800556c:	60b9      	str	r1, [r7, #8]
 800556e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005570:	68fb      	ldr	r3, [r7, #12]
 8005572:	4a07      	ldr	r2, [pc, #28]	@ (8005590 <vApplicationGetTimerTaskMemory+0x2c>)
 8005574:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005576:	68bb      	ldr	r3, [r7, #8]
 8005578:	4a06      	ldr	r2, [pc, #24]	@ (8005594 <vApplicationGetTimerTaskMemory+0x30>)
 800557a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005582:	601a      	str	r2, [r3, #0]
}
 8005584:	bf00      	nop
 8005586:	3714      	adds	r7, #20
 8005588:	46bd      	mov	sp, r7
 800558a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800558e:	4770      	bx	lr
 8005590:	2000044c 	.word	0x2000044c
 8005594:	200004f4 	.word	0x200004f4

08005598 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005598:	b480      	push	{r7}
 800559a:	b083      	sub	sp, #12
 800559c:	af00      	add	r7, sp, #0
 800559e:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	f103 0208 	add.w	r2, r3, #8
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	f04f 32ff 	mov.w	r2, #4294967295
 80055b0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055b2:	687b      	ldr	r3, [r7, #4]
 80055b4:	f103 0208 	add.w	r2, r3, #8
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80055bc:	687b      	ldr	r3, [r7, #4]
 80055be:	f103 0208 	add.w	r2, r3, #8
 80055c2:	687b      	ldr	r3, [r7, #4]
 80055c4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80055c6:	687b      	ldr	r3, [r7, #4]
 80055c8:	2200      	movs	r2, #0
 80055ca:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80055cc:	bf00      	nop
 80055ce:	370c      	adds	r7, #12
 80055d0:	46bd      	mov	sp, r7
 80055d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055d6:	4770      	bx	lr

080055d8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 80055d8:	b480      	push	{r7}
 80055da:	b083      	sub	sp, #12
 80055dc:	af00      	add	r7, sp, #0
 80055de:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 80055e0:	687b      	ldr	r3, [r7, #4]
 80055e2:	2200      	movs	r2, #0
 80055e4:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 80055e6:	bf00      	nop
 80055e8:	370c      	adds	r7, #12
 80055ea:	46bd      	mov	sp, r7
 80055ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055f0:	4770      	bx	lr

080055f2 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 80055f2:	b480      	push	{r7}
 80055f4:	b085      	sub	sp, #20
 80055f6:	af00      	add	r7, sp, #0
 80055f8:	6078      	str	r0, [r7, #4]
 80055fa:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005602:	683b      	ldr	r3, [r7, #0]
 8005604:	68fa      	ldr	r2, [r7, #12]
 8005606:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005608:	68fb      	ldr	r3, [r7, #12]
 800560a:	689a      	ldr	r2, [r3, #8]
 800560c:	683b      	ldr	r3, [r7, #0]
 800560e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005610:	68fb      	ldr	r3, [r7, #12]
 8005612:	689b      	ldr	r3, [r3, #8]
 8005614:	683a      	ldr	r2, [r7, #0]
 8005616:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005618:	68fb      	ldr	r3, [r7, #12]
 800561a:	683a      	ldr	r2, [r7, #0]
 800561c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800561e:	683b      	ldr	r3, [r7, #0]
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	681b      	ldr	r3, [r3, #0]
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	601a      	str	r2, [r3, #0]
}
 800562e:	bf00      	nop
 8005630:	3714      	adds	r7, #20
 8005632:	46bd      	mov	sp, r7
 8005634:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005638:	4770      	bx	lr

0800563a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800563a:	b480      	push	{r7}
 800563c:	b085      	sub	sp, #20
 800563e:	af00      	add	r7, sp, #0
 8005640:	6078      	str	r0, [r7, #4]
 8005642:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005644:	683b      	ldr	r3, [r7, #0]
 8005646:	681b      	ldr	r3, [r3, #0]
 8005648:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800564a:	68bb      	ldr	r3, [r7, #8]
 800564c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005650:	d103      	bne.n	800565a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	691b      	ldr	r3, [r3, #16]
 8005656:	60fb      	str	r3, [r7, #12]
 8005658:	e00c      	b.n	8005674 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800565a:	687b      	ldr	r3, [r7, #4]
 800565c:	3308      	adds	r3, #8
 800565e:	60fb      	str	r3, [r7, #12]
 8005660:	e002      	b.n	8005668 <vListInsert+0x2e>
 8005662:	68fb      	ldr	r3, [r7, #12]
 8005664:	685b      	ldr	r3, [r3, #4]
 8005666:	60fb      	str	r3, [r7, #12]
 8005668:	68fb      	ldr	r3, [r7, #12]
 800566a:	685b      	ldr	r3, [r3, #4]
 800566c:	681b      	ldr	r3, [r3, #0]
 800566e:	68ba      	ldr	r2, [r7, #8]
 8005670:	429a      	cmp	r2, r3
 8005672:	d2f6      	bcs.n	8005662 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005674:	68fb      	ldr	r3, [r7, #12]
 8005676:	685a      	ldr	r2, [r3, #4]
 8005678:	683b      	ldr	r3, [r7, #0]
 800567a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800567c:	683b      	ldr	r3, [r7, #0]
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	683a      	ldr	r2, [r7, #0]
 8005682:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005684:	683b      	ldr	r3, [r7, #0]
 8005686:	68fa      	ldr	r2, [r7, #12]
 8005688:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	683a      	ldr	r2, [r7, #0]
 800568e:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	687a      	ldr	r2, [r7, #4]
 8005694:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	1c5a      	adds	r2, r3, #1
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	601a      	str	r2, [r3, #0]
}
 80056a0:	bf00      	nop
 80056a2:	3714      	adds	r7, #20
 80056a4:	46bd      	mov	sp, r7
 80056a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056aa:	4770      	bx	lr

080056ac <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80056ac:	b480      	push	{r7}
 80056ae:	b085      	sub	sp, #20
 80056b0:	af00      	add	r7, sp, #0
 80056b2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	691b      	ldr	r3, [r3, #16]
 80056b8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	685b      	ldr	r3, [r3, #4]
 80056be:	687a      	ldr	r2, [r7, #4]
 80056c0:	6892      	ldr	r2, [r2, #8]
 80056c2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	687a      	ldr	r2, [r7, #4]
 80056ca:	6852      	ldr	r2, [r2, #4]
 80056cc:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80056ce:	68fb      	ldr	r3, [r7, #12]
 80056d0:	685b      	ldr	r3, [r3, #4]
 80056d2:	687a      	ldr	r2, [r7, #4]
 80056d4:	429a      	cmp	r2, r3
 80056d6:	d103      	bne.n	80056e0 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	689a      	ldr	r2, [r3, #8]
 80056dc:	68fb      	ldr	r3, [r7, #12]
 80056de:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	2200      	movs	r2, #0
 80056e4:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	1e5a      	subs	r2, r3, #1
 80056ec:	68fb      	ldr	r3, [r7, #12]
 80056ee:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	681b      	ldr	r3, [r3, #0]
}
 80056f4:	4618      	mov	r0, r3
 80056f6:	3714      	adds	r7, #20
 80056f8:	46bd      	mov	sp, r7
 80056fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056fe:	4770      	bx	lr

08005700 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005700:	b580      	push	{r7, lr}
 8005702:	b084      	sub	sp, #16
 8005704:	af00      	add	r7, sp, #0
 8005706:	6078      	str	r0, [r7, #4]
 8005708:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800570e:	68fb      	ldr	r3, [r7, #12]
 8005710:	2b00      	cmp	r3, #0
 8005712:	d10b      	bne.n	800572c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005714:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005718:	f383 8811 	msr	BASEPRI, r3
 800571c:	f3bf 8f6f 	isb	sy
 8005720:	f3bf 8f4f 	dsb	sy
 8005724:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005726:	bf00      	nop
 8005728:	bf00      	nop
 800572a:	e7fd      	b.n	8005728 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800572c:	f002 f964 	bl	80079f8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005730:	68fb      	ldr	r3, [r7, #12]
 8005732:	681a      	ldr	r2, [r3, #0]
 8005734:	68fb      	ldr	r3, [r7, #12]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	68f9      	ldr	r1, [r7, #12]
 800573a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800573c:	fb01 f303 	mul.w	r3, r1, r3
 8005740:	441a      	add	r2, r3
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2200      	movs	r2, #0
 800574a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800574c:	68fb      	ldr	r3, [r7, #12]
 800574e:	681a      	ldr	r2, [r3, #0]
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005754:	68fb      	ldr	r3, [r7, #12]
 8005756:	681a      	ldr	r2, [r3, #0]
 8005758:	68fb      	ldr	r3, [r7, #12]
 800575a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800575c:	3b01      	subs	r3, #1
 800575e:	68f9      	ldr	r1, [r7, #12]
 8005760:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005762:	fb01 f303 	mul.w	r3, r1, r3
 8005766:	441a      	add	r2, r3
 8005768:	68fb      	ldr	r3, [r7, #12]
 800576a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800576c:	68fb      	ldr	r3, [r7, #12]
 800576e:	22ff      	movs	r2, #255	@ 0xff
 8005770:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	22ff      	movs	r2, #255	@ 0xff
 8005778:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	2b00      	cmp	r3, #0
 8005780:	d114      	bne.n	80057ac <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	691b      	ldr	r3, [r3, #16]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d01a      	beq.n	80057c0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	3310      	adds	r3, #16
 800578e:	4618      	mov	r0, r3
 8005790:	f001 fa00 	bl	8006b94 <xTaskRemoveFromEventList>
 8005794:	4603      	mov	r3, r0
 8005796:	2b00      	cmp	r3, #0
 8005798:	d012      	beq.n	80057c0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800579a:	4b0d      	ldr	r3, [pc, #52]	@ (80057d0 <xQueueGenericReset+0xd0>)
 800579c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	f3bf 8f4f 	dsb	sy
 80057a6:	f3bf 8f6f 	isb	sy
 80057aa:	e009      	b.n	80057c0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	3310      	adds	r3, #16
 80057b0:	4618      	mov	r0, r3
 80057b2:	f7ff fef1 	bl	8005598 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80057b6:	68fb      	ldr	r3, [r7, #12]
 80057b8:	3324      	adds	r3, #36	@ 0x24
 80057ba:	4618      	mov	r0, r3
 80057bc:	f7ff feec 	bl	8005598 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80057c0:	f002 f94c 	bl	8007a5c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80057c4:	2301      	movs	r3, #1
}
 80057c6:	4618      	mov	r0, r3
 80057c8:	3710      	adds	r7, #16
 80057ca:	46bd      	mov	sp, r7
 80057cc:	bd80      	pop	{r7, pc}
 80057ce:	bf00      	nop
 80057d0:	e000ed04 	.word	0xe000ed04

080057d4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80057d4:	b580      	push	{r7, lr}
 80057d6:	b08e      	sub	sp, #56	@ 0x38
 80057d8:	af02      	add	r7, sp, #8
 80057da:	60f8      	str	r0, [r7, #12]
 80057dc:	60b9      	str	r1, [r7, #8]
 80057de:	607a      	str	r2, [r7, #4]
 80057e0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d10b      	bne.n	8005800 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 80057e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80057ec:	f383 8811 	msr	BASEPRI, r3
 80057f0:	f3bf 8f6f 	isb	sy
 80057f4:	f3bf 8f4f 	dsb	sy
 80057f8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80057fa:	bf00      	nop
 80057fc:	bf00      	nop
 80057fe:	e7fd      	b.n	80057fc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	2b00      	cmp	r3, #0
 8005804:	d10b      	bne.n	800581e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005806:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800580a:	f383 8811 	msr	BASEPRI, r3
 800580e:	f3bf 8f6f 	isb	sy
 8005812:	f3bf 8f4f 	dsb	sy
 8005816:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005818:	bf00      	nop
 800581a:	bf00      	nop
 800581c:	e7fd      	b.n	800581a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	2b00      	cmp	r3, #0
 8005822:	d002      	beq.n	800582a <xQueueGenericCreateStatic+0x56>
 8005824:	68bb      	ldr	r3, [r7, #8]
 8005826:	2b00      	cmp	r3, #0
 8005828:	d001      	beq.n	800582e <xQueueGenericCreateStatic+0x5a>
 800582a:	2301      	movs	r3, #1
 800582c:	e000      	b.n	8005830 <xQueueGenericCreateStatic+0x5c>
 800582e:	2300      	movs	r3, #0
 8005830:	2b00      	cmp	r3, #0
 8005832:	d10b      	bne.n	800584c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005834:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005838:	f383 8811 	msr	BASEPRI, r3
 800583c:	f3bf 8f6f 	isb	sy
 8005840:	f3bf 8f4f 	dsb	sy
 8005844:	623b      	str	r3, [r7, #32]
}
 8005846:	bf00      	nop
 8005848:	bf00      	nop
 800584a:	e7fd      	b.n	8005848 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	2b00      	cmp	r3, #0
 8005850:	d102      	bne.n	8005858 <xQueueGenericCreateStatic+0x84>
 8005852:	68bb      	ldr	r3, [r7, #8]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d101      	bne.n	800585c <xQueueGenericCreateStatic+0x88>
 8005858:	2301      	movs	r3, #1
 800585a:	e000      	b.n	800585e <xQueueGenericCreateStatic+0x8a>
 800585c:	2300      	movs	r3, #0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d10b      	bne.n	800587a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005862:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005866:	f383 8811 	msr	BASEPRI, r3
 800586a:	f3bf 8f6f 	isb	sy
 800586e:	f3bf 8f4f 	dsb	sy
 8005872:	61fb      	str	r3, [r7, #28]
}
 8005874:	bf00      	nop
 8005876:	bf00      	nop
 8005878:	e7fd      	b.n	8005876 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800587a:	2350      	movs	r3, #80	@ 0x50
 800587c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800587e:	697b      	ldr	r3, [r7, #20]
 8005880:	2b50      	cmp	r3, #80	@ 0x50
 8005882:	d00b      	beq.n	800589c <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005884:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005888:	f383 8811 	msr	BASEPRI, r3
 800588c:	f3bf 8f6f 	isb	sy
 8005890:	f3bf 8f4f 	dsb	sy
 8005894:	61bb      	str	r3, [r7, #24]
}
 8005896:	bf00      	nop
 8005898:	bf00      	nop
 800589a:	e7fd      	b.n	8005898 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800589c:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800589e:	683b      	ldr	r3, [r7, #0]
 80058a0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80058a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d00d      	beq.n	80058c4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80058a8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058aa:	2201      	movs	r2, #1
 80058ac:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80058b0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80058b4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80058b6:	9300      	str	r3, [sp, #0]
 80058b8:	4613      	mov	r3, r2
 80058ba:	687a      	ldr	r2, [r7, #4]
 80058bc:	68b9      	ldr	r1, [r7, #8]
 80058be:	68f8      	ldr	r0, [r7, #12]
 80058c0:	f000 f840 	bl	8005944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80058c4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80058c6:	4618      	mov	r0, r3
 80058c8:	3730      	adds	r7, #48	@ 0x30
 80058ca:	46bd      	mov	sp, r7
 80058cc:	bd80      	pop	{r7, pc}

080058ce <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80058ce:	b580      	push	{r7, lr}
 80058d0:	b08a      	sub	sp, #40	@ 0x28
 80058d2:	af02      	add	r7, sp, #8
 80058d4:	60f8      	str	r0, [r7, #12]
 80058d6:	60b9      	str	r1, [r7, #8]
 80058d8:	4613      	mov	r3, r2
 80058da:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80058dc:	68fb      	ldr	r3, [r7, #12]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d10b      	bne.n	80058fa <xQueueGenericCreate+0x2c>
	__asm volatile
 80058e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058e6:	f383 8811 	msr	BASEPRI, r3
 80058ea:	f3bf 8f6f 	isb	sy
 80058ee:	f3bf 8f4f 	dsb	sy
 80058f2:	613b      	str	r3, [r7, #16]
}
 80058f4:	bf00      	nop
 80058f6:	bf00      	nop
 80058f8:	e7fd      	b.n	80058f6 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80058fa:	68fb      	ldr	r3, [r7, #12]
 80058fc:	68ba      	ldr	r2, [r7, #8]
 80058fe:	fb02 f303 	mul.w	r3, r2, r3
 8005902:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005904:	69fb      	ldr	r3, [r7, #28]
 8005906:	3350      	adds	r3, #80	@ 0x50
 8005908:	4618      	mov	r0, r3
 800590a:	f002 f997 	bl	8007c3c <pvPortMalloc>
 800590e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005910:	69bb      	ldr	r3, [r7, #24]
 8005912:	2b00      	cmp	r3, #0
 8005914:	d011      	beq.n	800593a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005916:	69bb      	ldr	r3, [r7, #24]
 8005918:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	3350      	adds	r3, #80	@ 0x50
 800591e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005920:	69bb      	ldr	r3, [r7, #24]
 8005922:	2200      	movs	r2, #0
 8005924:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005928:	79fa      	ldrb	r2, [r7, #7]
 800592a:	69bb      	ldr	r3, [r7, #24]
 800592c:	9300      	str	r3, [sp, #0]
 800592e:	4613      	mov	r3, r2
 8005930:	697a      	ldr	r2, [r7, #20]
 8005932:	68b9      	ldr	r1, [r7, #8]
 8005934:	68f8      	ldr	r0, [r7, #12]
 8005936:	f000 f805 	bl	8005944 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800593a:	69bb      	ldr	r3, [r7, #24]
	}
 800593c:	4618      	mov	r0, r3
 800593e:	3720      	adds	r7, #32
 8005940:	46bd      	mov	sp, r7
 8005942:	bd80      	pop	{r7, pc}

08005944 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005944:	b580      	push	{r7, lr}
 8005946:	b084      	sub	sp, #16
 8005948:	af00      	add	r7, sp, #0
 800594a:	60f8      	str	r0, [r7, #12]
 800594c:	60b9      	str	r1, [r7, #8]
 800594e:	607a      	str	r2, [r7, #4]
 8005950:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005952:	68bb      	ldr	r3, [r7, #8]
 8005954:	2b00      	cmp	r3, #0
 8005956:	d103      	bne.n	8005960 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005958:	69bb      	ldr	r3, [r7, #24]
 800595a:	69ba      	ldr	r2, [r7, #24]
 800595c:	601a      	str	r2, [r3, #0]
 800595e:	e002      	b.n	8005966 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005960:	69bb      	ldr	r3, [r7, #24]
 8005962:	687a      	ldr	r2, [r7, #4]
 8005964:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005966:	69bb      	ldr	r3, [r7, #24]
 8005968:	68fa      	ldr	r2, [r7, #12]
 800596a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800596c:	69bb      	ldr	r3, [r7, #24]
 800596e:	68ba      	ldr	r2, [r7, #8]
 8005970:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005972:	2101      	movs	r1, #1
 8005974:	69b8      	ldr	r0, [r7, #24]
 8005976:	f7ff fec3 	bl	8005700 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800597a:	69bb      	ldr	r3, [r7, #24]
 800597c:	78fa      	ldrb	r2, [r7, #3]
 800597e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005982:	bf00      	nop
 8005984:	3710      	adds	r7, #16
 8005986:	46bd      	mov	sp, r7
 8005988:	bd80      	pop	{r7, pc}
	...

0800598c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800598c:	b580      	push	{r7, lr}
 800598e:	b08e      	sub	sp, #56	@ 0x38
 8005990:	af00      	add	r7, sp, #0
 8005992:	60f8      	str	r0, [r7, #12]
 8005994:	60b9      	str	r1, [r7, #8]
 8005996:	607a      	str	r2, [r7, #4]
 8005998:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800599e:	68fb      	ldr	r3, [r7, #12]
 80059a0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80059a2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059a4:	2b00      	cmp	r3, #0
 80059a6:	d10b      	bne.n	80059c0 <xQueueGenericSend+0x34>
	__asm volatile
 80059a8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059ac:	f383 8811 	msr	BASEPRI, r3
 80059b0:	f3bf 8f6f 	isb	sy
 80059b4:	f3bf 8f4f 	dsb	sy
 80059b8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80059ba:	bf00      	nop
 80059bc:	bf00      	nop
 80059be:	e7fd      	b.n	80059bc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	2b00      	cmp	r3, #0
 80059c4:	d103      	bne.n	80059ce <xQueueGenericSend+0x42>
 80059c6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d101      	bne.n	80059d2 <xQueueGenericSend+0x46>
 80059ce:	2301      	movs	r3, #1
 80059d0:	e000      	b.n	80059d4 <xQueueGenericSend+0x48>
 80059d2:	2300      	movs	r3, #0
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d10b      	bne.n	80059f0 <xQueueGenericSend+0x64>
	__asm volatile
 80059d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059dc:	f383 8811 	msr	BASEPRI, r3
 80059e0:	f3bf 8f6f 	isb	sy
 80059e4:	f3bf 8f4f 	dsb	sy
 80059e8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80059ea:	bf00      	nop
 80059ec:	bf00      	nop
 80059ee:	e7fd      	b.n	80059ec <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80059f0:	683b      	ldr	r3, [r7, #0]
 80059f2:	2b02      	cmp	r3, #2
 80059f4:	d103      	bne.n	80059fe <xQueueGenericSend+0x72>
 80059f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80059fa:	2b01      	cmp	r3, #1
 80059fc:	d101      	bne.n	8005a02 <xQueueGenericSend+0x76>
 80059fe:	2301      	movs	r3, #1
 8005a00:	e000      	b.n	8005a04 <xQueueGenericSend+0x78>
 8005a02:	2300      	movs	r3, #0
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d10b      	bne.n	8005a20 <xQueueGenericSend+0x94>
	__asm volatile
 8005a08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a0c:	f383 8811 	msr	BASEPRI, r3
 8005a10:	f3bf 8f6f 	isb	sy
 8005a14:	f3bf 8f4f 	dsb	sy
 8005a18:	623b      	str	r3, [r7, #32]
}
 8005a1a:	bf00      	nop
 8005a1c:	bf00      	nop
 8005a1e:	e7fd      	b.n	8005a1c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005a20:	f001 fa7e 	bl	8006f20 <xTaskGetSchedulerState>
 8005a24:	4603      	mov	r3, r0
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d102      	bne.n	8005a30 <xQueueGenericSend+0xa4>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d101      	bne.n	8005a34 <xQueueGenericSend+0xa8>
 8005a30:	2301      	movs	r3, #1
 8005a32:	e000      	b.n	8005a36 <xQueueGenericSend+0xaa>
 8005a34:	2300      	movs	r3, #0
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d10b      	bne.n	8005a52 <xQueueGenericSend+0xc6>
	__asm volatile
 8005a3a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005a3e:	f383 8811 	msr	BASEPRI, r3
 8005a42:	f3bf 8f6f 	isb	sy
 8005a46:	f3bf 8f4f 	dsb	sy
 8005a4a:	61fb      	str	r3, [r7, #28]
}
 8005a4c:	bf00      	nop
 8005a4e:	bf00      	nop
 8005a50:	e7fd      	b.n	8005a4e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005a52:	f001 ffd1 	bl	80079f8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005a56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a58:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005a5a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a5c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005a5e:	429a      	cmp	r2, r3
 8005a60:	d302      	bcc.n	8005a68 <xQueueGenericSend+0xdc>
 8005a62:	683b      	ldr	r3, [r7, #0]
 8005a64:	2b02      	cmp	r3, #2
 8005a66:	d129      	bne.n	8005abc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005a68:	683a      	ldr	r2, [r7, #0]
 8005a6a:	68b9      	ldr	r1, [r7, #8]
 8005a6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005a6e:	f000 fa91 	bl	8005f94 <prvCopyDataToQueue>
 8005a72:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005a74:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a78:	2b00      	cmp	r3, #0
 8005a7a:	d010      	beq.n	8005a9e <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005a7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005a7e:	3324      	adds	r3, #36	@ 0x24
 8005a80:	4618      	mov	r0, r3
 8005a82:	f001 f887 	bl	8006b94 <xTaskRemoveFromEventList>
 8005a86:	4603      	mov	r3, r0
 8005a88:	2b00      	cmp	r3, #0
 8005a8a:	d013      	beq.n	8005ab4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005a8c:	4b3f      	ldr	r3, [pc, #252]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005a8e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005a92:	601a      	str	r2, [r3, #0]
 8005a94:	f3bf 8f4f 	dsb	sy
 8005a98:	f3bf 8f6f 	isb	sy
 8005a9c:	e00a      	b.n	8005ab4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005a9e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	d007      	beq.n	8005ab4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005aa4:	4b39      	ldr	r3, [pc, #228]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005aa6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005aaa:	601a      	str	r2, [r3, #0]
 8005aac:	f3bf 8f4f 	dsb	sy
 8005ab0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005ab4:	f001 ffd2 	bl	8007a5c <vPortExitCritical>
				return pdPASS;
 8005ab8:	2301      	movs	r3, #1
 8005aba:	e063      	b.n	8005b84 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2b00      	cmp	r3, #0
 8005ac0:	d103      	bne.n	8005aca <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005ac2:	f001 ffcb 	bl	8007a5c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005ac6:	2300      	movs	r3, #0
 8005ac8:	e05c      	b.n	8005b84 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005aca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005acc:	2b00      	cmp	r3, #0
 8005ace:	d106      	bne.n	8005ade <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005ad0:	f107 0314 	add.w	r3, r7, #20
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	f001 f8c1 	bl	8006c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005ada:	2301      	movs	r3, #1
 8005adc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005ade:	f001 ffbd 	bl	8007a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005ae2:	f000 fe29 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005ae6:	f001 ff87 	bl	80079f8 <vPortEnterCritical>
 8005aea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005aec:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005af0:	b25b      	sxtb	r3, r3
 8005af2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af6:	d103      	bne.n	8005b00 <xQueueGenericSend+0x174>
 8005af8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005afa:	2200      	movs	r2, #0
 8005afc:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005b00:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b02:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005b06:	b25b      	sxtb	r3, r3
 8005b08:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005b0c:	d103      	bne.n	8005b16 <xQueueGenericSend+0x18a>
 8005b0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b10:	2200      	movs	r2, #0
 8005b12:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005b16:	f001 ffa1 	bl	8007a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005b1a:	1d3a      	adds	r2, r7, #4
 8005b1c:	f107 0314 	add.w	r3, r7, #20
 8005b20:	4611      	mov	r1, r2
 8005b22:	4618      	mov	r0, r3
 8005b24:	f001 f8b0 	bl	8006c88 <xTaskCheckForTimeOut>
 8005b28:	4603      	mov	r3, r0
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	d124      	bne.n	8005b78 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005b2e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b30:	f000 fb28 	bl	8006184 <prvIsQueueFull>
 8005b34:	4603      	mov	r3, r0
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d018      	beq.n	8005b6c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	3310      	adds	r3, #16
 8005b3e:	687a      	ldr	r2, [r7, #4]
 8005b40:	4611      	mov	r1, r2
 8005b42:	4618      	mov	r0, r3
 8005b44:	f000 ffd4 	bl	8006af0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005b48:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b4a:	f000 fab3 	bl	80060b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005b4e:	f000 fe01 	bl	8006754 <xTaskResumeAll>
 8005b52:	4603      	mov	r3, r0
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	f47f af7c 	bne.w	8005a52 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005b5a:	4b0c      	ldr	r3, [pc, #48]	@ (8005b8c <xQueueGenericSend+0x200>)
 8005b5c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005b60:	601a      	str	r2, [r3, #0]
 8005b62:	f3bf 8f4f 	dsb	sy
 8005b66:	f3bf 8f6f 	isb	sy
 8005b6a:	e772      	b.n	8005a52 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005b6c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b6e:	f000 faa1 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005b72:	f000 fdef 	bl	8006754 <xTaskResumeAll>
 8005b76:	e76c      	b.n	8005a52 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005b78:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005b7a:	f000 fa9b 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005b7e:	f000 fde9 	bl	8006754 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8005b82:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8005b84:	4618      	mov	r0, r3
 8005b86:	3738      	adds	r7, #56	@ 0x38
 8005b88:	46bd      	mov	sp, r7
 8005b8a:	bd80      	pop	{r7, pc}
 8005b8c:	e000ed04 	.word	0xe000ed04

08005b90 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005b90:	b580      	push	{r7, lr}
 8005b92:	b090      	sub	sp, #64	@ 0x40
 8005b94:	af00      	add	r7, sp, #0
 8005b96:	60f8      	str	r0, [r7, #12]
 8005b98:	60b9      	str	r1, [r7, #8]
 8005b9a:	607a      	str	r2, [r7, #4]
 8005b9c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005b9e:	68fb      	ldr	r3, [r7, #12]
 8005ba0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 8005ba2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d10b      	bne.n	8005bc0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005ba8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bac:	f383 8811 	msr	BASEPRI, r3
 8005bb0:	f3bf 8f6f 	isb	sy
 8005bb4:	f3bf 8f4f 	dsb	sy
 8005bb8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005bba:	bf00      	nop
 8005bbc:	bf00      	nop
 8005bbe:	e7fd      	b.n	8005bbc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005bc0:	68bb      	ldr	r3, [r7, #8]
 8005bc2:	2b00      	cmp	r3, #0
 8005bc4:	d103      	bne.n	8005bce <xQueueGenericSendFromISR+0x3e>
 8005bc6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005bca:	2b00      	cmp	r3, #0
 8005bcc:	d101      	bne.n	8005bd2 <xQueueGenericSendFromISR+0x42>
 8005bce:	2301      	movs	r3, #1
 8005bd0:	e000      	b.n	8005bd4 <xQueueGenericSendFromISR+0x44>
 8005bd2:	2300      	movs	r3, #0
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d10b      	bne.n	8005bf0 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8005bd8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bdc:	f383 8811 	msr	BASEPRI, r3
 8005be0:	f3bf 8f6f 	isb	sy
 8005be4:	f3bf 8f4f 	dsb	sy
 8005be8:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005bea:	bf00      	nop
 8005bec:	bf00      	nop
 8005bee:	e7fd      	b.n	8005bec <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005bf0:	683b      	ldr	r3, [r7, #0]
 8005bf2:	2b02      	cmp	r3, #2
 8005bf4:	d103      	bne.n	8005bfe <xQueueGenericSendFromISR+0x6e>
 8005bf6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bf8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bfa:	2b01      	cmp	r3, #1
 8005bfc:	d101      	bne.n	8005c02 <xQueueGenericSendFromISR+0x72>
 8005bfe:	2301      	movs	r3, #1
 8005c00:	e000      	b.n	8005c04 <xQueueGenericSendFromISR+0x74>
 8005c02:	2300      	movs	r3, #0
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d10b      	bne.n	8005c20 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005c08:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c0c:	f383 8811 	msr	BASEPRI, r3
 8005c10:	f3bf 8f6f 	isb	sy
 8005c14:	f3bf 8f4f 	dsb	sy
 8005c18:	623b      	str	r3, [r7, #32]
}
 8005c1a:	bf00      	nop
 8005c1c:	bf00      	nop
 8005c1e:	e7fd      	b.n	8005c1c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005c20:	f001 ffca 	bl	8007bb8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005c24:	f3ef 8211 	mrs	r2, BASEPRI
 8005c28:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c2c:	f383 8811 	msr	BASEPRI, r3
 8005c30:	f3bf 8f6f 	isb	sy
 8005c34:	f3bf 8f4f 	dsb	sy
 8005c38:	61fa      	str	r2, [r7, #28]
 8005c3a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005c3c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005c3e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005c40:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c42:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005c44:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d302      	bcc.n	8005c52 <xQueueGenericSendFromISR+0xc2>
 8005c4c:	683b      	ldr	r3, [r7, #0]
 8005c4e:	2b02      	cmp	r3, #2
 8005c50:	d12f      	bne.n	8005cb2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005c52:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c58:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005c5c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005c62:	683a      	ldr	r2, [r7, #0]
 8005c64:	68b9      	ldr	r1, [r7, #8]
 8005c66:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005c68:	f000 f994 	bl	8005f94 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005c6c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005c70:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c74:	d112      	bne.n	8005c9c <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005c76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c78:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	d016      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005c7e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005c80:	3324      	adds	r3, #36	@ 0x24
 8005c82:	4618      	mov	r0, r3
 8005c84:	f000 ff86 	bl	8006b94 <xTaskRemoveFromEventList>
 8005c88:	4603      	mov	r3, r0
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	d00e      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005c8e:	687b      	ldr	r3, [r7, #4]
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d00b      	beq.n	8005cac <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	601a      	str	r2, [r3, #0]
 8005c9a:	e007      	b.n	8005cac <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005c9c:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005ca0:	3301      	adds	r3, #1
 8005ca2:	b2db      	uxtb	r3, r3
 8005ca4:	b25a      	sxtb	r2, r3
 8005ca6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005ca8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005cac:	2301      	movs	r3, #1
 8005cae:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005cb0:	e001      	b.n	8005cb6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8005cb2:	2300      	movs	r3, #0
 8005cb4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005cb6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005cb8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8005cba:	697b      	ldr	r3, [r7, #20]
 8005cbc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8005cc0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005cc2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 8005cc4:	4618      	mov	r0, r3
 8005cc6:	3740      	adds	r7, #64	@ 0x40
 8005cc8:	46bd      	mov	sp, r7
 8005cca:	bd80      	pop	{r7, pc}

08005ccc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8005ccc:	b580      	push	{r7, lr}
 8005cce:	b08c      	sub	sp, #48	@ 0x30
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	60f8      	str	r0, [r7, #12]
 8005cd4:	60b9      	str	r1, [r7, #8]
 8005cd6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8005cd8:	2300      	movs	r3, #0
 8005cda:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005ce0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d10b      	bne.n	8005cfe <xQueueReceive+0x32>
	__asm volatile
 8005ce6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cea:	f383 8811 	msr	BASEPRI, r3
 8005cee:	f3bf 8f6f 	isb	sy
 8005cf2:	f3bf 8f4f 	dsb	sy
 8005cf6:	623b      	str	r3, [r7, #32]
}
 8005cf8:	bf00      	nop
 8005cfa:	bf00      	nop
 8005cfc:	e7fd      	b.n	8005cfa <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005cfe:	68bb      	ldr	r3, [r7, #8]
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d103      	bne.n	8005d0c <xQueueReceive+0x40>
 8005d04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d06:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005d08:	2b00      	cmp	r3, #0
 8005d0a:	d101      	bne.n	8005d10 <xQueueReceive+0x44>
 8005d0c:	2301      	movs	r3, #1
 8005d0e:	e000      	b.n	8005d12 <xQueueReceive+0x46>
 8005d10:	2300      	movs	r3, #0
 8005d12:	2b00      	cmp	r3, #0
 8005d14:	d10b      	bne.n	8005d2e <xQueueReceive+0x62>
	__asm volatile
 8005d16:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d1a:	f383 8811 	msr	BASEPRI, r3
 8005d1e:	f3bf 8f6f 	isb	sy
 8005d22:	f3bf 8f4f 	dsb	sy
 8005d26:	61fb      	str	r3, [r7, #28]
}
 8005d28:	bf00      	nop
 8005d2a:	bf00      	nop
 8005d2c:	e7fd      	b.n	8005d2a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005d2e:	f001 f8f7 	bl	8006f20 <xTaskGetSchedulerState>
 8005d32:	4603      	mov	r3, r0
 8005d34:	2b00      	cmp	r3, #0
 8005d36:	d102      	bne.n	8005d3e <xQueueReceive+0x72>
 8005d38:	687b      	ldr	r3, [r7, #4]
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d101      	bne.n	8005d42 <xQueueReceive+0x76>
 8005d3e:	2301      	movs	r3, #1
 8005d40:	e000      	b.n	8005d44 <xQueueReceive+0x78>
 8005d42:	2300      	movs	r3, #0
 8005d44:	2b00      	cmp	r3, #0
 8005d46:	d10b      	bne.n	8005d60 <xQueueReceive+0x94>
	__asm volatile
 8005d48:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d4c:	f383 8811 	msr	BASEPRI, r3
 8005d50:	f3bf 8f6f 	isb	sy
 8005d54:	f3bf 8f4f 	dsb	sy
 8005d58:	61bb      	str	r3, [r7, #24]
}
 8005d5a:	bf00      	nop
 8005d5c:	bf00      	nop
 8005d5e:	e7fd      	b.n	8005d5c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005d60:	f001 fe4a 	bl	80079f8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005d64:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d66:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005d68:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005d6a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d01f      	beq.n	8005db0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005d70:	68b9      	ldr	r1, [r7, #8]
 8005d72:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005d74:	f000 f978 	bl	8006068 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d7a:	1e5a      	subs	r2, r3, #1
 8005d7c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d7e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005d80:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d82:	691b      	ldr	r3, [r3, #16]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d00f      	beq.n	8005da8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005d88:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8a:	3310      	adds	r3, #16
 8005d8c:	4618      	mov	r0, r3
 8005d8e:	f000 ff01 	bl	8006b94 <xTaskRemoveFromEventList>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d007      	beq.n	8005da8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005d98:	4b3c      	ldr	r3, [pc, #240]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005d9a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d9e:	601a      	str	r2, [r3, #0]
 8005da0:	f3bf 8f4f 	dsb	sy
 8005da4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005da8:	f001 fe58 	bl	8007a5c <vPortExitCritical>
				return pdPASS;
 8005dac:	2301      	movs	r3, #1
 8005dae:	e069      	b.n	8005e84 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d103      	bne.n	8005dbe <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005db6:	f001 fe51 	bl	8007a5c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	e062      	b.n	8005e84 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005dbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dc0:	2b00      	cmp	r3, #0
 8005dc2:	d106      	bne.n	8005dd2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005dc4:	f107 0310 	add.w	r3, r7, #16
 8005dc8:	4618      	mov	r0, r3
 8005dca:	f000 ff47 	bl	8006c5c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005dce:	2301      	movs	r3, #1
 8005dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005dd2:	f001 fe43 	bl	8007a5c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005dd6:	f000 fcaf 	bl	8006738 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005dda:	f001 fe0d 	bl	80079f8 <vPortEnterCritical>
 8005dde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005de0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005de4:	b25b      	sxtb	r3, r3
 8005de6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dea:	d103      	bne.n	8005df4 <xQueueReceive+0x128>
 8005dec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005dee:	2200      	movs	r2, #0
 8005df0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005df4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005df6:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005dfa:	b25b      	sxtb	r3, r3
 8005dfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005e00:	d103      	bne.n	8005e0a <xQueueReceive+0x13e>
 8005e02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e04:	2200      	movs	r2, #0
 8005e06:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005e0a:	f001 fe27 	bl	8007a5c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005e0e:	1d3a      	adds	r2, r7, #4
 8005e10:	f107 0310 	add.w	r3, r7, #16
 8005e14:	4611      	mov	r1, r2
 8005e16:	4618      	mov	r0, r3
 8005e18:	f000 ff36 	bl	8006c88 <xTaskCheckForTimeOut>
 8005e1c:	4603      	mov	r3, r0
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d123      	bne.n	8005e6a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e22:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e24:	f000 f998 	bl	8006158 <prvIsQueueEmpty>
 8005e28:	4603      	mov	r3, r0
 8005e2a:	2b00      	cmp	r3, #0
 8005e2c:	d017      	beq.n	8005e5e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005e2e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e30:	3324      	adds	r3, #36	@ 0x24
 8005e32:	687a      	ldr	r2, [r7, #4]
 8005e34:	4611      	mov	r1, r2
 8005e36:	4618      	mov	r0, r3
 8005e38:	f000 fe5a 	bl	8006af0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005e3c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e3e:	f000 f939 	bl	80060b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005e42:	f000 fc87 	bl	8006754 <xTaskResumeAll>
 8005e46:	4603      	mov	r3, r0
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d189      	bne.n	8005d60 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8005e8c <xQueueReceive+0x1c0>)
 8005e4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005e52:	601a      	str	r2, [r3, #0]
 8005e54:	f3bf 8f4f 	dsb	sy
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	e780      	b.n	8005d60 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005e5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e60:	f000 f928 	bl	80060b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005e64:	f000 fc76 	bl	8006754 <xTaskResumeAll>
 8005e68:	e77a      	b.n	8005d60 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005e6a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e6c:	f000 f922 	bl	80060b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005e70:	f000 fc70 	bl	8006754 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005e74:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005e76:	f000 f96f 	bl	8006158 <prvIsQueueEmpty>
 8005e7a:	4603      	mov	r3, r0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	f43f af6f 	beq.w	8005d60 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8005e82:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8005e84:	4618      	mov	r0, r3
 8005e86:	3730      	adds	r7, #48	@ 0x30
 8005e88:	46bd      	mov	sp, r7
 8005e8a:	bd80      	pop	{r7, pc}
 8005e8c:	e000ed04 	.word	0xe000ed04

08005e90 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005e90:	b580      	push	{r7, lr}
 8005e92:	b08e      	sub	sp, #56	@ 0x38
 8005e94:	af00      	add	r7, sp, #0
 8005e96:	60f8      	str	r0, [r7, #12]
 8005e98:	60b9      	str	r1, [r7, #8]
 8005e9a:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d10b      	bne.n	8005ebe <xQueueReceiveFromISR+0x2e>
	__asm volatile
 8005ea6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eaa:	f383 8811 	msr	BASEPRI, r3
 8005eae:	f3bf 8f6f 	isb	sy
 8005eb2:	f3bf 8f4f 	dsb	sy
 8005eb6:	623b      	str	r3, [r7, #32]
}
 8005eb8:	bf00      	nop
 8005eba:	bf00      	nop
 8005ebc:	e7fd      	b.n	8005eba <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005ebe:	68bb      	ldr	r3, [r7, #8]
 8005ec0:	2b00      	cmp	r3, #0
 8005ec2:	d103      	bne.n	8005ecc <xQueueReceiveFromISR+0x3c>
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d101      	bne.n	8005ed0 <xQueueReceiveFromISR+0x40>
 8005ecc:	2301      	movs	r3, #1
 8005ece:	e000      	b.n	8005ed2 <xQueueReceiveFromISR+0x42>
 8005ed0:	2300      	movs	r3, #0
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d10b      	bne.n	8005eee <xQueueReceiveFromISR+0x5e>
	__asm volatile
 8005ed6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eda:	f383 8811 	msr	BASEPRI, r3
 8005ede:	f3bf 8f6f 	isb	sy
 8005ee2:	f3bf 8f4f 	dsb	sy
 8005ee6:	61fb      	str	r3, [r7, #28]
}
 8005ee8:	bf00      	nop
 8005eea:	bf00      	nop
 8005eec:	e7fd      	b.n	8005eea <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005eee:	f001 fe63 	bl	8007bb8 <vPortValidateInterruptPriority>
	__asm volatile
 8005ef2:	f3ef 8211 	mrs	r2, BASEPRI
 8005ef6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005efa:	f383 8811 	msr	BASEPRI, r3
 8005efe:	f3bf 8f6f 	isb	sy
 8005f02:	f3bf 8f4f 	dsb	sy
 8005f06:	61ba      	str	r2, [r7, #24]
 8005f08:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 8005f0a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005f0c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005f0e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f10:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005f12:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005f14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d02f      	beq.n	8005f7a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005f1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f20:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005f24:	68b9      	ldr	r1, [r7, #8]
 8005f26:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f28:	f000 f89e 	bl	8006068 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005f2c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005f2e:	1e5a      	subs	r2, r3, #1
 8005f30:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f32:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005f34:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005f38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f3c:	d112      	bne.n	8005f64 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005f3e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f40:	691b      	ldr	r3, [r3, #16]
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d016      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005f46:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f48:	3310      	adds	r3, #16
 8005f4a:	4618      	mov	r0, r3
 8005f4c:	f000 fe22 	bl	8006b94 <xTaskRemoveFromEventList>
 8005f50:	4603      	mov	r3, r0
 8005f52:	2b00      	cmp	r3, #0
 8005f54:	d00e      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2b00      	cmp	r3, #0
 8005f5a:	d00b      	beq.n	8005f74 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	2201      	movs	r2, #1
 8005f60:	601a      	str	r2, [r3, #0]
 8005f62:	e007      	b.n	8005f74 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005f64:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005f68:	3301      	adds	r3, #1
 8005f6a:	b2db      	uxtb	r3, r3
 8005f6c:	b25a      	sxtb	r2, r3
 8005f6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f70:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005f74:	2301      	movs	r3, #1
 8005f76:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f78:	e001      	b.n	8005f7e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005f7a:	2300      	movs	r3, #0
 8005f7c:	637b      	str	r3, [r7, #52]	@ 0x34
 8005f7e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f80:	613b      	str	r3, [r7, #16]
	__asm volatile
 8005f82:	693b      	ldr	r3, [r7, #16]
 8005f84:	f383 8811 	msr	BASEPRI, r3
}
 8005f88:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005f8a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	3738      	adds	r7, #56	@ 0x38
 8005f90:	46bd      	mov	sp, r7
 8005f92:	bd80      	pop	{r7, pc}

08005f94 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8005f94:	b580      	push	{r7, lr}
 8005f96:	b086      	sub	sp, #24
 8005f98:	af00      	add	r7, sp, #0
 8005f9a:	60f8      	str	r0, [r7, #12]
 8005f9c:	60b9      	str	r1, [r7, #8]
 8005f9e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005fa0:	2300      	movs	r3, #0
 8005fa2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005fa4:	68fb      	ldr	r3, [r7, #12]
 8005fa6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005fa8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d10d      	bne.n	8005fce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8005fb2:	68fb      	ldr	r3, [r7, #12]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	d14d      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	689b      	ldr	r3, [r3, #8]
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 ffcc 	bl	8006f5c <xTaskPriorityDisinherit>
 8005fc4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8005fc6:	68fb      	ldr	r3, [r7, #12]
 8005fc8:	2200      	movs	r2, #0
 8005fca:	609a      	str	r2, [r3, #8]
 8005fcc:	e043      	b.n	8006056 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	2b00      	cmp	r3, #0
 8005fd2:	d119      	bne.n	8006008 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	6858      	ldr	r0, [r3, #4]
 8005fd8:	68fb      	ldr	r3, [r7, #12]
 8005fda:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fdc:	461a      	mov	r2, r3
 8005fde:	68b9      	ldr	r1, [r7, #8]
 8005fe0:	f002 fb0d 	bl	80085fe <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005fe4:	68fb      	ldr	r3, [r7, #12]
 8005fe6:	685a      	ldr	r2, [r3, #4]
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005fec:	441a      	add	r2, r3
 8005fee:	68fb      	ldr	r3, [r7, #12]
 8005ff0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	685a      	ldr	r2, [r3, #4]
 8005ff6:	68fb      	ldr	r3, [r7, #12]
 8005ff8:	689b      	ldr	r3, [r3, #8]
 8005ffa:	429a      	cmp	r2, r3
 8005ffc:	d32b      	bcc.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005ffe:	68fb      	ldr	r3, [r7, #12]
 8006000:	681a      	ldr	r2, [r3, #0]
 8006002:	68fb      	ldr	r3, [r7, #12]
 8006004:	605a      	str	r2, [r3, #4]
 8006006:	e026      	b.n	8006056 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	68d8      	ldr	r0, [r3, #12]
 800600c:	68fb      	ldr	r3, [r7, #12]
 800600e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006010:	461a      	mov	r2, r3
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	f002 faf3 	bl	80085fe <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8006018:	68fb      	ldr	r3, [r7, #12]
 800601a:	68da      	ldr	r2, [r3, #12]
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006020:	425b      	negs	r3, r3
 8006022:	441a      	add	r2, r3
 8006024:	68fb      	ldr	r3, [r7, #12]
 8006026:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	68da      	ldr	r2, [r3, #12]
 800602c:	68fb      	ldr	r3, [r7, #12]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	429a      	cmp	r2, r3
 8006032:	d207      	bcs.n	8006044 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8006034:	68fb      	ldr	r3, [r7, #12]
 8006036:	689a      	ldr	r2, [r3, #8]
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800603c:	425b      	negs	r3, r3
 800603e:	441a      	add	r2, r3
 8006040:	68fb      	ldr	r3, [r7, #12]
 8006042:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	2b02      	cmp	r3, #2
 8006048:	d105      	bne.n	8006056 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800604a:	693b      	ldr	r3, [r7, #16]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d002      	beq.n	8006056 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8006050:	693b      	ldr	r3, [r7, #16]
 8006052:	3b01      	subs	r3, #1
 8006054:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006056:	693b      	ldr	r3, [r7, #16]
 8006058:	1c5a      	adds	r2, r3, #1
 800605a:	68fb      	ldr	r3, [r7, #12]
 800605c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 800605e:	697b      	ldr	r3, [r7, #20]
}
 8006060:	4618      	mov	r0, r3
 8006062:	3718      	adds	r7, #24
 8006064:	46bd      	mov	sp, r7
 8006066:	bd80      	pop	{r7, pc}

08006068 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8006068:	b580      	push	{r7, lr}
 800606a:	b082      	sub	sp, #8
 800606c:	af00      	add	r7, sp, #0
 800606e:	6078      	str	r0, [r7, #4]
 8006070:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006076:	2b00      	cmp	r3, #0
 8006078:	d018      	beq.n	80060ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	68da      	ldr	r2, [r3, #12]
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006082:	441a      	add	r2, r3
 8006084:	687b      	ldr	r3, [r7, #4]
 8006086:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	68da      	ldr	r2, [r3, #12]
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	689b      	ldr	r3, [r3, #8]
 8006090:	429a      	cmp	r2, r3
 8006092:	d303      	bcc.n	800609c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	681a      	ldr	r2, [r3, #0]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	68d9      	ldr	r1, [r3, #12]
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80060a4:	461a      	mov	r2, r3
 80060a6:	6838      	ldr	r0, [r7, #0]
 80060a8:	f002 faa9 	bl	80085fe <memcpy>
	}
}
 80060ac:	bf00      	nop
 80060ae:	3708      	adds	r7, #8
 80060b0:	46bd      	mov	sp, r7
 80060b2:	bd80      	pop	{r7, pc}

080060b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80060b4:	b580      	push	{r7, lr}
 80060b6:	b084      	sub	sp, #16
 80060b8:	af00      	add	r7, sp, #0
 80060ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80060bc:	f001 fc9c 	bl	80079f8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80060c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060c8:	e011      	b.n	80060ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d012      	beq.n	80060f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	3324      	adds	r3, #36	@ 0x24
 80060d6:	4618      	mov	r0, r3
 80060d8:	f000 fd5c 	bl	8006b94 <xTaskRemoveFromEventList>
 80060dc:	4603      	mov	r3, r0
 80060de:	2b00      	cmp	r3, #0
 80060e0:	d001      	beq.n	80060e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80060e2:	f000 fe35 	bl	8006d50 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80060e6:	7bfb      	ldrb	r3, [r7, #15]
 80060e8:	3b01      	subs	r3, #1
 80060ea:	b2db      	uxtb	r3, r3
 80060ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80060ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	dce9      	bgt.n	80060ca <prvUnlockQueue+0x16>
 80060f6:	e000      	b.n	80060fa <prvUnlockQueue+0x46>
					break;
 80060f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80060fa:	687b      	ldr	r3, [r7, #4]
 80060fc:	22ff      	movs	r2, #255	@ 0xff
 80060fe:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8006102:	f001 fcab 	bl	8007a5c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8006106:	f001 fc77 	bl	80079f8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006110:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006112:	e011      	b.n	8006138 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	691b      	ldr	r3, [r3, #16]
 8006118:	2b00      	cmp	r3, #0
 800611a:	d012      	beq.n	8006142 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800611c:	687b      	ldr	r3, [r7, #4]
 800611e:	3310      	adds	r3, #16
 8006120:	4618      	mov	r0, r3
 8006122:	f000 fd37 	bl	8006b94 <xTaskRemoveFromEventList>
 8006126:	4603      	mov	r3, r0
 8006128:	2b00      	cmp	r3, #0
 800612a:	d001      	beq.n	8006130 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800612c:	f000 fe10 	bl	8006d50 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8006130:	7bbb      	ldrb	r3, [r7, #14]
 8006132:	3b01      	subs	r3, #1
 8006134:	b2db      	uxtb	r3, r3
 8006136:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8006138:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800613c:	2b00      	cmp	r3, #0
 800613e:	dce9      	bgt.n	8006114 <prvUnlockQueue+0x60>
 8006140:	e000      	b.n	8006144 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8006142:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	22ff      	movs	r2, #255	@ 0xff
 8006148:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 800614c:	f001 fc86 	bl	8007a5c <vPortExitCritical>
}
 8006150:	bf00      	nop
 8006152:	3710      	adds	r7, #16
 8006154:	46bd      	mov	sp, r7
 8006156:	bd80      	pop	{r7, pc}

08006158 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8006158:	b580      	push	{r7, lr}
 800615a:	b084      	sub	sp, #16
 800615c:	af00      	add	r7, sp, #0
 800615e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006160:	f001 fc4a 	bl	80079f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006168:	2b00      	cmp	r3, #0
 800616a:	d102      	bne.n	8006172 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800616c:	2301      	movs	r3, #1
 800616e:	60fb      	str	r3, [r7, #12]
 8006170:	e001      	b.n	8006176 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006172:	2300      	movs	r3, #0
 8006174:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8006176:	f001 fc71 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 800617a:	68fb      	ldr	r3, [r7, #12]
}
 800617c:	4618      	mov	r0, r3
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}

08006184 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b084      	sub	sp, #16
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800618c:	f001 fc34 	bl	80079f8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006190:	687b      	ldr	r3, [r7, #4]
 8006192:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006198:	429a      	cmp	r2, r3
 800619a:	d102      	bne.n	80061a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800619c:	2301      	movs	r3, #1
 800619e:	60fb      	str	r3, [r7, #12]
 80061a0:	e001      	b.n	80061a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80061a2:	2300      	movs	r3, #0
 80061a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80061a6:	f001 fc59 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 80061aa:	68fb      	ldr	r3, [r7, #12]
}
 80061ac:	4618      	mov	r0, r3
 80061ae:	3710      	adds	r7, #16
 80061b0:	46bd      	mov	sp, r7
 80061b2:	bd80      	pop	{r7, pc}

080061b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80061b4:	b480      	push	{r7}
 80061b6:	b085      	sub	sp, #20
 80061b8:	af00      	add	r7, sp, #0
 80061ba:	6078      	str	r0, [r7, #4]
 80061bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061be:	2300      	movs	r3, #0
 80061c0:	60fb      	str	r3, [r7, #12]
 80061c2:	e014      	b.n	80061ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80061c4:	4a0f      	ldr	r2, [pc, #60]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061c6:	68fb      	ldr	r3, [r7, #12]
 80061c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d10b      	bne.n	80061e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80061d0:	490c      	ldr	r1, [pc, #48]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061d2:	68fb      	ldr	r3, [r7, #12]
 80061d4:	683a      	ldr	r2, [r7, #0]
 80061d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80061da:	4a0a      	ldr	r2, [pc, #40]	@ (8006204 <vQueueAddToRegistry+0x50>)
 80061dc:	68fb      	ldr	r3, [r7, #12]
 80061de:	00db      	lsls	r3, r3, #3
 80061e0:	4413      	add	r3, r2
 80061e2:	687a      	ldr	r2, [r7, #4]
 80061e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80061e6:	e006      	b.n	80061f6 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	3301      	adds	r3, #1
 80061ec:	60fb      	str	r3, [r7, #12]
 80061ee:	68fb      	ldr	r3, [r7, #12]
 80061f0:	2b07      	cmp	r3, #7
 80061f2:	d9e7      	bls.n	80061c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80061f4:	bf00      	nop
 80061f6:	bf00      	nop
 80061f8:	3714      	adds	r7, #20
 80061fa:	46bd      	mov	sp, r7
 80061fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006200:	4770      	bx	lr
 8006202:	bf00      	nop
 8006204:	200008f4 	.word	0x200008f4

08006208 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006208:	b580      	push	{r7, lr}
 800620a:	b086      	sub	sp, #24
 800620c:	af00      	add	r7, sp, #0
 800620e:	60f8      	str	r0, [r7, #12]
 8006210:	60b9      	str	r1, [r7, #8]
 8006212:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8006214:	68fb      	ldr	r3, [r7, #12]
 8006216:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8006218:	f001 fbee 	bl	80079f8 <vPortEnterCritical>
 800621c:	697b      	ldr	r3, [r7, #20]
 800621e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8006222:	b25b      	sxtb	r3, r3
 8006224:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006228:	d103      	bne.n	8006232 <vQueueWaitForMessageRestricted+0x2a>
 800622a:	697b      	ldr	r3, [r7, #20]
 800622c:	2200      	movs	r2, #0
 800622e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006238:	b25b      	sxtb	r3, r3
 800623a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800623e:	d103      	bne.n	8006248 <vQueueWaitForMessageRestricted+0x40>
 8006240:	697b      	ldr	r3, [r7, #20]
 8006242:	2200      	movs	r2, #0
 8006244:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8006248:	f001 fc08 	bl	8007a5c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800624c:	697b      	ldr	r3, [r7, #20]
 800624e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006250:	2b00      	cmp	r3, #0
 8006252:	d106      	bne.n	8006262 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8006254:	697b      	ldr	r3, [r7, #20]
 8006256:	3324      	adds	r3, #36	@ 0x24
 8006258:	687a      	ldr	r2, [r7, #4]
 800625a:	68b9      	ldr	r1, [r7, #8]
 800625c:	4618      	mov	r0, r3
 800625e:	f000 fc6d 	bl	8006b3c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006262:	6978      	ldr	r0, [r7, #20]
 8006264:	f7ff ff26 	bl	80060b4 <prvUnlockQueue>
	}
 8006268:	bf00      	nop
 800626a:	3718      	adds	r7, #24
 800626c:	46bd      	mov	sp, r7
 800626e:	bd80      	pop	{r7, pc}

08006270 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006270:	b580      	push	{r7, lr}
 8006272:	b08e      	sub	sp, #56	@ 0x38
 8006274:	af04      	add	r7, sp, #16
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800627e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006280:	2b00      	cmp	r3, #0
 8006282:	d10b      	bne.n	800629c <xTaskCreateStatic+0x2c>
	__asm volatile
 8006284:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006288:	f383 8811 	msr	BASEPRI, r3
 800628c:	f3bf 8f6f 	isb	sy
 8006290:	f3bf 8f4f 	dsb	sy
 8006294:	623b      	str	r3, [r7, #32]
}
 8006296:	bf00      	nop
 8006298:	bf00      	nop
 800629a:	e7fd      	b.n	8006298 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 800629c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800629e:	2b00      	cmp	r3, #0
 80062a0:	d10b      	bne.n	80062ba <xTaskCreateStatic+0x4a>
	__asm volatile
 80062a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062a6:	f383 8811 	msr	BASEPRI, r3
 80062aa:	f3bf 8f6f 	isb	sy
 80062ae:	f3bf 8f4f 	dsb	sy
 80062b2:	61fb      	str	r3, [r7, #28]
}
 80062b4:	bf00      	nop
 80062b6:	bf00      	nop
 80062b8:	e7fd      	b.n	80062b6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80062ba:	23a8      	movs	r3, #168	@ 0xa8
 80062bc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80062be:	693b      	ldr	r3, [r7, #16]
 80062c0:	2ba8      	cmp	r3, #168	@ 0xa8
 80062c2:	d00b      	beq.n	80062dc <xTaskCreateStatic+0x6c>
	__asm volatile
 80062c4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80062c8:	f383 8811 	msr	BASEPRI, r3
 80062cc:	f3bf 8f6f 	isb	sy
 80062d0:	f3bf 8f4f 	dsb	sy
 80062d4:	61bb      	str	r3, [r7, #24]
}
 80062d6:	bf00      	nop
 80062d8:	bf00      	nop
 80062da:	e7fd      	b.n	80062d8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80062dc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80062de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062e0:	2b00      	cmp	r3, #0
 80062e2:	d01e      	beq.n	8006322 <xTaskCreateStatic+0xb2>
 80062e4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80062e6:	2b00      	cmp	r3, #0
 80062e8:	d01b      	beq.n	8006322 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80062ea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80062ec:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80062ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80062f2:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80062f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80062f6:	2202      	movs	r2, #2
 80062f8:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80062fc:	2300      	movs	r3, #0
 80062fe:	9303      	str	r3, [sp, #12]
 8006300:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006302:	9302      	str	r3, [sp, #8]
 8006304:	f107 0314 	add.w	r3, r7, #20
 8006308:	9301      	str	r3, [sp, #4]
 800630a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800630c:	9300      	str	r3, [sp, #0]
 800630e:	683b      	ldr	r3, [r7, #0]
 8006310:	687a      	ldr	r2, [r7, #4]
 8006312:	68b9      	ldr	r1, [r7, #8]
 8006314:	68f8      	ldr	r0, [r7, #12]
 8006316:	f000 f851 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800631a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 800631c:	f000 f8f6 	bl	800650c <prvAddNewTaskToReadyList>
 8006320:	e001      	b.n	8006326 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8006326:	697b      	ldr	r3, [r7, #20]
	}
 8006328:	4618      	mov	r0, r3
 800632a:	3728      	adds	r7, #40	@ 0x28
 800632c:	46bd      	mov	sp, r7
 800632e:	bd80      	pop	{r7, pc}

08006330 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8006330:	b580      	push	{r7, lr}
 8006332:	b08c      	sub	sp, #48	@ 0x30
 8006334:	af04      	add	r7, sp, #16
 8006336:	60f8      	str	r0, [r7, #12]
 8006338:	60b9      	str	r1, [r7, #8]
 800633a:	603b      	str	r3, [r7, #0]
 800633c:	4613      	mov	r3, r2
 800633e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8006340:	88fb      	ldrh	r3, [r7, #6]
 8006342:	009b      	lsls	r3, r3, #2
 8006344:	4618      	mov	r0, r3
 8006346:	f001 fc79 	bl	8007c3c <pvPortMalloc>
 800634a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800634c:	697b      	ldr	r3, [r7, #20]
 800634e:	2b00      	cmp	r3, #0
 8006350:	d00e      	beq.n	8006370 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8006352:	20a8      	movs	r0, #168	@ 0xa8
 8006354:	f001 fc72 	bl	8007c3c <pvPortMalloc>
 8006358:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800635a:	69fb      	ldr	r3, [r7, #28]
 800635c:	2b00      	cmp	r3, #0
 800635e:	d003      	beq.n	8006368 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006360:	69fb      	ldr	r3, [r7, #28]
 8006362:	697a      	ldr	r2, [r7, #20]
 8006364:	631a      	str	r2, [r3, #48]	@ 0x30
 8006366:	e005      	b.n	8006374 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8006368:	6978      	ldr	r0, [r7, #20]
 800636a:	f001 fd35 	bl	8007dd8 <vPortFree>
 800636e:	e001      	b.n	8006374 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006370:	2300      	movs	r3, #0
 8006372:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006374:	69fb      	ldr	r3, [r7, #28]
 8006376:	2b00      	cmp	r3, #0
 8006378:	d017      	beq.n	80063aa <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800637a:	69fb      	ldr	r3, [r7, #28]
 800637c:	2200      	movs	r2, #0
 800637e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006382:	88fa      	ldrh	r2, [r7, #6]
 8006384:	2300      	movs	r3, #0
 8006386:	9303      	str	r3, [sp, #12]
 8006388:	69fb      	ldr	r3, [r7, #28]
 800638a:	9302      	str	r3, [sp, #8]
 800638c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800638e:	9301      	str	r3, [sp, #4]
 8006390:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006392:	9300      	str	r3, [sp, #0]
 8006394:	683b      	ldr	r3, [r7, #0]
 8006396:	68b9      	ldr	r1, [r7, #8]
 8006398:	68f8      	ldr	r0, [r7, #12]
 800639a:	f000 f80f 	bl	80063bc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800639e:	69f8      	ldr	r0, [r7, #28]
 80063a0:	f000 f8b4 	bl	800650c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80063a4:	2301      	movs	r3, #1
 80063a6:	61bb      	str	r3, [r7, #24]
 80063a8:	e002      	b.n	80063b0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80063aa:	f04f 33ff 	mov.w	r3, #4294967295
 80063ae:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80063b0:	69bb      	ldr	r3, [r7, #24]
	}
 80063b2:	4618      	mov	r0, r3
 80063b4:	3720      	adds	r7, #32
 80063b6:	46bd      	mov	sp, r7
 80063b8:	bd80      	pop	{r7, pc}
	...

080063bc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80063bc:	b580      	push	{r7, lr}
 80063be:	b088      	sub	sp, #32
 80063c0:	af00      	add	r7, sp, #0
 80063c2:	60f8      	str	r0, [r7, #12]
 80063c4:	60b9      	str	r1, [r7, #8]
 80063c6:	607a      	str	r2, [r7, #4]
 80063c8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80063ca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063cc:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	009b      	lsls	r3, r3, #2
 80063d2:	461a      	mov	r2, r3
 80063d4:	21a5      	movs	r1, #165	@ 0xa5
 80063d6:	f002 f839 	bl	800844c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80063da:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80063dc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 80063e4:	3b01      	subs	r3, #1
 80063e6:	009b      	lsls	r3, r3, #2
 80063e8:	4413      	add	r3, r2
 80063ea:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80063ec:	69bb      	ldr	r3, [r7, #24]
 80063ee:	f023 0307 	bic.w	r3, r3, #7
 80063f2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80063f4:	69bb      	ldr	r3, [r7, #24]
 80063f6:	f003 0307 	and.w	r3, r3, #7
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d00b      	beq.n	8006416 <prvInitialiseNewTask+0x5a>
	__asm volatile
 80063fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006402:	f383 8811 	msr	BASEPRI, r3
 8006406:	f3bf 8f6f 	isb	sy
 800640a:	f3bf 8f4f 	dsb	sy
 800640e:	617b      	str	r3, [r7, #20]
}
 8006410:	bf00      	nop
 8006412:	bf00      	nop
 8006414:	e7fd      	b.n	8006412 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8006416:	68bb      	ldr	r3, [r7, #8]
 8006418:	2b00      	cmp	r3, #0
 800641a:	d01f      	beq.n	800645c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800641c:	2300      	movs	r3, #0
 800641e:	61fb      	str	r3, [r7, #28]
 8006420:	e012      	b.n	8006448 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8006422:	68ba      	ldr	r2, [r7, #8]
 8006424:	69fb      	ldr	r3, [r7, #28]
 8006426:	4413      	add	r3, r2
 8006428:	7819      	ldrb	r1, [r3, #0]
 800642a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800642c:	69fb      	ldr	r3, [r7, #28]
 800642e:	4413      	add	r3, r2
 8006430:	3334      	adds	r3, #52	@ 0x34
 8006432:	460a      	mov	r2, r1
 8006434:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8006436:	68ba      	ldr	r2, [r7, #8]
 8006438:	69fb      	ldr	r3, [r7, #28]
 800643a:	4413      	add	r3, r2
 800643c:	781b      	ldrb	r3, [r3, #0]
 800643e:	2b00      	cmp	r3, #0
 8006440:	d006      	beq.n	8006450 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8006442:	69fb      	ldr	r3, [r7, #28]
 8006444:	3301      	adds	r3, #1
 8006446:	61fb      	str	r3, [r7, #28]
 8006448:	69fb      	ldr	r3, [r7, #28]
 800644a:	2b0f      	cmp	r3, #15
 800644c:	d9e9      	bls.n	8006422 <prvInitialiseNewTask+0x66>
 800644e:	e000      	b.n	8006452 <prvInitialiseNewTask+0x96>
			{
				break;
 8006450:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8006452:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006454:	2200      	movs	r2, #0
 8006456:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800645a:	e003      	b.n	8006464 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800645c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800645e:	2200      	movs	r2, #0
 8006460:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006466:	2b37      	cmp	r3, #55	@ 0x37
 8006468:	d901      	bls.n	800646e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800646a:	2337      	movs	r3, #55	@ 0x37
 800646c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800646e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006470:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006472:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006474:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006476:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006478:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800647a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800647c:	2200      	movs	r2, #0
 800647e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006480:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006482:	3304      	adds	r3, #4
 8006484:	4618      	mov	r0, r3
 8006486:	f7ff f8a7 	bl	80055d8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800648a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800648c:	3318      	adds	r3, #24
 800648e:	4618      	mov	r0, r3
 8006490:	f7ff f8a2 	bl	80055d8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006496:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006498:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800649a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800649c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80064a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80064a4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064a6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064a8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80064aa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ac:	2200      	movs	r2, #0
 80064ae:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80064b2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80064ba:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064bc:	3354      	adds	r3, #84	@ 0x54
 80064be:	224c      	movs	r2, #76	@ 0x4c
 80064c0:	2100      	movs	r1, #0
 80064c2:	4618      	mov	r0, r3
 80064c4:	f001 ffc2 	bl	800844c <memset>
 80064c8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064ca:	4a0d      	ldr	r2, [pc, #52]	@ (8006500 <prvInitialiseNewTask+0x144>)
 80064cc:	659a      	str	r2, [r3, #88]	@ 0x58
 80064ce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d0:	4a0c      	ldr	r2, [pc, #48]	@ (8006504 <prvInitialiseNewTask+0x148>)
 80064d2:	65da      	str	r2, [r3, #92]	@ 0x5c
 80064d4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <prvInitialiseNewTask+0x14c>)
 80064d8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80064da:	683a      	ldr	r2, [r7, #0]
 80064dc:	68f9      	ldr	r1, [r7, #12]
 80064de:	69b8      	ldr	r0, [r7, #24]
 80064e0:	f001 f95a 	bl	8007798 <pxPortInitialiseStack>
 80064e4:	4602      	mov	r2, r0
 80064e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80064e8:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80064ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064ec:	2b00      	cmp	r3, #0
 80064ee:	d002      	beq.n	80064f6 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80064f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80064f2:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80064f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80064f6:	bf00      	nop
 80064f8:	3720      	adds	r7, #32
 80064fa:	46bd      	mov	sp, r7
 80064fc:	bd80      	pop	{r7, pc}
 80064fe:	bf00      	nop
 8006500:	20004b88 	.word	0x20004b88
 8006504:	20004bf0 	.word	0x20004bf0
 8006508:	20004c58 	.word	0x20004c58

0800650c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800650c:	b580      	push	{r7, lr}
 800650e:	b082      	sub	sp, #8
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8006514:	f001 fa70 	bl	80079f8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8006518:	4b2d      	ldr	r3, [pc, #180]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	3301      	adds	r3, #1
 800651e:	4a2c      	ldr	r2, [pc, #176]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 8006520:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8006522:	4b2c      	ldr	r3, [pc, #176]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006524:	681b      	ldr	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d109      	bne.n	800653e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800652a:	4a2a      	ldr	r2, [pc, #168]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8006530:	4b27      	ldr	r3, [pc, #156]	@ (80065d0 <prvAddNewTaskToReadyList+0xc4>)
 8006532:	681b      	ldr	r3, [r3, #0]
 8006534:	2b01      	cmp	r3, #1
 8006536:	d110      	bne.n	800655a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8006538:	f000 fc2e 	bl	8006d98 <prvInitialiseTaskLists>
 800653c:	e00d      	b.n	800655a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800653e:	4b26      	ldr	r3, [pc, #152]	@ (80065d8 <prvAddNewTaskToReadyList+0xcc>)
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	2b00      	cmp	r3, #0
 8006544:	d109      	bne.n	800655a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8006546:	4b23      	ldr	r3, [pc, #140]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800654c:	687b      	ldr	r3, [r7, #4]
 800654e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006550:	429a      	cmp	r2, r3
 8006552:	d802      	bhi.n	800655a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8006554:	4a1f      	ldr	r2, [pc, #124]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 8006556:	687b      	ldr	r3, [r7, #4]
 8006558:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800655a:	4b20      	ldr	r3, [pc, #128]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	3301      	adds	r3, #1
 8006560:	4a1e      	ldr	r2, [pc, #120]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 8006562:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006564:	4b1d      	ldr	r3, [pc, #116]	@ (80065dc <prvAddNewTaskToReadyList+0xd0>)
 8006566:	681a      	ldr	r2, [r3, #0]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006570:	4b1b      	ldr	r3, [pc, #108]	@ (80065e0 <prvAddNewTaskToReadyList+0xd4>)
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	429a      	cmp	r2, r3
 8006576:	d903      	bls.n	8006580 <prvAddNewTaskToReadyList+0x74>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800657c:	4a18      	ldr	r2, [pc, #96]	@ (80065e0 <prvAddNewTaskToReadyList+0xd4>)
 800657e:	6013      	str	r3, [r2, #0]
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006584:	4613      	mov	r3, r2
 8006586:	009b      	lsls	r3, r3, #2
 8006588:	4413      	add	r3, r2
 800658a:	009b      	lsls	r3, r3, #2
 800658c:	4a15      	ldr	r2, [pc, #84]	@ (80065e4 <prvAddNewTaskToReadyList+0xd8>)
 800658e:	441a      	add	r2, r3
 8006590:	687b      	ldr	r3, [r7, #4]
 8006592:	3304      	adds	r3, #4
 8006594:	4619      	mov	r1, r3
 8006596:	4610      	mov	r0, r2
 8006598:	f7ff f82b 	bl	80055f2 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800659c:	f001 fa5e 	bl	8007a5c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 80065a0:	4b0d      	ldr	r3, [pc, #52]	@ (80065d8 <prvAddNewTaskToReadyList+0xcc>)
 80065a2:	681b      	ldr	r3, [r3, #0]
 80065a4:	2b00      	cmp	r3, #0
 80065a6:	d00e      	beq.n	80065c6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 80065a8:	4b0a      	ldr	r3, [pc, #40]	@ (80065d4 <prvAddNewTaskToReadyList+0xc8>)
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80065b2:	429a      	cmp	r2, r3
 80065b4:	d207      	bcs.n	80065c6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 80065b6:	4b0c      	ldr	r3, [pc, #48]	@ (80065e8 <prvAddNewTaskToReadyList+0xdc>)
 80065b8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80065bc:	601a      	str	r2, [r3, #0]
 80065be:	f3bf 8f4f 	dsb	sy
 80065c2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80065c6:	bf00      	nop
 80065c8:	3708      	adds	r7, #8
 80065ca:	46bd      	mov	sp, r7
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	bf00      	nop
 80065d0:	20000e08 	.word	0x20000e08
 80065d4:	20000934 	.word	0x20000934
 80065d8:	20000e14 	.word	0x20000e14
 80065dc:	20000e24 	.word	0x20000e24
 80065e0:	20000e10 	.word	0x20000e10
 80065e4:	20000938 	.word	0x20000938
 80065e8:	e000ed04 	.word	0xe000ed04

080065ec <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80065ec:	b580      	push	{r7, lr}
 80065ee:	b084      	sub	sp, #16
 80065f0:	af00      	add	r7, sp, #0
 80065f2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80065f4:	2300      	movs	r3, #0
 80065f6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2b00      	cmp	r3, #0
 80065fc:	d018      	beq.n	8006630 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80065fe:	4b14      	ldr	r3, [pc, #80]	@ (8006650 <vTaskDelay+0x64>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d00b      	beq.n	800661e <vTaskDelay+0x32>
	__asm volatile
 8006606:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800660a:	f383 8811 	msr	BASEPRI, r3
 800660e:	f3bf 8f6f 	isb	sy
 8006612:	f3bf 8f4f 	dsb	sy
 8006616:	60bb      	str	r3, [r7, #8]
}
 8006618:	bf00      	nop
 800661a:	bf00      	nop
 800661c:	e7fd      	b.n	800661a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800661e:	f000 f88b 	bl	8006738 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006622:	2100      	movs	r1, #0
 8006624:	6878      	ldr	r0, [r7, #4]
 8006626:	f000 fd09 	bl	800703c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800662a:	f000 f893 	bl	8006754 <xTaskResumeAll>
 800662e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006630:	68fb      	ldr	r3, [r7, #12]
 8006632:	2b00      	cmp	r3, #0
 8006634:	d107      	bne.n	8006646 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006636:	4b07      	ldr	r3, [pc, #28]	@ (8006654 <vTaskDelay+0x68>)
 8006638:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800663c:	601a      	str	r2, [r3, #0]
 800663e:	f3bf 8f4f 	dsb	sy
 8006642:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006646:	bf00      	nop
 8006648:	3710      	adds	r7, #16
 800664a:	46bd      	mov	sp, r7
 800664c:	bd80      	pop	{r7, pc}
 800664e:	bf00      	nop
 8006650:	20000e30 	.word	0x20000e30
 8006654:	e000ed04 	.word	0xe000ed04

08006658 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006658:	b580      	push	{r7, lr}
 800665a:	b08a      	sub	sp, #40	@ 0x28
 800665c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800665e:	2300      	movs	r3, #0
 8006660:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006662:	2300      	movs	r3, #0
 8006664:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006666:	463a      	mov	r2, r7
 8006668:	1d39      	adds	r1, r7, #4
 800666a:	f107 0308 	add.w	r3, r7, #8
 800666e:	4618      	mov	r0, r3
 8006670:	f7fe ff5e 	bl	8005530 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006674:	6839      	ldr	r1, [r7, #0]
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	68ba      	ldr	r2, [r7, #8]
 800667a:	9202      	str	r2, [sp, #8]
 800667c:	9301      	str	r3, [sp, #4]
 800667e:	2300      	movs	r3, #0
 8006680:	9300      	str	r3, [sp, #0]
 8006682:	2300      	movs	r3, #0
 8006684:	460a      	mov	r2, r1
 8006686:	4924      	ldr	r1, [pc, #144]	@ (8006718 <vTaskStartScheduler+0xc0>)
 8006688:	4824      	ldr	r0, [pc, #144]	@ (800671c <vTaskStartScheduler+0xc4>)
 800668a:	f7ff fdf1 	bl	8006270 <xTaskCreateStatic>
 800668e:	4603      	mov	r3, r0
 8006690:	4a23      	ldr	r2, [pc, #140]	@ (8006720 <vTaskStartScheduler+0xc8>)
 8006692:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006694:	4b22      	ldr	r3, [pc, #136]	@ (8006720 <vTaskStartScheduler+0xc8>)
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	2b00      	cmp	r3, #0
 800669a:	d002      	beq.n	80066a2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800669c:	2301      	movs	r3, #1
 800669e:	617b      	str	r3, [r7, #20]
 80066a0:	e001      	b.n	80066a6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80066a2:	2300      	movs	r3, #0
 80066a4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80066a6:	697b      	ldr	r3, [r7, #20]
 80066a8:	2b01      	cmp	r3, #1
 80066aa:	d102      	bne.n	80066b2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80066ac:	f000 fd1a 	bl	80070e4 <xTimerCreateTimerTask>
 80066b0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80066b2:	697b      	ldr	r3, [r7, #20]
 80066b4:	2b01      	cmp	r3, #1
 80066b6:	d11b      	bne.n	80066f0 <vTaskStartScheduler+0x98>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	613b      	str	r3, [r7, #16]
}
 80066ca:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80066cc:	4b15      	ldr	r3, [pc, #84]	@ (8006724 <vTaskStartScheduler+0xcc>)
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	3354      	adds	r3, #84	@ 0x54
 80066d2:	4a15      	ldr	r2, [pc, #84]	@ (8006728 <vTaskStartScheduler+0xd0>)
 80066d4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80066d6:	4b15      	ldr	r3, [pc, #84]	@ (800672c <vTaskStartScheduler+0xd4>)
 80066d8:	f04f 32ff 	mov.w	r2, #4294967295
 80066dc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80066de:	4b14      	ldr	r3, [pc, #80]	@ (8006730 <vTaskStartScheduler+0xd8>)
 80066e0:	2201      	movs	r2, #1
 80066e2:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80066e4:	4b13      	ldr	r3, [pc, #76]	@ (8006734 <vTaskStartScheduler+0xdc>)
 80066e6:	2200      	movs	r2, #0
 80066e8:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80066ea:	f001 f8e1 	bl	80078b0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80066ee:	e00f      	b.n	8006710 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80066f6:	d10b      	bne.n	8006710 <vTaskStartScheduler+0xb8>
	__asm volatile
 80066f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066fc:	f383 8811 	msr	BASEPRI, r3
 8006700:	f3bf 8f6f 	isb	sy
 8006704:	f3bf 8f4f 	dsb	sy
 8006708:	60fb      	str	r3, [r7, #12]
}
 800670a:	bf00      	nop
 800670c:	bf00      	nop
 800670e:	e7fd      	b.n	800670c <vTaskStartScheduler+0xb4>
}
 8006710:	bf00      	nop
 8006712:	3718      	adds	r7, #24
 8006714:	46bd      	mov	sp, r7
 8006716:	bd80      	pop	{r7, pc}
 8006718:	0800b758 	.word	0x0800b758
 800671c:	08006d69 	.word	0x08006d69
 8006720:	20000e2c 	.word	0x20000e2c
 8006724:	20000934 	.word	0x20000934
 8006728:	2000001c 	.word	0x2000001c
 800672c:	20000e28 	.word	0x20000e28
 8006730:	20000e14 	.word	0x20000e14
 8006734:	20000e0c 	.word	0x20000e0c

08006738 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006738:	b480      	push	{r7}
 800673a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800673c:	4b04      	ldr	r3, [pc, #16]	@ (8006750 <vTaskSuspendAll+0x18>)
 800673e:	681b      	ldr	r3, [r3, #0]
 8006740:	3301      	adds	r3, #1
 8006742:	4a03      	ldr	r2, [pc, #12]	@ (8006750 <vTaskSuspendAll+0x18>)
 8006744:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006746:	bf00      	nop
 8006748:	46bd      	mov	sp, r7
 800674a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674e:	4770      	bx	lr
 8006750:	20000e30 	.word	0x20000e30

08006754 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006754:	b580      	push	{r7, lr}
 8006756:	b084      	sub	sp, #16
 8006758:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800675a:	2300      	movs	r3, #0
 800675c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800675e:	2300      	movs	r3, #0
 8006760:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006762:	4b42      	ldr	r3, [pc, #264]	@ (800686c <xTaskResumeAll+0x118>)
 8006764:	681b      	ldr	r3, [r3, #0]
 8006766:	2b00      	cmp	r3, #0
 8006768:	d10b      	bne.n	8006782 <xTaskResumeAll+0x2e>
	__asm volatile
 800676a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800676e:	f383 8811 	msr	BASEPRI, r3
 8006772:	f3bf 8f6f 	isb	sy
 8006776:	f3bf 8f4f 	dsb	sy
 800677a:	603b      	str	r3, [r7, #0]
}
 800677c:	bf00      	nop
 800677e:	bf00      	nop
 8006780:	e7fd      	b.n	800677e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006782:	f001 f939 	bl	80079f8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006786:	4b39      	ldr	r3, [pc, #228]	@ (800686c <xTaskResumeAll+0x118>)
 8006788:	681b      	ldr	r3, [r3, #0]
 800678a:	3b01      	subs	r3, #1
 800678c:	4a37      	ldr	r2, [pc, #220]	@ (800686c <xTaskResumeAll+0x118>)
 800678e:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006790:	4b36      	ldr	r3, [pc, #216]	@ (800686c <xTaskResumeAll+0x118>)
 8006792:	681b      	ldr	r3, [r3, #0]
 8006794:	2b00      	cmp	r3, #0
 8006796:	d162      	bne.n	800685e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006798:	4b35      	ldr	r3, [pc, #212]	@ (8006870 <xTaskResumeAll+0x11c>)
 800679a:	681b      	ldr	r3, [r3, #0]
 800679c:	2b00      	cmp	r3, #0
 800679e:	d05e      	beq.n	800685e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80067a0:	e02f      	b.n	8006802 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80067a2:	4b34      	ldr	r3, [pc, #208]	@ (8006874 <xTaskResumeAll+0x120>)
 80067a4:	68db      	ldr	r3, [r3, #12]
 80067a6:	68db      	ldr	r3, [r3, #12]
 80067a8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80067aa:	68fb      	ldr	r3, [r7, #12]
 80067ac:	3318      	adds	r3, #24
 80067ae:	4618      	mov	r0, r3
 80067b0:	f7fe ff7c 	bl	80056ac <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	3304      	adds	r3, #4
 80067b8:	4618      	mov	r0, r3
 80067ba:	f7fe ff77 	bl	80056ac <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80067be:	68fb      	ldr	r3, [r7, #12]
 80067c0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067c2:	4b2d      	ldr	r3, [pc, #180]	@ (8006878 <xTaskResumeAll+0x124>)
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	429a      	cmp	r2, r3
 80067c8:	d903      	bls.n	80067d2 <xTaskResumeAll+0x7e>
 80067ca:	68fb      	ldr	r3, [r7, #12]
 80067cc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006878 <xTaskResumeAll+0x124>)
 80067d0:	6013      	str	r3, [r2, #0]
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067d6:	4613      	mov	r3, r2
 80067d8:	009b      	lsls	r3, r3, #2
 80067da:	4413      	add	r3, r2
 80067dc:	009b      	lsls	r3, r3, #2
 80067de:	4a27      	ldr	r2, [pc, #156]	@ (800687c <xTaskResumeAll+0x128>)
 80067e0:	441a      	add	r2, r3
 80067e2:	68fb      	ldr	r3, [r7, #12]
 80067e4:	3304      	adds	r3, #4
 80067e6:	4619      	mov	r1, r3
 80067e8:	4610      	mov	r0, r2
 80067ea:	f7fe ff02 	bl	80055f2 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80067ee:	68fb      	ldr	r3, [r7, #12]
 80067f0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80067f2:	4b23      	ldr	r3, [pc, #140]	@ (8006880 <xTaskResumeAll+0x12c>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80067f8:	429a      	cmp	r2, r3
 80067fa:	d302      	bcc.n	8006802 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80067fc:	4b21      	ldr	r3, [pc, #132]	@ (8006884 <xTaskResumeAll+0x130>)
 80067fe:	2201      	movs	r2, #1
 8006800:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006802:	4b1c      	ldr	r3, [pc, #112]	@ (8006874 <xTaskResumeAll+0x120>)
 8006804:	681b      	ldr	r3, [r3, #0]
 8006806:	2b00      	cmp	r3, #0
 8006808:	d1cb      	bne.n	80067a2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	2b00      	cmp	r3, #0
 800680e:	d001      	beq.n	8006814 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006810:	f000 fb66 	bl	8006ee0 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006814:	4b1c      	ldr	r3, [pc, #112]	@ (8006888 <xTaskResumeAll+0x134>)
 8006816:	681b      	ldr	r3, [r3, #0]
 8006818:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800681a:	687b      	ldr	r3, [r7, #4]
 800681c:	2b00      	cmp	r3, #0
 800681e:	d010      	beq.n	8006842 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006820:	f000 f846 	bl	80068b0 <xTaskIncrementTick>
 8006824:	4603      	mov	r3, r0
 8006826:	2b00      	cmp	r3, #0
 8006828:	d002      	beq.n	8006830 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800682a:	4b16      	ldr	r3, [pc, #88]	@ (8006884 <xTaskResumeAll+0x130>)
 800682c:	2201      	movs	r2, #1
 800682e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006830:	687b      	ldr	r3, [r7, #4]
 8006832:	3b01      	subs	r3, #1
 8006834:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006836:	687b      	ldr	r3, [r7, #4]
 8006838:	2b00      	cmp	r3, #0
 800683a:	d1f1      	bne.n	8006820 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800683c:	4b12      	ldr	r3, [pc, #72]	@ (8006888 <xTaskResumeAll+0x134>)
 800683e:	2200      	movs	r2, #0
 8006840:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006842:	4b10      	ldr	r3, [pc, #64]	@ (8006884 <xTaskResumeAll+0x130>)
 8006844:	681b      	ldr	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d009      	beq.n	800685e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800684a:	2301      	movs	r3, #1
 800684c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800684e:	4b0f      	ldr	r3, [pc, #60]	@ (800688c <xTaskResumeAll+0x138>)
 8006850:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006854:	601a      	str	r2, [r3, #0]
 8006856:	f3bf 8f4f 	dsb	sy
 800685a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800685e:	f001 f8fd 	bl	8007a5c <vPortExitCritical>

	return xAlreadyYielded;
 8006862:	68bb      	ldr	r3, [r7, #8]
}
 8006864:	4618      	mov	r0, r3
 8006866:	3710      	adds	r7, #16
 8006868:	46bd      	mov	sp, r7
 800686a:	bd80      	pop	{r7, pc}
 800686c:	20000e30 	.word	0x20000e30
 8006870:	20000e08 	.word	0x20000e08
 8006874:	20000dc8 	.word	0x20000dc8
 8006878:	20000e10 	.word	0x20000e10
 800687c:	20000938 	.word	0x20000938
 8006880:	20000934 	.word	0x20000934
 8006884:	20000e1c 	.word	0x20000e1c
 8006888:	20000e18 	.word	0x20000e18
 800688c:	e000ed04 	.word	0xe000ed04

08006890 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006890:	b480      	push	{r7}
 8006892:	b083      	sub	sp, #12
 8006894:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006896:	4b05      	ldr	r3, [pc, #20]	@ (80068ac <xTaskGetTickCount+0x1c>)
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800689c:	687b      	ldr	r3, [r7, #4]
}
 800689e:	4618      	mov	r0, r3
 80068a0:	370c      	adds	r7, #12
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
 80068aa:	bf00      	nop
 80068ac:	20000e0c 	.word	0x20000e0c

080068b0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b086      	sub	sp, #24
 80068b4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80068b6:	2300      	movs	r3, #0
 80068b8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80068ba:	4b4f      	ldr	r3, [pc, #316]	@ (80069f8 <xTaskIncrementTick+0x148>)
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	2b00      	cmp	r3, #0
 80068c0:	f040 8090 	bne.w	80069e4 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80068c4:	4b4d      	ldr	r3, [pc, #308]	@ (80069fc <xTaskIncrementTick+0x14c>)
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	3301      	adds	r3, #1
 80068ca:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80068cc:	4a4b      	ldr	r2, [pc, #300]	@ (80069fc <xTaskIncrementTick+0x14c>)
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80068d2:	693b      	ldr	r3, [r7, #16]
 80068d4:	2b00      	cmp	r3, #0
 80068d6:	d121      	bne.n	800691c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80068d8:	4b49      	ldr	r3, [pc, #292]	@ (8006a00 <xTaskIncrementTick+0x150>)
 80068da:	681b      	ldr	r3, [r3, #0]
 80068dc:	681b      	ldr	r3, [r3, #0]
 80068de:	2b00      	cmp	r3, #0
 80068e0:	d00b      	beq.n	80068fa <xTaskIncrementTick+0x4a>
	__asm volatile
 80068e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e6:	f383 8811 	msr	BASEPRI, r3
 80068ea:	f3bf 8f6f 	isb	sy
 80068ee:	f3bf 8f4f 	dsb	sy
 80068f2:	603b      	str	r3, [r7, #0]
}
 80068f4:	bf00      	nop
 80068f6:	bf00      	nop
 80068f8:	e7fd      	b.n	80068f6 <xTaskIncrementTick+0x46>
 80068fa:	4b41      	ldr	r3, [pc, #260]	@ (8006a00 <xTaskIncrementTick+0x150>)
 80068fc:	681b      	ldr	r3, [r3, #0]
 80068fe:	60fb      	str	r3, [r7, #12]
 8006900:	4b40      	ldr	r3, [pc, #256]	@ (8006a04 <xTaskIncrementTick+0x154>)
 8006902:	681b      	ldr	r3, [r3, #0]
 8006904:	4a3e      	ldr	r2, [pc, #248]	@ (8006a00 <xTaskIncrementTick+0x150>)
 8006906:	6013      	str	r3, [r2, #0]
 8006908:	4a3e      	ldr	r2, [pc, #248]	@ (8006a04 <xTaskIncrementTick+0x154>)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	6013      	str	r3, [r2, #0]
 800690e:	4b3e      	ldr	r3, [pc, #248]	@ (8006a08 <xTaskIncrementTick+0x158>)
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	3301      	adds	r3, #1
 8006914:	4a3c      	ldr	r2, [pc, #240]	@ (8006a08 <xTaskIncrementTick+0x158>)
 8006916:	6013      	str	r3, [r2, #0]
 8006918:	f000 fae2 	bl	8006ee0 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800691c:	4b3b      	ldr	r3, [pc, #236]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	693a      	ldr	r2, [r7, #16]
 8006922:	429a      	cmp	r2, r3
 8006924:	d349      	bcc.n	80069ba <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006926:	4b36      	ldr	r3, [pc, #216]	@ (8006a00 <xTaskIncrementTick+0x150>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	2b00      	cmp	r3, #0
 800692e:	d104      	bne.n	800693a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006930:	4b36      	ldr	r3, [pc, #216]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 8006932:	f04f 32ff 	mov.w	r2, #4294967295
 8006936:	601a      	str	r2, [r3, #0]
					break;
 8006938:	e03f      	b.n	80069ba <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800693a:	4b31      	ldr	r3, [pc, #196]	@ (8006a00 <xTaskIncrementTick+0x150>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	68db      	ldr	r3, [r3, #12]
 8006940:	68db      	ldr	r3, [r3, #12]
 8006942:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006944:	68bb      	ldr	r3, [r7, #8]
 8006946:	685b      	ldr	r3, [r3, #4]
 8006948:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800694a:	693a      	ldr	r2, [r7, #16]
 800694c:	687b      	ldr	r3, [r7, #4]
 800694e:	429a      	cmp	r2, r3
 8006950:	d203      	bcs.n	800695a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006952:	4a2e      	ldr	r2, [pc, #184]	@ (8006a0c <xTaskIncrementTick+0x15c>)
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006958:	e02f      	b.n	80069ba <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800695a:	68bb      	ldr	r3, [r7, #8]
 800695c:	3304      	adds	r3, #4
 800695e:	4618      	mov	r0, r3
 8006960:	f7fe fea4 	bl	80056ac <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006964:	68bb      	ldr	r3, [r7, #8]
 8006966:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006968:	2b00      	cmp	r3, #0
 800696a:	d004      	beq.n	8006976 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	3318      	adds	r3, #24
 8006970:	4618      	mov	r0, r3
 8006972:	f7fe fe9b 	bl	80056ac <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006976:	68bb      	ldr	r3, [r7, #8]
 8006978:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800697a:	4b25      	ldr	r3, [pc, #148]	@ (8006a10 <xTaskIncrementTick+0x160>)
 800697c:	681b      	ldr	r3, [r3, #0]
 800697e:	429a      	cmp	r2, r3
 8006980:	d903      	bls.n	800698a <xTaskIncrementTick+0xda>
 8006982:	68bb      	ldr	r3, [r7, #8]
 8006984:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006986:	4a22      	ldr	r2, [pc, #136]	@ (8006a10 <xTaskIncrementTick+0x160>)
 8006988:	6013      	str	r3, [r2, #0]
 800698a:	68bb      	ldr	r3, [r7, #8]
 800698c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800698e:	4613      	mov	r3, r2
 8006990:	009b      	lsls	r3, r3, #2
 8006992:	4413      	add	r3, r2
 8006994:	009b      	lsls	r3, r3, #2
 8006996:	4a1f      	ldr	r2, [pc, #124]	@ (8006a14 <xTaskIncrementTick+0x164>)
 8006998:	441a      	add	r2, r3
 800699a:	68bb      	ldr	r3, [r7, #8]
 800699c:	3304      	adds	r3, #4
 800699e:	4619      	mov	r1, r3
 80069a0:	4610      	mov	r0, r2
 80069a2:	f7fe fe26 	bl	80055f2 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80069a6:	68bb      	ldr	r3, [r7, #8]
 80069a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069aa:	4b1b      	ldr	r3, [pc, #108]	@ (8006a18 <xTaskIncrementTick+0x168>)
 80069ac:	681b      	ldr	r3, [r3, #0]
 80069ae:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80069b0:	429a      	cmp	r2, r3
 80069b2:	d3b8      	bcc.n	8006926 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80069b4:	2301      	movs	r3, #1
 80069b6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80069b8:	e7b5      	b.n	8006926 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80069ba:	4b17      	ldr	r3, [pc, #92]	@ (8006a18 <xTaskIncrementTick+0x168>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069c0:	4914      	ldr	r1, [pc, #80]	@ (8006a14 <xTaskIncrementTick+0x164>)
 80069c2:	4613      	mov	r3, r2
 80069c4:	009b      	lsls	r3, r3, #2
 80069c6:	4413      	add	r3, r2
 80069c8:	009b      	lsls	r3, r3, #2
 80069ca:	440b      	add	r3, r1
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d901      	bls.n	80069d6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80069d2:	2301      	movs	r3, #1
 80069d4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80069d6:	4b11      	ldr	r3, [pc, #68]	@ (8006a1c <xTaskIncrementTick+0x16c>)
 80069d8:	681b      	ldr	r3, [r3, #0]
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d007      	beq.n	80069ee <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80069de:	2301      	movs	r3, #1
 80069e0:	617b      	str	r3, [r7, #20]
 80069e2:	e004      	b.n	80069ee <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80069e4:	4b0e      	ldr	r3, [pc, #56]	@ (8006a20 <xTaskIncrementTick+0x170>)
 80069e6:	681b      	ldr	r3, [r3, #0]
 80069e8:	3301      	adds	r3, #1
 80069ea:	4a0d      	ldr	r2, [pc, #52]	@ (8006a20 <xTaskIncrementTick+0x170>)
 80069ec:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80069ee:	697b      	ldr	r3, [r7, #20]
}
 80069f0:	4618      	mov	r0, r3
 80069f2:	3718      	adds	r7, #24
 80069f4:	46bd      	mov	sp, r7
 80069f6:	bd80      	pop	{r7, pc}
 80069f8:	20000e30 	.word	0x20000e30
 80069fc:	20000e0c 	.word	0x20000e0c
 8006a00:	20000dc0 	.word	0x20000dc0
 8006a04:	20000dc4 	.word	0x20000dc4
 8006a08:	20000e20 	.word	0x20000e20
 8006a0c:	20000e28 	.word	0x20000e28
 8006a10:	20000e10 	.word	0x20000e10
 8006a14:	20000938 	.word	0x20000938
 8006a18:	20000934 	.word	0x20000934
 8006a1c:	20000e1c 	.word	0x20000e1c
 8006a20:	20000e18 	.word	0x20000e18

08006a24 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006a24:	b480      	push	{r7}
 8006a26:	b085      	sub	sp, #20
 8006a28:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006a2a:	4b2b      	ldr	r3, [pc, #172]	@ (8006ad8 <vTaskSwitchContext+0xb4>)
 8006a2c:	681b      	ldr	r3, [r3, #0]
 8006a2e:	2b00      	cmp	r3, #0
 8006a30:	d003      	beq.n	8006a3a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006a32:	4b2a      	ldr	r3, [pc, #168]	@ (8006adc <vTaskSwitchContext+0xb8>)
 8006a34:	2201      	movs	r2, #1
 8006a36:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006a38:	e047      	b.n	8006aca <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006a3a:	4b28      	ldr	r3, [pc, #160]	@ (8006adc <vTaskSwitchContext+0xb8>)
 8006a3c:	2200      	movs	r2, #0
 8006a3e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006a40:	4b27      	ldr	r3, [pc, #156]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006a42:	681b      	ldr	r3, [r3, #0]
 8006a44:	60fb      	str	r3, [r7, #12]
 8006a46:	e011      	b.n	8006a6c <vTaskSwitchContext+0x48>
 8006a48:	68fb      	ldr	r3, [r7, #12]
 8006a4a:	2b00      	cmp	r3, #0
 8006a4c:	d10b      	bne.n	8006a66 <vTaskSwitchContext+0x42>
	__asm volatile
 8006a4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a52:	f383 8811 	msr	BASEPRI, r3
 8006a56:	f3bf 8f6f 	isb	sy
 8006a5a:	f3bf 8f4f 	dsb	sy
 8006a5e:	607b      	str	r3, [r7, #4]
}
 8006a60:	bf00      	nop
 8006a62:	bf00      	nop
 8006a64:	e7fd      	b.n	8006a62 <vTaskSwitchContext+0x3e>
 8006a66:	68fb      	ldr	r3, [r7, #12]
 8006a68:	3b01      	subs	r3, #1
 8006a6a:	60fb      	str	r3, [r7, #12]
 8006a6c:	491d      	ldr	r1, [pc, #116]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006a6e:	68fa      	ldr	r2, [r7, #12]
 8006a70:	4613      	mov	r3, r2
 8006a72:	009b      	lsls	r3, r3, #2
 8006a74:	4413      	add	r3, r2
 8006a76:	009b      	lsls	r3, r3, #2
 8006a78:	440b      	add	r3, r1
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d0e3      	beq.n	8006a48 <vTaskSwitchContext+0x24>
 8006a80:	68fa      	ldr	r2, [r7, #12]
 8006a82:	4613      	mov	r3, r2
 8006a84:	009b      	lsls	r3, r3, #2
 8006a86:	4413      	add	r3, r2
 8006a88:	009b      	lsls	r3, r3, #2
 8006a8a:	4a16      	ldr	r2, [pc, #88]	@ (8006ae4 <vTaskSwitchContext+0xc0>)
 8006a8c:	4413      	add	r3, r2
 8006a8e:	60bb      	str	r3, [r7, #8]
 8006a90:	68bb      	ldr	r3, [r7, #8]
 8006a92:	685b      	ldr	r3, [r3, #4]
 8006a94:	685a      	ldr	r2, [r3, #4]
 8006a96:	68bb      	ldr	r3, [r7, #8]
 8006a98:	605a      	str	r2, [r3, #4]
 8006a9a:	68bb      	ldr	r3, [r7, #8]
 8006a9c:	685a      	ldr	r2, [r3, #4]
 8006a9e:	68bb      	ldr	r3, [r7, #8]
 8006aa0:	3308      	adds	r3, #8
 8006aa2:	429a      	cmp	r2, r3
 8006aa4:	d104      	bne.n	8006ab0 <vTaskSwitchContext+0x8c>
 8006aa6:	68bb      	ldr	r3, [r7, #8]
 8006aa8:	685b      	ldr	r3, [r3, #4]
 8006aaa:	685a      	ldr	r2, [r3, #4]
 8006aac:	68bb      	ldr	r3, [r7, #8]
 8006aae:	605a      	str	r2, [r3, #4]
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	685b      	ldr	r3, [r3, #4]
 8006ab4:	68db      	ldr	r3, [r3, #12]
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006ab8:	6013      	str	r3, [r2, #0]
 8006aba:	4a09      	ldr	r2, [pc, #36]	@ (8006ae0 <vTaskSwitchContext+0xbc>)
 8006abc:	68fb      	ldr	r3, [r7, #12]
 8006abe:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006ac0:	4b09      	ldr	r3, [pc, #36]	@ (8006ae8 <vTaskSwitchContext+0xc4>)
 8006ac2:	681b      	ldr	r3, [r3, #0]
 8006ac4:	3354      	adds	r3, #84	@ 0x54
 8006ac6:	4a09      	ldr	r2, [pc, #36]	@ (8006aec <vTaskSwitchContext+0xc8>)
 8006ac8:	6013      	str	r3, [r2, #0]
}
 8006aca:	bf00      	nop
 8006acc:	3714      	adds	r7, #20
 8006ace:	46bd      	mov	sp, r7
 8006ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ad4:	4770      	bx	lr
 8006ad6:	bf00      	nop
 8006ad8:	20000e30 	.word	0x20000e30
 8006adc:	20000e1c 	.word	0x20000e1c
 8006ae0:	20000e10 	.word	0x20000e10
 8006ae4:	20000938 	.word	0x20000938
 8006ae8:	20000934 	.word	0x20000934
 8006aec:	2000001c 	.word	0x2000001c

08006af0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006af0:	b580      	push	{r7, lr}
 8006af2:	b084      	sub	sp, #16
 8006af4:	af00      	add	r7, sp, #0
 8006af6:	6078      	str	r0, [r7, #4]
 8006af8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	2b00      	cmp	r3, #0
 8006afe:	d10b      	bne.n	8006b18 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006b00:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b04:	f383 8811 	msr	BASEPRI, r3
 8006b08:	f3bf 8f6f 	isb	sy
 8006b0c:	f3bf 8f4f 	dsb	sy
 8006b10:	60fb      	str	r3, [r7, #12]
}
 8006b12:	bf00      	nop
 8006b14:	bf00      	nop
 8006b16:	e7fd      	b.n	8006b14 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b18:	4b07      	ldr	r3, [pc, #28]	@ (8006b38 <vTaskPlaceOnEventList+0x48>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	3318      	adds	r3, #24
 8006b1e:	4619      	mov	r1, r3
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f7fe fd8a 	bl	800563a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006b26:	2101      	movs	r1, #1
 8006b28:	6838      	ldr	r0, [r7, #0]
 8006b2a:	f000 fa87 	bl	800703c <prvAddCurrentTaskToDelayedList>
}
 8006b2e:	bf00      	nop
 8006b30:	3710      	adds	r7, #16
 8006b32:	46bd      	mov	sp, r7
 8006b34:	bd80      	pop	{r7, pc}
 8006b36:	bf00      	nop
 8006b38:	20000934 	.word	0x20000934

08006b3c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006b3c:	b580      	push	{r7, lr}
 8006b3e:	b086      	sub	sp, #24
 8006b40:	af00      	add	r7, sp, #0
 8006b42:	60f8      	str	r0, [r7, #12]
 8006b44:	60b9      	str	r1, [r7, #8]
 8006b46:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006b48:	68fb      	ldr	r3, [r7, #12]
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d10b      	bne.n	8006b66 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006b4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b52:	f383 8811 	msr	BASEPRI, r3
 8006b56:	f3bf 8f6f 	isb	sy
 8006b5a:	f3bf 8f4f 	dsb	sy
 8006b5e:	617b      	str	r3, [r7, #20]
}
 8006b60:	bf00      	nop
 8006b62:	bf00      	nop
 8006b64:	e7fd      	b.n	8006b62 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006b66:	4b0a      	ldr	r3, [pc, #40]	@ (8006b90 <vTaskPlaceOnEventListRestricted+0x54>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	3318      	adds	r3, #24
 8006b6c:	4619      	mov	r1, r3
 8006b6e:	68f8      	ldr	r0, [r7, #12]
 8006b70:	f7fe fd3f 	bl	80055f2 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	2b00      	cmp	r3, #0
 8006b78:	d002      	beq.n	8006b80 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006b7a:	f04f 33ff 	mov.w	r3, #4294967295
 8006b7e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006b80:	6879      	ldr	r1, [r7, #4]
 8006b82:	68b8      	ldr	r0, [r7, #8]
 8006b84:	f000 fa5a 	bl	800703c <prvAddCurrentTaskToDelayedList>
	}
 8006b88:	bf00      	nop
 8006b8a:	3718      	adds	r7, #24
 8006b8c:	46bd      	mov	sp, r7
 8006b8e:	bd80      	pop	{r7, pc}
 8006b90:	20000934 	.word	0x20000934

08006b94 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006b94:	b580      	push	{r7, lr}
 8006b96:	b086      	sub	sp, #24
 8006b98:	af00      	add	r7, sp, #0
 8006b9a:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	68db      	ldr	r3, [r3, #12]
 8006ba0:	68db      	ldr	r3, [r3, #12]
 8006ba2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	2b00      	cmp	r3, #0
 8006ba8:	d10b      	bne.n	8006bc2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006baa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bae:	f383 8811 	msr	BASEPRI, r3
 8006bb2:	f3bf 8f6f 	isb	sy
 8006bb6:	f3bf 8f4f 	dsb	sy
 8006bba:	60fb      	str	r3, [r7, #12]
}
 8006bbc:	bf00      	nop
 8006bbe:	bf00      	nop
 8006bc0:	e7fd      	b.n	8006bbe <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006bc2:	693b      	ldr	r3, [r7, #16]
 8006bc4:	3318      	adds	r3, #24
 8006bc6:	4618      	mov	r0, r3
 8006bc8:	f7fe fd70 	bl	80056ac <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006bcc:	4b1d      	ldr	r3, [pc, #116]	@ (8006c44 <xTaskRemoveFromEventList+0xb0>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d11d      	bne.n	8006c10 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006bd4:	693b      	ldr	r3, [r7, #16]
 8006bd6:	3304      	adds	r3, #4
 8006bd8:	4618      	mov	r0, r3
 8006bda:	f7fe fd67 	bl	80056ac <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006be2:	4b19      	ldr	r3, [pc, #100]	@ (8006c48 <xTaskRemoveFromEventList+0xb4>)
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	429a      	cmp	r2, r3
 8006be8:	d903      	bls.n	8006bf2 <xTaskRemoveFromEventList+0x5e>
 8006bea:	693b      	ldr	r3, [r7, #16]
 8006bec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006bee:	4a16      	ldr	r2, [pc, #88]	@ (8006c48 <xTaskRemoveFromEventList+0xb4>)
 8006bf0:	6013      	str	r3, [r2, #0]
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006bf6:	4613      	mov	r3, r2
 8006bf8:	009b      	lsls	r3, r3, #2
 8006bfa:	4413      	add	r3, r2
 8006bfc:	009b      	lsls	r3, r3, #2
 8006bfe:	4a13      	ldr	r2, [pc, #76]	@ (8006c4c <xTaskRemoveFromEventList+0xb8>)
 8006c00:	441a      	add	r2, r3
 8006c02:	693b      	ldr	r3, [r7, #16]
 8006c04:	3304      	adds	r3, #4
 8006c06:	4619      	mov	r1, r3
 8006c08:	4610      	mov	r0, r2
 8006c0a:	f7fe fcf2 	bl	80055f2 <vListInsertEnd>
 8006c0e:	e005      	b.n	8006c1c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006c10:	693b      	ldr	r3, [r7, #16]
 8006c12:	3318      	adds	r3, #24
 8006c14:	4619      	mov	r1, r3
 8006c16:	480e      	ldr	r0, [pc, #56]	@ (8006c50 <xTaskRemoveFromEventList+0xbc>)
 8006c18:	f7fe fceb 	bl	80055f2 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006c1c:	693b      	ldr	r3, [r7, #16]
 8006c1e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006c20:	4b0c      	ldr	r3, [pc, #48]	@ (8006c54 <xTaskRemoveFromEventList+0xc0>)
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006c26:	429a      	cmp	r2, r3
 8006c28:	d905      	bls.n	8006c36 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006c2e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c58 <xTaskRemoveFromEventList+0xc4>)
 8006c30:	2201      	movs	r2, #1
 8006c32:	601a      	str	r2, [r3, #0]
 8006c34:	e001      	b.n	8006c3a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006c36:	2300      	movs	r3, #0
 8006c38:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006c3a:	697b      	ldr	r3, [r7, #20]
}
 8006c3c:	4618      	mov	r0, r3
 8006c3e:	3718      	adds	r7, #24
 8006c40:	46bd      	mov	sp, r7
 8006c42:	bd80      	pop	{r7, pc}
 8006c44:	20000e30 	.word	0x20000e30
 8006c48:	20000e10 	.word	0x20000e10
 8006c4c:	20000938 	.word	0x20000938
 8006c50:	20000dc8 	.word	0x20000dc8
 8006c54:	20000934 	.word	0x20000934
 8006c58:	20000e1c 	.word	0x20000e1c

08006c5c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006c64:	4b06      	ldr	r3, [pc, #24]	@ (8006c80 <vTaskInternalSetTimeOutState+0x24>)
 8006c66:	681a      	ldr	r2, [r3, #0]
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006c6c:	4b05      	ldr	r3, [pc, #20]	@ (8006c84 <vTaskInternalSetTimeOutState+0x28>)
 8006c6e:	681a      	ldr	r2, [r3, #0]
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	605a      	str	r2, [r3, #4]
}
 8006c74:	bf00      	nop
 8006c76:	370c      	adds	r7, #12
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7e:	4770      	bx	lr
 8006c80:	20000e20 	.word	0x20000e20
 8006c84:	20000e0c 	.word	0x20000e0c

08006c88 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b088      	sub	sp, #32
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
 8006c90:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d10b      	bne.n	8006cb0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006c98:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c9c:	f383 8811 	msr	BASEPRI, r3
 8006ca0:	f3bf 8f6f 	isb	sy
 8006ca4:	f3bf 8f4f 	dsb	sy
 8006ca8:	613b      	str	r3, [r7, #16]
}
 8006caa:	bf00      	nop
 8006cac:	bf00      	nop
 8006cae:	e7fd      	b.n	8006cac <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	2b00      	cmp	r3, #0
 8006cb4:	d10b      	bne.n	8006cce <xTaskCheckForTimeOut+0x46>
	__asm volatile
 8006cb6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cba:	f383 8811 	msr	BASEPRI, r3
 8006cbe:	f3bf 8f6f 	isb	sy
 8006cc2:	f3bf 8f4f 	dsb	sy
 8006cc6:	60fb      	str	r3, [r7, #12]
}
 8006cc8:	bf00      	nop
 8006cca:	bf00      	nop
 8006ccc:	e7fd      	b.n	8006cca <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8006cce:	f000 fe93 	bl	80079f8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8006cd2:	4b1d      	ldr	r3, [pc, #116]	@ (8006d48 <xTaskCheckForTimeOut+0xc0>)
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	685b      	ldr	r3, [r3, #4]
 8006cdc:	69ba      	ldr	r2, [r7, #24]
 8006cde:	1ad3      	subs	r3, r2, r3
 8006ce0:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006ce2:	683b      	ldr	r3, [r7, #0]
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cea:	d102      	bne.n	8006cf2 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61fb      	str	r3, [r7, #28]
 8006cf0:	e023      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681a      	ldr	r2, [r3, #0]
 8006cf6:	4b15      	ldr	r3, [pc, #84]	@ (8006d4c <xTaskCheckForTimeOut+0xc4>)
 8006cf8:	681b      	ldr	r3, [r3, #0]
 8006cfa:	429a      	cmp	r2, r3
 8006cfc:	d007      	beq.n	8006d0e <xTaskCheckForTimeOut+0x86>
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	685b      	ldr	r3, [r3, #4]
 8006d02:	69ba      	ldr	r2, [r7, #24]
 8006d04:	429a      	cmp	r2, r3
 8006d06:	d302      	bcc.n	8006d0e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006d08:	2301      	movs	r3, #1
 8006d0a:	61fb      	str	r3, [r7, #28]
 8006d0c:	e015      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8006d0e:	683b      	ldr	r3, [r7, #0]
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	697a      	ldr	r2, [r7, #20]
 8006d14:	429a      	cmp	r2, r3
 8006d16:	d20b      	bcs.n	8006d30 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	681a      	ldr	r2, [r3, #0]
 8006d1c:	697b      	ldr	r3, [r7, #20]
 8006d1e:	1ad2      	subs	r2, r2, r3
 8006d20:	683b      	ldr	r3, [r7, #0]
 8006d22:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f7ff ff99 	bl	8006c5c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006d2a:	2300      	movs	r3, #0
 8006d2c:	61fb      	str	r3, [r7, #28]
 8006d2e:	e004      	b.n	8006d3a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006d30:	683b      	ldr	r3, [r7, #0]
 8006d32:	2200      	movs	r2, #0
 8006d34:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006d36:	2301      	movs	r3, #1
 8006d38:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006d3a:	f000 fe8f 	bl	8007a5c <vPortExitCritical>

	return xReturn;
 8006d3e:	69fb      	ldr	r3, [r7, #28]
}
 8006d40:	4618      	mov	r0, r3
 8006d42:	3720      	adds	r7, #32
 8006d44:	46bd      	mov	sp, r7
 8006d46:	bd80      	pop	{r7, pc}
 8006d48:	20000e0c 	.word	0x20000e0c
 8006d4c:	20000e20 	.word	0x20000e20

08006d50 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006d50:	b480      	push	{r7}
 8006d52:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006d54:	4b03      	ldr	r3, [pc, #12]	@ (8006d64 <vTaskMissedYield+0x14>)
 8006d56:	2201      	movs	r2, #1
 8006d58:	601a      	str	r2, [r3, #0]
}
 8006d5a:	bf00      	nop
 8006d5c:	46bd      	mov	sp, r7
 8006d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d62:	4770      	bx	lr
 8006d64:	20000e1c 	.word	0x20000e1c

08006d68 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006d68:	b580      	push	{r7, lr}
 8006d6a:	b082      	sub	sp, #8
 8006d6c:	af00      	add	r7, sp, #0
 8006d6e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006d70:	f000 f852 	bl	8006e18 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006d74:	4b06      	ldr	r3, [pc, #24]	@ (8006d90 <prvIdleTask+0x28>)
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	2b01      	cmp	r3, #1
 8006d7a:	d9f9      	bls.n	8006d70 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006d7c:	4b05      	ldr	r3, [pc, #20]	@ (8006d94 <prvIdleTask+0x2c>)
 8006d7e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d82:	601a      	str	r2, [r3, #0]
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006d8c:	e7f0      	b.n	8006d70 <prvIdleTask+0x8>
 8006d8e:	bf00      	nop
 8006d90:	20000938 	.word	0x20000938
 8006d94:	e000ed04 	.word	0xe000ed04

08006d98 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006d98:	b580      	push	{r7, lr}
 8006d9a:	b082      	sub	sp, #8
 8006d9c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006d9e:	2300      	movs	r3, #0
 8006da0:	607b      	str	r3, [r7, #4]
 8006da2:	e00c      	b.n	8006dbe <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8006da4:	687a      	ldr	r2, [r7, #4]
 8006da6:	4613      	mov	r3, r2
 8006da8:	009b      	lsls	r3, r3, #2
 8006daa:	4413      	add	r3, r2
 8006dac:	009b      	lsls	r3, r3, #2
 8006dae:	4a12      	ldr	r2, [pc, #72]	@ (8006df8 <prvInitialiseTaskLists+0x60>)
 8006db0:	4413      	add	r3, r2
 8006db2:	4618      	mov	r0, r3
 8006db4:	f7fe fbf0 	bl	8005598 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006db8:	687b      	ldr	r3, [r7, #4]
 8006dba:	3301      	adds	r3, #1
 8006dbc:	607b      	str	r3, [r7, #4]
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	2b37      	cmp	r3, #55	@ 0x37
 8006dc2:	d9ef      	bls.n	8006da4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8006dc4:	480d      	ldr	r0, [pc, #52]	@ (8006dfc <prvInitialiseTaskLists+0x64>)
 8006dc6:	f7fe fbe7 	bl	8005598 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8006dca:	480d      	ldr	r0, [pc, #52]	@ (8006e00 <prvInitialiseTaskLists+0x68>)
 8006dcc:	f7fe fbe4 	bl	8005598 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8006dd0:	480c      	ldr	r0, [pc, #48]	@ (8006e04 <prvInitialiseTaskLists+0x6c>)
 8006dd2:	f7fe fbe1 	bl	8005598 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8006dd6:	480c      	ldr	r0, [pc, #48]	@ (8006e08 <prvInitialiseTaskLists+0x70>)
 8006dd8:	f7fe fbde 	bl	8005598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8006ddc:	480b      	ldr	r0, [pc, #44]	@ (8006e0c <prvInitialiseTaskLists+0x74>)
 8006dde:	f7fe fbdb 	bl	8005598 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006de2:	4b0b      	ldr	r3, [pc, #44]	@ (8006e10 <prvInitialiseTaskLists+0x78>)
 8006de4:	4a05      	ldr	r2, [pc, #20]	@ (8006dfc <prvInitialiseTaskLists+0x64>)
 8006de6:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006de8:	4b0a      	ldr	r3, [pc, #40]	@ (8006e14 <prvInitialiseTaskLists+0x7c>)
 8006dea:	4a05      	ldr	r2, [pc, #20]	@ (8006e00 <prvInitialiseTaskLists+0x68>)
 8006dec:	601a      	str	r2, [r3, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3708      	adds	r7, #8
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000938 	.word	0x20000938
 8006dfc:	20000d98 	.word	0x20000d98
 8006e00:	20000dac 	.word	0x20000dac
 8006e04:	20000dc8 	.word	0x20000dc8
 8006e08:	20000ddc 	.word	0x20000ddc
 8006e0c:	20000df4 	.word	0x20000df4
 8006e10:	20000dc0 	.word	0x20000dc0
 8006e14:	20000dc4 	.word	0x20000dc4

08006e18 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	b082      	sub	sp, #8
 8006e1c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e1e:	e019      	b.n	8006e54 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006e20:	f000 fdea 	bl	80079f8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006e24:	4b10      	ldr	r3, [pc, #64]	@ (8006e68 <prvCheckTasksWaitingTermination+0x50>)
 8006e26:	68db      	ldr	r3, [r3, #12]
 8006e28:	68db      	ldr	r3, [r3, #12]
 8006e2a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006e2c:	687b      	ldr	r3, [r7, #4]
 8006e2e:	3304      	adds	r3, #4
 8006e30:	4618      	mov	r0, r3
 8006e32:	f7fe fc3b 	bl	80056ac <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006e36:	4b0d      	ldr	r3, [pc, #52]	@ (8006e6c <prvCheckTasksWaitingTermination+0x54>)
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	3b01      	subs	r3, #1
 8006e3c:	4a0b      	ldr	r2, [pc, #44]	@ (8006e6c <prvCheckTasksWaitingTermination+0x54>)
 8006e3e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006e40:	4b0b      	ldr	r3, [pc, #44]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	3b01      	subs	r3, #1
 8006e46:	4a0a      	ldr	r2, [pc, #40]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e48:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006e4a:	f000 fe07 	bl	8007a5c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006e4e:	6878      	ldr	r0, [r7, #4]
 8006e50:	f000 f810 	bl	8006e74 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006e54:	4b06      	ldr	r3, [pc, #24]	@ (8006e70 <prvCheckTasksWaitingTermination+0x58>)
 8006e56:	681b      	ldr	r3, [r3, #0]
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	d1e1      	bne.n	8006e20 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006e5c:	bf00      	nop
 8006e5e:	bf00      	nop
 8006e60:	3708      	adds	r7, #8
 8006e62:	46bd      	mov	sp, r7
 8006e64:	bd80      	pop	{r7, pc}
 8006e66:	bf00      	nop
 8006e68:	20000ddc 	.word	0x20000ddc
 8006e6c:	20000e08 	.word	0x20000e08
 8006e70:	20000df0 	.word	0x20000df0

08006e74 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006e74:	b580      	push	{r7, lr}
 8006e76:	b084      	sub	sp, #16
 8006e78:	af00      	add	r7, sp, #0
 8006e7a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006e7c:	687b      	ldr	r3, [r7, #4]
 8006e7e:	3354      	adds	r3, #84	@ 0x54
 8006e80:	4618      	mov	r0, r3
 8006e82:	f001 fafb 	bl	800847c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8006e86:	687b      	ldr	r3, [r7, #4]
 8006e88:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d108      	bne.n	8006ea2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8006e94:	4618      	mov	r0, r3
 8006e96:	f000 ff9f 	bl	8007dd8 <vPortFree>
				vPortFree( pxTCB );
 8006e9a:	6878      	ldr	r0, [r7, #4]
 8006e9c:	f000 ff9c 	bl	8007dd8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006ea0:	e019      	b.n	8006ed6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8006ea2:	687b      	ldr	r3, [r7, #4]
 8006ea4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006ea8:	2b01      	cmp	r3, #1
 8006eaa:	d103      	bne.n	8006eb4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006eac:	6878      	ldr	r0, [r7, #4]
 8006eae:	f000 ff93 	bl	8007dd8 <vPortFree>
	}
 8006eb2:	e010      	b.n	8006ed6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8006eb4:	687b      	ldr	r3, [r7, #4]
 8006eb6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006eba:	2b02      	cmp	r3, #2
 8006ebc:	d00b      	beq.n	8006ed6 <prvDeleteTCB+0x62>
	__asm volatile
 8006ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ec2:	f383 8811 	msr	BASEPRI, r3
 8006ec6:	f3bf 8f6f 	isb	sy
 8006eca:	f3bf 8f4f 	dsb	sy
 8006ece:	60fb      	str	r3, [r7, #12]
}
 8006ed0:	bf00      	nop
 8006ed2:	bf00      	nop
 8006ed4:	e7fd      	b.n	8006ed2 <prvDeleteTCB+0x5e>
	}
 8006ed6:	bf00      	nop
 8006ed8:	3710      	adds	r7, #16
 8006eda:	46bd      	mov	sp, r7
 8006edc:	bd80      	pop	{r7, pc}
	...

08006ee0 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006ee6:	4b0c      	ldr	r3, [pc, #48]	@ (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	d104      	bne.n	8006efa <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006ef0:	4b0a      	ldr	r3, [pc, #40]	@ (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006ef2:	f04f 32ff 	mov.w	r2, #4294967295
 8006ef6:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006ef8:	e008      	b.n	8006f0c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006efa:	4b07      	ldr	r3, [pc, #28]	@ (8006f18 <prvResetNextTaskUnblockTime+0x38>)
 8006efc:	681b      	ldr	r3, [r3, #0]
 8006efe:	68db      	ldr	r3, [r3, #12]
 8006f00:	68db      	ldr	r3, [r3, #12]
 8006f02:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	685b      	ldr	r3, [r3, #4]
 8006f08:	4a04      	ldr	r2, [pc, #16]	@ (8006f1c <prvResetNextTaskUnblockTime+0x3c>)
 8006f0a:	6013      	str	r3, [r2, #0]
}
 8006f0c:	bf00      	nop
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	20000dc0 	.word	0x20000dc0
 8006f1c:	20000e28 	.word	0x20000e28

08006f20 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006f20:	b480      	push	{r7}
 8006f22:	b083      	sub	sp, #12
 8006f24:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006f26:	4b0b      	ldr	r3, [pc, #44]	@ (8006f54 <xTaskGetSchedulerState+0x34>)
 8006f28:	681b      	ldr	r3, [r3, #0]
 8006f2a:	2b00      	cmp	r3, #0
 8006f2c:	d102      	bne.n	8006f34 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006f2e:	2301      	movs	r3, #1
 8006f30:	607b      	str	r3, [r7, #4]
 8006f32:	e008      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f34:	4b08      	ldr	r3, [pc, #32]	@ (8006f58 <xTaskGetSchedulerState+0x38>)
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	2b00      	cmp	r3, #0
 8006f3a:	d102      	bne.n	8006f42 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006f3c:	2302      	movs	r3, #2
 8006f3e:	607b      	str	r3, [r7, #4]
 8006f40:	e001      	b.n	8006f46 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006f42:	2300      	movs	r3, #0
 8006f44:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006f46:	687b      	ldr	r3, [r7, #4]
	}
 8006f48:	4618      	mov	r0, r3
 8006f4a:	370c      	adds	r7, #12
 8006f4c:	46bd      	mov	sp, r7
 8006f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f52:	4770      	bx	lr
 8006f54:	20000e14 	.word	0x20000e14
 8006f58:	20000e30 	.word	0x20000e30

08006f5c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b086      	sub	sp, #24
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006f64:	687b      	ldr	r3, [r7, #4]
 8006f66:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006f68:	2300      	movs	r3, #0
 8006f6a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006f6c:	687b      	ldr	r3, [r7, #4]
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d058      	beq.n	8007024 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006f72:	4b2f      	ldr	r3, [pc, #188]	@ (8007030 <xTaskPriorityDisinherit+0xd4>)
 8006f74:	681b      	ldr	r3, [r3, #0]
 8006f76:	693a      	ldr	r2, [r7, #16]
 8006f78:	429a      	cmp	r2, r3
 8006f7a:	d00b      	beq.n	8006f94 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006f7c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f80:	f383 8811 	msr	BASEPRI, r3
 8006f84:	f3bf 8f6f 	isb	sy
 8006f88:	f3bf 8f4f 	dsb	sy
 8006f8c:	60fb      	str	r3, [r7, #12]
}
 8006f8e:	bf00      	nop
 8006f90:	bf00      	nop
 8006f92:	e7fd      	b.n	8006f90 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8006f94:	693b      	ldr	r3, [r7, #16]
 8006f96:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006f98:	2b00      	cmp	r3, #0
 8006f9a:	d10b      	bne.n	8006fb4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006f9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa0:	f383 8811 	msr	BASEPRI, r3
 8006fa4:	f3bf 8f6f 	isb	sy
 8006fa8:	f3bf 8f4f 	dsb	sy
 8006fac:	60bb      	str	r3, [r7, #8]
}
 8006fae:	bf00      	nop
 8006fb0:	bf00      	nop
 8006fb2:	e7fd      	b.n	8006fb0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fb8:	1e5a      	subs	r2, r3, #1
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8006fbe:	693b      	ldr	r3, [r7, #16]
 8006fc0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc2:	693b      	ldr	r3, [r7, #16]
 8006fc4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8006fc6:	429a      	cmp	r2, r3
 8006fc8:	d02c      	beq.n	8007024 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8006fca:	693b      	ldr	r3, [r7, #16]
 8006fcc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d128      	bne.n	8007024 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006fd2:	693b      	ldr	r3, [r7, #16]
 8006fd4:	3304      	adds	r3, #4
 8006fd6:	4618      	mov	r0, r3
 8006fd8:	f7fe fb68 	bl	80056ac <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8006fdc:	693b      	ldr	r3, [r7, #16]
 8006fde:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006fe0:	693b      	ldr	r3, [r7, #16]
 8006fe2:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006fe4:	693b      	ldr	r3, [r7, #16]
 8006fe6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fe8:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006fec:	693b      	ldr	r3, [r7, #16]
 8006fee:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006ff0:	693b      	ldr	r3, [r7, #16]
 8006ff2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006ff4:	4b0f      	ldr	r3, [pc, #60]	@ (8007034 <xTaskPriorityDisinherit+0xd8>)
 8006ff6:	681b      	ldr	r3, [r3, #0]
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d903      	bls.n	8007004 <xTaskPriorityDisinherit+0xa8>
 8006ffc:	693b      	ldr	r3, [r7, #16]
 8006ffe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8007000:	4a0c      	ldr	r2, [pc, #48]	@ (8007034 <xTaskPriorityDisinherit+0xd8>)
 8007002:	6013      	str	r3, [r2, #0]
 8007004:	693b      	ldr	r3, [r7, #16]
 8007006:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007008:	4613      	mov	r3, r2
 800700a:	009b      	lsls	r3, r3, #2
 800700c:	4413      	add	r3, r2
 800700e:	009b      	lsls	r3, r3, #2
 8007010:	4a09      	ldr	r2, [pc, #36]	@ (8007038 <xTaskPriorityDisinherit+0xdc>)
 8007012:	441a      	add	r2, r3
 8007014:	693b      	ldr	r3, [r7, #16]
 8007016:	3304      	adds	r3, #4
 8007018:	4619      	mov	r1, r3
 800701a:	4610      	mov	r0, r2
 800701c:	f7fe fae9 	bl	80055f2 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8007020:	2301      	movs	r3, #1
 8007022:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8007024:	697b      	ldr	r3, [r7, #20]
	}
 8007026:	4618      	mov	r0, r3
 8007028:	3718      	adds	r7, #24
 800702a:	46bd      	mov	sp, r7
 800702c:	bd80      	pop	{r7, pc}
 800702e:	bf00      	nop
 8007030:	20000934 	.word	0x20000934
 8007034:	20000e10 	.word	0x20000e10
 8007038:	20000938 	.word	0x20000938

0800703c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800703c:	b580      	push	{r7, lr}
 800703e:	b084      	sub	sp, #16
 8007040:	af00      	add	r7, sp, #0
 8007042:	6078      	str	r0, [r7, #4]
 8007044:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8007046:	4b21      	ldr	r3, [pc, #132]	@ (80070cc <prvAddCurrentTaskToDelayedList+0x90>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800704c:	4b20      	ldr	r3, [pc, #128]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	3304      	adds	r3, #4
 8007052:	4618      	mov	r0, r3
 8007054:	f7fe fb2a 	bl	80056ac <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800705e:	d10a      	bne.n	8007076 <prvAddCurrentTaskToDelayedList+0x3a>
 8007060:	683b      	ldr	r3, [r7, #0]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d007      	beq.n	8007076 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007066:	4b1a      	ldr	r3, [pc, #104]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	3304      	adds	r3, #4
 800706c:	4619      	mov	r1, r3
 800706e:	4819      	ldr	r0, [pc, #100]	@ (80070d4 <prvAddCurrentTaskToDelayedList+0x98>)
 8007070:	f7fe fabf 	bl	80055f2 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007074:	e026      	b.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8007076:	68fa      	ldr	r2, [r7, #12]
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	4413      	add	r3, r2
 800707c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800707e:	4b14      	ldr	r3, [pc, #80]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68ba      	ldr	r2, [r7, #8]
 8007084:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8007086:	68ba      	ldr	r2, [r7, #8]
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	429a      	cmp	r2, r3
 800708c:	d209      	bcs.n	80070a2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800708e:	4b12      	ldr	r3, [pc, #72]	@ (80070d8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8007090:	681a      	ldr	r2, [r3, #0]
 8007092:	4b0f      	ldr	r3, [pc, #60]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 8007094:	681b      	ldr	r3, [r3, #0]
 8007096:	3304      	adds	r3, #4
 8007098:	4619      	mov	r1, r3
 800709a:	4610      	mov	r0, r2
 800709c:	f7fe facd 	bl	800563a <vListInsert>
}
 80070a0:	e010      	b.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80070a2:	4b0e      	ldr	r3, [pc, #56]	@ (80070dc <prvAddCurrentTaskToDelayedList+0xa0>)
 80070a4:	681a      	ldr	r2, [r3, #0]
 80070a6:	4b0a      	ldr	r3, [pc, #40]	@ (80070d0 <prvAddCurrentTaskToDelayedList+0x94>)
 80070a8:	681b      	ldr	r3, [r3, #0]
 80070aa:	3304      	adds	r3, #4
 80070ac:	4619      	mov	r1, r3
 80070ae:	4610      	mov	r0, r2
 80070b0:	f7fe fac3 	bl	800563a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80070b4:	4b0a      	ldr	r3, [pc, #40]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070b6:	681b      	ldr	r3, [r3, #0]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	429a      	cmp	r2, r3
 80070bc:	d202      	bcs.n	80070c4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80070be:	4a08      	ldr	r2, [pc, #32]	@ (80070e0 <prvAddCurrentTaskToDelayedList+0xa4>)
 80070c0:	68bb      	ldr	r3, [r7, #8]
 80070c2:	6013      	str	r3, [r2, #0]
}
 80070c4:	bf00      	nop
 80070c6:	3710      	adds	r7, #16
 80070c8:	46bd      	mov	sp, r7
 80070ca:	bd80      	pop	{r7, pc}
 80070cc:	20000e0c 	.word	0x20000e0c
 80070d0:	20000934 	.word	0x20000934
 80070d4:	20000df4 	.word	0x20000df4
 80070d8:	20000dc4 	.word	0x20000dc4
 80070dc:	20000dc0 	.word	0x20000dc0
 80070e0:	20000e28 	.word	0x20000e28

080070e4 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80070e4:	b580      	push	{r7, lr}
 80070e6:	b08a      	sub	sp, #40	@ 0x28
 80070e8:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80070ee:	f000 fb13 	bl	8007718 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80070f2:	4b1d      	ldr	r3, [pc, #116]	@ (8007168 <xTimerCreateTimerTask+0x84>)
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	2b00      	cmp	r3, #0
 80070f8:	d021      	beq.n	800713e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80070fa:	2300      	movs	r3, #0
 80070fc:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80070fe:	2300      	movs	r3, #0
 8007100:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8007102:	1d3a      	adds	r2, r7, #4
 8007104:	f107 0108 	add.w	r1, r7, #8
 8007108:	f107 030c 	add.w	r3, r7, #12
 800710c:	4618      	mov	r0, r3
 800710e:	f7fe fa29 	bl	8005564 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8007112:	6879      	ldr	r1, [r7, #4]
 8007114:	68bb      	ldr	r3, [r7, #8]
 8007116:	68fa      	ldr	r2, [r7, #12]
 8007118:	9202      	str	r2, [sp, #8]
 800711a:	9301      	str	r3, [sp, #4]
 800711c:	2302      	movs	r3, #2
 800711e:	9300      	str	r3, [sp, #0]
 8007120:	2300      	movs	r3, #0
 8007122:	460a      	mov	r2, r1
 8007124:	4911      	ldr	r1, [pc, #68]	@ (800716c <xTimerCreateTimerTask+0x88>)
 8007126:	4812      	ldr	r0, [pc, #72]	@ (8007170 <xTimerCreateTimerTask+0x8c>)
 8007128:	f7ff f8a2 	bl	8006270 <xTaskCreateStatic>
 800712c:	4603      	mov	r3, r0
 800712e:	4a11      	ldr	r2, [pc, #68]	@ (8007174 <xTimerCreateTimerTask+0x90>)
 8007130:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8007132:	4b10      	ldr	r3, [pc, #64]	@ (8007174 <xTimerCreateTimerTask+0x90>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d001      	beq.n	800713e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800713a:	2301      	movs	r3, #1
 800713c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800713e:	697b      	ldr	r3, [r7, #20]
 8007140:	2b00      	cmp	r3, #0
 8007142:	d10b      	bne.n	800715c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8007144:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007148:	f383 8811 	msr	BASEPRI, r3
 800714c:	f3bf 8f6f 	isb	sy
 8007150:	f3bf 8f4f 	dsb	sy
 8007154:	613b      	str	r3, [r7, #16]
}
 8007156:	bf00      	nop
 8007158:	bf00      	nop
 800715a:	e7fd      	b.n	8007158 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800715c:	697b      	ldr	r3, [r7, #20]
}
 800715e:	4618      	mov	r0, r3
 8007160:	3718      	adds	r7, #24
 8007162:	46bd      	mov	sp, r7
 8007164:	bd80      	pop	{r7, pc}
 8007166:	bf00      	nop
 8007168:	20000e64 	.word	0x20000e64
 800716c:	0800b760 	.word	0x0800b760
 8007170:	080072b1 	.word	0x080072b1
 8007174:	20000e68 	.word	0x20000e68

08007178 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b08a      	sub	sp, #40	@ 0x28
 800717c:	af00      	add	r7, sp, #0
 800717e:	60f8      	str	r0, [r7, #12]
 8007180:	60b9      	str	r1, [r7, #8]
 8007182:	607a      	str	r2, [r7, #4]
 8007184:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8007186:	2300      	movs	r3, #0
 8007188:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800718a:	68fb      	ldr	r3, [r7, #12]
 800718c:	2b00      	cmp	r3, #0
 800718e:	d10b      	bne.n	80071a8 <xTimerGenericCommand+0x30>
	__asm volatile
 8007190:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007194:	f383 8811 	msr	BASEPRI, r3
 8007198:	f3bf 8f6f 	isb	sy
 800719c:	f3bf 8f4f 	dsb	sy
 80071a0:	623b      	str	r3, [r7, #32]
}
 80071a2:	bf00      	nop
 80071a4:	bf00      	nop
 80071a6:	e7fd      	b.n	80071a4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80071a8:	4b19      	ldr	r3, [pc, #100]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071aa:	681b      	ldr	r3, [r3, #0]
 80071ac:	2b00      	cmp	r3, #0
 80071ae:	d02a      	beq.n	8007206 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80071b0:	68bb      	ldr	r3, [r7, #8]
 80071b2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80071b8:	68fb      	ldr	r3, [r7, #12]
 80071ba:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80071bc:	68bb      	ldr	r3, [r7, #8]
 80071be:	2b05      	cmp	r3, #5
 80071c0:	dc18      	bgt.n	80071f4 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80071c2:	f7ff fead 	bl	8006f20 <xTaskGetSchedulerState>
 80071c6:	4603      	mov	r3, r0
 80071c8:	2b02      	cmp	r3, #2
 80071ca:	d109      	bne.n	80071e0 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80071cc:	4b10      	ldr	r3, [pc, #64]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071ce:	6818      	ldr	r0, [r3, #0]
 80071d0:	f107 0110 	add.w	r1, r7, #16
 80071d4:	2300      	movs	r3, #0
 80071d6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80071d8:	f7fe fbd8 	bl	800598c <xQueueGenericSend>
 80071dc:	6278      	str	r0, [r7, #36]	@ 0x24
 80071de:	e012      	b.n	8007206 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80071e0:	4b0b      	ldr	r3, [pc, #44]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071e2:	6818      	ldr	r0, [r3, #0]
 80071e4:	f107 0110 	add.w	r1, r7, #16
 80071e8:	2300      	movs	r3, #0
 80071ea:	2200      	movs	r2, #0
 80071ec:	f7fe fbce 	bl	800598c <xQueueGenericSend>
 80071f0:	6278      	str	r0, [r7, #36]	@ 0x24
 80071f2:	e008      	b.n	8007206 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80071f4:	4b06      	ldr	r3, [pc, #24]	@ (8007210 <xTimerGenericCommand+0x98>)
 80071f6:	6818      	ldr	r0, [r3, #0]
 80071f8:	f107 0110 	add.w	r1, r7, #16
 80071fc:	2300      	movs	r3, #0
 80071fe:	683a      	ldr	r2, [r7, #0]
 8007200:	f7fe fcc6 	bl	8005b90 <xQueueGenericSendFromISR>
 8007204:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8007206:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8007208:	4618      	mov	r0, r3
 800720a:	3728      	adds	r7, #40	@ 0x28
 800720c:	46bd      	mov	sp, r7
 800720e:	bd80      	pop	{r7, pc}
 8007210:	20000e64 	.word	0x20000e64

08007214 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8007214:	b580      	push	{r7, lr}
 8007216:	b088      	sub	sp, #32
 8007218:	af02      	add	r7, sp, #8
 800721a:	6078      	str	r0, [r7, #4]
 800721c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800721e:	4b23      	ldr	r3, [pc, #140]	@ (80072ac <prvProcessExpiredTimer+0x98>)
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68db      	ldr	r3, [r3, #12]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007228:	697b      	ldr	r3, [r7, #20]
 800722a:	3304      	adds	r3, #4
 800722c:	4618      	mov	r0, r3
 800722e:	f7fe fa3d 	bl	80056ac <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007232:	697b      	ldr	r3, [r7, #20]
 8007234:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007238:	f003 0304 	and.w	r3, r3, #4
 800723c:	2b00      	cmp	r3, #0
 800723e:	d023      	beq.n	8007288 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8007240:	697b      	ldr	r3, [r7, #20]
 8007242:	699a      	ldr	r2, [r3, #24]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	18d1      	adds	r1, r2, r3
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	683a      	ldr	r2, [r7, #0]
 800724c:	6978      	ldr	r0, [r7, #20]
 800724e:	f000 f8d5 	bl	80073fc <prvInsertTimerInActiveList>
 8007252:	4603      	mov	r3, r0
 8007254:	2b00      	cmp	r3, #0
 8007256:	d020      	beq.n	800729a <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007258:	2300      	movs	r3, #0
 800725a:	9300      	str	r3, [sp, #0]
 800725c:	2300      	movs	r3, #0
 800725e:	687a      	ldr	r2, [r7, #4]
 8007260:	2100      	movs	r1, #0
 8007262:	6978      	ldr	r0, [r7, #20]
 8007264:	f7ff ff88 	bl	8007178 <xTimerGenericCommand>
 8007268:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800726a:	693b      	ldr	r3, [r7, #16]
 800726c:	2b00      	cmp	r3, #0
 800726e:	d114      	bne.n	800729a <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007270:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007274:	f383 8811 	msr	BASEPRI, r3
 8007278:	f3bf 8f6f 	isb	sy
 800727c:	f3bf 8f4f 	dsb	sy
 8007280:	60fb      	str	r3, [r7, #12]
}
 8007282:	bf00      	nop
 8007284:	bf00      	nop
 8007286:	e7fd      	b.n	8007284 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007288:	697b      	ldr	r3, [r7, #20]
 800728a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800728e:	f023 0301 	bic.w	r3, r3, #1
 8007292:	b2da      	uxtb	r2, r3
 8007294:	697b      	ldr	r3, [r7, #20]
 8007296:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800729a:	697b      	ldr	r3, [r7, #20]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	6978      	ldr	r0, [r7, #20]
 80072a0:	4798      	blx	r3
}
 80072a2:	bf00      	nop
 80072a4:	3718      	adds	r7, #24
 80072a6:	46bd      	mov	sp, r7
 80072a8:	bd80      	pop	{r7, pc}
 80072aa:	bf00      	nop
 80072ac:	20000e5c 	.word	0x20000e5c

080072b0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80072b0:	b580      	push	{r7, lr}
 80072b2:	b084      	sub	sp, #16
 80072b4:	af00      	add	r7, sp, #0
 80072b6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072b8:	f107 0308 	add.w	r3, r7, #8
 80072bc:	4618      	mov	r0, r3
 80072be:	f000 f859 	bl	8007374 <prvGetNextExpireTime>
 80072c2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80072c4:	68bb      	ldr	r3, [r7, #8]
 80072c6:	4619      	mov	r1, r3
 80072c8:	68f8      	ldr	r0, [r7, #12]
 80072ca:	f000 f805 	bl	80072d8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80072ce:	f000 f8d7 	bl	8007480 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80072d2:	bf00      	nop
 80072d4:	e7f0      	b.n	80072b8 <prvTimerTask+0x8>
	...

080072d8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80072d8:	b580      	push	{r7, lr}
 80072da:	b084      	sub	sp, #16
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80072e2:	f7ff fa29 	bl	8006738 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80072e6:	f107 0308 	add.w	r3, r7, #8
 80072ea:	4618      	mov	r0, r3
 80072ec:	f000 f866 	bl	80073bc <prvSampleTimeNow>
 80072f0:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80072f2:	68bb      	ldr	r3, [r7, #8]
 80072f4:	2b00      	cmp	r3, #0
 80072f6:	d130      	bne.n	800735a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80072f8:	683b      	ldr	r3, [r7, #0]
 80072fa:	2b00      	cmp	r3, #0
 80072fc:	d10a      	bne.n	8007314 <prvProcessTimerOrBlockTask+0x3c>
 80072fe:	687a      	ldr	r2, [r7, #4]
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	429a      	cmp	r2, r3
 8007304:	d806      	bhi.n	8007314 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8007306:	f7ff fa25 	bl	8006754 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800730a:	68f9      	ldr	r1, [r7, #12]
 800730c:	6878      	ldr	r0, [r7, #4]
 800730e:	f7ff ff81 	bl	8007214 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8007312:	e024      	b.n	800735e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8007314:	683b      	ldr	r3, [r7, #0]
 8007316:	2b00      	cmp	r3, #0
 8007318:	d008      	beq.n	800732c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800731a:	4b13      	ldr	r3, [pc, #76]	@ (8007368 <prvProcessTimerOrBlockTask+0x90>)
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	2b00      	cmp	r3, #0
 8007322:	d101      	bne.n	8007328 <prvProcessTimerOrBlockTask+0x50>
 8007324:	2301      	movs	r3, #1
 8007326:	e000      	b.n	800732a <prvProcessTimerOrBlockTask+0x52>
 8007328:	2300      	movs	r3, #0
 800732a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800732c:	4b0f      	ldr	r3, [pc, #60]	@ (800736c <prvProcessTimerOrBlockTask+0x94>)
 800732e:	6818      	ldr	r0, [r3, #0]
 8007330:	687a      	ldr	r2, [r7, #4]
 8007332:	68fb      	ldr	r3, [r7, #12]
 8007334:	1ad3      	subs	r3, r2, r3
 8007336:	683a      	ldr	r2, [r7, #0]
 8007338:	4619      	mov	r1, r3
 800733a:	f7fe ff65 	bl	8006208 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800733e:	f7ff fa09 	bl	8006754 <xTaskResumeAll>
 8007342:	4603      	mov	r3, r0
 8007344:	2b00      	cmp	r3, #0
 8007346:	d10a      	bne.n	800735e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8007348:	4b09      	ldr	r3, [pc, #36]	@ (8007370 <prvProcessTimerOrBlockTask+0x98>)
 800734a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800734e:	601a      	str	r2, [r3, #0]
 8007350:	f3bf 8f4f 	dsb	sy
 8007354:	f3bf 8f6f 	isb	sy
}
 8007358:	e001      	b.n	800735e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800735a:	f7ff f9fb 	bl	8006754 <xTaskResumeAll>
}
 800735e:	bf00      	nop
 8007360:	3710      	adds	r7, #16
 8007362:	46bd      	mov	sp, r7
 8007364:	bd80      	pop	{r7, pc}
 8007366:	bf00      	nop
 8007368:	20000e60 	.word	0x20000e60
 800736c:	20000e64 	.word	0x20000e64
 8007370:	e000ed04 	.word	0xe000ed04

08007374 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007374:	b480      	push	{r7}
 8007376:	b085      	sub	sp, #20
 8007378:	af00      	add	r7, sp, #0
 800737a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800737c:	4b0e      	ldr	r3, [pc, #56]	@ (80073b8 <prvGetNextExpireTime+0x44>)
 800737e:	681b      	ldr	r3, [r3, #0]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	2b00      	cmp	r3, #0
 8007384:	d101      	bne.n	800738a <prvGetNextExpireTime+0x16>
 8007386:	2201      	movs	r2, #1
 8007388:	e000      	b.n	800738c <prvGetNextExpireTime+0x18>
 800738a:	2200      	movs	r2, #0
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	2b00      	cmp	r3, #0
 8007396:	d105      	bne.n	80073a4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007398:	4b07      	ldr	r3, [pc, #28]	@ (80073b8 <prvGetNextExpireTime+0x44>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	68db      	ldr	r3, [r3, #12]
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	60fb      	str	r3, [r7, #12]
 80073a2:	e001      	b.n	80073a8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80073a4:	2300      	movs	r3, #0
 80073a6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80073a8:	68fb      	ldr	r3, [r7, #12]
}
 80073aa:	4618      	mov	r0, r3
 80073ac:	3714      	adds	r7, #20
 80073ae:	46bd      	mov	sp, r7
 80073b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b4:	4770      	bx	lr
 80073b6:	bf00      	nop
 80073b8:	20000e5c 	.word	0x20000e5c

080073bc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80073bc:	b580      	push	{r7, lr}
 80073be:	b084      	sub	sp, #16
 80073c0:	af00      	add	r7, sp, #0
 80073c2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80073c4:	f7ff fa64 	bl	8006890 <xTaskGetTickCount>
 80073c8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80073ca:	4b0b      	ldr	r3, [pc, #44]	@ (80073f8 <prvSampleTimeNow+0x3c>)
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	68fa      	ldr	r2, [r7, #12]
 80073d0:	429a      	cmp	r2, r3
 80073d2:	d205      	bcs.n	80073e0 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80073d4:	f000 f93a 	bl	800764c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2201      	movs	r2, #1
 80073dc:	601a      	str	r2, [r3, #0]
 80073de:	e002      	b.n	80073e6 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	2200      	movs	r2, #0
 80073e4:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80073e6:	4a04      	ldr	r2, [pc, #16]	@ (80073f8 <prvSampleTimeNow+0x3c>)
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 80073ec:	68fb      	ldr	r3, [r7, #12]
}
 80073ee:	4618      	mov	r0, r3
 80073f0:	3710      	adds	r7, #16
 80073f2:	46bd      	mov	sp, r7
 80073f4:	bd80      	pop	{r7, pc}
 80073f6:	bf00      	nop
 80073f8:	20000e6c 	.word	0x20000e6c

080073fc <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80073fc:	b580      	push	{r7, lr}
 80073fe:	b086      	sub	sp, #24
 8007400:	af00      	add	r7, sp, #0
 8007402:	60f8      	str	r0, [r7, #12]
 8007404:	60b9      	str	r1, [r7, #8]
 8007406:	607a      	str	r2, [r7, #4]
 8007408:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800740e:	68fb      	ldr	r3, [r7, #12]
 8007410:	68ba      	ldr	r2, [r7, #8]
 8007412:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007414:	68fb      	ldr	r3, [r7, #12]
 8007416:	68fa      	ldr	r2, [r7, #12]
 8007418:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800741a:	68ba      	ldr	r2, [r7, #8]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	429a      	cmp	r2, r3
 8007420:	d812      	bhi.n	8007448 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007422:	687a      	ldr	r2, [r7, #4]
 8007424:	683b      	ldr	r3, [r7, #0]
 8007426:	1ad2      	subs	r2, r2, r3
 8007428:	68fb      	ldr	r3, [r7, #12]
 800742a:	699b      	ldr	r3, [r3, #24]
 800742c:	429a      	cmp	r2, r3
 800742e:	d302      	bcc.n	8007436 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8007430:	2301      	movs	r3, #1
 8007432:	617b      	str	r3, [r7, #20]
 8007434:	e01b      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8007436:	4b10      	ldr	r3, [pc, #64]	@ (8007478 <prvInsertTimerInActiveList+0x7c>)
 8007438:	681a      	ldr	r2, [r3, #0]
 800743a:	68fb      	ldr	r3, [r7, #12]
 800743c:	3304      	adds	r3, #4
 800743e:	4619      	mov	r1, r3
 8007440:	4610      	mov	r0, r2
 8007442:	f7fe f8fa 	bl	800563a <vListInsert>
 8007446:	e012      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8007448:	687a      	ldr	r2, [r7, #4]
 800744a:	683b      	ldr	r3, [r7, #0]
 800744c:	429a      	cmp	r2, r3
 800744e:	d206      	bcs.n	800745e <prvInsertTimerInActiveList+0x62>
 8007450:	68ba      	ldr	r2, [r7, #8]
 8007452:	683b      	ldr	r3, [r7, #0]
 8007454:	429a      	cmp	r2, r3
 8007456:	d302      	bcc.n	800745e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8007458:	2301      	movs	r3, #1
 800745a:	617b      	str	r3, [r7, #20]
 800745c:	e007      	b.n	800746e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800745e:	4b07      	ldr	r3, [pc, #28]	@ (800747c <prvInsertTimerInActiveList+0x80>)
 8007460:	681a      	ldr	r2, [r3, #0]
 8007462:	68fb      	ldr	r3, [r7, #12]
 8007464:	3304      	adds	r3, #4
 8007466:	4619      	mov	r1, r3
 8007468:	4610      	mov	r0, r2
 800746a:	f7fe f8e6 	bl	800563a <vListInsert>
		}
	}

	return xProcessTimerNow;
 800746e:	697b      	ldr	r3, [r7, #20]
}
 8007470:	4618      	mov	r0, r3
 8007472:	3718      	adds	r7, #24
 8007474:	46bd      	mov	sp, r7
 8007476:	bd80      	pop	{r7, pc}
 8007478:	20000e60 	.word	0x20000e60
 800747c:	20000e5c 	.word	0x20000e5c

08007480 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007480:	b580      	push	{r7, lr}
 8007482:	b08e      	sub	sp, #56	@ 0x38
 8007484:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007486:	e0ce      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8007488:	687b      	ldr	r3, [r7, #4]
 800748a:	2b00      	cmp	r3, #0
 800748c:	da19      	bge.n	80074c2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800748e:	1d3b      	adds	r3, r7, #4
 8007490:	3304      	adds	r3, #4
 8007492:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007494:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007496:	2b00      	cmp	r3, #0
 8007498:	d10b      	bne.n	80074b2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800749a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800749e:	f383 8811 	msr	BASEPRI, r3
 80074a2:	f3bf 8f6f 	isb	sy
 80074a6:	f3bf 8f4f 	dsb	sy
 80074aa:	61fb      	str	r3, [r7, #28]
}
 80074ac:	bf00      	nop
 80074ae:	bf00      	nop
 80074b0:	e7fd      	b.n	80074ae <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 80074b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80074b4:	681b      	ldr	r3, [r3, #0]
 80074b6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074b8:	6850      	ldr	r0, [r2, #4]
 80074ba:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80074bc:	6892      	ldr	r2, [r2, #8]
 80074be:	4611      	mov	r1, r2
 80074c0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	f2c0 80ae 	blt.w	8007626 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 80074ca:	68fb      	ldr	r3, [r7, #12]
 80074cc:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 80074ce:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d0:	695b      	ldr	r3, [r3, #20]
 80074d2:	2b00      	cmp	r3, #0
 80074d4:	d004      	beq.n	80074e0 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80074d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80074d8:	3304      	adds	r3, #4
 80074da:	4618      	mov	r0, r3
 80074dc:	f7fe f8e6 	bl	80056ac <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80074e0:	463b      	mov	r3, r7
 80074e2:	4618      	mov	r0, r3
 80074e4:	f7ff ff6a 	bl	80073bc <prvSampleTimeNow>
 80074e8:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2b09      	cmp	r3, #9
 80074ee:	f200 8097 	bhi.w	8007620 <prvProcessReceivedCommands+0x1a0>
 80074f2:	a201      	add	r2, pc, #4	@ (adr r2, 80074f8 <prvProcessReceivedCommands+0x78>)
 80074f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80074f8:	08007521 	.word	0x08007521
 80074fc:	08007521 	.word	0x08007521
 8007500:	08007521 	.word	0x08007521
 8007504:	08007597 	.word	0x08007597
 8007508:	080075ab 	.word	0x080075ab
 800750c:	080075f7 	.word	0x080075f7
 8007510:	08007521 	.word	0x08007521
 8007514:	08007521 	.word	0x08007521
 8007518:	08007597 	.word	0x08007597
 800751c:	080075ab 	.word	0x080075ab
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8007520:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007522:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007526:	f043 0301 	orr.w	r3, r3, #1
 800752a:	b2da      	uxtb	r2, r3
 800752c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800752e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8007532:	68ba      	ldr	r2, [r7, #8]
 8007534:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007536:	699b      	ldr	r3, [r3, #24]
 8007538:	18d1      	adds	r1, r2, r3
 800753a:	68bb      	ldr	r3, [r7, #8]
 800753c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800753e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007540:	f7ff ff5c 	bl	80073fc <prvInsertTimerInActiveList>
 8007544:	4603      	mov	r3, r0
 8007546:	2b00      	cmp	r3, #0
 8007548:	d06c      	beq.n	8007624 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800754a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800754c:	6a1b      	ldr	r3, [r3, #32]
 800754e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007550:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007554:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007558:	f003 0304 	and.w	r3, r3, #4
 800755c:	2b00      	cmp	r3, #0
 800755e:	d061      	beq.n	8007624 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007560:	68ba      	ldr	r2, [r7, #8]
 8007562:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007564:	699b      	ldr	r3, [r3, #24]
 8007566:	441a      	add	r2, r3
 8007568:	2300      	movs	r3, #0
 800756a:	9300      	str	r3, [sp, #0]
 800756c:	2300      	movs	r3, #0
 800756e:	2100      	movs	r1, #0
 8007570:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007572:	f7ff fe01 	bl	8007178 <xTimerGenericCommand>
 8007576:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8007578:	6a3b      	ldr	r3, [r7, #32]
 800757a:	2b00      	cmp	r3, #0
 800757c:	d152      	bne.n	8007624 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 800757e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007582:	f383 8811 	msr	BASEPRI, r3
 8007586:	f3bf 8f6f 	isb	sy
 800758a:	f3bf 8f4f 	dsb	sy
 800758e:	61bb      	str	r3, [r7, #24]
}
 8007590:	bf00      	nop
 8007592:	bf00      	nop
 8007594:	e7fd      	b.n	8007592 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8007596:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007598:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800759c:	f023 0301 	bic.w	r3, r3, #1
 80075a0:	b2da      	uxtb	r2, r3
 80075a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075a4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80075a8:	e03d      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80075aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075ac:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075b0:	f043 0301 	orr.w	r3, r3, #1
 80075b4:	b2da      	uxtb	r2, r3
 80075b6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075b8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 80075bc:	68ba      	ldr	r2, [r7, #8]
 80075be:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 80075c2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075c4:	699b      	ldr	r3, [r3, #24]
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d10b      	bne.n	80075e2 <prvProcessReceivedCommands+0x162>
	__asm volatile
 80075ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80075ce:	f383 8811 	msr	BASEPRI, r3
 80075d2:	f3bf 8f6f 	isb	sy
 80075d6:	f3bf 8f4f 	dsb	sy
 80075da:	617b      	str	r3, [r7, #20]
}
 80075dc:	bf00      	nop
 80075de:	bf00      	nop
 80075e0:	e7fd      	b.n	80075de <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 80075e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075e4:	699a      	ldr	r2, [r3, #24]
 80075e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075e8:	18d1      	adds	r1, r2, r3
 80075ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80075ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80075ee:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80075f0:	f7ff ff04 	bl	80073fc <prvInsertTimerInActiveList>
					break;
 80075f4:	e017      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 80075f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80075f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075fc:	f003 0302 	and.w	r3, r3, #2
 8007600:	2b00      	cmp	r3, #0
 8007602:	d103      	bne.n	800760c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007604:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007606:	f000 fbe7 	bl	8007dd8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800760a:	e00c      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800760c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800760e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007612:	f023 0301 	bic.w	r3, r3, #1
 8007616:	b2da      	uxtb	r2, r3
 8007618:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800761a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800761e:	e002      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007620:	bf00      	nop
 8007622:	e000      	b.n	8007626 <prvProcessReceivedCommands+0x1a6>
					break;
 8007624:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007626:	4b08      	ldr	r3, [pc, #32]	@ (8007648 <prvProcessReceivedCommands+0x1c8>)
 8007628:	681b      	ldr	r3, [r3, #0]
 800762a:	1d39      	adds	r1, r7, #4
 800762c:	2200      	movs	r2, #0
 800762e:	4618      	mov	r0, r3
 8007630:	f7fe fb4c 	bl	8005ccc <xQueueReceive>
 8007634:	4603      	mov	r3, r0
 8007636:	2b00      	cmp	r3, #0
 8007638:	f47f af26 	bne.w	8007488 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800763c:	bf00      	nop
 800763e:	bf00      	nop
 8007640:	3730      	adds	r7, #48	@ 0x30
 8007642:	46bd      	mov	sp, r7
 8007644:	bd80      	pop	{r7, pc}
 8007646:	bf00      	nop
 8007648:	20000e64 	.word	0x20000e64

0800764c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800764c:	b580      	push	{r7, lr}
 800764e:	b088      	sub	sp, #32
 8007650:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007652:	e049      	b.n	80076e8 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007654:	4b2e      	ldr	r3, [pc, #184]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 8007656:	681b      	ldr	r3, [r3, #0]
 8007658:	68db      	ldr	r3, [r3, #12]
 800765a:	681b      	ldr	r3, [r3, #0]
 800765c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800765e:	4b2c      	ldr	r3, [pc, #176]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 8007660:	681b      	ldr	r3, [r3, #0]
 8007662:	68db      	ldr	r3, [r3, #12]
 8007664:	68db      	ldr	r3, [r3, #12]
 8007666:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	3304      	adds	r3, #4
 800766c:	4618      	mov	r0, r3
 800766e:	f7fe f81d 	bl	80056ac <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	6a1b      	ldr	r3, [r3, #32]
 8007676:	68f8      	ldr	r0, [r7, #12]
 8007678:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007680:	f003 0304 	and.w	r3, r3, #4
 8007684:	2b00      	cmp	r3, #0
 8007686:	d02f      	beq.n	80076e8 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007688:	68fb      	ldr	r3, [r7, #12]
 800768a:	699b      	ldr	r3, [r3, #24]
 800768c:	693a      	ldr	r2, [r7, #16]
 800768e:	4413      	add	r3, r2
 8007690:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007692:	68ba      	ldr	r2, [r7, #8]
 8007694:	693b      	ldr	r3, [r7, #16]
 8007696:	429a      	cmp	r2, r3
 8007698:	d90e      	bls.n	80076b8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800769a:	68fb      	ldr	r3, [r7, #12]
 800769c:	68ba      	ldr	r2, [r7, #8]
 800769e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80076a0:	68fb      	ldr	r3, [r7, #12]
 80076a2:	68fa      	ldr	r2, [r7, #12]
 80076a4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80076a6:	4b1a      	ldr	r3, [pc, #104]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076a8:	681a      	ldr	r2, [r3, #0]
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	3304      	adds	r3, #4
 80076ae:	4619      	mov	r1, r3
 80076b0:	4610      	mov	r0, r2
 80076b2:	f7fd ffc2 	bl	800563a <vListInsert>
 80076b6:	e017      	b.n	80076e8 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80076b8:	2300      	movs	r3, #0
 80076ba:	9300      	str	r3, [sp, #0]
 80076bc:	2300      	movs	r3, #0
 80076be:	693a      	ldr	r2, [r7, #16]
 80076c0:	2100      	movs	r1, #0
 80076c2:	68f8      	ldr	r0, [r7, #12]
 80076c4:	f7ff fd58 	bl	8007178 <xTimerGenericCommand>
 80076c8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d10b      	bne.n	80076e8 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80076d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076d4:	f383 8811 	msr	BASEPRI, r3
 80076d8:	f3bf 8f6f 	isb	sy
 80076dc:	f3bf 8f4f 	dsb	sy
 80076e0:	603b      	str	r3, [r7, #0]
}
 80076e2:	bf00      	nop
 80076e4:	bf00      	nop
 80076e6:	e7fd      	b.n	80076e4 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80076e8:	4b09      	ldr	r3, [pc, #36]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	2b00      	cmp	r3, #0
 80076f0:	d1b0      	bne.n	8007654 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 80076f2:	4b07      	ldr	r3, [pc, #28]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076f4:	681b      	ldr	r3, [r3, #0]
 80076f6:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 80076f8:	4b06      	ldr	r3, [pc, #24]	@ (8007714 <prvSwitchTimerLists+0xc8>)
 80076fa:	681b      	ldr	r3, [r3, #0]
 80076fc:	4a04      	ldr	r2, [pc, #16]	@ (8007710 <prvSwitchTimerLists+0xc4>)
 80076fe:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007700:	4a04      	ldr	r2, [pc, #16]	@ (8007714 <prvSwitchTimerLists+0xc8>)
 8007702:	697b      	ldr	r3, [r7, #20]
 8007704:	6013      	str	r3, [r2, #0]
}
 8007706:	bf00      	nop
 8007708:	3718      	adds	r7, #24
 800770a:	46bd      	mov	sp, r7
 800770c:	bd80      	pop	{r7, pc}
 800770e:	bf00      	nop
 8007710:	20000e5c 	.word	0x20000e5c
 8007714:	20000e60 	.word	0x20000e60

08007718 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007718:	b580      	push	{r7, lr}
 800771a:	b082      	sub	sp, #8
 800771c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800771e:	f000 f96b 	bl	80079f8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007722:	4b15      	ldr	r3, [pc, #84]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d120      	bne.n	800776c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800772a:	4814      	ldr	r0, [pc, #80]	@ (800777c <prvCheckForValidListAndQueue+0x64>)
 800772c:	f7fd ff34 	bl	8005598 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007730:	4813      	ldr	r0, [pc, #76]	@ (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007732:	f7fd ff31 	bl	8005598 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007736:	4b13      	ldr	r3, [pc, #76]	@ (8007784 <prvCheckForValidListAndQueue+0x6c>)
 8007738:	4a10      	ldr	r2, [pc, #64]	@ (800777c <prvCheckForValidListAndQueue+0x64>)
 800773a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800773c:	4b12      	ldr	r3, [pc, #72]	@ (8007788 <prvCheckForValidListAndQueue+0x70>)
 800773e:	4a10      	ldr	r2, [pc, #64]	@ (8007780 <prvCheckForValidListAndQueue+0x68>)
 8007740:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007742:	2300      	movs	r3, #0
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	4b11      	ldr	r3, [pc, #68]	@ (800778c <prvCheckForValidListAndQueue+0x74>)
 8007748:	4a11      	ldr	r2, [pc, #68]	@ (8007790 <prvCheckForValidListAndQueue+0x78>)
 800774a:	2110      	movs	r1, #16
 800774c:	200a      	movs	r0, #10
 800774e:	f7fe f841 	bl	80057d4 <xQueueGenericCreateStatic>
 8007752:	4603      	mov	r3, r0
 8007754:	4a08      	ldr	r2, [pc, #32]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007756:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007758:	4b07      	ldr	r3, [pc, #28]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	2b00      	cmp	r3, #0
 800775e:	d005      	beq.n	800776c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007760:	4b05      	ldr	r3, [pc, #20]	@ (8007778 <prvCheckForValidListAndQueue+0x60>)
 8007762:	681b      	ldr	r3, [r3, #0]
 8007764:	490b      	ldr	r1, [pc, #44]	@ (8007794 <prvCheckForValidListAndQueue+0x7c>)
 8007766:	4618      	mov	r0, r3
 8007768:	f7fe fd24 	bl	80061b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800776c:	f000 f976 	bl	8007a5c <vPortExitCritical>
}
 8007770:	bf00      	nop
 8007772:	46bd      	mov	sp, r7
 8007774:	bd80      	pop	{r7, pc}
 8007776:	bf00      	nop
 8007778:	20000e64 	.word	0x20000e64
 800777c:	20000e34 	.word	0x20000e34
 8007780:	20000e48 	.word	0x20000e48
 8007784:	20000e5c 	.word	0x20000e5c
 8007788:	20000e60 	.word	0x20000e60
 800778c:	20000f10 	.word	0x20000f10
 8007790:	20000e70 	.word	0x20000e70
 8007794:	0800b768 	.word	0x0800b768

08007798 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007798:	b480      	push	{r7}
 800779a:	b085      	sub	sp, #20
 800779c:	af00      	add	r7, sp, #0
 800779e:	60f8      	str	r0, [r7, #12]
 80077a0:	60b9      	str	r1, [r7, #8]
 80077a2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	3b04      	subs	r3, #4
 80077a8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80077aa:	68fb      	ldr	r3, [r7, #12]
 80077ac:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80077b0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	3b04      	subs	r3, #4
 80077b6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80077b8:	68bb      	ldr	r3, [r7, #8]
 80077ba:	f023 0201 	bic.w	r2, r3, #1
 80077be:	68fb      	ldr	r3, [r7, #12]
 80077c0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80077c2:	68fb      	ldr	r3, [r7, #12]
 80077c4:	3b04      	subs	r3, #4
 80077c6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80077c8:	4a0c      	ldr	r2, [pc, #48]	@ (80077fc <pxPortInitialiseStack+0x64>)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	3b14      	subs	r3, #20
 80077d2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80077d4:	687a      	ldr	r2, [r7, #4]
 80077d6:	68fb      	ldr	r3, [r7, #12]
 80077d8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80077da:	68fb      	ldr	r3, [r7, #12]
 80077dc:	3b04      	subs	r3, #4
 80077de:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80077e0:	68fb      	ldr	r3, [r7, #12]
 80077e2:	f06f 0202 	mvn.w	r2, #2
 80077e6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80077e8:	68fb      	ldr	r3, [r7, #12]
 80077ea:	3b20      	subs	r3, #32
 80077ec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80077ee:	68fb      	ldr	r3, [r7, #12]
}
 80077f0:	4618      	mov	r0, r3
 80077f2:	3714      	adds	r7, #20
 80077f4:	46bd      	mov	sp, r7
 80077f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077fa:	4770      	bx	lr
 80077fc:	08007801 	.word	0x08007801

08007800 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007800:	b480      	push	{r7}
 8007802:	b085      	sub	sp, #20
 8007804:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007806:	2300      	movs	r3, #0
 8007808:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800780a:	4b13      	ldr	r3, [pc, #76]	@ (8007858 <prvTaskExitError+0x58>)
 800780c:	681b      	ldr	r3, [r3, #0]
 800780e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007812:	d00b      	beq.n	800782c <prvTaskExitError+0x2c>
	__asm volatile
 8007814:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007818:	f383 8811 	msr	BASEPRI, r3
 800781c:	f3bf 8f6f 	isb	sy
 8007820:	f3bf 8f4f 	dsb	sy
 8007824:	60fb      	str	r3, [r7, #12]
}
 8007826:	bf00      	nop
 8007828:	bf00      	nop
 800782a:	e7fd      	b.n	8007828 <prvTaskExitError+0x28>
	__asm volatile
 800782c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007830:	f383 8811 	msr	BASEPRI, r3
 8007834:	f3bf 8f6f 	isb	sy
 8007838:	f3bf 8f4f 	dsb	sy
 800783c:	60bb      	str	r3, [r7, #8]
}
 800783e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007840:	bf00      	nop
 8007842:	687b      	ldr	r3, [r7, #4]
 8007844:	2b00      	cmp	r3, #0
 8007846:	d0fc      	beq.n	8007842 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007848:	bf00      	nop
 800784a:	bf00      	nop
 800784c:	3714      	adds	r7, #20
 800784e:	46bd      	mov	sp, r7
 8007850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007854:	4770      	bx	lr
 8007856:	bf00      	nop
 8007858:	2000000c 	.word	0x2000000c
 800785c:	00000000 	.word	0x00000000

08007860 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007860:	4b07      	ldr	r3, [pc, #28]	@ (8007880 <pxCurrentTCBConst2>)
 8007862:	6819      	ldr	r1, [r3, #0]
 8007864:	6808      	ldr	r0, [r1, #0]
 8007866:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800786a:	f380 8809 	msr	PSP, r0
 800786e:	f3bf 8f6f 	isb	sy
 8007872:	f04f 0000 	mov.w	r0, #0
 8007876:	f380 8811 	msr	BASEPRI, r0
 800787a:	4770      	bx	lr
 800787c:	f3af 8000 	nop.w

08007880 <pxCurrentTCBConst2>:
 8007880:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007884:	bf00      	nop
 8007886:	bf00      	nop

08007888 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007888:	4808      	ldr	r0, [pc, #32]	@ (80078ac <prvPortStartFirstTask+0x24>)
 800788a:	6800      	ldr	r0, [r0, #0]
 800788c:	6800      	ldr	r0, [r0, #0]
 800788e:	f380 8808 	msr	MSP, r0
 8007892:	f04f 0000 	mov.w	r0, #0
 8007896:	f380 8814 	msr	CONTROL, r0
 800789a:	b662      	cpsie	i
 800789c:	b661      	cpsie	f
 800789e:	f3bf 8f4f 	dsb	sy
 80078a2:	f3bf 8f6f 	isb	sy
 80078a6:	df00      	svc	0
 80078a8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80078aa:	bf00      	nop
 80078ac:	e000ed08 	.word	0xe000ed08

080078b0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80078b0:	b580      	push	{r7, lr}
 80078b2:	b086      	sub	sp, #24
 80078b4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80078b6:	4b47      	ldr	r3, [pc, #284]	@ (80079d4 <xPortStartScheduler+0x124>)
 80078b8:	681b      	ldr	r3, [r3, #0]
 80078ba:	4a47      	ldr	r2, [pc, #284]	@ (80079d8 <xPortStartScheduler+0x128>)
 80078bc:	4293      	cmp	r3, r2
 80078be:	d10b      	bne.n	80078d8 <xPortStartScheduler+0x28>
	__asm volatile
 80078c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078c4:	f383 8811 	msr	BASEPRI, r3
 80078c8:	f3bf 8f6f 	isb	sy
 80078cc:	f3bf 8f4f 	dsb	sy
 80078d0:	60fb      	str	r3, [r7, #12]
}
 80078d2:	bf00      	nop
 80078d4:	bf00      	nop
 80078d6:	e7fd      	b.n	80078d4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80078d8:	4b3e      	ldr	r3, [pc, #248]	@ (80079d4 <xPortStartScheduler+0x124>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	4a3f      	ldr	r2, [pc, #252]	@ (80079dc <xPortStartScheduler+0x12c>)
 80078de:	4293      	cmp	r3, r2
 80078e0:	d10b      	bne.n	80078fa <xPortStartScheduler+0x4a>
	__asm volatile
 80078e2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80078e6:	f383 8811 	msr	BASEPRI, r3
 80078ea:	f3bf 8f6f 	isb	sy
 80078ee:	f3bf 8f4f 	dsb	sy
 80078f2:	613b      	str	r3, [r7, #16]
}
 80078f4:	bf00      	nop
 80078f6:	bf00      	nop
 80078f8:	e7fd      	b.n	80078f6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 80078fa:	4b39      	ldr	r3, [pc, #228]	@ (80079e0 <xPortStartScheduler+0x130>)
 80078fc:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 80078fe:	697b      	ldr	r3, [r7, #20]
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007906:	697b      	ldr	r3, [r7, #20]
 8007908:	22ff      	movs	r2, #255	@ 0xff
 800790a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800790c:	697b      	ldr	r3, [r7, #20]
 800790e:	781b      	ldrb	r3, [r3, #0]
 8007910:	b2db      	uxtb	r3, r3
 8007912:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007914:	78fb      	ldrb	r3, [r7, #3]
 8007916:	b2db      	uxtb	r3, r3
 8007918:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800791c:	b2da      	uxtb	r2, r3
 800791e:	4b31      	ldr	r3, [pc, #196]	@ (80079e4 <xPortStartScheduler+0x134>)
 8007920:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007922:	4b31      	ldr	r3, [pc, #196]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007924:	2207      	movs	r2, #7
 8007926:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007928:	e009      	b.n	800793e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800792a:	4b2f      	ldr	r3, [pc, #188]	@ (80079e8 <xPortStartScheduler+0x138>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	3b01      	subs	r3, #1
 8007930:	4a2d      	ldr	r2, [pc, #180]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007932:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007934:	78fb      	ldrb	r3, [r7, #3]
 8007936:	b2db      	uxtb	r3, r3
 8007938:	005b      	lsls	r3, r3, #1
 800793a:	b2db      	uxtb	r3, r3
 800793c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800793e:	78fb      	ldrb	r3, [r7, #3]
 8007940:	b2db      	uxtb	r3, r3
 8007942:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007946:	2b80      	cmp	r3, #128	@ 0x80
 8007948:	d0ef      	beq.n	800792a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800794a:	4b27      	ldr	r3, [pc, #156]	@ (80079e8 <xPortStartScheduler+0x138>)
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	f1c3 0307 	rsb	r3, r3, #7
 8007952:	2b04      	cmp	r3, #4
 8007954:	d00b      	beq.n	800796e <xPortStartScheduler+0xbe>
	__asm volatile
 8007956:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800795a:	f383 8811 	msr	BASEPRI, r3
 800795e:	f3bf 8f6f 	isb	sy
 8007962:	f3bf 8f4f 	dsb	sy
 8007966:	60bb      	str	r3, [r7, #8]
}
 8007968:	bf00      	nop
 800796a:	bf00      	nop
 800796c:	e7fd      	b.n	800796a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800796e:	4b1e      	ldr	r3, [pc, #120]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	021b      	lsls	r3, r3, #8
 8007974:	4a1c      	ldr	r2, [pc, #112]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007976:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007978:	4b1b      	ldr	r3, [pc, #108]	@ (80079e8 <xPortStartScheduler+0x138>)
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007980:	4a19      	ldr	r2, [pc, #100]	@ (80079e8 <xPortStartScheduler+0x138>)
 8007982:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	b2da      	uxtb	r2, r3
 8007988:	697b      	ldr	r3, [r7, #20]
 800798a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800798c:	4b17      	ldr	r3, [pc, #92]	@ (80079ec <xPortStartScheduler+0x13c>)
 800798e:	681b      	ldr	r3, [r3, #0]
 8007990:	4a16      	ldr	r2, [pc, #88]	@ (80079ec <xPortStartScheduler+0x13c>)
 8007992:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007996:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007998:	4b14      	ldr	r3, [pc, #80]	@ (80079ec <xPortStartScheduler+0x13c>)
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	4a13      	ldr	r2, [pc, #76]	@ (80079ec <xPortStartScheduler+0x13c>)
 800799e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80079a2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80079a4:	f000 f8da 	bl	8007b5c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80079a8:	4b11      	ldr	r3, [pc, #68]	@ (80079f0 <xPortStartScheduler+0x140>)
 80079aa:	2200      	movs	r2, #0
 80079ac:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80079ae:	f000 f8f9 	bl	8007ba4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80079b2:	4b10      	ldr	r3, [pc, #64]	@ (80079f4 <xPortStartScheduler+0x144>)
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	4a0f      	ldr	r2, [pc, #60]	@ (80079f4 <xPortStartScheduler+0x144>)
 80079b8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80079bc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80079be:	f7ff ff63 	bl	8007888 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80079c2:	f7ff f82f 	bl	8006a24 <vTaskSwitchContext>
	prvTaskExitError();
 80079c6:	f7ff ff1b 	bl	8007800 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80079ca:	2300      	movs	r3, #0
}
 80079cc:	4618      	mov	r0, r3
 80079ce:	3718      	adds	r7, #24
 80079d0:	46bd      	mov	sp, r7
 80079d2:	bd80      	pop	{r7, pc}
 80079d4:	e000ed00 	.word	0xe000ed00
 80079d8:	410fc271 	.word	0x410fc271
 80079dc:	410fc270 	.word	0x410fc270
 80079e0:	e000e400 	.word	0xe000e400
 80079e4:	20000f60 	.word	0x20000f60
 80079e8:	20000f64 	.word	0x20000f64
 80079ec:	e000ed20 	.word	0xe000ed20
 80079f0:	2000000c 	.word	0x2000000c
 80079f4:	e000ef34 	.word	0xe000ef34

080079f8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80079f8:	b480      	push	{r7}
 80079fa:	b083      	sub	sp, #12
 80079fc:	af00      	add	r7, sp, #0
	__asm volatile
 80079fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a02:	f383 8811 	msr	BASEPRI, r3
 8007a06:	f3bf 8f6f 	isb	sy
 8007a0a:	f3bf 8f4f 	dsb	sy
 8007a0e:	607b      	str	r3, [r7, #4]
}
 8007a10:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007a12:	4b10      	ldr	r3, [pc, #64]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a14:	681b      	ldr	r3, [r3, #0]
 8007a16:	3301      	adds	r3, #1
 8007a18:	4a0e      	ldr	r2, [pc, #56]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a1a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007a1c:	4b0d      	ldr	r3, [pc, #52]	@ (8007a54 <vPortEnterCritical+0x5c>)
 8007a1e:	681b      	ldr	r3, [r3, #0]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d110      	bne.n	8007a46 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007a24:	4b0c      	ldr	r3, [pc, #48]	@ (8007a58 <vPortEnterCritical+0x60>)
 8007a26:	681b      	ldr	r3, [r3, #0]
 8007a28:	b2db      	uxtb	r3, r3
 8007a2a:	2b00      	cmp	r3, #0
 8007a2c:	d00b      	beq.n	8007a46 <vPortEnterCritical+0x4e>
	__asm volatile
 8007a2e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a32:	f383 8811 	msr	BASEPRI, r3
 8007a36:	f3bf 8f6f 	isb	sy
 8007a3a:	f3bf 8f4f 	dsb	sy
 8007a3e:	603b      	str	r3, [r7, #0]
}
 8007a40:	bf00      	nop
 8007a42:	bf00      	nop
 8007a44:	e7fd      	b.n	8007a42 <vPortEnterCritical+0x4a>
	}
}
 8007a46:	bf00      	nop
 8007a48:	370c      	adds	r7, #12
 8007a4a:	46bd      	mov	sp, r7
 8007a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a50:	4770      	bx	lr
 8007a52:	bf00      	nop
 8007a54:	2000000c 	.word	0x2000000c
 8007a58:	e000ed04 	.word	0xe000ed04

08007a5c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007a5c:	b480      	push	{r7}
 8007a5e:	b083      	sub	sp, #12
 8007a60:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007a62:	4b12      	ldr	r3, [pc, #72]	@ (8007aac <vPortExitCritical+0x50>)
 8007a64:	681b      	ldr	r3, [r3, #0]
 8007a66:	2b00      	cmp	r3, #0
 8007a68:	d10b      	bne.n	8007a82 <vPortExitCritical+0x26>
	__asm volatile
 8007a6a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a6e:	f383 8811 	msr	BASEPRI, r3
 8007a72:	f3bf 8f6f 	isb	sy
 8007a76:	f3bf 8f4f 	dsb	sy
 8007a7a:	607b      	str	r3, [r7, #4]
}
 8007a7c:	bf00      	nop
 8007a7e:	bf00      	nop
 8007a80:	e7fd      	b.n	8007a7e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007a82:	4b0a      	ldr	r3, [pc, #40]	@ (8007aac <vPortExitCritical+0x50>)
 8007a84:	681b      	ldr	r3, [r3, #0]
 8007a86:	3b01      	subs	r3, #1
 8007a88:	4a08      	ldr	r2, [pc, #32]	@ (8007aac <vPortExitCritical+0x50>)
 8007a8a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007a8c:	4b07      	ldr	r3, [pc, #28]	@ (8007aac <vPortExitCritical+0x50>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d105      	bne.n	8007aa0 <vPortExitCritical+0x44>
 8007a94:	2300      	movs	r3, #0
 8007a96:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	f383 8811 	msr	BASEPRI, r3
}
 8007a9e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007aa0:	bf00      	nop
 8007aa2:	370c      	adds	r7, #12
 8007aa4:	46bd      	mov	sp, r7
 8007aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007aaa:	4770      	bx	lr
 8007aac:	2000000c 	.word	0x2000000c

08007ab0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007ab0:	f3ef 8009 	mrs	r0, PSP
 8007ab4:	f3bf 8f6f 	isb	sy
 8007ab8:	4b15      	ldr	r3, [pc, #84]	@ (8007b10 <pxCurrentTCBConst>)
 8007aba:	681a      	ldr	r2, [r3, #0]
 8007abc:	f01e 0f10 	tst.w	lr, #16
 8007ac0:	bf08      	it	eq
 8007ac2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007ac6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007aca:	6010      	str	r0, [r2, #0]
 8007acc:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007ad0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007ad4:	f380 8811 	msr	BASEPRI, r0
 8007ad8:	f3bf 8f4f 	dsb	sy
 8007adc:	f3bf 8f6f 	isb	sy
 8007ae0:	f7fe ffa0 	bl	8006a24 <vTaskSwitchContext>
 8007ae4:	f04f 0000 	mov.w	r0, #0
 8007ae8:	f380 8811 	msr	BASEPRI, r0
 8007aec:	bc09      	pop	{r0, r3}
 8007aee:	6819      	ldr	r1, [r3, #0]
 8007af0:	6808      	ldr	r0, [r1, #0]
 8007af2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af6:	f01e 0f10 	tst.w	lr, #16
 8007afa:	bf08      	it	eq
 8007afc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007b00:	f380 8809 	msr	PSP, r0
 8007b04:	f3bf 8f6f 	isb	sy
 8007b08:	4770      	bx	lr
 8007b0a:	bf00      	nop
 8007b0c:	f3af 8000 	nop.w

08007b10 <pxCurrentTCBConst>:
 8007b10:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007b14:	bf00      	nop
 8007b16:	bf00      	nop

08007b18 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007b18:	b580      	push	{r7, lr}
 8007b1a:	b082      	sub	sp, #8
 8007b1c:	af00      	add	r7, sp, #0
	__asm volatile
 8007b1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007b22:	f383 8811 	msr	BASEPRI, r3
 8007b26:	f3bf 8f6f 	isb	sy
 8007b2a:	f3bf 8f4f 	dsb	sy
 8007b2e:	607b      	str	r3, [r7, #4]
}
 8007b30:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007b32:	f7fe febd 	bl	80068b0 <xTaskIncrementTick>
 8007b36:	4603      	mov	r3, r0
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d003      	beq.n	8007b44 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007b3c:	4b06      	ldr	r3, [pc, #24]	@ (8007b58 <xPortSysTickHandler+0x40>)
 8007b3e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007b42:	601a      	str	r2, [r3, #0]
 8007b44:	2300      	movs	r3, #0
 8007b46:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007b48:	683b      	ldr	r3, [r7, #0]
 8007b4a:	f383 8811 	msr	BASEPRI, r3
}
 8007b4e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007b50:	bf00      	nop
 8007b52:	3708      	adds	r7, #8
 8007b54:	46bd      	mov	sp, r7
 8007b56:	bd80      	pop	{r7, pc}
 8007b58:	e000ed04 	.word	0xe000ed04

08007b5c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007b5c:	b480      	push	{r7}
 8007b5e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007b60:	4b0b      	ldr	r3, [pc, #44]	@ (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b62:	2200      	movs	r2, #0
 8007b64:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007b66:	4b0b      	ldr	r3, [pc, #44]	@ (8007b94 <vPortSetupTimerInterrupt+0x38>)
 8007b68:	2200      	movs	r2, #0
 8007b6a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007b6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007b98 <vPortSetupTimerInterrupt+0x3c>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4a0a      	ldr	r2, [pc, #40]	@ (8007b9c <vPortSetupTimerInterrupt+0x40>)
 8007b72:	fba2 2303 	umull	r2, r3, r2, r3
 8007b76:	099b      	lsrs	r3, r3, #6
 8007b78:	4a09      	ldr	r2, [pc, #36]	@ (8007ba0 <vPortSetupTimerInterrupt+0x44>)
 8007b7a:	3b01      	subs	r3, #1
 8007b7c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007b7e:	4b04      	ldr	r3, [pc, #16]	@ (8007b90 <vPortSetupTimerInterrupt+0x34>)
 8007b80:	2207      	movs	r2, #7
 8007b82:	601a      	str	r2, [r3, #0]
}
 8007b84:	bf00      	nop
 8007b86:	46bd      	mov	sp, r7
 8007b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b8c:	4770      	bx	lr
 8007b8e:	bf00      	nop
 8007b90:	e000e010 	.word	0xe000e010
 8007b94:	e000e018 	.word	0xe000e018
 8007b98:	20000000 	.word	0x20000000
 8007b9c:	10624dd3 	.word	0x10624dd3
 8007ba0:	e000e014 	.word	0xe000e014

08007ba4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007ba4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007bb4 <vPortEnableVFP+0x10>
 8007ba8:	6801      	ldr	r1, [r0, #0]
 8007baa:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007bae:	6001      	str	r1, [r0, #0]
 8007bb0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007bb2:	bf00      	nop
 8007bb4:	e000ed88 	.word	0xe000ed88

08007bb8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007bb8:	b480      	push	{r7}
 8007bba:	b085      	sub	sp, #20
 8007bbc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007bbe:	f3ef 8305 	mrs	r3, IPSR
 8007bc2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007bc4:	68fb      	ldr	r3, [r7, #12]
 8007bc6:	2b0f      	cmp	r3, #15
 8007bc8:	d915      	bls.n	8007bf6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007bca:	4a18      	ldr	r2, [pc, #96]	@ (8007c2c <vPortValidateInterruptPriority+0x74>)
 8007bcc:	68fb      	ldr	r3, [r7, #12]
 8007bce:	4413      	add	r3, r2
 8007bd0:	781b      	ldrb	r3, [r3, #0]
 8007bd2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007bd4:	4b16      	ldr	r3, [pc, #88]	@ (8007c30 <vPortValidateInterruptPriority+0x78>)
 8007bd6:	781b      	ldrb	r3, [r3, #0]
 8007bd8:	7afa      	ldrb	r2, [r7, #11]
 8007bda:	429a      	cmp	r2, r3
 8007bdc:	d20b      	bcs.n	8007bf6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007bde:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007be2:	f383 8811 	msr	BASEPRI, r3
 8007be6:	f3bf 8f6f 	isb	sy
 8007bea:	f3bf 8f4f 	dsb	sy
 8007bee:	607b      	str	r3, [r7, #4]
}
 8007bf0:	bf00      	nop
 8007bf2:	bf00      	nop
 8007bf4:	e7fd      	b.n	8007bf2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007bf6:	4b0f      	ldr	r3, [pc, #60]	@ (8007c34 <vPortValidateInterruptPriority+0x7c>)
 8007bf8:	681b      	ldr	r3, [r3, #0]
 8007bfa:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007bfe:	4b0e      	ldr	r3, [pc, #56]	@ (8007c38 <vPortValidateInterruptPriority+0x80>)
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	429a      	cmp	r2, r3
 8007c04:	d90b      	bls.n	8007c1e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007c06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c0a:	f383 8811 	msr	BASEPRI, r3
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f3bf 8f4f 	dsb	sy
 8007c16:	603b      	str	r3, [r7, #0]
}
 8007c18:	bf00      	nop
 8007c1a:	bf00      	nop
 8007c1c:	e7fd      	b.n	8007c1a <vPortValidateInterruptPriority+0x62>
	}
 8007c1e:	bf00      	nop
 8007c20:	3714      	adds	r7, #20
 8007c22:	46bd      	mov	sp, r7
 8007c24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c28:	4770      	bx	lr
 8007c2a:	bf00      	nop
 8007c2c:	e000e3f0 	.word	0xe000e3f0
 8007c30:	20000f60 	.word	0x20000f60
 8007c34:	e000ed0c 	.word	0xe000ed0c
 8007c38:	20000f64 	.word	0x20000f64

08007c3c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007c3c:	b580      	push	{r7, lr}
 8007c3e:	b08a      	sub	sp, #40	@ 0x28
 8007c40:	af00      	add	r7, sp, #0
 8007c42:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007c44:	2300      	movs	r3, #0
 8007c46:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007c48:	f7fe fd76 	bl	8006738 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007c4c:	4b5c      	ldr	r3, [pc, #368]	@ (8007dc0 <pvPortMalloc+0x184>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	2b00      	cmp	r3, #0
 8007c52:	d101      	bne.n	8007c58 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007c54:	f000 f924 	bl	8007ea0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007c58:	4b5a      	ldr	r3, [pc, #360]	@ (8007dc4 <pvPortMalloc+0x188>)
 8007c5a:	681a      	ldr	r2, [r3, #0]
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4013      	ands	r3, r2
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	f040 8095 	bne.w	8007d90 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007c66:	687b      	ldr	r3, [r7, #4]
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d01e      	beq.n	8007caa <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 8007c6c:	2208      	movs	r2, #8
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	4413      	add	r3, r2
 8007c72:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	f003 0307 	and.w	r3, r3, #7
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d015      	beq.n	8007caa <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	f023 0307 	bic.w	r3, r3, #7
 8007c84:	3308      	adds	r3, #8
 8007c86:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007c88:	687b      	ldr	r3, [r7, #4]
 8007c8a:	f003 0307 	and.w	r3, r3, #7
 8007c8e:	2b00      	cmp	r3, #0
 8007c90:	d00b      	beq.n	8007caa <pvPortMalloc+0x6e>
	__asm volatile
 8007c92:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c96:	f383 8811 	msr	BASEPRI, r3
 8007c9a:	f3bf 8f6f 	isb	sy
 8007c9e:	f3bf 8f4f 	dsb	sy
 8007ca2:	617b      	str	r3, [r7, #20]
}
 8007ca4:	bf00      	nop
 8007ca6:	bf00      	nop
 8007ca8:	e7fd      	b.n	8007ca6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	d06f      	beq.n	8007d90 <pvPortMalloc+0x154>
 8007cb0:	4b45      	ldr	r3, [pc, #276]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	687a      	ldr	r2, [r7, #4]
 8007cb6:	429a      	cmp	r2, r3
 8007cb8:	d86a      	bhi.n	8007d90 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8007cba:	4b44      	ldr	r3, [pc, #272]	@ (8007dcc <pvPortMalloc+0x190>)
 8007cbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8007cbe:	4b43      	ldr	r3, [pc, #268]	@ (8007dcc <pvPortMalloc+0x190>)
 8007cc0:	681b      	ldr	r3, [r3, #0]
 8007cc2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cc4:	e004      	b.n	8007cd0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8007cc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8007cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8007cd0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cd2:	685b      	ldr	r3, [r3, #4]
 8007cd4:	687a      	ldr	r2, [r7, #4]
 8007cd6:	429a      	cmp	r2, r3
 8007cd8:	d903      	bls.n	8007ce2 <pvPortMalloc+0xa6>
 8007cda:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d1f1      	bne.n	8007cc6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007ce2:	4b37      	ldr	r3, [pc, #220]	@ (8007dc0 <pvPortMalloc+0x184>)
 8007ce4:	681b      	ldr	r3, [r3, #0]
 8007ce6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007ce8:	429a      	cmp	r2, r3
 8007cea:	d051      	beq.n	8007d90 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8007cec:	6a3b      	ldr	r3, [r7, #32]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	2208      	movs	r2, #8
 8007cf2:	4413      	add	r3, r2
 8007cf4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007cf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007cf8:	681a      	ldr	r2, [r3, #0]
 8007cfa:	6a3b      	ldr	r3, [r7, #32]
 8007cfc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8007cfe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d00:	685a      	ldr	r2, [r3, #4]
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	1ad2      	subs	r2, r2, r3
 8007d06:	2308      	movs	r3, #8
 8007d08:	005b      	lsls	r3, r3, #1
 8007d0a:	429a      	cmp	r2, r3
 8007d0c:	d920      	bls.n	8007d50 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8007d0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	4413      	add	r3, r2
 8007d14:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d16:	69bb      	ldr	r3, [r7, #24]
 8007d18:	f003 0307 	and.w	r3, r3, #7
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d00b      	beq.n	8007d38 <pvPortMalloc+0xfc>
	__asm volatile
 8007d20:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007d24:	f383 8811 	msr	BASEPRI, r3
 8007d28:	f3bf 8f6f 	isb	sy
 8007d2c:	f3bf 8f4f 	dsb	sy
 8007d30:	613b      	str	r3, [r7, #16]
}
 8007d32:	bf00      	nop
 8007d34:	bf00      	nop
 8007d36:	e7fd      	b.n	8007d34 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007d38:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d3a:	685a      	ldr	r2, [r3, #4]
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	1ad2      	subs	r2, r2, r3
 8007d40:	69bb      	ldr	r3, [r7, #24]
 8007d42:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007d44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d46:	687a      	ldr	r2, [r7, #4]
 8007d48:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8007d4a:	69b8      	ldr	r0, [r7, #24]
 8007d4c:	f000 f90a 	bl	8007f64 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007d50:	4b1d      	ldr	r3, [pc, #116]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d52:	681a      	ldr	r2, [r3, #0]
 8007d54:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d56:	685b      	ldr	r3, [r3, #4]
 8007d58:	1ad3      	subs	r3, r2, r3
 8007d5a:	4a1b      	ldr	r2, [pc, #108]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d5c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8007d5e:	4b1a      	ldr	r3, [pc, #104]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d60:	681a      	ldr	r2, [r3, #0]
 8007d62:	4b1b      	ldr	r3, [pc, #108]	@ (8007dd0 <pvPortMalloc+0x194>)
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	429a      	cmp	r2, r3
 8007d68:	d203      	bcs.n	8007d72 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8007d6a:	4b17      	ldr	r3, [pc, #92]	@ (8007dc8 <pvPortMalloc+0x18c>)
 8007d6c:	681b      	ldr	r3, [r3, #0]
 8007d6e:	4a18      	ldr	r2, [pc, #96]	@ (8007dd0 <pvPortMalloc+0x194>)
 8007d70:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d74:	685a      	ldr	r2, [r3, #4]
 8007d76:	4b13      	ldr	r3, [pc, #76]	@ (8007dc4 <pvPortMalloc+0x188>)
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	431a      	orrs	r2, r3
 8007d7c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d7e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007d80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007d82:	2200      	movs	r2, #0
 8007d84:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007d86:	4b13      	ldr	r3, [pc, #76]	@ (8007dd4 <pvPortMalloc+0x198>)
 8007d88:	681b      	ldr	r3, [r3, #0]
 8007d8a:	3301      	adds	r3, #1
 8007d8c:	4a11      	ldr	r2, [pc, #68]	@ (8007dd4 <pvPortMalloc+0x198>)
 8007d8e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007d90:	f7fe fce0 	bl	8006754 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007d94:	69fb      	ldr	r3, [r7, #28]
 8007d96:	f003 0307 	and.w	r3, r3, #7
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d00b      	beq.n	8007db6 <pvPortMalloc+0x17a>
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	60fb      	str	r3, [r7, #12]
}
 8007db0:	bf00      	nop
 8007db2:	bf00      	nop
 8007db4:	e7fd      	b.n	8007db2 <pvPortMalloc+0x176>
	return pvReturn;
 8007db6:	69fb      	ldr	r3, [r7, #28]
}
 8007db8:	4618      	mov	r0, r3
 8007dba:	3728      	adds	r7, #40	@ 0x28
 8007dbc:	46bd      	mov	sp, r7
 8007dbe:	bd80      	pop	{r7, pc}
 8007dc0:	20004b70 	.word	0x20004b70
 8007dc4:	20004b84 	.word	0x20004b84
 8007dc8:	20004b74 	.word	0x20004b74
 8007dcc:	20004b68 	.word	0x20004b68
 8007dd0:	20004b78 	.word	0x20004b78
 8007dd4:	20004b7c 	.word	0x20004b7c

08007dd8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8007dd8:	b580      	push	{r7, lr}
 8007dda:	b086      	sub	sp, #24
 8007ddc:	af00      	add	r7, sp, #0
 8007dde:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	d04f      	beq.n	8007e8a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8007dea:	2308      	movs	r3, #8
 8007dec:	425b      	negs	r3, r3
 8007dee:	697a      	ldr	r2, [r7, #20]
 8007df0:	4413      	add	r3, r2
 8007df2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007df4:	697b      	ldr	r3, [r7, #20]
 8007df6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007df8:	693b      	ldr	r3, [r7, #16]
 8007dfa:	685a      	ldr	r2, [r3, #4]
 8007dfc:	4b25      	ldr	r3, [pc, #148]	@ (8007e94 <vPortFree+0xbc>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4013      	ands	r3, r2
 8007e02:	2b00      	cmp	r3, #0
 8007e04:	d10b      	bne.n	8007e1e <vPortFree+0x46>
	__asm volatile
 8007e06:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0a:	f383 8811 	msr	BASEPRI, r3
 8007e0e:	f3bf 8f6f 	isb	sy
 8007e12:	f3bf 8f4f 	dsb	sy
 8007e16:	60fb      	str	r3, [r7, #12]
}
 8007e18:	bf00      	nop
 8007e1a:	bf00      	nop
 8007e1c:	e7fd      	b.n	8007e1a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8007e1e:	693b      	ldr	r3, [r7, #16]
 8007e20:	681b      	ldr	r3, [r3, #0]
 8007e22:	2b00      	cmp	r3, #0
 8007e24:	d00b      	beq.n	8007e3e <vPortFree+0x66>
	__asm volatile
 8007e26:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e2a:	f383 8811 	msr	BASEPRI, r3
 8007e2e:	f3bf 8f6f 	isb	sy
 8007e32:	f3bf 8f4f 	dsb	sy
 8007e36:	60bb      	str	r3, [r7, #8]
}
 8007e38:	bf00      	nop
 8007e3a:	bf00      	nop
 8007e3c:	e7fd      	b.n	8007e3a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	685a      	ldr	r2, [r3, #4]
 8007e42:	4b14      	ldr	r3, [pc, #80]	@ (8007e94 <vPortFree+0xbc>)
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	4013      	ands	r3, r2
 8007e48:	2b00      	cmp	r3, #0
 8007e4a:	d01e      	beq.n	8007e8a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8007e4c:	693b      	ldr	r3, [r7, #16]
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	2b00      	cmp	r3, #0
 8007e52:	d11a      	bne.n	8007e8a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007e54:	693b      	ldr	r3, [r7, #16]
 8007e56:	685a      	ldr	r2, [r3, #4]
 8007e58:	4b0e      	ldr	r3, [pc, #56]	@ (8007e94 <vPortFree+0xbc>)
 8007e5a:	681b      	ldr	r3, [r3, #0]
 8007e5c:	43db      	mvns	r3, r3
 8007e5e:	401a      	ands	r2, r3
 8007e60:	693b      	ldr	r3, [r7, #16]
 8007e62:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007e64:	f7fe fc68 	bl	8006738 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007e68:	693b      	ldr	r3, [r7, #16]
 8007e6a:	685a      	ldr	r2, [r3, #4]
 8007e6c:	4b0a      	ldr	r3, [pc, #40]	@ (8007e98 <vPortFree+0xc0>)
 8007e6e:	681b      	ldr	r3, [r3, #0]
 8007e70:	4413      	add	r3, r2
 8007e72:	4a09      	ldr	r2, [pc, #36]	@ (8007e98 <vPortFree+0xc0>)
 8007e74:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007e76:	6938      	ldr	r0, [r7, #16]
 8007e78:	f000 f874 	bl	8007f64 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8007e7c:	4b07      	ldr	r3, [pc, #28]	@ (8007e9c <vPortFree+0xc4>)
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	3301      	adds	r3, #1
 8007e82:	4a06      	ldr	r2, [pc, #24]	@ (8007e9c <vPortFree+0xc4>)
 8007e84:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007e86:	f7fe fc65 	bl	8006754 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8007e8a:	bf00      	nop
 8007e8c:	3718      	adds	r7, #24
 8007e8e:	46bd      	mov	sp, r7
 8007e90:	bd80      	pop	{r7, pc}
 8007e92:	bf00      	nop
 8007e94:	20004b84 	.word	0x20004b84
 8007e98:	20004b74 	.word	0x20004b74
 8007e9c:	20004b80 	.word	0x20004b80

08007ea0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b085      	sub	sp, #20
 8007ea4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007ea6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 8007eaa:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 8007eac:	4b27      	ldr	r3, [pc, #156]	@ (8007f4c <prvHeapInit+0xac>)
 8007eae:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8007eb0:	68fb      	ldr	r3, [r7, #12]
 8007eb2:	f003 0307 	and.w	r3, r3, #7
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d00c      	beq.n	8007ed4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 8007eba:	68fb      	ldr	r3, [r7, #12]
 8007ebc:	3307      	adds	r3, #7
 8007ebe:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ec0:	68fb      	ldr	r3, [r7, #12]
 8007ec2:	f023 0307 	bic.w	r3, r3, #7
 8007ec6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8007ec8:	68ba      	ldr	r2, [r7, #8]
 8007eca:	68fb      	ldr	r3, [r7, #12]
 8007ecc:	1ad3      	subs	r3, r2, r3
 8007ece:	4a1f      	ldr	r2, [pc, #124]	@ (8007f4c <prvHeapInit+0xac>)
 8007ed0:	4413      	add	r3, r2
 8007ed2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8007ed4:	68fb      	ldr	r3, [r7, #12]
 8007ed6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8007ed8:	4a1d      	ldr	r2, [pc, #116]	@ (8007f50 <prvHeapInit+0xb0>)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8007ede:	4b1c      	ldr	r3, [pc, #112]	@ (8007f50 <prvHeapInit+0xb0>)
 8007ee0:	2200      	movs	r2, #0
 8007ee2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	68ba      	ldr	r2, [r7, #8]
 8007ee8:	4413      	add	r3, r2
 8007eea:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 8007eec:	2208      	movs	r2, #8
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	1a9b      	subs	r3, r3, r2
 8007ef2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	f023 0307 	bic.w	r3, r3, #7
 8007efa:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 8007efc:	68fb      	ldr	r3, [r7, #12]
 8007efe:	4a15      	ldr	r2, [pc, #84]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f00:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007f02:	4b14      	ldr	r3, [pc, #80]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f04:	681b      	ldr	r3, [r3, #0]
 8007f06:	2200      	movs	r2, #0
 8007f08:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 8007f0a:	4b12      	ldr	r3, [pc, #72]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f0c:	681b      	ldr	r3, [r3, #0]
 8007f0e:	2200      	movs	r2, #0
 8007f10:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007f16:	683b      	ldr	r3, [r7, #0]
 8007f18:	68fa      	ldr	r2, [r7, #12]
 8007f1a:	1ad2      	subs	r2, r2, r3
 8007f1c:	683b      	ldr	r3, [r7, #0]
 8007f1e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007f20:	4b0c      	ldr	r3, [pc, #48]	@ (8007f54 <prvHeapInit+0xb4>)
 8007f22:	681a      	ldr	r2, [r3, #0]
 8007f24:	683b      	ldr	r3, [r7, #0]
 8007f26:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f28:	683b      	ldr	r3, [r7, #0]
 8007f2a:	685b      	ldr	r3, [r3, #4]
 8007f2c:	4a0a      	ldr	r2, [pc, #40]	@ (8007f58 <prvHeapInit+0xb8>)
 8007f2e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007f30:	683b      	ldr	r3, [r7, #0]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	4a09      	ldr	r2, [pc, #36]	@ (8007f5c <prvHeapInit+0xbc>)
 8007f36:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007f38:	4b09      	ldr	r3, [pc, #36]	@ (8007f60 <prvHeapInit+0xc0>)
 8007f3a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 8007f3e:	601a      	str	r2, [r3, #0]
}
 8007f40:	bf00      	nop
 8007f42:	3714      	adds	r7, #20
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr
 8007f4c:	20000f68 	.word	0x20000f68
 8007f50:	20004b68 	.word	0x20004b68
 8007f54:	20004b70 	.word	0x20004b70
 8007f58:	20004b78 	.word	0x20004b78
 8007f5c:	20004b74 	.word	0x20004b74
 8007f60:	20004b84 	.word	0x20004b84

08007f64 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007f64:	b480      	push	{r7}
 8007f66:	b085      	sub	sp, #20
 8007f68:	af00      	add	r7, sp, #0
 8007f6a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8007f6c:	4b28      	ldr	r3, [pc, #160]	@ (8008010 <prvInsertBlockIntoFreeList+0xac>)
 8007f6e:	60fb      	str	r3, [r7, #12]
 8007f70:	e002      	b.n	8007f78 <prvInsertBlockIntoFreeList+0x14>
 8007f72:	68fb      	ldr	r3, [r7, #12]
 8007f74:	681b      	ldr	r3, [r3, #0]
 8007f76:	60fb      	str	r3, [r7, #12]
 8007f78:	68fb      	ldr	r3, [r7, #12]
 8007f7a:	681b      	ldr	r3, [r3, #0]
 8007f7c:	687a      	ldr	r2, [r7, #4]
 8007f7e:	429a      	cmp	r2, r3
 8007f80:	d8f7      	bhi.n	8007f72 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007f82:	68fb      	ldr	r3, [r7, #12]
 8007f84:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007f86:	68fb      	ldr	r3, [r7, #12]
 8007f88:	685b      	ldr	r3, [r3, #4]
 8007f8a:	68ba      	ldr	r2, [r7, #8]
 8007f8c:	4413      	add	r3, r2
 8007f8e:	687a      	ldr	r2, [r7, #4]
 8007f90:	429a      	cmp	r2, r3
 8007f92:	d108      	bne.n	8007fa6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	685b      	ldr	r3, [r3, #4]
 8007f9c:	441a      	add	r2, r3
 8007f9e:	68fb      	ldr	r3, [r7, #12]
 8007fa0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007fa2:	68fb      	ldr	r3, [r7, #12]
 8007fa4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	685b      	ldr	r3, [r3, #4]
 8007fae:	68ba      	ldr	r2, [r7, #8]
 8007fb0:	441a      	add	r2, r3
 8007fb2:	68fb      	ldr	r3, [r7, #12]
 8007fb4:	681b      	ldr	r3, [r3, #0]
 8007fb6:	429a      	cmp	r2, r3
 8007fb8:	d118      	bne.n	8007fec <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8007fba:	68fb      	ldr	r3, [r7, #12]
 8007fbc:	681a      	ldr	r2, [r3, #0]
 8007fbe:	4b15      	ldr	r3, [pc, #84]	@ (8008014 <prvInsertBlockIntoFreeList+0xb0>)
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	429a      	cmp	r2, r3
 8007fc4:	d00d      	beq.n	8007fe2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8007fc6:	687b      	ldr	r3, [r7, #4]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	68fb      	ldr	r3, [r7, #12]
 8007fcc:	681b      	ldr	r3, [r3, #0]
 8007fce:	685b      	ldr	r3, [r3, #4]
 8007fd0:	441a      	add	r2, r3
 8007fd2:	687b      	ldr	r3, [r7, #4]
 8007fd4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	681a      	ldr	r2, [r3, #0]
 8007fdc:	687b      	ldr	r3, [r7, #4]
 8007fde:	601a      	str	r2, [r3, #0]
 8007fe0:	e008      	b.n	8007ff4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007fe2:	4b0c      	ldr	r3, [pc, #48]	@ (8008014 <prvInsertBlockIntoFreeList+0xb0>)
 8007fe4:	681a      	ldr	r2, [r3, #0]
 8007fe6:	687b      	ldr	r3, [r7, #4]
 8007fe8:	601a      	str	r2, [r3, #0]
 8007fea:	e003      	b.n	8007ff4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007fec:	68fb      	ldr	r3, [r7, #12]
 8007fee:	681a      	ldr	r2, [r3, #0]
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007ff4:	68fa      	ldr	r2, [r7, #12]
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	429a      	cmp	r2, r3
 8007ffa:	d002      	beq.n	8008002 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	687a      	ldr	r2, [r7, #4]
 8008000:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8008002:	bf00      	nop
 8008004:	3714      	adds	r7, #20
 8008006:	46bd      	mov	sp, r7
 8008008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800800c:	4770      	bx	lr
 800800e:	bf00      	nop
 8008010:	20004b68 	.word	0x20004b68
 8008014:	20004b70 	.word	0x20004b70

08008018 <std>:
 8008018:	2300      	movs	r3, #0
 800801a:	b510      	push	{r4, lr}
 800801c:	4604      	mov	r4, r0
 800801e:	e9c0 3300 	strd	r3, r3, [r0]
 8008022:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8008026:	6083      	str	r3, [r0, #8]
 8008028:	8181      	strh	r1, [r0, #12]
 800802a:	6643      	str	r3, [r0, #100]	@ 0x64
 800802c:	81c2      	strh	r2, [r0, #14]
 800802e:	6183      	str	r3, [r0, #24]
 8008030:	4619      	mov	r1, r3
 8008032:	2208      	movs	r2, #8
 8008034:	305c      	adds	r0, #92	@ 0x5c
 8008036:	f000 fa09 	bl	800844c <memset>
 800803a:	4b0d      	ldr	r3, [pc, #52]	@ (8008070 <std+0x58>)
 800803c:	6263      	str	r3, [r4, #36]	@ 0x24
 800803e:	4b0d      	ldr	r3, [pc, #52]	@ (8008074 <std+0x5c>)
 8008040:	62a3      	str	r3, [r4, #40]	@ 0x28
 8008042:	4b0d      	ldr	r3, [pc, #52]	@ (8008078 <std+0x60>)
 8008044:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8008046:	4b0d      	ldr	r3, [pc, #52]	@ (800807c <std+0x64>)
 8008048:	6323      	str	r3, [r4, #48]	@ 0x30
 800804a:	4b0d      	ldr	r3, [pc, #52]	@ (8008080 <std+0x68>)
 800804c:	6224      	str	r4, [r4, #32]
 800804e:	429c      	cmp	r4, r3
 8008050:	d006      	beq.n	8008060 <std+0x48>
 8008052:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8008056:	4294      	cmp	r4, r2
 8008058:	d002      	beq.n	8008060 <std+0x48>
 800805a:	33d0      	adds	r3, #208	@ 0xd0
 800805c:	429c      	cmp	r4, r3
 800805e:	d105      	bne.n	800806c <std+0x54>
 8008060:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008064:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008068:	f000 bac6 	b.w	80085f8 <__retarget_lock_init_recursive>
 800806c:	bd10      	pop	{r4, pc}
 800806e:	bf00      	nop
 8008070:	0800827d 	.word	0x0800827d
 8008074:	0800829f 	.word	0x0800829f
 8008078:	080082d7 	.word	0x080082d7
 800807c:	080082fb 	.word	0x080082fb
 8008080:	20004b88 	.word	0x20004b88

08008084 <stdio_exit_handler>:
 8008084:	4a02      	ldr	r2, [pc, #8]	@ (8008090 <stdio_exit_handler+0xc>)
 8008086:	4903      	ldr	r1, [pc, #12]	@ (8008094 <stdio_exit_handler+0x10>)
 8008088:	4803      	ldr	r0, [pc, #12]	@ (8008098 <stdio_exit_handler+0x14>)
 800808a:	f000 b869 	b.w	8008160 <_fwalk_sglue>
 800808e:	bf00      	nop
 8008090:	20000010 	.word	0x20000010
 8008094:	08008eb1 	.word	0x08008eb1
 8008098:	20000020 	.word	0x20000020

0800809c <cleanup_stdio>:
 800809c:	6841      	ldr	r1, [r0, #4]
 800809e:	4b0c      	ldr	r3, [pc, #48]	@ (80080d0 <cleanup_stdio+0x34>)
 80080a0:	4299      	cmp	r1, r3
 80080a2:	b510      	push	{r4, lr}
 80080a4:	4604      	mov	r4, r0
 80080a6:	d001      	beq.n	80080ac <cleanup_stdio+0x10>
 80080a8:	f000 ff02 	bl	8008eb0 <_fflush_r>
 80080ac:	68a1      	ldr	r1, [r4, #8]
 80080ae:	4b09      	ldr	r3, [pc, #36]	@ (80080d4 <cleanup_stdio+0x38>)
 80080b0:	4299      	cmp	r1, r3
 80080b2:	d002      	beq.n	80080ba <cleanup_stdio+0x1e>
 80080b4:	4620      	mov	r0, r4
 80080b6:	f000 fefb 	bl	8008eb0 <_fflush_r>
 80080ba:	68e1      	ldr	r1, [r4, #12]
 80080bc:	4b06      	ldr	r3, [pc, #24]	@ (80080d8 <cleanup_stdio+0x3c>)
 80080be:	4299      	cmp	r1, r3
 80080c0:	d004      	beq.n	80080cc <cleanup_stdio+0x30>
 80080c2:	4620      	mov	r0, r4
 80080c4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80080c8:	f000 bef2 	b.w	8008eb0 <_fflush_r>
 80080cc:	bd10      	pop	{r4, pc}
 80080ce:	bf00      	nop
 80080d0:	20004b88 	.word	0x20004b88
 80080d4:	20004bf0 	.word	0x20004bf0
 80080d8:	20004c58 	.word	0x20004c58

080080dc <global_stdio_init.part.0>:
 80080dc:	b510      	push	{r4, lr}
 80080de:	4b0b      	ldr	r3, [pc, #44]	@ (800810c <global_stdio_init.part.0+0x30>)
 80080e0:	4c0b      	ldr	r4, [pc, #44]	@ (8008110 <global_stdio_init.part.0+0x34>)
 80080e2:	4a0c      	ldr	r2, [pc, #48]	@ (8008114 <global_stdio_init.part.0+0x38>)
 80080e4:	601a      	str	r2, [r3, #0]
 80080e6:	4620      	mov	r0, r4
 80080e8:	2200      	movs	r2, #0
 80080ea:	2104      	movs	r1, #4
 80080ec:	f7ff ff94 	bl	8008018 <std>
 80080f0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80080f4:	2201      	movs	r2, #1
 80080f6:	2109      	movs	r1, #9
 80080f8:	f7ff ff8e 	bl	8008018 <std>
 80080fc:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8008100:	2202      	movs	r2, #2
 8008102:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008106:	2112      	movs	r1, #18
 8008108:	f7ff bf86 	b.w	8008018 <std>
 800810c:	20004cc0 	.word	0x20004cc0
 8008110:	20004b88 	.word	0x20004b88
 8008114:	08008085 	.word	0x08008085

08008118 <__sfp_lock_acquire>:
 8008118:	4801      	ldr	r0, [pc, #4]	@ (8008120 <__sfp_lock_acquire+0x8>)
 800811a:	f000 ba6e 	b.w	80085fa <__retarget_lock_acquire_recursive>
 800811e:	bf00      	nop
 8008120:	20004cc9 	.word	0x20004cc9

08008124 <__sfp_lock_release>:
 8008124:	4801      	ldr	r0, [pc, #4]	@ (800812c <__sfp_lock_release+0x8>)
 8008126:	f000 ba69 	b.w	80085fc <__retarget_lock_release_recursive>
 800812a:	bf00      	nop
 800812c:	20004cc9 	.word	0x20004cc9

08008130 <__sinit>:
 8008130:	b510      	push	{r4, lr}
 8008132:	4604      	mov	r4, r0
 8008134:	f7ff fff0 	bl	8008118 <__sfp_lock_acquire>
 8008138:	6a23      	ldr	r3, [r4, #32]
 800813a:	b11b      	cbz	r3, 8008144 <__sinit+0x14>
 800813c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008140:	f7ff bff0 	b.w	8008124 <__sfp_lock_release>
 8008144:	4b04      	ldr	r3, [pc, #16]	@ (8008158 <__sinit+0x28>)
 8008146:	6223      	str	r3, [r4, #32]
 8008148:	4b04      	ldr	r3, [pc, #16]	@ (800815c <__sinit+0x2c>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	2b00      	cmp	r3, #0
 800814e:	d1f5      	bne.n	800813c <__sinit+0xc>
 8008150:	f7ff ffc4 	bl	80080dc <global_stdio_init.part.0>
 8008154:	e7f2      	b.n	800813c <__sinit+0xc>
 8008156:	bf00      	nop
 8008158:	0800809d 	.word	0x0800809d
 800815c:	20004cc0 	.word	0x20004cc0

08008160 <_fwalk_sglue>:
 8008160:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008164:	4607      	mov	r7, r0
 8008166:	4688      	mov	r8, r1
 8008168:	4614      	mov	r4, r2
 800816a:	2600      	movs	r6, #0
 800816c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008170:	f1b9 0901 	subs.w	r9, r9, #1
 8008174:	d505      	bpl.n	8008182 <_fwalk_sglue+0x22>
 8008176:	6824      	ldr	r4, [r4, #0]
 8008178:	2c00      	cmp	r4, #0
 800817a:	d1f7      	bne.n	800816c <_fwalk_sglue+0xc>
 800817c:	4630      	mov	r0, r6
 800817e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008182:	89ab      	ldrh	r3, [r5, #12]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d907      	bls.n	8008198 <_fwalk_sglue+0x38>
 8008188:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800818c:	3301      	adds	r3, #1
 800818e:	d003      	beq.n	8008198 <_fwalk_sglue+0x38>
 8008190:	4629      	mov	r1, r5
 8008192:	4638      	mov	r0, r7
 8008194:	47c0      	blx	r8
 8008196:	4306      	orrs	r6, r0
 8008198:	3568      	adds	r5, #104	@ 0x68
 800819a:	e7e9      	b.n	8008170 <_fwalk_sglue+0x10>

0800819c <iprintf>:
 800819c:	b40f      	push	{r0, r1, r2, r3}
 800819e:	b507      	push	{r0, r1, r2, lr}
 80081a0:	4906      	ldr	r1, [pc, #24]	@ (80081bc <iprintf+0x20>)
 80081a2:	ab04      	add	r3, sp, #16
 80081a4:	6808      	ldr	r0, [r1, #0]
 80081a6:	f853 2b04 	ldr.w	r2, [r3], #4
 80081aa:	6881      	ldr	r1, [r0, #8]
 80081ac:	9301      	str	r3, [sp, #4]
 80081ae:	f000 fb57 	bl	8008860 <_vfiprintf_r>
 80081b2:	b003      	add	sp, #12
 80081b4:	f85d eb04 	ldr.w	lr, [sp], #4
 80081b8:	b004      	add	sp, #16
 80081ba:	4770      	bx	lr
 80081bc:	2000001c 	.word	0x2000001c

080081c0 <_puts_r>:
 80081c0:	6a03      	ldr	r3, [r0, #32]
 80081c2:	b570      	push	{r4, r5, r6, lr}
 80081c4:	6884      	ldr	r4, [r0, #8]
 80081c6:	4605      	mov	r5, r0
 80081c8:	460e      	mov	r6, r1
 80081ca:	b90b      	cbnz	r3, 80081d0 <_puts_r+0x10>
 80081cc:	f7ff ffb0 	bl	8008130 <__sinit>
 80081d0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081d2:	07db      	lsls	r3, r3, #31
 80081d4:	d405      	bmi.n	80081e2 <_puts_r+0x22>
 80081d6:	89a3      	ldrh	r3, [r4, #12]
 80081d8:	0598      	lsls	r0, r3, #22
 80081da:	d402      	bmi.n	80081e2 <_puts_r+0x22>
 80081dc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80081de:	f000 fa0c 	bl	80085fa <__retarget_lock_acquire_recursive>
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	0719      	lsls	r1, r3, #28
 80081e6:	d502      	bpl.n	80081ee <_puts_r+0x2e>
 80081e8:	6923      	ldr	r3, [r4, #16]
 80081ea:	2b00      	cmp	r3, #0
 80081ec:	d135      	bne.n	800825a <_puts_r+0x9a>
 80081ee:	4621      	mov	r1, r4
 80081f0:	4628      	mov	r0, r5
 80081f2:	f000 f8c5 	bl	8008380 <__swsetup_r>
 80081f6:	b380      	cbz	r0, 800825a <_puts_r+0x9a>
 80081f8:	f04f 35ff 	mov.w	r5, #4294967295
 80081fc:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80081fe:	07da      	lsls	r2, r3, #31
 8008200:	d405      	bmi.n	800820e <_puts_r+0x4e>
 8008202:	89a3      	ldrh	r3, [r4, #12]
 8008204:	059b      	lsls	r3, r3, #22
 8008206:	d402      	bmi.n	800820e <_puts_r+0x4e>
 8008208:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800820a:	f000 f9f7 	bl	80085fc <__retarget_lock_release_recursive>
 800820e:	4628      	mov	r0, r5
 8008210:	bd70      	pop	{r4, r5, r6, pc}
 8008212:	2b00      	cmp	r3, #0
 8008214:	da04      	bge.n	8008220 <_puts_r+0x60>
 8008216:	69a2      	ldr	r2, [r4, #24]
 8008218:	429a      	cmp	r2, r3
 800821a:	dc17      	bgt.n	800824c <_puts_r+0x8c>
 800821c:	290a      	cmp	r1, #10
 800821e:	d015      	beq.n	800824c <_puts_r+0x8c>
 8008220:	6823      	ldr	r3, [r4, #0]
 8008222:	1c5a      	adds	r2, r3, #1
 8008224:	6022      	str	r2, [r4, #0]
 8008226:	7019      	strb	r1, [r3, #0]
 8008228:	68a3      	ldr	r3, [r4, #8]
 800822a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800822e:	3b01      	subs	r3, #1
 8008230:	60a3      	str	r3, [r4, #8]
 8008232:	2900      	cmp	r1, #0
 8008234:	d1ed      	bne.n	8008212 <_puts_r+0x52>
 8008236:	2b00      	cmp	r3, #0
 8008238:	da11      	bge.n	800825e <_puts_r+0x9e>
 800823a:	4622      	mov	r2, r4
 800823c:	210a      	movs	r1, #10
 800823e:	4628      	mov	r0, r5
 8008240:	f000 f85f 	bl	8008302 <__swbuf_r>
 8008244:	3001      	adds	r0, #1
 8008246:	d0d7      	beq.n	80081f8 <_puts_r+0x38>
 8008248:	250a      	movs	r5, #10
 800824a:	e7d7      	b.n	80081fc <_puts_r+0x3c>
 800824c:	4622      	mov	r2, r4
 800824e:	4628      	mov	r0, r5
 8008250:	f000 f857 	bl	8008302 <__swbuf_r>
 8008254:	3001      	adds	r0, #1
 8008256:	d1e7      	bne.n	8008228 <_puts_r+0x68>
 8008258:	e7ce      	b.n	80081f8 <_puts_r+0x38>
 800825a:	3e01      	subs	r6, #1
 800825c:	e7e4      	b.n	8008228 <_puts_r+0x68>
 800825e:	6823      	ldr	r3, [r4, #0]
 8008260:	1c5a      	adds	r2, r3, #1
 8008262:	6022      	str	r2, [r4, #0]
 8008264:	220a      	movs	r2, #10
 8008266:	701a      	strb	r2, [r3, #0]
 8008268:	e7ee      	b.n	8008248 <_puts_r+0x88>
	...

0800826c <puts>:
 800826c:	4b02      	ldr	r3, [pc, #8]	@ (8008278 <puts+0xc>)
 800826e:	4601      	mov	r1, r0
 8008270:	6818      	ldr	r0, [r3, #0]
 8008272:	f7ff bfa5 	b.w	80081c0 <_puts_r>
 8008276:	bf00      	nop
 8008278:	2000001c 	.word	0x2000001c

0800827c <__sread>:
 800827c:	b510      	push	{r4, lr}
 800827e:	460c      	mov	r4, r1
 8008280:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008284:	f000 f96a 	bl	800855c <_read_r>
 8008288:	2800      	cmp	r0, #0
 800828a:	bfab      	itete	ge
 800828c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800828e:	89a3      	ldrhlt	r3, [r4, #12]
 8008290:	181b      	addge	r3, r3, r0
 8008292:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008296:	bfac      	ite	ge
 8008298:	6563      	strge	r3, [r4, #84]	@ 0x54
 800829a:	81a3      	strhlt	r3, [r4, #12]
 800829c:	bd10      	pop	{r4, pc}

0800829e <__swrite>:
 800829e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80082a2:	461f      	mov	r7, r3
 80082a4:	898b      	ldrh	r3, [r1, #12]
 80082a6:	05db      	lsls	r3, r3, #23
 80082a8:	4605      	mov	r5, r0
 80082aa:	460c      	mov	r4, r1
 80082ac:	4616      	mov	r6, r2
 80082ae:	d505      	bpl.n	80082bc <__swrite+0x1e>
 80082b0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082b4:	2302      	movs	r3, #2
 80082b6:	2200      	movs	r2, #0
 80082b8:	f000 f93e 	bl	8008538 <_lseek_r>
 80082bc:	89a3      	ldrh	r3, [r4, #12]
 80082be:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80082c2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80082c6:	81a3      	strh	r3, [r4, #12]
 80082c8:	4632      	mov	r2, r6
 80082ca:	463b      	mov	r3, r7
 80082cc:	4628      	mov	r0, r5
 80082ce:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80082d2:	f000 b955 	b.w	8008580 <_write_r>

080082d6 <__sseek>:
 80082d6:	b510      	push	{r4, lr}
 80082d8:	460c      	mov	r4, r1
 80082da:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082de:	f000 f92b 	bl	8008538 <_lseek_r>
 80082e2:	1c43      	adds	r3, r0, #1
 80082e4:	89a3      	ldrh	r3, [r4, #12]
 80082e6:	bf15      	itete	ne
 80082e8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80082ea:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80082ee:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80082f2:	81a3      	strheq	r3, [r4, #12]
 80082f4:	bf18      	it	ne
 80082f6:	81a3      	strhne	r3, [r4, #12]
 80082f8:	bd10      	pop	{r4, pc}

080082fa <__sclose>:
 80082fa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80082fe:	f000 b8ad 	b.w	800845c <_close_r>

08008302 <__swbuf_r>:
 8008302:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008304:	460e      	mov	r6, r1
 8008306:	4614      	mov	r4, r2
 8008308:	4605      	mov	r5, r0
 800830a:	b118      	cbz	r0, 8008314 <__swbuf_r+0x12>
 800830c:	6a03      	ldr	r3, [r0, #32]
 800830e:	b90b      	cbnz	r3, 8008314 <__swbuf_r+0x12>
 8008310:	f7ff ff0e 	bl	8008130 <__sinit>
 8008314:	69a3      	ldr	r3, [r4, #24]
 8008316:	60a3      	str	r3, [r4, #8]
 8008318:	89a3      	ldrh	r3, [r4, #12]
 800831a:	071a      	lsls	r2, r3, #28
 800831c:	d501      	bpl.n	8008322 <__swbuf_r+0x20>
 800831e:	6923      	ldr	r3, [r4, #16]
 8008320:	b943      	cbnz	r3, 8008334 <__swbuf_r+0x32>
 8008322:	4621      	mov	r1, r4
 8008324:	4628      	mov	r0, r5
 8008326:	f000 f82b 	bl	8008380 <__swsetup_r>
 800832a:	b118      	cbz	r0, 8008334 <__swbuf_r+0x32>
 800832c:	f04f 37ff 	mov.w	r7, #4294967295
 8008330:	4638      	mov	r0, r7
 8008332:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008334:	6823      	ldr	r3, [r4, #0]
 8008336:	6922      	ldr	r2, [r4, #16]
 8008338:	1a98      	subs	r0, r3, r2
 800833a:	6963      	ldr	r3, [r4, #20]
 800833c:	b2f6      	uxtb	r6, r6
 800833e:	4283      	cmp	r3, r0
 8008340:	4637      	mov	r7, r6
 8008342:	dc05      	bgt.n	8008350 <__swbuf_r+0x4e>
 8008344:	4621      	mov	r1, r4
 8008346:	4628      	mov	r0, r5
 8008348:	f000 fdb2 	bl	8008eb0 <_fflush_r>
 800834c:	2800      	cmp	r0, #0
 800834e:	d1ed      	bne.n	800832c <__swbuf_r+0x2a>
 8008350:	68a3      	ldr	r3, [r4, #8]
 8008352:	3b01      	subs	r3, #1
 8008354:	60a3      	str	r3, [r4, #8]
 8008356:	6823      	ldr	r3, [r4, #0]
 8008358:	1c5a      	adds	r2, r3, #1
 800835a:	6022      	str	r2, [r4, #0]
 800835c:	701e      	strb	r6, [r3, #0]
 800835e:	6962      	ldr	r2, [r4, #20]
 8008360:	1c43      	adds	r3, r0, #1
 8008362:	429a      	cmp	r2, r3
 8008364:	d004      	beq.n	8008370 <__swbuf_r+0x6e>
 8008366:	89a3      	ldrh	r3, [r4, #12]
 8008368:	07db      	lsls	r3, r3, #31
 800836a:	d5e1      	bpl.n	8008330 <__swbuf_r+0x2e>
 800836c:	2e0a      	cmp	r6, #10
 800836e:	d1df      	bne.n	8008330 <__swbuf_r+0x2e>
 8008370:	4621      	mov	r1, r4
 8008372:	4628      	mov	r0, r5
 8008374:	f000 fd9c 	bl	8008eb0 <_fflush_r>
 8008378:	2800      	cmp	r0, #0
 800837a:	d0d9      	beq.n	8008330 <__swbuf_r+0x2e>
 800837c:	e7d6      	b.n	800832c <__swbuf_r+0x2a>
	...

08008380 <__swsetup_r>:
 8008380:	b538      	push	{r3, r4, r5, lr}
 8008382:	4b29      	ldr	r3, [pc, #164]	@ (8008428 <__swsetup_r+0xa8>)
 8008384:	4605      	mov	r5, r0
 8008386:	6818      	ldr	r0, [r3, #0]
 8008388:	460c      	mov	r4, r1
 800838a:	b118      	cbz	r0, 8008394 <__swsetup_r+0x14>
 800838c:	6a03      	ldr	r3, [r0, #32]
 800838e:	b90b      	cbnz	r3, 8008394 <__swsetup_r+0x14>
 8008390:	f7ff fece 	bl	8008130 <__sinit>
 8008394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008398:	0719      	lsls	r1, r3, #28
 800839a:	d422      	bmi.n	80083e2 <__swsetup_r+0x62>
 800839c:	06da      	lsls	r2, r3, #27
 800839e:	d407      	bmi.n	80083b0 <__swsetup_r+0x30>
 80083a0:	2209      	movs	r2, #9
 80083a2:	602a      	str	r2, [r5, #0]
 80083a4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80083a8:	81a3      	strh	r3, [r4, #12]
 80083aa:	f04f 30ff 	mov.w	r0, #4294967295
 80083ae:	e033      	b.n	8008418 <__swsetup_r+0x98>
 80083b0:	0758      	lsls	r0, r3, #29
 80083b2:	d512      	bpl.n	80083da <__swsetup_r+0x5a>
 80083b4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80083b6:	b141      	cbz	r1, 80083ca <__swsetup_r+0x4a>
 80083b8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80083bc:	4299      	cmp	r1, r3
 80083be:	d002      	beq.n	80083c6 <__swsetup_r+0x46>
 80083c0:	4628      	mov	r0, r5
 80083c2:	f000 f92b 	bl	800861c <_free_r>
 80083c6:	2300      	movs	r3, #0
 80083c8:	6363      	str	r3, [r4, #52]	@ 0x34
 80083ca:	89a3      	ldrh	r3, [r4, #12]
 80083cc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80083d0:	81a3      	strh	r3, [r4, #12]
 80083d2:	2300      	movs	r3, #0
 80083d4:	6063      	str	r3, [r4, #4]
 80083d6:	6923      	ldr	r3, [r4, #16]
 80083d8:	6023      	str	r3, [r4, #0]
 80083da:	89a3      	ldrh	r3, [r4, #12]
 80083dc:	f043 0308 	orr.w	r3, r3, #8
 80083e0:	81a3      	strh	r3, [r4, #12]
 80083e2:	6923      	ldr	r3, [r4, #16]
 80083e4:	b94b      	cbnz	r3, 80083fa <__swsetup_r+0x7a>
 80083e6:	89a3      	ldrh	r3, [r4, #12]
 80083e8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 80083ec:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 80083f0:	d003      	beq.n	80083fa <__swsetup_r+0x7a>
 80083f2:	4621      	mov	r1, r4
 80083f4:	4628      	mov	r0, r5
 80083f6:	f000 fda9 	bl	8008f4c <__smakebuf_r>
 80083fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80083fe:	f013 0201 	ands.w	r2, r3, #1
 8008402:	d00a      	beq.n	800841a <__swsetup_r+0x9a>
 8008404:	2200      	movs	r2, #0
 8008406:	60a2      	str	r2, [r4, #8]
 8008408:	6962      	ldr	r2, [r4, #20]
 800840a:	4252      	negs	r2, r2
 800840c:	61a2      	str	r2, [r4, #24]
 800840e:	6922      	ldr	r2, [r4, #16]
 8008410:	b942      	cbnz	r2, 8008424 <__swsetup_r+0xa4>
 8008412:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8008416:	d1c5      	bne.n	80083a4 <__swsetup_r+0x24>
 8008418:	bd38      	pop	{r3, r4, r5, pc}
 800841a:	0799      	lsls	r1, r3, #30
 800841c:	bf58      	it	pl
 800841e:	6962      	ldrpl	r2, [r4, #20]
 8008420:	60a2      	str	r2, [r4, #8]
 8008422:	e7f4      	b.n	800840e <__swsetup_r+0x8e>
 8008424:	2000      	movs	r0, #0
 8008426:	e7f7      	b.n	8008418 <__swsetup_r+0x98>
 8008428:	2000001c 	.word	0x2000001c

0800842c <memcmp>:
 800842c:	b510      	push	{r4, lr}
 800842e:	3901      	subs	r1, #1
 8008430:	4402      	add	r2, r0
 8008432:	4290      	cmp	r0, r2
 8008434:	d101      	bne.n	800843a <memcmp+0xe>
 8008436:	2000      	movs	r0, #0
 8008438:	e005      	b.n	8008446 <memcmp+0x1a>
 800843a:	7803      	ldrb	r3, [r0, #0]
 800843c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8008440:	42a3      	cmp	r3, r4
 8008442:	d001      	beq.n	8008448 <memcmp+0x1c>
 8008444:	1b18      	subs	r0, r3, r4
 8008446:	bd10      	pop	{r4, pc}
 8008448:	3001      	adds	r0, #1
 800844a:	e7f2      	b.n	8008432 <memcmp+0x6>

0800844c <memset>:
 800844c:	4402      	add	r2, r0
 800844e:	4603      	mov	r3, r0
 8008450:	4293      	cmp	r3, r2
 8008452:	d100      	bne.n	8008456 <memset+0xa>
 8008454:	4770      	bx	lr
 8008456:	f803 1b01 	strb.w	r1, [r3], #1
 800845a:	e7f9      	b.n	8008450 <memset+0x4>

0800845c <_close_r>:
 800845c:	b538      	push	{r3, r4, r5, lr}
 800845e:	4d06      	ldr	r5, [pc, #24]	@ (8008478 <_close_r+0x1c>)
 8008460:	2300      	movs	r3, #0
 8008462:	4604      	mov	r4, r0
 8008464:	4608      	mov	r0, r1
 8008466:	602b      	str	r3, [r5, #0]
 8008468:	f7fa fc01 	bl	8002c6e <_close>
 800846c:	1c43      	adds	r3, r0, #1
 800846e:	d102      	bne.n	8008476 <_close_r+0x1a>
 8008470:	682b      	ldr	r3, [r5, #0]
 8008472:	b103      	cbz	r3, 8008476 <_close_r+0x1a>
 8008474:	6023      	str	r3, [r4, #0]
 8008476:	bd38      	pop	{r3, r4, r5, pc}
 8008478:	20004cc4 	.word	0x20004cc4

0800847c <_reclaim_reent>:
 800847c:	4b2d      	ldr	r3, [pc, #180]	@ (8008534 <_reclaim_reent+0xb8>)
 800847e:	681b      	ldr	r3, [r3, #0]
 8008480:	4283      	cmp	r3, r0
 8008482:	b570      	push	{r4, r5, r6, lr}
 8008484:	4604      	mov	r4, r0
 8008486:	d053      	beq.n	8008530 <_reclaim_reent+0xb4>
 8008488:	69c3      	ldr	r3, [r0, #28]
 800848a:	b31b      	cbz	r3, 80084d4 <_reclaim_reent+0x58>
 800848c:	68db      	ldr	r3, [r3, #12]
 800848e:	b163      	cbz	r3, 80084aa <_reclaim_reent+0x2e>
 8008490:	2500      	movs	r5, #0
 8008492:	69e3      	ldr	r3, [r4, #28]
 8008494:	68db      	ldr	r3, [r3, #12]
 8008496:	5959      	ldr	r1, [r3, r5]
 8008498:	b9b1      	cbnz	r1, 80084c8 <_reclaim_reent+0x4c>
 800849a:	3504      	adds	r5, #4
 800849c:	2d80      	cmp	r5, #128	@ 0x80
 800849e:	d1f8      	bne.n	8008492 <_reclaim_reent+0x16>
 80084a0:	69e3      	ldr	r3, [r4, #28]
 80084a2:	4620      	mov	r0, r4
 80084a4:	68d9      	ldr	r1, [r3, #12]
 80084a6:	f000 f8b9 	bl	800861c <_free_r>
 80084aa:	69e3      	ldr	r3, [r4, #28]
 80084ac:	6819      	ldr	r1, [r3, #0]
 80084ae:	b111      	cbz	r1, 80084b6 <_reclaim_reent+0x3a>
 80084b0:	4620      	mov	r0, r4
 80084b2:	f000 f8b3 	bl	800861c <_free_r>
 80084b6:	69e3      	ldr	r3, [r4, #28]
 80084b8:	689d      	ldr	r5, [r3, #8]
 80084ba:	b15d      	cbz	r5, 80084d4 <_reclaim_reent+0x58>
 80084bc:	4629      	mov	r1, r5
 80084be:	4620      	mov	r0, r4
 80084c0:	682d      	ldr	r5, [r5, #0]
 80084c2:	f000 f8ab 	bl	800861c <_free_r>
 80084c6:	e7f8      	b.n	80084ba <_reclaim_reent+0x3e>
 80084c8:	680e      	ldr	r6, [r1, #0]
 80084ca:	4620      	mov	r0, r4
 80084cc:	f000 f8a6 	bl	800861c <_free_r>
 80084d0:	4631      	mov	r1, r6
 80084d2:	e7e1      	b.n	8008498 <_reclaim_reent+0x1c>
 80084d4:	6961      	ldr	r1, [r4, #20]
 80084d6:	b111      	cbz	r1, 80084de <_reclaim_reent+0x62>
 80084d8:	4620      	mov	r0, r4
 80084da:	f000 f89f 	bl	800861c <_free_r>
 80084de:	69e1      	ldr	r1, [r4, #28]
 80084e0:	b111      	cbz	r1, 80084e8 <_reclaim_reent+0x6c>
 80084e2:	4620      	mov	r0, r4
 80084e4:	f000 f89a 	bl	800861c <_free_r>
 80084e8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80084ea:	b111      	cbz	r1, 80084f2 <_reclaim_reent+0x76>
 80084ec:	4620      	mov	r0, r4
 80084ee:	f000 f895 	bl	800861c <_free_r>
 80084f2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80084f4:	b111      	cbz	r1, 80084fc <_reclaim_reent+0x80>
 80084f6:	4620      	mov	r0, r4
 80084f8:	f000 f890 	bl	800861c <_free_r>
 80084fc:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 80084fe:	b111      	cbz	r1, 8008506 <_reclaim_reent+0x8a>
 8008500:	4620      	mov	r0, r4
 8008502:	f000 f88b 	bl	800861c <_free_r>
 8008506:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008508:	b111      	cbz	r1, 8008510 <_reclaim_reent+0x94>
 800850a:	4620      	mov	r0, r4
 800850c:	f000 f886 	bl	800861c <_free_r>
 8008510:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008512:	b111      	cbz	r1, 800851a <_reclaim_reent+0x9e>
 8008514:	4620      	mov	r0, r4
 8008516:	f000 f881 	bl	800861c <_free_r>
 800851a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800851c:	b111      	cbz	r1, 8008524 <_reclaim_reent+0xa8>
 800851e:	4620      	mov	r0, r4
 8008520:	f000 f87c 	bl	800861c <_free_r>
 8008524:	6a23      	ldr	r3, [r4, #32]
 8008526:	b11b      	cbz	r3, 8008530 <_reclaim_reent+0xb4>
 8008528:	4620      	mov	r0, r4
 800852a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800852e:	4718      	bx	r3
 8008530:	bd70      	pop	{r4, r5, r6, pc}
 8008532:	bf00      	nop
 8008534:	2000001c 	.word	0x2000001c

08008538 <_lseek_r>:
 8008538:	b538      	push	{r3, r4, r5, lr}
 800853a:	4d07      	ldr	r5, [pc, #28]	@ (8008558 <_lseek_r+0x20>)
 800853c:	4604      	mov	r4, r0
 800853e:	4608      	mov	r0, r1
 8008540:	4611      	mov	r1, r2
 8008542:	2200      	movs	r2, #0
 8008544:	602a      	str	r2, [r5, #0]
 8008546:	461a      	mov	r2, r3
 8008548:	f7fa fbb8 	bl	8002cbc <_lseek>
 800854c:	1c43      	adds	r3, r0, #1
 800854e:	d102      	bne.n	8008556 <_lseek_r+0x1e>
 8008550:	682b      	ldr	r3, [r5, #0]
 8008552:	b103      	cbz	r3, 8008556 <_lseek_r+0x1e>
 8008554:	6023      	str	r3, [r4, #0]
 8008556:	bd38      	pop	{r3, r4, r5, pc}
 8008558:	20004cc4 	.word	0x20004cc4

0800855c <_read_r>:
 800855c:	b538      	push	{r3, r4, r5, lr}
 800855e:	4d07      	ldr	r5, [pc, #28]	@ (800857c <_read_r+0x20>)
 8008560:	4604      	mov	r4, r0
 8008562:	4608      	mov	r0, r1
 8008564:	4611      	mov	r1, r2
 8008566:	2200      	movs	r2, #0
 8008568:	602a      	str	r2, [r5, #0]
 800856a:	461a      	mov	r2, r3
 800856c:	f7fa fb62 	bl	8002c34 <_read>
 8008570:	1c43      	adds	r3, r0, #1
 8008572:	d102      	bne.n	800857a <_read_r+0x1e>
 8008574:	682b      	ldr	r3, [r5, #0]
 8008576:	b103      	cbz	r3, 800857a <_read_r+0x1e>
 8008578:	6023      	str	r3, [r4, #0]
 800857a:	bd38      	pop	{r3, r4, r5, pc}
 800857c:	20004cc4 	.word	0x20004cc4

08008580 <_write_r>:
 8008580:	b538      	push	{r3, r4, r5, lr}
 8008582:	4d07      	ldr	r5, [pc, #28]	@ (80085a0 <_write_r+0x20>)
 8008584:	4604      	mov	r4, r0
 8008586:	4608      	mov	r0, r1
 8008588:	4611      	mov	r1, r2
 800858a:	2200      	movs	r2, #0
 800858c:	602a      	str	r2, [r5, #0]
 800858e:	461a      	mov	r2, r3
 8008590:	f7f8 fd3c 	bl	800100c <_write>
 8008594:	1c43      	adds	r3, r0, #1
 8008596:	d102      	bne.n	800859e <_write_r+0x1e>
 8008598:	682b      	ldr	r3, [r5, #0]
 800859a:	b103      	cbz	r3, 800859e <_write_r+0x1e>
 800859c:	6023      	str	r3, [r4, #0]
 800859e:	bd38      	pop	{r3, r4, r5, pc}
 80085a0:	20004cc4 	.word	0x20004cc4

080085a4 <__errno>:
 80085a4:	4b01      	ldr	r3, [pc, #4]	@ (80085ac <__errno+0x8>)
 80085a6:	6818      	ldr	r0, [r3, #0]
 80085a8:	4770      	bx	lr
 80085aa:	bf00      	nop
 80085ac:	2000001c 	.word	0x2000001c

080085b0 <__libc_init_array>:
 80085b0:	b570      	push	{r4, r5, r6, lr}
 80085b2:	4d0d      	ldr	r5, [pc, #52]	@ (80085e8 <__libc_init_array+0x38>)
 80085b4:	4c0d      	ldr	r4, [pc, #52]	@ (80085ec <__libc_init_array+0x3c>)
 80085b6:	1b64      	subs	r4, r4, r5
 80085b8:	10a4      	asrs	r4, r4, #2
 80085ba:	2600      	movs	r6, #0
 80085bc:	42a6      	cmp	r6, r4
 80085be:	d109      	bne.n	80085d4 <__libc_init_array+0x24>
 80085c0:	4d0b      	ldr	r5, [pc, #44]	@ (80085f0 <__libc_init_array+0x40>)
 80085c2:	4c0c      	ldr	r4, [pc, #48]	@ (80085f4 <__libc_init_array+0x44>)
 80085c4:	f000 fd30 	bl	8009028 <_init>
 80085c8:	1b64      	subs	r4, r4, r5
 80085ca:	10a4      	asrs	r4, r4, #2
 80085cc:	2600      	movs	r6, #0
 80085ce:	42a6      	cmp	r6, r4
 80085d0:	d105      	bne.n	80085de <__libc_init_array+0x2e>
 80085d2:	bd70      	pop	{r4, r5, r6, pc}
 80085d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80085d8:	4798      	blx	r3
 80085da:	3601      	adds	r6, #1
 80085dc:	e7ee      	b.n	80085bc <__libc_init_array+0xc>
 80085de:	f855 3b04 	ldr.w	r3, [r5], #4
 80085e2:	4798      	blx	r3
 80085e4:	3601      	adds	r6, #1
 80085e6:	e7f2      	b.n	80085ce <__libc_init_array+0x1e>
 80085e8:	0800b854 	.word	0x0800b854
 80085ec:	0800b854 	.word	0x0800b854
 80085f0:	0800b854 	.word	0x0800b854
 80085f4:	0800b858 	.word	0x0800b858

080085f8 <__retarget_lock_init_recursive>:
 80085f8:	4770      	bx	lr

080085fa <__retarget_lock_acquire_recursive>:
 80085fa:	4770      	bx	lr

080085fc <__retarget_lock_release_recursive>:
 80085fc:	4770      	bx	lr

080085fe <memcpy>:
 80085fe:	440a      	add	r2, r1
 8008600:	4291      	cmp	r1, r2
 8008602:	f100 33ff 	add.w	r3, r0, #4294967295
 8008606:	d100      	bne.n	800860a <memcpy+0xc>
 8008608:	4770      	bx	lr
 800860a:	b510      	push	{r4, lr}
 800860c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008610:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008614:	4291      	cmp	r1, r2
 8008616:	d1f9      	bne.n	800860c <memcpy+0xe>
 8008618:	bd10      	pop	{r4, pc}
	...

0800861c <_free_r>:
 800861c:	b538      	push	{r3, r4, r5, lr}
 800861e:	4605      	mov	r5, r0
 8008620:	2900      	cmp	r1, #0
 8008622:	d041      	beq.n	80086a8 <_free_r+0x8c>
 8008624:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008628:	1f0c      	subs	r4, r1, #4
 800862a:	2b00      	cmp	r3, #0
 800862c:	bfb8      	it	lt
 800862e:	18e4      	addlt	r4, r4, r3
 8008630:	f000 f8e0 	bl	80087f4 <__malloc_lock>
 8008634:	4a1d      	ldr	r2, [pc, #116]	@ (80086ac <_free_r+0x90>)
 8008636:	6813      	ldr	r3, [r2, #0]
 8008638:	b933      	cbnz	r3, 8008648 <_free_r+0x2c>
 800863a:	6063      	str	r3, [r4, #4]
 800863c:	6014      	str	r4, [r2, #0]
 800863e:	4628      	mov	r0, r5
 8008640:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008644:	f000 b8dc 	b.w	8008800 <__malloc_unlock>
 8008648:	42a3      	cmp	r3, r4
 800864a:	d908      	bls.n	800865e <_free_r+0x42>
 800864c:	6820      	ldr	r0, [r4, #0]
 800864e:	1821      	adds	r1, r4, r0
 8008650:	428b      	cmp	r3, r1
 8008652:	bf01      	itttt	eq
 8008654:	6819      	ldreq	r1, [r3, #0]
 8008656:	685b      	ldreq	r3, [r3, #4]
 8008658:	1809      	addeq	r1, r1, r0
 800865a:	6021      	streq	r1, [r4, #0]
 800865c:	e7ed      	b.n	800863a <_free_r+0x1e>
 800865e:	461a      	mov	r2, r3
 8008660:	685b      	ldr	r3, [r3, #4]
 8008662:	b10b      	cbz	r3, 8008668 <_free_r+0x4c>
 8008664:	42a3      	cmp	r3, r4
 8008666:	d9fa      	bls.n	800865e <_free_r+0x42>
 8008668:	6811      	ldr	r1, [r2, #0]
 800866a:	1850      	adds	r0, r2, r1
 800866c:	42a0      	cmp	r0, r4
 800866e:	d10b      	bne.n	8008688 <_free_r+0x6c>
 8008670:	6820      	ldr	r0, [r4, #0]
 8008672:	4401      	add	r1, r0
 8008674:	1850      	adds	r0, r2, r1
 8008676:	4283      	cmp	r3, r0
 8008678:	6011      	str	r1, [r2, #0]
 800867a:	d1e0      	bne.n	800863e <_free_r+0x22>
 800867c:	6818      	ldr	r0, [r3, #0]
 800867e:	685b      	ldr	r3, [r3, #4]
 8008680:	6053      	str	r3, [r2, #4]
 8008682:	4408      	add	r0, r1
 8008684:	6010      	str	r0, [r2, #0]
 8008686:	e7da      	b.n	800863e <_free_r+0x22>
 8008688:	d902      	bls.n	8008690 <_free_r+0x74>
 800868a:	230c      	movs	r3, #12
 800868c:	602b      	str	r3, [r5, #0]
 800868e:	e7d6      	b.n	800863e <_free_r+0x22>
 8008690:	6820      	ldr	r0, [r4, #0]
 8008692:	1821      	adds	r1, r4, r0
 8008694:	428b      	cmp	r3, r1
 8008696:	bf04      	itt	eq
 8008698:	6819      	ldreq	r1, [r3, #0]
 800869a:	685b      	ldreq	r3, [r3, #4]
 800869c:	6063      	str	r3, [r4, #4]
 800869e:	bf04      	itt	eq
 80086a0:	1809      	addeq	r1, r1, r0
 80086a2:	6021      	streq	r1, [r4, #0]
 80086a4:	6054      	str	r4, [r2, #4]
 80086a6:	e7ca      	b.n	800863e <_free_r+0x22>
 80086a8:	bd38      	pop	{r3, r4, r5, pc}
 80086aa:	bf00      	nop
 80086ac:	20004cd0 	.word	0x20004cd0

080086b0 <sbrk_aligned>:
 80086b0:	b570      	push	{r4, r5, r6, lr}
 80086b2:	4e0f      	ldr	r6, [pc, #60]	@ (80086f0 <sbrk_aligned+0x40>)
 80086b4:	460c      	mov	r4, r1
 80086b6:	6831      	ldr	r1, [r6, #0]
 80086b8:	4605      	mov	r5, r0
 80086ba:	b911      	cbnz	r1, 80086c2 <sbrk_aligned+0x12>
 80086bc:	f000 fca4 	bl	8009008 <_sbrk_r>
 80086c0:	6030      	str	r0, [r6, #0]
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 fc9f 	bl	8009008 <_sbrk_r>
 80086ca:	1c43      	adds	r3, r0, #1
 80086cc:	d103      	bne.n	80086d6 <sbrk_aligned+0x26>
 80086ce:	f04f 34ff 	mov.w	r4, #4294967295
 80086d2:	4620      	mov	r0, r4
 80086d4:	bd70      	pop	{r4, r5, r6, pc}
 80086d6:	1cc4      	adds	r4, r0, #3
 80086d8:	f024 0403 	bic.w	r4, r4, #3
 80086dc:	42a0      	cmp	r0, r4
 80086de:	d0f8      	beq.n	80086d2 <sbrk_aligned+0x22>
 80086e0:	1a21      	subs	r1, r4, r0
 80086e2:	4628      	mov	r0, r5
 80086e4:	f000 fc90 	bl	8009008 <_sbrk_r>
 80086e8:	3001      	adds	r0, #1
 80086ea:	d1f2      	bne.n	80086d2 <sbrk_aligned+0x22>
 80086ec:	e7ef      	b.n	80086ce <sbrk_aligned+0x1e>
 80086ee:	bf00      	nop
 80086f0:	20004ccc 	.word	0x20004ccc

080086f4 <_malloc_r>:
 80086f4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80086f8:	1ccd      	adds	r5, r1, #3
 80086fa:	f025 0503 	bic.w	r5, r5, #3
 80086fe:	3508      	adds	r5, #8
 8008700:	2d0c      	cmp	r5, #12
 8008702:	bf38      	it	cc
 8008704:	250c      	movcc	r5, #12
 8008706:	2d00      	cmp	r5, #0
 8008708:	4606      	mov	r6, r0
 800870a:	db01      	blt.n	8008710 <_malloc_r+0x1c>
 800870c:	42a9      	cmp	r1, r5
 800870e:	d904      	bls.n	800871a <_malloc_r+0x26>
 8008710:	230c      	movs	r3, #12
 8008712:	6033      	str	r3, [r6, #0]
 8008714:	2000      	movs	r0, #0
 8008716:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800871a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80087f0 <_malloc_r+0xfc>
 800871e:	f000 f869 	bl	80087f4 <__malloc_lock>
 8008722:	f8d8 3000 	ldr.w	r3, [r8]
 8008726:	461c      	mov	r4, r3
 8008728:	bb44      	cbnz	r4, 800877c <_malloc_r+0x88>
 800872a:	4629      	mov	r1, r5
 800872c:	4630      	mov	r0, r6
 800872e:	f7ff ffbf 	bl	80086b0 <sbrk_aligned>
 8008732:	1c43      	adds	r3, r0, #1
 8008734:	4604      	mov	r4, r0
 8008736:	d158      	bne.n	80087ea <_malloc_r+0xf6>
 8008738:	f8d8 4000 	ldr.w	r4, [r8]
 800873c:	4627      	mov	r7, r4
 800873e:	2f00      	cmp	r7, #0
 8008740:	d143      	bne.n	80087ca <_malloc_r+0xd6>
 8008742:	2c00      	cmp	r4, #0
 8008744:	d04b      	beq.n	80087de <_malloc_r+0xea>
 8008746:	6823      	ldr	r3, [r4, #0]
 8008748:	4639      	mov	r1, r7
 800874a:	4630      	mov	r0, r6
 800874c:	eb04 0903 	add.w	r9, r4, r3
 8008750:	f000 fc5a 	bl	8009008 <_sbrk_r>
 8008754:	4581      	cmp	r9, r0
 8008756:	d142      	bne.n	80087de <_malloc_r+0xea>
 8008758:	6821      	ldr	r1, [r4, #0]
 800875a:	1a6d      	subs	r5, r5, r1
 800875c:	4629      	mov	r1, r5
 800875e:	4630      	mov	r0, r6
 8008760:	f7ff ffa6 	bl	80086b0 <sbrk_aligned>
 8008764:	3001      	adds	r0, #1
 8008766:	d03a      	beq.n	80087de <_malloc_r+0xea>
 8008768:	6823      	ldr	r3, [r4, #0]
 800876a:	442b      	add	r3, r5
 800876c:	6023      	str	r3, [r4, #0]
 800876e:	f8d8 3000 	ldr.w	r3, [r8]
 8008772:	685a      	ldr	r2, [r3, #4]
 8008774:	bb62      	cbnz	r2, 80087d0 <_malloc_r+0xdc>
 8008776:	f8c8 7000 	str.w	r7, [r8]
 800877a:	e00f      	b.n	800879c <_malloc_r+0xa8>
 800877c:	6822      	ldr	r2, [r4, #0]
 800877e:	1b52      	subs	r2, r2, r5
 8008780:	d420      	bmi.n	80087c4 <_malloc_r+0xd0>
 8008782:	2a0b      	cmp	r2, #11
 8008784:	d917      	bls.n	80087b6 <_malloc_r+0xc2>
 8008786:	1961      	adds	r1, r4, r5
 8008788:	42a3      	cmp	r3, r4
 800878a:	6025      	str	r5, [r4, #0]
 800878c:	bf18      	it	ne
 800878e:	6059      	strne	r1, [r3, #4]
 8008790:	6863      	ldr	r3, [r4, #4]
 8008792:	bf08      	it	eq
 8008794:	f8c8 1000 	streq.w	r1, [r8]
 8008798:	5162      	str	r2, [r4, r5]
 800879a:	604b      	str	r3, [r1, #4]
 800879c:	4630      	mov	r0, r6
 800879e:	f000 f82f 	bl	8008800 <__malloc_unlock>
 80087a2:	f104 000b 	add.w	r0, r4, #11
 80087a6:	1d23      	adds	r3, r4, #4
 80087a8:	f020 0007 	bic.w	r0, r0, #7
 80087ac:	1ac2      	subs	r2, r0, r3
 80087ae:	bf1c      	itt	ne
 80087b0:	1a1b      	subne	r3, r3, r0
 80087b2:	50a3      	strne	r3, [r4, r2]
 80087b4:	e7af      	b.n	8008716 <_malloc_r+0x22>
 80087b6:	6862      	ldr	r2, [r4, #4]
 80087b8:	42a3      	cmp	r3, r4
 80087ba:	bf0c      	ite	eq
 80087bc:	f8c8 2000 	streq.w	r2, [r8]
 80087c0:	605a      	strne	r2, [r3, #4]
 80087c2:	e7eb      	b.n	800879c <_malloc_r+0xa8>
 80087c4:	4623      	mov	r3, r4
 80087c6:	6864      	ldr	r4, [r4, #4]
 80087c8:	e7ae      	b.n	8008728 <_malloc_r+0x34>
 80087ca:	463c      	mov	r4, r7
 80087cc:	687f      	ldr	r7, [r7, #4]
 80087ce:	e7b6      	b.n	800873e <_malloc_r+0x4a>
 80087d0:	461a      	mov	r2, r3
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	42a3      	cmp	r3, r4
 80087d6:	d1fb      	bne.n	80087d0 <_malloc_r+0xdc>
 80087d8:	2300      	movs	r3, #0
 80087da:	6053      	str	r3, [r2, #4]
 80087dc:	e7de      	b.n	800879c <_malloc_r+0xa8>
 80087de:	230c      	movs	r3, #12
 80087e0:	6033      	str	r3, [r6, #0]
 80087e2:	4630      	mov	r0, r6
 80087e4:	f000 f80c 	bl	8008800 <__malloc_unlock>
 80087e8:	e794      	b.n	8008714 <_malloc_r+0x20>
 80087ea:	6005      	str	r5, [r0, #0]
 80087ec:	e7d6      	b.n	800879c <_malloc_r+0xa8>
 80087ee:	bf00      	nop
 80087f0:	20004cd0 	.word	0x20004cd0

080087f4 <__malloc_lock>:
 80087f4:	4801      	ldr	r0, [pc, #4]	@ (80087fc <__malloc_lock+0x8>)
 80087f6:	f7ff bf00 	b.w	80085fa <__retarget_lock_acquire_recursive>
 80087fa:	bf00      	nop
 80087fc:	20004cc8 	.word	0x20004cc8

08008800 <__malloc_unlock>:
 8008800:	4801      	ldr	r0, [pc, #4]	@ (8008808 <__malloc_unlock+0x8>)
 8008802:	f7ff befb 	b.w	80085fc <__retarget_lock_release_recursive>
 8008806:	bf00      	nop
 8008808:	20004cc8 	.word	0x20004cc8

0800880c <__sfputc_r>:
 800880c:	6893      	ldr	r3, [r2, #8]
 800880e:	3b01      	subs	r3, #1
 8008810:	2b00      	cmp	r3, #0
 8008812:	b410      	push	{r4}
 8008814:	6093      	str	r3, [r2, #8]
 8008816:	da08      	bge.n	800882a <__sfputc_r+0x1e>
 8008818:	6994      	ldr	r4, [r2, #24]
 800881a:	42a3      	cmp	r3, r4
 800881c:	db01      	blt.n	8008822 <__sfputc_r+0x16>
 800881e:	290a      	cmp	r1, #10
 8008820:	d103      	bne.n	800882a <__sfputc_r+0x1e>
 8008822:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008826:	f7ff bd6c 	b.w	8008302 <__swbuf_r>
 800882a:	6813      	ldr	r3, [r2, #0]
 800882c:	1c58      	adds	r0, r3, #1
 800882e:	6010      	str	r0, [r2, #0]
 8008830:	7019      	strb	r1, [r3, #0]
 8008832:	4608      	mov	r0, r1
 8008834:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008838:	4770      	bx	lr

0800883a <__sfputs_r>:
 800883a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800883c:	4606      	mov	r6, r0
 800883e:	460f      	mov	r7, r1
 8008840:	4614      	mov	r4, r2
 8008842:	18d5      	adds	r5, r2, r3
 8008844:	42ac      	cmp	r4, r5
 8008846:	d101      	bne.n	800884c <__sfputs_r+0x12>
 8008848:	2000      	movs	r0, #0
 800884a:	e007      	b.n	800885c <__sfputs_r+0x22>
 800884c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008850:	463a      	mov	r2, r7
 8008852:	4630      	mov	r0, r6
 8008854:	f7ff ffda 	bl	800880c <__sfputc_r>
 8008858:	1c43      	adds	r3, r0, #1
 800885a:	d1f3      	bne.n	8008844 <__sfputs_r+0xa>
 800885c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008860 <_vfiprintf_r>:
 8008860:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008864:	460d      	mov	r5, r1
 8008866:	b09d      	sub	sp, #116	@ 0x74
 8008868:	4614      	mov	r4, r2
 800886a:	4698      	mov	r8, r3
 800886c:	4606      	mov	r6, r0
 800886e:	b118      	cbz	r0, 8008878 <_vfiprintf_r+0x18>
 8008870:	6a03      	ldr	r3, [r0, #32]
 8008872:	b90b      	cbnz	r3, 8008878 <_vfiprintf_r+0x18>
 8008874:	f7ff fc5c 	bl	8008130 <__sinit>
 8008878:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800887a:	07d9      	lsls	r1, r3, #31
 800887c:	d405      	bmi.n	800888a <_vfiprintf_r+0x2a>
 800887e:	89ab      	ldrh	r3, [r5, #12]
 8008880:	059a      	lsls	r2, r3, #22
 8008882:	d402      	bmi.n	800888a <_vfiprintf_r+0x2a>
 8008884:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008886:	f7ff feb8 	bl	80085fa <__retarget_lock_acquire_recursive>
 800888a:	89ab      	ldrh	r3, [r5, #12]
 800888c:	071b      	lsls	r3, r3, #28
 800888e:	d501      	bpl.n	8008894 <_vfiprintf_r+0x34>
 8008890:	692b      	ldr	r3, [r5, #16]
 8008892:	b99b      	cbnz	r3, 80088bc <_vfiprintf_r+0x5c>
 8008894:	4629      	mov	r1, r5
 8008896:	4630      	mov	r0, r6
 8008898:	f7ff fd72 	bl	8008380 <__swsetup_r>
 800889c:	b170      	cbz	r0, 80088bc <_vfiprintf_r+0x5c>
 800889e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80088a0:	07dc      	lsls	r4, r3, #31
 80088a2:	d504      	bpl.n	80088ae <_vfiprintf_r+0x4e>
 80088a4:	f04f 30ff 	mov.w	r0, #4294967295
 80088a8:	b01d      	add	sp, #116	@ 0x74
 80088aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80088ae:	89ab      	ldrh	r3, [r5, #12]
 80088b0:	0598      	lsls	r0, r3, #22
 80088b2:	d4f7      	bmi.n	80088a4 <_vfiprintf_r+0x44>
 80088b4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80088b6:	f7ff fea1 	bl	80085fc <__retarget_lock_release_recursive>
 80088ba:	e7f3      	b.n	80088a4 <_vfiprintf_r+0x44>
 80088bc:	2300      	movs	r3, #0
 80088be:	9309      	str	r3, [sp, #36]	@ 0x24
 80088c0:	2320      	movs	r3, #32
 80088c2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80088c6:	f8cd 800c 	str.w	r8, [sp, #12]
 80088ca:	2330      	movs	r3, #48	@ 0x30
 80088cc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008a7c <_vfiprintf_r+0x21c>
 80088d0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80088d4:	f04f 0901 	mov.w	r9, #1
 80088d8:	4623      	mov	r3, r4
 80088da:	469a      	mov	sl, r3
 80088dc:	f813 2b01 	ldrb.w	r2, [r3], #1
 80088e0:	b10a      	cbz	r2, 80088e6 <_vfiprintf_r+0x86>
 80088e2:	2a25      	cmp	r2, #37	@ 0x25
 80088e4:	d1f9      	bne.n	80088da <_vfiprintf_r+0x7a>
 80088e6:	ebba 0b04 	subs.w	fp, sl, r4
 80088ea:	d00b      	beq.n	8008904 <_vfiprintf_r+0xa4>
 80088ec:	465b      	mov	r3, fp
 80088ee:	4622      	mov	r2, r4
 80088f0:	4629      	mov	r1, r5
 80088f2:	4630      	mov	r0, r6
 80088f4:	f7ff ffa1 	bl	800883a <__sfputs_r>
 80088f8:	3001      	adds	r0, #1
 80088fa:	f000 80a7 	beq.w	8008a4c <_vfiprintf_r+0x1ec>
 80088fe:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008900:	445a      	add	r2, fp
 8008902:	9209      	str	r2, [sp, #36]	@ 0x24
 8008904:	f89a 3000 	ldrb.w	r3, [sl]
 8008908:	2b00      	cmp	r3, #0
 800890a:	f000 809f 	beq.w	8008a4c <_vfiprintf_r+0x1ec>
 800890e:	2300      	movs	r3, #0
 8008910:	f04f 32ff 	mov.w	r2, #4294967295
 8008914:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008918:	f10a 0a01 	add.w	sl, sl, #1
 800891c:	9304      	str	r3, [sp, #16]
 800891e:	9307      	str	r3, [sp, #28]
 8008920:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008924:	931a      	str	r3, [sp, #104]	@ 0x68
 8008926:	4654      	mov	r4, sl
 8008928:	2205      	movs	r2, #5
 800892a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800892e:	4853      	ldr	r0, [pc, #332]	@ (8008a7c <_vfiprintf_r+0x21c>)
 8008930:	f7f7 fc4e 	bl	80001d0 <memchr>
 8008934:	9a04      	ldr	r2, [sp, #16]
 8008936:	b9d8      	cbnz	r0, 8008970 <_vfiprintf_r+0x110>
 8008938:	06d1      	lsls	r1, r2, #27
 800893a:	bf44      	itt	mi
 800893c:	2320      	movmi	r3, #32
 800893e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008942:	0713      	lsls	r3, r2, #28
 8008944:	bf44      	itt	mi
 8008946:	232b      	movmi	r3, #43	@ 0x2b
 8008948:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800894c:	f89a 3000 	ldrb.w	r3, [sl]
 8008950:	2b2a      	cmp	r3, #42	@ 0x2a
 8008952:	d015      	beq.n	8008980 <_vfiprintf_r+0x120>
 8008954:	9a07      	ldr	r2, [sp, #28]
 8008956:	4654      	mov	r4, sl
 8008958:	2000      	movs	r0, #0
 800895a:	f04f 0c0a 	mov.w	ip, #10
 800895e:	4621      	mov	r1, r4
 8008960:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008964:	3b30      	subs	r3, #48	@ 0x30
 8008966:	2b09      	cmp	r3, #9
 8008968:	d94b      	bls.n	8008a02 <_vfiprintf_r+0x1a2>
 800896a:	b1b0      	cbz	r0, 800899a <_vfiprintf_r+0x13a>
 800896c:	9207      	str	r2, [sp, #28]
 800896e:	e014      	b.n	800899a <_vfiprintf_r+0x13a>
 8008970:	eba0 0308 	sub.w	r3, r0, r8
 8008974:	fa09 f303 	lsl.w	r3, r9, r3
 8008978:	4313      	orrs	r3, r2
 800897a:	9304      	str	r3, [sp, #16]
 800897c:	46a2      	mov	sl, r4
 800897e:	e7d2      	b.n	8008926 <_vfiprintf_r+0xc6>
 8008980:	9b03      	ldr	r3, [sp, #12]
 8008982:	1d19      	adds	r1, r3, #4
 8008984:	681b      	ldr	r3, [r3, #0]
 8008986:	9103      	str	r1, [sp, #12]
 8008988:	2b00      	cmp	r3, #0
 800898a:	bfbb      	ittet	lt
 800898c:	425b      	neglt	r3, r3
 800898e:	f042 0202 	orrlt.w	r2, r2, #2
 8008992:	9307      	strge	r3, [sp, #28]
 8008994:	9307      	strlt	r3, [sp, #28]
 8008996:	bfb8      	it	lt
 8008998:	9204      	strlt	r2, [sp, #16]
 800899a:	7823      	ldrb	r3, [r4, #0]
 800899c:	2b2e      	cmp	r3, #46	@ 0x2e
 800899e:	d10a      	bne.n	80089b6 <_vfiprintf_r+0x156>
 80089a0:	7863      	ldrb	r3, [r4, #1]
 80089a2:	2b2a      	cmp	r3, #42	@ 0x2a
 80089a4:	d132      	bne.n	8008a0c <_vfiprintf_r+0x1ac>
 80089a6:	9b03      	ldr	r3, [sp, #12]
 80089a8:	1d1a      	adds	r2, r3, #4
 80089aa:	681b      	ldr	r3, [r3, #0]
 80089ac:	9203      	str	r2, [sp, #12]
 80089ae:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80089b2:	3402      	adds	r4, #2
 80089b4:	9305      	str	r3, [sp, #20]
 80089b6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008a8c <_vfiprintf_r+0x22c>
 80089ba:	7821      	ldrb	r1, [r4, #0]
 80089bc:	2203      	movs	r2, #3
 80089be:	4650      	mov	r0, sl
 80089c0:	f7f7 fc06 	bl	80001d0 <memchr>
 80089c4:	b138      	cbz	r0, 80089d6 <_vfiprintf_r+0x176>
 80089c6:	9b04      	ldr	r3, [sp, #16]
 80089c8:	eba0 000a 	sub.w	r0, r0, sl
 80089cc:	2240      	movs	r2, #64	@ 0x40
 80089ce:	4082      	lsls	r2, r0
 80089d0:	4313      	orrs	r3, r2
 80089d2:	3401      	adds	r4, #1
 80089d4:	9304      	str	r3, [sp, #16]
 80089d6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80089da:	4829      	ldr	r0, [pc, #164]	@ (8008a80 <_vfiprintf_r+0x220>)
 80089dc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80089e0:	2206      	movs	r2, #6
 80089e2:	f7f7 fbf5 	bl	80001d0 <memchr>
 80089e6:	2800      	cmp	r0, #0
 80089e8:	d03f      	beq.n	8008a6a <_vfiprintf_r+0x20a>
 80089ea:	4b26      	ldr	r3, [pc, #152]	@ (8008a84 <_vfiprintf_r+0x224>)
 80089ec:	bb1b      	cbnz	r3, 8008a36 <_vfiprintf_r+0x1d6>
 80089ee:	9b03      	ldr	r3, [sp, #12]
 80089f0:	3307      	adds	r3, #7
 80089f2:	f023 0307 	bic.w	r3, r3, #7
 80089f6:	3308      	adds	r3, #8
 80089f8:	9303      	str	r3, [sp, #12]
 80089fa:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80089fc:	443b      	add	r3, r7
 80089fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8008a00:	e76a      	b.n	80088d8 <_vfiprintf_r+0x78>
 8008a02:	fb0c 3202 	mla	r2, ip, r2, r3
 8008a06:	460c      	mov	r4, r1
 8008a08:	2001      	movs	r0, #1
 8008a0a:	e7a8      	b.n	800895e <_vfiprintf_r+0xfe>
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	3401      	adds	r4, #1
 8008a10:	9305      	str	r3, [sp, #20]
 8008a12:	4619      	mov	r1, r3
 8008a14:	f04f 0c0a 	mov.w	ip, #10
 8008a18:	4620      	mov	r0, r4
 8008a1a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008a1e:	3a30      	subs	r2, #48	@ 0x30
 8008a20:	2a09      	cmp	r2, #9
 8008a22:	d903      	bls.n	8008a2c <_vfiprintf_r+0x1cc>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	d0c6      	beq.n	80089b6 <_vfiprintf_r+0x156>
 8008a28:	9105      	str	r1, [sp, #20]
 8008a2a:	e7c4      	b.n	80089b6 <_vfiprintf_r+0x156>
 8008a2c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008a30:	4604      	mov	r4, r0
 8008a32:	2301      	movs	r3, #1
 8008a34:	e7f0      	b.n	8008a18 <_vfiprintf_r+0x1b8>
 8008a36:	ab03      	add	r3, sp, #12
 8008a38:	9300      	str	r3, [sp, #0]
 8008a3a:	462a      	mov	r2, r5
 8008a3c:	4b12      	ldr	r3, [pc, #72]	@ (8008a88 <_vfiprintf_r+0x228>)
 8008a3e:	a904      	add	r1, sp, #16
 8008a40:	4630      	mov	r0, r6
 8008a42:	f3af 8000 	nop.w
 8008a46:	4607      	mov	r7, r0
 8008a48:	1c78      	adds	r0, r7, #1
 8008a4a:	d1d6      	bne.n	80089fa <_vfiprintf_r+0x19a>
 8008a4c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008a4e:	07d9      	lsls	r1, r3, #31
 8008a50:	d405      	bmi.n	8008a5e <_vfiprintf_r+0x1fe>
 8008a52:	89ab      	ldrh	r3, [r5, #12]
 8008a54:	059a      	lsls	r2, r3, #22
 8008a56:	d402      	bmi.n	8008a5e <_vfiprintf_r+0x1fe>
 8008a58:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008a5a:	f7ff fdcf 	bl	80085fc <__retarget_lock_release_recursive>
 8008a5e:	89ab      	ldrh	r3, [r5, #12]
 8008a60:	065b      	lsls	r3, r3, #25
 8008a62:	f53f af1f 	bmi.w	80088a4 <_vfiprintf_r+0x44>
 8008a66:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008a68:	e71e      	b.n	80088a8 <_vfiprintf_r+0x48>
 8008a6a:	ab03      	add	r3, sp, #12
 8008a6c:	9300      	str	r3, [sp, #0]
 8008a6e:	462a      	mov	r2, r5
 8008a70:	4b05      	ldr	r3, [pc, #20]	@ (8008a88 <_vfiprintf_r+0x228>)
 8008a72:	a904      	add	r1, sp, #16
 8008a74:	4630      	mov	r0, r6
 8008a76:	f000 f879 	bl	8008b6c <_printf_i>
 8008a7a:	e7e4      	b.n	8008a46 <_vfiprintf_r+0x1e6>
 8008a7c:	0800b818 	.word	0x0800b818
 8008a80:	0800b822 	.word	0x0800b822
 8008a84:	00000000 	.word	0x00000000
 8008a88:	0800883b 	.word	0x0800883b
 8008a8c:	0800b81e 	.word	0x0800b81e

08008a90 <_printf_common>:
 8008a90:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008a94:	4616      	mov	r6, r2
 8008a96:	4698      	mov	r8, r3
 8008a98:	688a      	ldr	r2, [r1, #8]
 8008a9a:	690b      	ldr	r3, [r1, #16]
 8008a9c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008aa0:	4293      	cmp	r3, r2
 8008aa2:	bfb8      	it	lt
 8008aa4:	4613      	movlt	r3, r2
 8008aa6:	6033      	str	r3, [r6, #0]
 8008aa8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008aac:	4607      	mov	r7, r0
 8008aae:	460c      	mov	r4, r1
 8008ab0:	b10a      	cbz	r2, 8008ab6 <_printf_common+0x26>
 8008ab2:	3301      	adds	r3, #1
 8008ab4:	6033      	str	r3, [r6, #0]
 8008ab6:	6823      	ldr	r3, [r4, #0]
 8008ab8:	0699      	lsls	r1, r3, #26
 8008aba:	bf42      	ittt	mi
 8008abc:	6833      	ldrmi	r3, [r6, #0]
 8008abe:	3302      	addmi	r3, #2
 8008ac0:	6033      	strmi	r3, [r6, #0]
 8008ac2:	6825      	ldr	r5, [r4, #0]
 8008ac4:	f015 0506 	ands.w	r5, r5, #6
 8008ac8:	d106      	bne.n	8008ad8 <_printf_common+0x48>
 8008aca:	f104 0a19 	add.w	sl, r4, #25
 8008ace:	68e3      	ldr	r3, [r4, #12]
 8008ad0:	6832      	ldr	r2, [r6, #0]
 8008ad2:	1a9b      	subs	r3, r3, r2
 8008ad4:	42ab      	cmp	r3, r5
 8008ad6:	dc26      	bgt.n	8008b26 <_printf_common+0x96>
 8008ad8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008adc:	6822      	ldr	r2, [r4, #0]
 8008ade:	3b00      	subs	r3, #0
 8008ae0:	bf18      	it	ne
 8008ae2:	2301      	movne	r3, #1
 8008ae4:	0692      	lsls	r2, r2, #26
 8008ae6:	d42b      	bmi.n	8008b40 <_printf_common+0xb0>
 8008ae8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008aec:	4641      	mov	r1, r8
 8008aee:	4638      	mov	r0, r7
 8008af0:	47c8      	blx	r9
 8008af2:	3001      	adds	r0, #1
 8008af4:	d01e      	beq.n	8008b34 <_printf_common+0xa4>
 8008af6:	6823      	ldr	r3, [r4, #0]
 8008af8:	6922      	ldr	r2, [r4, #16]
 8008afa:	f003 0306 	and.w	r3, r3, #6
 8008afe:	2b04      	cmp	r3, #4
 8008b00:	bf02      	ittt	eq
 8008b02:	68e5      	ldreq	r5, [r4, #12]
 8008b04:	6833      	ldreq	r3, [r6, #0]
 8008b06:	1aed      	subeq	r5, r5, r3
 8008b08:	68a3      	ldr	r3, [r4, #8]
 8008b0a:	bf0c      	ite	eq
 8008b0c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008b10:	2500      	movne	r5, #0
 8008b12:	4293      	cmp	r3, r2
 8008b14:	bfc4      	itt	gt
 8008b16:	1a9b      	subgt	r3, r3, r2
 8008b18:	18ed      	addgt	r5, r5, r3
 8008b1a:	2600      	movs	r6, #0
 8008b1c:	341a      	adds	r4, #26
 8008b1e:	42b5      	cmp	r5, r6
 8008b20:	d11a      	bne.n	8008b58 <_printf_common+0xc8>
 8008b22:	2000      	movs	r0, #0
 8008b24:	e008      	b.n	8008b38 <_printf_common+0xa8>
 8008b26:	2301      	movs	r3, #1
 8008b28:	4652      	mov	r2, sl
 8008b2a:	4641      	mov	r1, r8
 8008b2c:	4638      	mov	r0, r7
 8008b2e:	47c8      	blx	r9
 8008b30:	3001      	adds	r0, #1
 8008b32:	d103      	bne.n	8008b3c <_printf_common+0xac>
 8008b34:	f04f 30ff 	mov.w	r0, #4294967295
 8008b38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b3c:	3501      	adds	r5, #1
 8008b3e:	e7c6      	b.n	8008ace <_printf_common+0x3e>
 8008b40:	18e1      	adds	r1, r4, r3
 8008b42:	1c5a      	adds	r2, r3, #1
 8008b44:	2030      	movs	r0, #48	@ 0x30
 8008b46:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008b4a:	4422      	add	r2, r4
 8008b4c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008b50:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008b54:	3302      	adds	r3, #2
 8008b56:	e7c7      	b.n	8008ae8 <_printf_common+0x58>
 8008b58:	2301      	movs	r3, #1
 8008b5a:	4622      	mov	r2, r4
 8008b5c:	4641      	mov	r1, r8
 8008b5e:	4638      	mov	r0, r7
 8008b60:	47c8      	blx	r9
 8008b62:	3001      	adds	r0, #1
 8008b64:	d0e6      	beq.n	8008b34 <_printf_common+0xa4>
 8008b66:	3601      	adds	r6, #1
 8008b68:	e7d9      	b.n	8008b1e <_printf_common+0x8e>
	...

08008b6c <_printf_i>:
 8008b6c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008b70:	7e0f      	ldrb	r7, [r1, #24]
 8008b72:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008b74:	2f78      	cmp	r7, #120	@ 0x78
 8008b76:	4691      	mov	r9, r2
 8008b78:	4680      	mov	r8, r0
 8008b7a:	460c      	mov	r4, r1
 8008b7c:	469a      	mov	sl, r3
 8008b7e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008b82:	d807      	bhi.n	8008b94 <_printf_i+0x28>
 8008b84:	2f62      	cmp	r7, #98	@ 0x62
 8008b86:	d80a      	bhi.n	8008b9e <_printf_i+0x32>
 8008b88:	2f00      	cmp	r7, #0
 8008b8a:	f000 80d1 	beq.w	8008d30 <_printf_i+0x1c4>
 8008b8e:	2f58      	cmp	r7, #88	@ 0x58
 8008b90:	f000 80b8 	beq.w	8008d04 <_printf_i+0x198>
 8008b94:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008b98:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008b9c:	e03a      	b.n	8008c14 <_printf_i+0xa8>
 8008b9e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008ba2:	2b15      	cmp	r3, #21
 8008ba4:	d8f6      	bhi.n	8008b94 <_printf_i+0x28>
 8008ba6:	a101      	add	r1, pc, #4	@ (adr r1, 8008bac <_printf_i+0x40>)
 8008ba8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008bac:	08008c05 	.word	0x08008c05
 8008bb0:	08008c19 	.word	0x08008c19
 8008bb4:	08008b95 	.word	0x08008b95
 8008bb8:	08008b95 	.word	0x08008b95
 8008bbc:	08008b95 	.word	0x08008b95
 8008bc0:	08008b95 	.word	0x08008b95
 8008bc4:	08008c19 	.word	0x08008c19
 8008bc8:	08008b95 	.word	0x08008b95
 8008bcc:	08008b95 	.word	0x08008b95
 8008bd0:	08008b95 	.word	0x08008b95
 8008bd4:	08008b95 	.word	0x08008b95
 8008bd8:	08008d17 	.word	0x08008d17
 8008bdc:	08008c43 	.word	0x08008c43
 8008be0:	08008cd1 	.word	0x08008cd1
 8008be4:	08008b95 	.word	0x08008b95
 8008be8:	08008b95 	.word	0x08008b95
 8008bec:	08008d39 	.word	0x08008d39
 8008bf0:	08008b95 	.word	0x08008b95
 8008bf4:	08008c43 	.word	0x08008c43
 8008bf8:	08008b95 	.word	0x08008b95
 8008bfc:	08008b95 	.word	0x08008b95
 8008c00:	08008cd9 	.word	0x08008cd9
 8008c04:	6833      	ldr	r3, [r6, #0]
 8008c06:	1d1a      	adds	r2, r3, #4
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	6032      	str	r2, [r6, #0]
 8008c0c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008c10:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008c14:	2301      	movs	r3, #1
 8008c16:	e09c      	b.n	8008d52 <_printf_i+0x1e6>
 8008c18:	6833      	ldr	r3, [r6, #0]
 8008c1a:	6820      	ldr	r0, [r4, #0]
 8008c1c:	1d19      	adds	r1, r3, #4
 8008c1e:	6031      	str	r1, [r6, #0]
 8008c20:	0606      	lsls	r6, r0, #24
 8008c22:	d501      	bpl.n	8008c28 <_printf_i+0xbc>
 8008c24:	681d      	ldr	r5, [r3, #0]
 8008c26:	e003      	b.n	8008c30 <_printf_i+0xc4>
 8008c28:	0645      	lsls	r5, r0, #25
 8008c2a:	d5fb      	bpl.n	8008c24 <_printf_i+0xb8>
 8008c2c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008c30:	2d00      	cmp	r5, #0
 8008c32:	da03      	bge.n	8008c3c <_printf_i+0xd0>
 8008c34:	232d      	movs	r3, #45	@ 0x2d
 8008c36:	426d      	negs	r5, r5
 8008c38:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008c3c:	4858      	ldr	r0, [pc, #352]	@ (8008da0 <_printf_i+0x234>)
 8008c3e:	230a      	movs	r3, #10
 8008c40:	e011      	b.n	8008c66 <_printf_i+0xfa>
 8008c42:	6821      	ldr	r1, [r4, #0]
 8008c44:	6833      	ldr	r3, [r6, #0]
 8008c46:	0608      	lsls	r0, r1, #24
 8008c48:	f853 5b04 	ldr.w	r5, [r3], #4
 8008c4c:	d402      	bmi.n	8008c54 <_printf_i+0xe8>
 8008c4e:	0649      	lsls	r1, r1, #25
 8008c50:	bf48      	it	mi
 8008c52:	b2ad      	uxthmi	r5, r5
 8008c54:	2f6f      	cmp	r7, #111	@ 0x6f
 8008c56:	4852      	ldr	r0, [pc, #328]	@ (8008da0 <_printf_i+0x234>)
 8008c58:	6033      	str	r3, [r6, #0]
 8008c5a:	bf14      	ite	ne
 8008c5c:	230a      	movne	r3, #10
 8008c5e:	2308      	moveq	r3, #8
 8008c60:	2100      	movs	r1, #0
 8008c62:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008c66:	6866      	ldr	r6, [r4, #4]
 8008c68:	60a6      	str	r6, [r4, #8]
 8008c6a:	2e00      	cmp	r6, #0
 8008c6c:	db05      	blt.n	8008c7a <_printf_i+0x10e>
 8008c6e:	6821      	ldr	r1, [r4, #0]
 8008c70:	432e      	orrs	r6, r5
 8008c72:	f021 0104 	bic.w	r1, r1, #4
 8008c76:	6021      	str	r1, [r4, #0]
 8008c78:	d04b      	beq.n	8008d12 <_printf_i+0x1a6>
 8008c7a:	4616      	mov	r6, r2
 8008c7c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008c80:	fb03 5711 	mls	r7, r3, r1, r5
 8008c84:	5dc7      	ldrb	r7, [r0, r7]
 8008c86:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8008c8a:	462f      	mov	r7, r5
 8008c8c:	42bb      	cmp	r3, r7
 8008c8e:	460d      	mov	r5, r1
 8008c90:	d9f4      	bls.n	8008c7c <_printf_i+0x110>
 8008c92:	2b08      	cmp	r3, #8
 8008c94:	d10b      	bne.n	8008cae <_printf_i+0x142>
 8008c96:	6823      	ldr	r3, [r4, #0]
 8008c98:	07df      	lsls	r7, r3, #31
 8008c9a:	d508      	bpl.n	8008cae <_printf_i+0x142>
 8008c9c:	6923      	ldr	r3, [r4, #16]
 8008c9e:	6861      	ldr	r1, [r4, #4]
 8008ca0:	4299      	cmp	r1, r3
 8008ca2:	bfde      	ittt	le
 8008ca4:	2330      	movle	r3, #48	@ 0x30
 8008ca6:	f806 3c01 	strble.w	r3, [r6, #-1]
 8008caa:	f106 36ff 	addle.w	r6, r6, #4294967295
 8008cae:	1b92      	subs	r2, r2, r6
 8008cb0:	6122      	str	r2, [r4, #16]
 8008cb2:	f8cd a000 	str.w	sl, [sp]
 8008cb6:	464b      	mov	r3, r9
 8008cb8:	aa03      	add	r2, sp, #12
 8008cba:	4621      	mov	r1, r4
 8008cbc:	4640      	mov	r0, r8
 8008cbe:	f7ff fee7 	bl	8008a90 <_printf_common>
 8008cc2:	3001      	adds	r0, #1
 8008cc4:	d14a      	bne.n	8008d5c <_printf_i+0x1f0>
 8008cc6:	f04f 30ff 	mov.w	r0, #4294967295
 8008cca:	b004      	add	sp, #16
 8008ccc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008cd0:	6823      	ldr	r3, [r4, #0]
 8008cd2:	f043 0320 	orr.w	r3, r3, #32
 8008cd6:	6023      	str	r3, [r4, #0]
 8008cd8:	4832      	ldr	r0, [pc, #200]	@ (8008da4 <_printf_i+0x238>)
 8008cda:	2778      	movs	r7, #120	@ 0x78
 8008cdc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008ce0:	6823      	ldr	r3, [r4, #0]
 8008ce2:	6831      	ldr	r1, [r6, #0]
 8008ce4:	061f      	lsls	r7, r3, #24
 8008ce6:	f851 5b04 	ldr.w	r5, [r1], #4
 8008cea:	d402      	bmi.n	8008cf2 <_printf_i+0x186>
 8008cec:	065f      	lsls	r7, r3, #25
 8008cee:	bf48      	it	mi
 8008cf0:	b2ad      	uxthmi	r5, r5
 8008cf2:	6031      	str	r1, [r6, #0]
 8008cf4:	07d9      	lsls	r1, r3, #31
 8008cf6:	bf44      	itt	mi
 8008cf8:	f043 0320 	orrmi.w	r3, r3, #32
 8008cfc:	6023      	strmi	r3, [r4, #0]
 8008cfe:	b11d      	cbz	r5, 8008d08 <_printf_i+0x19c>
 8008d00:	2310      	movs	r3, #16
 8008d02:	e7ad      	b.n	8008c60 <_printf_i+0xf4>
 8008d04:	4826      	ldr	r0, [pc, #152]	@ (8008da0 <_printf_i+0x234>)
 8008d06:	e7e9      	b.n	8008cdc <_printf_i+0x170>
 8008d08:	6823      	ldr	r3, [r4, #0]
 8008d0a:	f023 0320 	bic.w	r3, r3, #32
 8008d0e:	6023      	str	r3, [r4, #0]
 8008d10:	e7f6      	b.n	8008d00 <_printf_i+0x194>
 8008d12:	4616      	mov	r6, r2
 8008d14:	e7bd      	b.n	8008c92 <_printf_i+0x126>
 8008d16:	6833      	ldr	r3, [r6, #0]
 8008d18:	6825      	ldr	r5, [r4, #0]
 8008d1a:	6961      	ldr	r1, [r4, #20]
 8008d1c:	1d18      	adds	r0, r3, #4
 8008d1e:	6030      	str	r0, [r6, #0]
 8008d20:	062e      	lsls	r6, r5, #24
 8008d22:	681b      	ldr	r3, [r3, #0]
 8008d24:	d501      	bpl.n	8008d2a <_printf_i+0x1be>
 8008d26:	6019      	str	r1, [r3, #0]
 8008d28:	e002      	b.n	8008d30 <_printf_i+0x1c4>
 8008d2a:	0668      	lsls	r0, r5, #25
 8008d2c:	d5fb      	bpl.n	8008d26 <_printf_i+0x1ba>
 8008d2e:	8019      	strh	r1, [r3, #0]
 8008d30:	2300      	movs	r3, #0
 8008d32:	6123      	str	r3, [r4, #16]
 8008d34:	4616      	mov	r6, r2
 8008d36:	e7bc      	b.n	8008cb2 <_printf_i+0x146>
 8008d38:	6833      	ldr	r3, [r6, #0]
 8008d3a:	1d1a      	adds	r2, r3, #4
 8008d3c:	6032      	str	r2, [r6, #0]
 8008d3e:	681e      	ldr	r6, [r3, #0]
 8008d40:	6862      	ldr	r2, [r4, #4]
 8008d42:	2100      	movs	r1, #0
 8008d44:	4630      	mov	r0, r6
 8008d46:	f7f7 fa43 	bl	80001d0 <memchr>
 8008d4a:	b108      	cbz	r0, 8008d50 <_printf_i+0x1e4>
 8008d4c:	1b80      	subs	r0, r0, r6
 8008d4e:	6060      	str	r0, [r4, #4]
 8008d50:	6863      	ldr	r3, [r4, #4]
 8008d52:	6123      	str	r3, [r4, #16]
 8008d54:	2300      	movs	r3, #0
 8008d56:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008d5a:	e7aa      	b.n	8008cb2 <_printf_i+0x146>
 8008d5c:	6923      	ldr	r3, [r4, #16]
 8008d5e:	4632      	mov	r2, r6
 8008d60:	4649      	mov	r1, r9
 8008d62:	4640      	mov	r0, r8
 8008d64:	47d0      	blx	sl
 8008d66:	3001      	adds	r0, #1
 8008d68:	d0ad      	beq.n	8008cc6 <_printf_i+0x15a>
 8008d6a:	6823      	ldr	r3, [r4, #0]
 8008d6c:	079b      	lsls	r3, r3, #30
 8008d6e:	d413      	bmi.n	8008d98 <_printf_i+0x22c>
 8008d70:	68e0      	ldr	r0, [r4, #12]
 8008d72:	9b03      	ldr	r3, [sp, #12]
 8008d74:	4298      	cmp	r0, r3
 8008d76:	bfb8      	it	lt
 8008d78:	4618      	movlt	r0, r3
 8008d7a:	e7a6      	b.n	8008cca <_printf_i+0x15e>
 8008d7c:	2301      	movs	r3, #1
 8008d7e:	4632      	mov	r2, r6
 8008d80:	4649      	mov	r1, r9
 8008d82:	4640      	mov	r0, r8
 8008d84:	47d0      	blx	sl
 8008d86:	3001      	adds	r0, #1
 8008d88:	d09d      	beq.n	8008cc6 <_printf_i+0x15a>
 8008d8a:	3501      	adds	r5, #1
 8008d8c:	68e3      	ldr	r3, [r4, #12]
 8008d8e:	9903      	ldr	r1, [sp, #12]
 8008d90:	1a5b      	subs	r3, r3, r1
 8008d92:	42ab      	cmp	r3, r5
 8008d94:	dcf2      	bgt.n	8008d7c <_printf_i+0x210>
 8008d96:	e7eb      	b.n	8008d70 <_printf_i+0x204>
 8008d98:	2500      	movs	r5, #0
 8008d9a:	f104 0619 	add.w	r6, r4, #25
 8008d9e:	e7f5      	b.n	8008d8c <_printf_i+0x220>
 8008da0:	0800b829 	.word	0x0800b829
 8008da4:	0800b83a 	.word	0x0800b83a

08008da8 <__sflush_r>:
 8008da8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008dac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008db0:	0716      	lsls	r6, r2, #28
 8008db2:	4605      	mov	r5, r0
 8008db4:	460c      	mov	r4, r1
 8008db6:	d454      	bmi.n	8008e62 <__sflush_r+0xba>
 8008db8:	684b      	ldr	r3, [r1, #4]
 8008dba:	2b00      	cmp	r3, #0
 8008dbc:	dc02      	bgt.n	8008dc4 <__sflush_r+0x1c>
 8008dbe:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008dc0:	2b00      	cmp	r3, #0
 8008dc2:	dd48      	ble.n	8008e56 <__sflush_r+0xae>
 8008dc4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008dc6:	2e00      	cmp	r6, #0
 8008dc8:	d045      	beq.n	8008e56 <__sflush_r+0xae>
 8008dca:	2300      	movs	r3, #0
 8008dcc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008dd0:	682f      	ldr	r7, [r5, #0]
 8008dd2:	6a21      	ldr	r1, [r4, #32]
 8008dd4:	602b      	str	r3, [r5, #0]
 8008dd6:	d030      	beq.n	8008e3a <__sflush_r+0x92>
 8008dd8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008dda:	89a3      	ldrh	r3, [r4, #12]
 8008ddc:	0759      	lsls	r1, r3, #29
 8008dde:	d505      	bpl.n	8008dec <__sflush_r+0x44>
 8008de0:	6863      	ldr	r3, [r4, #4]
 8008de2:	1ad2      	subs	r2, r2, r3
 8008de4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008de6:	b10b      	cbz	r3, 8008dec <__sflush_r+0x44>
 8008de8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008dea:	1ad2      	subs	r2, r2, r3
 8008dec:	2300      	movs	r3, #0
 8008dee:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008df0:	6a21      	ldr	r1, [r4, #32]
 8008df2:	4628      	mov	r0, r5
 8008df4:	47b0      	blx	r6
 8008df6:	1c43      	adds	r3, r0, #1
 8008df8:	89a3      	ldrh	r3, [r4, #12]
 8008dfa:	d106      	bne.n	8008e0a <__sflush_r+0x62>
 8008dfc:	6829      	ldr	r1, [r5, #0]
 8008dfe:	291d      	cmp	r1, #29
 8008e00:	d82b      	bhi.n	8008e5a <__sflush_r+0xb2>
 8008e02:	4a2a      	ldr	r2, [pc, #168]	@ (8008eac <__sflush_r+0x104>)
 8008e04:	40ca      	lsrs	r2, r1
 8008e06:	07d6      	lsls	r6, r2, #31
 8008e08:	d527      	bpl.n	8008e5a <__sflush_r+0xb2>
 8008e0a:	2200      	movs	r2, #0
 8008e0c:	6062      	str	r2, [r4, #4]
 8008e0e:	04d9      	lsls	r1, r3, #19
 8008e10:	6922      	ldr	r2, [r4, #16]
 8008e12:	6022      	str	r2, [r4, #0]
 8008e14:	d504      	bpl.n	8008e20 <__sflush_r+0x78>
 8008e16:	1c42      	adds	r2, r0, #1
 8008e18:	d101      	bne.n	8008e1e <__sflush_r+0x76>
 8008e1a:	682b      	ldr	r3, [r5, #0]
 8008e1c:	b903      	cbnz	r3, 8008e20 <__sflush_r+0x78>
 8008e1e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008e20:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008e22:	602f      	str	r7, [r5, #0]
 8008e24:	b1b9      	cbz	r1, 8008e56 <__sflush_r+0xae>
 8008e26:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008e2a:	4299      	cmp	r1, r3
 8008e2c:	d002      	beq.n	8008e34 <__sflush_r+0x8c>
 8008e2e:	4628      	mov	r0, r5
 8008e30:	f7ff fbf4 	bl	800861c <_free_r>
 8008e34:	2300      	movs	r3, #0
 8008e36:	6363      	str	r3, [r4, #52]	@ 0x34
 8008e38:	e00d      	b.n	8008e56 <__sflush_r+0xae>
 8008e3a:	2301      	movs	r3, #1
 8008e3c:	4628      	mov	r0, r5
 8008e3e:	47b0      	blx	r6
 8008e40:	4602      	mov	r2, r0
 8008e42:	1c50      	adds	r0, r2, #1
 8008e44:	d1c9      	bne.n	8008dda <__sflush_r+0x32>
 8008e46:	682b      	ldr	r3, [r5, #0]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d0c6      	beq.n	8008dda <__sflush_r+0x32>
 8008e4c:	2b1d      	cmp	r3, #29
 8008e4e:	d001      	beq.n	8008e54 <__sflush_r+0xac>
 8008e50:	2b16      	cmp	r3, #22
 8008e52:	d11e      	bne.n	8008e92 <__sflush_r+0xea>
 8008e54:	602f      	str	r7, [r5, #0]
 8008e56:	2000      	movs	r0, #0
 8008e58:	e022      	b.n	8008ea0 <__sflush_r+0xf8>
 8008e5a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e5e:	b21b      	sxth	r3, r3
 8008e60:	e01b      	b.n	8008e9a <__sflush_r+0xf2>
 8008e62:	690f      	ldr	r7, [r1, #16]
 8008e64:	2f00      	cmp	r7, #0
 8008e66:	d0f6      	beq.n	8008e56 <__sflush_r+0xae>
 8008e68:	0793      	lsls	r3, r2, #30
 8008e6a:	680e      	ldr	r6, [r1, #0]
 8008e6c:	bf08      	it	eq
 8008e6e:	694b      	ldreq	r3, [r1, #20]
 8008e70:	600f      	str	r7, [r1, #0]
 8008e72:	bf18      	it	ne
 8008e74:	2300      	movne	r3, #0
 8008e76:	eba6 0807 	sub.w	r8, r6, r7
 8008e7a:	608b      	str	r3, [r1, #8]
 8008e7c:	f1b8 0f00 	cmp.w	r8, #0
 8008e80:	dde9      	ble.n	8008e56 <__sflush_r+0xae>
 8008e82:	6a21      	ldr	r1, [r4, #32]
 8008e84:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008e86:	4643      	mov	r3, r8
 8008e88:	463a      	mov	r2, r7
 8008e8a:	4628      	mov	r0, r5
 8008e8c:	47b0      	blx	r6
 8008e8e:	2800      	cmp	r0, #0
 8008e90:	dc08      	bgt.n	8008ea4 <__sflush_r+0xfc>
 8008e92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008e96:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008e9a:	81a3      	strh	r3, [r4, #12]
 8008e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8008ea0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008ea4:	4407      	add	r7, r0
 8008ea6:	eba8 0800 	sub.w	r8, r8, r0
 8008eaa:	e7e7      	b.n	8008e7c <__sflush_r+0xd4>
 8008eac:	20400001 	.word	0x20400001

08008eb0 <_fflush_r>:
 8008eb0:	b538      	push	{r3, r4, r5, lr}
 8008eb2:	690b      	ldr	r3, [r1, #16]
 8008eb4:	4605      	mov	r5, r0
 8008eb6:	460c      	mov	r4, r1
 8008eb8:	b913      	cbnz	r3, 8008ec0 <_fflush_r+0x10>
 8008eba:	2500      	movs	r5, #0
 8008ebc:	4628      	mov	r0, r5
 8008ebe:	bd38      	pop	{r3, r4, r5, pc}
 8008ec0:	b118      	cbz	r0, 8008eca <_fflush_r+0x1a>
 8008ec2:	6a03      	ldr	r3, [r0, #32]
 8008ec4:	b90b      	cbnz	r3, 8008eca <_fflush_r+0x1a>
 8008ec6:	f7ff f933 	bl	8008130 <__sinit>
 8008eca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008ece:	2b00      	cmp	r3, #0
 8008ed0:	d0f3      	beq.n	8008eba <_fflush_r+0xa>
 8008ed2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008ed4:	07d0      	lsls	r0, r2, #31
 8008ed6:	d404      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008ed8:	0599      	lsls	r1, r3, #22
 8008eda:	d402      	bmi.n	8008ee2 <_fflush_r+0x32>
 8008edc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008ede:	f7ff fb8c 	bl	80085fa <__retarget_lock_acquire_recursive>
 8008ee2:	4628      	mov	r0, r5
 8008ee4:	4621      	mov	r1, r4
 8008ee6:	f7ff ff5f 	bl	8008da8 <__sflush_r>
 8008eea:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008eec:	07da      	lsls	r2, r3, #31
 8008eee:	4605      	mov	r5, r0
 8008ef0:	d4e4      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef2:	89a3      	ldrh	r3, [r4, #12]
 8008ef4:	059b      	lsls	r3, r3, #22
 8008ef6:	d4e1      	bmi.n	8008ebc <_fflush_r+0xc>
 8008ef8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008efa:	f7ff fb7f 	bl	80085fc <__retarget_lock_release_recursive>
 8008efe:	e7dd      	b.n	8008ebc <_fflush_r+0xc>

08008f00 <__swhatbuf_r>:
 8008f00:	b570      	push	{r4, r5, r6, lr}
 8008f02:	460c      	mov	r4, r1
 8008f04:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008f08:	2900      	cmp	r1, #0
 8008f0a:	b096      	sub	sp, #88	@ 0x58
 8008f0c:	4615      	mov	r5, r2
 8008f0e:	461e      	mov	r6, r3
 8008f10:	da0d      	bge.n	8008f2e <__swhatbuf_r+0x2e>
 8008f12:	89a3      	ldrh	r3, [r4, #12]
 8008f14:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008f18:	f04f 0100 	mov.w	r1, #0
 8008f1c:	bf14      	ite	ne
 8008f1e:	2340      	movne	r3, #64	@ 0x40
 8008f20:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008f24:	2000      	movs	r0, #0
 8008f26:	6031      	str	r1, [r6, #0]
 8008f28:	602b      	str	r3, [r5, #0]
 8008f2a:	b016      	add	sp, #88	@ 0x58
 8008f2c:	bd70      	pop	{r4, r5, r6, pc}
 8008f2e:	466a      	mov	r2, sp
 8008f30:	f000 f848 	bl	8008fc4 <_fstat_r>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	dbec      	blt.n	8008f12 <__swhatbuf_r+0x12>
 8008f38:	9901      	ldr	r1, [sp, #4]
 8008f3a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008f3e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008f42:	4259      	negs	r1, r3
 8008f44:	4159      	adcs	r1, r3
 8008f46:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008f4a:	e7eb      	b.n	8008f24 <__swhatbuf_r+0x24>

08008f4c <__smakebuf_r>:
 8008f4c:	898b      	ldrh	r3, [r1, #12]
 8008f4e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008f50:	079d      	lsls	r5, r3, #30
 8008f52:	4606      	mov	r6, r0
 8008f54:	460c      	mov	r4, r1
 8008f56:	d507      	bpl.n	8008f68 <__smakebuf_r+0x1c>
 8008f58:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008f5c:	6023      	str	r3, [r4, #0]
 8008f5e:	6123      	str	r3, [r4, #16]
 8008f60:	2301      	movs	r3, #1
 8008f62:	6163      	str	r3, [r4, #20]
 8008f64:	b003      	add	sp, #12
 8008f66:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008f68:	ab01      	add	r3, sp, #4
 8008f6a:	466a      	mov	r2, sp
 8008f6c:	f7ff ffc8 	bl	8008f00 <__swhatbuf_r>
 8008f70:	9f00      	ldr	r7, [sp, #0]
 8008f72:	4605      	mov	r5, r0
 8008f74:	4639      	mov	r1, r7
 8008f76:	4630      	mov	r0, r6
 8008f78:	f7ff fbbc 	bl	80086f4 <_malloc_r>
 8008f7c:	b948      	cbnz	r0, 8008f92 <__smakebuf_r+0x46>
 8008f7e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008f82:	059a      	lsls	r2, r3, #22
 8008f84:	d4ee      	bmi.n	8008f64 <__smakebuf_r+0x18>
 8008f86:	f023 0303 	bic.w	r3, r3, #3
 8008f8a:	f043 0302 	orr.w	r3, r3, #2
 8008f8e:	81a3      	strh	r3, [r4, #12]
 8008f90:	e7e2      	b.n	8008f58 <__smakebuf_r+0xc>
 8008f92:	89a3      	ldrh	r3, [r4, #12]
 8008f94:	6020      	str	r0, [r4, #0]
 8008f96:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8008f9a:	81a3      	strh	r3, [r4, #12]
 8008f9c:	9b01      	ldr	r3, [sp, #4]
 8008f9e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008fa2:	b15b      	cbz	r3, 8008fbc <__smakebuf_r+0x70>
 8008fa4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008fa8:	4630      	mov	r0, r6
 8008faa:	f000 f81d 	bl	8008fe8 <_isatty_r>
 8008fae:	b128      	cbz	r0, 8008fbc <__smakebuf_r+0x70>
 8008fb0:	89a3      	ldrh	r3, [r4, #12]
 8008fb2:	f023 0303 	bic.w	r3, r3, #3
 8008fb6:	f043 0301 	orr.w	r3, r3, #1
 8008fba:	81a3      	strh	r3, [r4, #12]
 8008fbc:	89a3      	ldrh	r3, [r4, #12]
 8008fbe:	431d      	orrs	r5, r3
 8008fc0:	81a5      	strh	r5, [r4, #12]
 8008fc2:	e7cf      	b.n	8008f64 <__smakebuf_r+0x18>

08008fc4 <_fstat_r>:
 8008fc4:	b538      	push	{r3, r4, r5, lr}
 8008fc6:	4d07      	ldr	r5, [pc, #28]	@ (8008fe4 <_fstat_r+0x20>)
 8008fc8:	2300      	movs	r3, #0
 8008fca:	4604      	mov	r4, r0
 8008fcc:	4608      	mov	r0, r1
 8008fce:	4611      	mov	r1, r2
 8008fd0:	602b      	str	r3, [r5, #0]
 8008fd2:	f7f9 fe58 	bl	8002c86 <_fstat>
 8008fd6:	1c43      	adds	r3, r0, #1
 8008fd8:	d102      	bne.n	8008fe0 <_fstat_r+0x1c>
 8008fda:	682b      	ldr	r3, [r5, #0]
 8008fdc:	b103      	cbz	r3, 8008fe0 <_fstat_r+0x1c>
 8008fde:	6023      	str	r3, [r4, #0]
 8008fe0:	bd38      	pop	{r3, r4, r5, pc}
 8008fe2:	bf00      	nop
 8008fe4:	20004cc4 	.word	0x20004cc4

08008fe8 <_isatty_r>:
 8008fe8:	b538      	push	{r3, r4, r5, lr}
 8008fea:	4d06      	ldr	r5, [pc, #24]	@ (8009004 <_isatty_r+0x1c>)
 8008fec:	2300      	movs	r3, #0
 8008fee:	4604      	mov	r4, r0
 8008ff0:	4608      	mov	r0, r1
 8008ff2:	602b      	str	r3, [r5, #0]
 8008ff4:	f7f9 fe57 	bl	8002ca6 <_isatty>
 8008ff8:	1c43      	adds	r3, r0, #1
 8008ffa:	d102      	bne.n	8009002 <_isatty_r+0x1a>
 8008ffc:	682b      	ldr	r3, [r5, #0]
 8008ffe:	b103      	cbz	r3, 8009002 <_isatty_r+0x1a>
 8009000:	6023      	str	r3, [r4, #0]
 8009002:	bd38      	pop	{r3, r4, r5, pc}
 8009004:	20004cc4 	.word	0x20004cc4

08009008 <_sbrk_r>:
 8009008:	b538      	push	{r3, r4, r5, lr}
 800900a:	4d06      	ldr	r5, [pc, #24]	@ (8009024 <_sbrk_r+0x1c>)
 800900c:	2300      	movs	r3, #0
 800900e:	4604      	mov	r4, r0
 8009010:	4608      	mov	r0, r1
 8009012:	602b      	str	r3, [r5, #0]
 8009014:	f7f9 fe60 	bl	8002cd8 <_sbrk>
 8009018:	1c43      	adds	r3, r0, #1
 800901a:	d102      	bne.n	8009022 <_sbrk_r+0x1a>
 800901c:	682b      	ldr	r3, [r5, #0]
 800901e:	b103      	cbz	r3, 8009022 <_sbrk_r+0x1a>
 8009020:	6023      	str	r3, [r4, #0]
 8009022:	bd38      	pop	{r3, r4, r5, pc}
 8009024:	20004cc4 	.word	0x20004cc4

08009028 <_init>:
 8009028:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800902a:	bf00      	nop
 800902c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800902e:	bc08      	pop	{r3}
 8009030:	469e      	mov	lr, r3
 8009032:	4770      	bx	lr

08009034 <_fini>:
 8009034:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009036:	bf00      	nop
 8009038:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800903a:	bc08      	pop	{r3}
 800903c:	469e      	mov	lr, r3
 800903e:	4770      	bx	lr
