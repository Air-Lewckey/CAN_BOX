
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000088d0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e68  08008a60  08008a60  00009a60  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a8c8  0800a8c8  0000c06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800a8c8  0800a8c8  0000b8c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a8d0  0800a8d0  0000c06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a8d0  0800a8d0  0000b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800a8d4  0800a8d4  0000b8d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  0800a8d8  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c06c  2**0
                  CONTENTS
 10 .bss          00004c68  2000006c  2000006c  0000c06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20004cd4  20004cd4  0000c06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b90c  00000000  00000000  0000c09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7f  00000000  00000000  000279a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001860  00000000  00000000  0002b628  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012fe  00000000  00000000  0002ce88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f88  00000000  00000000  0002e186  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a9aa  00000000  00000000  0005310e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da6e9  00000000  00000000  0006dab8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  001481a1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006ec4  00000000  00000000  001481e4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0014f0a8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008a48 	.word	0x08008a48

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008a48 	.word	0x08008a48

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <CAN_App_Init>:
  * @brief  CAN应用初始化
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // 初始化MCP2515 (500Kbps波特率)
    if (MCP2515_Init(MCP2515_BAUD_500K) != MCP2515_OK) {
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 ff21 	bl	80013e8 <MCP2515_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <CAN_App_Init+0x1a>
        printf("MCP2515 initialization failed!\r\n");
 80005ac:	480e      	ldr	r0, [pc, #56]	@ (80005e8 <CAN_App_Init+0x4c>)
 80005ae:	f007 fb6d 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e015      	b.n	80005e2 <CAN_App_Init+0x46>
    }
    
    printf("MCP2515 initialization successful!\r\n");
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <CAN_App_Init+0x50>)
 80005b8:	f007 fb68 	bl	8007c8c <puts>
    
    // 配置接收过滤器 (接收所有消息)
    MCP2515_SetMask(0, 0x00000000, 0);  // 掩码0: 接收所有标准帧
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 ff53 	bl	800146c <MCP2515_SetMask>
    MCP2515_SetMask(1, 0x00000000, 0);  // 掩码1: 接收所有标准帧
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 ff4e 	bl	800146c <MCP2515_SetMask>
    
    // 打印初始状态
    MCP2515_PrintStatus();
 80005d0:	f001 f8e8 	bl	80017a4 <MCP2515_PrintStatus>
    
    can_app_initialized = 1;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <CAN_App_Init+0x54>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
    
    printf("CAN application initialization completed!\r\n");
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <CAN_App_Init+0x58>)
 80005dc:	f007 fb56 	bl	8007c8c <puts>
    return CAN_APP_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08008a60 	.word	0x08008a60
 80005ec:	08008a80 	.word	0x08008a80
 80005f0:	20000094 	.word	0x20000094
 80005f4:	08008aa4 	.word	0x08008aa4

080005f8 <CAN_App_GetStats>:
  * @brief  获取CAN应用统计信息
  * @param  stats: 统计信息结构体指针
  * @retval None
  */
void CAN_App_GetStats(CAN_App_Stats_t *stats)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00f      	beq.n	8000626 <CAN_App_GetStats+0x2e>
        stats->tx_count = can_tx_counter;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <CAN_App_GetStats+0x3c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
        stats->rx_count = can_rx_counter;
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <CAN_App_GetStats+0x40>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
        stats->error_count = can_error_counter;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <CAN_App_GetStats+0x44>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	609a      	str	r2, [r3, #8]
        stats->initialized = can_app_initialized;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <CAN_App_GetStats+0x48>)
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	751a      	strb	r2, [r3, #20]
    }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000088 	.word	0x20000088
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000090 	.word	0x20000090
 8000640:	20000094 	.word	0x20000094

08000644 <CAN_SendTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANSendTask中调用
  */
void CAN_SendTask_Main(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	@ 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    uint32_t last_heartbeat = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t last_data_send = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_time;
    
    printf("CAN send task started\r\n");
 8000654:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <CAN_SendTask_Main+0xac>)
 8000656:	f007 fb19 	bl	8007c8c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 800065a:	e002      	b.n	8000662 <CAN_SendTask_Main+0x1e>
        osDelay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f004 fb8b 	bl	8004d78 <osDelay>
    while (!can_app_initialized) {
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <CAN_SendTask_Main+0xb0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f8      	beq.n	800065c <CAN_SendTask_Main+0x18>
    }
    
    for (;;) {
        current_time = HAL_GetTick();
 800066a:	f002 f8ed 	bl	8002848 <HAL_GetTick>
 800066e:	6278      	str	r0, [r7, #36]	@ 0x24
        
        // 每1秒发送一次心跳消息
        if ((current_time - last_heartbeat) >= 1000) {
 8000670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800067a:	d303      	bcc.n	8000684 <CAN_SendTask_Main+0x40>
            CAN_SendHeartbeat();
 800067c:	f000 f846 	bl	800070c <CAN_SendHeartbeat>
            last_heartbeat = current_time;
 8000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        
        // 每2秒发送一次测试数据
        if ((current_time - last_data_send) >= 2000) {
 8000684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800068e:	d303      	bcc.n	8000698 <CAN_SendTask_Main+0x54>
            CAN_SendTestData();
 8000690:	f000 f892 	bl	80007b8 <CAN_SendTestData>
            last_data_send = current_time;
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        // 检查是否有来自队列的发送请求
        CAN_QueueMessage_t queue_msg;
        if (osMessageQueueGet(myQueue01Handle, &queue_msg, NULL, 10) == osOK) {
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <CAN_SendTask_Main+0xb4>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	230a      	movs	r3, #10
 80006a2:	2200      	movs	r2, #0
 80006a4:	f004 fbf6 	bl	8004e94 <osMessageQueueGet>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d11c      	bne.n	80006e8 <CAN_SendTask_Main+0xa4>
            // 处理队列中的发送请求
            if (MCP2515_SendMessage(&queue_msg.message) == MCP2515_OK) {
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff5e 	bl	8001574 <MCP2515_SendMessage>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10a      	bne.n	80006d4 <CAN_SendTask_Main+0x90>
                can_tx_counter++;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <CAN_SendTask_Main+0xb8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <CAN_SendTask_Main+0xb8>)
 80006c6:	6013      	str	r3, [r2, #0]
                printf("Queue message sent successfully, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <CAN_SendTask_Main+0xbc>)
 80006ce:	f007 fa75 	bl	8007bbc <iprintf>
 80006d2:	e009      	b.n	80006e8 <CAN_SendTask_Main+0xa4>
            } else {
                can_error_counter++;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <CAN_SendTask_Main+0xc0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <CAN_SendTask_Main+0xc0>)
 80006dc:	6013      	str	r3, [r2, #0]
                printf("Queue message send failed, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4809      	ldr	r0, [pc, #36]	@ (8000708 <CAN_SendTask_Main+0xc4>)
 80006e4:	f007 fa6a 	bl	8007bbc <iprintf>
            }
        }
        
        osDelay(50);  // 50ms周期
 80006e8:	2032      	movs	r0, #50	@ 0x32
 80006ea:	f004 fb45 	bl	8004d78 <osDelay>
    for (;;) {
 80006ee:	e7bc      	b.n	800066a <CAN_SendTask_Main+0x26>
 80006f0:	08008ad0 	.word	0x08008ad0
 80006f4:	20000094 	.word	0x20000094
 80006f8:	20000144 	.word	0x20000144
 80006fc:	20000088 	.word	0x20000088
 8000700:	08008ae8 	.word	0x08008ae8
 8000704:	20000090 	.word	0x20000090
 8000708:	08008b18 	.word	0x08008b18

0800070c <CAN_SendHeartbeat>:
  * @brief  发送心跳消息
  * @param  None
  * @retval None
  */
static void CAN_SendHeartbeat(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t heartbeat;
    
    // 构造心跳消息
    heartbeat.id = CAN_HEARTBEAT_ID;
 8000712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000716:	603b      	str	r3, [r7, #0]
    heartbeat.ide = 0;  // 标准帧
 8000718:	2300      	movs	r3, #0
 800071a:	713b      	strb	r3, [r7, #4]
    heartbeat.rtr = 0;  // 数据帧
 800071c:	2300      	movs	r3, #0
 800071e:	717b      	strb	r3, [r7, #5]
    heartbeat.dlc = 8;  // 8字节数据
 8000720:	2308      	movs	r3, #8
 8000722:	71bb      	strb	r3, [r7, #6]
    
    // 填充心跳数据
    heartbeat.data[0] = 0xAA;  // 心跳标识
 8000724:	23aa      	movs	r3, #170	@ 0xaa
 8000726:	71fb      	strb	r3, [r7, #7]
    heartbeat.data[1] = 0x55;
 8000728:	2355      	movs	r3, #85	@ 0x55
 800072a:	723b      	strb	r3, [r7, #8]
    heartbeat.data[2] = (uint8_t)(can_tx_counter >> 24);
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	0e1b      	lsrs	r3, r3, #24
 8000732:	b2db      	uxtb	r3, r3
 8000734:	727b      	strb	r3, [r7, #9]
    heartbeat.data[3] = (uint8_t)(can_tx_counter >> 16);
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	b2db      	uxtb	r3, r3
 800073e:	72bb      	strb	r3, [r7, #10]
    heartbeat.data[4] = (uint8_t)(can_tx_counter >> 8);
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	72fb      	strb	r3, [r7, #11]
    heartbeat.data[5] = (uint8_t)can_tx_counter;
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	733b      	strb	r3, [r7, #12]
    heartbeat.data[6] = (uint8_t)(HAL_GetTick() >> 8);
 8000752:	f002 f879 	bl	8002848 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b2db      	uxtb	r3, r3
 800075c:	737b      	strb	r3, [r7, #13]
    heartbeat.data[7] = (uint8_t)HAL_GetTick();
 800075e:	f002 f873 	bl	8002848 <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	73bb      	strb	r3, [r7, #14]
    
    // 发送心跳消息
    if (MCP2515_SendMessage(&heartbeat) == MCP2515_OK) {
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ff02 	bl	8001574 <MCP2515_SendMessage>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10b      	bne.n	800078e <CAN_SendHeartbeat+0x82>
        can_tx_counter++;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800077e:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message sent successfully [%lu]\r\n", can_tx_counter);
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <CAN_SendHeartbeat+0xa0>)
 8000788:	f007 fa18 	bl	8007bbc <iprintf>
    } else {
        can_error_counter++;
        printf("Heartbeat message send failed\r\n");
    }
}
 800078c:	e007      	b.n	800079e <CAN_SendHeartbeat+0x92>
        can_error_counter++;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <CAN_SendHeartbeat+0xa4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <CAN_SendHeartbeat+0xa4>)
 8000796:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message send failed\r\n");
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <CAN_SendHeartbeat+0xa8>)
 800079a:	f007 fa77 	bl	8007c8c <puts>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000088 	.word	0x20000088
 80007ac:	08008b40 	.word	0x08008b40
 80007b0:	20000090 	.word	0x20000090
 80007b4:	08008b6c 	.word	0x08008b6c

080007b8 <CAN_SendTestData>:
  * @brief  发送测试数据
  * @param  None
  * @retval None
  */
static void CAN_SendTestData(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_data;
    static uint16_t data_counter = 0;
    
    // 构造测试数据消息
    test_data.id = CAN_DATA_ID;
 80007be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007c2:	603b      	str	r3, [r7, #0]
    test_data.ide = 0;  // 标准帧
 80007c4:	2300      	movs	r3, #0
 80007c6:	713b      	strb	r3, [r7, #4]
    test_data.rtr = 0;  // 数据帧
 80007c8:	2300      	movs	r3, #0
 80007ca:	717b      	strb	r3, [r7, #5]
    test_data.dlc = 6;  // 6字节数据
 80007cc:	2306      	movs	r3, #6
 80007ce:	71bb      	strb	r3, [r7, #6]
    
    // 填充测试数据
    test_data.data[0] = 0x12;  // 数据标识
 80007d0:	2312      	movs	r3, #18
 80007d2:	71fb      	strb	r3, [r7, #7]
    test_data.data[1] = 0x34;
 80007d4:	2334      	movs	r3, #52	@ 0x34
 80007d6:	723b      	strb	r3, [r7, #8]
    test_data.data[2] = (uint8_t)(data_counter >> 8);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <CAN_SendTestData+0x98>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	727b      	strb	r3, [r7, #9]
    test_data.data[3] = (uint8_t)data_counter;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <CAN_SendTestData+0x98>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72bb      	strb	r3, [r7, #10]
    test_data.data[4] = (uint8_t)(HAL_GetTick() >> 16);
 80007ec:	f002 f82c 	bl	8002848 <HAL_GetTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	72fb      	strb	r3, [r7, #11]
    test_data.data[5] = (uint8_t)(HAL_GetTick() >> 8);
 80007f8:	f002 f826 	bl	8002848 <HAL_GetTick>
 80007fc:	4603      	mov	r3, r0
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	733b      	strb	r3, [r7, #12]
    
    // 发送测试数据
    if (MCP2515_SendMessage(&test_data) == MCP2515_OK) {
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f000 feb4 	bl	8001574 <MCP2515_SendMessage>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d111      	bne.n	8000836 <CAN_SendTestData+0x7e>
        can_tx_counter++;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <CAN_SendTestData+0x9c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <CAN_SendTestData+0x9c>)
 800081a:	6013      	str	r3, [r2, #0]
        data_counter++;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <CAN_SendTestData+0x98>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <CAN_SendTestData+0x98>)
 8000826:	801a      	strh	r2, [r3, #0]
        printf("Test data sent successfully, count: %d\r\n", data_counter);
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <CAN_SendTestData+0x98>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	480a      	ldr	r0, [pc, #40]	@ (8000858 <CAN_SendTestData+0xa0>)
 8000830:	f007 f9c4 	bl	8007bbc <iprintf>
    } else {
        can_error_counter++;
        printf("Test data send failed\r\n");
    }
}
 8000834:	e007      	b.n	8000846 <CAN_SendTestData+0x8e>
        can_error_counter++;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <CAN_SendTestData+0xa4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <CAN_SendTestData+0xa4>)
 800083e:	6013      	str	r3, [r2, #0]
        printf("Test data send failed\r\n");
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <CAN_SendTestData+0xa8>)
 8000842:	f007 fa23 	bl	8007c8c <puts>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000096 	.word	0x20000096
 8000854:	20000088 	.word	0x20000088
 8000858:	08008b8c 	.word	0x08008b8c
 800085c:	20000090 	.word	0x20000090
 8000860:	08008bb8 	.word	0x08008bb8

08000864 <CAN_ReceiveTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANReceiveTask中调用
  */
void CAN_ReceiveTask_Main(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    MCP2515_CANMessage_t received_message;
    
    printf("CAN receive task started\r\n");
 800086c:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <CAN_ReceiveTask_Main+0x74>)
 800086e:	f007 fa0d 	bl	8007c8c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 8000872:	e002      	b.n	800087a <CAN_ReceiveTask_Main+0x16>
        osDelay(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f004 fa7f 	bl	8004d78 <osDelay>
    while (!can_app_initialized) {
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <CAN_ReceiveTask_Main+0x78>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f8      	beq.n	8000874 <CAN_ReceiveTask_Main+0x10>
    }
    
    for (;;) {
        // 检查是否有消息接收
        if (MCP2515_CheckReceive()) {
 8000882:	f000 ff01 	bl	8001688 <MCP2515_CheckReceive>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d020      	beq.n	80008ce <CAN_ReceiveTask_Main+0x6a>
            // 接收消息
            if (MCP2515_ReceiveMessage(&received_message) == MCP2515_OK) {
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fec5 	bl	8001620 <MCP2515_ReceiveMessage>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d110      	bne.n	80008be <CAN_ReceiveTask_Main+0x5a>
                can_rx_counter++;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <CAN_ReceiveTask_Main+0x7c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <CAN_ReceiveTask_Main+0x7c>)
 80008a4:	6013      	str	r3, [r2, #0]
                
                // 打印接收到的消息
                CAN_PrintMessage("Received", &received_message);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <CAN_ReceiveTask_Main+0x80>)
 80008ae:	f000 f91f 	bl	8000af0 <CAN_PrintMessage>
                
                // 处理接收到的消息
                CAN_ProcessReceivedMessage(&received_message);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f81a 	bl	80008f0 <CAN_ProcessReceivedMessage>
 80008bc:	e007      	b.n	80008ce <CAN_ReceiveTask_Main+0x6a>
            } else {
                can_error_counter++;
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <CAN_ReceiveTask_Main+0x84>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <CAN_ReceiveTask_Main+0x84>)
 80008c6:	6013      	str	r3, [r2, #0]
                printf("Message receive failed\r\n");
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <CAN_ReceiveTask_Main+0x88>)
 80008ca:	f007 f9df 	bl	8007c8c <puts>
            }
        }
        
        osDelay(10);  // 10ms周期检查
 80008ce:	200a      	movs	r0, #10
 80008d0:	f004 fa52 	bl	8004d78 <osDelay>
        if (MCP2515_CheckReceive()) {
 80008d4:	e7d5      	b.n	8000882 <CAN_ReceiveTask_Main+0x1e>
 80008d6:	bf00      	nop
 80008d8:	08008bd0 	.word	0x08008bd0
 80008dc:	20000094 	.word	0x20000094
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	08008bec 	.word	0x08008bec
 80008e8:	20000090 	.word	0x20000090
 80008ec:	08008bf8 	.word	0x08008bf8

080008f0 <CAN_ProcessReceivedMessage>:
  * @brief  处理接收到的CAN消息
  * @param  message: 接收到的消息
  * @retval None
  */
static void CAN_ProcessReceivedMessage(MCP2515_CANMessage_t *message)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    switch (message->id) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000900:	d036      	beq.n	8000970 <CAN_ProcessReceivedMessage+0x80>
 8000902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000906:	d837      	bhi.n	8000978 <CAN_ProcessReceivedMessage+0x88>
 8000908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800090c:	d003      	beq.n	8000916 <CAN_ProcessReceivedMessage+0x26>
 800090e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000912:	d010      	beq.n	8000936 <CAN_ProcessReceivedMessage+0x46>
 8000914:	e030      	b.n	8000978 <CAN_ProcessReceivedMessage+0x88>
        case CAN_HEARTBEAT_ID:
            // 处理心跳消息
            if (message->dlc >= 2 && message->data[0] == 0xAA && message->data[1] == 0x55) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d933      	bls.n	8000986 <CAN_ProcessReceivedMessage+0x96>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	79db      	ldrb	r3, [r3, #7]
 8000922:	2baa      	cmp	r3, #170	@ 0xaa
 8000924:	d12f      	bne.n	8000986 <CAN_ProcessReceivedMessage+0x96>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a1b      	ldrb	r3, [r3, #8]
 800092a:	2b55      	cmp	r3, #85	@ 0x55
 800092c:	d12b      	bne.n	8000986 <CAN_ProcessReceivedMessage+0x96>
                printf("Heartbeat message received\r\n");
 800092e:	4819      	ldr	r0, [pc, #100]	@ (8000994 <CAN_ProcessReceivedMessage+0xa4>)
 8000930:	f007 f9ac 	bl	8007c8c <puts>
            }
            break;
 8000934:	e027      	b.n	8000986 <CAN_ProcessReceivedMessage+0x96>
            
        case CAN_DATA_ID:
            // 处理数据消息
            if (message->dlc >= 2 && message->data[0] == 0x12 && message->data[1] == 0x34) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d925      	bls.n	800098a <CAN_ProcessReceivedMessage+0x9a>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	79db      	ldrb	r3, [r3, #7]
 8000942:	2b12      	cmp	r3, #18
 8000944:	d121      	bne.n	800098a <CAN_ProcessReceivedMessage+0x9a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7a1b      	ldrb	r3, [r3, #8]
 800094a:	2b34      	cmp	r3, #52	@ 0x34
 800094c:	d11d      	bne.n	800098a <CAN_ProcessReceivedMessage+0x9a>
                uint16_t counter = (message->data[2] << 8) | message->data[3];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7a5b      	ldrb	r3, [r3, #9]
 8000952:	b21b      	sxth	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7a9b      	ldrb	r3, [r3, #10]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	81fb      	strh	r3, [r7, #14]
                printf("Test data received, count: %d\r\n", counter);
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	@ (8000998 <CAN_ProcessReceivedMessage+0xa8>)
 800096a:	f007 f927 	bl	8007bbc <iprintf>
            }
            break;
 800096e:	e00c      	b.n	800098a <CAN_ProcessReceivedMessage+0x9a>
            
        case CAN_STATUS_ID:
            // 处理状态消息
            printf("Status message received\r\n");
 8000970:	480a      	ldr	r0, [pc, #40]	@ (800099c <CAN_ProcessReceivedMessage+0xac>)
 8000972:	f007 f98b 	bl	8007c8c <puts>
            break;
 8000976:	e009      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            
        default:
            // 处理其他消息
            printf("Unknown message received, ID: 0x%03X\r\n", (unsigned int)message->id);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <CAN_ProcessReceivedMessage+0xb0>)
 8000980:	f007 f91c 	bl	8007bbc <iprintf>
            break;
 8000984:	e002      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            break;
 8000986:	bf00      	nop
 8000988:	e000      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            break;
 800098a:	bf00      	nop
    }
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	08008c10 	.word	0x08008c10
 8000998:	08008c2c 	.word	0x08008c2c
 800099c:	08008c4c 	.word	0x08008c4c
 80009a0:	08008c68 	.word	0x08008c68

080009a4 <CAN_App_SelfTest>:
  * @brief  CAN应用自检测试
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_SelfTest(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
    printf("Starting CAN application self-test...\r\n");
 80009aa:	4845      	ldr	r0, [pc, #276]	@ (8000ac0 <CAN_App_SelfTest+0x11c>)
 80009ac:	f007 f96e 	bl	8007c8c <puts>
    
    // 检查MCP2515硬件
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80009b0:	f000 fece 	bl	8001750 <MCP2515_SelfTest>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <CAN_App_SelfTest+0x20>
        printf("MCP2515 hardware test failed!\r\n");
 80009ba:	4842      	ldr	r0, [pc, #264]	@ (8000ac4 <CAN_App_SelfTest+0x120>)
 80009bc:	f007 f966 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e078      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("MCP2515 hardware test passed\r\n");
 80009c4:	4840      	ldr	r0, [pc, #256]	@ (8000ac8 <CAN_App_SelfTest+0x124>)
 80009c6:	f007 f961 	bl	8007c8c <puts>
    
    // 检查回环模式
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80009ca:	2040      	movs	r0, #64	@ 0x40
 80009cc:	f000 fcaa 	bl	8001324 <MCP2515_SetMode>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <CAN_App_SelfTest+0x3c>
        printf("Set loopback mode failed!\r\n");
 80009d6:	483d      	ldr	r0, [pc, #244]	@ (8000acc <CAN_App_SelfTest+0x128>)
 80009d8:	f007 f958 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e06a      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback mode set successfully\r\n");
 80009e0:	483b      	ldr	r0, [pc, #236]	@ (8000ad0 <CAN_App_SelfTest+0x12c>)
 80009e2:	f007 f953 	bl	8007c8c <puts>
    
    // 发送测试消息
    MCP2515_CANMessage_t test_msg;
    test_msg.id = 0x123;
 80009e6:	f240 1323 	movw	r3, #291	@ 0x123
 80009ea:	617b      	str	r3, [r7, #20]
    test_msg.ide = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	763b      	strb	r3, [r7, #24]
    test_msg.rtr = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	767b      	strb	r3, [r7, #25]
    test_msg.dlc = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	76bb      	strb	r3, [r7, #26]
    for (int i = 0; i < 8; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fc:	e00c      	b.n	8000a18 <CAN_App_SelfTest+0x74>
        test_msg.data[i] = i + 1;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2d9      	uxtb	r1, r3
 8000a06:	f107 021b 	add.w	r2, r7, #27
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	4413      	add	r3, r2
 8000a0e:	460a      	mov	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	3301      	adds	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	ddef      	ble.n	80009fe <CAN_App_SelfTest+0x5a>
    }
    
    if (MCP2515_SendMessage(&test_msg) != MCP2515_OK) {
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fda6 	bl	8001574 <MCP2515_SendMessage>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d004      	beq.n	8000a38 <CAN_App_SelfTest+0x94>
        printf("Loopback test message send failed!\r\n");
 8000a2e:	4829      	ldr	r0, [pc, #164]	@ (8000ad4 <CAN_App_SelfTest+0x130>)
 8000a30:	f007 f92c 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e03e      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback test message sent successfully\r\n");
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <CAN_App_SelfTest+0x134>)
 8000a3a:	f007 f927 	bl	8007c8c <puts>
    
    // 等待并接收消息
    osDelay(100);
 8000a3e:	2064      	movs	r0, #100	@ 0x64
 8000a40:	f004 f99a 	bl	8004d78 <osDelay>
    
    MCP2515_CANMessage_t received_msg;
    if (MCP2515_ReceiveMessage(&received_msg) == MCP2515_OK) {
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fdea 	bl	8001620 <MCP2515_ReceiveMessage>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d123      	bne.n	8000a9a <CAN_App_SelfTest+0xf6>
        // 验证接收到的消息
        if (received_msg.id == test_msg.id && 
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d11a      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            received_msg.dlc == test_msg.dlc &&
 8000a5a:	7aba      	ldrb	r2, [r7, #10]
 8000a5c:	7ebb      	ldrb	r3, [r7, #26]
        if (received_msg.id == test_msg.id && 
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d116      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            memcmp(received_msg.data, test_msg.data, test_msg.dlc) == 0) {
 8000a62:	7ebb      	ldrb	r3, [r7, #26]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	1dd9      	adds	r1, r3, #7
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	3307      	adds	r3, #7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 f9eb 	bl	8007e4c <memcmp>
 8000a76:	4603      	mov	r3, r0
            received_msg.dlc == test_msg.dlc &&
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            printf("Loopback test successful!\r\n");
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <CAN_App_SelfTest+0x138>)
 8000a7e:	f007 f905 	bl	8007c8c <puts>
        printf("Loopback test message receive failed!\r\n");
        return CAN_APP_ERROR;
    }
    
    // 恢复正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fc4e 	bl	8001324 <MCP2515_SetMode>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00f      	beq.n	8000aae <CAN_App_SelfTest+0x10a>
 8000a8e:	e009      	b.n	8000aa4 <CAN_App_SelfTest+0x100>
            printf("Loopback test data mismatch!\r\n");
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <CAN_App_SelfTest+0x13c>)
 8000a92:	f007 f8fb 	bl	8007c8c <puts>
            return CAN_APP_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00d      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
        printf("Loopback test message receive failed!\r\n");
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <CAN_App_SelfTest+0x140>)
 8000a9c:	f007 f8f6 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e008      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
        printf("Restore normal mode failed!\r\n");
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <CAN_App_SelfTest+0x144>)
 8000aa6:	f007 f8f1 	bl	8007c8c <puts>
        return CAN_APP_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e003      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("CAN application self-test completed!\r\n");
 8000aae:	480f      	ldr	r0, [pc, #60]	@ (8000aec <CAN_App_SelfTest+0x148>)
 8000ab0:	f007 f8ec 	bl	8007c8c <puts>
    return CAN_APP_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	08008d1c 	.word	0x08008d1c
 8000ac4:	08008d44 	.word	0x08008d44
 8000ac8:	08008d64 	.word	0x08008d64
 8000acc:	08008d84 	.word	0x08008d84
 8000ad0:	08008da0 	.word	0x08008da0
 8000ad4:	08008dc0 	.word	0x08008dc0
 8000ad8:	08008de4 	.word	0x08008de4
 8000adc:	08008e10 	.word	0x08008e10
 8000ae0:	08008e2c 	.word	0x08008e2c
 8000ae4:	08008e4c 	.word	0x08008e4c
 8000ae8:	08008e74 	.word	0x08008e74
 8000aec:	08008e94 	.word	0x08008e94

08000af0 <CAN_PrintMessage>:
  * @param  prefix: 前缀字符串
  * @param  message: CAN消息指针
  * @retval None
  */
static void CAN_PrintMessage(const char *prefix, MCP2515_CANMessage_t *message)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
           prefix,
           (unsigned int)message->id,
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6819      	ldr	r1, [r3, #0]
           message->ide ? "Extended" : "Standard",
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	791b      	ldrb	r3, [r3, #4]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <CAN_PrintMessage+0x1a>
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <CAN_PrintMessage+0x84>)
 8000b08:	e000      	b.n	8000b0c <CAN_PrintMessage+0x1c>
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <CAN_PrintMessage+0x88>)
           message->rtr ? "Remote" : "Data",
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <CAN_PrintMessage+0x28>
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <CAN_PrintMessage+0x8c>)
 8000b16:	e000      	b.n	8000b1a <CAN_PrintMessage+0x2a>
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <CAN_PrintMessage+0x90>)
           message->dlc);
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	7992      	ldrb	r2, [r2, #6]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b1e:	9201      	str	r2, [sp, #4]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <CAN_PrintMessage+0x94>)
 8000b2a:	f007 f847 	bl	8007bbc <iprintf>
    
    if (!message->rtr) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d117      	bne.n	8000b66 <CAN_PrintMessage+0x76>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	e00b      	b.n	8000b54 <CAN_PrintMessage+0x64>
            printf("%02X ", message->data[i]);
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3307      	adds	r3, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <CAN_PrintMessage+0x98>)
 8000b4a:	f007 f837 	bl	8007bbc <iprintf>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	da02      	bge.n	8000b66 <CAN_PrintMessage+0x76>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	ddea      	ble.n	8000b3c <CAN_PrintMessage+0x4c>
        }
    }
    
    printf("\r\n");
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <CAN_PrintMessage+0x9c>)
 8000b68:	f007 f890 	bl	8007c8c <puts>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08008ebc 	.word	0x08008ebc
 8000b78:	08008ec8 	.word	0x08008ec8
 8000b7c:	08008ed4 	.word	0x08008ed4
 8000b80:	08008edc 	.word	0x08008edc
 8000b84:	08008ee4 	.word	0x08008ee4
 8000b88:	08008f14 	.word	0x08008f14
 8000b8c:	08008f1c 	.word	0x08008f1c

08000b90 <CAN_App_PrintStatus>:
  * @brief  打印CAN应用状态
  * @param  None
  * @retval None
  */
void CAN_App_PrintStatus(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
    CAN_App_Stats_t stats;
    CAN_App_GetStats(&stats);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd2d 	bl	80005f8 <CAN_App_GetStats>
    
    printf("\r\n=== CAN Application Status ===\r\n");
 8000b9e:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <CAN_App_PrintStatus+0x80>)
 8000ba0:	f007 f874 	bl	8007c8c <puts>
    printf("Initialization Status: %s\r\n", stats.initialized ? "Initialized" : "Not Initialized");
 8000ba4:	7d3b      	ldrb	r3, [r7, #20]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <CAN_App_PrintStatus+0x1e>
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <CAN_App_PrintStatus+0x84>)
 8000bac:	e000      	b.n	8000bb0 <CAN_App_PrintStatus+0x20>
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <CAN_App_PrintStatus+0x88>)
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <CAN_App_PrintStatus+0x8c>)
 8000bb4:	f007 f802 	bl	8007bbc <iprintf>
    printf("TX Count: %lu\r\n", stats.tx_count);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4818      	ldr	r0, [pc, #96]	@ (8000c20 <CAN_App_PrintStatus+0x90>)
 8000bbe:	f006 fffd 	bl	8007bbc <iprintf>
    printf("RX Count: %lu\r\n", stats.rx_count);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4817      	ldr	r0, [pc, #92]	@ (8000c24 <CAN_App_PrintStatus+0x94>)
 8000bc8:	f006 fff8 	bl	8007bbc <iprintf>
    printf("Error Count: %lu\r\n", stats.error_count);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <CAN_App_PrintStatus+0x98>)
 8000bd2:	f006 fff3 	bl	8007bbc <iprintf>
    printf("TX Buffer Free: %d\r\n", MCP2515_CheckTransmit());
 8000bd6:	f000 fd6a 	bl	80016ae <MCP2515_CheckTransmit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	@ (8000c2c <CAN_App_PrintStatus+0x9c>)
 8000be0:	f006 ffec 	bl	8007bbc <iprintf>
    printf("RX Status: %s\r\n", MCP2515_CheckReceive() ? "Message Available" : "No Message");
 8000be4:	f000 fd50 	bl	8001688 <MCP2515_CheckReceive>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <CAN_App_PrintStatus+0x62>
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <CAN_App_PrintStatus+0xa0>)
 8000bf0:	e000      	b.n	8000bf4 <CAN_App_PrintStatus+0x64>
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <CAN_App_PrintStatus+0xa4>)
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <CAN_App_PrintStatus+0xa8>)
 8000bf8:	f006 ffe0 	bl	8007bbc <iprintf>
    
    // 打印MCP2515状态
    MCP2515_PrintStatus();
 8000bfc:	f000 fdd2 	bl	80017a4 <MCP2515_PrintStatus>
    
    printf("==================\r\n\r\n");
 8000c00:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <CAN_App_PrintStatus+0xac>)
 8000c02:	f007 f843 	bl	8007c8c <puts>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08008f20 	.word	0x08008f20
 8000c14:	08008f44 	.word	0x08008f44
 8000c18:	08008f50 	.word	0x08008f50
 8000c1c:	08008f60 	.word	0x08008f60
 8000c20:	08008f7c 	.word	0x08008f7c
 8000c24:	08008f8c 	.word	0x08008f8c
 8000c28:	08008f9c 	.word	0x08008f9c
 8000c2c:	08008fb0 	.word	0x08008fb0
 8000c30:	08008fc8 	.word	0x08008fc8
 8000c34:	08008fdc 	.word	0x08008fdc
 8000c38:	08008fe8 	.word	0x08008fe8
 8000c3c:	08008ff8 	.word	0x08008ff8

08000c40 <CAN_App_IRQ_Callback>:
  * @retval None
  * @note   此函数在外部中断服务程序中被调用
  *         用于处理MCP2515的中断信号
  */
void CAN_App_IRQ_Callback(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
    // 可以在这里设置事件标志或信号量来通知任务
    // 这里暂时不做具体处理，实际处理在接收任务的轮询中进行
    
    // 如果需要立即处理，可以发送信号给接收任务
    // 例如：osThreadFlagsSet(CANReceiveTaskHandle, 0x01);
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 fdc2 	bl	80027dc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f89a 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 f962 	bl	8000f24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c60:	f000 f900 	bl	8000e64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c64:	f000 f934 	bl	8000ed0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化CAN应用
  printf("\r\n=== STM32F407 + MCP2515 CAN Communication System Startup ===\r\n");
 8000c68:	4833      	ldr	r0, [pc, #204]	@ (8000d38 <main+0xe8>)
 8000c6a:	f007 f80f 	bl	8007c8c <puts>
  printf("System Clock: %lu MHz\r\n", HAL_RCC_GetHCLKFreq() / 1000000);
 8000c6e:	f002 fd3b 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <main+0xec>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4830      	ldr	r0, [pc, #192]	@ (8000d40 <main+0xf0>)
 8000c80:	f006 ff9c 	bl	8007bbc <iprintf>
  printf("SPI1 Clock: %lu MHz\r\n", HAL_RCC_GetPCLK2Freq() / 1000000 / 32);  // SPI1预分频32
 8000c84:	f002 fd50 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <main+0xec>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	0ddb      	lsrs	r3, r3, #23
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	@ (8000d44 <main+0xf4>)
 8000c96:	f006 ff91 	bl	8007bbc <iprintf>
  
  // 延时等待硬件稳定
  HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	@ 0x64
 8000c9c:	f001 fde0 	bl	8002860 <HAL_Delay>
  
  // 初始化CAN应用
  if (CAN_App_Init() == CAN_APP_OK) {
 8000ca0:	f7ff fc7c 	bl	800059c <CAN_App_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d114      	bne.n	8000cd4 <main+0x84>
    printf("CAN application initialization successful!\r\n");
 8000caa:	4827      	ldr	r0, [pc, #156]	@ (8000d48 <main+0xf8>)
 8000cac:	f006 ffee 	bl	8007c8c <puts>
    
    // 执行自检测试
    if (CAN_App_SelfTest() == CAN_APP_OK) {
 8000cb0:	f7ff fe78 	bl	80009a4 <CAN_App_SelfTest>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <main+0x72>
      printf("CAN self-test passed!\r\n");
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <main+0xfc>)
 8000cbc:	f006 ffe6 	bl	8007c8c <puts>
 8000cc0:	e010      	b.n	8000ce4 <main+0x94>
    } else {
      printf("CAN self-test failed!\r\n");
 8000cc2:	4823      	ldr	r0, [pc, #140]	@ (8000d50 <main+0x100>)
 8000cc4:	f006 ffe2 	bl	8007c8c <puts>
      // If self-test fails, run diagnosis
      printf("\r\nWARNING: CAN communication problem detected, starting diagnosis...\r\n");
 8000cc8:	4822      	ldr	r0, [pc, #136]	@ (8000d54 <main+0x104>)
 8000cca:	f006 ffdf 	bl	8007c8c <puts>
      CAN_DiagnoseAndFix();
 8000cce:	f001 fae1 	bl	8002294 <CAN_DiagnoseAndFix>
 8000cd2:	e007      	b.n	8000ce4 <main+0x94>
    }
  } else {
    printf("CAN application initialization failed!\r\n");
 8000cd4:	4820      	ldr	r0, [pc, #128]	@ (8000d58 <main+0x108>)
 8000cd6:	f006 ffd9 	bl	8007c8c <puts>
    // If initialization fails, run diagnosis
    printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 8000cda:	4820      	ldr	r0, [pc, #128]	@ (8000d5c <main+0x10c>)
 8000cdc:	f006 ffd6 	bl	8007c8c <puts>
    CAN_DiagnoseAndFix();
 8000ce0:	f001 fad8 	bl	8002294 <CAN_DiagnoseAndFix>
  }
  
  printf("System initialization completed, starting operation...\r\n\r\n");
 8000ce4:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <main+0x110>)
 8000ce6:	f006 ffd1 	bl	8007c8c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cea:	f003 ff69 	bl	8004bc0 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 8000cee:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <main+0x114>)
 8000cf0:	210d      	movs	r1, #13
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f004 f85b 	bl	8004dae <osMessageQueueNew>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <main+0x118>)
 8000cfc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <main+0x11c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	481b      	ldr	r0, [pc, #108]	@ (8000d70 <main+0x120>)
 8000d04:	f003 ffa6 	bl	8004c54 <osThreadNew>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <main+0x124>)
 8000d0c:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 8000d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d78 <main+0x128>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	481a      	ldr	r0, [pc, #104]	@ (8000d7c <main+0x12c>)
 8000d14:	f003 ff9e 	bl	8004c54 <osThreadNew>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <main+0x130>)
 8000d1c:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 8000d1e:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <main+0x134>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4819      	ldr	r0, [pc, #100]	@ (8000d88 <main+0x138>)
 8000d24:	f003 ff96 	bl	8004c54 <osThreadNew>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <main+0x13c>)
 8000d2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2e:	f003 ff6b 	bl	8004c08 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d32:	bf00      	nop
 8000d34:	e7fd      	b.n	8000d32 <main+0xe2>
 8000d36:	bf00      	nop
 8000d38:	08009044 	.word	0x08009044
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	08009084 	.word	0x08009084
 8000d44:	0800909c 	.word	0x0800909c
 8000d48:	080090b4 	.word	0x080090b4
 8000d4c:	080090e0 	.word	0x080090e0
 8000d50:	080090f8 	.word	0x080090f8
 8000d54:	08009110 	.word	0x08009110
 8000d58:	08009158 	.word	0x08009158
 8000d5c:	08009180 	.word	0x08009180
 8000d60:	080091c0 	.word	0x080091c0
 8000d64:	0800a858 	.word	0x0800a858
 8000d68:	20000144 	.word	0x20000144
 8000d6c:	0800a7ec 	.word	0x0800a7ec
 8000d70:	08001021 	.word	0x08001021
 8000d74:	20000138 	.word	0x20000138
 8000d78:	0800a810 	.word	0x0800a810
 8000d7c:	080010ad 	.word	0x080010ad
 8000d80:	2000013c 	.word	0x2000013c
 8000d84:	0800a834 	.word	0x0800a834
 8000d88:	080010c3 	.word	0x080010c3
 8000d8c:	20000140 	.word	0x20000140

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	@ 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	@ 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f007 f864 	bl	8007e6c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 f802 	bl	8002e20 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e22:	f000 f96b 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2105      	movs	r1, #5
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 fa63 	bl	8003310 <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e50:	f000 f954 	bl	80010fc <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	@ 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e98:	2230      	movs	r2, #48	@ 0x30
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb6:	f002 fc7d 	bl	80037b4 <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 f91c 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART2_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f08:	f003 fa0a 	bl	8004320 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f000 f8f3 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000f0 	.word	0x200000f0
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f94:	4816      	ldr	r0, [pc, #88]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000f96:	f001 ff05 	bl	8002da4 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000fb2:	f001 fd5b 	bl	8002a6c <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000fd0:	f001 fd4c 	bl	8002a6c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	2028      	movs	r0, #40	@ 0x28
 8000fda:	f001 fd1d 	bl	8002a18 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f001 fd36 	bl	8002a50 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <_write>:
  * @param  ptr: 数据指针
  * @param  len: 数据长度
  * @retval 发送的字节数
  */
int _write(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b29a      	uxth	r2, r3
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <_write+0x28>)
 800100c:	f003 f9d8 	bl	80043c0 <HAL_UART_Transmit>
  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000f0 	.word	0x200000f0

08001020 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t last_status_print = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  uint32_t last_heartbeat_print = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  uint32_t heartbeat_counter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  
  printf("Default Task Started\r\n");  // 使用英文避免乱码
 8001034:	4818      	ldr	r0, [pc, #96]	@ (8001098 <StartDefaultTask+0x78>)
 8001036:	f006 fe29 	bl	8007c8c <puts>
  printf("System Heartbeat Monitor Active\r\n");
 800103a:	4818      	ldr	r0, [pc, #96]	@ (800109c <StartDefaultTask+0x7c>)
 800103c:	f006 fe26 	bl	8007c8c <puts>
  
  /* Infinite loop */
  for(;;)
  {
    uint32_t current_time = HAL_GetTick();
 8001040:	f001 fc02 	bl	8002848 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
    
    // 每2秒发送一次心跳数据包（增加频率）
    if ((current_time - last_heartbeat_print) >= 2000) {
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001050:	d30a      	bcc.n	8001068 <StartDefaultTask+0x48>
      heartbeat_counter++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
      printf("[%lu] Heartbeat #%lu - System Running OK - Time: %lu ms\r\n", 
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <StartDefaultTask+0x80>)
 8001060:	f006 fdac 	bl	8007bbc <iprintf>
             heartbeat_counter, heartbeat_counter, current_time);
      last_heartbeat_print = current_time;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	613b      	str	r3, [r7, #16]
    }
    
    // 每10秒打印一次详细系统状态
    if ((current_time - last_status_print) >= 10000) {
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001072:	4293      	cmp	r3, r2
 8001074:	d90a      	bls.n	800108c <StartDefaultTask+0x6c>
      printf("\r\n=== System Status Report #%lu ===\r\n", heartbeat_counter);
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <StartDefaultTask+0x84>)
 800107a:	f006 fd9f 	bl	8007bbc <iprintf>
      CAN_App_PrintStatus();
 800107e:	f7ff fd87 	bl	8000b90 <CAN_App_PrintStatus>
      printf("=== End of Status Report ===\r\n\r\n");
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <StartDefaultTask+0x88>)
 8001084:	f006 fe02 	bl	8007c8c <puts>
      last_status_print = current_time;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	617b      	str	r3, [r7, #20]
    }
    
    // 检查系统运行状态
    // 这里可以添加系统监控代码
    
    osDelay(500);  // 减少到500ms周期，提高响应性
 800108c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001090:	f003 fe72 	bl	8004d78 <osDelay>
  {
 8001094:	e7d4      	b.n	8001040 <StartDefaultTask+0x20>
 8001096:	bf00      	nop
 8001098:	080091fc 	.word	0x080091fc
 800109c:	08009214 	.word	0x08009214
 80010a0:	08009238 	.word	0x08009238
 80010a4:	08009274 	.word	0x08009274
 80010a8:	0800929c 	.word	0x0800929c

080010ac <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  // 调用CAN发送任务主函数
  CAN_SendTask_Main(argument);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fac5 	bl	8000644 <CAN_SendTask_Main>
  /* USER CODE END StartCANSendTask */
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  // 调用CAN接收任务主函数
  CAN_ReceiveTask_Main(argument);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fbca 	bl	8000864 <CAN_ReceiveTask_Main>
  /* USER CODE END StartCANReceiveTask */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010ea:	f001 fb99 	bl	8002820 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010000 	.word	0x40010000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <MCP2515_SPI_ReadWrite>:
  * @brief  SPI读写一个字节
  * @param  data: 要发送的数据
  * @retval 接收到的数据
  */
uint8_t MCP2515_SPI_ReadWrite(uint8_t data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    
    // 使用HAL库进行SPI通信
    status = HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, MCP2515_SPI_TIMEOUT);
 8001116:	f107 020f 	add.w	r2, r7, #15
 800111a:	1df9      	adds	r1, r7, #7
 800111c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MCP2515_SPI_ReadWrite+0x80>)
 8001126:	f002 fbce 	bl	80038c6 <HAL_SPI_TransmitReceive>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
    
    if (status != HAL_OK) {
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d023      	beq.n	800117c <MCP2515_SPI_ReadWrite+0x74>
        printf("SPI Error: Status=%d, TX=0x%02X\r\n", status, data);
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	4619      	mov	r1, r3
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <MCP2515_SPI_ReadWrite+0x84>)
 800113c:	f006 fd3e 	bl	8007bbc <iprintf>
        
        // 检查具体错误类型
        if (status == HAL_TIMEOUT) {
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d103      	bne.n	800114e <MCP2515_SPI_ReadWrite+0x46>
            printf("SPI Timeout - Check MISO connection\r\n");
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <MCP2515_SPI_ReadWrite+0x88>)
 8001148:	f006 fda0 	bl	8007c8c <puts>
 800114c:	e014      	b.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_ERROR) {
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <MCP2515_SPI_ReadWrite+0x64>
            printf("SPI Hardware Error - Check configuration\r\n");
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <MCP2515_SPI_ReadWrite+0x8c>)
 8001156:	f006 fd99 	bl	8007c8c <puts>
            uint32_t error = HAL_SPI_GetError(&hspi1);
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MCP2515_SPI_ReadWrite+0x80>)
 800115c:	f002 fd5c 	bl	8003c18 <HAL_SPI_GetError>
 8001160:	6138      	str	r0, [r7, #16]
            printf("SPI Error Code: 0x%08lX\r\n", error);
 8001162:	6939      	ldr	r1, [r7, #16]
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <MCP2515_SPI_ReadWrite+0x90>)
 8001166:	f006 fd29 	bl	8007bbc <iprintf>
 800116a:	e005      	b.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_BUSY) {
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d102      	bne.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
            printf("SPI Busy - Previous operation not completed\r\n");
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <MCP2515_SPI_ReadWrite+0x94>)
 8001174:	f006 fd8a 	bl	8007c8c <puts>
        }
        
        return 0xFF;
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	e000      	b.n	800117e <MCP2515_SPI_ReadWrite+0x76>
    }
    
    return rx_data;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000098 	.word	0x20000098
 800118c:	080092bc 	.word	0x080092bc
 8001190:	080092e0 	.word	0x080092e0
 8001194:	08009308 	.word	0x08009308
 8001198:	08009334 	.word	0x08009334
 800119c:	08009350 	.word	0x08009350

080011a0 <MCP2515_CS_Low>:
  * @brief  拉低MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_Low(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011aa:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <MCP2515_CS_Low+0x14>)
 80011ac:	f001 fdfa 	bl	8002da4 <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020400 	.word	0x40020400

080011b8 <MCP2515_CS_High>:
  * @brief  拉高MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_High(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <MCP2515_CS_High+0x14>)
 80011c4:	f001 fdee 	bl	8002da4 <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <MCP2515_ReadRegister>:
  * @brief  读取MCP2515寄存器
  * @param  address: 寄存器地址
  * @retval 寄存器值
  */
uint8_t MCP2515_ReadRegister(uint8_t address)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    
    MCP2515_CS_Low();                           // 拉低片选
 80011da:	f7ff ffe1 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ);    // 发送读指令
 80011de:	2003      	movs	r0, #3
 80011e0:	f7ff ff92 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff8e 	bl	8001108 <MCP2515_SPI_ReadWrite>
    data = MCP2515_SPI_ReadWrite(0x00);         // 读取数据
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff8b 	bl	8001108 <MCP2515_SPI_ReadWrite>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_High();                          // 拉高片选
 80011f6:	f7ff ffdf 	bl	80011b8 <MCP2515_CS_High>
    
    return data;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MCP2515_WriteRegister>:
  * @param  address: 寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void MCP2515_WriteRegister(uint8_t address, uint8_t data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_Low();                           // 拉低片选
 8001214:	f7ff ffc4 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_WRITE);   // 发送写指令
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff ff75 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff71 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                // 发送数据
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff6d 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                          // 拉高片选
 800122e:	f7ff ffc3 	bl	80011b8 <MCP2515_CS_High>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <MCP2515_ModifyRegister>:
  * @param  mask: 位掩码
  * @param  data: 新的位值
  * @retval None
  */
void MCP2515_ModifyRegister(uint8_t address, uint8_t mask, uint8_t data)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	460b      	mov	r3, r1
 8001246:	71bb      	strb	r3, [r7, #6]
 8001248:	4613      	mov	r3, r2
 800124a:	717b      	strb	r3, [r7, #5]
    MCP2515_CS_Low();                               // 拉低片选
 800124c:	f7ff ffa8 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_BIT_MODIFY);  // 发送位修改指令
 8001250:	2005      	movs	r0, #5
 8001252:	f7ff ff59 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);                 // 发送寄存器地址
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff55 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(mask);                    // 发送位掩码
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff51 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                    // 发送新数据
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff4d 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                              // 拉高片选
 800126e:	f7ff ffa3 	bl	80011b8 <MCP2515_CS_High>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MCP2515_Reset>:
  * @brief  复位MCP2515
  * @param  None
  * @retval None
  */
void MCP2515_Reset(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    printf("Starting MCP2515 reset...\r\n");
 8001282:	481f      	ldr	r0, [pc, #124]	@ (8001300 <MCP2515_Reset+0x84>)
 8001284:	f006 fd02 	bl	8007c8c <puts>
    
    MCP2515_CS_Low();
 8001288:	f7ff ff8a 	bl	80011a0 <MCP2515_CS_Low>
    printf("CS pulled low\r\n");
 800128c:	481d      	ldr	r0, [pc, #116]	@ (8001304 <MCP2515_Reset+0x88>)
 800128e:	f006 fcfd 	bl	8007c8c <puts>
    
    uint8_t result = MCP2515_SPI_ReadWrite(MCP2515_CMD_RESET);
 8001292:	20c0      	movs	r0, #192	@ 0xc0
 8001294:	f7ff ff38 	bl	8001108 <MCP2515_SPI_ReadWrite>
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
    printf("Reset command sent, SPI result: 0x%02X\r\n", result);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4619      	mov	r1, r3
 80012a0:	4819      	ldr	r0, [pc, #100]	@ (8001308 <MCP2515_Reset+0x8c>)
 80012a2:	f006 fc8b 	bl	8007bbc <iprintf>
    
    MCP2515_CS_High();
 80012a6:	f7ff ff87 	bl	80011b8 <MCP2515_CS_High>
    printf("CS pulled high\r\n");
 80012aa:	4818      	ldr	r0, [pc, #96]	@ (800130c <MCP2515_Reset+0x90>)
 80012ac:	f006 fcee 	bl	8007c8c <puts>
    
    osDelay(20);  // 增加延时确保复位完成
 80012b0:	2014      	movs	r0, #20
 80012b2:	f003 fd61 	bl	8004d78 <osDelay>
    printf("Reset delay completed\r\n");
 80012b6:	4816      	ldr	r0, [pc, #88]	@ (8001310 <MCP2515_Reset+0x94>)
 80012b8:	f006 fce8 	bl	8007c8c <puts>
    
    // 验证复位状态
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80012bc:	200e      	movs	r0, #14
 80012be:	f7ff ff87 	bl	80011d0 <MCP2515_ReadRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71bb      	strb	r3, [r7, #6]
    printf("CANSTAT after reset: 0x%02X (Expected: 0x80)\r\n", canstat);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4812      	ldr	r0, [pc, #72]	@ (8001314 <MCP2515_Reset+0x98>)
 80012cc:	f006 fc76 	bl	8007bbc <iprintf>
    
    if (canstat == 0x80) {
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	2b80      	cmp	r3, #128	@ 0x80
 80012d4:	d103      	bne.n	80012de <MCP2515_Reset+0x62>
        printf("✓ MCP2515 reset successful\r\n");
 80012d6:	4810      	ldr	r0, [pc, #64]	@ (8001318 <MCP2515_Reset+0x9c>)
 80012d8:	f006 fcd8 	bl	8007c8c <puts>
    } else if (canstat == 0xFF) {
        printf("✗ No SPI response - Check MISO connection\r\n");
    } else {
        printf("✗ Unexpected reset state: 0x%02X\r\n", canstat);
    }
}
 80012dc:	e00b      	b.n	80012f6 <MCP2515_Reset+0x7a>
    } else if (canstat == 0xFF) {
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d103      	bne.n	80012ec <MCP2515_Reset+0x70>
        printf("✗ No SPI response - Check MISO connection\r\n");
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <MCP2515_Reset+0xa0>)
 80012e6:	f006 fcd1 	bl	8007c8c <puts>
}
 80012ea:	e004      	b.n	80012f6 <MCP2515_Reset+0x7a>
        printf("✗ Unexpected reset state: 0x%02X\r\n", canstat);
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	4619      	mov	r1, r3
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <MCP2515_Reset+0xa4>)
 80012f2:	f006 fc63 	bl	8007bbc <iprintf>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08009380 	.word	0x08009380
 8001304:	0800939c 	.word	0x0800939c
 8001308:	080093ac 	.word	0x080093ac
 800130c:	080093d8 	.word	0x080093d8
 8001310:	080093e8 	.word	0x080093e8
 8001314:	08009400 	.word	0x08009400
 8001318:	08009430 	.word	0x08009430
 800131c:	08009450 	.word	0x08009450
 8001320:	08009480 	.word	0x08009480

08001324 <MCP2515_SetMode>:
  * @brief  设置MCP2515工作模式
  * @param  mode: 工作模式
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SetMode(uint8_t mode)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    // 修改CANCTRL寄存器的模式位
    MCP2515_ModifyRegister(MCP2515_CANCTRL, 0xE0, mode);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	461a      	mov	r2, r3
 8001332:	21e0      	movs	r1, #224	@ 0xe0
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff ff80 	bl	800123a <MCP2515_ModifyRegister>
    
    // 等待模式切换完成
    return MCP2515_WaitForMode(mode, MCP2515_MODE_TIMEOUT);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2132      	movs	r1, #50	@ 0x32
 800133e:	4618      	mov	r0, r3
 8001340:	f000 faaa 	bl	8001898 <MCP2515_WaitForMode>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <MCP2515_GetMode>:
  * @brief  获取MCP2515当前工作模式
  * @param  None
  * @retval 当前工作模式
  */
uint8_t MCP2515_GetMode(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
    uint8_t mode = MCP2515_ReadRegister(MCP2515_CANSTAT);
 8001354:	200e      	movs	r0, #14
 8001356:	f7ff ff3b 	bl	80011d0 <MCP2515_ReadRegister>
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
    return (mode & 0xE0);  // 返回模式位
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 031f 	bic.w	r3, r3, #31
 8001364:	b2db      	uxtb	r3, r3
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <MCP2515_SetBaudRate>:
  * @brief  设置CAN波特率
  * @param  baudrate: 波特率选择 (MCP2515_BAUD_125K ~ MCP2515_BAUD_1000K)
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetBaudRate(uint8_t baudrate)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
    if (baudrate > MCP2515_BAUD_1000K) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d901      	bls.n	8001384 <MCP2515_SetBaudRate+0x14>
        return MCP2515_ERROR;  // 无效的波特率参数
 8001380:	2301      	movs	r3, #1
 8001382:	e02b      	b.n	80013dc <MCP2515_SetBaudRate+0x6c>
    }
    
    // 必须在配置模式下设置波特率
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001384:	2080      	movs	r0, #128	@ 0x80
 8001386:	f7ff ffcd 	bl	8001324 <MCP2515_SetMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MCP2515_SetBaudRate+0x24>
        return MCP2515_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e023      	b.n	80013dc <MCP2515_SetBaudRate+0x6c>
    }
    
    // 写入波特率配置寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, mcp2515_baud_config[baudrate][0]);
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	4913      	ldr	r1, [pc, #76]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	440b      	add	r3, r1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	202a      	movs	r0, #42	@ 0x2a
 80013a6:	f7ff ff2d 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF2, mcp2515_baud_config[baudrate][1]);
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	3301      	adds	r3, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2029      	movs	r0, #41	@ 0x29
 80013be:	f7ff ff21 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF3, mcp2515_baud_config[baudrate][2]);
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	3302      	adds	r3, #2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	2028      	movs	r0, #40	@ 0x28
 80013d6:	f7ff ff15 	bl	8001204 <MCP2515_WriteRegister>
    
    return MCP2515_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	0800a870 	.word	0x0800a870

080013e8 <MCP2515_Init>:
  * @brief  初始化MCP2515
  * @param  baudrate: CAN波特率
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_Init(uint8_t baudrate)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    // 复位MCP2515
    MCP2515_Reset();
 80013f2:	f7ff ff43 	bl	800127c <MCP2515_Reset>
    
    // 检查MCP2515是否响应
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80013f6:	f000 f9ab 	bl	8001750 <MCP2515_SelfTest>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MCP2515_Init+0x1c>
        return MCP2515_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e02c      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 设置为配置模式
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001404:	2080      	movs	r0, #128	@ 0x80
 8001406:	f7ff ff8d 	bl	8001324 <MCP2515_SetMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MCP2515_Init+0x2c>
        return MCP2515_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e024      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 设置波特率
    if (MCP2515_SetBaudRate(baudrate) != MCP2515_OK) {
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffaa 	bl	8001370 <MCP2515_SetBaudRate>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MCP2515_Init+0x3e>
        return MCP2515_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e01b      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 配置接收缓冲区控制寄存器
    MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);  // 接收所有消息
 8001426:	2160      	movs	r1, #96	@ 0x60
 8001428:	2060      	movs	r0, #96	@ 0x60
 800142a:	f7ff feeb 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);  // 接收所有消息
 800142e:	2160      	movs	r1, #96	@ 0x60
 8001430:	2070      	movs	r0, #112	@ 0x70
 8001432:	f7ff fee7 	bl	8001204 <MCP2515_WriteRegister>
    
    // 清除所有中断标志
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8001436:	2100      	movs	r1, #0
 8001438:	202c      	movs	r0, #44	@ 0x2c
 800143a:	f7ff fee3 	bl	8001204 <MCP2515_WriteRegister>
    
    // 启用接收中断
    MCP2515_WriteRegister(MCP2515_CANINTE, MCP2515_INT_RX0IF | MCP2515_INT_RX1IF);
 800143e:	2103      	movs	r1, #3
 8001440:	202b      	movs	r0, #43	@ 0x2b
 8001442:	f7ff fedf 	bl	8001204 <MCP2515_WriteRegister>
    
    // 切换到正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff6c 	bl	8001324 <MCP2515_SetMode>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MCP2515_Init+0x6e>
        return MCP2515_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e003      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    mcp2515_initialized = 1;  // 设置初始化标志
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <MCP2515_Init+0x80>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    
    return MCP2515_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000148 	.word	0x20000148

0800146c <MCP2515_SetMask>:
  * @param  mask_value: 掩码值
  * @param  extended: 0=标准帧, 1=扩展帧
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetMask(uint8_t mask_num, uint32_t mask_value, uint8_t extended)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
    uint8_t sidh, sidl, eid8, eid0;
    uint8_t mask_regs[2][4] = {
 800147c:	4a3c      	ldr	r2, [pc, #240]	@ (8001570 <MCP2515_SetMask+0x104>)
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001486:	e883 0003 	stmia.w	r3, {r0, r1}
        {0x20, 0x21, 0x22, 0x23},  // RXM0
        {0x24, 0x25, 0x26, 0x27}   // RXM1
    };
    
    if (mask_num > 1) {
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d901      	bls.n	8001494 <MCP2515_SetMask+0x28>
        return MCP2515_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e069      	b.n	8001568 <MCP2515_SetMask+0xfc>
    }
    
    // 必须在配置模式下设置掩码
    uint8_t current_mode = MCP2515_GetMode();
 8001494:	f7ff ff5b 	bl	800134e <MCP2515_GetMode>
 8001498:	4603      	mov	r3, r0
 800149a:	74fb      	strb	r3, [r7, #19]
    if (current_mode != MCP2515_MODE_CONFIG) {
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	2b80      	cmp	r3, #128	@ 0x80
 80014a0:	d007      	beq.n	80014b2 <MCP2515_SetMask+0x46>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 80014a2:	2080      	movs	r0, #128	@ 0x80
 80014a4:	f7ff ff3e 	bl	8001324 <MCP2515_SetMode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MCP2515_SetMask+0x46>
            return MCP2515_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e05a      	b.n	8001568 <MCP2515_SetMask+0xfc>
        }
    }
    
    if (extended) {
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d018      	beq.n	80014ea <MCP2515_SetMask+0x7e>
        // 扩展帧掩码配置
        sidh = (uint8_t)(mask_value >> 21);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)(((mask_value >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((mask_value >> 16) & 0x03);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	75bb      	strb	r3, [r7, #22]
        eid8 = (uint8_t)(mask_value >> 8);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	757b      	strb	r3, [r7, #21]
        eid0 = (uint8_t)mask_value;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	753b      	strb	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <MCP2515_SetMask+0x94>
    } else {
        // 标准帧掩码配置
        sidh = (uint8_t)(mask_value >> 3);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)((mask_value & 0x07) << 5);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	75bb      	strb	r3, [r7, #22]
        eid8 = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	757b      	strb	r3, [r7, #21]
        eid0 = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	753b      	strb	r3, [r7, #20]
    }
    
    // 写入掩码寄存器
    MCP2515_WriteRegister(mask_regs[mask_num][0], sidh);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	3318      	adds	r3, #24
 8001506:	443b      	add	r3, r7
 8001508:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800150c:	7dfa      	ldrb	r2, [r7, #23]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe77 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][1], sidl);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	3318      	adds	r3, #24
 800151c:	443b      	add	r3, r7
 800151e:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8001522:	7dba      	ldrb	r2, [r7, #22]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe6c 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][2], eid8);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3318      	adds	r3, #24
 8001532:	443b      	add	r3, r7
 8001534:	f813 3c0e 	ldrb.w	r3, [r3, #-14]
 8001538:	7d7a      	ldrb	r2, [r7, #21]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe61 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][3], eid0);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	3318      	adds	r3, #24
 8001548:	443b      	add	r3, r7
 800154a:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 800154e:	7d3a      	ldrb	r2, [r7, #20]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe56 	bl	8001204 <MCP2515_WriteRegister>
    
    // 恢复原来的模式
    if (current_mode != MCP2515_MODE_CONFIG) {
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	2b80      	cmp	r3, #128	@ 0x80
 800155c:	d003      	beq.n	8001566 <MCP2515_SetMask+0xfa>
        MCP2515_SetMode(current_mode);
 800155e:	7cfb      	ldrb	r3, [r7, #19]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fedf 	bl	8001324 <MCP2515_SetMode>
    }
    
    return MCP2515_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	080094c0 	.word	0x080094c0

08001574 <MCP2515_SendMessage>:
  * @brief  发送CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SendMessage(MCP2515_CANMessage_t *message)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    uint32_t timeout = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
    
    if (!mcp2515_initialized || message == NULL) {
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <MCP2515_SendMessage+0xa8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <MCP2515_SendMessage+0x1a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <MCP2515_SendMessage+0x1e>
        return MCP2515_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e03f      	b.n	8001612 <MCP2515_SendMessage+0x9e>
    }
    
    // 查找空闲的发送缓冲区
    buffer = MCP2515_GetTxBuffer();
 8001592:	f000 f9a4 	bl	80018de <MCP2515_GetTxBuffer>
 8001596:	4603      	mov	r3, r0
 8001598:	72fb      	strb	r3, [r7, #11]
    if (buffer == 0xFF) {
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	2bff      	cmp	r3, #255	@ 0xff
 800159e:	d101      	bne.n	80015a4 <MCP2515_SendMessage+0x30>
        return MCP2515_ERROR;  // 没有空闲的发送缓冲区
 80015a0:	2301      	movs	r3, #1
 80015a2:	e036      	b.n	8001612 <MCP2515_SendMessage+0x9e>
    }
    
    // 加载消息到发送缓冲区
    MCP2515_LoadTxBuffer(buffer, message);
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f9b9 	bl	8001920 <MCP2515_LoadTxBuffer>
    
    // 请求发送
    MCP2515_CS_Low();
 80015ae:	f7ff fdf7 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_RTS | (1 << buffer));
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd9f 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();
 80015ca:	f7ff fdf5 	bl	80011b8 <MCP2515_CS_High>
    
    // 等待发送完成
    while (timeout < 1000) {
 80015ce:	e01b      	b.n	8001608 <MCP2515_SendMessage+0x94>
        uint8_t status = MCP2515_GetInterruptFlags();
 80015d0:	f000 f893 	bl	80016fa <MCP2515_GetInterruptFlags>
 80015d4:	4603      	mov	r3, r0
 80015d6:	72bb      	strb	r3, [r7, #10]
        if (status & (MCP2515_INT_TX0IF << buffer)) {
 80015d8:	7aba      	ldrb	r2, [r7, #10]
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	2104      	movs	r1, #4
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <MCP2515_SendMessage+0x88>
            // 清除发送完成中断标志
            MCP2515_ClearInterruptFlags(MCP2515_INT_TX0IF << buffer);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	2204      	movs	r2, #4
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f889 	bl	800170a <MCP2515_ClearInterruptFlags>
            return MCP2515_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e00a      	b.n	8001612 <MCP2515_SendMessage+0x9e>
        }
        osDelay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f003 fbbb 	bl	8004d78 <osDelay>
        timeout++;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
    while (timeout < 1000) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800160e:	d3df      	bcc.n	80015d0 <MCP2515_SendMessage+0x5c>
    }
    
    return MCP2515_TIMEOUT;
 8001610:	2302      	movs	r3, #2
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000148 	.word	0x20000148

08001620 <MCP2515_ReceiveMessage>:
  * @brief  接收CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_ReceiveMessage(MCP2515_CANMessage_t *message)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (!mcp2515_initialized || message == NULL) {
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MCP2515_ReceiveMessage+0x64>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <MCP2515_ReceiveMessage+0x16>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <MCP2515_ReceiveMessage+0x1a>
        return MCP2515_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e020      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    }
    
    status = MCP2515_GetInterruptFlags();
 800163a:	f000 f85e 	bl	80016fa <MCP2515_GetInterruptFlags>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
    
    if (status & MCP2515_INT_RX0IF) {
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <MCP2515_ReceiveMessage+0x3e>
        // 从接收缓冲区0读取消息
        MCP2515_ReadRxBuffer(0, message);
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f9f4 	bl	8001a3c <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX0IF);
 8001654:	2001      	movs	r0, #1
 8001656:	f000 f858 	bl	800170a <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e00e      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    } else if (status & MCP2515_INT_RX1IF) {
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <MCP2515_ReceiveMessage+0x5a>
        // 从接收缓冲区1读取消息
        MCP2515_ReadRxBuffer(1, message);
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	2001      	movs	r0, #1
 800166c:	f000 f9e6 	bl	8001a3c <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX1IF);
 8001670:	2002      	movs	r0, #2
 8001672:	f000 f84a 	bl	800170a <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    }
    
    return MCP2515_ERROR;  // 没有接收到消息
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000148 	.word	0x20000148

08001688 <MCP2515_CheckReceive>:
  * @brief  检查是否有消息接收
  * @param  None
  * @retval 1: 有消息, 0: 无消息
  */
uint8_t MCP2515_CheckReceive(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetInterruptFlags();
 800168e:	f000 f834 	bl	80016fa <MCP2515_GetInterruptFlags>
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    return (status & (MCP2515_INT_RX0IF | MCP2515_INT_RX1IF)) ? 1 : 0;
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <MCP2515_CheckTransmit>:
  * @brief  检查发送缓冲区状态
  * @param  None
  * @retval 发送缓冲区空闲数量
  */
uint8_t MCP2515_CheckTransmit(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80016b4:	f000 f838 	bl	8001728 <MCP2515_GetStatus>
 80016b8:	4603      	mov	r3, r0
 80016ba:	71bb      	strb	r3, [r7, #6]
    uint8_t free_buffers = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) free_buffers++;  // TXB0空闲
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <MCP2515_CheckTransmit+0x22>
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x10)) free_buffers++;  // TXB1空闲
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <MCP2515_CheckTransmit+0x32>
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	3301      	adds	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x40)) free_buffers++;  // TXB2空闲
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <MCP2515_CheckTransmit+0x42>
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3301      	adds	r3, #1
 80016ee:	71fb      	strb	r3, [r7, #7]
    
    return free_buffers;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <MCP2515_GetInterruptFlags>:
  * @brief  获取中断标志
  * @param  None
  * @retval 中断标志寄存器值
  */
uint8_t MCP2515_GetInterruptFlags(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
    return MCP2515_ReadRegister(MCP2515_CANINTF);
 80016fe:	202c      	movs	r0, #44	@ 0x2c
 8001700:	f7ff fd66 	bl	80011d0 <MCP2515_ReadRegister>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}

0800170a <MCP2515_ClearInterruptFlags>:
  * @brief  清除中断标志
  * @param  flags: 要清除的中断标志
  * @retval None
  */
void MCP2515_ClearInterruptFlags(uint8_t flags)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
    MCP2515_ModifyRegister(MCP2515_CANINTF, flags, 0x00);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	202c      	movs	r0, #44	@ 0x2c
 800171c:	f7ff fd8d 	bl	800123a <MCP2515_ModifyRegister>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MCP2515_GetStatus>:
  * @brief  获取MCP2515状态
  * @param  None
  * @retval 状态寄存器值
  */
uint8_t MCP2515_GetStatus(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
    uint8_t status;
    
    MCP2515_CS_Low();
 800172e:	f7ff fd37 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ_STATUS);
 8001732:	20a0      	movs	r0, #160	@ 0xa0
 8001734:	f7ff fce8 	bl	8001108 <MCP2515_SPI_ReadWrite>
    status = MCP2515_SPI_ReadWrite(0x00);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fce5 	bl	8001108 <MCP2515_SPI_ReadWrite>
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_High();
 8001742:	f7ff fd39 	bl	80011b8 <MCP2515_CS_High>
    
    return status;
 8001746:	79fb      	ldrb	r3, [r7, #7]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MCP2515_SelfTest>:
  * @brief  MCP2515自检测试
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SelfTest(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xAA;
 8001756:	23aa      	movs	r3, #170	@ 0xaa
 8001758:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data;
    
    // 写入测试数据到一个可读写的寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4619      	mov	r1, r3
 800175e:	202a      	movs	r0, #42	@ 0x2a
 8001760:	f7ff fd50 	bl	8001204 <MCP2515_WriteRegister>
    
    // 读回数据进行比较
    read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001764:	202a      	movs	r0, #42	@ 0x2a
 8001766:	f7ff fd33 	bl	80011d0 <MCP2515_ReadRegister>
 800176a:	4603      	mov	r3, r0
 800176c:	71bb      	strb	r3, [r7, #6]
    
    if (read_data == test_data) {
 800176e:	79ba      	ldrb	r2, [r7, #6]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	429a      	cmp	r2, r3
 8001774:	d111      	bne.n	800179a <MCP2515_SelfTest+0x4a>
        // 再次测试不同的数据
        test_data = 0x55;
 8001776:	2355      	movs	r3, #85	@ 0x55
 8001778:	71fb      	strb	r3, [r7, #7]
        MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	202a      	movs	r0, #42	@ 0x2a
 8001780:	f7ff fd40 	bl	8001204 <MCP2515_WriteRegister>
        read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001784:	202a      	movs	r0, #42	@ 0x2a
 8001786:	f7ff fd23 	bl	80011d0 <MCP2515_ReadRegister>
 800178a:	4603      	mov	r3, r0
 800178c:	71bb      	strb	r3, [r7, #6]
        
        if (read_data == test_data) {
 800178e:	79ba      	ldrb	r2, [r7, #6]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d101      	bne.n	800179a <MCP2515_SelfTest+0x4a>
            return MCP2515_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <MCP2515_SelfTest+0x4c>
        }
    }
    
    return MCP2515_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <MCP2515_PrintStatus>:
  * @brief  打印MCP2515状态信息
  * @param  None
  * @retval None
  */
void MCP2515_PrintStatus(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80017aa:	200e      	movs	r0, #14
 80017ac:	f7ff fd10 	bl	80011d0 <MCP2515_ReadRegister>
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
    uint8_t canctrl = MCP2515_ReadRegister(MCP2515_CANCTRL);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f7ff fd0b 	bl	80011d0 <MCP2515_ReadRegister>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71bb      	strb	r3, [r7, #6]
    uint8_t canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 80017be:	202c      	movs	r0, #44	@ 0x2c
 80017c0:	f7ff fd06 	bl	80011d0 <MCP2515_ReadRegister>
 80017c4:	4603      	mov	r3, r0
 80017c6:	717b      	strb	r3, [r7, #5]
    uint8_t eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 80017c8:	202d      	movs	r0, #45	@ 0x2d
 80017ca:	f7ff fd01 	bl	80011d0 <MCP2515_ReadRegister>
 80017ce:	4603      	mov	r3, r0
 80017d0:	713b      	strb	r3, [r7, #4]
    
    printf("MCP2515 Status:\r\n");
 80017d2:	4825      	ldr	r0, [pc, #148]	@ (8001868 <MCP2515_PrintStatus+0xc4>)
 80017d4:	f006 fa5a 	bl	8007c8c <puts>
    printf("CANSTAT: 0x%02X\r\n", canstat);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4619      	mov	r1, r3
 80017dc:	4823      	ldr	r0, [pc, #140]	@ (800186c <MCP2515_PrintStatus+0xc8>)
 80017de:	f006 f9ed 	bl	8007bbc <iprintf>
    printf("CANCTRL: 0x%02X\r\n", canctrl);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4822      	ldr	r0, [pc, #136]	@ (8001870 <MCP2515_PrintStatus+0xcc>)
 80017e8:	f006 f9e8 	bl	8007bbc <iprintf>
    printf("CANINTF: 0x%02X\r\n", canintf);
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4820      	ldr	r0, [pc, #128]	@ (8001874 <MCP2515_PrintStatus+0xd0>)
 80017f2:	f006 f9e3 	bl	8007bbc <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 80017f6:	793b      	ldrb	r3, [r7, #4]
 80017f8:	4619      	mov	r1, r3
 80017fa:	481f      	ldr	r0, [pc, #124]	@ (8001878 <MCP2515_PrintStatus+0xd4>)
 80017fc:	f006 f9de 	bl	8007bbc <iprintf>
    printf("Mode: ");
 8001800:	481e      	ldr	r0, [pc, #120]	@ (800187c <MCP2515_PrintStatus+0xd8>)
 8001802:	f006 f9db 	bl	8007bbc <iprintf>
    
    switch (canstat & 0xE0) {
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	d01e      	beq.n	800184e <MCP2515_PrintStatus+0xaa>
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	dc20      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 8001814:	2b60      	cmp	r3, #96	@ 0x60
 8001816:	d016      	beq.n	8001846 <MCP2515_PrintStatus+0xa2>
 8001818:	2b60      	cmp	r3, #96	@ 0x60
 800181a:	dc1c      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 800181c:	2b40      	cmp	r3, #64	@ 0x40
 800181e:	d00e      	beq.n	800183e <MCP2515_PrintStatus+0x9a>
 8001820:	2b40      	cmp	r3, #64	@ 0x40
 8001822:	dc18      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <MCP2515_PrintStatus+0x8a>
 8001828:	2b20      	cmp	r3, #32
 800182a:	d004      	beq.n	8001836 <MCP2515_PrintStatus+0x92>
 800182c:	e013      	b.n	8001856 <MCP2515_PrintStatus+0xb2>
        case MCP2515_MODE_NORMAL:
            printf("Normal\r\n");
 800182e:	4814      	ldr	r0, [pc, #80]	@ (8001880 <MCP2515_PrintStatus+0xdc>)
 8001830:	f006 fa2c 	bl	8007c8c <puts>
            break;
 8001834:	e013      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_SLEEP:
            printf("Sleep\r\n");
 8001836:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MCP2515_PrintStatus+0xe0>)
 8001838:	f006 fa28 	bl	8007c8c <puts>
            break;
 800183c:	e00f      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LOOPBACK:
            printf("Loopback\r\n");
 800183e:	4812      	ldr	r0, [pc, #72]	@ (8001888 <MCP2515_PrintStatus+0xe4>)
 8001840:	f006 fa24 	bl	8007c8c <puts>
            break;
 8001844:	e00b      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LISTENONLY:
            printf("Listen Only\r\n");
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <MCP2515_PrintStatus+0xe8>)
 8001848:	f006 fa20 	bl	8007c8c <puts>
            break;
 800184c:	e007      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_CONFIG:
            printf("Configuration\r\n");
 800184e:	4810      	ldr	r0, [pc, #64]	@ (8001890 <MCP2515_PrintStatus+0xec>)
 8001850:	f006 fa1c 	bl	8007c8c <puts>
            break;
 8001854:	e003      	b.n	800185e <MCP2515_PrintStatus+0xba>
        default:
            printf("Unknown\r\n");
 8001856:	480f      	ldr	r0, [pc, #60]	@ (8001894 <MCP2515_PrintStatus+0xf0>)
 8001858:	f006 fa18 	bl	8007c8c <puts>
            break;
 800185c:	bf00      	nop
    }
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800976c 	.word	0x0800976c
 800186c:	08009780 	.word	0x08009780
 8001870:	08009794 	.word	0x08009794
 8001874:	080097a8 	.word	0x080097a8
 8001878:	080097bc 	.word	0x080097bc
 800187c:	080097cc 	.word	0x080097cc
 8001880:	080097d4 	.word	0x080097d4
 8001884:	080097dc 	.word	0x080097dc
 8001888:	080097e4 	.word	0x080097e4
 800188c:	080097f0 	.word	0x080097f0
 8001890:	08009800 	.word	0x08009800
 8001894:	08009810 	.word	0x08009810

08001898 <MCP2515_WaitForMode>:
  * @param  mode: 目标模式
  * @param  timeout: 超时时间(ms)
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
static uint8_t MCP2515_WaitForMode(uint8_t mode, uint32_t timeout)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 80018a4:	f000 ffd0 	bl	8002848 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 80018aa:	e00b      	b.n	80018c4 <MCP2515_WaitForMode+0x2c>
        if (MCP2515_GetMode() == mode) {
 80018ac:	f7ff fd4f 	bl	800134e <MCP2515_GetMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <MCP2515_WaitForMode+0x26>
            return MCP2515_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00b      	b.n	80018d6 <MCP2515_WaitForMode+0x3e>
        }
        osDelay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f003 fa5a 	bl	8004d78 <osDelay>
    while ((HAL_GetTick() - start_time) < timeout) {
 80018c4:	f000 ffc0 	bl	8002848 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8eb      	bhi.n	80018ac <MCP2515_WaitForMode+0x14>
    }
    
    return MCP2515_TIMEOUT;
 80018d4:	2302      	movs	r3, #2
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <MCP2515_GetTxBuffer>:
  * @brief  获取空闲的发送缓冲区
  * @param  None
  * @retval 缓冲区编号 (0-2), 0xFF表示无空闲缓冲区
  */
static uint8_t MCP2515_GetTxBuffer(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80018e4:	f7ff ff20 	bl	8001728 <MCP2515_GetStatus>
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) return 0;  // TXB0空闲
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <MCP2515_GetTxBuffer+0x1c>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e00e      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x10)) return 1;  // TXB1空闲
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <MCP2515_GetTxBuffer+0x2a>
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x40)) return 2;  // TXB2空闲
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <MCP2515_GetTxBuffer+0x38>
 8001912:	2302      	movs	r3, #2
 8001914:	e000      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    
    return 0xFF;  // 无空闲缓冲区
 8001916:	23ff      	movs	r3, #255	@ 0xff
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <MCP2515_LoadTxBuffer>:
  * @param  buffer: 缓冲区编号 (0-2)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_LoadTxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x30 + (buffer * 0x10);  // 计算缓冲区基地址
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	3303      	adds	r3, #3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    
    // 准备ID寄存器值
    if (message->ide) {
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01d      	beq.n	800197a <MCP2515_LoadTxBuffer+0x5a>
        // 扩展帧
        sidh = (uint8_t)(message->id >> 21);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0d5b      	lsrs	r3, r3, #21
 8001944:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)(((message->id >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((message->id >> 16) & 0x03);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0c9b      	lsrs	r3, r3, #18
 800194c:	b2db      	uxtb	r3, r3
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	b2da      	uxtb	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	73bb      	strb	r3, [r7, #14]
        eid8 = (uint8_t)(message->id >> 8);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	737b      	strb	r3, [r7, #13]
        eid0 = (uint8_t)message->id;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	733b      	strb	r3, [r7, #12]
 8001978:	e00c      	b.n	8001994 <MCP2515_LoadTxBuffer+0x74>
    } else {
        // 标准帧
        sidh = (uint8_t)(message->id >> 3);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)((message->id & 0x07) << 5);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	73bb      	strb	r3, [r7, #14]
        eid8 = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	737b      	strb	r3, [r7, #13]
        eid0 = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	733b      	strb	r3, [r7, #12]
    }
    
    // 准备DLC寄存器值
    dlc = message->dlc & 0x0F;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	799b      	ldrb	r3, [r3, #6]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	72fb      	strb	r3, [r7, #11]
    if (message->rtr) {
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <MCP2515_LoadTxBuffer+0x8e>
        dlc |= 0x40;  // 设置RTR位
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ac:	72fb      	strb	r3, [r7, #11]
    }
    
    // 写入ID和控制信息
    MCP2515_WriteRegister(base_addr + 1, sidh);  // SIDH
 80019ae:	7a7b      	ldrb	r3, [r7, #9]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc23 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 2, sidl);  // SIDL
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	3302      	adds	r3, #2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	7bba      	ldrb	r2, [r7, #14]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fc1b 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 3, eid8);  // EID8
 80019ce:	7a7b      	ldrb	r3, [r7, #9]
 80019d0:	3303      	adds	r3, #3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	7b7a      	ldrb	r2, [r7, #13]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc13 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 4, eid0);  // EID0
 80019de:	7a7b      	ldrb	r3, [r7, #9]
 80019e0:	3304      	adds	r3, #4
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	7b3a      	ldrb	r2, [r7, #12]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc0b 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 5, dlc);   // DLC
 80019ee:	7a7b      	ldrb	r3, [r7, #9]
 80019f0:	3305      	adds	r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	7afa      	ldrb	r2, [r7, #11]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc03 	bl	8001204 <MCP2515_WriteRegister>
    
    // 写入数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	72bb      	strb	r3, [r7, #10]
 8001a02:	e00f      	b.n	8001a24 <MCP2515_LoadTxBuffer+0x104>
        MCP2515_WriteRegister(base_addr + 6 + i, message->data[i]);
 8001a04:	7a7a      	ldrb	r2, [r7, #9]
 8001a06:	7abb      	ldrb	r3, [r7, #10]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	7abb      	ldrb	r3, [r7, #10]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	79db      	ldrb	r3, [r3, #7]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff fbf3 	bl	8001204 <MCP2515_WriteRegister>
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001a1e:	7abb      	ldrb	r3, [r7, #10]
 8001a20:	3301      	adds	r3, #1
 8001a22:	72bb      	strb	r3, [r7, #10]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	799b      	ldrb	r3, [r3, #6]
 8001a28:	7aba      	ldrb	r2, [r7, #10]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d202      	bcs.n	8001a34 <MCP2515_LoadTxBuffer+0x114>
 8001a2e:	7abb      	ldrb	r3, [r7, #10]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d9e7      	bls.n	8001a04 <MCP2515_LoadTxBuffer+0xe4>
    }
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MCP2515_ReadRxBuffer>:
  * @param  buffer: 缓冲区编号 (0-1)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_ReadRxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x60 + (buffer * 0x10);  // 计算缓冲区基地址
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	3306      	adds	r3, #6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	73bb      	strb	r3, [r7, #14]
    uint8_t i;
    
    // 读取ID和控制信息
    sidh = MCP2515_ReadRegister(base_addr + 1);  // SIDH
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fbb9 	bl	80011d0 <MCP2515_ReadRegister>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	737b      	strb	r3, [r7, #13]
    sidl = MCP2515_ReadRegister(base_addr + 2);  // SIDL
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	3302      	adds	r3, #2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fbb1 	bl	80011d0 <MCP2515_ReadRegister>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	733b      	strb	r3, [r7, #12]
    eid8 = MCP2515_ReadRegister(base_addr + 3);  // EID8
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	3303      	adds	r3, #3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fba9 	bl	80011d0 <MCP2515_ReadRegister>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]
    eid0 = MCP2515_ReadRegister(base_addr + 4);  // EID0
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	3304      	adds	r3, #4
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fba1 	bl	80011d0 <MCP2515_ReadRegister>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	72bb      	strb	r3, [r7, #10]
    dlc = MCP2515_ReadRegister(base_addr + 5);   // DLC
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	3305      	adds	r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb99 	bl	80011d0 <MCP2515_ReadRegister>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	727b      	strb	r3, [r7, #9]
    
    // 解析ID
    if (sidl & 0x08) {
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d016      	beq.n	8001ada <MCP2515_ReadRxBuffer+0x9e>
        // 扩展帧
        message->ide = 1;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 21) | 
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	055a      	lsls	r2, r3, #21
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	035b      	lsls	r3, r3, #13
 8001aba:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
        message->id = ((uint32_t)sidh << 21) | 
 8001abe:	431a      	orrs	r2, r3
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001ac8:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	021b      	lsls	r3, r3, #8
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001ace:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001ad0:	7abb      	ldrb	r3, [r7, #10]
 8001ad2:	431a      	orrs	r2, r3
        message->id = ((uint32_t)sidh << 21) | 
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e00a      	b.n	8001af0 <MCP2515_ReadRxBuffer+0xb4>
                      eid0;
    } else {
        // 标准帧
        message->ide = 0;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 3) | ((sidl & 0xE0) >> 5);
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	7b3a      	ldrb	r2, [r7, #12]
 8001ae6:	0952      	lsrs	r2, r2, #5
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	431a      	orrs	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    // 解析控制信息
    message->rtr = (dlc & 0x40) ? 1 : 0;
 8001af0:	7a7b      	ldrb	r3, [r7, #9]
 8001af2:	119b      	asrs	r3, r3, #6
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	715a      	strb	r2, [r3, #5]
    message->dlc = dlc & 0x0F;
 8001b00:	7a7b      	ldrb	r3, [r7, #9]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	719a      	strb	r2, [r3, #6]
    
    // 读取数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e011      	b.n	8001b36 <MCP2515_ReadRxBuffer+0xfa>
        message->data[i] = MCP2515_ReadRegister(base_addr + 6 + i);
 8001b12:	7bba      	ldrb	r2, [r7, #14]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	7bfc      	ldrb	r4, [r7, #15]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb55 	bl	80011d0 <MCP2515_ReadRegister>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4423      	add	r3, r4
 8001b2e:	71da      	strb	r2, [r3, #7]
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	799b      	ldrb	r3, [r3, #6]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d20b      	bcs.n	8001b58 <MCP2515_ReadRxBuffer+0x11c>
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9e5      	bls.n	8001b12 <MCP2515_ReadRxBuffer+0xd6>
    }
    
    // 清空剩余数据字节
    for (; i < 8; i++) {
 8001b46:	e007      	b.n	8001b58 <MCP2515_ReadRxBuffer+0x11c>
        message->data[i] = 0;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	71da      	strb	r2, [r3, #7]
    for (; i < 8; i++) {
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d9f4      	bls.n	8001b48 <MCP2515_ReadRxBuffer+0x10c>
    }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MCP2515_GetErrorCounters>:
  * @param  tec: 发送错误计数器指针
  * @param  rec: 接收错误计数器指针
  * @retval None
  */
void MCP2515_GetErrorCounters(uint8_t *tec, uint8_t *rec)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    *tec = MCP2515_ReadRegister(MCP2515_TEC);
 8001b72:	201c      	movs	r0, #28
 8001b74:	f7ff fb2c 	bl	80011d0 <MCP2515_ReadRegister>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	701a      	strb	r2, [r3, #0]
    *rec = MCP2515_ReadRegister(MCP2515_REC);
 8001b80:	201d      	movs	r0, #29
 8001b82:	f7ff fb25 	bl	80011d0 <MCP2515_ReadRegister>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <MCP2515_DiagnoseErrors>:
  * @brief  详细的错误状态诊断
  * @param  None
  * @retval None
  */
void MCP2515_DiagnoseErrors(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
    uint8_t canintf, eflg, tec, rec;
    
    printf("\r\n=== MCP2515 Error Diagnosis ===\r\n");
 8001b9e:	4869      	ldr	r0, [pc, #420]	@ (8001d44 <MCP2515_DiagnoseErrors+0x1ac>)
 8001ba0:	f006 f874 	bl	8007c8c <puts>
    
    // Read status registers
    canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001ba4:	202c      	movs	r0, #44	@ 0x2c
 8001ba6:	f7ff fb13 	bl	80011d0 <MCP2515_ReadRegister>
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
    eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001bae:	202d      	movs	r0, #45	@ 0x2d
 8001bb0:	f7ff fb0e 	bl	80011d0 <MCP2515_ReadRegister>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71bb      	strb	r3, [r7, #6]
    MCP2515_GetErrorCounters(&tec, &rec);
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	1d7b      	adds	r3, r7, #5
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ffd2 	bl	8001b68 <MCP2515_GetErrorCounters>
    
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	485f      	ldr	r0, [pc, #380]	@ (8001d48 <MCP2515_DiagnoseErrors+0x1b0>)
 8001bca:	f005 fff7 	bl	8007bbc <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	485e      	ldr	r0, [pc, #376]	@ (8001d4c <MCP2515_DiagnoseErrors+0x1b4>)
 8001bd4:	f005 fff2 	bl	8007bbc <iprintf>
    printf("Transmit Error Counter (TEC): %d\r\n", tec);
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485c      	ldr	r0, [pc, #368]	@ (8001d50 <MCP2515_DiagnoseErrors+0x1b8>)
 8001bde:	f005 ffed 	bl	8007bbc <iprintf>
    printf("Receive Error Counter (REC): %d\r\n", rec);
 8001be2:	793b      	ldrb	r3, [r7, #4]
 8001be4:	4619      	mov	r1, r3
 8001be6:	485b      	ldr	r0, [pc, #364]	@ (8001d54 <MCP2515_DiagnoseErrors+0x1bc>)
 8001be8:	f005 ffe8 	bl	8007bbc <iprintf>
    
    // Analyze CANINTF
    printf("\r\n--- CANINTF Analysis ---\r\n");
 8001bec:	485a      	ldr	r0, [pc, #360]	@ (8001d58 <MCP2515_DiagnoseErrors+0x1c0>)
 8001bee:	f006 f84d 	bl	8007c8c <puts>
    if (canintf & 0x80) printf("WARNING: MERRF - Message Error Interrupt\r\n");
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da02      	bge.n	8001c00 <MCP2515_DiagnoseErrors+0x68>
 8001bfa:	4858      	ldr	r0, [pc, #352]	@ (8001d5c <MCP2515_DiagnoseErrors+0x1c4>)
 8001bfc:	f006 f846 	bl	8007c8c <puts>
    if (canintf & 0x40) printf("INFO: WAKIF - Wake-up Interrupt\r\n");
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <MCP2515_DiagnoseErrors+0x78>
 8001c0a:	4855      	ldr	r0, [pc, #340]	@ (8001d60 <MCP2515_DiagnoseErrors+0x1c8>)
 8001c0c:	f006 f83e 	bl	8007c8c <puts>
    if (canintf & 0x20) printf("WARNING: ERRIF - Error Interrupt\r\n");
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <MCP2515_DiagnoseErrors+0x88>
 8001c1a:	4852      	ldr	r0, [pc, #328]	@ (8001d64 <MCP2515_DiagnoseErrors+0x1cc>)
 8001c1c:	f006 f836 	bl	8007c8c <puts>
    if (canintf & 0x10) printf("OK: TX2IF - Transmit Buffer 2 Interrupt\r\n");
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <MCP2515_DiagnoseErrors+0x98>
 8001c2a:	484f      	ldr	r0, [pc, #316]	@ (8001d68 <MCP2515_DiagnoseErrors+0x1d0>)
 8001c2c:	f006 f82e 	bl	8007c8c <puts>
    if (canintf & 0x08) printf("OK: TX1IF - Transmit Buffer 1 Interrupt\r\n");
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <MCP2515_DiagnoseErrors+0xa8>
 8001c3a:	484c      	ldr	r0, [pc, #304]	@ (8001d6c <MCP2515_DiagnoseErrors+0x1d4>)
 8001c3c:	f006 f826 	bl	8007c8c <puts>
    if (canintf & 0x04) printf("OK: TX0IF - Transmit Buffer 0 Interrupt\r\n");
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <MCP2515_DiagnoseErrors+0xb8>
 8001c4a:	4849      	ldr	r0, [pc, #292]	@ (8001d70 <MCP2515_DiagnoseErrors+0x1d8>)
 8001c4c:	f006 f81e 	bl	8007c8c <puts>
    if (canintf & 0x02) printf("INFO: RX1IF - Receive Buffer 1 Interrupt\r\n");
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <MCP2515_DiagnoseErrors+0xc8>
 8001c5a:	4846      	ldr	r0, [pc, #280]	@ (8001d74 <MCP2515_DiagnoseErrors+0x1dc>)
 8001c5c:	f006 f816 	bl	8007c8c <puts>
    if (canintf & 0x01) printf("INFO: RX0IF - Receive Buffer 0 Interrupt\r\n");
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <MCP2515_DiagnoseErrors+0xd8>
 8001c6a:	4843      	ldr	r0, [pc, #268]	@ (8001d78 <MCP2515_DiagnoseErrors+0x1e0>)
 8001c6c:	f006 f80e 	bl	8007c8c <puts>
    
    // Analyze EFLG
    printf("\r\n--- EFLG Analysis ---\r\n");
 8001c70:	4842      	ldr	r0, [pc, #264]	@ (8001d7c <MCP2515_DiagnoseErrors+0x1e4>)
 8001c72:	f006 f80b 	bl	8007c8c <puts>
    if (eflg & 0x80) printf("ERROR: RX1OVR - Receive Buffer 1 Overflow\r\n");
 8001c76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da02      	bge.n	8001c84 <MCP2515_DiagnoseErrors+0xec>
 8001c7e:	4840      	ldr	r0, [pc, #256]	@ (8001d80 <MCP2515_DiagnoseErrors+0x1e8>)
 8001c80:	f006 f804 	bl	8007c8c <puts>
    if (eflg & 0x40) printf("ERROR: RX0OVR - Receive Buffer 0 Overflow\r\n");
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <MCP2515_DiagnoseErrors+0xfc>
 8001c8e:	483d      	ldr	r0, [pc, #244]	@ (8001d84 <MCP2515_DiagnoseErrors+0x1ec>)
 8001c90:	f005 fffc 	bl	8007c8c <puts>
    if (eflg & 0x20) printf("ERROR: TXBO - Bus-Off State\r\n");
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <MCP2515_DiagnoseErrors+0x10c>
 8001c9e:	483a      	ldr	r0, [pc, #232]	@ (8001d88 <MCP2515_DiagnoseErrors+0x1f0>)
 8001ca0:	f005 fff4 	bl	8007c8c <puts>
    if (eflg & 0x10) printf("WARNING: TXEP - Transmit Error Passive\r\n");
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <MCP2515_DiagnoseErrors+0x11c>
 8001cae:	4837      	ldr	r0, [pc, #220]	@ (8001d8c <MCP2515_DiagnoseErrors+0x1f4>)
 8001cb0:	f005 ffec 	bl	8007c8c <puts>
    if (eflg & 0x08) printf("WARNING: RXEP - Receive Error Passive\r\n");
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <MCP2515_DiagnoseErrors+0x12c>
 8001cbe:	4834      	ldr	r0, [pc, #208]	@ (8001d90 <MCP2515_DiagnoseErrors+0x1f8>)
 8001cc0:	f005 ffe4 	bl	8007c8c <puts>
    if (eflg & 0x04) printf("WARNING: TXWAR - Transmit Error Warning\r\n");
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <MCP2515_DiagnoseErrors+0x13c>
 8001cce:	4831      	ldr	r0, [pc, #196]	@ (8001d94 <MCP2515_DiagnoseErrors+0x1fc>)
 8001cd0:	f005 ffdc 	bl	8007c8c <puts>
    if (eflg & 0x02) printf("WARNING: RXWAR - Receive Error Warning\r\n");
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <MCP2515_DiagnoseErrors+0x14c>
 8001cde:	482e      	ldr	r0, [pc, #184]	@ (8001d98 <MCP2515_DiagnoseErrors+0x200>)
 8001ce0:	f005 ffd4 	bl	8007c8c <puts>
    if (eflg & 0x01) printf("WARNING: EWARN - Error Warning\r\n");
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <MCP2515_DiagnoseErrors+0x15c>
 8001cee:	482b      	ldr	r0, [pc, #172]	@ (8001d9c <MCP2515_DiagnoseErrors+0x204>)
 8001cf0:	f005 ffcc 	bl	8007c8c <puts>
    
    // Error level assessment
    printf("\r\n--- Error Level Assessment ---\r\n");
 8001cf4:	482a      	ldr	r0, [pc, #168]	@ (8001da0 <MCP2515_DiagnoseErrors+0x208>)
 8001cf6:	f005 ffc9 	bl	8007c8c <puts>
    if (eflg & 0x20) {
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <MCP2515_DiagnoseErrors+0x174>
        printf("CRITICAL: Bus-Off state, requires re-initialization\r\n");
 8001d04:	4827      	ldr	r0, [pc, #156]	@ (8001da4 <MCP2515_DiagnoseErrors+0x20c>)
 8001d06:	f005 ffc1 	bl	8007c8c <puts>
 8001d0a:	e013      	b.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x10) {
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <MCP2515_DiagnoseErrors+0x18c>
        printf("WARNING: Transmit Error Passive, TEC >= 128\r\n");
 8001d16:	4824      	ldr	r0, [pc, #144]	@ (8001da8 <MCP2515_DiagnoseErrors+0x210>)
 8001d18:	f005 ffb8 	bl	8007c8c <puts>
        printf("   Suggestion: Check bus connection and termination resistors\r\n");
 8001d1c:	4823      	ldr	r0, [pc, #140]	@ (8001dac <MCP2515_DiagnoseErrors+0x214>)
 8001d1e:	f005 ffb5 	bl	8007c8c <puts>
 8001d22:	e007      	b.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x04) {
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
        printf("INFO: Transmit Error Warning, TEC >= 96\r\n");
 8001d2e:	4820      	ldr	r0, [pc, #128]	@ (8001db0 <MCP2515_DiagnoseErrors+0x218>)
 8001d30:	f005 ffac 	bl	8007c8c <puts>
    }
    
    printf("===============================\r\n");
 8001d34:	481f      	ldr	r0, [pc, #124]	@ (8001db4 <MCP2515_DiagnoseErrors+0x21c>)
 8001d36:	f005 ffa9 	bl	8007c8c <puts>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08009860 	.word	0x08009860
 8001d48:	080097a8 	.word	0x080097a8
 8001d4c:	080097bc 	.word	0x080097bc
 8001d50:	08009884 	.word	0x08009884
 8001d54:	080098a8 	.word	0x080098a8
 8001d58:	080098cc 	.word	0x080098cc
 8001d5c:	080098e8 	.word	0x080098e8
 8001d60:	08009914 	.word	0x08009914
 8001d64:	08009938 	.word	0x08009938
 8001d68:	0800995c 	.word	0x0800995c
 8001d6c:	08009988 	.word	0x08009988
 8001d70:	080099b4 	.word	0x080099b4
 8001d74:	080099e0 	.word	0x080099e0
 8001d78:	08009a0c 	.word	0x08009a0c
 8001d7c:	08009a38 	.word	0x08009a38
 8001d80:	08009a54 	.word	0x08009a54
 8001d84:	08009a80 	.word	0x08009a80
 8001d88:	08009aac 	.word	0x08009aac
 8001d8c:	08009acc 	.word	0x08009acc
 8001d90:	08009af4 	.word	0x08009af4
 8001d94:	08009b1c 	.word	0x08009b1c
 8001d98:	08009b48 	.word	0x08009b48
 8001d9c:	08009b70 	.word	0x08009b70
 8001da0:	08009b90 	.word	0x08009b90
 8001da4:	08009bb4 	.word	0x08009bb4
 8001da8:	08009bec 	.word	0x08009bec
 8001dac:	08009c1c 	.word	0x08009c1c
 8001db0:	08009c5c 	.word	0x08009c5c
 8001db4:	08009c88 	.word	0x08009c88

08001db8 <MCP2515_ClearAllErrors>:
  * @brief  清除所有错误标志和中断标志
  * @param  None
  * @retval None
  */
void MCP2515_ClearAllErrors(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    printf("Clearing error flags...\r\n");
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MCP2515_ClearAllErrors+0x1c>)
 8001dbe:	f005 ff65 	bl	8007c8c <puts>
    
    // Clear interrupt flags
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	202c      	movs	r0, #44	@ 0x2c
 8001dc6:	f7ff fa1d 	bl	8001204 <MCP2515_WriteRegister>
    
    printf("Error flags cleared\r\n");
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <MCP2515_ClearAllErrors+0x20>)
 8001dcc:	f005 ff5e 	bl	8007c8c <puts>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	08009cac 	.word	0x08009cac
 8001dd8:	08009cc8 	.word	0x08009cc8

08001ddc <MCP2515_LoopbackTest>:
  * @brief  回环模式测试
  * @param  None
  * @retval 测试结果 (MCP2515_OK: 成功, MCP2515_ERROR: 失败)
  */
uint8_t MCP2515_LoopbackTest(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    MCP2515_CANMessage_t recv_msg;
    uint8_t result = MCP2515_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    
    printf("\r\n=== Loopback Mode Test ===\r\n");
 8001de8:	4854      	ldr	r0, [pc, #336]	@ (8001f3c <MCP2515_LoopbackTest+0x160>)
 8001dea:	f005 ff4f 	bl	8007c8c <puts>
    
    // Switch to loopback mode
    printf("Switching to loopback mode...\r\n");
 8001dee:	4854      	ldr	r0, [pc, #336]	@ (8001f40 <MCP2515_LoopbackTest+0x164>)
 8001df0:	f005 ff4c 	bl	8007c8c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 8001df4:	2040      	movs	r0, #64	@ 0x40
 8001df6:	f7ff fa95 	bl	8001324 <MCP2515_SetMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <MCP2515_LoopbackTest+0x2e>
        printf("ERROR: Failed to switch to loopback mode\r\n");
 8001e00:	4850      	ldr	r0, [pc, #320]	@ (8001f44 <MCP2515_LoopbackTest+0x168>)
 8001e02:	f005 ff43 	bl	8007c8c <puts>
        return MCP2515_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e093      	b.n	8001f32 <MCP2515_LoopbackTest+0x156>
    }
    
    HAL_Delay(100);  // Wait for mode switch completion
 8001e0a:	2064      	movs	r0, #100	@ 0x64
 8001e0c:	f000 fd28 	bl	8002860 <HAL_Delay>
    
    // Prepare test message
    test_msg.id = 0x123;
 8001e10:	f240 1323 	movw	r3, #291	@ 0x123
 8001e14:	613b      	str	r3, [r7, #16]
    test_msg.dlc = 8;
 8001e16:	2308      	movs	r3, #8
 8001e18:	75bb      	strb	r3, [r7, #22]
    test_msg.rtr = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	757b      	strb	r3, [r7, #21]
    test_msg.ide = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < 8; i++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e26:	e00c      	b.n	8001e42 <MCP2515_LoopbackTest+0x66>
        test_msg.data[i] = 0xA0 + i;
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b60      	subs	r3, #96	@ 0x60
 8001e2e:	b2d9      	uxtb	r1, r3
 8001e30:	f107 0217 	add.w	r2, r7, #23
 8001e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e36:	4413      	add	r3, r2
 8001e38:	460a      	mov	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	3301      	adds	r3, #1
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	ddef      	ble.n	8001e28 <MCP2515_LoopbackTest+0x4c>
    }
    
    printf("Sending test message ID:0x%03lX...\r\n", test_msg.id);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	483e      	ldr	r0, [pc, #248]	@ (8001f48 <MCP2515_LoopbackTest+0x16c>)
 8001e4e:	f005 feb5 	bl	8007bbc <iprintf>
    
    // Send message
    if (MCP2515_SendMessage(&test_msg) == MCP2515_OK) {
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fb8c 	bl	8001574 <MCP2515_SendMessage>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d156      	bne.n	8001f10 <MCP2515_LoopbackTest+0x134>
        printf("OK: Message sent successfully\r\n");
 8001e62:	483a      	ldr	r0, [pc, #232]	@ (8001f4c <MCP2515_LoopbackTest+0x170>)
 8001e64:	f005 ff12 	bl	8007c8c <puts>
        
        // Wait for a while
        HAL_Delay(50);
 8001e68:	2032      	movs	r0, #50	@ 0x32
 8001e6a:	f000 fcf9 	bl	8002860 <HAL_Delay>
        
        // Check if message received
        if (MCP2515_CheckReceive() == MCP2515_OK) {
 8001e6e:	f7ff fc0b 	bl	8001688 <MCP2515_CheckReceive>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d147      	bne.n	8001f08 <MCP2515_LoopbackTest+0x12c>
            if (MCP2515_ReceiveMessage(&recv_msg) == MCP2515_OK) {
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fbd0 	bl	8001620 <MCP2515_ReceiveMessage>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d13c      	bne.n	8001f00 <MCP2515_LoopbackTest+0x124>
                printf("OK: Received loopback message ID:0x%03lX\r\n", recv_msg.id);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4831      	ldr	r0, [pc, #196]	@ (8001f50 <MCP2515_LoopbackTest+0x174>)
 8001e8c:	f005 fe96 	bl	8007bbc <iprintf>
                
                // Verify data
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d12f      	bne.n	8001ef8 <MCP2515_LoopbackTest+0x11c>
 8001e98:	79ba      	ldrb	r2, [r7, #6]
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d12b      	bne.n	8001ef8 <MCP2515_LoopbackTest+0x11c>
                    uint8_t data_match = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    for (int i = 0; i < test_msg.dlc; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	e011      	b.n	8001ed0 <MCP2515_LoopbackTest+0xf4>
                        if (recv_msg.data[i] != test_msg.data[i]) {
 8001eac:	1dfa      	adds	r2, r7, #7
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	f107 0117 	add.w	r1, r7, #23
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	440b      	add	r3, r1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d003      	beq.n	8001eca <MCP2515_LoopbackTest+0xee>
                            data_match = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            break;
 8001ec8:	e007      	b.n	8001eda <MCP2515_LoopbackTest+0xfe>
                    for (int i = 0; i < test_msg.dlc; i++) {
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
 8001ed0:	7dbb      	ldrb	r3, [r7, #22]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	dbe8      	blt.n	8001eac <MCP2515_LoopbackTest+0xd0>
                        }
                    }
                    
                    if (data_match) {
 8001eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <MCP2515_LoopbackTest+0x114>
                        printf("SUCCESS: Loopback test passed! MCP2515 hardware is working\r\n");
 8001ee2:	481c      	ldr	r0, [pc, #112]	@ (8001f54 <MCP2515_LoopbackTest+0x178>)
 8001ee4:	f005 fed2 	bl	8007c8c <puts>
                        result = MCP2515_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001eee:	e012      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                    } else {
                        printf("ERROR: Data mismatch\r\n");
 8001ef0:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <MCP2515_LoopbackTest+0x17c>)
 8001ef2:	f005 fecb 	bl	8007c8c <puts>
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001ef6:	e00e      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                    }
                } else {
                    printf("ERROR: ID or DLC mismatch\r\n");
 8001ef8:	4818      	ldr	r0, [pc, #96]	@ (8001f5c <MCP2515_LoopbackTest+0x180>)
 8001efa:	f005 fec7 	bl	8007c8c <puts>
 8001efe:	e00a      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                }
            } else {
                printf("ERROR: Failed to receive message\r\n");
 8001f00:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <MCP2515_LoopbackTest+0x184>)
 8001f02:	f005 fec3 	bl	8007c8c <puts>
 8001f06:	e006      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
            }
        } else {
            printf("ERROR: No loopback message received\r\n");
 8001f08:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <MCP2515_LoopbackTest+0x188>)
 8001f0a:	f005 febf 	bl	8007c8c <puts>
 8001f0e:	e002      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
        }
    } else {
        printf("ERROR: Message send failed\r\n");
 8001f10:	4815      	ldr	r0, [pc, #84]	@ (8001f68 <MCP2515_LoopbackTest+0x18c>)
 8001f12:	f005 febb 	bl	8007c8c <puts>
    }
    
    // Switch back to normal mode
    printf("Switching back to normal mode...\r\n");
 8001f16:	4815      	ldr	r0, [pc, #84]	@ (8001f6c <MCP2515_LoopbackTest+0x190>)
 8001f18:	f005 feb8 	bl	8007c8c <puts>
    MCP2515_SetMode(MCP2515_MODE_NORMAL);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fa01 	bl	8001324 <MCP2515_SetMode>
    HAL_Delay(100);
 8001f22:	2064      	movs	r0, #100	@ 0x64
 8001f24:	f000 fc9c 	bl	8002860 <HAL_Delay>
    
    printf("==========================\r\n");
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MCP2515_LoopbackTest+0x194>)
 8001f2a:	f005 feaf 	bl	8007c8c <puts>
    return result;
 8001f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3730      	adds	r7, #48	@ 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	08009ce0 	.word	0x08009ce0
 8001f40:	08009d00 	.word	0x08009d00
 8001f44:	08009d20 	.word	0x08009d20
 8001f48:	08009d4c 	.word	0x08009d4c
 8001f4c:	08009d74 	.word	0x08009d74
 8001f50:	08009d94 	.word	0x08009d94
 8001f54:	08009dc0 	.word	0x08009dc0
 8001f58:	08009dfc 	.word	0x08009dfc
 8001f5c:	08009e14 	.word	0x08009e14
 8001f60:	08009e30 	.word	0x08009e30
 8001f64:	08009e54 	.word	0x08009e54
 8001f68:	08009e7c 	.word	0x08009e7c
 8001f6c:	08009e98 	.word	0x08009e98
 8001f70:	08009ebc 	.word	0x08009ebc

08001f74 <MCP2515_CANOETest>:
  * @retval None
  * @note   此函数专门用于配合CANOE工具进行CAN总线测试
  *         发送报文后立即通过串口输出发送的数据，便于对比验证
  */
void MCP2515_CANOETest(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	b088      	sub	sp, #32
 8001f78:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    uint8_t result;
    static uint32_t test_counter = 0;
    
    printf("\r\n=== CANOE Test Mode - CAN Message Transmission ===\r\n");
 8001f7a:	48a0      	ldr	r0, [pc, #640]	@ (80021fc <MCP2515_CANOETest+0x288>)
 8001f7c:	f005 fe86 	bl	8007c8c <puts>
    
    // 确保处于正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8001f80:	2000      	movs	r0, #0
 8001f82:	f7ff f9cf 	bl	8001324 <MCP2515_SetMode>
 8001f86:	4603      	mov	r3, r0
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d003      	beq.n	8001f94 <MCP2515_CANOETest+0x20>
        printf("ERROR: Failed to switch to normal mode\r\n");
 8001f8c:	489c      	ldr	r0, [pc, #624]	@ (8002200 <MCP2515_CANOETest+0x28c>)
 8001f8e:	f005 fe7d 	bl	8007c8c <puts>
 8001f92:	e130      	b.n	80021f6 <MCP2515_CANOETest+0x282>
        return;
    }
    
    // 准备测试报文1 - 标准帧
    test_msg.id = 0x123;
 8001f94:	f240 1323 	movw	r3, #291	@ 0x123
 8001f98:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 8;
 8001f9a:	2308      	movs	r3, #8
 8001f9c:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 8001f9e:	2300      	movs	r3, #0
 8001fa0:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 8001fa2:	2300      	movs	r3, #0
 8001fa4:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0x11;
 8001fa6:	2311      	movs	r3, #17
 8001fa8:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0x22;
 8001faa:	2322      	movs	r3, #34	@ 0x22
 8001fac:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0x33;
 8001fae:	2333      	movs	r3, #51	@ 0x33
 8001fb0:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0x44;
 8001fb2:	2344      	movs	r3, #68	@ 0x44
 8001fb4:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(test_counter & 0xFF);
 8001fb6:	4b93      	ldr	r3, [pc, #588]	@ (8002204 <MCP2515_CANOETest+0x290>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	b2db      	uxtb	r3, r3
 8001fbc:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((test_counter >> 8) & 0xFF);
 8001fbe:	4b91      	ldr	r3, [pc, #580]	@ (8002204 <MCP2515_CANOETest+0x290>)
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	0a1b      	lsrs	r3, r3, #8
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	743b      	strb	r3, [r7, #16]
    test_msg.data[6] = 0xAA;
 8001fc8:	23aa      	movs	r3, #170	@ 0xaa
 8001fca:	747b      	strb	r3, [r7, #17]
    test_msg.data[7] = 0xBB;
 8001fcc:	23bb      	movs	r3, #187	@ 0xbb
 8001fce:	74bb      	strb	r3, [r7, #18]
    
    printf("\r\n--- Test Message 1 (Standard Frame) ---\r\n");
 8001fd0:	488d      	ldr	r0, [pc, #564]	@ (8002208 <MCP2515_CANOETest+0x294>)
 8001fd2:	f005 fe5b 	bl	8007c8c <puts>
    printf("Sending CAN message to bus...\r\n");
 8001fd6:	488d      	ldr	r0, [pc, #564]	@ (800220c <MCP2515_CANOETest+0x298>)
 8001fd8:	f005 fe58 	bl	8007c8c <puts>
    printf("CAN ID: 0x%03lX (Standard Frame)\r\n", test_msg.id);
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	4619      	mov	r1, r3
 8001fe0:	488b      	ldr	r0, [pc, #556]	@ (8002210 <MCP2515_CANOETest+0x29c>)
 8001fe2:	f005 fdeb 	bl	8007bbc <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 8001fe6:	7abb      	ldrb	r3, [r7, #10]
 8001fe8:	4619      	mov	r1, r3
 8001fea:	488a      	ldr	r0, [pc, #552]	@ (8002214 <MCP2515_CANOETest+0x2a0>)
 8001fec:	f005 fde6 	bl	8007bbc <iprintf>
    printf("Data: ");
 8001ff0:	4889      	ldr	r0, [pc, #548]	@ (8002218 <MCP2515_CANOETest+0x2a4>)
 8001ff2:	f005 fde3 	bl	8007bbc <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 8001ff6:	2300      	movs	r3, #0
 8001ff8:	61fb      	str	r3, [r7, #28]
 8001ffa:	e00b      	b.n	8002014 <MCP2515_CANOETest+0xa0>
        printf("0x%02X ", test_msg.data[i]);
 8001ffc:	f107 020b 	add.w	r2, r7, #11
 8002000:	69fb      	ldr	r3, [r7, #28]
 8002002:	4413      	add	r3, r2
 8002004:	781b      	ldrb	r3, [r3, #0]
 8002006:	4619      	mov	r1, r3
 8002008:	4884      	ldr	r0, [pc, #528]	@ (800221c <MCP2515_CANOETest+0x2a8>)
 800200a:	f005 fdd7 	bl	8007bbc <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 800200e:	69fb      	ldr	r3, [r7, #28]
 8002010:	3301      	adds	r3, #1
 8002012:	61fb      	str	r3, [r7, #28]
 8002014:	7abb      	ldrb	r3, [r7, #10]
 8002016:	461a      	mov	r2, r3
 8002018:	69fb      	ldr	r3, [r7, #28]
 800201a:	4293      	cmp	r3, r2
 800201c:	dbee      	blt.n	8001ffc <MCP2515_CANOETest+0x88>
    }
    printf("\r\n");
 800201e:	4880      	ldr	r0, [pc, #512]	@ (8002220 <MCP2515_CANOETest+0x2ac>)
 8002020:	f005 fe34 	bl	8007c8c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 8002024:	1d3b      	adds	r3, r7, #4
 8002026:	4618      	mov	r0, r3
 8002028:	f7ff faa4 	bl	8001574 <MCP2515_SendMessage>
 800202c:	4603      	mov	r3, r0
 800202e:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 8002030:	7dfb      	ldrb	r3, [r7, #23]
 8002032:	2b00      	cmp	r3, #0
 8002034:	d106      	bne.n	8002044 <MCP2515_CANOETest+0xd0>
        printf("✓ Message sent successfully to CAN bus\r\n");
 8002036:	487b      	ldr	r0, [pc, #492]	@ (8002224 <MCP2515_CANOETest+0x2b0>)
 8002038:	f005 fe28 	bl	8007c8c <puts>
        printf(">> Check CANOE for received message with ID 0x123\r\n");
 800203c:	487a      	ldr	r0, [pc, #488]	@ (8002228 <MCP2515_CANOETest+0x2b4>)
 800203e:	f005 fe25 	bl	8007c8c <puts>
 8002042:	e00f      	b.n	8002064 <MCP2515_CANOETest+0xf0>
    } else if (result == MCP2515_TIMEOUT) {
 8002044:	7dfb      	ldrb	r3, [r7, #23]
 8002046:	2b02      	cmp	r3, #2
 8002048:	d109      	bne.n	800205e <MCP2515_CANOETest+0xea>
        printf("⚠ Message send timeout - No ACK received\r\n");
 800204a:	4878      	ldr	r0, [pc, #480]	@ (800222c <MCP2515_CANOETest+0x2b8>)
 800204c:	f005 fe1e 	bl	8007c8c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 8002050:	4877      	ldr	r0, [pc, #476]	@ (8002230 <MCP2515_CANOETest+0x2bc>)
 8002052:	f005 fe1b 	bl	8007c8c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 8002056:	4877      	ldr	r0, [pc, #476]	@ (8002234 <MCP2515_CANOETest+0x2c0>)
 8002058:	f005 fe18 	bl	8007c8c <puts>
 800205c:	e002      	b.n	8002064 <MCP2515_CANOETest+0xf0>
    } else {
        printf("✗ Message send failed\r\n");
 800205e:	4876      	ldr	r0, [pc, #472]	@ (8002238 <MCP2515_CANOETest+0x2c4>)
 8002060:	f005 fe14 	bl	8007c8c <puts>
    }
    
    HAL_Delay(500);  // 延时500ms
 8002064:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8002068:	f000 fbfa 	bl	8002860 <HAL_Delay>
    
    // 准备测试报文2 - 扩展帧
    test_msg.id = 0x12345678;
 800206c:	4b73      	ldr	r3, [pc, #460]	@ (800223c <MCP2515_CANOETest+0x2c8>)
 800206e:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 6;
 8002070:	2306      	movs	r3, #6
 8002072:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 0;
 8002074:	2300      	movs	r3, #0
 8002076:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 1;  // 扩展帧
 8002078:	2301      	movs	r3, #1
 800207a:	723b      	strb	r3, [r7, #8]
    test_msg.data[0] = 0xCA;
 800207c:	23ca      	movs	r3, #202	@ 0xca
 800207e:	72fb      	strb	r3, [r7, #11]
    test_msg.data[1] = 0xFE;
 8002080:	23fe      	movs	r3, #254	@ 0xfe
 8002082:	733b      	strb	r3, [r7, #12]
    test_msg.data[2] = 0xBA;
 8002084:	23ba      	movs	r3, #186	@ 0xba
 8002086:	737b      	strb	r3, [r7, #13]
    test_msg.data[3] = 0xBE;
 8002088:	23be      	movs	r3, #190	@ 0xbe
 800208a:	73bb      	strb	r3, [r7, #14]
    test_msg.data[4] = (uint8_t)(HAL_GetTick() & 0xFF);
 800208c:	f000 fbdc 	bl	8002848 <HAL_GetTick>
 8002090:	4603      	mov	r3, r0
 8002092:	b2db      	uxtb	r3, r3
 8002094:	73fb      	strb	r3, [r7, #15]
    test_msg.data[5] = (uint8_t)((HAL_GetTick() >> 8) & 0xFF);
 8002096:	f000 fbd7 	bl	8002848 <HAL_GetTick>
 800209a:	4603      	mov	r3, r0
 800209c:	0a1b      	lsrs	r3, r3, #8
 800209e:	b2db      	uxtb	r3, r3
 80020a0:	743b      	strb	r3, [r7, #16]
    
    printf("\r\n--- Test Message 2 (Extended Frame) ---\r\n");
 80020a2:	4867      	ldr	r0, [pc, #412]	@ (8002240 <MCP2515_CANOETest+0x2cc>)
 80020a4:	f005 fdf2 	bl	8007c8c <puts>
    printf("Sending CAN message to bus...\r\n");
 80020a8:	4858      	ldr	r0, [pc, #352]	@ (800220c <MCP2515_CANOETest+0x298>)
 80020aa:	f005 fdef 	bl	8007c8c <puts>
    printf("CAN ID: 0x%08lX (Extended Frame)\r\n", test_msg.id);
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	4619      	mov	r1, r3
 80020b2:	4864      	ldr	r0, [pc, #400]	@ (8002244 <MCP2515_CANOETest+0x2d0>)
 80020b4:	f005 fd82 	bl	8007bbc <iprintf>
    printf("DLC: %d bytes\r\n", test_msg.dlc);
 80020b8:	7abb      	ldrb	r3, [r7, #10]
 80020ba:	4619      	mov	r1, r3
 80020bc:	4855      	ldr	r0, [pc, #340]	@ (8002214 <MCP2515_CANOETest+0x2a0>)
 80020be:	f005 fd7d 	bl	8007bbc <iprintf>
    printf("Data: ");
 80020c2:	4855      	ldr	r0, [pc, #340]	@ (8002218 <MCP2515_CANOETest+0x2a4>)
 80020c4:	f005 fd7a 	bl	8007bbc <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80020c8:	2300      	movs	r3, #0
 80020ca:	61bb      	str	r3, [r7, #24]
 80020cc:	e00b      	b.n	80020e6 <MCP2515_CANOETest+0x172>
        printf("0x%02X ", test_msg.data[i]);
 80020ce:	f107 020b 	add.w	r2, r7, #11
 80020d2:	69bb      	ldr	r3, [r7, #24]
 80020d4:	4413      	add	r3, r2
 80020d6:	781b      	ldrb	r3, [r3, #0]
 80020d8:	4619      	mov	r1, r3
 80020da:	4850      	ldr	r0, [pc, #320]	@ (800221c <MCP2515_CANOETest+0x2a8>)
 80020dc:	f005 fd6e 	bl	8007bbc <iprintf>
    for (int i = 0; i < test_msg.dlc; i++) {
 80020e0:	69bb      	ldr	r3, [r7, #24]
 80020e2:	3301      	adds	r3, #1
 80020e4:	61bb      	str	r3, [r7, #24]
 80020e6:	7abb      	ldrb	r3, [r7, #10]
 80020e8:	461a      	mov	r2, r3
 80020ea:	69bb      	ldr	r3, [r7, #24]
 80020ec:	4293      	cmp	r3, r2
 80020ee:	dbee      	blt.n	80020ce <MCP2515_CANOETest+0x15a>
    }
    printf("\r\n");
 80020f0:	484b      	ldr	r0, [pc, #300]	@ (8002220 <MCP2515_CANOETest+0x2ac>)
 80020f2:	f005 fdcb 	bl	8007c8c <puts>
    
    // 发送报文
    result = MCP2515_SendMessage(&test_msg);
 80020f6:	1d3b      	adds	r3, r7, #4
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7ff fa3b 	bl	8001574 <MCP2515_SendMessage>
 80020fe:	4603      	mov	r3, r0
 8002100:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 8002102:	7dfb      	ldrb	r3, [r7, #23]
 8002104:	2b00      	cmp	r3, #0
 8002106:	d106      	bne.n	8002116 <MCP2515_CANOETest+0x1a2>
        printf("✓ Message sent successfully to CAN bus\r\n");
 8002108:	4846      	ldr	r0, [pc, #280]	@ (8002224 <MCP2515_CANOETest+0x2b0>)
 800210a:	f005 fdbf 	bl	8007c8c <puts>
        printf(">> Check CANOE for received message with ID 0x12345678\r\n");
 800210e:	484e      	ldr	r0, [pc, #312]	@ (8002248 <MCP2515_CANOETest+0x2d4>)
 8002110:	f005 fdbc 	bl	8007c8c <puts>
 8002114:	e00f      	b.n	8002136 <MCP2515_CANOETest+0x1c2>
    } else if (result == MCP2515_TIMEOUT) {
 8002116:	7dfb      	ldrb	r3, [r7, #23]
 8002118:	2b02      	cmp	r3, #2
 800211a:	d109      	bne.n	8002130 <MCP2515_CANOETest+0x1bc>
        printf("⚠ Message send timeout - No ACK received\r\n");
 800211c:	4843      	ldr	r0, [pc, #268]	@ (800222c <MCP2515_CANOETest+0x2b8>)
 800211e:	f005 fdb5 	bl	8007c8c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 8002122:	4843      	ldr	r0, [pc, #268]	@ (8002230 <MCP2515_CANOETest+0x2bc>)
 8002124:	f005 fdb2 	bl	8007c8c <puts>
        printf(">> Check CANOE for transmitted message attempt\r\n");
 8002128:	4842      	ldr	r0, [pc, #264]	@ (8002234 <MCP2515_CANOETest+0x2c0>)
 800212a:	f005 fdaf 	bl	8007c8c <puts>
 800212e:	e002      	b.n	8002136 <MCP2515_CANOETest+0x1c2>
    } else {
        printf("✗ Message send failed\r\n");
 8002130:	4841      	ldr	r0, [pc, #260]	@ (8002238 <MCP2515_CANOETest+0x2c4>)
 8002132:	f005 fdab 	bl	8007c8c <puts>
    }
    
    HAL_Delay(500);  // 延时500ms
 8002136:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 800213a:	f000 fb91 	bl	8002860 <HAL_Delay>
    
    // 准备测试报文3 - RTR帧
    test_msg.id = 0x456;
 800213e:	f240 4356 	movw	r3, #1110	@ 0x456
 8002142:	607b      	str	r3, [r7, #4]
    test_msg.dlc = 4;
 8002144:	2304      	movs	r3, #4
 8002146:	72bb      	strb	r3, [r7, #10]
    test_msg.rtr = 1;  // RTR帧
 8002148:	2301      	movs	r3, #1
 800214a:	727b      	strb	r3, [r7, #9]
    test_msg.ide = 0;  // 标准帧
 800214c:	2300      	movs	r3, #0
 800214e:	723b      	strb	r3, [r7, #8]
    
    printf("\r\n--- Test Message 3 (RTR Frame) ---\r\n");
 8002150:	483e      	ldr	r0, [pc, #248]	@ (800224c <MCP2515_CANOETest+0x2d8>)
 8002152:	f005 fd9b 	bl	8007c8c <puts>
    printf("Sending RTR message to bus...\r\n");
 8002156:	483e      	ldr	r0, [pc, #248]	@ (8002250 <MCP2515_CANOETest+0x2dc>)
 8002158:	f005 fd98 	bl	8007c8c <puts>
    printf("CAN ID: 0x%03lX (Standard RTR Frame)\r\n", test_msg.id);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	4619      	mov	r1, r3
 8002160:	483c      	ldr	r0, [pc, #240]	@ (8002254 <MCP2515_CANOETest+0x2e0>)
 8002162:	f005 fd2b 	bl	8007bbc <iprintf>
    printf("DLC: %d bytes (RTR - no data)\r\n", test_msg.dlc);
 8002166:	7abb      	ldrb	r3, [r7, #10]
 8002168:	4619      	mov	r1, r3
 800216a:	483b      	ldr	r0, [pc, #236]	@ (8002258 <MCP2515_CANOETest+0x2e4>)
 800216c:	f005 fd26 	bl	8007bbc <iprintf>
    
    // 发送RTR报文
    result = MCP2515_SendMessage(&test_msg);
 8002170:	1d3b      	adds	r3, r7, #4
 8002172:	4618      	mov	r0, r3
 8002174:	f7ff f9fe 	bl	8001574 <MCP2515_SendMessage>
 8002178:	4603      	mov	r3, r0
 800217a:	75fb      	strb	r3, [r7, #23]
    if (result == MCP2515_OK) {
 800217c:	7dfb      	ldrb	r3, [r7, #23]
 800217e:	2b00      	cmp	r3, #0
 8002180:	d106      	bne.n	8002190 <MCP2515_CANOETest+0x21c>
        printf("✓ RTR message sent successfully to CAN bus\r\n");
 8002182:	4836      	ldr	r0, [pc, #216]	@ (800225c <MCP2515_CANOETest+0x2e8>)
 8002184:	f005 fd82 	bl	8007c8c <puts>
        printf(">> Check CANOE for received RTR message with ID 0x456\r\n");
 8002188:	4835      	ldr	r0, [pc, #212]	@ (8002260 <MCP2515_CANOETest+0x2ec>)
 800218a:	f005 fd7f 	bl	8007c8c <puts>
 800218e:	e00f      	b.n	80021b0 <MCP2515_CANOETest+0x23c>
    } else if (result == MCP2515_TIMEOUT) {
 8002190:	7dfb      	ldrb	r3, [r7, #23]
 8002192:	2b02      	cmp	r3, #2
 8002194:	d109      	bne.n	80021aa <MCP2515_CANOETest+0x236>
        printf("⚠ RTR message send timeout - No ACK received\r\n");
 8002196:	4833      	ldr	r0, [pc, #204]	@ (8002264 <MCP2515_CANOETest+0x2f0>)
 8002198:	f005 fd78 	bl	8007c8c <puts>
        printf(">> This is normal if no other CAN nodes are connected\r\n");
 800219c:	4824      	ldr	r0, [pc, #144]	@ (8002230 <MCP2515_CANOETest+0x2bc>)
 800219e:	f005 fd75 	bl	8007c8c <puts>
        printf(">> Check CANOE for transmitted RTR message attempt\r\n");
 80021a2:	4831      	ldr	r0, [pc, #196]	@ (8002268 <MCP2515_CANOETest+0x2f4>)
 80021a4:	f005 fd72 	bl	8007c8c <puts>
 80021a8:	e002      	b.n	80021b0 <MCP2515_CANOETest+0x23c>
    } else {
        printf("✗ RTR message send failed\r\n");
 80021aa:	4830      	ldr	r0, [pc, #192]	@ (800226c <MCP2515_CANOETest+0x2f8>)
 80021ac:	f005 fd6e 	bl	8007c8c <puts>
    }
    
    test_counter++;
 80021b0:	4b14      	ldr	r3, [pc, #80]	@ (8002204 <MCP2515_CANOETest+0x290>)
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	3301      	adds	r3, #1
 80021b6:	4a13      	ldr	r2, [pc, #76]	@ (8002204 <MCP2515_CANOETest+0x290>)
 80021b8:	6013      	str	r3, [r2, #0]
    
    printf("\r\n=== CANOE Test Summary ===\r\n");
 80021ba:	482d      	ldr	r0, [pc, #180]	@ (8002270 <MCP2515_CANOETest+0x2fc>)
 80021bc:	f005 fd66 	bl	8007c8c <puts>
    printf("Test sequence #%lu completed\r\n", test_counter);
 80021c0:	4b10      	ldr	r3, [pc, #64]	@ (8002204 <MCP2515_CANOETest+0x290>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4619      	mov	r1, r3
 80021c6:	482b      	ldr	r0, [pc, #172]	@ (8002274 <MCP2515_CANOETest+0x300>)
 80021c8:	f005 fcf8 	bl	8007bbc <iprintf>
    printf("Messages sent to CAN bus:\r\n");
 80021cc:	482a      	ldr	r0, [pc, #168]	@ (8002278 <MCP2515_CANOETest+0x304>)
 80021ce:	f005 fd5d 	bl	8007c8c <puts>
    printf("  1. Standard Frame: ID=0x123, 8 bytes data\r\n");
 80021d2:	482a      	ldr	r0, [pc, #168]	@ (800227c <MCP2515_CANOETest+0x308>)
 80021d4:	f005 fd5a 	bl	8007c8c <puts>
    printf("  2. Extended Frame: ID=0x12345678, 6 bytes data\r\n");
 80021d8:	4829      	ldr	r0, [pc, #164]	@ (8002280 <MCP2515_CANOETest+0x30c>)
 80021da:	f005 fd57 	bl	8007c8c <puts>
    printf("  3. RTR Frame: ID=0x456, 4 bytes requested\r\n");
 80021de:	4829      	ldr	r0, [pc, #164]	@ (8002284 <MCP2515_CANOETest+0x310>)
 80021e0:	f005 fd54 	bl	8007c8c <puts>
    printf("\r\nPlease check CANOE trace window for these messages\r\n");
 80021e4:	4828      	ldr	r0, [pc, #160]	@ (8002288 <MCP2515_CANOETest+0x314>)
 80021e6:	f005 fd51 	bl	8007c8c <puts>
    printf("If messages appear in CANOE, CAN transmission is working!\r\n");
 80021ea:	4828      	ldr	r0, [pc, #160]	@ (800228c <MCP2515_CANOETest+0x318>)
 80021ec:	f005 fd4e 	bl	8007c8c <puts>
    printf("===============================\r\n");
 80021f0:	4827      	ldr	r0, [pc, #156]	@ (8002290 <MCP2515_CANOETest+0x31c>)
 80021f2:	f005 fd4b 	bl	8007c8c <puts>
}
 80021f6:	3720      	adds	r7, #32
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd80      	pop	{r7, pc}
 80021fc:	08009ed8 	.word	0x08009ed8
 8002200:	08009f10 	.word	0x08009f10
 8002204:	2000014c 	.word	0x2000014c
 8002208:	08009f38 	.word	0x08009f38
 800220c:	08009f64 	.word	0x08009f64
 8002210:	08009f84 	.word	0x08009f84
 8002214:	08009fa8 	.word	0x08009fa8
 8002218:	08009fb8 	.word	0x08009fb8
 800221c:	08009fc0 	.word	0x08009fc0
 8002220:	08009fc8 	.word	0x08009fc8
 8002224:	08009fcc 	.word	0x08009fcc
 8002228:	08009ff8 	.word	0x08009ff8
 800222c:	0800a02c 	.word	0x0800a02c
 8002230:	0800a058 	.word	0x0800a058
 8002234:	0800a090 	.word	0x0800a090
 8002238:	0800a0c0 	.word	0x0800a0c0
 800223c:	12345678 	.word	0x12345678
 8002240:	0800a0dc 	.word	0x0800a0dc
 8002244:	0800a108 	.word	0x0800a108
 8002248:	0800a12c 	.word	0x0800a12c
 800224c:	0800a164 	.word	0x0800a164
 8002250:	0800a18c 	.word	0x0800a18c
 8002254:	0800a1ac 	.word	0x0800a1ac
 8002258:	0800a1d4 	.word	0x0800a1d4
 800225c:	0800a1f4 	.word	0x0800a1f4
 8002260:	0800a224 	.word	0x0800a224
 8002264:	0800a25c 	.word	0x0800a25c
 8002268:	0800a28c 	.word	0x0800a28c
 800226c:	0800a2c0 	.word	0x0800a2c0
 8002270:	0800a2e0 	.word	0x0800a2e0
 8002274:	0800a300 	.word	0x0800a300
 8002278:	0800a320 	.word	0x0800a320
 800227c:	0800a33c 	.word	0x0800a33c
 8002280:	0800a36c 	.word	0x0800a36c
 8002284:	0800a3a0 	.word	0x0800a3a0
 8002288:	0800a3d0 	.word	0x0800a3d0
 800228c:	0800a408 	.word	0x0800a408
 8002290:	08009c88 	.word	0x08009c88

08002294 <CAN_DiagnoseAndFix>:
  * @brief  完整的CAN问题诊断和修复流程
  * @param  None
  * @retval None
  */
void CAN_DiagnoseAndFix(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
    printf("\r\nStarting CAN problem diagnosis and repair process...\r\n");
 8002298:	4829      	ldr	r0, [pc, #164]	@ (8002340 <CAN_DiagnoseAndFix+0xac>)
 800229a:	f005 fcf7 	bl	8007c8c <puts>
    
    // Step 1: Diagnose current error status
    MCP2515_DiagnoseErrors();
 800229e:	f7ff fc7b 	bl	8001b98 <MCP2515_DiagnoseErrors>
    
    // Step 2: Clear error flags
    MCP2515_ClearAllErrors();
 80022a2:	f7ff fd89 	bl	8001db8 <MCP2515_ClearAllErrors>
    
    // Step 3: Loopback mode test
    if (MCP2515_LoopbackTest() == MCP2515_OK) {
 80022a6:	f7ff fd99 	bl	8001ddc <MCP2515_LoopbackTest>
 80022aa:	4603      	mov	r3, r0
 80022ac:	2b00      	cmp	r3, #0
 80022ae:	d123      	bne.n	80022f8 <CAN_DiagnoseAndFix+0x64>
        printf("\r\nSUCCESS: MCP2515 hardware is functioning normally\r\n");
 80022b0:	4824      	ldr	r0, [pc, #144]	@ (8002344 <CAN_DiagnoseAndFix+0xb0>)
 80022b2:	f005 fceb 	bl	8007c8c <puts>
        printf("Possible issues:\r\n");
 80022b6:	4824      	ldr	r0, [pc, #144]	@ (8002348 <CAN_DiagnoseAndFix+0xb4>)
 80022b8:	f005 fce8 	bl	8007c8c <puts>
        printf("   1. No other CAN nodes on the bus to acknowledge\r\n");
 80022bc:	4823      	ldr	r0, [pc, #140]	@ (800234c <CAN_DiagnoseAndFix+0xb8>)
 80022be:	f005 fce5 	bl	8007c8c <puts>
        printf("   2. Termination resistors not properly installed\r\n");
 80022c2:	4823      	ldr	r0, [pc, #140]	@ (8002350 <CAN_DiagnoseAndFix+0xbc>)
 80022c4:	f005 fce2 	bl	8007c8c <puts>
        printf("   3. CAN transceiver connection problems\r\n");
 80022c8:	4822      	ldr	r0, [pc, #136]	@ (8002354 <CAN_DiagnoseAndFix+0xc0>)
 80022ca:	f005 fcdf 	bl	8007c8c <puts>
        
        printf("\r\nSuggested solutions:\r\n");
 80022ce:	4822      	ldr	r0, [pc, #136]	@ (8002358 <CAN_DiagnoseAndFix+0xc4>)
 80022d0:	f005 fcdc 	bl	8007c8c <puts>
        printf("   1. Add 120 ohm resistor between CAN_H and CAN_L\r\n");
 80022d4:	4821      	ldr	r0, [pc, #132]	@ (800235c <CAN_DiagnoseAndFix+0xc8>)
 80022d6:	f005 fcd9 	bl	8007c8c <puts>
        printf("   2. Connect a second CAN node or CAN analyzer\r\n");
 80022da:	4821      	ldr	r0, [pc, #132]	@ (8002360 <CAN_DiagnoseAndFix+0xcc>)
 80022dc:	f005 fcd6 	bl	8007c8c <puts>
        printf("   3. Check TJA1050 transceiver connections\r\n");
 80022e0:	4820      	ldr	r0, [pc, #128]	@ (8002364 <CAN_DiagnoseAndFix+0xd0>)
 80022e2:	f005 fcd3 	bl	8007c8c <puts>
        
        printf("\r\n--- Starting CANOE Test Mode ---\r\n");
 80022e6:	4820      	ldr	r0, [pc, #128]	@ (8002368 <CAN_DiagnoseAndFix+0xd4>)
 80022e8:	f005 fcd0 	bl	8007c8c <puts>
        printf("Since hardware is OK, testing CAN transmission for CANOE...\r\n");
 80022ec:	481f      	ldr	r0, [pc, #124]	@ (800236c <CAN_DiagnoseAndFix+0xd8>)
 80022ee:	f005 fccd 	bl	8007c8c <puts>
        MCP2515_CANOETest();
 80022f2:	f7ff fe3f 	bl	8001f74 <MCP2515_CANOETest>
 80022f6:	e00e      	b.n	8002316 <CAN_DiagnoseAndFix+0x82>
    } else {
        printf("\r\nERROR: MCP2515 hardware may have problems\r\n");
 80022f8:	481d      	ldr	r0, [pc, #116]	@ (8002370 <CAN_DiagnoseAndFix+0xdc>)
 80022fa:	f005 fcc7 	bl	8007c8c <puts>
        printf("Suggested checks:\r\n");
 80022fe:	481d      	ldr	r0, [pc, #116]	@ (8002374 <CAN_DiagnoseAndFix+0xe0>)
 8002300:	f005 fcc4 	bl	8007c8c <puts>
        printf("   1. Verify SPI connections are correct\r\n");
 8002304:	481c      	ldr	r0, [pc, #112]	@ (8002378 <CAN_DiagnoseAndFix+0xe4>)
 8002306:	f005 fcc1 	bl	8007c8c <puts>
        printf("   2. Check MCP2515 power supply\r\n");
 800230a:	481c      	ldr	r0, [pc, #112]	@ (800237c <CAN_DiagnoseAndFix+0xe8>)
 800230c:	f005 fcbe 	bl	8007c8c <puts>
        printf("   3. Verify crystal oscillator is working\r\n");
 8002310:	481b      	ldr	r0, [pc, #108]	@ (8002380 <CAN_DiagnoseAndFix+0xec>)
 8002312:	f005 fcbb 	bl	8007c8c <puts>
    }
    
    // Step 4: Re-initialize
    printf("\r\nRe-initializing MCP2515...\r\n");
 8002316:	481b      	ldr	r0, [pc, #108]	@ (8002384 <CAN_DiagnoseAndFix+0xf0>)
 8002318:	f005 fcb8 	bl	8007c8c <puts>
    if (MCP2515_Init(MCP2515_BAUD_500K) == MCP2515_OK) {
 800231c:	2002      	movs	r0, #2
 800231e:	f7ff f863 	bl	80013e8 <MCP2515_Init>
 8002322:	4603      	mov	r3, r0
 8002324:	2b00      	cmp	r3, #0
 8002326:	d103      	bne.n	8002330 <CAN_DiagnoseAndFix+0x9c>
        printf("OK: MCP2515 re-initialization successful\r\n");
 8002328:	4817      	ldr	r0, [pc, #92]	@ (8002388 <CAN_DiagnoseAndFix+0xf4>)
 800232a:	f005 fcaf 	bl	8007c8c <puts>
 800232e:	e002      	b.n	8002336 <CAN_DiagnoseAndFix+0xa2>
    } else {
        printf("ERROR: MCP2515 re-initialization failed\r\n");
 8002330:	4816      	ldr	r0, [pc, #88]	@ (800238c <CAN_DiagnoseAndFix+0xf8>)
 8002332:	f005 fcab 	bl	8007c8c <puts>
    }
    
    printf("\r\nDiagnosis and repair process completed\r\n");
 8002336:	4816      	ldr	r0, [pc, #88]	@ (8002390 <CAN_DiagnoseAndFix+0xfc>)
 8002338:	f005 fca8 	bl	8007c8c <puts>
 800233c:	bf00      	nop
 800233e:	bd80      	pop	{r7, pc}
 8002340:	0800a444 	.word	0x0800a444
 8002344:	0800a47c 	.word	0x0800a47c
 8002348:	0800a4b4 	.word	0x0800a4b4
 800234c:	0800a4c8 	.word	0x0800a4c8
 8002350:	0800a4fc 	.word	0x0800a4fc
 8002354:	0800a530 	.word	0x0800a530
 8002358:	0800a55c 	.word	0x0800a55c
 800235c:	0800a574 	.word	0x0800a574
 8002360:	0800a5a8 	.word	0x0800a5a8
 8002364:	0800a5dc 	.word	0x0800a5dc
 8002368:	0800a60c 	.word	0x0800a60c
 800236c:	0800a630 	.word	0x0800a630
 8002370:	0800a670 	.word	0x0800a670
 8002374:	0800a6a0 	.word	0x0800a6a0
 8002378:	0800a6b4 	.word	0x0800a6b4
 800237c:	0800a6e0 	.word	0x0800a6e0
 8002380:	0800a704 	.word	0x0800a704
 8002384:	0800a730 	.word	0x0800a730
 8002388:	0800a750 	.word	0x0800a750
 800238c:	0800a77c 	.word	0x0800a77c
 8002390:	0800a7a8 	.word	0x0800a7a8

08002394 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002394:	b580      	push	{r7, lr}
 8002396:	b082      	sub	sp, #8
 8002398:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800239a:	2300      	movs	r3, #0
 800239c:	607b      	str	r3, [r7, #4]
 800239e:	4b12      	ldr	r3, [pc, #72]	@ (80023e8 <HAL_MspInit+0x54>)
 80023a0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023a2:	4a11      	ldr	r2, [pc, #68]	@ (80023e8 <HAL_MspInit+0x54>)
 80023a4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80023a8:	6453      	str	r3, [r2, #68]	@ 0x44
 80023aa:	4b0f      	ldr	r3, [pc, #60]	@ (80023e8 <HAL_MspInit+0x54>)
 80023ac:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80023ae:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80023b2:	607b      	str	r3, [r7, #4]
 80023b4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80023b6:	2300      	movs	r3, #0
 80023b8:	603b      	str	r3, [r7, #0]
 80023ba:	4b0b      	ldr	r3, [pc, #44]	@ (80023e8 <HAL_MspInit+0x54>)
 80023bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023be:	4a0a      	ldr	r2, [pc, #40]	@ (80023e8 <HAL_MspInit+0x54>)
 80023c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80023c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80023c6:	4b08      	ldr	r3, [pc, #32]	@ (80023e8 <HAL_MspInit+0x54>)
 80023c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80023ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80023ce:	603b      	str	r3, [r7, #0]
 80023d0:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80023d2:	2200      	movs	r2, #0
 80023d4:	210f      	movs	r1, #15
 80023d6:	f06f 0001 	mvn.w	r0, #1
 80023da:	f000 fb1d 	bl	8002a18 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80023de:	bf00      	nop
 80023e0:	3708      	adds	r7, #8
 80023e2:	46bd      	mov	sp, r7
 80023e4:	bd80      	pop	{r7, pc}
 80023e6:	bf00      	nop
 80023e8:	40023800 	.word	0x40023800

080023ec <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b08a      	sub	sp, #40	@ 0x28
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80023f4:	f107 0314 	add.w	r3, r7, #20
 80023f8:	2200      	movs	r2, #0
 80023fa:	601a      	str	r2, [r3, #0]
 80023fc:	605a      	str	r2, [r3, #4]
 80023fe:	609a      	str	r2, [r3, #8]
 8002400:	60da      	str	r2, [r3, #12]
 8002402:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	4a19      	ldr	r2, [pc, #100]	@ (8002470 <HAL_SPI_MspInit+0x84>)
 800240a:	4293      	cmp	r3, r2
 800240c:	d12b      	bne.n	8002466 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800240e:	2300      	movs	r3, #0
 8002410:	613b      	str	r3, [r7, #16]
 8002412:	4b18      	ldr	r3, [pc, #96]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 8002414:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002416:	4a17      	ldr	r2, [pc, #92]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 8002418:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800241c:	6453      	str	r3, [r2, #68]	@ 0x44
 800241e:	4b15      	ldr	r3, [pc, #84]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 8002420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002422:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002426:	613b      	str	r3, [r7, #16]
 8002428:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800242a:	2300      	movs	r3, #0
 800242c:	60fb      	str	r3, [r7, #12]
 800242e:	4b11      	ldr	r3, [pc, #68]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 8002430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002432:	4a10      	ldr	r2, [pc, #64]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 8002434:	f043 0302 	orr.w	r3, r3, #2
 8002438:	6313      	str	r3, [r2, #48]	@ 0x30
 800243a:	4b0e      	ldr	r3, [pc, #56]	@ (8002474 <HAL_SPI_MspInit+0x88>)
 800243c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800243e:	f003 0302 	and.w	r3, r3, #2
 8002442:	60fb      	str	r3, [r7, #12]
 8002444:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8002446:	2338      	movs	r3, #56	@ 0x38
 8002448:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800244a:	2302      	movs	r3, #2
 800244c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800244e:	2300      	movs	r3, #0
 8002450:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002452:	2303      	movs	r3, #3
 8002454:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002456:	2305      	movs	r3, #5
 8002458:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800245a:	f107 0314 	add.w	r3, r7, #20
 800245e:	4619      	mov	r1, r3
 8002460:	4805      	ldr	r0, [pc, #20]	@ (8002478 <HAL_SPI_MspInit+0x8c>)
 8002462:	f000 fb03 	bl	8002a6c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002466:	bf00      	nop
 8002468:	3728      	adds	r7, #40	@ 0x28
 800246a:	46bd      	mov	sp, r7
 800246c:	bd80      	pop	{r7, pc}
 800246e:	bf00      	nop
 8002470:	40013000 	.word	0x40013000
 8002474:	40023800 	.word	0x40023800
 8002478:	40020400 	.word	0x40020400

0800247c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800247c:	b580      	push	{r7, lr}
 800247e:	b08a      	sub	sp, #40	@ 0x28
 8002480:	af00      	add	r7, sp, #0
 8002482:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002484:	f107 0314 	add.w	r3, r7, #20
 8002488:	2200      	movs	r2, #0
 800248a:	601a      	str	r2, [r3, #0]
 800248c:	605a      	str	r2, [r3, #4]
 800248e:	609a      	str	r2, [r3, #8]
 8002490:	60da      	str	r2, [r3, #12]
 8002492:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002494:	687b      	ldr	r3, [r7, #4]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	4a19      	ldr	r2, [pc, #100]	@ (8002500 <HAL_UART_MspInit+0x84>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d12b      	bne.n	80024f6 <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800249e:	2300      	movs	r3, #0
 80024a0:	613b      	str	r3, [r7, #16]
 80024a2:	4b18      	ldr	r3, [pc, #96]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024a4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024a6:	4a17      	ldr	r2, [pc, #92]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024a8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80024ac:	6413      	str	r3, [r2, #64]	@ 0x40
 80024ae:	4b15      	ldr	r3, [pc, #84]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80024b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80024b6:	613b      	str	r3, [r7, #16]
 80024b8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024ba:	2300      	movs	r3, #0
 80024bc:	60fb      	str	r3, [r7, #12]
 80024be:	4b11      	ldr	r3, [pc, #68]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024c0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024c2:	4a10      	ldr	r2, [pc, #64]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024c4:	f043 0301 	orr.w	r3, r3, #1
 80024c8:	6313      	str	r3, [r2, #48]	@ 0x30
 80024ca:	4b0e      	ldr	r3, [pc, #56]	@ (8002504 <HAL_UART_MspInit+0x88>)
 80024cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80024ce:	f003 0301 	and.w	r3, r3, #1
 80024d2:	60fb      	str	r3, [r7, #12]
 80024d4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80024d6:	230c      	movs	r3, #12
 80024d8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024da:	2302      	movs	r3, #2
 80024dc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80024de:	2300      	movs	r3, #0
 80024e0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80024e2:	2303      	movs	r3, #3
 80024e4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80024e6:	2307      	movs	r3, #7
 80024e8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024ea:	f107 0314 	add.w	r3, r7, #20
 80024ee:	4619      	mov	r1, r3
 80024f0:	4805      	ldr	r0, [pc, #20]	@ (8002508 <HAL_UART_MspInit+0x8c>)
 80024f2:	f000 fabb 	bl	8002a6c <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80024f6:	bf00      	nop
 80024f8:	3728      	adds	r7, #40	@ 0x28
 80024fa:	46bd      	mov	sp, r7
 80024fc:	bd80      	pop	{r7, pc}
 80024fe:	bf00      	nop
 8002500:	40004400 	.word	0x40004400
 8002504:	40023800 	.word	0x40023800
 8002508:	40020000 	.word	0x40020000

0800250c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800250c:	b580      	push	{r7, lr}
 800250e:	b08c      	sub	sp, #48	@ 0x30
 8002510:	af00      	add	r7, sp, #0
 8002512:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8002514:	2300      	movs	r3, #0
 8002516:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8002518:	2300      	movs	r3, #0
 800251a:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 800251c:	2300      	movs	r3, #0
 800251e:	60bb      	str	r3, [r7, #8]
 8002520:	4b2f      	ldr	r3, [pc, #188]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002522:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002524:	4a2e      	ldr	r2, [pc, #184]	@ (80025e0 <HAL_InitTick+0xd4>)
 8002526:	f043 0301 	orr.w	r3, r3, #1
 800252a:	6453      	str	r3, [r2, #68]	@ 0x44
 800252c:	4b2c      	ldr	r3, [pc, #176]	@ (80025e0 <HAL_InitTick+0xd4>)
 800252e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002530:	f003 0301 	and.w	r3, r3, #1
 8002534:	60bb      	str	r3, [r7, #8]
 8002536:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002538:	f107 020c 	add.w	r2, r7, #12
 800253c:	f107 0310 	add.w	r3, r7, #16
 8002540:	4611      	mov	r1, r2
 8002542:	4618      	mov	r0, r3
 8002544:	f001 f904 	bl	8003750 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002548:	f001 f8ee 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 800254c:	4603      	mov	r3, r0
 800254e:	005b      	lsls	r3, r3, #1
 8002550:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8002552:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002554:	4a23      	ldr	r2, [pc, #140]	@ (80025e4 <HAL_InitTick+0xd8>)
 8002556:	fba2 2303 	umull	r2, r3, r2, r3
 800255a:	0c9b      	lsrs	r3, r3, #18
 800255c:	3b01      	subs	r3, #1
 800255e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002560:	4b21      	ldr	r3, [pc, #132]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002562:	4a22      	ldr	r2, [pc, #136]	@ (80025ec <HAL_InitTick+0xe0>)
 8002564:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8002566:	4b20      	ldr	r3, [pc, #128]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002568:	f240 32e7 	movw	r2, #999	@ 0x3e7
 800256c:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 800256e:	4a1e      	ldr	r2, [pc, #120]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002570:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002572:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8002574:	4b1c      	ldr	r3, [pc, #112]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002576:	2200      	movs	r2, #0
 8002578:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 800257a:	4b1b      	ldr	r3, [pc, #108]	@ (80025e8 <HAL_InitTick+0xdc>)
 800257c:	2200      	movs	r2, #0
 800257e:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002580:	4b19      	ldr	r3, [pc, #100]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002582:	2200      	movs	r2, #0
 8002584:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8002586:	4818      	ldr	r0, [pc, #96]	@ (80025e8 <HAL_InitTick+0xdc>)
 8002588:	f001 fc2e 	bl	8003de8 <HAL_TIM_Base_Init>
 800258c:	4603      	mov	r3, r0
 800258e:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8002592:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002596:	2b00      	cmp	r3, #0
 8002598:	d11b      	bne.n	80025d2 <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 800259a:	4813      	ldr	r0, [pc, #76]	@ (80025e8 <HAL_InitTick+0xdc>)
 800259c:	f001 fc7e 	bl	8003e9c <HAL_TIM_Base_Start_IT>
 80025a0:	4603      	mov	r3, r0
 80025a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 80025a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	d111      	bne.n	80025d2 <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 80025ae:	2019      	movs	r0, #25
 80025b0:	f000 fa4e 	bl	8002a50 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2b0f      	cmp	r3, #15
 80025b8:	d808      	bhi.n	80025cc <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 80025ba:	2200      	movs	r2, #0
 80025bc:	6879      	ldr	r1, [r7, #4]
 80025be:	2019      	movs	r0, #25
 80025c0:	f000 fa2a 	bl	8002a18 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80025c4:	4a0a      	ldr	r2, [pc, #40]	@ (80025f0 <HAL_InitTick+0xe4>)
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	6013      	str	r3, [r2, #0]
 80025ca:	e002      	b.n	80025d2 <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 80025cc:	2301      	movs	r3, #1
 80025ce:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 80025d2:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 80025d6:	4618      	mov	r0, r3
 80025d8:	3730      	adds	r7, #48	@ 0x30
 80025da:	46bd      	mov	sp, r7
 80025dc:	bd80      	pop	{r7, pc}
 80025de:	bf00      	nop
 80025e0:	40023800 	.word	0x40023800
 80025e4:	431bde83 	.word	0x431bde83
 80025e8:	20000150 	.word	0x20000150
 80025ec:	40010000 	.word	0x40010000
 80025f0:	20000004 	.word	0x20000004

080025f4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80025f4:	b480      	push	{r7}
 80025f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80025f8:	bf00      	nop
 80025fa:	e7fd      	b.n	80025f8 <NMI_Handler+0x4>

080025fc <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002600:	bf00      	nop
 8002602:	e7fd      	b.n	8002600 <HardFault_Handler+0x4>

08002604 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002604:	b480      	push	{r7}
 8002606:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002608:	bf00      	nop
 800260a:	e7fd      	b.n	8002608 <MemManage_Handler+0x4>

0800260c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800260c:	b480      	push	{r7}
 800260e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002610:	bf00      	nop
 8002612:	e7fd      	b.n	8002610 <BusFault_Handler+0x4>

08002614 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002614:	b480      	push	{r7}
 8002616:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002618:	bf00      	nop
 800261a:	e7fd      	b.n	8002618 <UsageFault_Handler+0x4>

0800261c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800261c:	b480      	push	{r7}
 800261e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002620:	bf00      	nop
 8002622:	46bd      	mov	sp, r7
 8002624:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002628:	4770      	bx	lr
	...

0800262c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800262c:	b580      	push	{r7, lr}
 800262e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002630:	4802      	ldr	r0, [pc, #8]	@ (800263c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002632:	f001 fca3 	bl	8003f7c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000150 	.word	0x20000150

08002640 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002640:	b580      	push	{r7, lr}
 8002642:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 8002644:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002648:	f000 fbc6 	bl	8002dd8 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  // MCP2515中断处理
  // 注意：这里只是触发中断标志，实际处理在CAN任务中进行
  CAN_App_IRQ_Callback();
 800264c:	f7fe faf8 	bl	8000c40 <CAN_App_IRQ_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002650:	bf00      	nop
 8002652:	bd80      	pop	{r7, pc}

08002654 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002654:	b580      	push	{r7, lr}
 8002656:	b086      	sub	sp, #24
 8002658:	af00      	add	r7, sp, #0
 800265a:	60f8      	str	r0, [r7, #12]
 800265c:	60b9      	str	r1, [r7, #8]
 800265e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002660:	2300      	movs	r3, #0
 8002662:	617b      	str	r3, [r7, #20]
 8002664:	e00a      	b.n	800267c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002666:	f3af 8000 	nop.w
 800266a:	4601      	mov	r1, r0
 800266c:	68bb      	ldr	r3, [r7, #8]
 800266e:	1c5a      	adds	r2, r3, #1
 8002670:	60ba      	str	r2, [r7, #8]
 8002672:	b2ca      	uxtb	r2, r1
 8002674:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	3301      	adds	r3, #1
 800267a:	617b      	str	r3, [r7, #20]
 800267c:	697a      	ldr	r2, [r7, #20]
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	429a      	cmp	r2, r3
 8002682:	dbf0      	blt.n	8002666 <_read+0x12>
  }

  return len;
 8002684:	687b      	ldr	r3, [r7, #4]
}
 8002686:	4618      	mov	r0, r3
 8002688:	3718      	adds	r7, #24
 800268a:	46bd      	mov	sp, r7
 800268c:	bd80      	pop	{r7, pc}

0800268e <_close>:
  }
  return len;
}

int _close(int file)
{
 800268e:	b480      	push	{r7}
 8002690:	b083      	sub	sp, #12
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002696:	f04f 33ff 	mov.w	r3, #4294967295
}
 800269a:	4618      	mov	r0, r3
 800269c:	370c      	adds	r7, #12
 800269e:	46bd      	mov	sp, r7
 80026a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026a4:	4770      	bx	lr

080026a6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80026a6:	b480      	push	{r7}
 80026a8:	b083      	sub	sp, #12
 80026aa:	af00      	add	r7, sp, #0
 80026ac:	6078      	str	r0, [r7, #4]
 80026ae:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 80026b6:	605a      	str	r2, [r3, #4]
  return 0;
 80026b8:	2300      	movs	r3, #0
}
 80026ba:	4618      	mov	r0, r3
 80026bc:	370c      	adds	r7, #12
 80026be:	46bd      	mov	sp, r7
 80026c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c4:	4770      	bx	lr

080026c6 <_isatty>:

int _isatty(int file)
{
 80026c6:	b480      	push	{r7}
 80026c8:	b083      	sub	sp, #12
 80026ca:	af00      	add	r7, sp, #0
 80026cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80026ce:	2301      	movs	r3, #1
}
 80026d0:	4618      	mov	r0, r3
 80026d2:	370c      	adds	r7, #12
 80026d4:	46bd      	mov	sp, r7
 80026d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026da:	4770      	bx	lr

080026dc <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80026dc:	b480      	push	{r7}
 80026de:	b085      	sub	sp, #20
 80026e0:	af00      	add	r7, sp, #0
 80026e2:	60f8      	str	r0, [r7, #12]
 80026e4:	60b9      	str	r1, [r7, #8]
 80026e6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80026e8:	2300      	movs	r3, #0
}
 80026ea:	4618      	mov	r0, r3
 80026ec:	3714      	adds	r7, #20
 80026ee:	46bd      	mov	sp, r7
 80026f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026f4:	4770      	bx	lr
	...

080026f8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80026f8:	b580      	push	{r7, lr}
 80026fa:	b086      	sub	sp, #24
 80026fc:	af00      	add	r7, sp, #0
 80026fe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002700:	4a14      	ldr	r2, [pc, #80]	@ (8002754 <_sbrk+0x5c>)
 8002702:	4b15      	ldr	r3, [pc, #84]	@ (8002758 <_sbrk+0x60>)
 8002704:	1ad3      	subs	r3, r2, r3
 8002706:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002708:	697b      	ldr	r3, [r7, #20]
 800270a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800270c:	4b13      	ldr	r3, [pc, #76]	@ (800275c <_sbrk+0x64>)
 800270e:	681b      	ldr	r3, [r3, #0]
 8002710:	2b00      	cmp	r3, #0
 8002712:	d102      	bne.n	800271a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <_sbrk+0x64>)
 8002716:	4a12      	ldr	r2, [pc, #72]	@ (8002760 <_sbrk+0x68>)
 8002718:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800271a:	4b10      	ldr	r3, [pc, #64]	@ (800275c <_sbrk+0x64>)
 800271c:	681a      	ldr	r2, [r3, #0]
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	4413      	add	r3, r2
 8002722:	693a      	ldr	r2, [r7, #16]
 8002724:	429a      	cmp	r2, r3
 8002726:	d207      	bcs.n	8002738 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002728:	f005 fc4c 	bl	8007fc4 <__errno>
 800272c:	4603      	mov	r3, r0
 800272e:	220c      	movs	r2, #12
 8002730:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002732:	f04f 33ff 	mov.w	r3, #4294967295
 8002736:	e009      	b.n	800274c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002738:	4b08      	ldr	r3, [pc, #32]	@ (800275c <_sbrk+0x64>)
 800273a:	681b      	ldr	r3, [r3, #0]
 800273c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800273e:	4b07      	ldr	r3, [pc, #28]	@ (800275c <_sbrk+0x64>)
 8002740:	681a      	ldr	r2, [r3, #0]
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	4413      	add	r3, r2
 8002746:	4a05      	ldr	r2, [pc, #20]	@ (800275c <_sbrk+0x64>)
 8002748:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800274a:	68fb      	ldr	r3, [r7, #12]
}
 800274c:	4618      	mov	r0, r3
 800274e:	3718      	adds	r7, #24
 8002750:	46bd      	mov	sp, r7
 8002752:	bd80      	pop	{r7, pc}
 8002754:	20020000 	.word	0x20020000
 8002758:	00000400 	.word	0x00000400
 800275c:	20000198 	.word	0x20000198
 8002760:	20004cd8 	.word	0x20004cd8

08002764 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002764:	b480      	push	{r7}
 8002766:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002768:	4b06      	ldr	r3, [pc, #24]	@ (8002784 <SystemInit+0x20>)
 800276a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 800276e:	4a05      	ldr	r2, [pc, #20]	@ (8002784 <SystemInit+0x20>)
 8002770:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002774:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002778:	bf00      	nop
 800277a:	46bd      	mov	sp, r7
 800277c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002780:	4770      	bx	lr
 8002782:	bf00      	nop
 8002784:	e000ed00 	.word	0xe000ed00

08002788 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002788:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027c0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 800278c:	f7ff ffea 	bl	8002764 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002790:	480c      	ldr	r0, [pc, #48]	@ (80027c4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002792:	490d      	ldr	r1, [pc, #52]	@ (80027c8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002794:	4a0d      	ldr	r2, [pc, #52]	@ (80027cc <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002798:	e002      	b.n	80027a0 <LoopCopyDataInit>

0800279a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800279a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800279c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800279e:	3304      	adds	r3, #4

080027a0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80027a0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80027a2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80027a4:	d3f9      	bcc.n	800279a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80027a6:	4a0a      	ldr	r2, [pc, #40]	@ (80027d0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80027a8:	4c0a      	ldr	r4, [pc, #40]	@ (80027d4 <LoopFillZerobss+0x22>)
  movs r3, #0
 80027aa:	2300      	movs	r3, #0
  b LoopFillZerobss
 80027ac:	e001      	b.n	80027b2 <LoopFillZerobss>

080027ae <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80027ae:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80027b0:	3204      	adds	r2, #4

080027b2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80027b2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027b4:	d3fb      	bcc.n	80027ae <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027b6:	f005 fc0b 	bl	8007fd0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027ba:	f7fe fa49 	bl	8000c50 <main>
  bx  lr    
 80027be:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80027c0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027c4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027c8:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 80027cc:	0800a8d8 	.word	0x0800a8d8
  ldr r2, =_sbss
 80027d0:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80027d4:	20004cd4 	.word	0x20004cd4

080027d8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027d8:	e7fe      	b.n	80027d8 <ADC_IRQHandler>
	...

080027dc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027e0:	4b0e      	ldr	r3, [pc, #56]	@ (800281c <HAL_Init+0x40>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4a0d      	ldr	r2, [pc, #52]	@ (800281c <HAL_Init+0x40>)
 80027e6:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027ea:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027ec:	4b0b      	ldr	r3, [pc, #44]	@ (800281c <HAL_Init+0x40>)
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	4a0a      	ldr	r2, [pc, #40]	@ (800281c <HAL_Init+0x40>)
 80027f2:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027f6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027f8:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_Init+0x40>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4a07      	ldr	r2, [pc, #28]	@ (800281c <HAL_Init+0x40>)
 80027fe:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002802:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002804:	2003      	movs	r0, #3
 8002806:	f000 f8fc 	bl	8002a02 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800280a:	200f      	movs	r0, #15
 800280c:	f7ff fe7e 	bl	800250c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002810:	f7ff fdc0 	bl	8002394 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002814:	2300      	movs	r3, #0
}
 8002816:	4618      	mov	r0, r3
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40023c00 	.word	0x40023c00

08002820 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002820:	b480      	push	{r7}
 8002822:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002824:	4b06      	ldr	r3, [pc, #24]	@ (8002840 <HAL_IncTick+0x20>)
 8002826:	781b      	ldrb	r3, [r3, #0]
 8002828:	461a      	mov	r2, r3
 800282a:	4b06      	ldr	r3, [pc, #24]	@ (8002844 <HAL_IncTick+0x24>)
 800282c:	681b      	ldr	r3, [r3, #0]
 800282e:	4413      	add	r3, r2
 8002830:	4a04      	ldr	r2, [pc, #16]	@ (8002844 <HAL_IncTick+0x24>)
 8002832:	6013      	str	r3, [r2, #0]
}
 8002834:	bf00      	nop
 8002836:	46bd      	mov	sp, r7
 8002838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800283c:	4770      	bx	lr
 800283e:	bf00      	nop
 8002840:	20000008 	.word	0x20000008
 8002844:	2000019c 	.word	0x2000019c

08002848 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002848:	b480      	push	{r7}
 800284a:	af00      	add	r7, sp, #0
  return uwTick;
 800284c:	4b03      	ldr	r3, [pc, #12]	@ (800285c <HAL_GetTick+0x14>)
 800284e:	681b      	ldr	r3, [r3, #0]
}
 8002850:	4618      	mov	r0, r3
 8002852:	46bd      	mov	sp, r7
 8002854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	2000019c 	.word	0x2000019c

08002860 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002860:	b580      	push	{r7, lr}
 8002862:	b084      	sub	sp, #16
 8002864:	af00      	add	r7, sp, #0
 8002866:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002868:	f7ff ffee 	bl	8002848 <HAL_GetTick>
 800286c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002872:	68fb      	ldr	r3, [r7, #12]
 8002874:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002878:	d005      	beq.n	8002886 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800287a:	4b0a      	ldr	r3, [pc, #40]	@ (80028a4 <HAL_Delay+0x44>)
 800287c:	781b      	ldrb	r3, [r3, #0]
 800287e:	461a      	mov	r2, r3
 8002880:	68fb      	ldr	r3, [r7, #12]
 8002882:	4413      	add	r3, r2
 8002884:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8002886:	bf00      	nop
 8002888:	f7ff ffde 	bl	8002848 <HAL_GetTick>
 800288c:	4602      	mov	r2, r0
 800288e:	68bb      	ldr	r3, [r7, #8]
 8002890:	1ad3      	subs	r3, r2, r3
 8002892:	68fa      	ldr	r2, [r7, #12]
 8002894:	429a      	cmp	r2, r3
 8002896:	d8f7      	bhi.n	8002888 <HAL_Delay+0x28>
  {
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	3710      	adds	r7, #16
 800289e:	46bd      	mov	sp, r7
 80028a0:	bd80      	pop	{r7, pc}
 80028a2:	bf00      	nop
 80028a4:	20000008 	.word	0x20000008

080028a8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b085      	sub	sp, #20
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	f003 0307 	and.w	r3, r3, #7
 80028b6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80028b8:	4b0c      	ldr	r3, [pc, #48]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028ba:	68db      	ldr	r3, [r3, #12]
 80028bc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80028be:	68ba      	ldr	r2, [r7, #8]
 80028c0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80028c4:	4013      	ands	r3, r2
 80028c6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80028c8:	68fb      	ldr	r3, [r7, #12]
 80028ca:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80028cc:	68bb      	ldr	r3, [r7, #8]
 80028ce:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80028d0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80028d4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80028d8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80028da:	4a04      	ldr	r2, [pc, #16]	@ (80028ec <__NVIC_SetPriorityGrouping+0x44>)
 80028dc:	68bb      	ldr	r3, [r7, #8]
 80028de:	60d3      	str	r3, [r2, #12]
}
 80028e0:	bf00      	nop
 80028e2:	3714      	adds	r7, #20
 80028e4:	46bd      	mov	sp, r7
 80028e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ea:	4770      	bx	lr
 80028ec:	e000ed00 	.word	0xe000ed00

080028f0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80028f4:	4b04      	ldr	r3, [pc, #16]	@ (8002908 <__NVIC_GetPriorityGrouping+0x18>)
 80028f6:	68db      	ldr	r3, [r3, #12]
 80028f8:	0a1b      	lsrs	r3, r3, #8
 80028fa:	f003 0307 	and.w	r3, r3, #7
}
 80028fe:	4618      	mov	r0, r3
 8002900:	46bd      	mov	sp, r7
 8002902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002906:	4770      	bx	lr
 8002908:	e000ed00 	.word	0xe000ed00

0800290c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	4603      	mov	r3, r0
 8002914:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002916:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800291a:	2b00      	cmp	r3, #0
 800291c:	db0b      	blt.n	8002936 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800291e:	79fb      	ldrb	r3, [r7, #7]
 8002920:	f003 021f 	and.w	r2, r3, #31
 8002924:	4907      	ldr	r1, [pc, #28]	@ (8002944 <__NVIC_EnableIRQ+0x38>)
 8002926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800292a:	095b      	lsrs	r3, r3, #5
 800292c:	2001      	movs	r0, #1
 800292e:	fa00 f202 	lsl.w	r2, r0, r2
 8002932:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002936:	bf00      	nop
 8002938:	370c      	adds	r7, #12
 800293a:	46bd      	mov	sp, r7
 800293c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002940:	4770      	bx	lr
 8002942:	bf00      	nop
 8002944:	e000e100 	.word	0xe000e100

08002948 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002948:	b480      	push	{r7}
 800294a:	b083      	sub	sp, #12
 800294c:	af00      	add	r7, sp, #0
 800294e:	4603      	mov	r3, r0
 8002950:	6039      	str	r1, [r7, #0]
 8002952:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002954:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002958:	2b00      	cmp	r3, #0
 800295a:	db0a      	blt.n	8002972 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800295c:	683b      	ldr	r3, [r7, #0]
 800295e:	b2da      	uxtb	r2, r3
 8002960:	490c      	ldr	r1, [pc, #48]	@ (8002994 <__NVIC_SetPriority+0x4c>)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	0112      	lsls	r2, r2, #4
 8002968:	b2d2      	uxtb	r2, r2
 800296a:	440b      	add	r3, r1
 800296c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002970:	e00a      	b.n	8002988 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	b2da      	uxtb	r2, r3
 8002976:	4908      	ldr	r1, [pc, #32]	@ (8002998 <__NVIC_SetPriority+0x50>)
 8002978:	79fb      	ldrb	r3, [r7, #7]
 800297a:	f003 030f 	and.w	r3, r3, #15
 800297e:	3b04      	subs	r3, #4
 8002980:	0112      	lsls	r2, r2, #4
 8002982:	b2d2      	uxtb	r2, r2
 8002984:	440b      	add	r3, r1
 8002986:	761a      	strb	r2, [r3, #24]
}
 8002988:	bf00      	nop
 800298a:	370c      	adds	r7, #12
 800298c:	46bd      	mov	sp, r7
 800298e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002992:	4770      	bx	lr
 8002994:	e000e100 	.word	0xe000e100
 8002998:	e000ed00 	.word	0xe000ed00

0800299c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800299c:	b480      	push	{r7}
 800299e:	b089      	sub	sp, #36	@ 0x24
 80029a0:	af00      	add	r7, sp, #0
 80029a2:	60f8      	str	r0, [r7, #12]
 80029a4:	60b9      	str	r1, [r7, #8]
 80029a6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	f003 0307 	and.w	r3, r3, #7
 80029ae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029b0:	69fb      	ldr	r3, [r7, #28]
 80029b2:	f1c3 0307 	rsb	r3, r3, #7
 80029b6:	2b04      	cmp	r3, #4
 80029b8:	bf28      	it	cs
 80029ba:	2304      	movcs	r3, #4
 80029bc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80029be:	69fb      	ldr	r3, [r7, #28]
 80029c0:	3304      	adds	r3, #4
 80029c2:	2b06      	cmp	r3, #6
 80029c4:	d902      	bls.n	80029cc <NVIC_EncodePriority+0x30>
 80029c6:	69fb      	ldr	r3, [r7, #28]
 80029c8:	3b03      	subs	r3, #3
 80029ca:	e000      	b.n	80029ce <NVIC_EncodePriority+0x32>
 80029cc:	2300      	movs	r3, #0
 80029ce:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029d0:	f04f 32ff 	mov.w	r2, #4294967295
 80029d4:	69bb      	ldr	r3, [r7, #24]
 80029d6:	fa02 f303 	lsl.w	r3, r2, r3
 80029da:	43da      	mvns	r2, r3
 80029dc:	68bb      	ldr	r3, [r7, #8]
 80029de:	401a      	ands	r2, r3
 80029e0:	697b      	ldr	r3, [r7, #20]
 80029e2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80029e4:	f04f 31ff 	mov.w	r1, #4294967295
 80029e8:	697b      	ldr	r3, [r7, #20]
 80029ea:	fa01 f303 	lsl.w	r3, r1, r3
 80029ee:	43d9      	mvns	r1, r3
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80029f4:	4313      	orrs	r3, r2
         );
}
 80029f6:	4618      	mov	r0, r3
 80029f8:	3724      	adds	r7, #36	@ 0x24
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a02:	b580      	push	{r7, lr}
 8002a04:	b082      	sub	sp, #8
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a0a:	6878      	ldr	r0, [r7, #4]
 8002a0c:	f7ff ff4c 	bl	80028a8 <__NVIC_SetPriorityGrouping>
}
 8002a10:	bf00      	nop
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}

08002a18 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002a18:	b580      	push	{r7, lr}
 8002a1a:	b086      	sub	sp, #24
 8002a1c:	af00      	add	r7, sp, #0
 8002a1e:	4603      	mov	r3, r0
 8002a20:	60b9      	str	r1, [r7, #8]
 8002a22:	607a      	str	r2, [r7, #4]
 8002a24:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002a26:	2300      	movs	r3, #0
 8002a28:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002a2a:	f7ff ff61 	bl	80028f0 <__NVIC_GetPriorityGrouping>
 8002a2e:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002a30:	687a      	ldr	r2, [r7, #4]
 8002a32:	68b9      	ldr	r1, [r7, #8]
 8002a34:	6978      	ldr	r0, [r7, #20]
 8002a36:	f7ff ffb1 	bl	800299c <NVIC_EncodePriority>
 8002a3a:	4602      	mov	r2, r0
 8002a3c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002a40:	4611      	mov	r1, r2
 8002a42:	4618      	mov	r0, r3
 8002a44:	f7ff ff80 	bl	8002948 <__NVIC_SetPriority>
}
 8002a48:	bf00      	nop
 8002a4a:	3718      	adds	r7, #24
 8002a4c:	46bd      	mov	sp, r7
 8002a4e:	bd80      	pop	{r7, pc}

08002a50 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	4603      	mov	r3, r0
 8002a58:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002a5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a5e:	4618      	mov	r0, r3
 8002a60:	f7ff ff54 	bl	800290c <__NVIC_EnableIRQ>
}
 8002a64:	bf00      	nop
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b089      	sub	sp, #36	@ 0x24
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002a76:	2300      	movs	r3, #0
 8002a78:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002a7a:	2300      	movs	r3, #0
 8002a7c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002a7e:	2300      	movs	r3, #0
 8002a80:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a82:	2300      	movs	r3, #0
 8002a84:	61fb      	str	r3, [r7, #28]
 8002a86:	e16b      	b.n	8002d60 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002a88:	2201      	movs	r2, #1
 8002a8a:	69fb      	ldr	r3, [r7, #28]
 8002a8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002a90:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002a92:	683b      	ldr	r3, [r7, #0]
 8002a94:	681b      	ldr	r3, [r3, #0]
 8002a96:	697a      	ldr	r2, [r7, #20]
 8002a98:	4013      	ands	r3, r2
 8002a9a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002a9c:	693a      	ldr	r2, [r7, #16]
 8002a9e:	697b      	ldr	r3, [r7, #20]
 8002aa0:	429a      	cmp	r2, r3
 8002aa2:	f040 815a 	bne.w	8002d5a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aa6:	683b      	ldr	r3, [r7, #0]
 8002aa8:	685b      	ldr	r3, [r3, #4]
 8002aaa:	f003 0303 	and.w	r3, r3, #3
 8002aae:	2b01      	cmp	r3, #1
 8002ab0:	d005      	beq.n	8002abe <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002ab2:	683b      	ldr	r3, [r7, #0]
 8002ab4:	685b      	ldr	r3, [r3, #4]
 8002ab6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002aba:	2b02      	cmp	r3, #2
 8002abc:	d130      	bne.n	8002b20 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002abe:	687b      	ldr	r3, [r7, #4]
 8002ac0:	689b      	ldr	r3, [r3, #8]
 8002ac2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002ac4:	69fb      	ldr	r3, [r7, #28]
 8002ac6:	005b      	lsls	r3, r3, #1
 8002ac8:	2203      	movs	r2, #3
 8002aca:	fa02 f303 	lsl.w	r3, r2, r3
 8002ace:	43db      	mvns	r3, r3
 8002ad0:	69ba      	ldr	r2, [r7, #24]
 8002ad2:	4013      	ands	r3, r2
 8002ad4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ad6:	683b      	ldr	r3, [r7, #0]
 8002ad8:	68da      	ldr	r2, [r3, #12]
 8002ada:	69fb      	ldr	r3, [r7, #28]
 8002adc:	005b      	lsls	r3, r3, #1
 8002ade:	fa02 f303 	lsl.w	r3, r2, r3
 8002ae2:	69ba      	ldr	r2, [r7, #24]
 8002ae4:	4313      	orrs	r3, r2
 8002ae6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	69ba      	ldr	r2, [r7, #24]
 8002aec:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002aee:	687b      	ldr	r3, [r7, #4]
 8002af0:	685b      	ldr	r3, [r3, #4]
 8002af2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002af4:	2201      	movs	r2, #1
 8002af6:	69fb      	ldr	r3, [r7, #28]
 8002af8:	fa02 f303 	lsl.w	r3, r2, r3
 8002afc:	43db      	mvns	r3, r3
 8002afe:	69ba      	ldr	r2, [r7, #24]
 8002b00:	4013      	ands	r3, r2
 8002b02:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002b04:	683b      	ldr	r3, [r7, #0]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	091b      	lsrs	r3, r3, #4
 8002b0a:	f003 0201 	and.w	r2, r3, #1
 8002b0e:	69fb      	ldr	r3, [r7, #28]
 8002b10:	fa02 f303 	lsl.w	r3, r2, r3
 8002b14:	69ba      	ldr	r2, [r7, #24]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	69ba      	ldr	r2, [r7, #24]
 8002b1e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002b20:	683b      	ldr	r3, [r7, #0]
 8002b22:	685b      	ldr	r3, [r3, #4]
 8002b24:	f003 0303 	and.w	r3, r3, #3
 8002b28:	2b03      	cmp	r3, #3
 8002b2a:	d017      	beq.n	8002b5c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	68db      	ldr	r3, [r3, #12]
 8002b30:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	005b      	lsls	r3, r3, #1
 8002b36:	2203      	movs	r2, #3
 8002b38:	fa02 f303 	lsl.w	r3, r2, r3
 8002b3c:	43db      	mvns	r3, r3
 8002b3e:	69ba      	ldr	r2, [r7, #24]
 8002b40:	4013      	ands	r3, r2
 8002b42:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002b44:	683b      	ldr	r3, [r7, #0]
 8002b46:	689a      	ldr	r2, [r3, #8]
 8002b48:	69fb      	ldr	r3, [r7, #28]
 8002b4a:	005b      	lsls	r3, r3, #1
 8002b4c:	fa02 f303 	lsl.w	r3, r2, r3
 8002b50:	69ba      	ldr	r2, [r7, #24]
 8002b52:	4313      	orrs	r3, r2
 8002b54:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	69ba      	ldr	r2, [r7, #24]
 8002b5a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002b5c:	683b      	ldr	r3, [r7, #0]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f003 0303 	and.w	r3, r3, #3
 8002b64:	2b02      	cmp	r3, #2
 8002b66:	d123      	bne.n	8002bb0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002b68:	69fb      	ldr	r3, [r7, #28]
 8002b6a:	08da      	lsrs	r2, r3, #3
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	3208      	adds	r2, #8
 8002b70:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b74:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002b76:	69fb      	ldr	r3, [r7, #28]
 8002b78:	f003 0307 	and.w	r3, r3, #7
 8002b7c:	009b      	lsls	r3, r3, #2
 8002b7e:	220f      	movs	r2, #15
 8002b80:	fa02 f303 	lsl.w	r3, r2, r3
 8002b84:	43db      	mvns	r3, r3
 8002b86:	69ba      	ldr	r2, [r7, #24]
 8002b88:	4013      	ands	r3, r2
 8002b8a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002b8c:	683b      	ldr	r3, [r7, #0]
 8002b8e:	691a      	ldr	r2, [r3, #16]
 8002b90:	69fb      	ldr	r3, [r7, #28]
 8002b92:	f003 0307 	and.w	r3, r3, #7
 8002b96:	009b      	lsls	r3, r3, #2
 8002b98:	fa02 f303 	lsl.w	r3, r2, r3
 8002b9c:	69ba      	ldr	r2, [r7, #24]
 8002b9e:	4313      	orrs	r3, r2
 8002ba0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	08da      	lsrs	r2, r3, #3
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	3208      	adds	r2, #8
 8002baa:	69b9      	ldr	r1, [r7, #24]
 8002bac:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002bb6:	69fb      	ldr	r3, [r7, #28]
 8002bb8:	005b      	lsls	r3, r3, #1
 8002bba:	2203      	movs	r2, #3
 8002bbc:	fa02 f303 	lsl.w	r3, r2, r3
 8002bc0:	43db      	mvns	r3, r3
 8002bc2:	69ba      	ldr	r2, [r7, #24]
 8002bc4:	4013      	ands	r3, r2
 8002bc6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002bc8:	683b      	ldr	r3, [r7, #0]
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	f003 0203 	and.w	r2, r3, #3
 8002bd0:	69fb      	ldr	r3, [r7, #28]
 8002bd2:	005b      	lsls	r3, r3, #1
 8002bd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002bd8:	69ba      	ldr	r2, [r7, #24]
 8002bda:	4313      	orrs	r3, r2
 8002bdc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69ba      	ldr	r2, [r7, #24]
 8002be2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002be4:	683b      	ldr	r3, [r7, #0]
 8002be6:	685b      	ldr	r3, [r3, #4]
 8002be8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002bec:	2b00      	cmp	r3, #0
 8002bee:	f000 80b4 	beq.w	8002d5a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002bf2:	2300      	movs	r3, #0
 8002bf4:	60fb      	str	r3, [r7, #12]
 8002bf6:	4b60      	ldr	r3, [pc, #384]	@ (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bf8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002bfa:	4a5f      	ldr	r2, [pc, #380]	@ (8002d78 <HAL_GPIO_Init+0x30c>)
 8002bfc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002c00:	6453      	str	r3, [r2, #68]	@ 0x44
 8002c02:	4b5d      	ldr	r3, [pc, #372]	@ (8002d78 <HAL_GPIO_Init+0x30c>)
 8002c04:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002c06:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002c0a:	60fb      	str	r3, [r7, #12]
 8002c0c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002c0e:	4a5b      	ldr	r2, [pc, #364]	@ (8002d7c <HAL_GPIO_Init+0x310>)
 8002c10:	69fb      	ldr	r3, [r7, #28]
 8002c12:	089b      	lsrs	r3, r3, #2
 8002c14:	3302      	adds	r3, #2
 8002c16:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002c1a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002c1c:	69fb      	ldr	r3, [r7, #28]
 8002c1e:	f003 0303 	and.w	r3, r3, #3
 8002c22:	009b      	lsls	r3, r3, #2
 8002c24:	220f      	movs	r2, #15
 8002c26:	fa02 f303 	lsl.w	r3, r2, r3
 8002c2a:	43db      	mvns	r3, r3
 8002c2c:	69ba      	ldr	r2, [r7, #24]
 8002c2e:	4013      	ands	r3, r2
 8002c30:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002c32:	687b      	ldr	r3, [r7, #4]
 8002c34:	4a52      	ldr	r2, [pc, #328]	@ (8002d80 <HAL_GPIO_Init+0x314>)
 8002c36:	4293      	cmp	r3, r2
 8002c38:	d02b      	beq.n	8002c92 <HAL_GPIO_Init+0x226>
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	4a51      	ldr	r2, [pc, #324]	@ (8002d84 <HAL_GPIO_Init+0x318>)
 8002c3e:	4293      	cmp	r3, r2
 8002c40:	d025      	beq.n	8002c8e <HAL_GPIO_Init+0x222>
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	4a50      	ldr	r2, [pc, #320]	@ (8002d88 <HAL_GPIO_Init+0x31c>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d01f      	beq.n	8002c8a <HAL_GPIO_Init+0x21e>
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	4a4f      	ldr	r2, [pc, #316]	@ (8002d8c <HAL_GPIO_Init+0x320>)
 8002c4e:	4293      	cmp	r3, r2
 8002c50:	d019      	beq.n	8002c86 <HAL_GPIO_Init+0x21a>
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	4a4e      	ldr	r2, [pc, #312]	@ (8002d90 <HAL_GPIO_Init+0x324>)
 8002c56:	4293      	cmp	r3, r2
 8002c58:	d013      	beq.n	8002c82 <HAL_GPIO_Init+0x216>
 8002c5a:	687b      	ldr	r3, [r7, #4]
 8002c5c:	4a4d      	ldr	r2, [pc, #308]	@ (8002d94 <HAL_GPIO_Init+0x328>)
 8002c5e:	4293      	cmp	r3, r2
 8002c60:	d00d      	beq.n	8002c7e <HAL_GPIO_Init+0x212>
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	4a4c      	ldr	r2, [pc, #304]	@ (8002d98 <HAL_GPIO_Init+0x32c>)
 8002c66:	4293      	cmp	r3, r2
 8002c68:	d007      	beq.n	8002c7a <HAL_GPIO_Init+0x20e>
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	4a4b      	ldr	r2, [pc, #300]	@ (8002d9c <HAL_GPIO_Init+0x330>)
 8002c6e:	4293      	cmp	r3, r2
 8002c70:	d101      	bne.n	8002c76 <HAL_GPIO_Init+0x20a>
 8002c72:	2307      	movs	r3, #7
 8002c74:	e00e      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c76:	2308      	movs	r3, #8
 8002c78:	e00c      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7a:	2306      	movs	r3, #6
 8002c7c:	e00a      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c7e:	2305      	movs	r3, #5
 8002c80:	e008      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c82:	2304      	movs	r3, #4
 8002c84:	e006      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c86:	2303      	movs	r3, #3
 8002c88:	e004      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8a:	2302      	movs	r3, #2
 8002c8c:	e002      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e000      	b.n	8002c94 <HAL_GPIO_Init+0x228>
 8002c92:	2300      	movs	r3, #0
 8002c94:	69fa      	ldr	r2, [r7, #28]
 8002c96:	f002 0203 	and.w	r2, r2, #3
 8002c9a:	0092      	lsls	r2, r2, #2
 8002c9c:	4093      	lsls	r3, r2
 8002c9e:	69ba      	ldr	r2, [r7, #24]
 8002ca0:	4313      	orrs	r3, r2
 8002ca2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002ca4:	4935      	ldr	r1, [pc, #212]	@ (8002d7c <HAL_GPIO_Init+0x310>)
 8002ca6:	69fb      	ldr	r3, [r7, #28]
 8002ca8:	089b      	lsrs	r3, r3, #2
 8002caa:	3302      	adds	r3, #2
 8002cac:	69ba      	ldr	r2, [r7, #24]
 8002cae:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002cb2:	4b3b      	ldr	r3, [pc, #236]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002cb4:	689b      	ldr	r3, [r3, #8]
 8002cb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002cb8:	693b      	ldr	r3, [r7, #16]
 8002cba:	43db      	mvns	r3, r3
 8002cbc:	69ba      	ldr	r2, [r7, #24]
 8002cbe:	4013      	ands	r3, r2
 8002cc0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002cc2:	683b      	ldr	r3, [r7, #0]
 8002cc4:	685b      	ldr	r3, [r3, #4]
 8002cc6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002cca:	2b00      	cmp	r3, #0
 8002ccc:	d003      	beq.n	8002cd6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	693b      	ldr	r3, [r7, #16]
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002cd6:	4a32      	ldr	r2, [pc, #200]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002cd8:	69bb      	ldr	r3, [r7, #24]
 8002cda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002cdc:	4b30      	ldr	r3, [pc, #192]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002cde:	68db      	ldr	r3, [r3, #12]
 8002ce0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ce2:	693b      	ldr	r3, [r7, #16]
 8002ce4:	43db      	mvns	r3, r3
 8002ce6:	69ba      	ldr	r2, [r7, #24]
 8002ce8:	4013      	ands	r3, r2
 8002cea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002cec:	683b      	ldr	r3, [r7, #0]
 8002cee:	685b      	ldr	r3, [r3, #4]
 8002cf0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d003      	beq.n	8002d00 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8002cf8:	69ba      	ldr	r2, [r7, #24]
 8002cfa:	693b      	ldr	r3, [r7, #16]
 8002cfc:	4313      	orrs	r3, r2
 8002cfe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002d00:	4a27      	ldr	r2, [pc, #156]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002d02:	69bb      	ldr	r3, [r7, #24]
 8002d04:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002d06:	4b26      	ldr	r3, [pc, #152]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002d08:	685b      	ldr	r3, [r3, #4]
 8002d0a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d0c:	693b      	ldr	r3, [r7, #16]
 8002d0e:	43db      	mvns	r3, r3
 8002d10:	69ba      	ldr	r2, [r7, #24]
 8002d12:	4013      	ands	r3, r2
 8002d14:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002d16:	683b      	ldr	r3, [r7, #0]
 8002d18:	685b      	ldr	r3, [r3, #4]
 8002d1a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d003      	beq.n	8002d2a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002d22:	69ba      	ldr	r2, [r7, #24]
 8002d24:	693b      	ldr	r3, [r7, #16]
 8002d26:	4313      	orrs	r3, r2
 8002d28:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002d2a:	4a1d      	ldr	r2, [pc, #116]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002d30:	4b1b      	ldr	r3, [pc, #108]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002d36:	693b      	ldr	r3, [r7, #16]
 8002d38:	43db      	mvns	r3, r3
 8002d3a:	69ba      	ldr	r2, [r7, #24]
 8002d3c:	4013      	ands	r3, r2
 8002d3e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002d40:	683b      	ldr	r3, [r7, #0]
 8002d42:	685b      	ldr	r3, [r3, #4]
 8002d44:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	d003      	beq.n	8002d54 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002d4c:	69ba      	ldr	r2, [r7, #24]
 8002d4e:	693b      	ldr	r3, [r7, #16]
 8002d50:	4313      	orrs	r3, r2
 8002d52:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002d54:	4a12      	ldr	r2, [pc, #72]	@ (8002da0 <HAL_GPIO_Init+0x334>)
 8002d56:	69bb      	ldr	r3, [r7, #24]
 8002d58:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5a:	69fb      	ldr	r3, [r7, #28]
 8002d5c:	3301      	adds	r3, #1
 8002d5e:	61fb      	str	r3, [r7, #28]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	2b0f      	cmp	r3, #15
 8002d64:	f67f ae90 	bls.w	8002a88 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002d68:	bf00      	nop
 8002d6a:	bf00      	nop
 8002d6c:	3724      	adds	r7, #36	@ 0x24
 8002d6e:	46bd      	mov	sp, r7
 8002d70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d74:	4770      	bx	lr
 8002d76:	bf00      	nop
 8002d78:	40023800 	.word	0x40023800
 8002d7c:	40013800 	.word	0x40013800
 8002d80:	40020000 	.word	0x40020000
 8002d84:	40020400 	.word	0x40020400
 8002d88:	40020800 	.word	0x40020800
 8002d8c:	40020c00 	.word	0x40020c00
 8002d90:	40021000 	.word	0x40021000
 8002d94:	40021400 	.word	0x40021400
 8002d98:	40021800 	.word	0x40021800
 8002d9c:	40021c00 	.word	0x40021c00
 8002da0:	40013c00 	.word	0x40013c00

08002da4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b083      	sub	sp, #12
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]
 8002dac:	460b      	mov	r3, r1
 8002dae:	807b      	strh	r3, [r7, #2]
 8002db0:	4613      	mov	r3, r2
 8002db2:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002db4:	787b      	ldrb	r3, [r7, #1]
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d003      	beq.n	8002dc2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002dba:	887a      	ldrh	r2, [r7, #2]
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002dc0:	e003      	b.n	8002dca <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002dc2:	887b      	ldrh	r3, [r7, #2]
 8002dc4:	041a      	lsls	r2, r3, #16
 8002dc6:	687b      	ldr	r3, [r7, #4]
 8002dc8:	619a      	str	r2, [r3, #24]
}
 8002dca:	bf00      	nop
 8002dcc:	370c      	adds	r7, #12
 8002dce:	46bd      	mov	sp, r7
 8002dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002dd4:	4770      	bx	lr
	...

08002dd8 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002dd8:	b580      	push	{r7, lr}
 8002dda:	b082      	sub	sp, #8
 8002ddc:	af00      	add	r7, sp, #0
 8002dde:	4603      	mov	r3, r0
 8002de0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002de2:	4b08      	ldr	r3, [pc, #32]	@ (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002de4:	695a      	ldr	r2, [r3, #20]
 8002de6:	88fb      	ldrh	r3, [r7, #6]
 8002de8:	4013      	ands	r3, r2
 8002dea:	2b00      	cmp	r3, #0
 8002dec:	d006      	beq.n	8002dfc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002dee:	4a05      	ldr	r2, [pc, #20]	@ (8002e04 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002df0:	88fb      	ldrh	r3, [r7, #6]
 8002df2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002df4:	88fb      	ldrh	r3, [r7, #6]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f000 f806 	bl	8002e08 <HAL_GPIO_EXTI_Callback>
  }
}
 8002dfc:	bf00      	nop
 8002dfe:	3708      	adds	r7, #8
 8002e00:	46bd      	mov	sp, r7
 8002e02:	bd80      	pop	{r7, pc}
 8002e04:	40013c00 	.word	0x40013c00

08002e08 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b083      	sub	sp, #12
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	4603      	mov	r3, r0
 8002e10:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002e12:	bf00      	nop
 8002e14:	370c      	adds	r7, #12
 8002e16:	46bd      	mov	sp, r7
 8002e18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e1c:	4770      	bx	lr
	...

08002e20 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002e20:	b580      	push	{r7, lr}
 8002e22:	b086      	sub	sp, #24
 8002e24:	af00      	add	r7, sp, #0
 8002e26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002e28:	687b      	ldr	r3, [r7, #4]
 8002e2a:	2b00      	cmp	r3, #0
 8002e2c:	d101      	bne.n	8002e32 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002e2e:	2301      	movs	r3, #1
 8002e30:	e267      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	f003 0301 	and.w	r3, r3, #1
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d075      	beq.n	8002f2a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e3e:	4b88      	ldr	r3, [pc, #544]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e40:	689b      	ldr	r3, [r3, #8]
 8002e42:	f003 030c 	and.w	r3, r3, #12
 8002e46:	2b04      	cmp	r3, #4
 8002e48:	d00c      	beq.n	8002e64 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e4a:	4b85      	ldr	r3, [pc, #532]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e4c:	689b      	ldr	r3, [r3, #8]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002e52:	2b08      	cmp	r3, #8
 8002e54:	d112      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002e56:	4b82      	ldr	r3, [pc, #520]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e58:	685b      	ldr	r3, [r3, #4]
 8002e5a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002e5e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002e62:	d10b      	bne.n	8002e7c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002e64:	4b7e      	ldr	r3, [pc, #504]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	d05b      	beq.n	8002f28 <HAL_RCC_OscConfig+0x108>
 8002e70:	687b      	ldr	r3, [r7, #4]
 8002e72:	685b      	ldr	r3, [r3, #4]
 8002e74:	2b00      	cmp	r3, #0
 8002e76:	d157      	bne.n	8002f28 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002e78:	2301      	movs	r3, #1
 8002e7a:	e242      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	685b      	ldr	r3, [r3, #4]
 8002e80:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002e84:	d106      	bne.n	8002e94 <HAL_RCC_OscConfig+0x74>
 8002e86:	4b76      	ldr	r3, [pc, #472]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e88:	681b      	ldr	r3, [r3, #0]
 8002e8a:	4a75      	ldr	r2, [pc, #468]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002e8c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002e90:	6013      	str	r3, [r2, #0]
 8002e92:	e01d      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	685b      	ldr	r3, [r3, #4]
 8002e98:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002e9c:	d10c      	bne.n	8002eb8 <HAL_RCC_OscConfig+0x98>
 8002e9e:	4b70      	ldr	r3, [pc, #448]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a6f      	ldr	r2, [pc, #444]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ea4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002ea8:	6013      	str	r3, [r2, #0]
 8002eaa:	4b6d      	ldr	r3, [pc, #436]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eac:	681b      	ldr	r3, [r3, #0]
 8002eae:	4a6c      	ldr	r2, [pc, #432]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eb0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002eb4:	6013      	str	r3, [r2, #0]
 8002eb6:	e00b      	b.n	8002ed0 <HAL_RCC_OscConfig+0xb0>
 8002eb8:	4b69      	ldr	r3, [pc, #420]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eba:	681b      	ldr	r3, [r3, #0]
 8002ebc:	4a68      	ldr	r2, [pc, #416]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ebe:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002ec2:	6013      	str	r3, [r2, #0]
 8002ec4:	4b66      	ldr	r3, [pc, #408]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4a65      	ldr	r2, [pc, #404]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002eca:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002ece:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d013      	beq.n	8002f00 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ed8:	f7ff fcb6 	bl	8002848 <HAL_GetTick>
 8002edc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ede:	e008      	b.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ee0:	f7ff fcb2 	bl	8002848 <HAL_GetTick>
 8002ee4:	4602      	mov	r2, r0
 8002ee6:	693b      	ldr	r3, [r7, #16]
 8002ee8:	1ad3      	subs	r3, r2, r3
 8002eea:	2b64      	cmp	r3, #100	@ 0x64
 8002eec:	d901      	bls.n	8002ef2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002eee:	2303      	movs	r3, #3
 8002ef0:	e207      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ef2:	4b5b      	ldr	r3, [pc, #364]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d0f0      	beq.n	8002ee0 <HAL_RCC_OscConfig+0xc0>
 8002efe:	e014      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f00:	f7ff fca2 	bl	8002848 <HAL_GetTick>
 8002f04:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f06:	e008      	b.n	8002f1a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f08:	f7ff fc9e 	bl	8002848 <HAL_GetTick>
 8002f0c:	4602      	mov	r2, r0
 8002f0e:	693b      	ldr	r3, [r7, #16]
 8002f10:	1ad3      	subs	r3, r2, r3
 8002f12:	2b64      	cmp	r3, #100	@ 0x64
 8002f14:	d901      	bls.n	8002f1a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002f16:	2303      	movs	r3, #3
 8002f18:	e1f3      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002f1a:	4b51      	ldr	r3, [pc, #324]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d1f0      	bne.n	8002f08 <HAL_RCC_OscConfig+0xe8>
 8002f26:	e000      	b.n	8002f2a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f28:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f003 0302 	and.w	r3, r3, #2
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d063      	beq.n	8002ffe <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f36:	4b4a      	ldr	r3, [pc, #296]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f38:	689b      	ldr	r3, [r3, #8]
 8002f3a:	f003 030c 	and.w	r3, r3, #12
 8002f3e:	2b00      	cmp	r3, #0
 8002f40:	d00b      	beq.n	8002f5a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f42:	4b47      	ldr	r3, [pc, #284]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f44:	689b      	ldr	r3, [r3, #8]
 8002f46:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002f4a:	2b08      	cmp	r3, #8
 8002f4c:	d11c      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002f4e:	4b44      	ldr	r3, [pc, #272]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f50:	685b      	ldr	r3, [r3, #4]
 8002f52:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d116      	bne.n	8002f88 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f5a:	4b41      	ldr	r3, [pc, #260]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f5c:	681b      	ldr	r3, [r3, #0]
 8002f5e:	f003 0302 	and.w	r3, r3, #2
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d005      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	68db      	ldr	r3, [r3, #12]
 8002f6a:	2b01      	cmp	r3, #1
 8002f6c:	d001      	beq.n	8002f72 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002f6e:	2301      	movs	r3, #1
 8002f70:	e1c7      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002f72:	4b3b      	ldr	r3, [pc, #236]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	691b      	ldr	r3, [r3, #16]
 8002f7e:	00db      	lsls	r3, r3, #3
 8002f80:	4937      	ldr	r1, [pc, #220]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002f82:	4313      	orrs	r3, r2
 8002f84:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002f86:	e03a      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	68db      	ldr	r3, [r3, #12]
 8002f8c:	2b00      	cmp	r3, #0
 8002f8e:	d020      	beq.n	8002fd2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002f90:	4b34      	ldr	r3, [pc, #208]	@ (8003064 <HAL_RCC_OscConfig+0x244>)
 8002f92:	2201      	movs	r2, #1
 8002f94:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002f96:	f7ff fc57 	bl	8002848 <HAL_GetTick>
 8002f9a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002f9c:	e008      	b.n	8002fb0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002f9e:	f7ff fc53 	bl	8002848 <HAL_GetTick>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	693b      	ldr	r3, [r7, #16]
 8002fa6:	1ad3      	subs	r3, r2, r3
 8002fa8:	2b02      	cmp	r3, #2
 8002faa:	d901      	bls.n	8002fb0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002fac:	2303      	movs	r3, #3
 8002fae:	e1a8      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002fb0:	4b2b      	ldr	r3, [pc, #172]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 0302 	and.w	r3, r3, #2
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d0f0      	beq.n	8002f9e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002fbc:	4b28      	ldr	r3, [pc, #160]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	691b      	ldr	r3, [r3, #16]
 8002fc8:	00db      	lsls	r3, r3, #3
 8002fca:	4925      	ldr	r1, [pc, #148]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	600b      	str	r3, [r1, #0]
 8002fd0:	e015      	b.n	8002ffe <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002fd2:	4b24      	ldr	r3, [pc, #144]	@ (8003064 <HAL_RCC_OscConfig+0x244>)
 8002fd4:	2200      	movs	r2, #0
 8002fd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002fd8:	f7ff fc36 	bl	8002848 <HAL_GetTick>
 8002fdc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002fde:	e008      	b.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002fe0:	f7ff fc32 	bl	8002848 <HAL_GetTick>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	693b      	ldr	r3, [r7, #16]
 8002fe8:	1ad3      	subs	r3, r2, r3
 8002fea:	2b02      	cmp	r3, #2
 8002fec:	d901      	bls.n	8002ff2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002fee:	2303      	movs	r3, #3
 8002ff0:	e187      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ff2:	4b1b      	ldr	r3, [pc, #108]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	f003 0302 	and.w	r3, r3, #2
 8002ffa:	2b00      	cmp	r3, #0
 8002ffc:	d1f0      	bne.n	8002fe0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f003 0308 	and.w	r3, r3, #8
 8003006:	2b00      	cmp	r3, #0
 8003008:	d036      	beq.n	8003078 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	695b      	ldr	r3, [r3, #20]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d016      	beq.n	8003040 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003012:	4b15      	ldr	r3, [pc, #84]	@ (8003068 <HAL_RCC_OscConfig+0x248>)
 8003014:	2201      	movs	r2, #1
 8003016:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003018:	f7ff fc16 	bl	8002848 <HAL_GetTick>
 800301c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800301e:	e008      	b.n	8003032 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003020:	f7ff fc12 	bl	8002848 <HAL_GetTick>
 8003024:	4602      	mov	r2, r0
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	1ad3      	subs	r3, r2, r3
 800302a:	2b02      	cmp	r3, #2
 800302c:	d901      	bls.n	8003032 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800302e:	2303      	movs	r3, #3
 8003030:	e167      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003032:	4b0b      	ldr	r3, [pc, #44]	@ (8003060 <HAL_RCC_OscConfig+0x240>)
 8003034:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003036:	f003 0302 	and.w	r3, r3, #2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d0f0      	beq.n	8003020 <HAL_RCC_OscConfig+0x200>
 800303e:	e01b      	b.n	8003078 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003040:	4b09      	ldr	r3, [pc, #36]	@ (8003068 <HAL_RCC_OscConfig+0x248>)
 8003042:	2200      	movs	r2, #0
 8003044:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003046:	f7ff fbff 	bl	8002848 <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800304c:	e00e      	b.n	800306c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800304e:	f7ff fbfb 	bl	8002848 <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	2b02      	cmp	r3, #2
 800305a:	d907      	bls.n	800306c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800305c:	2303      	movs	r3, #3
 800305e:	e150      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003060:	40023800 	.word	0x40023800
 8003064:	42470000 	.word	0x42470000
 8003068:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800306c:	4b88      	ldr	r3, [pc, #544]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800306e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003070:	f003 0302 	and.w	r3, r3, #2
 8003074:	2b00      	cmp	r3, #0
 8003076:	d1ea      	bne.n	800304e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	f003 0304 	and.w	r3, r3, #4
 8003080:	2b00      	cmp	r3, #0
 8003082:	f000 8097 	beq.w	80031b4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003086:	2300      	movs	r3, #0
 8003088:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800308a:	4b81      	ldr	r3, [pc, #516]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800308c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800308e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003092:	2b00      	cmp	r3, #0
 8003094:	d10f      	bne.n	80030b6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003096:	2300      	movs	r3, #0
 8003098:	60bb      	str	r3, [r7, #8]
 800309a:	4b7d      	ldr	r3, [pc, #500]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800309c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800309e:	4a7c      	ldr	r2, [pc, #496]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80030a4:	6413      	str	r3, [r2, #64]	@ 0x40
 80030a6:	4b7a      	ldr	r3, [pc, #488]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030a8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80030aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030ae:	60bb      	str	r3, [r7, #8]
 80030b0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80030b2:	2301      	movs	r3, #1
 80030b4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030b6:	4b77      	ldr	r3, [pc, #476]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030be:	2b00      	cmp	r3, #0
 80030c0:	d118      	bne.n	80030f4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80030c2:	4b74      	ldr	r3, [pc, #464]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c4:	681b      	ldr	r3, [r3, #0]
 80030c6:	4a73      	ldr	r2, [pc, #460]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030c8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80030cc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80030ce:	f7ff fbbb 	bl	8002848 <HAL_GetTick>
 80030d2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030d4:	e008      	b.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80030d6:	f7ff fbb7 	bl	8002848 <HAL_GetTick>
 80030da:	4602      	mov	r2, r0
 80030dc:	693b      	ldr	r3, [r7, #16]
 80030de:	1ad3      	subs	r3, r2, r3
 80030e0:	2b02      	cmp	r3, #2
 80030e2:	d901      	bls.n	80030e8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80030e4:	2303      	movs	r3, #3
 80030e6:	e10c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80030e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003294 <HAL_RCC_OscConfig+0x474>)
 80030ea:	681b      	ldr	r3, [r3, #0]
 80030ec:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d0f0      	beq.n	80030d6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80030f4:	687b      	ldr	r3, [r7, #4]
 80030f6:	689b      	ldr	r3, [r3, #8]
 80030f8:	2b01      	cmp	r3, #1
 80030fa:	d106      	bne.n	800310a <HAL_RCC_OscConfig+0x2ea>
 80030fc:	4b64      	ldr	r3, [pc, #400]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80030fe:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003100:	4a63      	ldr	r2, [pc, #396]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003102:	f043 0301 	orr.w	r3, r3, #1
 8003106:	6713      	str	r3, [r2, #112]	@ 0x70
 8003108:	e01c      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	689b      	ldr	r3, [r3, #8]
 800310e:	2b05      	cmp	r3, #5
 8003110:	d10c      	bne.n	800312c <HAL_RCC_OscConfig+0x30c>
 8003112:	4b5f      	ldr	r3, [pc, #380]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003114:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003116:	4a5e      	ldr	r2, [pc, #376]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003118:	f043 0304 	orr.w	r3, r3, #4
 800311c:	6713      	str	r3, [r2, #112]	@ 0x70
 800311e:	4b5c      	ldr	r3, [pc, #368]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003120:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003122:	4a5b      	ldr	r2, [pc, #364]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003124:	f043 0301 	orr.w	r3, r3, #1
 8003128:	6713      	str	r3, [r2, #112]	@ 0x70
 800312a:	e00b      	b.n	8003144 <HAL_RCC_OscConfig+0x324>
 800312c:	4b58      	ldr	r3, [pc, #352]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800312e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003130:	4a57      	ldr	r2, [pc, #348]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003132:	f023 0301 	bic.w	r3, r3, #1
 8003136:	6713      	str	r3, [r2, #112]	@ 0x70
 8003138:	4b55      	ldr	r3, [pc, #340]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800313a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800313c:	4a54      	ldr	r2, [pc, #336]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800313e:	f023 0304 	bic.w	r3, r3, #4
 8003142:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	689b      	ldr	r3, [r3, #8]
 8003148:	2b00      	cmp	r3, #0
 800314a:	d015      	beq.n	8003178 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800314c:	f7ff fb7c 	bl	8002848 <HAL_GetTick>
 8003150:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003152:	e00a      	b.n	800316a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003154:	f7ff fb78 	bl	8002848 <HAL_GetTick>
 8003158:	4602      	mov	r2, r0
 800315a:	693b      	ldr	r3, [r7, #16]
 800315c:	1ad3      	subs	r3, r2, r3
 800315e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003162:	4293      	cmp	r3, r2
 8003164:	d901      	bls.n	800316a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003166:	2303      	movs	r3, #3
 8003168:	e0cb      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800316a:	4b49      	ldr	r3, [pc, #292]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800316c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800316e:	f003 0302 	and.w	r3, r3, #2
 8003172:	2b00      	cmp	r3, #0
 8003174:	d0ee      	beq.n	8003154 <HAL_RCC_OscConfig+0x334>
 8003176:	e014      	b.n	80031a2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003178:	f7ff fb66 	bl	8002848 <HAL_GetTick>
 800317c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800317e:	e00a      	b.n	8003196 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003180:	f7ff fb62 	bl	8002848 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	693b      	ldr	r3, [r7, #16]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800318e:	4293      	cmp	r3, r2
 8003190:	d901      	bls.n	8003196 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8003192:	2303      	movs	r3, #3
 8003194:	e0b5      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003196:	4b3e      	ldr	r3, [pc, #248]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003198:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800319a:	f003 0302 	and.w	r3, r3, #2
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d1ee      	bne.n	8003180 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80031a2:	7dfb      	ldrb	r3, [r7, #23]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d105      	bne.n	80031b4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80031a8:	4b39      	ldr	r3, [pc, #228]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031aa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80031ac:	4a38      	ldr	r2, [pc, #224]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031ae:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80031b2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	699b      	ldr	r3, [r3, #24]
 80031b8:	2b00      	cmp	r3, #0
 80031ba:	f000 80a1 	beq.w	8003300 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80031be:	4b34      	ldr	r3, [pc, #208]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031c0:	689b      	ldr	r3, [r3, #8]
 80031c2:	f003 030c 	and.w	r3, r3, #12
 80031c6:	2b08      	cmp	r3, #8
 80031c8:	d05c      	beq.n	8003284 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	699b      	ldr	r3, [r3, #24]
 80031ce:	2b02      	cmp	r3, #2
 80031d0:	d141      	bne.n	8003256 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80031d2:	4b31      	ldr	r3, [pc, #196]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 80031d4:	2200      	movs	r2, #0
 80031d6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031d8:	f7ff fb36 	bl	8002848 <HAL_GetTick>
 80031dc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031de:	e008      	b.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80031e0:	f7ff fb32 	bl	8002848 <HAL_GetTick>
 80031e4:	4602      	mov	r2, r0
 80031e6:	693b      	ldr	r3, [r7, #16]
 80031e8:	1ad3      	subs	r3, r2, r3
 80031ea:	2b02      	cmp	r3, #2
 80031ec:	d901      	bls.n	80031f2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80031ee:	2303      	movs	r3, #3
 80031f0:	e087      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80031f2:	4b27      	ldr	r3, [pc, #156]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d1f0      	bne.n	80031e0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80031fe:	687b      	ldr	r3, [r7, #4]
 8003200:	69da      	ldr	r2, [r3, #28]
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	6a1b      	ldr	r3, [r3, #32]
 8003206:	431a      	orrs	r2, r3
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800320c:	019b      	lsls	r3, r3, #6
 800320e:	431a      	orrs	r2, r3
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003214:	085b      	lsrs	r3, r3, #1
 8003216:	3b01      	subs	r3, #1
 8003218:	041b      	lsls	r3, r3, #16
 800321a:	431a      	orrs	r2, r3
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003220:	061b      	lsls	r3, r3, #24
 8003222:	491b      	ldr	r1, [pc, #108]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003224:	4313      	orrs	r3, r2
 8003226:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003228:	4b1b      	ldr	r3, [pc, #108]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 800322a:	2201      	movs	r2, #1
 800322c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800322e:	f7ff fb0b 	bl	8002848 <HAL_GetTick>
 8003232:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003234:	e008      	b.n	8003248 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003236:	f7ff fb07 	bl	8002848 <HAL_GetTick>
 800323a:	4602      	mov	r2, r0
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	1ad3      	subs	r3, r2, r3
 8003240:	2b02      	cmp	r3, #2
 8003242:	d901      	bls.n	8003248 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003244:	2303      	movs	r3, #3
 8003246:	e05c      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003248:	4b11      	ldr	r3, [pc, #68]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003250:	2b00      	cmp	r3, #0
 8003252:	d0f0      	beq.n	8003236 <HAL_RCC_OscConfig+0x416>
 8003254:	e054      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003256:	4b10      	ldr	r3, [pc, #64]	@ (8003298 <HAL_RCC_OscConfig+0x478>)
 8003258:	2200      	movs	r2, #0
 800325a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800325c:	f7ff faf4 	bl	8002848 <HAL_GetTick>
 8003260:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003262:	e008      	b.n	8003276 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003264:	f7ff faf0 	bl	8002848 <HAL_GetTick>
 8003268:	4602      	mov	r2, r0
 800326a:	693b      	ldr	r3, [r7, #16]
 800326c:	1ad3      	subs	r3, r2, r3
 800326e:	2b02      	cmp	r3, #2
 8003270:	d901      	bls.n	8003276 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003272:	2303      	movs	r3, #3
 8003274:	e045      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003276:	4b06      	ldr	r3, [pc, #24]	@ (8003290 <HAL_RCC_OscConfig+0x470>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800327e:	2b00      	cmp	r3, #0
 8003280:	d1f0      	bne.n	8003264 <HAL_RCC_OscConfig+0x444>
 8003282:	e03d      	b.n	8003300 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	699b      	ldr	r3, [r3, #24]
 8003288:	2b01      	cmp	r3, #1
 800328a:	d107      	bne.n	800329c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800328c:	2301      	movs	r3, #1
 800328e:	e038      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
 8003290:	40023800 	.word	0x40023800
 8003294:	40007000 	.word	0x40007000
 8003298:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800329c:	4b1b      	ldr	r3, [pc, #108]	@ (800330c <HAL_RCC_OscConfig+0x4ec>)
 800329e:	685b      	ldr	r3, [r3, #4]
 80032a0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	699b      	ldr	r3, [r3, #24]
 80032a6:	2b01      	cmp	r3, #1
 80032a8:	d028      	beq.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032aa:	68fb      	ldr	r3, [r7, #12]
 80032ac:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80032b4:	429a      	cmp	r2, r3
 80032b6:	d121      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80032c2:	429a      	cmp	r2, r3
 80032c4:	d11a      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032c6:	68fa      	ldr	r2, [r7, #12]
 80032c8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80032cc:	4013      	ands	r3, r2
 80032ce:	687a      	ldr	r2, [r7, #4]
 80032d0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80032d2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80032d4:	4293      	cmp	r3, r2
 80032d6:	d111      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032d8:	68fb      	ldr	r3, [r7, #12]
 80032da:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80032e2:	085b      	lsrs	r3, r3, #1
 80032e4:	3b01      	subs	r3, #1
 80032e6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80032e8:	429a      	cmp	r2, r3
 80032ea:	d107      	bne.n	80032fc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80032ec:	68fb      	ldr	r3, [r7, #12]
 80032ee:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80032f6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80032f8:	429a      	cmp	r2, r3
 80032fa:	d001      	beq.n	8003300 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 80032fc:	2301      	movs	r3, #1
 80032fe:	e000      	b.n	8003302 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003300:	2300      	movs	r3, #0
}
 8003302:	4618      	mov	r0, r3
 8003304:	3718      	adds	r7, #24
 8003306:	46bd      	mov	sp, r7
 8003308:	bd80      	pop	{r7, pc}
 800330a:	bf00      	nop
 800330c:	40023800 	.word	0x40023800

08003310 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003310:	b580      	push	{r7, lr}
 8003312:	b084      	sub	sp, #16
 8003314:	af00      	add	r7, sp, #0
 8003316:	6078      	str	r0, [r7, #4]
 8003318:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	2b00      	cmp	r3, #0
 800331e:	d101      	bne.n	8003324 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003320:	2301      	movs	r3, #1
 8003322:	e0cc      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003324:	4b68      	ldr	r3, [pc, #416]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	f003 0307 	and.w	r3, r3, #7
 800332c:	683a      	ldr	r2, [r7, #0]
 800332e:	429a      	cmp	r2, r3
 8003330:	d90c      	bls.n	800334c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003332:	4b65      	ldr	r3, [pc, #404]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003334:	683a      	ldr	r2, [r7, #0]
 8003336:	b2d2      	uxtb	r2, r2
 8003338:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800333a:	4b63      	ldr	r3, [pc, #396]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	f003 0307 	and.w	r3, r3, #7
 8003342:	683a      	ldr	r2, [r7, #0]
 8003344:	429a      	cmp	r2, r3
 8003346:	d001      	beq.n	800334c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003348:	2301      	movs	r3, #1
 800334a:	e0b8      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d020      	beq.n	800339a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f003 0304 	and.w	r3, r3, #4
 8003360:	2b00      	cmp	r3, #0
 8003362:	d005      	beq.n	8003370 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003364:	4b59      	ldr	r3, [pc, #356]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003366:	689b      	ldr	r3, [r3, #8]
 8003368:	4a58      	ldr	r2, [pc, #352]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800336a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800336e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	681b      	ldr	r3, [r3, #0]
 8003374:	f003 0308 	and.w	r3, r3, #8
 8003378:	2b00      	cmp	r3, #0
 800337a:	d005      	beq.n	8003388 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800337c:	4b53      	ldr	r3, [pc, #332]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800337e:	689b      	ldr	r3, [r3, #8]
 8003380:	4a52      	ldr	r2, [pc, #328]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003382:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003386:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003388:	4b50      	ldr	r3, [pc, #320]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800338a:	689b      	ldr	r3, [r3, #8]
 800338c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	689b      	ldr	r3, [r3, #8]
 8003394:	494d      	ldr	r1, [pc, #308]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003396:	4313      	orrs	r3, r2
 8003398:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0301 	and.w	r3, r3, #1
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d044      	beq.n	8003430 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b01      	cmp	r3, #1
 80033ac:	d107      	bne.n	80033be <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033ae:	4b47      	ldr	r3, [pc, #284]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033b6:	2b00      	cmp	r3, #0
 80033b8:	d119      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ba:	2301      	movs	r3, #1
 80033bc:	e07f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	685b      	ldr	r3, [r3, #4]
 80033c2:	2b02      	cmp	r3, #2
 80033c4:	d003      	beq.n	80033ce <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80033c6:	687b      	ldr	r3, [r7, #4]
 80033c8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80033ca:	2b03      	cmp	r3, #3
 80033cc:	d107      	bne.n	80033de <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80033ce:	4b3f      	ldr	r3, [pc, #252]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d109      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033da:	2301      	movs	r3, #1
 80033dc:	e06f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033de:	4b3b      	ldr	r3, [pc, #236]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	f003 0302 	and.w	r3, r3, #2
 80033e6:	2b00      	cmp	r3, #0
 80033e8:	d101      	bne.n	80033ee <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80033ea:	2301      	movs	r3, #1
 80033ec:	e067      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80033ee:	4b37      	ldr	r3, [pc, #220]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f023 0203 	bic.w	r2, r3, #3
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	685b      	ldr	r3, [r3, #4]
 80033fa:	4934      	ldr	r1, [pc, #208]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 80033fc:	4313      	orrs	r3, r2
 80033fe:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003400:	f7ff fa22 	bl	8002848 <HAL_GetTick>
 8003404:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003406:	e00a      	b.n	800341e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003408:	f7ff fa1e 	bl	8002848 <HAL_GetTick>
 800340c:	4602      	mov	r2, r0
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	1ad3      	subs	r3, r2, r3
 8003412:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003416:	4293      	cmp	r3, r2
 8003418:	d901      	bls.n	800341e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800341a:	2303      	movs	r3, #3
 800341c:	e04f      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800341e:	4b2b      	ldr	r3, [pc, #172]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003420:	689b      	ldr	r3, [r3, #8]
 8003422:	f003 020c 	and.w	r2, r3, #12
 8003426:	687b      	ldr	r3, [r7, #4]
 8003428:	685b      	ldr	r3, [r3, #4]
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	429a      	cmp	r2, r3
 800342e:	d1eb      	bne.n	8003408 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003430:	4b25      	ldr	r3, [pc, #148]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 0307 	and.w	r3, r3, #7
 8003438:	683a      	ldr	r2, [r7, #0]
 800343a:	429a      	cmp	r2, r3
 800343c:	d20c      	bcs.n	8003458 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800343e:	4b22      	ldr	r3, [pc, #136]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003440:	683a      	ldr	r2, [r7, #0]
 8003442:	b2d2      	uxtb	r2, r2
 8003444:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003446:	4b20      	ldr	r3, [pc, #128]	@ (80034c8 <HAL_RCC_ClockConfig+0x1b8>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0307 	and.w	r3, r3, #7
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	429a      	cmp	r2, r3
 8003452:	d001      	beq.n	8003458 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003454:	2301      	movs	r3, #1
 8003456:	e032      	b.n	80034be <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003458:	687b      	ldr	r3, [r7, #4]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0304 	and.w	r3, r3, #4
 8003460:	2b00      	cmp	r3, #0
 8003462:	d008      	beq.n	8003476 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003464:	4b19      	ldr	r3, [pc, #100]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	68db      	ldr	r3, [r3, #12]
 8003470:	4916      	ldr	r1, [pc, #88]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003472:	4313      	orrs	r3, r2
 8003474:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0308 	and.w	r3, r3, #8
 800347e:	2b00      	cmp	r3, #0
 8003480:	d009      	beq.n	8003496 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003482:	4b12      	ldr	r3, [pc, #72]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	00db      	lsls	r3, r3, #3
 8003490:	490e      	ldr	r1, [pc, #56]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 8003492:	4313      	orrs	r3, r2
 8003494:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003496:	f000 f821 	bl	80034dc <HAL_RCC_GetSysClockFreq>
 800349a:	4602      	mov	r2, r0
 800349c:	4b0b      	ldr	r3, [pc, #44]	@ (80034cc <HAL_RCC_ClockConfig+0x1bc>)
 800349e:	689b      	ldr	r3, [r3, #8]
 80034a0:	091b      	lsrs	r3, r3, #4
 80034a2:	f003 030f 	and.w	r3, r3, #15
 80034a6:	490a      	ldr	r1, [pc, #40]	@ (80034d0 <HAL_RCC_ClockConfig+0x1c0>)
 80034a8:	5ccb      	ldrb	r3, [r1, r3]
 80034aa:	fa22 f303 	lsr.w	r3, r2, r3
 80034ae:	4a09      	ldr	r2, [pc, #36]	@ (80034d4 <HAL_RCC_ClockConfig+0x1c4>)
 80034b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80034b2:	4b09      	ldr	r3, [pc, #36]	@ (80034d8 <HAL_RCC_ClockConfig+0x1c8>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7ff f828 	bl	800250c <HAL_InitTick>

  return HAL_OK;
 80034bc:	2300      	movs	r3, #0
}
 80034be:	4618      	mov	r0, r3
 80034c0:	3710      	adds	r7, #16
 80034c2:	46bd      	mov	sp, r7
 80034c4:	bd80      	pop	{r7, pc}
 80034c6:	bf00      	nop
 80034c8:	40023c00 	.word	0x40023c00
 80034cc:	40023800 	.word	0x40023800
 80034d0:	0800a87c 	.word	0x0800a87c
 80034d4:	20000000 	.word	0x20000000
 80034d8:	20000004 	.word	0x20000004

080034dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80034dc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80034e0:	b094      	sub	sp, #80	@ 0x50
 80034e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80034e4:	2300      	movs	r3, #0
 80034e6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80034e8:	2300      	movs	r3, #0
 80034ea:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80034ec:	2300      	movs	r3, #0
 80034ee:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80034f0:	2300      	movs	r3, #0
 80034f2:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80034f4:	4b79      	ldr	r3, [pc, #484]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f003 030c 	and.w	r3, r3, #12
 80034fc:	2b08      	cmp	r3, #8
 80034fe:	d00d      	beq.n	800351c <HAL_RCC_GetSysClockFreq+0x40>
 8003500:	2b08      	cmp	r3, #8
 8003502:	f200 80e1 	bhi.w	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003506:	2b00      	cmp	r3, #0
 8003508:	d002      	beq.n	8003510 <HAL_RCC_GetSysClockFreq+0x34>
 800350a:	2b04      	cmp	r3, #4
 800350c:	d003      	beq.n	8003516 <HAL_RCC_GetSysClockFreq+0x3a>
 800350e:	e0db      	b.n	80036c8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003510:	4b73      	ldr	r3, [pc, #460]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003512:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003514:	e0db      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003516:	4b73      	ldr	r3, [pc, #460]	@ (80036e4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003518:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800351a:	e0d8      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800351c:	4b6f      	ldr	r3, [pc, #444]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 800351e:	685b      	ldr	r3, [r3, #4]
 8003520:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003524:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003526:	4b6d      	ldr	r3, [pc, #436]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003528:	685b      	ldr	r3, [r3, #4]
 800352a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800352e:	2b00      	cmp	r3, #0
 8003530:	d063      	beq.n	80035fa <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003532:	4b6a      	ldr	r3, [pc, #424]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 8003534:	685b      	ldr	r3, [r3, #4]
 8003536:	099b      	lsrs	r3, r3, #6
 8003538:	2200      	movs	r2, #0
 800353a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800353c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 800353e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003540:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003544:	633b      	str	r3, [r7, #48]	@ 0x30
 8003546:	2300      	movs	r3, #0
 8003548:	637b      	str	r3, [r7, #52]	@ 0x34
 800354a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 800354e:	4622      	mov	r2, r4
 8003550:	462b      	mov	r3, r5
 8003552:	f04f 0000 	mov.w	r0, #0
 8003556:	f04f 0100 	mov.w	r1, #0
 800355a:	0159      	lsls	r1, r3, #5
 800355c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003560:	0150      	lsls	r0, r2, #5
 8003562:	4602      	mov	r2, r0
 8003564:	460b      	mov	r3, r1
 8003566:	4621      	mov	r1, r4
 8003568:	1a51      	subs	r1, r2, r1
 800356a:	6139      	str	r1, [r7, #16]
 800356c:	4629      	mov	r1, r5
 800356e:	eb63 0301 	sbc.w	r3, r3, r1
 8003572:	617b      	str	r3, [r7, #20]
 8003574:	f04f 0200 	mov.w	r2, #0
 8003578:	f04f 0300 	mov.w	r3, #0
 800357c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003580:	4659      	mov	r1, fp
 8003582:	018b      	lsls	r3, r1, #6
 8003584:	4651      	mov	r1, sl
 8003586:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800358a:	4651      	mov	r1, sl
 800358c:	018a      	lsls	r2, r1, #6
 800358e:	4651      	mov	r1, sl
 8003590:	ebb2 0801 	subs.w	r8, r2, r1
 8003594:	4659      	mov	r1, fp
 8003596:	eb63 0901 	sbc.w	r9, r3, r1
 800359a:	f04f 0200 	mov.w	r2, #0
 800359e:	f04f 0300 	mov.w	r3, #0
 80035a2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80035a6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80035aa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4623      	mov	r3, r4
 80035b4:	eb18 0303 	adds.w	r3, r8, r3
 80035b8:	60bb      	str	r3, [r7, #8]
 80035ba:	462b      	mov	r3, r5
 80035bc:	eb49 0303 	adc.w	r3, r9, r3
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	f04f 0200 	mov.w	r2, #0
 80035c6:	f04f 0300 	mov.w	r3, #0
 80035ca:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80035ce:	4629      	mov	r1, r5
 80035d0:	024b      	lsls	r3, r1, #9
 80035d2:	4621      	mov	r1, r4
 80035d4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80035d8:	4621      	mov	r1, r4
 80035da:	024a      	lsls	r2, r1, #9
 80035dc:	4610      	mov	r0, r2
 80035de:	4619      	mov	r1, r3
 80035e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80035e2:	2200      	movs	r2, #0
 80035e4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80035e6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80035e8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80035ec:	f7fc fe40 	bl	8000270 <__aeabi_uldivmod>
 80035f0:	4602      	mov	r2, r0
 80035f2:	460b      	mov	r3, r1
 80035f4:	4613      	mov	r3, r2
 80035f6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80035f8:	e058      	b.n	80036ac <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80035fa:	4b38      	ldr	r3, [pc, #224]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80035fc:	685b      	ldr	r3, [r3, #4]
 80035fe:	099b      	lsrs	r3, r3, #6
 8003600:	2200      	movs	r2, #0
 8003602:	4618      	mov	r0, r3
 8003604:	4611      	mov	r1, r2
 8003606:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800360a:	623b      	str	r3, [r7, #32]
 800360c:	2300      	movs	r3, #0
 800360e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003610:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003614:	4642      	mov	r2, r8
 8003616:	464b      	mov	r3, r9
 8003618:	f04f 0000 	mov.w	r0, #0
 800361c:	f04f 0100 	mov.w	r1, #0
 8003620:	0159      	lsls	r1, r3, #5
 8003622:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003626:	0150      	lsls	r0, r2, #5
 8003628:	4602      	mov	r2, r0
 800362a:	460b      	mov	r3, r1
 800362c:	4641      	mov	r1, r8
 800362e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003632:	4649      	mov	r1, r9
 8003634:	eb63 0b01 	sbc.w	fp, r3, r1
 8003638:	f04f 0200 	mov.w	r2, #0
 800363c:	f04f 0300 	mov.w	r3, #0
 8003640:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003644:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003648:	ea4f 128a 	mov.w	r2, sl, lsl #6
 800364c:	ebb2 040a 	subs.w	r4, r2, sl
 8003650:	eb63 050b 	sbc.w	r5, r3, fp
 8003654:	f04f 0200 	mov.w	r2, #0
 8003658:	f04f 0300 	mov.w	r3, #0
 800365c:	00eb      	lsls	r3, r5, #3
 800365e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003662:	00e2      	lsls	r2, r4, #3
 8003664:	4614      	mov	r4, r2
 8003666:	461d      	mov	r5, r3
 8003668:	4643      	mov	r3, r8
 800366a:	18e3      	adds	r3, r4, r3
 800366c:	603b      	str	r3, [r7, #0]
 800366e:	464b      	mov	r3, r9
 8003670:	eb45 0303 	adc.w	r3, r5, r3
 8003674:	607b      	str	r3, [r7, #4]
 8003676:	f04f 0200 	mov.w	r2, #0
 800367a:	f04f 0300 	mov.w	r3, #0
 800367e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003682:	4629      	mov	r1, r5
 8003684:	028b      	lsls	r3, r1, #10
 8003686:	4621      	mov	r1, r4
 8003688:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800368c:	4621      	mov	r1, r4
 800368e:	028a      	lsls	r2, r1, #10
 8003690:	4610      	mov	r0, r2
 8003692:	4619      	mov	r1, r3
 8003694:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003696:	2200      	movs	r2, #0
 8003698:	61bb      	str	r3, [r7, #24]
 800369a:	61fa      	str	r2, [r7, #28]
 800369c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80036a0:	f7fc fde6 	bl	8000270 <__aeabi_uldivmod>
 80036a4:	4602      	mov	r2, r0
 80036a6:	460b      	mov	r3, r1
 80036a8:	4613      	mov	r3, r2
 80036aa:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80036ac:	4b0b      	ldr	r3, [pc, #44]	@ (80036dc <HAL_RCC_GetSysClockFreq+0x200>)
 80036ae:	685b      	ldr	r3, [r3, #4]
 80036b0:	0c1b      	lsrs	r3, r3, #16
 80036b2:	f003 0303 	and.w	r3, r3, #3
 80036b6:	3301      	adds	r3, #1
 80036b8:	005b      	lsls	r3, r3, #1
 80036ba:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80036bc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80036be:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80036c0:	fbb2 f3f3 	udiv	r3, r2, r3
 80036c4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036c6:	e002      	b.n	80036ce <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80036c8:	4b05      	ldr	r3, [pc, #20]	@ (80036e0 <HAL_RCC_GetSysClockFreq+0x204>)
 80036ca:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80036cc:	bf00      	nop
    }
  }
  return sysclockfreq;
 80036ce:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80036d0:	4618      	mov	r0, r3
 80036d2:	3750      	adds	r7, #80	@ 0x50
 80036d4:	46bd      	mov	sp, r7
 80036d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80036da:	bf00      	nop
 80036dc:	40023800 	.word	0x40023800
 80036e0:	00f42400 	.word	0x00f42400
 80036e4:	007a1200 	.word	0x007a1200

080036e8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80036e8:	b480      	push	{r7}
 80036ea:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80036ec:	4b03      	ldr	r3, [pc, #12]	@ (80036fc <HAL_RCC_GetHCLKFreq+0x14>)
 80036ee:	681b      	ldr	r3, [r3, #0]
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80036f8:	4770      	bx	lr
 80036fa:	bf00      	nop
 80036fc:	20000000 	.word	0x20000000

08003700 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003700:	b580      	push	{r7, lr}
 8003702:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003704:	f7ff fff0 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003708:	4602      	mov	r2, r0
 800370a:	4b05      	ldr	r3, [pc, #20]	@ (8003720 <HAL_RCC_GetPCLK1Freq+0x20>)
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	0a9b      	lsrs	r3, r3, #10
 8003710:	f003 0307 	and.w	r3, r3, #7
 8003714:	4903      	ldr	r1, [pc, #12]	@ (8003724 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003716:	5ccb      	ldrb	r3, [r1, r3]
 8003718:	fa22 f303 	lsr.w	r3, r2, r3
}
 800371c:	4618      	mov	r0, r3
 800371e:	bd80      	pop	{r7, pc}
 8003720:	40023800 	.word	0x40023800
 8003724:	0800a88c 	.word	0x0800a88c

08003728 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003728:	b580      	push	{r7, lr}
 800372a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 800372c:	f7ff ffdc 	bl	80036e8 <HAL_RCC_GetHCLKFreq>
 8003730:	4602      	mov	r2, r0
 8003732:	4b05      	ldr	r3, [pc, #20]	@ (8003748 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003734:	689b      	ldr	r3, [r3, #8]
 8003736:	0b5b      	lsrs	r3, r3, #13
 8003738:	f003 0307 	and.w	r3, r3, #7
 800373c:	4903      	ldr	r1, [pc, #12]	@ (800374c <HAL_RCC_GetPCLK2Freq+0x24>)
 800373e:	5ccb      	ldrb	r3, [r1, r3]
 8003740:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003744:	4618      	mov	r0, r3
 8003746:	bd80      	pop	{r7, pc}
 8003748:	40023800 	.word	0x40023800
 800374c:	0800a88c 	.word	0x0800a88c

08003750 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003750:	b480      	push	{r7}
 8003752:	b083      	sub	sp, #12
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
 8003758:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	220f      	movs	r2, #15
 800375e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003760:	4b12      	ldr	r3, [pc, #72]	@ (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 8003762:	689b      	ldr	r3, [r3, #8]
 8003764:	f003 0203 	and.w	r2, r3, #3
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800376c:	4b0f      	ldr	r3, [pc, #60]	@ (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 800376e:	689b      	ldr	r3, [r3, #8]
 8003770:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003778:	4b0c      	ldr	r3, [pc, #48]	@ (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 800377a:	689b      	ldr	r3, [r3, #8]
 800377c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003784:	4b09      	ldr	r3, [pc, #36]	@ (80037ac <HAL_RCC_GetClockConfig+0x5c>)
 8003786:	689b      	ldr	r3, [r3, #8]
 8003788:	08db      	lsrs	r3, r3, #3
 800378a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003792:	4b07      	ldr	r3, [pc, #28]	@ (80037b0 <HAL_RCC_GetClockConfig+0x60>)
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f003 0207 	and.w	r2, r3, #7
 800379a:	683b      	ldr	r3, [r7, #0]
 800379c:	601a      	str	r2, [r3, #0]
}
 800379e:	bf00      	nop
 80037a0:	370c      	adds	r7, #12
 80037a2:	46bd      	mov	sp, r7
 80037a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037a8:	4770      	bx	lr
 80037aa:	bf00      	nop
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40023c00 	.word	0x40023c00

080037b4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037b4:	b580      	push	{r7, lr}
 80037b6:	b082      	sub	sp, #8
 80037b8:	af00      	add	r7, sp, #0
 80037ba:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d101      	bne.n	80037c6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e07b      	b.n	80038be <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d108      	bne.n	80037e0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	685b      	ldr	r3, [r3, #4]
 80037d2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037d6:	d009      	beq.n	80037ec <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	2200      	movs	r2, #0
 80037dc:	61da      	str	r2, [r3, #28]
 80037de:	e005      	b.n	80037ec <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	2200      	movs	r2, #0
 80037ea:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2200      	movs	r2, #0
 80037f0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80037f8:	b2db      	uxtb	r3, r3
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d106      	bne.n	800380c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	2200      	movs	r2, #0
 8003802:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003806:	6878      	ldr	r0, [r7, #4]
 8003808:	f7fe fdf0 	bl	80023ec <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	2202      	movs	r2, #2
 8003810:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	681a      	ldr	r2, [r3, #0]
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003822:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	689b      	ldr	r3, [r3, #8]
 8003830:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003834:	431a      	orrs	r2, r3
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	68db      	ldr	r3, [r3, #12]
 800383a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800383e:	431a      	orrs	r2, r3
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	691b      	ldr	r3, [r3, #16]
 8003844:	f003 0302 	and.w	r3, r3, #2
 8003848:	431a      	orrs	r2, r3
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	695b      	ldr	r3, [r3, #20]
 800384e:	f003 0301 	and.w	r3, r3, #1
 8003852:	431a      	orrs	r2, r3
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	699b      	ldr	r3, [r3, #24]
 8003858:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 800385c:	431a      	orrs	r2, r3
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	69db      	ldr	r3, [r3, #28]
 8003862:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003866:	431a      	orrs	r2, r3
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	6a1b      	ldr	r3, [r3, #32]
 800386c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003870:	ea42 0103 	orr.w	r1, r2, r3
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003878:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	681b      	ldr	r3, [r3, #0]
 8003880:	430a      	orrs	r2, r1
 8003882:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	699b      	ldr	r3, [r3, #24]
 8003888:	0c1b      	lsrs	r3, r3, #16
 800388a:	f003 0104 	and.w	r1, r3, #4
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003892:	f003 0210 	and.w	r2, r3, #16
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	430a      	orrs	r2, r1
 800389c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	69da      	ldr	r2, [r3, #28]
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	681b      	ldr	r3, [r3, #0]
 80038a8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ac:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	2200      	movs	r2, #0
 80038b2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2201      	movs	r2, #1
 80038b8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038bc:	2300      	movs	r3, #0
}
 80038be:	4618      	mov	r0, r3
 80038c0:	3708      	adds	r7, #8
 80038c2:	46bd      	mov	sp, r7
 80038c4:	bd80      	pop	{r7, pc}

080038c6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 80038c6:	b580      	push	{r7, lr}
 80038c8:	b08a      	sub	sp, #40	@ 0x28
 80038ca:	af00      	add	r7, sp, #0
 80038cc:	60f8      	str	r0, [r7, #12]
 80038ce:	60b9      	str	r1, [r7, #8]
 80038d0:	607a      	str	r2, [r7, #4]
 80038d2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80038d4:	2301      	movs	r3, #1
 80038d6:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80038d8:	f7fe ffb6 	bl	8002848 <HAL_GetTick>
 80038dc:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80038de:	68fb      	ldr	r3, [r7, #12]
 80038e0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80038e4:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	685b      	ldr	r3, [r3, #4]
 80038ea:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80038ec:	887b      	ldrh	r3, [r7, #2]
 80038ee:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80038f0:	7ffb      	ldrb	r3, [r7, #31]
 80038f2:	2b01      	cmp	r3, #1
 80038f4:	d00c      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x4a>
 80038f6:	69bb      	ldr	r3, [r7, #24]
 80038f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80038fc:	d106      	bne.n	800390c <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	689b      	ldr	r3, [r3, #8]
 8003902:	2b00      	cmp	r3, #0
 8003904:	d102      	bne.n	800390c <HAL_SPI_TransmitReceive+0x46>
 8003906:	7ffb      	ldrb	r3, [r7, #31]
 8003908:	2b04      	cmp	r3, #4
 800390a:	d001      	beq.n	8003910 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 800390c:	2302      	movs	r3, #2
 800390e:	e17f      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8003910:	68bb      	ldr	r3, [r7, #8]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d005      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x5c>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	2b00      	cmp	r3, #0
 800391a:	d002      	beq.n	8003922 <HAL_SPI_TransmitReceive+0x5c>
 800391c:	887b      	ldrh	r3, [r7, #2]
 800391e:	2b00      	cmp	r3, #0
 8003920:	d101      	bne.n	8003926 <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 8003922:	2301      	movs	r3, #1
 8003924:	e174      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003926:	68fb      	ldr	r3, [r7, #12]
 8003928:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 800392c:	2b01      	cmp	r3, #1
 800392e:	d101      	bne.n	8003934 <HAL_SPI_TransmitReceive+0x6e>
 8003930:	2302      	movs	r3, #2
 8003932:	e16d      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
 8003934:	68fb      	ldr	r3, [r7, #12]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800393c:	68fb      	ldr	r3, [r7, #12]
 800393e:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003942:	b2db      	uxtb	r3, r3
 8003944:	2b04      	cmp	r3, #4
 8003946:	d003      	beq.n	8003950 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003948:	68fb      	ldr	r3, [r7, #12]
 800394a:	2205      	movs	r2, #5
 800394c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	2200      	movs	r2, #0
 8003954:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	687a      	ldr	r2, [r7, #4]
 800395a:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	887a      	ldrh	r2, [r7, #2]
 8003960:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8003962:	68fb      	ldr	r3, [r7, #12]
 8003964:	887a      	ldrh	r2, [r7, #2]
 8003966:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	68ba      	ldr	r2, [r7, #8]
 800396c:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 800396e:	68fb      	ldr	r3, [r7, #12]
 8003970:	887a      	ldrh	r2, [r7, #2]
 8003972:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	887a      	ldrh	r2, [r7, #2]
 8003978:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800397a:	68fb      	ldr	r3, [r7, #12]
 800397c:	2200      	movs	r2, #0
 800397e:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	2200      	movs	r2, #0
 8003984:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003986:	68fb      	ldr	r3, [r7, #12]
 8003988:	681b      	ldr	r3, [r3, #0]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003990:	2b40      	cmp	r3, #64	@ 0x40
 8003992:	d007      	beq.n	80039a4 <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	681a      	ldr	r2, [r3, #0]
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80039a2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80039a4:	68fb      	ldr	r3, [r7, #12]
 80039a6:	68db      	ldr	r3, [r3, #12]
 80039a8:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 80039ac:	d17e      	bne.n	8003aac <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80039ae:	68fb      	ldr	r3, [r7, #12]
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d002      	beq.n	80039bc <HAL_SPI_TransmitReceive+0xf6>
 80039b6:	8afb      	ldrh	r3, [r7, #22]
 80039b8:	2b01      	cmp	r3, #1
 80039ba:	d16c      	bne.n	8003a96 <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039c0:	881a      	ldrh	r2, [r3, #0]
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	681b      	ldr	r3, [r3, #0]
 80039c6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80039cc:	1c9a      	adds	r2, r3, #2
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80039e0:	e059      	b.n	8003a96 <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80039e2:	68fb      	ldr	r3, [r7, #12]
 80039e4:	681b      	ldr	r3, [r3, #0]
 80039e6:	689b      	ldr	r3, [r3, #8]
 80039e8:	f003 0302 	and.w	r3, r3, #2
 80039ec:	2b02      	cmp	r3, #2
 80039ee:	d11b      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x162>
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80039f4:	b29b      	uxth	r3, r3
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d016      	beq.n	8003a28 <HAL_SPI_TransmitReceive+0x162>
 80039fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80039fc:	2b01      	cmp	r3, #1
 80039fe:	d113      	bne.n	8003a28 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a04:	881a      	ldrh	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003a10:	1c9a      	adds	r2, r3, #2
 8003a12:	68fb      	ldr	r3, [r7, #12]
 8003a14:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003a16:	68fb      	ldr	r3, [r7, #12]
 8003a18:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a1a:	b29b      	uxth	r3, r3
 8003a1c:	3b01      	subs	r3, #1
 8003a1e:	b29a      	uxth	r2, r3
 8003a20:	68fb      	ldr	r3, [r7, #12]
 8003a22:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003a24:	2300      	movs	r3, #0
 8003a26:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	681b      	ldr	r3, [r3, #0]
 8003a2c:	689b      	ldr	r3, [r3, #8]
 8003a2e:	f003 0301 	and.w	r3, r3, #1
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d119      	bne.n	8003a6a <HAL_SPI_TransmitReceive+0x1a4>
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a3a:	b29b      	uxth	r3, r3
 8003a3c:	2b00      	cmp	r3, #0
 8003a3e:	d014      	beq.n	8003a6a <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003a40:	68fb      	ldr	r3, [r7, #12]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	68da      	ldr	r2, [r3, #12]
 8003a46:	68fb      	ldr	r3, [r7, #12]
 8003a48:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a4a:	b292      	uxth	r2, r2
 8003a4c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003a52:	1c9a      	adds	r2, r3, #2
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003a5c:	b29b      	uxth	r3, r3
 8003a5e:	3b01      	subs	r3, #1
 8003a60:	b29a      	uxth	r2, r3
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003a66:	2301      	movs	r3, #1
 8003a68:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003a6a:	f7fe feed 	bl	8002848 <HAL_GetTick>
 8003a6e:	4602      	mov	r2, r0
 8003a70:	6a3b      	ldr	r3, [r7, #32]
 8003a72:	1ad3      	subs	r3, r2, r3
 8003a74:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003a76:	429a      	cmp	r2, r3
 8003a78:	d80d      	bhi.n	8003a96 <HAL_SPI_TransmitReceive+0x1d0>
 8003a7a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003a80:	d009      	beq.n	8003a96 <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	2201      	movs	r2, #1
 8003a86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	2200      	movs	r2, #0
 8003a8e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003a92:	2303      	movs	r3, #3
 8003a94:	e0bc      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003a96:	68fb      	ldr	r3, [r7, #12]
 8003a98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003a9a:	b29b      	uxth	r3, r3
 8003a9c:	2b00      	cmp	r3, #0
 8003a9e:	d1a0      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x11c>
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003aa4:	b29b      	uxth	r3, r3
 8003aa6:	2b00      	cmp	r3, #0
 8003aa8:	d19b      	bne.n	80039e2 <HAL_SPI_TransmitReceive+0x11c>
 8003aaa:	e082      	b.n	8003bb2 <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003aac:	68fb      	ldr	r3, [r7, #12]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	2b00      	cmp	r3, #0
 8003ab2:	d002      	beq.n	8003aba <HAL_SPI_TransmitReceive+0x1f4>
 8003ab4:	8afb      	ldrh	r3, [r7, #22]
 8003ab6:	2b01      	cmp	r3, #1
 8003ab8:	d171      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	330c      	adds	r3, #12
 8003ac4:	7812      	ldrb	r2, [r2, #0]
 8003ac6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003acc:	1c5a      	adds	r2, r3, #1
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ad6:	b29b      	uxth	r3, r3
 8003ad8:	3b01      	subs	r3, #1
 8003ada:	b29a      	uxth	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003ae0:	e05d      	b.n	8003b9e <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8003ae2:	68fb      	ldr	r3, [r7, #12]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689b      	ldr	r3, [r3, #8]
 8003ae8:	f003 0302 	and.w	r3, r3, #2
 8003aec:	2b02      	cmp	r3, #2
 8003aee:	d11c      	bne.n	8003b2a <HAL_SPI_TransmitReceive+0x264>
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003af4:	b29b      	uxth	r3, r3
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d017      	beq.n	8003b2a <HAL_SPI_TransmitReceive+0x264>
 8003afa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003afc:	2b01      	cmp	r3, #1
 8003afe:	d114      	bne.n	8003b2a <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003b04:	68fb      	ldr	r3, [r7, #12]
 8003b06:	681b      	ldr	r3, [r3, #0]
 8003b08:	330c      	adds	r3, #12
 8003b0a:	7812      	ldrb	r2, [r2, #0]
 8003b0c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003b12:	1c5a      	adds	r2, r3, #1
 8003b14:	68fb      	ldr	r3, [r7, #12]
 8003b16:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003b1c:	b29b      	uxth	r3, r3
 8003b1e:	3b01      	subs	r3, #1
 8003b20:	b29a      	uxth	r2, r3
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8003b26:	2300      	movs	r3, #0
 8003b28:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	681b      	ldr	r3, [r3, #0]
 8003b2e:	689b      	ldr	r3, [r3, #8]
 8003b30:	f003 0301 	and.w	r3, r3, #1
 8003b34:	2b01      	cmp	r3, #1
 8003b36:	d119      	bne.n	8003b6c <HAL_SPI_TransmitReceive+0x2a6>
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b3c:	b29b      	uxth	r3, r3
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d014      	beq.n	8003b6c <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	681b      	ldr	r3, [r3, #0]
 8003b46:	68da      	ldr	r2, [r3, #12]
 8003b48:	68fb      	ldr	r3, [r7, #12]
 8003b4a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b4c:	b2d2      	uxtb	r2, r2
 8003b4e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003b54:	1c5a      	adds	r2, r3, #1
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003b5a:	68fb      	ldr	r3, [r7, #12]
 8003b5c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003b5e:	b29b      	uxth	r3, r3
 8003b60:	3b01      	subs	r3, #1
 8003b62:	b29a      	uxth	r2, r3
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003b6c:	f7fe fe6c 	bl	8002848 <HAL_GetTick>
 8003b70:	4602      	mov	r2, r0
 8003b72:	6a3b      	ldr	r3, [r7, #32]
 8003b74:	1ad3      	subs	r3, r2, r3
 8003b76:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003b78:	429a      	cmp	r2, r3
 8003b7a:	d803      	bhi.n	8003b84 <HAL_SPI_TransmitReceive+0x2be>
 8003b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b7e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003b82:	d102      	bne.n	8003b8a <HAL_SPI_TransmitReceive+0x2c4>
 8003b84:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d109      	bne.n	8003b9e <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	2201      	movs	r2, #1
 8003b8e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	2200      	movs	r2, #0
 8003b96:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e038      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003ba2:	b29b      	uxth	r3, r3
 8003ba4:	2b00      	cmp	r3, #0
 8003ba6:	d19c      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x21c>
 8003ba8:	68fb      	ldr	r3, [r7, #12]
 8003baa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d197      	bne.n	8003ae2 <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003bb2:	6a3a      	ldr	r2, [r7, #32]
 8003bb4:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003bb6:	68f8      	ldr	r0, [r7, #12]
 8003bb8:	f000 f8c2 	bl	8003d40 <SPI_EndRxTxTransaction>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	2b00      	cmp	r3, #0
 8003bc0:	d008      	beq.n	8003bd4 <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	2220      	movs	r2, #32
 8003bc6:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	2200      	movs	r2, #0
 8003bcc:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003bd0:	2301      	movs	r3, #1
 8003bd2:	e01d      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	689b      	ldr	r3, [r3, #8]
 8003bd8:	2b00      	cmp	r3, #0
 8003bda:	d10a      	bne.n	8003bf2 <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003bdc:	2300      	movs	r3, #0
 8003bde:	613b      	str	r3, [r7, #16]
 8003be0:	68fb      	ldr	r3, [r7, #12]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	68db      	ldr	r3, [r3, #12]
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	681b      	ldr	r3, [r3, #0]
 8003bec:	689b      	ldr	r3, [r3, #8]
 8003bee:	613b      	str	r3, [r7, #16]
 8003bf0:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	2201      	movs	r2, #1
 8003bf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d001      	beq.n	8003c0e <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e000      	b.n	8003c10 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 8003c0e:	2300      	movs	r3, #0
  }
}
 8003c10:	4618      	mov	r0, r3
 8003c12:	3728      	adds	r7, #40	@ 0x28
 8003c14:	46bd      	mov	sp, r7
 8003c16:	bd80      	pop	{r7, pc}

08003c18 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b083      	sub	sp, #12
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 8003c24:	4618      	mov	r0, r3
 8003c26:	370c      	adds	r7, #12
 8003c28:	46bd      	mov	sp, r7
 8003c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c2e:	4770      	bx	lr

08003c30 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8003c30:	b580      	push	{r7, lr}
 8003c32:	b088      	sub	sp, #32
 8003c34:	af00      	add	r7, sp, #0
 8003c36:	60f8      	str	r0, [r7, #12]
 8003c38:	60b9      	str	r1, [r7, #8]
 8003c3a:	603b      	str	r3, [r7, #0]
 8003c3c:	4613      	mov	r3, r2
 8003c3e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003c40:	f7fe fe02 	bl	8002848 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003c48:	1a9b      	subs	r3, r3, r2
 8003c4a:	683a      	ldr	r2, [r7, #0]
 8003c4c:	4413      	add	r3, r2
 8003c4e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003c50:	f7fe fdfa 	bl	8002848 <HAL_GetTick>
 8003c54:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8003c56:	4b39      	ldr	r3, [pc, #228]	@ (8003d3c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	015b      	lsls	r3, r3, #5
 8003c5c:	0d1b      	lsrs	r3, r3, #20
 8003c5e:	69fa      	ldr	r2, [r7, #28]
 8003c60:	fb02 f303 	mul.w	r3, r2, r3
 8003c64:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003c66:	e055      	b.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003c68:	683b      	ldr	r3, [r7, #0]
 8003c6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c6e:	d051      	beq.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003c70:	f7fe fdea 	bl	8002848 <HAL_GetTick>
 8003c74:	4602      	mov	r2, r0
 8003c76:	69bb      	ldr	r3, [r7, #24]
 8003c78:	1ad3      	subs	r3, r2, r3
 8003c7a:	69fa      	ldr	r2, [r7, #28]
 8003c7c:	429a      	cmp	r2, r3
 8003c7e:	d902      	bls.n	8003c86 <SPI_WaitFlagStateUntilTimeout+0x56>
 8003c80:	69fb      	ldr	r3, [r7, #28]
 8003c82:	2b00      	cmp	r3, #0
 8003c84:	d13d      	bne.n	8003d02 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	681b      	ldr	r3, [r3, #0]
 8003c8a:	685a      	ldr	r2, [r3, #4]
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8003c94:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	685b      	ldr	r3, [r3, #4]
 8003c9a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003c9e:	d111      	bne.n	8003cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	689b      	ldr	r3, [r3, #8]
 8003ca4:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003ca8:	d004      	beq.n	8003cb4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	689b      	ldr	r3, [r3, #8]
 8003cae:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003cb2:	d107      	bne.n	8003cc4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	681a      	ldr	r2, [r3, #0]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003cc2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8003cc4:	68fb      	ldr	r3, [r7, #12]
 8003cc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003cc8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ccc:	d10f      	bne.n	8003cee <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	681a      	ldr	r2, [r3, #0]
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003cdc:	601a      	str	r2, [r3, #0]
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	681b      	ldr	r3, [r3, #0]
 8003ce2:	681a      	ldr	r2, [r3, #0]
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	681b      	ldr	r3, [r3, #0]
 8003ce8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003cec:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003cee:	68fb      	ldr	r3, [r7, #12]
 8003cf0:	2201      	movs	r2, #1
 8003cf2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 8003cfe:	2303      	movs	r3, #3
 8003d00:	e018      	b.n	8003d34 <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8003d02:	697b      	ldr	r3, [r7, #20]
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d102      	bne.n	8003d0e <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 8003d08:	2300      	movs	r3, #0
 8003d0a:	61fb      	str	r3, [r7, #28]
 8003d0c:	e002      	b.n	8003d14 <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 8003d0e:	697b      	ldr	r3, [r7, #20]
 8003d10:	3b01      	subs	r3, #1
 8003d12:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	689a      	ldr	r2, [r3, #8]
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	4013      	ands	r3, r2
 8003d1e:	68ba      	ldr	r2, [r7, #8]
 8003d20:	429a      	cmp	r2, r3
 8003d22:	bf0c      	ite	eq
 8003d24:	2301      	moveq	r3, #1
 8003d26:	2300      	movne	r3, #0
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	461a      	mov	r2, r3
 8003d2c:	79fb      	ldrb	r3, [r7, #7]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d19a      	bne.n	8003c68 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 8003d32:	2300      	movs	r3, #0
}
 8003d34:	4618      	mov	r0, r3
 8003d36:	3720      	adds	r7, #32
 8003d38:	46bd      	mov	sp, r7
 8003d3a:	bd80      	pop	{r7, pc}
 8003d3c:	20000000 	.word	0x20000000

08003d40 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003d40:	b580      	push	{r7, lr}
 8003d42:	b088      	sub	sp, #32
 8003d44:	af02      	add	r7, sp, #8
 8003d46:	60f8      	str	r0, [r7, #12]
 8003d48:	60b9      	str	r1, [r7, #8]
 8003d4a:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	9300      	str	r3, [sp, #0]
 8003d50:	68bb      	ldr	r3, [r7, #8]
 8003d52:	2201      	movs	r2, #1
 8003d54:	2102      	movs	r1, #2
 8003d56:	68f8      	ldr	r0, [r7, #12]
 8003d58:	f7ff ff6a 	bl	8003c30 <SPI_WaitFlagStateUntilTimeout>
 8003d5c:	4603      	mov	r3, r0
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d007      	beq.n	8003d72 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003d62:	68fb      	ldr	r3, [r7, #12]
 8003d64:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003d66:	f043 0220 	orr.w	r2, r3, #32
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003d6e:	2303      	movs	r3, #3
 8003d70:	e032      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003d72:	4b1b      	ldr	r3, [pc, #108]	@ (8003de0 <SPI_EndRxTxTransaction+0xa0>)
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	4a1b      	ldr	r2, [pc, #108]	@ (8003de4 <SPI_EndRxTxTransaction+0xa4>)
 8003d78:	fba2 2303 	umull	r2, r3, r2, r3
 8003d7c:	0d5b      	lsrs	r3, r3, #21
 8003d7e:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003d82:	fb02 f303 	mul.w	r3, r2, r3
 8003d86:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003d88:	68fb      	ldr	r3, [r7, #12]
 8003d8a:	685b      	ldr	r3, [r3, #4]
 8003d8c:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003d90:	d112      	bne.n	8003db8 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003d92:	687b      	ldr	r3, [r7, #4]
 8003d94:	9300      	str	r3, [sp, #0]
 8003d96:	68bb      	ldr	r3, [r7, #8]
 8003d98:	2200      	movs	r2, #0
 8003d9a:	2180      	movs	r1, #128	@ 0x80
 8003d9c:	68f8      	ldr	r0, [r7, #12]
 8003d9e:	f7ff ff47 	bl	8003c30 <SPI_WaitFlagStateUntilTimeout>
 8003da2:	4603      	mov	r3, r0
 8003da4:	2b00      	cmp	r3, #0
 8003da6:	d016      	beq.n	8003dd6 <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003da8:	68fb      	ldr	r3, [r7, #12]
 8003daa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003dac:	f043 0220 	orr.w	r2, r3, #32
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003db4:	2303      	movs	r3, #3
 8003db6:	e00f      	b.n	8003dd8 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003db8:	697b      	ldr	r3, [r7, #20]
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d00a      	beq.n	8003dd4 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003dbe:	697b      	ldr	r3, [r7, #20]
 8003dc0:	3b01      	subs	r3, #1
 8003dc2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003dc4:	68fb      	ldr	r3, [r7, #12]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dce:	2b80      	cmp	r3, #128	@ 0x80
 8003dd0:	d0f2      	beq.n	8003db8 <SPI_EndRxTxTransaction+0x78>
 8003dd2:	e000      	b.n	8003dd6 <SPI_EndRxTxTransaction+0x96>
        break;
 8003dd4:	bf00      	nop
  }

  return HAL_OK;
 8003dd6:	2300      	movs	r3, #0
}
 8003dd8:	4618      	mov	r0, r3
 8003dda:	3718      	adds	r7, #24
 8003ddc:	46bd      	mov	sp, r7
 8003dde:	bd80      	pop	{r7, pc}
 8003de0:	20000000 	.word	0x20000000
 8003de4:	165e9f81 	.word	0x165e9f81

08003de8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b082      	sub	sp, #8
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d101      	bne.n	8003dfa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e041      	b.n	8003e7e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b00      	cmp	r3, #0
 8003e04:	d106      	bne.n	8003e14 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	2200      	movs	r2, #0
 8003e0a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003e0e:	6878      	ldr	r0, [r7, #4]
 8003e10:	f000 f839 	bl	8003e86 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2202      	movs	r2, #2
 8003e18:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	681a      	ldr	r2, [r3, #0]
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	3304      	adds	r3, #4
 8003e24:	4619      	mov	r1, r3
 8003e26:	4610      	mov	r0, r2
 8003e28:	f000 f9c0 	bl	80041ac <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	2201      	movs	r2, #1
 8003e50:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2201      	movs	r2, #1
 8003e58:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2201      	movs	r2, #1
 8003e60:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	2201      	movs	r2, #1
 8003e68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	2201      	movs	r2, #1
 8003e70:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2201      	movs	r2, #1
 8003e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003e7c:	2300      	movs	r3, #0
}
 8003e7e:	4618      	mov	r0, r3
 8003e80:	3708      	adds	r7, #8
 8003e82:	46bd      	mov	sp, r7
 8003e84:	bd80      	pop	{r7, pc}

08003e86 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003e8e:	bf00      	nop
 8003e90:	370c      	adds	r7, #12
 8003e92:	46bd      	mov	sp, r7
 8003e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e98:	4770      	bx	lr
	...

08003e9c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003eaa:	b2db      	uxtb	r3, r3
 8003eac:	2b01      	cmp	r3, #1
 8003eae:	d001      	beq.n	8003eb4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003eb0:	2301      	movs	r3, #1
 8003eb2:	e04e      	b.n	8003f52 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	2202      	movs	r2, #2
 8003eb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003ebc:	687b      	ldr	r3, [r7, #4]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	68da      	ldr	r2, [r3, #12]
 8003ec2:	687b      	ldr	r3, [r7, #4]
 8003ec4:	681b      	ldr	r3, [r3, #0]
 8003ec6:	f042 0201 	orr.w	r2, r2, #1
 8003eca:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	4a23      	ldr	r2, [pc, #140]	@ (8003f60 <HAL_TIM_Base_Start_IT+0xc4>)
 8003ed2:	4293      	cmp	r3, r2
 8003ed4:	d022      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ede:	d01d      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	4a1f      	ldr	r2, [pc, #124]	@ (8003f64 <HAL_TIM_Base_Start_IT+0xc8>)
 8003ee6:	4293      	cmp	r3, r2
 8003ee8:	d018      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003eea:	687b      	ldr	r3, [r7, #4]
 8003eec:	681b      	ldr	r3, [r3, #0]
 8003eee:	4a1e      	ldr	r2, [pc, #120]	@ (8003f68 <HAL_TIM_Base_Start_IT+0xcc>)
 8003ef0:	4293      	cmp	r3, r2
 8003ef2:	d013      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	4a1c      	ldr	r2, [pc, #112]	@ (8003f6c <HAL_TIM_Base_Start_IT+0xd0>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d00e      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	4a1b      	ldr	r2, [pc, #108]	@ (8003f70 <HAL_TIM_Base_Start_IT+0xd4>)
 8003f04:	4293      	cmp	r3, r2
 8003f06:	d009      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	4a19      	ldr	r2, [pc, #100]	@ (8003f74 <HAL_TIM_Base_Start_IT+0xd8>)
 8003f0e:	4293      	cmp	r3, r2
 8003f10:	d004      	beq.n	8003f1c <HAL_TIM_Base_Start_IT+0x80>
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4a18      	ldr	r2, [pc, #96]	@ (8003f78 <HAL_TIM_Base_Start_IT+0xdc>)
 8003f18:	4293      	cmp	r3, r2
 8003f1a:	d111      	bne.n	8003f40 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0307 	and.w	r3, r3, #7
 8003f26:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b06      	cmp	r3, #6
 8003f2c:	d010      	beq.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f042 0201 	orr.w	r2, r2, #1
 8003f3c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f3e:	e007      	b.n	8003f50 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	681a      	ldr	r2, [r3, #0]
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f042 0201 	orr.w	r2, r2, #1
 8003f4e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f50:	2300      	movs	r3, #0
}
 8003f52:	4618      	mov	r0, r3
 8003f54:	3714      	adds	r7, #20
 8003f56:	46bd      	mov	sp, r7
 8003f58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f5c:	4770      	bx	lr
 8003f5e:	bf00      	nop
 8003f60:	40010000 	.word	0x40010000
 8003f64:	40000400 	.word	0x40000400
 8003f68:	40000800 	.word	0x40000800
 8003f6c:	40000c00 	.word	0x40000c00
 8003f70:	40010400 	.word	0x40010400
 8003f74:	40014000 	.word	0x40014000
 8003f78:	40001800 	.word	0x40001800

08003f7c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f7c:	b580      	push	{r7, lr}
 8003f7e:	b084      	sub	sp, #16
 8003f80:	af00      	add	r7, sp, #0
 8003f82:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	681b      	ldr	r3, [r3, #0]
 8003f88:	68db      	ldr	r3, [r3, #12]
 8003f8a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	691b      	ldr	r3, [r3, #16]
 8003f92:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003f94:	68bb      	ldr	r3, [r7, #8]
 8003f96:	f003 0302 	and.w	r3, r3, #2
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d020      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	f003 0302 	and.w	r3, r3, #2
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d01b      	beq.n	8003fe0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f06f 0202 	mvn.w	r2, #2
 8003fb0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	2201      	movs	r2, #1
 8003fb6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	699b      	ldr	r3, [r3, #24]
 8003fbe:	f003 0303 	and.w	r3, r3, #3
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d003      	beq.n	8003fce <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003fc6:	6878      	ldr	r0, [r7, #4]
 8003fc8:	f000 f8d2 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8003fcc:	e005      	b.n	8003fda <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fce:	6878      	ldr	r0, [r7, #4]
 8003fd0:	f000 f8c4 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f8d5 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003fe0:	68bb      	ldr	r3, [r7, #8]
 8003fe2:	f003 0304 	and.w	r3, r3, #4
 8003fe6:	2b00      	cmp	r3, #0
 8003fe8:	d020      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	f003 0304 	and.w	r3, r3, #4
 8003ff0:	2b00      	cmp	r3, #0
 8003ff2:	d01b      	beq.n	800402c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	681b      	ldr	r3, [r3, #0]
 8003ff8:	f06f 0204 	mvn.w	r2, #4
 8003ffc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	2202      	movs	r2, #2
 8004002:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	699b      	ldr	r3, [r3, #24]
 800400a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800400e:	2b00      	cmp	r3, #0
 8004010:	d003      	beq.n	800401a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f8ac 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8004018:	e005      	b.n	8004026 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401a:	6878      	ldr	r0, [r7, #4]
 800401c:	f000 f89e 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004020:	6878      	ldr	r0, [r7, #4]
 8004022:	f000 f8af 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	2200      	movs	r2, #0
 800402a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800402c:	68bb      	ldr	r3, [r7, #8]
 800402e:	f003 0308 	and.w	r3, r3, #8
 8004032:	2b00      	cmp	r3, #0
 8004034:	d020      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	f003 0308 	and.w	r3, r3, #8
 800403c:	2b00      	cmp	r3, #0
 800403e:	d01b      	beq.n	8004078 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0208 	mvn.w	r2, #8
 8004048:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	2204      	movs	r2, #4
 800404e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f003 0303 	and.w	r3, r3, #3
 800405a:	2b00      	cmp	r3, #0
 800405c:	d003      	beq.n	8004066 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800405e:	6878      	ldr	r0, [r7, #4]
 8004060:	f000 f886 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 8004064:	e005      	b.n	8004072 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 f878 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800406c:	6878      	ldr	r0, [r7, #4]
 800406e:	f000 f889 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	2200      	movs	r2, #0
 8004076:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8004078:	68bb      	ldr	r3, [r7, #8]
 800407a:	f003 0310 	and.w	r3, r3, #16
 800407e:	2b00      	cmp	r3, #0
 8004080:	d020      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	f003 0310 	and.w	r3, r3, #16
 8004088:	2b00      	cmp	r3, #0
 800408a:	d01b      	beq.n	80040c4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	f06f 0210 	mvn.w	r2, #16
 8004094:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	2208      	movs	r2, #8
 800409a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	69db      	ldr	r3, [r3, #28]
 80040a2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80040a6:	2b00      	cmp	r3, #0
 80040a8:	d003      	beq.n	80040b2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f860 	bl	8004170 <HAL_TIM_IC_CaptureCallback>
 80040b0:	e005      	b.n	80040be <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80040b2:	6878      	ldr	r0, [r7, #4]
 80040b4:	f000 f852 	bl	800415c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80040b8:	6878      	ldr	r0, [r7, #4]
 80040ba:	f000 f863 	bl	8004184 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	2200      	movs	r2, #0
 80040c2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80040c4:	68bb      	ldr	r3, [r7, #8]
 80040c6:	f003 0301 	and.w	r3, r3, #1
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d00c      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	f003 0301 	and.w	r3, r3, #1
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d007      	beq.n	80040e8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	f06f 0201 	mvn.w	r2, #1
 80040e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040e2:	6878      	ldr	r0, [r7, #4]
 80040e4:	f7fc fff8 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80040e8:	68bb      	ldr	r3, [r7, #8]
 80040ea:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ee:	2b00      	cmp	r3, #0
 80040f0:	d00c      	beq.n	800410c <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80040f2:	68fb      	ldr	r3, [r7, #12]
 80040f4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d007      	beq.n	800410c <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004104:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004106:	6878      	ldr	r0, [r7, #4]
 8004108:	f000 f900 	bl	800430c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800410c:	68bb      	ldr	r3, [r7, #8]
 800410e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004112:	2b00      	cmp	r3, #0
 8004114:	d00c      	beq.n	8004130 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800411c:	2b00      	cmp	r3, #0
 800411e:	d007      	beq.n	8004130 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004128:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800412a:	6878      	ldr	r0, [r7, #4]
 800412c:	f000 f834 	bl	8004198 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8004130:	68bb      	ldr	r3, [r7, #8]
 8004132:	f003 0320 	and.w	r3, r3, #32
 8004136:	2b00      	cmp	r3, #0
 8004138:	d00c      	beq.n	8004154 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	f003 0320 	and.w	r3, r3, #32
 8004140:	2b00      	cmp	r3, #0
 8004142:	d007      	beq.n	8004154 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004144:	687b      	ldr	r3, [r7, #4]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	f06f 0220 	mvn.w	r2, #32
 800414c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800414e:	6878      	ldr	r0, [r7, #4]
 8004150:	f000 f8d2 	bl	80042f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004154:	bf00      	nop
 8004156:	3710      	adds	r7, #16
 8004158:	46bd      	mov	sp, r7
 800415a:	bd80      	pop	{r7, pc}

0800415c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800415c:	b480      	push	{r7}
 800415e:	b083      	sub	sp, #12
 8004160:	af00      	add	r7, sp, #0
 8004162:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004164:	bf00      	nop
 8004166:	370c      	adds	r7, #12
 8004168:	46bd      	mov	sp, r7
 800416a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800416e:	4770      	bx	lr

08004170 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004170:	b480      	push	{r7}
 8004172:	b083      	sub	sp, #12
 8004174:	af00      	add	r7, sp, #0
 8004176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004178:	bf00      	nop
 800417a:	370c      	adds	r7, #12
 800417c:	46bd      	mov	sp, r7
 800417e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004182:	4770      	bx	lr

08004184 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004184:	b480      	push	{r7}
 8004186:	b083      	sub	sp, #12
 8004188:	af00      	add	r7, sp, #0
 800418a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800418c:	bf00      	nop
 800418e:	370c      	adds	r7, #12
 8004190:	46bd      	mov	sp, r7
 8004192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004196:	4770      	bx	lr

08004198 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004198:	b480      	push	{r7}
 800419a:	b083      	sub	sp, #12
 800419c:	af00      	add	r7, sp, #0
 800419e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041a0:	bf00      	nop
 80041a2:	370c      	adds	r7, #12
 80041a4:	46bd      	mov	sp, r7
 80041a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041aa:	4770      	bx	lr

080041ac <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b085      	sub	sp, #20
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	4a43      	ldr	r2, [pc, #268]	@ (80042cc <TIM_Base_SetConfig+0x120>)
 80041c0:	4293      	cmp	r3, r2
 80041c2:	d013      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041ca:	d00f      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	4a40      	ldr	r2, [pc, #256]	@ (80042d0 <TIM_Base_SetConfig+0x124>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d00b      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	4a3f      	ldr	r2, [pc, #252]	@ (80042d4 <TIM_Base_SetConfig+0x128>)
 80041d8:	4293      	cmp	r3, r2
 80041da:	d007      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	4a3e      	ldr	r2, [pc, #248]	@ (80042d8 <TIM_Base_SetConfig+0x12c>)
 80041e0:	4293      	cmp	r3, r2
 80041e2:	d003      	beq.n	80041ec <TIM_Base_SetConfig+0x40>
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	4a3d      	ldr	r2, [pc, #244]	@ (80042dc <TIM_Base_SetConfig+0x130>)
 80041e8:	4293      	cmp	r3, r2
 80041ea:	d108      	bne.n	80041fe <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041f2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041f4:	683b      	ldr	r3, [r7, #0]
 80041f6:	685b      	ldr	r3, [r3, #4]
 80041f8:	68fa      	ldr	r2, [r7, #12]
 80041fa:	4313      	orrs	r3, r2
 80041fc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041fe:	687b      	ldr	r3, [r7, #4]
 8004200:	4a32      	ldr	r2, [pc, #200]	@ (80042cc <TIM_Base_SetConfig+0x120>)
 8004202:	4293      	cmp	r3, r2
 8004204:	d02b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420c:	d027      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	4a2f      	ldr	r2, [pc, #188]	@ (80042d0 <TIM_Base_SetConfig+0x124>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d023      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	4a2e      	ldr	r2, [pc, #184]	@ (80042d4 <TIM_Base_SetConfig+0x128>)
 800421a:	4293      	cmp	r3, r2
 800421c:	d01f      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	4a2d      	ldr	r2, [pc, #180]	@ (80042d8 <TIM_Base_SetConfig+0x12c>)
 8004222:	4293      	cmp	r3, r2
 8004224:	d01b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	4a2c      	ldr	r2, [pc, #176]	@ (80042dc <TIM_Base_SetConfig+0x130>)
 800422a:	4293      	cmp	r3, r2
 800422c:	d017      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	4a2b      	ldr	r2, [pc, #172]	@ (80042e0 <TIM_Base_SetConfig+0x134>)
 8004232:	4293      	cmp	r3, r2
 8004234:	d013      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a2a      	ldr	r2, [pc, #168]	@ (80042e4 <TIM_Base_SetConfig+0x138>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d00f      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	4a29      	ldr	r2, [pc, #164]	@ (80042e8 <TIM_Base_SetConfig+0x13c>)
 8004242:	4293      	cmp	r3, r2
 8004244:	d00b      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a28      	ldr	r2, [pc, #160]	@ (80042ec <TIM_Base_SetConfig+0x140>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d007      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a27      	ldr	r2, [pc, #156]	@ (80042f0 <TIM_Base_SetConfig+0x144>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d003      	beq.n	800425e <TIM_Base_SetConfig+0xb2>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a26      	ldr	r2, [pc, #152]	@ (80042f4 <TIM_Base_SetConfig+0x148>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d108      	bne.n	8004270 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004264:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004266:	683b      	ldr	r3, [r7, #0]
 8004268:	68db      	ldr	r3, [r3, #12]
 800426a:	68fa      	ldr	r2, [r7, #12]
 800426c:	4313      	orrs	r3, r2
 800426e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004276:	683b      	ldr	r3, [r7, #0]
 8004278:	695b      	ldr	r3, [r3, #20]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	689a      	ldr	r2, [r3, #8]
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	681a      	ldr	r2, [r3, #0]
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	4a0e      	ldr	r2, [pc, #56]	@ (80042cc <TIM_Base_SetConfig+0x120>)
 8004292:	4293      	cmp	r3, r2
 8004294:	d003      	beq.n	800429e <TIM_Base_SetConfig+0xf2>
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	4a10      	ldr	r2, [pc, #64]	@ (80042dc <TIM_Base_SetConfig+0x130>)
 800429a:	4293      	cmp	r3, r2
 800429c:	d103      	bne.n	80042a6 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800429e:	683b      	ldr	r3, [r7, #0]
 80042a0:	691a      	ldr	r2, [r3, #16]
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	681b      	ldr	r3, [r3, #0]
 80042aa:	f043 0204 	orr.w	r2, r3, #4
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	2201      	movs	r2, #1
 80042b6:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	68fa      	ldr	r2, [r7, #12]
 80042bc:	601a      	str	r2, [r3, #0]
}
 80042be:	bf00      	nop
 80042c0:	3714      	adds	r7, #20
 80042c2:	46bd      	mov	sp, r7
 80042c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c8:	4770      	bx	lr
 80042ca:	bf00      	nop
 80042cc:	40010000 	.word	0x40010000
 80042d0:	40000400 	.word	0x40000400
 80042d4:	40000800 	.word	0x40000800
 80042d8:	40000c00 	.word	0x40000c00
 80042dc:	40010400 	.word	0x40010400
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800
 80042ec:	40001800 	.word	0x40001800
 80042f0:	40001c00 	.word	0x40001c00
 80042f4:	40002000 	.word	0x40002000

080042f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b083      	sub	sp, #12
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004300:	bf00      	nop
 8004302:	370c      	adds	r7, #12
 8004304:	46bd      	mov	sp, r7
 8004306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800430a:	4770      	bx	lr

0800430c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800430c:	b480      	push	{r7}
 800430e:	b083      	sub	sp, #12
 8004310:	af00      	add	r7, sp, #0
 8004312:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004314:	bf00      	nop
 8004316:	370c      	adds	r7, #12
 8004318:	46bd      	mov	sp, r7
 800431a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800431e:	4770      	bx	lr

08004320 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004320:	b580      	push	{r7, lr}
 8004322:	b082      	sub	sp, #8
 8004324:	af00      	add	r7, sp, #0
 8004326:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004328:	687b      	ldr	r3, [r7, #4]
 800432a:	2b00      	cmp	r3, #0
 800432c:	d101      	bne.n	8004332 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800432e:	2301      	movs	r3, #1
 8004330:	e042      	b.n	80043b8 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004338:	b2db      	uxtb	r3, r3
 800433a:	2b00      	cmp	r3, #0
 800433c:	d106      	bne.n	800434c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	2200      	movs	r2, #0
 8004342:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f7fe f898 	bl	800247c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	2224      	movs	r2, #36	@ 0x24
 8004350:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	68da      	ldr	r2, [r3, #12]
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8004362:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f000 f973 	bl	8004650 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	691a      	ldr	r2, [r3, #16]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004378:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	695a      	ldr	r2, [r3, #20]
 8004380:	687b      	ldr	r3, [r7, #4]
 8004382:	681b      	ldr	r3, [r3, #0]
 8004384:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004388:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68da      	ldr	r2, [r3, #12]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004398:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	2200      	movs	r2, #0
 800439e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	2220      	movs	r2, #32
 80043a4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	2220      	movs	r2, #32
 80043ac:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	2200      	movs	r2, #0
 80043b4:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80043b6:	2300      	movs	r3, #0
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	3708      	adds	r7, #8
 80043bc:	46bd      	mov	sp, r7
 80043be:	bd80      	pop	{r7, pc}

080043c0 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b08a      	sub	sp, #40	@ 0x28
 80043c4:	af02      	add	r7, sp, #8
 80043c6:	60f8      	str	r0, [r7, #12]
 80043c8:	60b9      	str	r1, [r7, #8]
 80043ca:	603b      	str	r3, [r7, #0]
 80043cc:	4613      	mov	r3, r2
 80043ce:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80043d0:	2300      	movs	r3, #0
 80043d2:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80043da:	b2db      	uxtb	r3, r3
 80043dc:	2b20      	cmp	r3, #32
 80043de:	d175      	bne.n	80044cc <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80043e0:	68bb      	ldr	r3, [r7, #8]
 80043e2:	2b00      	cmp	r3, #0
 80043e4:	d002      	beq.n	80043ec <HAL_UART_Transmit+0x2c>
 80043e6:	88fb      	ldrh	r3, [r7, #6]
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	d101      	bne.n	80043f0 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80043ec:	2301      	movs	r3, #1
 80043ee:	e06e      	b.n	80044ce <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	2200      	movs	r2, #0
 80043f4:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	2221      	movs	r2, #33	@ 0x21
 80043fa:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80043fe:	f7fe fa23 	bl	8002848 <HAL_GetTick>
 8004402:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	88fa      	ldrh	r2, [r7, #6]
 8004408:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	88fa      	ldrh	r2, [r7, #6]
 800440e:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	689b      	ldr	r3, [r3, #8]
 8004414:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004418:	d108      	bne.n	800442c <HAL_UART_Transmit+0x6c>
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	691b      	ldr	r3, [r3, #16]
 800441e:	2b00      	cmp	r3, #0
 8004420:	d104      	bne.n	800442c <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004422:	2300      	movs	r3, #0
 8004424:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004426:	68bb      	ldr	r3, [r7, #8]
 8004428:	61bb      	str	r3, [r7, #24]
 800442a:	e003      	b.n	8004434 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800442c:	68bb      	ldr	r3, [r7, #8]
 800442e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004430:	2300      	movs	r3, #0
 8004432:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004434:	e02e      	b.n	8004494 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004436:	683b      	ldr	r3, [r7, #0]
 8004438:	9300      	str	r3, [sp, #0]
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	2200      	movs	r2, #0
 800443e:	2180      	movs	r1, #128	@ 0x80
 8004440:	68f8      	ldr	r0, [r7, #12]
 8004442:	f000 f848 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 8004446:	4603      	mov	r3, r0
 8004448:	2b00      	cmp	r3, #0
 800444a:	d005      	beq.n	8004458 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800444c:	68fb      	ldr	r3, [r7, #12]
 800444e:	2220      	movs	r2, #32
 8004450:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004454:	2303      	movs	r3, #3
 8004456:	e03a      	b.n	80044ce <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004458:	69fb      	ldr	r3, [r7, #28]
 800445a:	2b00      	cmp	r3, #0
 800445c:	d10b      	bne.n	8004476 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800445e:	69bb      	ldr	r3, [r7, #24]
 8004460:	881b      	ldrh	r3, [r3, #0]
 8004462:	461a      	mov	r2, r3
 8004464:	68fb      	ldr	r3, [r7, #12]
 8004466:	681b      	ldr	r3, [r3, #0]
 8004468:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800446c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800446e:	69bb      	ldr	r3, [r7, #24]
 8004470:	3302      	adds	r3, #2
 8004472:	61bb      	str	r3, [r7, #24]
 8004474:	e007      	b.n	8004486 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8004476:	69fb      	ldr	r3, [r7, #28]
 8004478:	781a      	ldrb	r2, [r3, #0]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004480:	69fb      	ldr	r3, [r7, #28]
 8004482:	3301      	adds	r3, #1
 8004484:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8004486:	68fb      	ldr	r3, [r7, #12]
 8004488:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800448a:	b29b      	uxth	r3, r3
 800448c:	3b01      	subs	r3, #1
 800448e:	b29a      	uxth	r2, r3
 8004490:	68fb      	ldr	r3, [r7, #12]
 8004492:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004498:	b29b      	uxth	r3, r3
 800449a:	2b00      	cmp	r3, #0
 800449c:	d1cb      	bne.n	8004436 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800449e:	683b      	ldr	r3, [r7, #0]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	697b      	ldr	r3, [r7, #20]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2140      	movs	r1, #64	@ 0x40
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f000 f814 	bl	80044d6 <UART_WaitOnFlagUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d005      	beq.n	80044c0 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	2220      	movs	r2, #32
 80044b8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80044bc:	2303      	movs	r3, #3
 80044be:	e006      	b.n	80044ce <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	2220      	movs	r2, #32
 80044c4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80044c8:	2300      	movs	r3, #0
 80044ca:	e000      	b.n	80044ce <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80044cc:	2302      	movs	r3, #2
  }
}
 80044ce:	4618      	mov	r0, r3
 80044d0:	3720      	adds	r7, #32
 80044d2:	46bd      	mov	sp, r7
 80044d4:	bd80      	pop	{r7, pc}

080044d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80044d6:	b580      	push	{r7, lr}
 80044d8:	b086      	sub	sp, #24
 80044da:	af00      	add	r7, sp, #0
 80044dc:	60f8      	str	r0, [r7, #12]
 80044de:	60b9      	str	r1, [r7, #8]
 80044e0:	603b      	str	r3, [r7, #0]
 80044e2:	4613      	mov	r3, r2
 80044e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80044e6:	e03b      	b.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80044e8:	6a3b      	ldr	r3, [r7, #32]
 80044ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044ee:	d037      	beq.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80044f0:	f7fe f9aa 	bl	8002848 <HAL_GetTick>
 80044f4:	4602      	mov	r2, r0
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	1ad3      	subs	r3, r2, r3
 80044fa:	6a3a      	ldr	r2, [r7, #32]
 80044fc:	429a      	cmp	r2, r3
 80044fe:	d302      	bcc.n	8004506 <UART_WaitOnFlagUntilTimeout+0x30>
 8004500:	6a3b      	ldr	r3, [r7, #32]
 8004502:	2b00      	cmp	r3, #0
 8004504:	d101      	bne.n	800450a <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004506:	2303      	movs	r3, #3
 8004508:	e03a      	b.n	8004580 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	681b      	ldr	r3, [r3, #0]
 800450e:	68db      	ldr	r3, [r3, #12]
 8004510:	f003 0304 	and.w	r3, r3, #4
 8004514:	2b00      	cmp	r3, #0
 8004516:	d023      	beq.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004518:	68bb      	ldr	r3, [r7, #8]
 800451a:	2b80      	cmp	r3, #128	@ 0x80
 800451c:	d020      	beq.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
 800451e:	68bb      	ldr	r3, [r7, #8]
 8004520:	2b40      	cmp	r3, #64	@ 0x40
 8004522:	d01d      	beq.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004524:	68fb      	ldr	r3, [r7, #12]
 8004526:	681b      	ldr	r3, [r3, #0]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	f003 0308 	and.w	r3, r3, #8
 800452e:	2b08      	cmp	r3, #8
 8004530:	d116      	bne.n	8004560 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004532:	2300      	movs	r3, #0
 8004534:	617b      	str	r3, [r7, #20]
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	617b      	str	r3, [r7, #20]
 800453e:	68fb      	ldr	r3, [r7, #12]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	685b      	ldr	r3, [r3, #4]
 8004544:	617b      	str	r3, [r7, #20]
 8004546:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004548:	68f8      	ldr	r0, [r7, #12]
 800454a:	f000 f81d 	bl	8004588 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800454e:	68fb      	ldr	r3, [r7, #12]
 8004550:	2208      	movs	r2, #8
 8004552:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004554:	68fb      	ldr	r3, [r7, #12]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800455c:	2301      	movs	r3, #1
 800455e:	e00f      	b.n	8004580 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	681b      	ldr	r3, [r3, #0]
 8004564:	681a      	ldr	r2, [r3, #0]
 8004566:	68bb      	ldr	r3, [r7, #8]
 8004568:	4013      	ands	r3, r2
 800456a:	68ba      	ldr	r2, [r7, #8]
 800456c:	429a      	cmp	r2, r3
 800456e:	bf0c      	ite	eq
 8004570:	2301      	moveq	r3, #1
 8004572:	2300      	movne	r3, #0
 8004574:	b2db      	uxtb	r3, r3
 8004576:	461a      	mov	r2, r3
 8004578:	79fb      	ldrb	r3, [r7, #7]
 800457a:	429a      	cmp	r2, r3
 800457c:	d0b4      	beq.n	80044e8 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800457e:	2300      	movs	r3, #0
}
 8004580:	4618      	mov	r0, r3
 8004582:	3718      	adds	r7, #24
 8004584:	46bd      	mov	sp, r7
 8004586:	bd80      	pop	{r7, pc}

08004588 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004588:	b480      	push	{r7}
 800458a:	b095      	sub	sp, #84	@ 0x54
 800458c:	af00      	add	r7, sp, #0
 800458e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004590:	687b      	ldr	r3, [r7, #4]
 8004592:	681b      	ldr	r3, [r3, #0]
 8004594:	330c      	adds	r3, #12
 8004596:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004598:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800459a:	e853 3f00 	ldrex	r3, [r3]
 800459e:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 80045a0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80045a2:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80045a6:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	330c      	adds	r3, #12
 80045ae:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80045b0:	643a      	str	r2, [r7, #64]	@ 0x40
 80045b2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045b4:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80045b6:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80045b8:	e841 2300 	strex	r3, r2, [r1]
 80045bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80045be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045c0:	2b00      	cmp	r3, #0
 80045c2:	d1e5      	bne.n	8004590 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80045c4:	687b      	ldr	r3, [r7, #4]
 80045c6:	681b      	ldr	r3, [r3, #0]
 80045c8:	3314      	adds	r3, #20
 80045ca:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80045cc:	6a3b      	ldr	r3, [r7, #32]
 80045ce:	e853 3f00 	ldrex	r3, [r3]
 80045d2:	61fb      	str	r3, [r7, #28]
   return(result);
 80045d4:	69fb      	ldr	r3, [r7, #28]
 80045d6:	f023 0301 	bic.w	r3, r3, #1
 80045da:	64bb      	str	r3, [r7, #72]	@ 0x48
 80045dc:	687b      	ldr	r3, [r7, #4]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	3314      	adds	r3, #20
 80045e2:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80045e4:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80045e6:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80045e8:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80045ea:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80045ec:	e841 2300 	strex	r3, r2, [r1]
 80045f0:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80045f2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045f4:	2b00      	cmp	r3, #0
 80045f6:	d1e5      	bne.n	80045c4 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80045fc:	2b01      	cmp	r3, #1
 80045fe:	d119      	bne.n	8004634 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	330c      	adds	r3, #12
 8004606:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	e853 3f00 	ldrex	r3, [r3]
 800460e:	60bb      	str	r3, [r7, #8]
   return(result);
 8004610:	68bb      	ldr	r3, [r7, #8]
 8004612:	f023 0310 	bic.w	r3, r3, #16
 8004616:	647b      	str	r3, [r7, #68]	@ 0x44
 8004618:	687b      	ldr	r3, [r7, #4]
 800461a:	681b      	ldr	r3, [r3, #0]
 800461c:	330c      	adds	r3, #12
 800461e:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004620:	61ba      	str	r2, [r7, #24]
 8004622:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004624:	6979      	ldr	r1, [r7, #20]
 8004626:	69ba      	ldr	r2, [r7, #24]
 8004628:	e841 2300 	strex	r3, r2, [r1]
 800462c:	613b      	str	r3, [r7, #16]
   return(result);
 800462e:	693b      	ldr	r3, [r7, #16]
 8004630:	2b00      	cmp	r3, #0
 8004632:	d1e5      	bne.n	8004600 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2220      	movs	r2, #32
 8004638:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004642:	bf00      	nop
 8004644:	3754      	adds	r7, #84	@ 0x54
 8004646:	46bd      	mov	sp, r7
 8004648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464c:	4770      	bx	lr
	...

08004650 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004650:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004654:	b0c0      	sub	sp, #256	@ 0x100
 8004656:	af00      	add	r7, sp, #0
 8004658:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800465c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691b      	ldr	r3, [r3, #16]
 8004664:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004668:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800466c:	68d9      	ldr	r1, [r3, #12]
 800466e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004672:	681a      	ldr	r2, [r3, #0]
 8004674:	ea40 0301 	orr.w	r3, r0, r1
 8004678:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800467a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800467e:	689a      	ldr	r2, [r3, #8]
 8004680:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004684:	691b      	ldr	r3, [r3, #16]
 8004686:	431a      	orrs	r2, r3
 8004688:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800468c:	695b      	ldr	r3, [r3, #20]
 800468e:	431a      	orrs	r2, r3
 8004690:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004694:	69db      	ldr	r3, [r3, #28]
 8004696:	4313      	orrs	r3, r2
 8004698:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800469c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046a0:	681b      	ldr	r3, [r3, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80046a8:	f021 010c 	bic.w	r1, r1, #12
 80046ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046b0:	681a      	ldr	r2, [r3, #0]
 80046b2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80046b6:	430b      	orrs	r3, r1
 80046b8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80046ba:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	695b      	ldr	r3, [r3, #20]
 80046c2:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80046c6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046ca:	6999      	ldr	r1, [r3, #24]
 80046cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046d0:	681a      	ldr	r2, [r3, #0]
 80046d2:	ea40 0301 	orr.w	r3, r0, r1
 80046d6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80046d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046dc:	681a      	ldr	r2, [r3, #0]
 80046de:	4b8f      	ldr	r3, [pc, #572]	@ (800491c <UART_SetConfig+0x2cc>)
 80046e0:	429a      	cmp	r2, r3
 80046e2:	d005      	beq.n	80046f0 <UART_SetConfig+0xa0>
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	681a      	ldr	r2, [r3, #0]
 80046ea:	4b8d      	ldr	r3, [pc, #564]	@ (8004920 <UART_SetConfig+0x2d0>)
 80046ec:	429a      	cmp	r2, r3
 80046ee:	d104      	bne.n	80046fa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80046f0:	f7ff f81a 	bl	8003728 <HAL_RCC_GetPCLK2Freq>
 80046f4:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80046f8:	e003      	b.n	8004702 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80046fa:	f7ff f801 	bl	8003700 <HAL_RCC_GetPCLK1Freq>
 80046fe:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004702:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004706:	69db      	ldr	r3, [r3, #28]
 8004708:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 800470c:	f040 810c 	bne.w	8004928 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004710:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004714:	2200      	movs	r2, #0
 8004716:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800471a:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800471e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8004722:	4622      	mov	r2, r4
 8004724:	462b      	mov	r3, r5
 8004726:	1891      	adds	r1, r2, r2
 8004728:	65b9      	str	r1, [r7, #88]	@ 0x58
 800472a:	415b      	adcs	r3, r3
 800472c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800472e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8004732:	4621      	mov	r1, r4
 8004734:	eb12 0801 	adds.w	r8, r2, r1
 8004738:	4629      	mov	r1, r5
 800473a:	eb43 0901 	adc.w	r9, r3, r1
 800473e:	f04f 0200 	mov.w	r2, #0
 8004742:	f04f 0300 	mov.w	r3, #0
 8004746:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800474a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800474e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8004752:	4690      	mov	r8, r2
 8004754:	4699      	mov	r9, r3
 8004756:	4623      	mov	r3, r4
 8004758:	eb18 0303 	adds.w	r3, r8, r3
 800475c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004760:	462b      	mov	r3, r5
 8004762:	eb49 0303 	adc.w	r3, r9, r3
 8004766:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 800476a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800476e:	685b      	ldr	r3, [r3, #4]
 8004770:	2200      	movs	r2, #0
 8004772:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8004776:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 800477a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800477e:	460b      	mov	r3, r1
 8004780:	18db      	adds	r3, r3, r3
 8004782:	653b      	str	r3, [r7, #80]	@ 0x50
 8004784:	4613      	mov	r3, r2
 8004786:	eb42 0303 	adc.w	r3, r2, r3
 800478a:	657b      	str	r3, [r7, #84]	@ 0x54
 800478c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004790:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8004794:	f7fb fd6c 	bl	8000270 <__aeabi_uldivmod>
 8004798:	4602      	mov	r2, r0
 800479a:	460b      	mov	r3, r1
 800479c:	4b61      	ldr	r3, [pc, #388]	@ (8004924 <UART_SetConfig+0x2d4>)
 800479e:	fba3 2302 	umull	r2, r3, r3, r2
 80047a2:	095b      	lsrs	r3, r3, #5
 80047a4:	011c      	lsls	r4, r3, #4
 80047a6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80047aa:	2200      	movs	r2, #0
 80047ac:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80047b0:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80047b4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80047b8:	4642      	mov	r2, r8
 80047ba:	464b      	mov	r3, r9
 80047bc:	1891      	adds	r1, r2, r2
 80047be:	64b9      	str	r1, [r7, #72]	@ 0x48
 80047c0:	415b      	adcs	r3, r3
 80047c2:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80047c4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80047c8:	4641      	mov	r1, r8
 80047ca:	eb12 0a01 	adds.w	sl, r2, r1
 80047ce:	4649      	mov	r1, r9
 80047d0:	eb43 0b01 	adc.w	fp, r3, r1
 80047d4:	f04f 0200 	mov.w	r2, #0
 80047d8:	f04f 0300 	mov.w	r3, #0
 80047dc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80047e0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80047e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80047e8:	4692      	mov	sl, r2
 80047ea:	469b      	mov	fp, r3
 80047ec:	4643      	mov	r3, r8
 80047ee:	eb1a 0303 	adds.w	r3, sl, r3
 80047f2:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80047f6:	464b      	mov	r3, r9
 80047f8:	eb4b 0303 	adc.w	r3, fp, r3
 80047fc:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8004800:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004804:	685b      	ldr	r3, [r3, #4]
 8004806:	2200      	movs	r2, #0
 8004808:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800480c:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8004810:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8004814:	460b      	mov	r3, r1
 8004816:	18db      	adds	r3, r3, r3
 8004818:	643b      	str	r3, [r7, #64]	@ 0x40
 800481a:	4613      	mov	r3, r2
 800481c:	eb42 0303 	adc.w	r3, r2, r3
 8004820:	647b      	str	r3, [r7, #68]	@ 0x44
 8004822:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8004826:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800482a:	f7fb fd21 	bl	8000270 <__aeabi_uldivmod>
 800482e:	4602      	mov	r2, r0
 8004830:	460b      	mov	r3, r1
 8004832:	4611      	mov	r1, r2
 8004834:	4b3b      	ldr	r3, [pc, #236]	@ (8004924 <UART_SetConfig+0x2d4>)
 8004836:	fba3 2301 	umull	r2, r3, r3, r1
 800483a:	095b      	lsrs	r3, r3, #5
 800483c:	2264      	movs	r2, #100	@ 0x64
 800483e:	fb02 f303 	mul.w	r3, r2, r3
 8004842:	1acb      	subs	r3, r1, r3
 8004844:	00db      	lsls	r3, r3, #3
 8004846:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800484a:	4b36      	ldr	r3, [pc, #216]	@ (8004924 <UART_SetConfig+0x2d4>)
 800484c:	fba3 2302 	umull	r2, r3, r3, r2
 8004850:	095b      	lsrs	r3, r3, #5
 8004852:	005b      	lsls	r3, r3, #1
 8004854:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004858:	441c      	add	r4, r3
 800485a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800485e:	2200      	movs	r2, #0
 8004860:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004864:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004868:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 800486c:	4642      	mov	r2, r8
 800486e:	464b      	mov	r3, r9
 8004870:	1891      	adds	r1, r2, r2
 8004872:	63b9      	str	r1, [r7, #56]	@ 0x38
 8004874:	415b      	adcs	r3, r3
 8004876:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004878:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 800487c:	4641      	mov	r1, r8
 800487e:	1851      	adds	r1, r2, r1
 8004880:	6339      	str	r1, [r7, #48]	@ 0x30
 8004882:	4649      	mov	r1, r9
 8004884:	414b      	adcs	r3, r1
 8004886:	637b      	str	r3, [r7, #52]	@ 0x34
 8004888:	f04f 0200 	mov.w	r2, #0
 800488c:	f04f 0300 	mov.w	r3, #0
 8004890:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8004894:	4659      	mov	r1, fp
 8004896:	00cb      	lsls	r3, r1, #3
 8004898:	4651      	mov	r1, sl
 800489a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800489e:	4651      	mov	r1, sl
 80048a0:	00ca      	lsls	r2, r1, #3
 80048a2:	4610      	mov	r0, r2
 80048a4:	4619      	mov	r1, r3
 80048a6:	4603      	mov	r3, r0
 80048a8:	4642      	mov	r2, r8
 80048aa:	189b      	adds	r3, r3, r2
 80048ac:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80048b0:	464b      	mov	r3, r9
 80048b2:	460a      	mov	r2, r1
 80048b4:	eb42 0303 	adc.w	r3, r2, r3
 80048b8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80048bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80048c0:	685b      	ldr	r3, [r3, #4]
 80048c2:	2200      	movs	r2, #0
 80048c4:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80048c8:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80048cc:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80048d0:	460b      	mov	r3, r1
 80048d2:	18db      	adds	r3, r3, r3
 80048d4:	62bb      	str	r3, [r7, #40]	@ 0x28
 80048d6:	4613      	mov	r3, r2
 80048d8:	eb42 0303 	adc.w	r3, r2, r3
 80048dc:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80048de:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80048e2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80048e6:	f7fb fcc3 	bl	8000270 <__aeabi_uldivmod>
 80048ea:	4602      	mov	r2, r0
 80048ec:	460b      	mov	r3, r1
 80048ee:	4b0d      	ldr	r3, [pc, #52]	@ (8004924 <UART_SetConfig+0x2d4>)
 80048f0:	fba3 1302 	umull	r1, r3, r3, r2
 80048f4:	095b      	lsrs	r3, r3, #5
 80048f6:	2164      	movs	r1, #100	@ 0x64
 80048f8:	fb01 f303 	mul.w	r3, r1, r3
 80048fc:	1ad3      	subs	r3, r2, r3
 80048fe:	00db      	lsls	r3, r3, #3
 8004900:	3332      	adds	r3, #50	@ 0x32
 8004902:	4a08      	ldr	r2, [pc, #32]	@ (8004924 <UART_SetConfig+0x2d4>)
 8004904:	fba2 2303 	umull	r2, r3, r2, r3
 8004908:	095b      	lsrs	r3, r3, #5
 800490a:	f003 0207 	and.w	r2, r3, #7
 800490e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004912:	681b      	ldr	r3, [r3, #0]
 8004914:	4422      	add	r2, r4
 8004916:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8004918:	e106      	b.n	8004b28 <UART_SetConfig+0x4d8>
 800491a:	bf00      	nop
 800491c:	40011000 	.word	0x40011000
 8004920:	40011400 	.word	0x40011400
 8004924:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004928:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800492c:	2200      	movs	r2, #0
 800492e:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8004932:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8004936:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800493a:	4642      	mov	r2, r8
 800493c:	464b      	mov	r3, r9
 800493e:	1891      	adds	r1, r2, r2
 8004940:	6239      	str	r1, [r7, #32]
 8004942:	415b      	adcs	r3, r3
 8004944:	627b      	str	r3, [r7, #36]	@ 0x24
 8004946:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800494a:	4641      	mov	r1, r8
 800494c:	1854      	adds	r4, r2, r1
 800494e:	4649      	mov	r1, r9
 8004950:	eb43 0501 	adc.w	r5, r3, r1
 8004954:	f04f 0200 	mov.w	r2, #0
 8004958:	f04f 0300 	mov.w	r3, #0
 800495c:	00eb      	lsls	r3, r5, #3
 800495e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004962:	00e2      	lsls	r2, r4, #3
 8004964:	4614      	mov	r4, r2
 8004966:	461d      	mov	r5, r3
 8004968:	4643      	mov	r3, r8
 800496a:	18e3      	adds	r3, r4, r3
 800496c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004970:	464b      	mov	r3, r9
 8004972:	eb45 0303 	adc.w	r3, r5, r3
 8004976:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 800497a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800497e:	685b      	ldr	r3, [r3, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8004986:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800498a:	f04f 0200 	mov.w	r2, #0
 800498e:	f04f 0300 	mov.w	r3, #0
 8004992:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8004996:	4629      	mov	r1, r5
 8004998:	008b      	lsls	r3, r1, #2
 800499a:	4621      	mov	r1, r4
 800499c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80049a0:	4621      	mov	r1, r4
 80049a2:	008a      	lsls	r2, r1, #2
 80049a4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80049a8:	f7fb fc62 	bl	8000270 <__aeabi_uldivmod>
 80049ac:	4602      	mov	r2, r0
 80049ae:	460b      	mov	r3, r1
 80049b0:	4b60      	ldr	r3, [pc, #384]	@ (8004b34 <UART_SetConfig+0x4e4>)
 80049b2:	fba3 2302 	umull	r2, r3, r3, r2
 80049b6:	095b      	lsrs	r3, r3, #5
 80049b8:	011c      	lsls	r4, r3, #4
 80049ba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80049be:	2200      	movs	r2, #0
 80049c0:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 80049c4:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80049c8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80049cc:	4642      	mov	r2, r8
 80049ce:	464b      	mov	r3, r9
 80049d0:	1891      	adds	r1, r2, r2
 80049d2:	61b9      	str	r1, [r7, #24]
 80049d4:	415b      	adcs	r3, r3
 80049d6:	61fb      	str	r3, [r7, #28]
 80049d8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80049dc:	4641      	mov	r1, r8
 80049de:	1851      	adds	r1, r2, r1
 80049e0:	6139      	str	r1, [r7, #16]
 80049e2:	4649      	mov	r1, r9
 80049e4:	414b      	adcs	r3, r1
 80049e6:	617b      	str	r3, [r7, #20]
 80049e8:	f04f 0200 	mov.w	r2, #0
 80049ec:	f04f 0300 	mov.w	r3, #0
 80049f0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80049f4:	4659      	mov	r1, fp
 80049f6:	00cb      	lsls	r3, r1, #3
 80049f8:	4651      	mov	r1, sl
 80049fa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80049fe:	4651      	mov	r1, sl
 8004a00:	00ca      	lsls	r2, r1, #3
 8004a02:	4610      	mov	r0, r2
 8004a04:	4619      	mov	r1, r3
 8004a06:	4603      	mov	r3, r0
 8004a08:	4642      	mov	r2, r8
 8004a0a:	189b      	adds	r3, r3, r2
 8004a0c:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8004a10:	464b      	mov	r3, r9
 8004a12:	460a      	mov	r2, r1
 8004a14:	eb42 0303 	adc.w	r3, r2, r3
 8004a18:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8004a1c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004a20:	685b      	ldr	r3, [r3, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	67bb      	str	r3, [r7, #120]	@ 0x78
 8004a26:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8004a28:	f04f 0200 	mov.w	r2, #0
 8004a2c:	f04f 0300 	mov.w	r3, #0
 8004a30:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8004a34:	4649      	mov	r1, r9
 8004a36:	008b      	lsls	r3, r1, #2
 8004a38:	4641      	mov	r1, r8
 8004a3a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004a3e:	4641      	mov	r1, r8
 8004a40:	008a      	lsls	r2, r1, #2
 8004a42:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8004a46:	f7fb fc13 	bl	8000270 <__aeabi_uldivmod>
 8004a4a:	4602      	mov	r2, r0
 8004a4c:	460b      	mov	r3, r1
 8004a4e:	4611      	mov	r1, r2
 8004a50:	4b38      	ldr	r3, [pc, #224]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004a52:	fba3 2301 	umull	r2, r3, r3, r1
 8004a56:	095b      	lsrs	r3, r3, #5
 8004a58:	2264      	movs	r2, #100	@ 0x64
 8004a5a:	fb02 f303 	mul.w	r3, r2, r3
 8004a5e:	1acb      	subs	r3, r1, r3
 8004a60:	011b      	lsls	r3, r3, #4
 8004a62:	3332      	adds	r3, #50	@ 0x32
 8004a64:	4a33      	ldr	r2, [pc, #204]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004a66:	fba2 2303 	umull	r2, r3, r2, r3
 8004a6a:	095b      	lsrs	r3, r3, #5
 8004a6c:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004a70:	441c      	add	r4, r3
 8004a72:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004a76:	2200      	movs	r2, #0
 8004a78:	673b      	str	r3, [r7, #112]	@ 0x70
 8004a7a:	677a      	str	r2, [r7, #116]	@ 0x74
 8004a7c:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004a80:	4642      	mov	r2, r8
 8004a82:	464b      	mov	r3, r9
 8004a84:	1891      	adds	r1, r2, r2
 8004a86:	60b9      	str	r1, [r7, #8]
 8004a88:	415b      	adcs	r3, r3
 8004a8a:	60fb      	str	r3, [r7, #12]
 8004a8c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004a90:	4641      	mov	r1, r8
 8004a92:	1851      	adds	r1, r2, r1
 8004a94:	6039      	str	r1, [r7, #0]
 8004a96:	4649      	mov	r1, r9
 8004a98:	414b      	adcs	r3, r1
 8004a9a:	607b      	str	r3, [r7, #4]
 8004a9c:	f04f 0200 	mov.w	r2, #0
 8004aa0:	f04f 0300 	mov.w	r3, #0
 8004aa4:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004aa8:	4659      	mov	r1, fp
 8004aaa:	00cb      	lsls	r3, r1, #3
 8004aac:	4651      	mov	r1, sl
 8004aae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004ab2:	4651      	mov	r1, sl
 8004ab4:	00ca      	lsls	r2, r1, #3
 8004ab6:	4610      	mov	r0, r2
 8004ab8:	4619      	mov	r1, r3
 8004aba:	4603      	mov	r3, r0
 8004abc:	4642      	mov	r2, r8
 8004abe:	189b      	adds	r3, r3, r2
 8004ac0:	66bb      	str	r3, [r7, #104]	@ 0x68
 8004ac2:	464b      	mov	r3, r9
 8004ac4:	460a      	mov	r2, r1
 8004ac6:	eb42 0303 	adc.w	r3, r2, r3
 8004aca:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004acc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004ad0:	685b      	ldr	r3, [r3, #4]
 8004ad2:	2200      	movs	r2, #0
 8004ad4:	663b      	str	r3, [r7, #96]	@ 0x60
 8004ad6:	667a      	str	r2, [r7, #100]	@ 0x64
 8004ad8:	f04f 0200 	mov.w	r2, #0
 8004adc:	f04f 0300 	mov.w	r3, #0
 8004ae0:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8004ae4:	4649      	mov	r1, r9
 8004ae6:	008b      	lsls	r3, r1, #2
 8004ae8:	4641      	mov	r1, r8
 8004aea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004aee:	4641      	mov	r1, r8
 8004af0:	008a      	lsls	r2, r1, #2
 8004af2:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8004af6:	f7fb fbbb 	bl	8000270 <__aeabi_uldivmod>
 8004afa:	4602      	mov	r2, r0
 8004afc:	460b      	mov	r3, r1
 8004afe:	4b0d      	ldr	r3, [pc, #52]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004b00:	fba3 1302 	umull	r1, r3, r3, r2
 8004b04:	095b      	lsrs	r3, r3, #5
 8004b06:	2164      	movs	r1, #100	@ 0x64
 8004b08:	fb01 f303 	mul.w	r3, r1, r3
 8004b0c:	1ad3      	subs	r3, r2, r3
 8004b0e:	011b      	lsls	r3, r3, #4
 8004b10:	3332      	adds	r3, #50	@ 0x32
 8004b12:	4a08      	ldr	r2, [pc, #32]	@ (8004b34 <UART_SetConfig+0x4e4>)
 8004b14:	fba2 2303 	umull	r2, r3, r2, r3
 8004b18:	095b      	lsrs	r3, r3, #5
 8004b1a:	f003 020f 	and.w	r2, r3, #15
 8004b1e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	4422      	add	r2, r4
 8004b26:	609a      	str	r2, [r3, #8]
}
 8004b28:	bf00      	nop
 8004b2a:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8004b2e:	46bd      	mov	sp, r7
 8004b30:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8004b34:	51eb851f 	.word	0x51eb851f

08004b38 <__NVIC_SetPriority>:
{
 8004b38:	b480      	push	{r7}
 8004b3a:	b083      	sub	sp, #12
 8004b3c:	af00      	add	r7, sp, #0
 8004b3e:	4603      	mov	r3, r0
 8004b40:	6039      	str	r1, [r7, #0]
 8004b42:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004b44:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b48:	2b00      	cmp	r3, #0
 8004b4a:	db0a      	blt.n	8004b62 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b4c:	683b      	ldr	r3, [r7, #0]
 8004b4e:	b2da      	uxtb	r2, r3
 8004b50:	490c      	ldr	r1, [pc, #48]	@ (8004b84 <__NVIC_SetPriority+0x4c>)
 8004b52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004b56:	0112      	lsls	r2, r2, #4
 8004b58:	b2d2      	uxtb	r2, r2
 8004b5a:	440b      	add	r3, r1
 8004b5c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004b60:	e00a      	b.n	8004b78 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004b62:	683b      	ldr	r3, [r7, #0]
 8004b64:	b2da      	uxtb	r2, r3
 8004b66:	4908      	ldr	r1, [pc, #32]	@ (8004b88 <__NVIC_SetPriority+0x50>)
 8004b68:	79fb      	ldrb	r3, [r7, #7]
 8004b6a:	f003 030f 	and.w	r3, r3, #15
 8004b6e:	3b04      	subs	r3, #4
 8004b70:	0112      	lsls	r2, r2, #4
 8004b72:	b2d2      	uxtb	r2, r2
 8004b74:	440b      	add	r3, r1
 8004b76:	761a      	strb	r2, [r3, #24]
}
 8004b78:	bf00      	nop
 8004b7a:	370c      	adds	r7, #12
 8004b7c:	46bd      	mov	sp, r7
 8004b7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b82:	4770      	bx	lr
 8004b84:	e000e100 	.word	0xe000e100
 8004b88:	e000ed00 	.word	0xe000ed00

08004b8c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004b8c:	b580      	push	{r7, lr}
 8004b8e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004b90:	4b05      	ldr	r3, [pc, #20]	@ (8004ba8 <SysTick_Handler+0x1c>)
 8004b92:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8004b94:	f001 fed4 	bl	8006940 <xTaskGetSchedulerState>
 8004b98:	4603      	mov	r3, r0
 8004b9a:	2b01      	cmp	r3, #1
 8004b9c:	d001      	beq.n	8004ba2 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004b9e:	f002 fccb 	bl	8007538 <xPortSysTickHandler>
  }
}
 8004ba2:	bf00      	nop
 8004ba4:	bd80      	pop	{r7, pc}
 8004ba6:	bf00      	nop
 8004ba8:	e000e010 	.word	0xe000e010

08004bac <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004bac:	b580      	push	{r7, lr}
 8004bae:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004bb0:	2100      	movs	r1, #0
 8004bb2:	f06f 0004 	mvn.w	r0, #4
 8004bb6:	f7ff ffbf 	bl	8004b38 <__NVIC_SetPriority>
#endif
}
 8004bba:	bf00      	nop
 8004bbc:	bd80      	pop	{r7, pc}
	...

08004bc0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004bc0:	b480      	push	{r7}
 8004bc2:	b083      	sub	sp, #12
 8004bc4:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004bc6:	f3ef 8305 	mrs	r3, IPSR
 8004bca:	603b      	str	r3, [r7, #0]
  return(result);
 8004bcc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d003      	beq.n	8004bda <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8004bd2:	f06f 0305 	mvn.w	r3, #5
 8004bd6:	607b      	str	r3, [r7, #4]
 8004bd8:	e00c      	b.n	8004bf4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8004bda:	4b0a      	ldr	r3, [pc, #40]	@ (8004c04 <osKernelInitialize+0x44>)
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d105      	bne.n	8004bee <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8004be2:	4b08      	ldr	r3, [pc, #32]	@ (8004c04 <osKernelInitialize+0x44>)
 8004be4:	2201      	movs	r2, #1
 8004be6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8004be8:	2300      	movs	r3, #0
 8004bea:	607b      	str	r3, [r7, #4]
 8004bec:	e002      	b.n	8004bf4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8004bee:	f04f 33ff 	mov.w	r3, #4294967295
 8004bf2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004bf4:	687b      	ldr	r3, [r7, #4]
}
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	370c      	adds	r7, #12
 8004bfa:	46bd      	mov	sp, r7
 8004bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c00:	4770      	bx	lr
 8004c02:	bf00      	nop
 8004c04:	200001a0 	.word	0x200001a0

08004c08 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8004c08:	b580      	push	{r7, lr}
 8004c0a:	b082      	sub	sp, #8
 8004c0c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c0e:	f3ef 8305 	mrs	r3, IPSR
 8004c12:	603b      	str	r3, [r7, #0]
  return(result);
 8004c14:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d003      	beq.n	8004c22 <osKernelStart+0x1a>
    stat = osErrorISR;
 8004c1a:	f06f 0305 	mvn.w	r3, #5
 8004c1e:	607b      	str	r3, [r7, #4]
 8004c20:	e010      	b.n	8004c44 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8004c22:	4b0b      	ldr	r3, [pc, #44]	@ (8004c50 <osKernelStart+0x48>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	2b01      	cmp	r3, #1
 8004c28:	d109      	bne.n	8004c3e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8004c2a:	f7ff ffbf 	bl	8004bac <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8004c2e:	4b08      	ldr	r3, [pc, #32]	@ (8004c50 <osKernelStart+0x48>)
 8004c30:	2202      	movs	r2, #2
 8004c32:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8004c34:	f001 fa20 	bl	8006078 <vTaskStartScheduler>
      stat = osOK;
 8004c38:	2300      	movs	r3, #0
 8004c3a:	607b      	str	r3, [r7, #4]
 8004c3c:	e002      	b.n	8004c44 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004c3e:	f04f 33ff 	mov.w	r3, #4294967295
 8004c42:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8004c44:	687b      	ldr	r3, [r7, #4]
}
 8004c46:	4618      	mov	r0, r3
 8004c48:	3708      	adds	r7, #8
 8004c4a:	46bd      	mov	sp, r7
 8004c4c:	bd80      	pop	{r7, pc}
 8004c4e:	bf00      	nop
 8004c50:	200001a0 	.word	0x200001a0

08004c54 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8004c54:	b580      	push	{r7, lr}
 8004c56:	b08e      	sub	sp, #56	@ 0x38
 8004c58:	af04      	add	r7, sp, #16
 8004c5a:	60f8      	str	r0, [r7, #12]
 8004c5c:	60b9      	str	r1, [r7, #8]
 8004c5e:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004c60:	2300      	movs	r3, #0
 8004c62:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004c64:	f3ef 8305 	mrs	r3, IPSR
 8004c68:	617b      	str	r3, [r7, #20]
  return(result);
 8004c6a:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004c6c:	2b00      	cmp	r3, #0
 8004c6e:	d17e      	bne.n	8004d6e <osThreadNew+0x11a>
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d07b      	beq.n	8004d6e <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8004c76:	2380      	movs	r3, #128	@ 0x80
 8004c78:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004c7a:	2318      	movs	r3, #24
 8004c7c:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004c7e:	2300      	movs	r3, #0
 8004c80:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 8004c82:	f04f 33ff 	mov.w	r3, #4294967295
 8004c86:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	2b00      	cmp	r3, #0
 8004c8c:	d045      	beq.n	8004d1a <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	2b00      	cmp	r3, #0
 8004c94:	d002      	beq.n	8004c9c <osThreadNew+0x48>
        name = attr->name;
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004c9c:	687b      	ldr	r3, [r7, #4]
 8004c9e:	699b      	ldr	r3, [r3, #24]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d002      	beq.n	8004caa <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	699b      	ldr	r3, [r3, #24]
 8004ca8:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004caa:	69fb      	ldr	r3, [r7, #28]
 8004cac:	2b00      	cmp	r3, #0
 8004cae:	d008      	beq.n	8004cc2 <osThreadNew+0x6e>
 8004cb0:	69fb      	ldr	r3, [r7, #28]
 8004cb2:	2b38      	cmp	r3, #56	@ 0x38
 8004cb4:	d805      	bhi.n	8004cc2 <osThreadNew+0x6e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	f003 0301 	and.w	r3, r3, #1
 8004cbe:	2b00      	cmp	r3, #0
 8004cc0:	d001      	beq.n	8004cc6 <osThreadNew+0x72>
        return (NULL);
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	e054      	b.n	8004d70 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	695b      	ldr	r3, [r3, #20]
 8004cca:	2b00      	cmp	r3, #0
 8004ccc:	d003      	beq.n	8004cd6 <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	089b      	lsrs	r3, r3, #2
 8004cd4:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	689b      	ldr	r3, [r3, #8]
 8004cda:	2b00      	cmp	r3, #0
 8004cdc:	d00e      	beq.n	8004cfc <osThreadNew+0xa8>
 8004cde:	687b      	ldr	r3, [r7, #4]
 8004ce0:	68db      	ldr	r3, [r3, #12]
 8004ce2:	2ba7      	cmp	r3, #167	@ 0xa7
 8004ce4:	d90a      	bls.n	8004cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8004cea:	2b00      	cmp	r3, #0
 8004cec:	d006      	beq.n	8004cfc <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	695b      	ldr	r3, [r3, #20]
 8004cf2:	2b00      	cmp	r3, #0
 8004cf4:	d002      	beq.n	8004cfc <osThreadNew+0xa8>
        mem = 1;
 8004cf6:	2301      	movs	r3, #1
 8004cf8:	61bb      	str	r3, [r7, #24]
 8004cfa:	e010      	b.n	8004d1e <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	689b      	ldr	r3, [r3, #8]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	d10c      	bne.n	8004d1e <osThreadNew+0xca>
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	68db      	ldr	r3, [r3, #12]
 8004d08:	2b00      	cmp	r3, #0
 8004d0a:	d108      	bne.n	8004d1e <osThreadNew+0xca>
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	691b      	ldr	r3, [r3, #16]
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d104      	bne.n	8004d1e <osThreadNew+0xca>
          mem = 0;
 8004d14:	2300      	movs	r3, #0
 8004d16:	61bb      	str	r3, [r7, #24]
 8004d18:	e001      	b.n	8004d1e <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8004d1a:	2300      	movs	r3, #0
 8004d1c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004d1e:	69bb      	ldr	r3, [r7, #24]
 8004d20:	2b01      	cmp	r3, #1
 8004d22:	d110      	bne.n	8004d46 <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8004d2c:	9202      	str	r2, [sp, #8]
 8004d2e:	9301      	str	r3, [sp, #4]
 8004d30:	69fb      	ldr	r3, [r7, #28]
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	68bb      	ldr	r3, [r7, #8]
 8004d36:	6a3a      	ldr	r2, [r7, #32]
 8004d38:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d3a:	68f8      	ldr	r0, [r7, #12]
 8004d3c:	f000 ffa8 	bl	8005c90 <xTaskCreateStatic>
 8004d40:	4603      	mov	r3, r0
 8004d42:	613b      	str	r3, [r7, #16]
 8004d44:	e013      	b.n	8004d6e <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004d46:	69bb      	ldr	r3, [r7, #24]
 8004d48:	2b00      	cmp	r3, #0
 8004d4a:	d110      	bne.n	8004d6e <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004d4c:	6a3b      	ldr	r3, [r7, #32]
 8004d4e:	b29a      	uxth	r2, r3
 8004d50:	f107 0310 	add.w	r3, r7, #16
 8004d54:	9301      	str	r3, [sp, #4]
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	9300      	str	r3, [sp, #0]
 8004d5a:	68bb      	ldr	r3, [r7, #8]
 8004d5c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004d5e:	68f8      	ldr	r0, [r7, #12]
 8004d60:	f000 fff6 	bl	8005d50 <xTaskCreate>
 8004d64:	4603      	mov	r3, r0
 8004d66:	2b01      	cmp	r3, #1
 8004d68:	d001      	beq.n	8004d6e <osThreadNew+0x11a>
            hTask = NULL;
 8004d6a:	2300      	movs	r3, #0
 8004d6c:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004d6e:	693b      	ldr	r3, [r7, #16]
}
 8004d70:	4618      	mov	r0, r3
 8004d72:	3728      	adds	r7, #40	@ 0x28
 8004d74:	46bd      	mov	sp, r7
 8004d76:	bd80      	pop	{r7, pc}

08004d78 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004d78:	b580      	push	{r7, lr}
 8004d7a:	b084      	sub	sp, #16
 8004d7c:	af00      	add	r7, sp, #0
 8004d7e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004d80:	f3ef 8305 	mrs	r3, IPSR
 8004d84:	60bb      	str	r3, [r7, #8]
  return(result);
 8004d86:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d003      	beq.n	8004d94 <osDelay+0x1c>
    stat = osErrorISR;
 8004d8c:	f06f 0305 	mvn.w	r3, #5
 8004d90:	60fb      	str	r3, [r7, #12]
 8004d92:	e007      	b.n	8004da4 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004d94:	2300      	movs	r3, #0
 8004d96:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d002      	beq.n	8004da4 <osDelay+0x2c>
      vTaskDelay(ticks);
 8004d9e:	6878      	ldr	r0, [r7, #4]
 8004da0:	f001 f934 	bl	800600c <vTaskDelay>
    }
  }

  return (stat);
 8004da4:	68fb      	ldr	r3, [r7, #12]
}
 8004da6:	4618      	mov	r0, r3
 8004da8:	3710      	adds	r7, #16
 8004daa:	46bd      	mov	sp, r7
 8004dac:	bd80      	pop	{r7, pc}

08004dae <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004dae:	b580      	push	{r7, lr}
 8004db0:	b08a      	sub	sp, #40	@ 0x28
 8004db2:	af02      	add	r7, sp, #8
 8004db4:	60f8      	str	r0, [r7, #12]
 8004db6:	60b9      	str	r1, [r7, #8]
 8004db8:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004dba:	2300      	movs	r3, #0
 8004dbc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004dbe:	f3ef 8305 	mrs	r3, IPSR
 8004dc2:	613b      	str	r3, [r7, #16]
  return(result);
 8004dc4:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004dc6:	2b00      	cmp	r3, #0
 8004dc8:	d15f      	bne.n	8004e8a <osMessageQueueNew+0xdc>
 8004dca:	68fb      	ldr	r3, [r7, #12]
 8004dcc:	2b00      	cmp	r3, #0
 8004dce:	d05c      	beq.n	8004e8a <osMessageQueueNew+0xdc>
 8004dd0:	68bb      	ldr	r3, [r7, #8]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d059      	beq.n	8004e8a <osMessageQueueNew+0xdc>
    mem = -1;
 8004dd6:	f04f 33ff 	mov.w	r3, #4294967295
 8004dda:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d029      	beq.n	8004e36 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	689b      	ldr	r3, [r3, #8]
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d012      	beq.n	8004e10 <osMessageQueueNew+0x62>
 8004dea:	687b      	ldr	r3, [r7, #4]
 8004dec:	68db      	ldr	r3, [r3, #12]
 8004dee:	2b4f      	cmp	r3, #79	@ 0x4f
 8004df0:	d90e      	bls.n	8004e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d00a      	beq.n	8004e10 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	695a      	ldr	r2, [r3, #20]
 8004dfe:	68fb      	ldr	r3, [r7, #12]
 8004e00:	68b9      	ldr	r1, [r7, #8]
 8004e02:	fb01 f303 	mul.w	r3, r1, r3
 8004e06:	429a      	cmp	r2, r3
 8004e08:	d302      	bcc.n	8004e10 <osMessageQueueNew+0x62>
        mem = 1;
 8004e0a:	2301      	movs	r3, #1
 8004e0c:	61bb      	str	r3, [r7, #24]
 8004e0e:	e014      	b.n	8004e3a <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	689b      	ldr	r3, [r3, #8]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d110      	bne.n	8004e3a <osMessageQueueNew+0x8c>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	68db      	ldr	r3, [r3, #12]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d10c      	bne.n	8004e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d108      	bne.n	8004e3a <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004e28:	687b      	ldr	r3, [r7, #4]
 8004e2a:	695b      	ldr	r3, [r3, #20]
 8004e2c:	2b00      	cmp	r3, #0
 8004e2e:	d104      	bne.n	8004e3a <osMessageQueueNew+0x8c>
          mem = 0;
 8004e30:	2300      	movs	r3, #0
 8004e32:	61bb      	str	r3, [r7, #24]
 8004e34:	e001      	b.n	8004e3a <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004e36:	2300      	movs	r3, #0
 8004e38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004e3a:	69bb      	ldr	r3, [r7, #24]
 8004e3c:	2b01      	cmp	r3, #1
 8004e3e:	d10b      	bne.n	8004e58 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004e40:	687b      	ldr	r3, [r7, #4]
 8004e42:	691a      	ldr	r2, [r3, #16]
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	689b      	ldr	r3, [r3, #8]
 8004e48:	2100      	movs	r1, #0
 8004e4a:	9100      	str	r1, [sp, #0]
 8004e4c:	68b9      	ldr	r1, [r7, #8]
 8004e4e:	68f8      	ldr	r0, [r7, #12]
 8004e50:	f000 f9d0 	bl	80051f4 <xQueueGenericCreateStatic>
 8004e54:	61f8      	str	r0, [r7, #28]
 8004e56:	e008      	b.n	8004e6a <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004e58:	69bb      	ldr	r3, [r7, #24]
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d105      	bne.n	8004e6a <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004e5e:	2200      	movs	r2, #0
 8004e60:	68b9      	ldr	r1, [r7, #8]
 8004e62:	68f8      	ldr	r0, [r7, #12]
 8004e64:	f000 fa43 	bl	80052ee <xQueueGenericCreate>
 8004e68:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004e6a:	69fb      	ldr	r3, [r7, #28]
 8004e6c:	2b00      	cmp	r3, #0
 8004e6e:	d00c      	beq.n	8004e8a <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d003      	beq.n	8004e7e <osMessageQueueNew+0xd0>
        name = attr->name;
 8004e76:	687b      	ldr	r3, [r7, #4]
 8004e78:	681b      	ldr	r3, [r3, #0]
 8004e7a:	617b      	str	r3, [r7, #20]
 8004e7c:	e001      	b.n	8004e82 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004e7e:	2300      	movs	r3, #0
 8004e80:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004e82:	6979      	ldr	r1, [r7, #20]
 8004e84:	69f8      	ldr	r0, [r7, #28]
 8004e86:	f000 fea5 	bl	8005bd4 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004e8a:	69fb      	ldr	r3, [r7, #28]
}
 8004e8c:	4618      	mov	r0, r3
 8004e8e:	3720      	adds	r7, #32
 8004e90:	46bd      	mov	sp, r7
 8004e92:	bd80      	pop	{r7, pc}

08004e94 <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004e94:	b580      	push	{r7, lr}
 8004e96:	b088      	sub	sp, #32
 8004e98:	af00      	add	r7, sp, #0
 8004e9a:	60f8      	str	r0, [r7, #12]
 8004e9c:	60b9      	str	r1, [r7, #8]
 8004e9e:	607a      	str	r2, [r7, #4]
 8004ea0:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004ea6:	2300      	movs	r3, #0
 8004ea8:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004eaa:	f3ef 8305 	mrs	r3, IPSR
 8004eae:	617b      	str	r3, [r7, #20]
  return(result);
 8004eb0:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d028      	beq.n	8004f08 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004eb6:	69bb      	ldr	r3, [r7, #24]
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d005      	beq.n	8004ec8 <osMessageQueueGet+0x34>
 8004ebc:	68bb      	ldr	r3, [r7, #8]
 8004ebe:	2b00      	cmp	r3, #0
 8004ec0:	d002      	beq.n	8004ec8 <osMessageQueueGet+0x34>
 8004ec2:	683b      	ldr	r3, [r7, #0]
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d003      	beq.n	8004ed0 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004ec8:	f06f 0303 	mvn.w	r3, #3
 8004ecc:	61fb      	str	r3, [r7, #28]
 8004ece:	e037      	b.n	8004f40 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004ed0:	2300      	movs	r3, #0
 8004ed2:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004ed4:	f107 0310 	add.w	r3, r7, #16
 8004ed8:	461a      	mov	r2, r3
 8004eda:	68b9      	ldr	r1, [r7, #8]
 8004edc:	69b8      	ldr	r0, [r7, #24]
 8004ede:	f000 fce7 	bl	80058b0 <xQueueReceiveFromISR>
 8004ee2:	4603      	mov	r3, r0
 8004ee4:	2b01      	cmp	r3, #1
 8004ee6:	d003      	beq.n	8004ef0 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004ee8:	f06f 0302 	mvn.w	r3, #2
 8004eec:	61fb      	str	r3, [r7, #28]
 8004eee:	e027      	b.n	8004f40 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004ef0:	693b      	ldr	r3, [r7, #16]
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d024      	beq.n	8004f40 <osMessageQueueGet+0xac>
 8004ef6:	4b15      	ldr	r3, [pc, #84]	@ (8004f4c <osMessageQueueGet+0xb8>)
 8004ef8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004efc:	601a      	str	r2, [r3, #0]
 8004efe:	f3bf 8f4f 	dsb	sy
 8004f02:	f3bf 8f6f 	isb	sy
 8004f06:	e01b      	b.n	8004f40 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004f08:	69bb      	ldr	r3, [r7, #24]
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d002      	beq.n	8004f14 <osMessageQueueGet+0x80>
 8004f0e:	68bb      	ldr	r3, [r7, #8]
 8004f10:	2b00      	cmp	r3, #0
 8004f12:	d103      	bne.n	8004f1c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004f14:	f06f 0303 	mvn.w	r3, #3
 8004f18:	61fb      	str	r3, [r7, #28]
 8004f1a:	e011      	b.n	8004f40 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004f1c:	683a      	ldr	r2, [r7, #0]
 8004f1e:	68b9      	ldr	r1, [r7, #8]
 8004f20:	69b8      	ldr	r0, [r7, #24]
 8004f22:	f000 fbe3 	bl	80056ec <xQueueReceive>
 8004f26:	4603      	mov	r3, r0
 8004f28:	2b01      	cmp	r3, #1
 8004f2a:	d009      	beq.n	8004f40 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004f2c:	683b      	ldr	r3, [r7, #0]
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d003      	beq.n	8004f3a <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004f32:	f06f 0301 	mvn.w	r3, #1
 8004f36:	61fb      	str	r3, [r7, #28]
 8004f38:	e002      	b.n	8004f40 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004f3a:	f06f 0302 	mvn.w	r3, #2
 8004f3e:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004f40:	69fb      	ldr	r3, [r7, #28]
}
 8004f42:	4618      	mov	r0, r3
 8004f44:	3720      	adds	r7, #32
 8004f46:	46bd      	mov	sp, r7
 8004f48:	bd80      	pop	{r7, pc}
 8004f4a:	bf00      	nop
 8004f4c:	e000ed04 	.word	0xe000ed04

08004f50 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004f50:	b480      	push	{r7}
 8004f52:	b085      	sub	sp, #20
 8004f54:	af00      	add	r7, sp, #0
 8004f56:	60f8      	str	r0, [r7, #12]
 8004f58:	60b9      	str	r1, [r7, #8]
 8004f5a:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004f5c:	68fb      	ldr	r3, [r7, #12]
 8004f5e:	4a07      	ldr	r2, [pc, #28]	@ (8004f7c <vApplicationGetIdleTaskMemory+0x2c>)
 8004f60:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004f62:	68bb      	ldr	r3, [r7, #8]
 8004f64:	4a06      	ldr	r2, [pc, #24]	@ (8004f80 <vApplicationGetIdleTaskMemory+0x30>)
 8004f66:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	2280      	movs	r2, #128	@ 0x80
 8004f6c:	601a      	str	r2, [r3, #0]
}
 8004f6e:	bf00      	nop
 8004f70:	3714      	adds	r7, #20
 8004f72:	46bd      	mov	sp, r7
 8004f74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f78:	4770      	bx	lr
 8004f7a:	bf00      	nop
 8004f7c:	200001a4 	.word	0x200001a4
 8004f80:	2000024c 	.word	0x2000024c

08004f84 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004f84:	b480      	push	{r7}
 8004f86:	b085      	sub	sp, #20
 8004f88:	af00      	add	r7, sp, #0
 8004f8a:	60f8      	str	r0, [r7, #12]
 8004f8c:	60b9      	str	r1, [r7, #8]
 8004f8e:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004f90:	68fb      	ldr	r3, [r7, #12]
 8004f92:	4a07      	ldr	r2, [pc, #28]	@ (8004fb0 <vApplicationGetTimerTaskMemory+0x2c>)
 8004f94:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004f96:	68bb      	ldr	r3, [r7, #8]
 8004f98:	4a06      	ldr	r2, [pc, #24]	@ (8004fb4 <vApplicationGetTimerTaskMemory+0x30>)
 8004f9a:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004fa2:	601a      	str	r2, [r3, #0]
}
 8004fa4:	bf00      	nop
 8004fa6:	3714      	adds	r7, #20
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr
 8004fb0:	2000044c 	.word	0x2000044c
 8004fb4:	200004f4 	.word	0x200004f4

08004fb8 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004fb8:	b480      	push	{r7}
 8004fba:	b083      	sub	sp, #12
 8004fbc:	af00      	add	r7, sp, #0
 8004fbe:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	f103 0208 	add.w	r2, r3, #8
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295
 8004fd0:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	f103 0208 	add.w	r2, r3, #8
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f103 0208 	add.w	r2, r3, #8
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004fe6:	687b      	ldr	r3, [r7, #4]
 8004fe8:	2200      	movs	r2, #0
 8004fea:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b083      	sub	sp, #12
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	2200      	movs	r2, #0
 8005004:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005006:	bf00      	nop
 8005008:	370c      	adds	r7, #12
 800500a:	46bd      	mov	sp, r7
 800500c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005010:	4770      	bx	lr

08005012 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005012:	b480      	push	{r7}
 8005014:	b085      	sub	sp, #20
 8005016:	af00      	add	r7, sp, #0
 8005018:	6078      	str	r0, [r7, #4]
 800501a:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800501c:	687b      	ldr	r3, [r7, #4]
 800501e:	685b      	ldr	r3, [r3, #4]
 8005020:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005022:	683b      	ldr	r3, [r7, #0]
 8005024:	68fa      	ldr	r2, [r7, #12]
 8005026:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	689a      	ldr	r2, [r3, #8]
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	689b      	ldr	r3, [r3, #8]
 8005034:	683a      	ldr	r2, [r7, #0]
 8005036:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005038:	68fb      	ldr	r3, [r7, #12]
 800503a:	683a      	ldr	r2, [r7, #0]
 800503c:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800503e:	683b      	ldr	r3, [r7, #0]
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005044:	687b      	ldr	r3, [r7, #4]
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	1c5a      	adds	r2, r3, #1
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
}
 800504e:	bf00      	nop
 8005050:	3714      	adds	r7, #20
 8005052:	46bd      	mov	sp, r7
 8005054:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005058:	4770      	bx	lr

0800505a <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800505a:	b480      	push	{r7}
 800505c:	b085      	sub	sp, #20
 800505e:	af00      	add	r7, sp, #0
 8005060:	6078      	str	r0, [r7, #4]
 8005062:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005064:	683b      	ldr	r3, [r7, #0]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800506a:	68bb      	ldr	r3, [r7, #8]
 800506c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005070:	d103      	bne.n	800507a <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	691b      	ldr	r3, [r3, #16]
 8005076:	60fb      	str	r3, [r7, #12]
 8005078:	e00c      	b.n	8005094 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	3308      	adds	r3, #8
 800507e:	60fb      	str	r3, [r7, #12]
 8005080:	e002      	b.n	8005088 <vListInsert+0x2e>
 8005082:	68fb      	ldr	r3, [r7, #12]
 8005084:	685b      	ldr	r3, [r3, #4]
 8005086:	60fb      	str	r3, [r7, #12]
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	685b      	ldr	r3, [r3, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	68ba      	ldr	r2, [r7, #8]
 8005090:	429a      	cmp	r2, r3
 8005092:	d2f6      	bcs.n	8005082 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	685a      	ldr	r2, [r3, #4]
 8005098:	683b      	ldr	r3, [r7, #0]
 800509a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800509c:	683b      	ldr	r3, [r7, #0]
 800509e:	685b      	ldr	r3, [r3, #4]
 80050a0:	683a      	ldr	r2, [r7, #0]
 80050a2:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80050a4:	683b      	ldr	r3, [r7, #0]
 80050a6:	68fa      	ldr	r2, [r7, #12]
 80050a8:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	683a      	ldr	r2, [r7, #0]
 80050ae:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	687a      	ldr	r2, [r7, #4]
 80050b4:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	1c5a      	adds	r2, r3, #1
 80050bc:	687b      	ldr	r3, [r7, #4]
 80050be:	601a      	str	r2, [r3, #0]
}
 80050c0:	bf00      	nop
 80050c2:	3714      	adds	r7, #20
 80050c4:	46bd      	mov	sp, r7
 80050c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ca:	4770      	bx	lr

080050cc <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80050cc:	b480      	push	{r7}
 80050ce:	b085      	sub	sp, #20
 80050d0:	af00      	add	r7, sp, #0
 80050d2:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	691b      	ldr	r3, [r3, #16]
 80050d8:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80050da:	687b      	ldr	r3, [r7, #4]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	687a      	ldr	r2, [r7, #4]
 80050e0:	6892      	ldr	r2, [r2, #8]
 80050e2:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80050e4:	687b      	ldr	r3, [r7, #4]
 80050e6:	689b      	ldr	r3, [r3, #8]
 80050e8:	687a      	ldr	r2, [r7, #4]
 80050ea:	6852      	ldr	r2, [r2, #4]
 80050ec:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	685b      	ldr	r3, [r3, #4]
 80050f2:	687a      	ldr	r2, [r7, #4]
 80050f4:	429a      	cmp	r2, r3
 80050f6:	d103      	bne.n	8005100 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	689a      	ldr	r2, [r3, #8]
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005106:	68fb      	ldr	r3, [r7, #12]
 8005108:	681b      	ldr	r3, [r3, #0]
 800510a:	1e5a      	subs	r2, r3, #1
 800510c:	68fb      	ldr	r3, [r7, #12]
 800510e:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005110:	68fb      	ldr	r3, [r7, #12]
 8005112:	681b      	ldr	r3, [r3, #0]
}
 8005114:	4618      	mov	r0, r3
 8005116:	3714      	adds	r7, #20
 8005118:	46bd      	mov	sp, r7
 800511a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511e:	4770      	bx	lr

08005120 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005120:	b580      	push	{r7, lr}
 8005122:	b084      	sub	sp, #16
 8005124:	af00      	add	r7, sp, #0
 8005126:	6078      	str	r0, [r7, #4]
 8005128:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	2b00      	cmp	r3, #0
 8005132:	d10b      	bne.n	800514c <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005134:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005138:	f383 8811 	msr	BASEPRI, r3
 800513c:	f3bf 8f6f 	isb	sy
 8005140:	f3bf 8f4f 	dsb	sy
 8005144:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005146:	bf00      	nop
 8005148:	bf00      	nop
 800514a:	e7fd      	b.n	8005148 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 800514c:	f002 f964 	bl	8007418 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005150:	68fb      	ldr	r3, [r7, #12]
 8005152:	681a      	ldr	r2, [r3, #0]
 8005154:	68fb      	ldr	r3, [r7, #12]
 8005156:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005158:	68f9      	ldr	r1, [r7, #12]
 800515a:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 800515c:	fb01 f303 	mul.w	r3, r1, r3
 8005160:	441a      	add	r2, r3
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005166:	68fb      	ldr	r3, [r7, #12]
 8005168:	2200      	movs	r2, #0
 800516a:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	681a      	ldr	r2, [r3, #0]
 8005170:	68fb      	ldr	r3, [r7, #12]
 8005172:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005174:	68fb      	ldr	r3, [r7, #12]
 8005176:	681a      	ldr	r2, [r3, #0]
 8005178:	68fb      	ldr	r3, [r7, #12]
 800517a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800517c:	3b01      	subs	r3, #1
 800517e:	68f9      	ldr	r1, [r7, #12]
 8005180:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005182:	fb01 f303 	mul.w	r3, r1, r3
 8005186:	441a      	add	r2, r3
 8005188:	68fb      	ldr	r3, [r7, #12]
 800518a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800518c:	68fb      	ldr	r3, [r7, #12]
 800518e:	22ff      	movs	r2, #255	@ 0xff
 8005190:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005194:	68fb      	ldr	r3, [r7, #12]
 8005196:	22ff      	movs	r2, #255	@ 0xff
 8005198:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 800519c:	683b      	ldr	r3, [r7, #0]
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d114      	bne.n	80051cc <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	691b      	ldr	r3, [r3, #16]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d01a      	beq.n	80051e0 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80051aa:	68fb      	ldr	r3, [r7, #12]
 80051ac:	3310      	adds	r3, #16
 80051ae:	4618      	mov	r0, r3
 80051b0:	f001 fa00 	bl	80065b4 <xTaskRemoveFromEventList>
 80051b4:	4603      	mov	r3, r0
 80051b6:	2b00      	cmp	r3, #0
 80051b8:	d012      	beq.n	80051e0 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80051ba:	4b0d      	ldr	r3, [pc, #52]	@ (80051f0 <xQueueGenericReset+0xd0>)
 80051bc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80051c0:	601a      	str	r2, [r3, #0]
 80051c2:	f3bf 8f4f 	dsb	sy
 80051c6:	f3bf 8f6f 	isb	sy
 80051ca:	e009      	b.n	80051e0 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80051cc:	68fb      	ldr	r3, [r7, #12]
 80051ce:	3310      	adds	r3, #16
 80051d0:	4618      	mov	r0, r3
 80051d2:	f7ff fef1 	bl	8004fb8 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	3324      	adds	r3, #36	@ 0x24
 80051da:	4618      	mov	r0, r3
 80051dc:	f7ff feec 	bl	8004fb8 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80051e0:	f002 f94c 	bl	800747c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80051e4:	2301      	movs	r3, #1
}
 80051e6:	4618      	mov	r0, r3
 80051e8:	3710      	adds	r7, #16
 80051ea:	46bd      	mov	sp, r7
 80051ec:	bd80      	pop	{r7, pc}
 80051ee:	bf00      	nop
 80051f0:	e000ed04 	.word	0xe000ed04

080051f4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80051f4:	b580      	push	{r7, lr}
 80051f6:	b08e      	sub	sp, #56	@ 0x38
 80051f8:	af02      	add	r7, sp, #8
 80051fa:	60f8      	str	r0, [r7, #12]
 80051fc:	60b9      	str	r1, [r7, #8]
 80051fe:	607a      	str	r2, [r7, #4]
 8005200:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005202:	68fb      	ldr	r3, [r7, #12]
 8005204:	2b00      	cmp	r3, #0
 8005206:	d10b      	bne.n	8005220 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005208:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800520c:	f383 8811 	msr	BASEPRI, r3
 8005210:	f3bf 8f6f 	isb	sy
 8005214:	f3bf 8f4f 	dsb	sy
 8005218:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 800521a:	bf00      	nop
 800521c:	bf00      	nop
 800521e:	e7fd      	b.n	800521c <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005220:	683b      	ldr	r3, [r7, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d10b      	bne.n	800523e <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005226:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800522a:	f383 8811 	msr	BASEPRI, r3
 800522e:	f3bf 8f6f 	isb	sy
 8005232:	f3bf 8f4f 	dsb	sy
 8005236:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005238:	bf00      	nop
 800523a:	bf00      	nop
 800523c:	e7fd      	b.n	800523a <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d002      	beq.n	800524a <xQueueGenericCreateStatic+0x56>
 8005244:	68bb      	ldr	r3, [r7, #8]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d001      	beq.n	800524e <xQueueGenericCreateStatic+0x5a>
 800524a:	2301      	movs	r3, #1
 800524c:	e000      	b.n	8005250 <xQueueGenericCreateStatic+0x5c>
 800524e:	2300      	movs	r3, #0
 8005250:	2b00      	cmp	r3, #0
 8005252:	d10b      	bne.n	800526c <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005254:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005258:	f383 8811 	msr	BASEPRI, r3
 800525c:	f3bf 8f6f 	isb	sy
 8005260:	f3bf 8f4f 	dsb	sy
 8005264:	623b      	str	r3, [r7, #32]
}
 8005266:	bf00      	nop
 8005268:	bf00      	nop
 800526a:	e7fd      	b.n	8005268 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800526c:	687b      	ldr	r3, [r7, #4]
 800526e:	2b00      	cmp	r3, #0
 8005270:	d102      	bne.n	8005278 <xQueueGenericCreateStatic+0x84>
 8005272:	68bb      	ldr	r3, [r7, #8]
 8005274:	2b00      	cmp	r3, #0
 8005276:	d101      	bne.n	800527c <xQueueGenericCreateStatic+0x88>
 8005278:	2301      	movs	r3, #1
 800527a:	e000      	b.n	800527e <xQueueGenericCreateStatic+0x8a>
 800527c:	2300      	movs	r3, #0
 800527e:	2b00      	cmp	r3, #0
 8005280:	d10b      	bne.n	800529a <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005282:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005286:	f383 8811 	msr	BASEPRI, r3
 800528a:	f3bf 8f6f 	isb	sy
 800528e:	f3bf 8f4f 	dsb	sy
 8005292:	61fb      	str	r3, [r7, #28]
}
 8005294:	bf00      	nop
 8005296:	bf00      	nop
 8005298:	e7fd      	b.n	8005296 <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800529a:	2350      	movs	r3, #80	@ 0x50
 800529c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800529e:	697b      	ldr	r3, [r7, #20]
 80052a0:	2b50      	cmp	r3, #80	@ 0x50
 80052a2:	d00b      	beq.n	80052bc <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 80052a4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052a8:	f383 8811 	msr	BASEPRI, r3
 80052ac:	f3bf 8f6f 	isb	sy
 80052b0:	f3bf 8f4f 	dsb	sy
 80052b4:	61bb      	str	r3, [r7, #24]
}
 80052b6:	bf00      	nop
 80052b8:	bf00      	nop
 80052ba:	e7fd      	b.n	80052b8 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80052bc:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 80052c2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d00d      	beq.n	80052e4 <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80052c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052ca:	2201      	movs	r2, #1
 80052cc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80052d0:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 80052d4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80052d6:	9300      	str	r3, [sp, #0]
 80052d8:	4613      	mov	r3, r2
 80052da:	687a      	ldr	r2, [r7, #4]
 80052dc:	68b9      	ldr	r1, [r7, #8]
 80052de:	68f8      	ldr	r0, [r7, #12]
 80052e0:	f000 f840 	bl	8005364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80052e4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 80052e6:	4618      	mov	r0, r3
 80052e8:	3730      	adds	r7, #48	@ 0x30
 80052ea:	46bd      	mov	sp, r7
 80052ec:	bd80      	pop	{r7, pc}

080052ee <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80052ee:	b580      	push	{r7, lr}
 80052f0:	b08a      	sub	sp, #40	@ 0x28
 80052f2:	af02      	add	r7, sp, #8
 80052f4:	60f8      	str	r0, [r7, #12]
 80052f6:	60b9      	str	r1, [r7, #8]
 80052f8:	4613      	mov	r3, r2
 80052fa:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80052fc:	68fb      	ldr	r3, [r7, #12]
 80052fe:	2b00      	cmp	r3, #0
 8005300:	d10b      	bne.n	800531a <xQueueGenericCreate+0x2c>
	__asm volatile
 8005302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005306:	f383 8811 	msr	BASEPRI, r3
 800530a:	f3bf 8f6f 	isb	sy
 800530e:	f3bf 8f4f 	dsb	sy
 8005312:	613b      	str	r3, [r7, #16]
}
 8005314:	bf00      	nop
 8005316:	bf00      	nop
 8005318:	e7fd      	b.n	8005316 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800531a:	68fb      	ldr	r3, [r7, #12]
 800531c:	68ba      	ldr	r2, [r7, #8]
 800531e:	fb02 f303 	mul.w	r3, r2, r3
 8005322:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005324:	69fb      	ldr	r3, [r7, #28]
 8005326:	3350      	adds	r3, #80	@ 0x50
 8005328:	4618      	mov	r0, r3
 800532a:	f002 f997 	bl	800765c <pvPortMalloc>
 800532e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005330:	69bb      	ldr	r3, [r7, #24]
 8005332:	2b00      	cmp	r3, #0
 8005334:	d011      	beq.n	800535a <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005336:	69bb      	ldr	r3, [r7, #24]
 8005338:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800533a:	697b      	ldr	r3, [r7, #20]
 800533c:	3350      	adds	r3, #80	@ 0x50
 800533e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005340:	69bb      	ldr	r3, [r7, #24]
 8005342:	2200      	movs	r2, #0
 8005344:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005348:	79fa      	ldrb	r2, [r7, #7]
 800534a:	69bb      	ldr	r3, [r7, #24]
 800534c:	9300      	str	r3, [sp, #0]
 800534e:	4613      	mov	r3, r2
 8005350:	697a      	ldr	r2, [r7, #20]
 8005352:	68b9      	ldr	r1, [r7, #8]
 8005354:	68f8      	ldr	r0, [r7, #12]
 8005356:	f000 f805 	bl	8005364 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800535a:	69bb      	ldr	r3, [r7, #24]
	}
 800535c:	4618      	mov	r0, r3
 800535e:	3720      	adds	r7, #32
 8005360:	46bd      	mov	sp, r7
 8005362:	bd80      	pop	{r7, pc}

08005364 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005364:	b580      	push	{r7, lr}
 8005366:	b084      	sub	sp, #16
 8005368:	af00      	add	r7, sp, #0
 800536a:	60f8      	str	r0, [r7, #12]
 800536c:	60b9      	str	r1, [r7, #8]
 800536e:	607a      	str	r2, [r7, #4]
 8005370:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005372:	68bb      	ldr	r3, [r7, #8]
 8005374:	2b00      	cmp	r3, #0
 8005376:	d103      	bne.n	8005380 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005378:	69bb      	ldr	r3, [r7, #24]
 800537a:	69ba      	ldr	r2, [r7, #24]
 800537c:	601a      	str	r2, [r3, #0]
 800537e:	e002      	b.n	8005386 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005380:	69bb      	ldr	r3, [r7, #24]
 8005382:	687a      	ldr	r2, [r7, #4]
 8005384:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005386:	69bb      	ldr	r3, [r7, #24]
 8005388:	68fa      	ldr	r2, [r7, #12]
 800538a:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800538c:	69bb      	ldr	r3, [r7, #24]
 800538e:	68ba      	ldr	r2, [r7, #8]
 8005390:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005392:	2101      	movs	r1, #1
 8005394:	69b8      	ldr	r0, [r7, #24]
 8005396:	f7ff fec3 	bl	8005120 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800539a:	69bb      	ldr	r3, [r7, #24]
 800539c:	78fa      	ldrb	r2, [r7, #3]
 800539e:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 80053a2:	bf00      	nop
 80053a4:	3710      	adds	r7, #16
 80053a6:	46bd      	mov	sp, r7
 80053a8:	bd80      	pop	{r7, pc}
	...

080053ac <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80053ac:	b580      	push	{r7, lr}
 80053ae:	b08e      	sub	sp, #56	@ 0x38
 80053b0:	af00      	add	r7, sp, #0
 80053b2:	60f8      	str	r0, [r7, #12]
 80053b4:	60b9      	str	r1, [r7, #8]
 80053b6:	607a      	str	r2, [r7, #4]
 80053b8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80053ba:	2300      	movs	r3, #0
 80053bc:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053be:	68fb      	ldr	r3, [r7, #12]
 80053c0:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80053c2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d10b      	bne.n	80053e0 <xQueueGenericSend+0x34>
	__asm volatile
 80053c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053cc:	f383 8811 	msr	BASEPRI, r3
 80053d0:	f3bf 8f6f 	isb	sy
 80053d4:	f3bf 8f4f 	dsb	sy
 80053d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80053da:	bf00      	nop
 80053dc:	bf00      	nop
 80053de:	e7fd      	b.n	80053dc <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e0:	68bb      	ldr	r3, [r7, #8]
 80053e2:	2b00      	cmp	r3, #0
 80053e4:	d103      	bne.n	80053ee <xQueueGenericSend+0x42>
 80053e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80053e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053ea:	2b00      	cmp	r3, #0
 80053ec:	d101      	bne.n	80053f2 <xQueueGenericSend+0x46>
 80053ee:	2301      	movs	r3, #1
 80053f0:	e000      	b.n	80053f4 <xQueueGenericSend+0x48>
 80053f2:	2300      	movs	r3, #0
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d10b      	bne.n	8005410 <xQueueGenericSend+0x64>
	__asm volatile
 80053f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053fc:	f383 8811 	msr	BASEPRI, r3
 8005400:	f3bf 8f6f 	isb	sy
 8005404:	f3bf 8f4f 	dsb	sy
 8005408:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800540a:	bf00      	nop
 800540c:	bf00      	nop
 800540e:	e7fd      	b.n	800540c <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005410:	683b      	ldr	r3, [r7, #0]
 8005412:	2b02      	cmp	r3, #2
 8005414:	d103      	bne.n	800541e <xQueueGenericSend+0x72>
 8005416:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005418:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800541a:	2b01      	cmp	r3, #1
 800541c:	d101      	bne.n	8005422 <xQueueGenericSend+0x76>
 800541e:	2301      	movs	r3, #1
 8005420:	e000      	b.n	8005424 <xQueueGenericSend+0x78>
 8005422:	2300      	movs	r3, #0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d10b      	bne.n	8005440 <xQueueGenericSend+0x94>
	__asm volatile
 8005428:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800542c:	f383 8811 	msr	BASEPRI, r3
 8005430:	f3bf 8f6f 	isb	sy
 8005434:	f3bf 8f4f 	dsb	sy
 8005438:	623b      	str	r3, [r7, #32]
}
 800543a:	bf00      	nop
 800543c:	bf00      	nop
 800543e:	e7fd      	b.n	800543c <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005440:	f001 fa7e 	bl	8006940 <xTaskGetSchedulerState>
 8005444:	4603      	mov	r3, r0
 8005446:	2b00      	cmp	r3, #0
 8005448:	d102      	bne.n	8005450 <xQueueGenericSend+0xa4>
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d101      	bne.n	8005454 <xQueueGenericSend+0xa8>
 8005450:	2301      	movs	r3, #1
 8005452:	e000      	b.n	8005456 <xQueueGenericSend+0xaa>
 8005454:	2300      	movs	r3, #0
 8005456:	2b00      	cmp	r3, #0
 8005458:	d10b      	bne.n	8005472 <xQueueGenericSend+0xc6>
	__asm volatile
 800545a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800545e:	f383 8811 	msr	BASEPRI, r3
 8005462:	f3bf 8f6f 	isb	sy
 8005466:	f3bf 8f4f 	dsb	sy
 800546a:	61fb      	str	r3, [r7, #28]
}
 800546c:	bf00      	nop
 800546e:	bf00      	nop
 8005470:	e7fd      	b.n	800546e <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005472:	f001 ffd1 	bl	8007418 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005476:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005478:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800547a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800547c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800547e:	429a      	cmp	r2, r3
 8005480:	d302      	bcc.n	8005488 <xQueueGenericSend+0xdc>
 8005482:	683b      	ldr	r3, [r7, #0]
 8005484:	2b02      	cmp	r3, #2
 8005486:	d129      	bne.n	80054dc <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005488:	683a      	ldr	r2, [r7, #0]
 800548a:	68b9      	ldr	r1, [r7, #8]
 800548c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800548e:	f000 fa91 	bl	80059b4 <prvCopyDataToQueue>
 8005492:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005494:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005496:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005498:	2b00      	cmp	r3, #0
 800549a:	d010      	beq.n	80054be <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800549c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800549e:	3324      	adds	r3, #36	@ 0x24
 80054a0:	4618      	mov	r0, r3
 80054a2:	f001 f887 	bl	80065b4 <xTaskRemoveFromEventList>
 80054a6:	4603      	mov	r3, r0
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d013      	beq.n	80054d4 <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80054ac:	4b3f      	ldr	r3, [pc, #252]	@ (80055ac <xQueueGenericSend+0x200>)
 80054ae:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054b2:	601a      	str	r2, [r3, #0]
 80054b4:	f3bf 8f4f 	dsb	sy
 80054b8:	f3bf 8f6f 	isb	sy
 80054bc:	e00a      	b.n	80054d4 <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80054be:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d007      	beq.n	80054d4 <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80054c4:	4b39      	ldr	r3, [pc, #228]	@ (80055ac <xQueueGenericSend+0x200>)
 80054c6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80054ca:	601a      	str	r2, [r3, #0]
 80054cc:	f3bf 8f4f 	dsb	sy
 80054d0:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80054d4:	f001 ffd2 	bl	800747c <vPortExitCritical>
				return pdPASS;
 80054d8:	2301      	movs	r3, #1
 80054da:	e063      	b.n	80055a4 <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	2b00      	cmp	r3, #0
 80054e0:	d103      	bne.n	80054ea <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80054e2:	f001 ffcb 	bl	800747c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80054e6:	2300      	movs	r3, #0
 80054e8:	e05c      	b.n	80055a4 <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054ea:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d106      	bne.n	80054fe <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054f0:	f107 0314 	add.w	r3, r7, #20
 80054f4:	4618      	mov	r0, r3
 80054f6:	f001 f8c1 	bl	800667c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054fa:	2301      	movs	r3, #1
 80054fc:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054fe:	f001 ffbd 	bl	800747c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005502:	f000 fe29 	bl	8006158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005506:	f001 ff87 	bl	8007418 <vPortEnterCritical>
 800550a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800550c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005510:	b25b      	sxtb	r3, r3
 8005512:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005516:	d103      	bne.n	8005520 <xQueueGenericSend+0x174>
 8005518:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800551a:	2200      	movs	r2, #0
 800551c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005520:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005522:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005526:	b25b      	sxtb	r3, r3
 8005528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800552c:	d103      	bne.n	8005536 <xQueueGenericSend+0x18a>
 800552e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005530:	2200      	movs	r2, #0
 8005532:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005536:	f001 ffa1 	bl	800747c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800553a:	1d3a      	adds	r2, r7, #4
 800553c:	f107 0314 	add.w	r3, r7, #20
 8005540:	4611      	mov	r1, r2
 8005542:	4618      	mov	r0, r3
 8005544:	f001 f8b0 	bl	80066a8 <xTaskCheckForTimeOut>
 8005548:	4603      	mov	r3, r0
 800554a:	2b00      	cmp	r3, #0
 800554c:	d124      	bne.n	8005598 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800554e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005550:	f000 fb28 	bl	8005ba4 <prvIsQueueFull>
 8005554:	4603      	mov	r3, r0
 8005556:	2b00      	cmp	r3, #0
 8005558:	d018      	beq.n	800558c <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800555a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800555c:	3310      	adds	r3, #16
 800555e:	687a      	ldr	r2, [r7, #4]
 8005560:	4611      	mov	r1, r2
 8005562:	4618      	mov	r0, r3
 8005564:	f000 ffd4 	bl	8006510 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005568:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800556a:	f000 fab3 	bl	8005ad4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800556e:	f000 fe01 	bl	8006174 <xTaskResumeAll>
 8005572:	4603      	mov	r3, r0
 8005574:	2b00      	cmp	r3, #0
 8005576:	f47f af7c 	bne.w	8005472 <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 800557a:	4b0c      	ldr	r3, [pc, #48]	@ (80055ac <xQueueGenericSend+0x200>)
 800557c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005580:	601a      	str	r2, [r3, #0]
 8005582:	f3bf 8f4f 	dsb	sy
 8005586:	f3bf 8f6f 	isb	sy
 800558a:	e772      	b.n	8005472 <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800558c:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800558e:	f000 faa1 	bl	8005ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005592:	f000 fdef 	bl	8006174 <xTaskResumeAll>
 8005596:	e76c      	b.n	8005472 <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005598:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 800559a:	f000 fa9b 	bl	8005ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800559e:	f000 fde9 	bl	8006174 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80055a2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80055a4:	4618      	mov	r0, r3
 80055a6:	3738      	adds	r7, #56	@ 0x38
 80055a8:	46bd      	mov	sp, r7
 80055aa:	bd80      	pop	{r7, pc}
 80055ac:	e000ed04 	.word	0xe000ed04

080055b0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80055b0:	b580      	push	{r7, lr}
 80055b2:	b090      	sub	sp, #64	@ 0x40
 80055b4:	af00      	add	r7, sp, #0
 80055b6:	60f8      	str	r0, [r7, #12]
 80055b8:	60b9      	str	r1, [r7, #8]
 80055ba:	607a      	str	r2, [r7, #4]
 80055bc:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80055be:	68fb      	ldr	r3, [r7, #12]
 80055c0:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 80055c2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055c4:	2b00      	cmp	r3, #0
 80055c6:	d10b      	bne.n	80055e0 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 80055c8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055cc:	f383 8811 	msr	BASEPRI, r3
 80055d0:	f3bf 8f6f 	isb	sy
 80055d4:	f3bf 8f4f 	dsb	sy
 80055d8:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80055da:	bf00      	nop
 80055dc:	bf00      	nop
 80055de:	e7fd      	b.n	80055dc <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055e0:	68bb      	ldr	r3, [r7, #8]
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d103      	bne.n	80055ee <xQueueGenericSendFromISR+0x3e>
 80055e6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80055e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d101      	bne.n	80055f2 <xQueueGenericSendFromISR+0x42>
 80055ee:	2301      	movs	r3, #1
 80055f0:	e000      	b.n	80055f4 <xQueueGenericSendFromISR+0x44>
 80055f2:	2300      	movs	r3, #0
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d10b      	bne.n	8005610 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80055f8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055fc:	f383 8811 	msr	BASEPRI, r3
 8005600:	f3bf 8f6f 	isb	sy
 8005604:	f3bf 8f4f 	dsb	sy
 8005608:	627b      	str	r3, [r7, #36]	@ 0x24
}
 800560a:	bf00      	nop
 800560c:	bf00      	nop
 800560e:	e7fd      	b.n	800560c <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005610:	683b      	ldr	r3, [r7, #0]
 8005612:	2b02      	cmp	r3, #2
 8005614:	d103      	bne.n	800561e <xQueueGenericSendFromISR+0x6e>
 8005616:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005618:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800561a:	2b01      	cmp	r3, #1
 800561c:	d101      	bne.n	8005622 <xQueueGenericSendFromISR+0x72>
 800561e:	2301      	movs	r3, #1
 8005620:	e000      	b.n	8005624 <xQueueGenericSendFromISR+0x74>
 8005622:	2300      	movs	r3, #0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d10b      	bne.n	8005640 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 8005628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800562c:	f383 8811 	msr	BASEPRI, r3
 8005630:	f3bf 8f6f 	isb	sy
 8005634:	f3bf 8f4f 	dsb	sy
 8005638:	623b      	str	r3, [r7, #32]
}
 800563a:	bf00      	nop
 800563c:	bf00      	nop
 800563e:	e7fd      	b.n	800563c <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005640:	f001 ffca 	bl	80075d8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8005644:	f3ef 8211 	mrs	r2, BASEPRI
 8005648:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800564c:	f383 8811 	msr	BASEPRI, r3
 8005650:	f3bf 8f6f 	isb	sy
 8005654:	f3bf 8f4f 	dsb	sy
 8005658:	61fa      	str	r2, [r7, #28]
 800565a:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800565c:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005660:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005662:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005664:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005666:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005668:	429a      	cmp	r2, r3
 800566a:	d302      	bcc.n	8005672 <xQueueGenericSendFromISR+0xc2>
 800566c:	683b      	ldr	r3, [r7, #0]
 800566e:	2b02      	cmp	r3, #2
 8005670:	d12f      	bne.n	80056d2 <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8005672:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005674:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005678:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800567c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800567e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005680:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005682:	683a      	ldr	r2, [r7, #0]
 8005684:	68b9      	ldr	r1, [r7, #8]
 8005686:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005688:	f000 f994 	bl	80059b4 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800568c:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005690:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005694:	d112      	bne.n	80056bc <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005696:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005698:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800569a:	2b00      	cmp	r3, #0
 800569c:	d016      	beq.n	80056cc <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800569e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056a0:	3324      	adds	r3, #36	@ 0x24
 80056a2:	4618      	mov	r0, r3
 80056a4:	f000 ff86 	bl	80065b4 <xTaskRemoveFromEventList>
 80056a8:	4603      	mov	r3, r0
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d00e      	beq.n	80056cc <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	d00b      	beq.n	80056cc <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	2201      	movs	r2, #1
 80056b8:	601a      	str	r2, [r3, #0]
 80056ba:	e007      	b.n	80056cc <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80056bc:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 80056c0:	3301      	adds	r3, #1
 80056c2:	b2db      	uxtb	r3, r3
 80056c4:	b25a      	sxtb	r2, r3
 80056c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80056c8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 80056cc:	2301      	movs	r3, #1
 80056ce:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 80056d0:	e001      	b.n	80056d6 <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80056d2:	2300      	movs	r3, #0
 80056d4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80056d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80056d8:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80056da:	697b      	ldr	r3, [r7, #20]
 80056dc:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80056e0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80056e2:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80056e4:	4618      	mov	r0, r3
 80056e6:	3740      	adds	r7, #64	@ 0x40
 80056e8:	46bd      	mov	sp, r7
 80056ea:	bd80      	pop	{r7, pc}

080056ec <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80056ec:	b580      	push	{r7, lr}
 80056ee:	b08c      	sub	sp, #48	@ 0x30
 80056f0:	af00      	add	r7, sp, #0
 80056f2:	60f8      	str	r0, [r7, #12]
 80056f4:	60b9      	str	r1, [r7, #8]
 80056f6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80056f8:	2300      	movs	r3, #0
 80056fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80056fc:	68fb      	ldr	r3, [r7, #12]
 80056fe:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8005700:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10b      	bne.n	800571e <xQueueReceive+0x32>
	__asm volatile
 8005706:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800570a:	f383 8811 	msr	BASEPRI, r3
 800570e:	f3bf 8f6f 	isb	sy
 8005712:	f3bf 8f4f 	dsb	sy
 8005716:	623b      	str	r3, [r7, #32]
}
 8005718:	bf00      	nop
 800571a:	bf00      	nop
 800571c:	e7fd      	b.n	800571a <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800571e:	68bb      	ldr	r3, [r7, #8]
 8005720:	2b00      	cmp	r3, #0
 8005722:	d103      	bne.n	800572c <xQueueReceive+0x40>
 8005724:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005726:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005728:	2b00      	cmp	r3, #0
 800572a:	d101      	bne.n	8005730 <xQueueReceive+0x44>
 800572c:	2301      	movs	r3, #1
 800572e:	e000      	b.n	8005732 <xQueueReceive+0x46>
 8005730:	2300      	movs	r3, #0
 8005732:	2b00      	cmp	r3, #0
 8005734:	d10b      	bne.n	800574e <xQueueReceive+0x62>
	__asm volatile
 8005736:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800573a:	f383 8811 	msr	BASEPRI, r3
 800573e:	f3bf 8f6f 	isb	sy
 8005742:	f3bf 8f4f 	dsb	sy
 8005746:	61fb      	str	r3, [r7, #28]
}
 8005748:	bf00      	nop
 800574a:	bf00      	nop
 800574c:	e7fd      	b.n	800574a <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800574e:	f001 f8f7 	bl	8006940 <xTaskGetSchedulerState>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d102      	bne.n	800575e <xQueueReceive+0x72>
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2b00      	cmp	r3, #0
 800575c:	d101      	bne.n	8005762 <xQueueReceive+0x76>
 800575e:	2301      	movs	r3, #1
 8005760:	e000      	b.n	8005764 <xQueueReceive+0x78>
 8005762:	2300      	movs	r3, #0
 8005764:	2b00      	cmp	r3, #0
 8005766:	d10b      	bne.n	8005780 <xQueueReceive+0x94>
	__asm volatile
 8005768:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800576c:	f383 8811 	msr	BASEPRI, r3
 8005770:	f3bf 8f6f 	isb	sy
 8005774:	f3bf 8f4f 	dsb	sy
 8005778:	61bb      	str	r3, [r7, #24]
}
 800577a:	bf00      	nop
 800577c:	bf00      	nop
 800577e:	e7fd      	b.n	800577c <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005780:	f001 fe4a 	bl	8007418 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005784:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005786:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005788:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800578a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800578c:	2b00      	cmp	r3, #0
 800578e:	d01f      	beq.n	80057d0 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005790:	68b9      	ldr	r1, [r7, #8]
 8005792:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005794:	f000 f978 	bl	8005a88 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005798:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800579a:	1e5a      	subs	r2, r3, #1
 800579c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800579e:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057a0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057a2:	691b      	ldr	r3, [r3, #16]
 80057a4:	2b00      	cmp	r3, #0
 80057a6:	d00f      	beq.n	80057c8 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80057a8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80057aa:	3310      	adds	r3, #16
 80057ac:	4618      	mov	r0, r3
 80057ae:	f000 ff01 	bl	80065b4 <xTaskRemoveFromEventList>
 80057b2:	4603      	mov	r3, r0
 80057b4:	2b00      	cmp	r3, #0
 80057b6:	d007      	beq.n	80057c8 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80057b8:	4b3c      	ldr	r3, [pc, #240]	@ (80058ac <xQueueReceive+0x1c0>)
 80057ba:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80057be:	601a      	str	r2, [r3, #0]
 80057c0:	f3bf 8f4f 	dsb	sy
 80057c4:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80057c8:	f001 fe58 	bl	800747c <vPortExitCritical>
				return pdPASS;
 80057cc:	2301      	movs	r3, #1
 80057ce:	e069      	b.n	80058a4 <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	2b00      	cmp	r3, #0
 80057d4:	d103      	bne.n	80057de <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80057d6:	f001 fe51 	bl	800747c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80057da:	2300      	movs	r3, #0
 80057dc:	e062      	b.n	80058a4 <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80057de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d106      	bne.n	80057f2 <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80057e4:	f107 0310 	add.w	r3, r7, #16
 80057e8:	4618      	mov	r0, r3
 80057ea:	f000 ff47 	bl	800667c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80057ee:	2301      	movs	r3, #1
 80057f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80057f2:	f001 fe43 	bl	800747c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80057f6:	f000 fcaf 	bl	8006158 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80057fa:	f001 fe0d 	bl	8007418 <vPortEnterCritical>
 80057fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005800:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005804:	b25b      	sxtb	r3, r3
 8005806:	f1b3 3fff 	cmp.w	r3, #4294967295
 800580a:	d103      	bne.n	8005814 <xQueueReceive+0x128>
 800580c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800580e:	2200      	movs	r2, #0
 8005810:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005814:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005816:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800581a:	b25b      	sxtb	r3, r3
 800581c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005820:	d103      	bne.n	800582a <xQueueReceive+0x13e>
 8005822:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005824:	2200      	movs	r2, #0
 8005826:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 800582a:	f001 fe27 	bl	800747c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800582e:	1d3a      	adds	r2, r7, #4
 8005830:	f107 0310 	add.w	r3, r7, #16
 8005834:	4611      	mov	r1, r2
 8005836:	4618      	mov	r0, r3
 8005838:	f000 ff36 	bl	80066a8 <xTaskCheckForTimeOut>
 800583c:	4603      	mov	r3, r0
 800583e:	2b00      	cmp	r3, #0
 8005840:	d123      	bne.n	800588a <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005842:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005844:	f000 f998 	bl	8005b78 <prvIsQueueEmpty>
 8005848:	4603      	mov	r3, r0
 800584a:	2b00      	cmp	r3, #0
 800584c:	d017      	beq.n	800587e <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800584e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005850:	3324      	adds	r3, #36	@ 0x24
 8005852:	687a      	ldr	r2, [r7, #4]
 8005854:	4611      	mov	r1, r2
 8005856:	4618      	mov	r0, r3
 8005858:	f000 fe5a 	bl	8006510 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800585c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800585e:	f000 f939 	bl	8005ad4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8005862:	f000 fc87 	bl	8006174 <xTaskResumeAll>
 8005866:	4603      	mov	r3, r0
 8005868:	2b00      	cmp	r3, #0
 800586a:	d189      	bne.n	8005780 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 800586c:	4b0f      	ldr	r3, [pc, #60]	@ (80058ac <xQueueReceive+0x1c0>)
 800586e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	f3bf 8f4f 	dsb	sy
 8005878:	f3bf 8f6f 	isb	sy
 800587c:	e780      	b.n	8005780 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800587e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005880:	f000 f928 	bl	8005ad4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8005884:	f000 fc76 	bl	8006174 <xTaskResumeAll>
 8005888:	e77a      	b.n	8005780 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800588a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800588c:	f000 f922 	bl	8005ad4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005890:	f000 fc70 	bl	8006174 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8005894:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005896:	f000 f96f 	bl	8005b78 <prvIsQueueEmpty>
 800589a:	4603      	mov	r3, r0
 800589c:	2b00      	cmp	r3, #0
 800589e:	f43f af6f 	beq.w	8005780 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80058a2:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80058a4:	4618      	mov	r0, r3
 80058a6:	3730      	adds	r7, #48	@ 0x30
 80058a8:	46bd      	mov	sp, r7
 80058aa:	bd80      	pop	{r7, pc}
 80058ac:	e000ed04 	.word	0xe000ed04

080058b0 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80058b0:	b580      	push	{r7, lr}
 80058b2:	b08e      	sub	sp, #56	@ 0x38
 80058b4:	af00      	add	r7, sp, #0
 80058b6:	60f8      	str	r0, [r7, #12]
 80058b8:	60b9      	str	r1, [r7, #8]
 80058ba:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80058bc:	68fb      	ldr	r3, [r7, #12]
 80058be:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 80058c0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d10b      	bne.n	80058de <xQueueReceiveFromISR+0x2e>
	__asm volatile
 80058c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058ca:	f383 8811 	msr	BASEPRI, r3
 80058ce:	f3bf 8f6f 	isb	sy
 80058d2:	f3bf 8f4f 	dsb	sy
 80058d6:	623b      	str	r3, [r7, #32]
}
 80058d8:	bf00      	nop
 80058da:	bf00      	nop
 80058dc:	e7fd      	b.n	80058da <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80058de:	68bb      	ldr	r3, [r7, #8]
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d103      	bne.n	80058ec <xQueueReceiveFromISR+0x3c>
 80058e4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80058e6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80058e8:	2b00      	cmp	r3, #0
 80058ea:	d101      	bne.n	80058f0 <xQueueReceiveFromISR+0x40>
 80058ec:	2301      	movs	r3, #1
 80058ee:	e000      	b.n	80058f2 <xQueueReceiveFromISR+0x42>
 80058f0:	2300      	movs	r3, #0
 80058f2:	2b00      	cmp	r3, #0
 80058f4:	d10b      	bne.n	800590e <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80058f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80058fa:	f383 8811 	msr	BASEPRI, r3
 80058fe:	f3bf 8f6f 	isb	sy
 8005902:	f3bf 8f4f 	dsb	sy
 8005906:	61fb      	str	r3, [r7, #28]
}
 8005908:	bf00      	nop
 800590a:	bf00      	nop
 800590c:	e7fd      	b.n	800590a <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800590e:	f001 fe63 	bl	80075d8 <vPortValidateInterruptPriority>
	__asm volatile
 8005912:	f3ef 8211 	mrs	r2, BASEPRI
 8005916:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800591a:	f383 8811 	msr	BASEPRI, r3
 800591e:	f3bf 8f6f 	isb	sy
 8005922:	f3bf 8f4f 	dsb	sy
 8005926:	61ba      	str	r2, [r7, #24]
 8005928:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800592a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800592c:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800592e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005930:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005932:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005934:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005936:	2b00      	cmp	r3, #0
 8005938:	d02f      	beq.n	800599a <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800593a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005940:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005948:	f000 f89e 	bl	8005a88 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800594c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800594e:	1e5a      	subs	r2, r3, #1
 8005950:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005952:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 8005954:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005958:	f1b3 3fff 	cmp.w	r3, #4294967295
 800595c:	d112      	bne.n	8005984 <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800595e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005960:	691b      	ldr	r3, [r3, #16]
 8005962:	2b00      	cmp	r3, #0
 8005964:	d016      	beq.n	8005994 <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005966:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005968:	3310      	adds	r3, #16
 800596a:	4618      	mov	r0, r3
 800596c:	f000 fe22 	bl	80065b4 <xTaskRemoveFromEventList>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d00e      	beq.n	8005994 <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	2b00      	cmp	r3, #0
 800597a:	d00b      	beq.n	8005994 <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e007      	b.n	8005994 <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 8005984:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005988:	3301      	adds	r3, #1
 800598a:	b2db      	uxtb	r3, r3
 800598c:	b25a      	sxtb	r2, r3
 800598e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005990:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 8005994:	2301      	movs	r3, #1
 8005996:	637b      	str	r3, [r7, #52]	@ 0x34
 8005998:	e001      	b.n	800599e <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 800599a:	2300      	movs	r3, #0
 800599c:	637b      	str	r3, [r7, #52]	@ 0x34
 800599e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80059a0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80059a2:	693b      	ldr	r3, [r7, #16]
 80059a4:	f383 8811 	msr	BASEPRI, r3
}
 80059a8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80059aa:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 80059ac:	4618      	mov	r0, r3
 80059ae:	3738      	adds	r7, #56	@ 0x38
 80059b0:	46bd      	mov	sp, r7
 80059b2:	bd80      	pop	{r7, pc}

080059b4 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80059b4:	b580      	push	{r7, lr}
 80059b6:	b086      	sub	sp, #24
 80059b8:	af00      	add	r7, sp, #0
 80059ba:	60f8      	str	r0, [r7, #12]
 80059bc:	60b9      	str	r1, [r7, #8]
 80059be:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80059c0:	2300      	movs	r3, #0
 80059c2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059c8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80059ca:	68fb      	ldr	r3, [r7, #12]
 80059cc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d10d      	bne.n	80059ee <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80059d2:	68fb      	ldr	r3, [r7, #12]
 80059d4:	681b      	ldr	r3, [r3, #0]
 80059d6:	2b00      	cmp	r3, #0
 80059d8:	d14d      	bne.n	8005a76 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80059da:	68fb      	ldr	r3, [r7, #12]
 80059dc:	689b      	ldr	r3, [r3, #8]
 80059de:	4618      	mov	r0, r3
 80059e0:	f000 ffcc 	bl	800697c <xTaskPriorityDisinherit>
 80059e4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80059e6:	68fb      	ldr	r3, [r7, #12]
 80059e8:	2200      	movs	r2, #0
 80059ea:	609a      	str	r2, [r3, #8]
 80059ec:	e043      	b.n	8005a76 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	2b00      	cmp	r3, #0
 80059f2:	d119      	bne.n	8005a28 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80059f4:	68fb      	ldr	r3, [r7, #12]
 80059f6:	6858      	ldr	r0, [r3, #4]
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80059fc:	461a      	mov	r2, r3
 80059fe:	68b9      	ldr	r1, [r7, #8]
 8005a00:	f002 fb0d 	bl	800801e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a04:	68fb      	ldr	r3, [r7, #12]
 8005a06:	685a      	ldr	r2, [r3, #4]
 8005a08:	68fb      	ldr	r3, [r7, #12]
 8005a0a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a0c:	441a      	add	r2, r3
 8005a0e:	68fb      	ldr	r3, [r7, #12]
 8005a10:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a12:	68fb      	ldr	r3, [r7, #12]
 8005a14:	685a      	ldr	r2, [r3, #4]
 8005a16:	68fb      	ldr	r3, [r7, #12]
 8005a18:	689b      	ldr	r3, [r3, #8]
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	d32b      	bcc.n	8005a76 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8005a1e:	68fb      	ldr	r3, [r7, #12]
 8005a20:	681a      	ldr	r2, [r3, #0]
 8005a22:	68fb      	ldr	r3, [r7, #12]
 8005a24:	605a      	str	r2, [r3, #4]
 8005a26:	e026      	b.n	8005a76 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	68d8      	ldr	r0, [r3, #12]
 8005a2c:	68fb      	ldr	r3, [r7, #12]
 8005a2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a30:	461a      	mov	r2, r3
 8005a32:	68b9      	ldr	r1, [r7, #8]
 8005a34:	f002 faf3 	bl	800801e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	68da      	ldr	r2, [r3, #12]
 8005a3c:	68fb      	ldr	r3, [r7, #12]
 8005a3e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a40:	425b      	negs	r3, r3
 8005a42:	441a      	add	r2, r3
 8005a44:	68fb      	ldr	r3, [r7, #12]
 8005a46:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005a48:	68fb      	ldr	r3, [r7, #12]
 8005a4a:	68da      	ldr	r2, [r3, #12]
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d207      	bcs.n	8005a64 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8005a54:	68fb      	ldr	r3, [r7, #12]
 8005a56:	689a      	ldr	r2, [r3, #8]
 8005a58:	68fb      	ldr	r3, [r7, #12]
 8005a5a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a5c:	425b      	negs	r3, r3
 8005a5e:	441a      	add	r2, r3
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2b02      	cmp	r3, #2
 8005a68:	d105      	bne.n	8005a76 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005a6a:	693b      	ldr	r3, [r7, #16]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d002      	beq.n	8005a76 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005a70:	693b      	ldr	r3, [r7, #16]
 8005a72:	3b01      	subs	r3, #1
 8005a74:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8005a76:	693b      	ldr	r3, [r7, #16]
 8005a78:	1c5a      	adds	r2, r3, #1
 8005a7a:	68fb      	ldr	r3, [r7, #12]
 8005a7c:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005a7e:	697b      	ldr	r3, [r7, #20]
}
 8005a80:	4618      	mov	r0, r3
 8005a82:	3718      	adds	r7, #24
 8005a84:	46bd      	mov	sp, r7
 8005a86:	bd80      	pop	{r7, pc}

08005a88 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	b082      	sub	sp, #8
 8005a8c:	af00      	add	r7, sp, #0
 8005a8e:	6078      	str	r0, [r7, #4]
 8005a90:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005a96:	2b00      	cmp	r3, #0
 8005a98:	d018      	beq.n	8005acc <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005a9a:	687b      	ldr	r3, [r7, #4]
 8005a9c:	68da      	ldr	r2, [r3, #12]
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005aa2:	441a      	add	r2, r3
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	68da      	ldr	r2, [r3, #12]
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	689b      	ldr	r3, [r3, #8]
 8005ab0:	429a      	cmp	r2, r3
 8005ab2:	d303      	bcc.n	8005abc <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681a      	ldr	r2, [r3, #0]
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	68d9      	ldr	r1, [r3, #12]
 8005ac0:	687b      	ldr	r3, [r7, #4]
 8005ac2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005ac4:	461a      	mov	r2, r3
 8005ac6:	6838      	ldr	r0, [r7, #0]
 8005ac8:	f002 faa9 	bl	800801e <memcpy>
	}
}
 8005acc:	bf00      	nop
 8005ace:	3708      	adds	r7, #8
 8005ad0:	46bd      	mov	sp, r7
 8005ad2:	bd80      	pop	{r7, pc}

08005ad4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8005ad4:	b580      	push	{r7, lr}
 8005ad6:	b084      	sub	sp, #16
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8005adc:	f001 fc9c 	bl	8007418 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005ae6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005ae8:	e011      	b.n	8005b0e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005aee:	2b00      	cmp	r3, #0
 8005af0:	d012      	beq.n	8005b18 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	3324      	adds	r3, #36	@ 0x24
 8005af6:	4618      	mov	r0, r3
 8005af8:	f000 fd5c 	bl	80065b4 <xTaskRemoveFromEventList>
 8005afc:	4603      	mov	r3, r0
 8005afe:	2b00      	cmp	r3, #0
 8005b00:	d001      	beq.n	8005b06 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8005b02:	f000 fe35 	bl	8006770 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8005b06:	7bfb      	ldrb	r3, [r7, #15]
 8005b08:	3b01      	subs	r3, #1
 8005b0a:	b2db      	uxtb	r3, r3
 8005b0c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8005b0e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8005b12:	2b00      	cmp	r3, #0
 8005b14:	dce9      	bgt.n	8005aea <prvUnlockQueue+0x16>
 8005b16:	e000      	b.n	8005b1a <prvUnlockQueue+0x46>
					break;
 8005b18:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	22ff      	movs	r2, #255	@ 0xff
 8005b1e:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 8005b22:	f001 fcab 	bl	800747c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8005b26:	f001 fc77 	bl	8007418 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005b30:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b32:	e011      	b.n	8005b58 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	691b      	ldr	r3, [r3, #16]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d012      	beq.n	8005b62 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	3310      	adds	r3, #16
 8005b40:	4618      	mov	r0, r3
 8005b42:	f000 fd37 	bl	80065b4 <xTaskRemoveFromEventList>
 8005b46:	4603      	mov	r3, r0
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d001      	beq.n	8005b50 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005b4c:	f000 fe10 	bl	8006770 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005b50:	7bbb      	ldrb	r3, [r7, #14]
 8005b52:	3b01      	subs	r3, #1
 8005b54:	b2db      	uxtb	r3, r3
 8005b56:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005b58:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	dce9      	bgt.n	8005b34 <prvUnlockQueue+0x60>
 8005b60:	e000      	b.n	8005b64 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 8005b62:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8005b64:	687b      	ldr	r3, [r7, #4]
 8005b66:	22ff      	movs	r2, #255	@ 0xff
 8005b68:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005b6c:	f001 fc86 	bl	800747c <vPortExitCritical>
}
 8005b70:	bf00      	nop
 8005b72:	3710      	adds	r7, #16
 8005b74:	46bd      	mov	sp, r7
 8005b76:	bd80      	pop	{r7, pc}

08005b78 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005b78:	b580      	push	{r7, lr}
 8005b7a:	b084      	sub	sp, #16
 8005b7c:	af00      	add	r7, sp, #0
 8005b7e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005b80:	f001 fc4a 	bl	8007418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005b88:	2b00      	cmp	r3, #0
 8005b8a:	d102      	bne.n	8005b92 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005b8c:	2301      	movs	r3, #1
 8005b8e:	60fb      	str	r3, [r7, #12]
 8005b90:	e001      	b.n	8005b96 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8005b92:	2300      	movs	r3, #0
 8005b94:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005b96:	f001 fc71 	bl	800747c <vPortExitCritical>

	return xReturn;
 8005b9a:	68fb      	ldr	r3, [r7, #12]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3710      	adds	r7, #16
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	bd80      	pop	{r7, pc}

08005ba4 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8005ba4:	b580      	push	{r7, lr}
 8005ba6:	b084      	sub	sp, #16
 8005ba8:	af00      	add	r7, sp, #0
 8005baa:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005bac:	f001 fc34 	bl	8007418 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005bb0:	687b      	ldr	r3, [r7, #4]
 8005bb2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005bb8:	429a      	cmp	r2, r3
 8005bba:	d102      	bne.n	8005bc2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005bbc:	2301      	movs	r3, #1
 8005bbe:	60fb      	str	r3, [r7, #12]
 8005bc0:	e001      	b.n	8005bc6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8005bc2:	2300      	movs	r3, #0
 8005bc4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8005bc6:	f001 fc59 	bl	800747c <vPortExitCritical>

	return xReturn;
 8005bca:	68fb      	ldr	r3, [r7, #12]
}
 8005bcc:	4618      	mov	r0, r3
 8005bce:	3710      	adds	r7, #16
 8005bd0:	46bd      	mov	sp, r7
 8005bd2:	bd80      	pop	{r7, pc}

08005bd4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8005bd4:	b480      	push	{r7}
 8005bd6:	b085      	sub	sp, #20
 8005bd8:	af00      	add	r7, sp, #0
 8005bda:	6078      	str	r0, [r7, #4]
 8005bdc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005bde:	2300      	movs	r3, #0
 8005be0:	60fb      	str	r3, [r7, #12]
 8005be2:	e014      	b.n	8005c0e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8005be4:	4a0f      	ldr	r2, [pc, #60]	@ (8005c24 <vQueueAddToRegistry+0x50>)
 8005be6:	68fb      	ldr	r3, [r7, #12]
 8005be8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8005bec:	2b00      	cmp	r3, #0
 8005bee:	d10b      	bne.n	8005c08 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8005bf0:	490c      	ldr	r1, [pc, #48]	@ (8005c24 <vQueueAddToRegistry+0x50>)
 8005bf2:	68fb      	ldr	r3, [r7, #12]
 8005bf4:	683a      	ldr	r2, [r7, #0]
 8005bf6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8005bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8005c24 <vQueueAddToRegistry+0x50>)
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	00db      	lsls	r3, r3, #3
 8005c00:	4413      	add	r3, r2
 8005c02:	687a      	ldr	r2, [r7, #4]
 8005c04:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8005c06:	e006      	b.n	8005c16 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	3301      	adds	r3, #1
 8005c0c:	60fb      	str	r3, [r7, #12]
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	2b07      	cmp	r3, #7
 8005c12:	d9e7      	bls.n	8005be4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8005c14:	bf00      	nop
 8005c16:	bf00      	nop
 8005c18:	3714      	adds	r7, #20
 8005c1a:	46bd      	mov	sp, r7
 8005c1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c20:	4770      	bx	lr
 8005c22:	bf00      	nop
 8005c24:	200008f4 	.word	0x200008f4

08005c28 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8005c28:	b580      	push	{r7, lr}
 8005c2a:	b086      	sub	sp, #24
 8005c2c:	af00      	add	r7, sp, #0
 8005c2e:	60f8      	str	r0, [r7, #12]
 8005c30:	60b9      	str	r1, [r7, #8]
 8005c32:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8005c34:	68fb      	ldr	r3, [r7, #12]
 8005c36:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005c38:	f001 fbee 	bl	8007418 <vPortEnterCritical>
 8005c3c:	697b      	ldr	r3, [r7, #20]
 8005c3e:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005c42:	b25b      	sxtb	r3, r3
 8005c44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c48:	d103      	bne.n	8005c52 <vQueueWaitForMessageRestricted+0x2a>
 8005c4a:	697b      	ldr	r3, [r7, #20]
 8005c4c:	2200      	movs	r2, #0
 8005c4e:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005c52:	697b      	ldr	r3, [r7, #20]
 8005c54:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005c58:	b25b      	sxtb	r3, r3
 8005c5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005c5e:	d103      	bne.n	8005c68 <vQueueWaitForMessageRestricted+0x40>
 8005c60:	697b      	ldr	r3, [r7, #20]
 8005c62:	2200      	movs	r2, #0
 8005c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005c68:	f001 fc08 	bl	800747c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005c6c:	697b      	ldr	r3, [r7, #20]
 8005c6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c70:	2b00      	cmp	r3, #0
 8005c72:	d106      	bne.n	8005c82 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8005c74:	697b      	ldr	r3, [r7, #20]
 8005c76:	3324      	adds	r3, #36	@ 0x24
 8005c78:	687a      	ldr	r2, [r7, #4]
 8005c7a:	68b9      	ldr	r1, [r7, #8]
 8005c7c:	4618      	mov	r0, r3
 8005c7e:	f000 fc6d 	bl	800655c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8005c82:	6978      	ldr	r0, [r7, #20]
 8005c84:	f7ff ff26 	bl	8005ad4 <prvUnlockQueue>
	}
 8005c88:	bf00      	nop
 8005c8a:	3718      	adds	r7, #24
 8005c8c:	46bd      	mov	sp, r7
 8005c8e:	bd80      	pop	{r7, pc}

08005c90 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005c90:	b580      	push	{r7, lr}
 8005c92:	b08e      	sub	sp, #56	@ 0x38
 8005c94:	af04      	add	r7, sp, #16
 8005c96:	60f8      	str	r0, [r7, #12]
 8005c98:	60b9      	str	r1, [r7, #8]
 8005c9a:	607a      	str	r2, [r7, #4]
 8005c9c:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005c9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	d10b      	bne.n	8005cbc <xTaskCreateStatic+0x2c>
	__asm volatile
 8005ca4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ca8:	f383 8811 	msr	BASEPRI, r3
 8005cac:	f3bf 8f6f 	isb	sy
 8005cb0:	f3bf 8f4f 	dsb	sy
 8005cb4:	623b      	str	r3, [r7, #32]
}
 8005cb6:	bf00      	nop
 8005cb8:	bf00      	nop
 8005cba:	e7fd      	b.n	8005cb8 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d10b      	bne.n	8005cda <xTaskCreateStatic+0x4a>
	__asm volatile
 8005cc2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cc6:	f383 8811 	msr	BASEPRI, r3
 8005cca:	f3bf 8f6f 	isb	sy
 8005cce:	f3bf 8f4f 	dsb	sy
 8005cd2:	61fb      	str	r3, [r7, #28]
}
 8005cd4:	bf00      	nop
 8005cd6:	bf00      	nop
 8005cd8:	e7fd      	b.n	8005cd6 <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 8005cda:	23a8      	movs	r3, #168	@ 0xa8
 8005cdc:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8005cde:	693b      	ldr	r3, [r7, #16]
 8005ce0:	2ba8      	cmp	r3, #168	@ 0xa8
 8005ce2:	d00b      	beq.n	8005cfc <xTaskCreateStatic+0x6c>
	__asm volatile
 8005ce4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce8:	f383 8811 	msr	BASEPRI, r3
 8005cec:	f3bf 8f6f 	isb	sy
 8005cf0:	f3bf 8f4f 	dsb	sy
 8005cf4:	61bb      	str	r3, [r7, #24]
}
 8005cf6:	bf00      	nop
 8005cf8:	bf00      	nop
 8005cfa:	e7fd      	b.n	8005cf8 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8005cfc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8005cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d01e      	beq.n	8005d42 <xTaskCreateStatic+0xb2>
 8005d04:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d01b      	beq.n	8005d42 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d0a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005d0c:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8005d0e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d10:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8005d12:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8005d14:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d16:	2202      	movs	r2, #2
 8005d18:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8005d1c:	2300      	movs	r3, #0
 8005d1e:	9303      	str	r3, [sp, #12]
 8005d20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005d22:	9302      	str	r3, [sp, #8]
 8005d24:	f107 0314 	add.w	r3, r7, #20
 8005d28:	9301      	str	r3, [sp, #4]
 8005d2a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005d2c:	9300      	str	r3, [sp, #0]
 8005d2e:	683b      	ldr	r3, [r7, #0]
 8005d30:	687a      	ldr	r2, [r7, #4]
 8005d32:	68b9      	ldr	r1, [r7, #8]
 8005d34:	68f8      	ldr	r0, [r7, #12]
 8005d36:	f000 f851 	bl	8005ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005d3a:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005d3c:	f000 f8f6 	bl	8005f2c <prvAddNewTaskToReadyList>
 8005d40:	e001      	b.n	8005d46 <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005d42:	2300      	movs	r3, #0
 8005d44:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005d46:	697b      	ldr	r3, [r7, #20]
	}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3728      	adds	r7, #40	@ 0x28
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}

08005d50 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b08c      	sub	sp, #48	@ 0x30
 8005d54:	af04      	add	r7, sp, #16
 8005d56:	60f8      	str	r0, [r7, #12]
 8005d58:	60b9      	str	r1, [r7, #8]
 8005d5a:	603b      	str	r3, [r7, #0]
 8005d5c:	4613      	mov	r3, r2
 8005d5e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005d60:	88fb      	ldrh	r3, [r7, #6]
 8005d62:	009b      	lsls	r3, r3, #2
 8005d64:	4618      	mov	r0, r3
 8005d66:	f001 fc79 	bl	800765c <pvPortMalloc>
 8005d6a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005d6c:	697b      	ldr	r3, [r7, #20]
 8005d6e:	2b00      	cmp	r3, #0
 8005d70:	d00e      	beq.n	8005d90 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005d72:	20a8      	movs	r0, #168	@ 0xa8
 8005d74:	f001 fc72 	bl	800765c <pvPortMalloc>
 8005d78:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005d7a:	69fb      	ldr	r3, [r7, #28]
 8005d7c:	2b00      	cmp	r3, #0
 8005d7e:	d003      	beq.n	8005d88 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005d80:	69fb      	ldr	r3, [r7, #28]
 8005d82:	697a      	ldr	r2, [r7, #20]
 8005d84:	631a      	str	r2, [r3, #48]	@ 0x30
 8005d86:	e005      	b.n	8005d94 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005d88:	6978      	ldr	r0, [r7, #20]
 8005d8a:	f001 fd35 	bl	80077f8 <vPortFree>
 8005d8e:	e001      	b.n	8005d94 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005d90:	2300      	movs	r3, #0
 8005d92:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005d94:	69fb      	ldr	r3, [r7, #28]
 8005d96:	2b00      	cmp	r3, #0
 8005d98:	d017      	beq.n	8005dca <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005d9a:	69fb      	ldr	r3, [r7, #28]
 8005d9c:	2200      	movs	r2, #0
 8005d9e:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005da2:	88fa      	ldrh	r2, [r7, #6]
 8005da4:	2300      	movs	r3, #0
 8005da6:	9303      	str	r3, [sp, #12]
 8005da8:	69fb      	ldr	r3, [r7, #28]
 8005daa:	9302      	str	r3, [sp, #8]
 8005dac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dae:	9301      	str	r3, [sp, #4]
 8005db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005db2:	9300      	str	r3, [sp, #0]
 8005db4:	683b      	ldr	r3, [r7, #0]
 8005db6:	68b9      	ldr	r1, [r7, #8]
 8005db8:	68f8      	ldr	r0, [r7, #12]
 8005dba:	f000 f80f 	bl	8005ddc <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005dbe:	69f8      	ldr	r0, [r7, #28]
 8005dc0:	f000 f8b4 	bl	8005f2c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005dc4:	2301      	movs	r3, #1
 8005dc6:	61bb      	str	r3, [r7, #24]
 8005dc8:	e002      	b.n	8005dd0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005dca:	f04f 33ff 	mov.w	r3, #4294967295
 8005dce:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005dd0:	69bb      	ldr	r3, [r7, #24]
	}
 8005dd2:	4618      	mov	r0, r3
 8005dd4:	3720      	adds	r7, #32
 8005dd6:	46bd      	mov	sp, r7
 8005dd8:	bd80      	pop	{r7, pc}
	...

08005ddc <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005ddc:	b580      	push	{r7, lr}
 8005dde:	b088      	sub	sp, #32
 8005de0:	af00      	add	r7, sp, #0
 8005de2:	60f8      	str	r0, [r7, #12]
 8005de4:	60b9      	str	r1, [r7, #8]
 8005de6:	607a      	str	r2, [r7, #4]
 8005de8:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005dea:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dec:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005dee:	687b      	ldr	r3, [r7, #4]
 8005df0:	009b      	lsls	r3, r3, #2
 8005df2:	461a      	mov	r2, r3
 8005df4:	21a5      	movs	r1, #165	@ 0xa5
 8005df6:	f002 f839 	bl	8007e6c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005dfa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005dfc:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005e04:	3b01      	subs	r3, #1
 8005e06:	009b      	lsls	r3, r3, #2
 8005e08:	4413      	add	r3, r2
 8005e0a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005e0c:	69bb      	ldr	r3, [r7, #24]
 8005e0e:	f023 0307 	bic.w	r3, r3, #7
 8005e12:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	f003 0307 	and.w	r3, r3, #7
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d00b      	beq.n	8005e36 <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005e1e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e22:	f383 8811 	msr	BASEPRI, r3
 8005e26:	f3bf 8f6f 	isb	sy
 8005e2a:	f3bf 8f4f 	dsb	sy
 8005e2e:	617b      	str	r3, [r7, #20]
}
 8005e30:	bf00      	nop
 8005e32:	bf00      	nop
 8005e34:	e7fd      	b.n	8005e32 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005e36:	68bb      	ldr	r3, [r7, #8]
 8005e38:	2b00      	cmp	r3, #0
 8005e3a:	d01f      	beq.n	8005e7c <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	61fb      	str	r3, [r7, #28]
 8005e40:	e012      	b.n	8005e68 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005e42:	68ba      	ldr	r2, [r7, #8]
 8005e44:	69fb      	ldr	r3, [r7, #28]
 8005e46:	4413      	add	r3, r2
 8005e48:	7819      	ldrb	r1, [r3, #0]
 8005e4a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005e4c:	69fb      	ldr	r3, [r7, #28]
 8005e4e:	4413      	add	r3, r2
 8005e50:	3334      	adds	r3, #52	@ 0x34
 8005e52:	460a      	mov	r2, r1
 8005e54:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005e56:	68ba      	ldr	r2, [r7, #8]
 8005e58:	69fb      	ldr	r3, [r7, #28]
 8005e5a:	4413      	add	r3, r2
 8005e5c:	781b      	ldrb	r3, [r3, #0]
 8005e5e:	2b00      	cmp	r3, #0
 8005e60:	d006      	beq.n	8005e70 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005e62:	69fb      	ldr	r3, [r7, #28]
 8005e64:	3301      	adds	r3, #1
 8005e66:	61fb      	str	r3, [r7, #28]
 8005e68:	69fb      	ldr	r3, [r7, #28]
 8005e6a:	2b0f      	cmp	r3, #15
 8005e6c:	d9e9      	bls.n	8005e42 <prvInitialiseNewTask+0x66>
 8005e6e:	e000      	b.n	8005e72 <prvInitialiseNewTask+0x96>
			{
				break;
 8005e70:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005e72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e74:	2200      	movs	r2, #0
 8005e76:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005e7a:	e003      	b.n	8005e84 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005e7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e7e:	2200      	movs	r2, #0
 8005e80:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005e84:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005e86:	2b37      	cmp	r3, #55	@ 0x37
 8005e88:	d901      	bls.n	8005e8e <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005e8a:	2337      	movs	r3, #55	@ 0x37
 8005e8c:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005e8e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e90:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e92:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005e94:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e96:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005e98:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005e9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005ea0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea2:	3304      	adds	r3, #4
 8005ea4:	4618      	mov	r0, r3
 8005ea6:	f7ff f8a7 	bl	8004ff8 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005eaa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eac:	3318      	adds	r3, #24
 8005eae:	4618      	mov	r0, r3
 8005eb0:	f7ff f8a2 	bl	8004ff8 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005eb4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eb6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005eb8:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005eba:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005ebc:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005ec0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec2:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005ec4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ec6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005ec8:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005eca:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ecc:	2200      	movs	r2, #0
 8005ece:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005ed2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ed4:	2200      	movs	r2, #0
 8005ed6:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005eda:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005edc:	3354      	adds	r3, #84	@ 0x54
 8005ede:	224c      	movs	r2, #76	@ 0x4c
 8005ee0:	2100      	movs	r1, #0
 8005ee2:	4618      	mov	r0, r3
 8005ee4:	f001 ffc2 	bl	8007e6c <memset>
 8005ee8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005eea:	4a0d      	ldr	r2, [pc, #52]	@ (8005f20 <prvInitialiseNewTask+0x144>)
 8005eec:	659a      	str	r2, [r3, #88]	@ 0x58
 8005eee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef0:	4a0c      	ldr	r2, [pc, #48]	@ (8005f24 <prvInitialiseNewTask+0x148>)
 8005ef2:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005ef4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ef6:	4a0c      	ldr	r2, [pc, #48]	@ (8005f28 <prvInitialiseNewTask+0x14c>)
 8005ef8:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005efa:	683a      	ldr	r2, [r7, #0]
 8005efc:	68f9      	ldr	r1, [r7, #12]
 8005efe:	69b8      	ldr	r0, [r7, #24]
 8005f00:	f001 f95a 	bl	80071b8 <pxPortInitialiseStack>
 8005f04:	4602      	mov	r2, r0
 8005f06:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f08:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005f0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f0c:	2b00      	cmp	r3, #0
 8005f0e:	d002      	beq.n	8005f16 <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005f10:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005f14:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005f16:	bf00      	nop
 8005f18:	3720      	adds	r7, #32
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	20004b88 	.word	0x20004b88
 8005f24:	20004bf0 	.word	0x20004bf0
 8005f28:	20004c58 	.word	0x20004c58

08005f2c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b082      	sub	sp, #8
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005f34:	f001 fa70 	bl	8007418 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005f38:	4b2d      	ldr	r3, [pc, #180]	@ (8005ff0 <prvAddNewTaskToReadyList+0xc4>)
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	3301      	adds	r3, #1
 8005f3e:	4a2c      	ldr	r2, [pc, #176]	@ (8005ff0 <prvAddNewTaskToReadyList+0xc4>)
 8005f40:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005f42:	4b2c      	ldr	r3, [pc, #176]	@ (8005ff4 <prvAddNewTaskToReadyList+0xc8>)
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d109      	bne.n	8005f5e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005f4a:	4a2a      	ldr	r2, [pc, #168]	@ (8005ff4 <prvAddNewTaskToReadyList+0xc8>)
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005f50:	4b27      	ldr	r3, [pc, #156]	@ (8005ff0 <prvAddNewTaskToReadyList+0xc4>)
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	2b01      	cmp	r3, #1
 8005f56:	d110      	bne.n	8005f7a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005f58:	f000 fc2e 	bl	80067b8 <prvInitialiseTaskLists>
 8005f5c:	e00d      	b.n	8005f7a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005f5e:	4b26      	ldr	r3, [pc, #152]	@ (8005ff8 <prvAddNewTaskToReadyList+0xcc>)
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d109      	bne.n	8005f7a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005f66:	4b23      	ldr	r3, [pc, #140]	@ (8005ff4 <prvAddNewTaskToReadyList+0xc8>)
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f70:	429a      	cmp	r2, r3
 8005f72:	d802      	bhi.n	8005f7a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005f74:	4a1f      	ldr	r2, [pc, #124]	@ (8005ff4 <prvAddNewTaskToReadyList+0xc8>)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005f7a:	4b20      	ldr	r3, [pc, #128]	@ (8005ffc <prvAddNewTaskToReadyList+0xd0>)
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	3301      	adds	r3, #1
 8005f80:	4a1e      	ldr	r2, [pc, #120]	@ (8005ffc <prvAddNewTaskToReadyList+0xd0>)
 8005f82:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005f84:	4b1d      	ldr	r3, [pc, #116]	@ (8005ffc <prvAddNewTaskToReadyList+0xd0>)
 8005f86:	681a      	ldr	r2, [r3, #0]
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005f90:	4b1b      	ldr	r3, [pc, #108]	@ (8006000 <prvAddNewTaskToReadyList+0xd4>)
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	429a      	cmp	r2, r3
 8005f96:	d903      	bls.n	8005fa0 <prvAddNewTaskToReadyList+0x74>
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005f9c:	4a18      	ldr	r2, [pc, #96]	@ (8006000 <prvAddNewTaskToReadyList+0xd4>)
 8005f9e:	6013      	str	r3, [r2, #0]
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fa4:	4613      	mov	r3, r2
 8005fa6:	009b      	lsls	r3, r3, #2
 8005fa8:	4413      	add	r3, r2
 8005faa:	009b      	lsls	r3, r3, #2
 8005fac:	4a15      	ldr	r2, [pc, #84]	@ (8006004 <prvAddNewTaskToReadyList+0xd8>)
 8005fae:	441a      	add	r2, r3
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	3304      	adds	r3, #4
 8005fb4:	4619      	mov	r1, r3
 8005fb6:	4610      	mov	r0, r2
 8005fb8:	f7ff f82b 	bl	8005012 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005fbc:	f001 fa5e 	bl	800747c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005fc0:	4b0d      	ldr	r3, [pc, #52]	@ (8005ff8 <prvAddNewTaskToReadyList+0xcc>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d00e      	beq.n	8005fe6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005fc8:	4b0a      	ldr	r3, [pc, #40]	@ (8005ff4 <prvAddNewTaskToReadyList+0xc8>)
 8005fca:	681b      	ldr	r3, [r3, #0]
 8005fcc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005fd2:	429a      	cmp	r2, r3
 8005fd4:	d207      	bcs.n	8005fe6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005fd6:	4b0c      	ldr	r3, [pc, #48]	@ (8006008 <prvAddNewTaskToReadyList+0xdc>)
 8005fd8:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005fdc:	601a      	str	r2, [r3, #0]
 8005fde:	f3bf 8f4f 	dsb	sy
 8005fe2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005fe6:	bf00      	nop
 8005fe8:	3708      	adds	r7, #8
 8005fea:	46bd      	mov	sp, r7
 8005fec:	bd80      	pop	{r7, pc}
 8005fee:	bf00      	nop
 8005ff0:	20000e08 	.word	0x20000e08
 8005ff4:	20000934 	.word	0x20000934
 8005ff8:	20000e14 	.word	0x20000e14
 8005ffc:	20000e24 	.word	0x20000e24
 8006000:	20000e10 	.word	0x20000e10
 8006004:	20000938 	.word	0x20000938
 8006008:	e000ed04 	.word	0xe000ed04

0800600c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800600c:	b580      	push	{r7, lr}
 800600e:	b084      	sub	sp, #16
 8006010:	af00      	add	r7, sp, #0
 8006012:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006014:	2300      	movs	r3, #0
 8006016:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	2b00      	cmp	r3, #0
 800601c:	d018      	beq.n	8006050 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800601e:	4b14      	ldr	r3, [pc, #80]	@ (8006070 <vTaskDelay+0x64>)
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	2b00      	cmp	r3, #0
 8006024:	d00b      	beq.n	800603e <vTaskDelay+0x32>
	__asm volatile
 8006026:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800602a:	f383 8811 	msr	BASEPRI, r3
 800602e:	f3bf 8f6f 	isb	sy
 8006032:	f3bf 8f4f 	dsb	sy
 8006036:	60bb      	str	r3, [r7, #8]
}
 8006038:	bf00      	nop
 800603a:	bf00      	nop
 800603c:	e7fd      	b.n	800603a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 800603e:	f000 f88b 	bl	8006158 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8006042:	2100      	movs	r1, #0
 8006044:	6878      	ldr	r0, [r7, #4]
 8006046:	f000 fd09 	bl	8006a5c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800604a:	f000 f893 	bl	8006174 <xTaskResumeAll>
 800604e:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8006050:	68fb      	ldr	r3, [r7, #12]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d107      	bne.n	8006066 <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8006056:	4b07      	ldr	r3, [pc, #28]	@ (8006074 <vTaskDelay+0x68>)
 8006058:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800605c:	601a      	str	r2, [r3, #0]
 800605e:	f3bf 8f4f 	dsb	sy
 8006062:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8006066:	bf00      	nop
 8006068:	3710      	adds	r7, #16
 800606a:	46bd      	mov	sp, r7
 800606c:	bd80      	pop	{r7, pc}
 800606e:	bf00      	nop
 8006070:	20000e30 	.word	0x20000e30
 8006074:	e000ed04 	.word	0xe000ed04

08006078 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8006078:	b580      	push	{r7, lr}
 800607a:	b08a      	sub	sp, #40	@ 0x28
 800607c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800607e:	2300      	movs	r3, #0
 8006080:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006082:	2300      	movs	r3, #0
 8006084:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006086:	463a      	mov	r2, r7
 8006088:	1d39      	adds	r1, r7, #4
 800608a:	f107 0308 	add.w	r3, r7, #8
 800608e:	4618      	mov	r0, r3
 8006090:	f7fe ff5e 	bl	8004f50 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006094:	6839      	ldr	r1, [r7, #0]
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	68ba      	ldr	r2, [r7, #8]
 800609a:	9202      	str	r2, [sp, #8]
 800609c:	9301      	str	r3, [sp, #4]
 800609e:	2300      	movs	r3, #0
 80060a0:	9300      	str	r3, [sp, #0]
 80060a2:	2300      	movs	r3, #0
 80060a4:	460a      	mov	r2, r1
 80060a6:	4924      	ldr	r1, [pc, #144]	@ (8006138 <vTaskStartScheduler+0xc0>)
 80060a8:	4824      	ldr	r0, [pc, #144]	@ (800613c <vTaskStartScheduler+0xc4>)
 80060aa:	f7ff fdf1 	bl	8005c90 <xTaskCreateStatic>
 80060ae:	4603      	mov	r3, r0
 80060b0:	4a23      	ldr	r2, [pc, #140]	@ (8006140 <vTaskStartScheduler+0xc8>)
 80060b2:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 80060b4:	4b22      	ldr	r3, [pc, #136]	@ (8006140 <vTaskStartScheduler+0xc8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	2b00      	cmp	r3, #0
 80060ba:	d002      	beq.n	80060c2 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 80060bc:	2301      	movs	r3, #1
 80060be:	617b      	str	r3, [r7, #20]
 80060c0:	e001      	b.n	80060c6 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 80060c2:	2300      	movs	r3, #0
 80060c4:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 80060c6:	697b      	ldr	r3, [r7, #20]
 80060c8:	2b01      	cmp	r3, #1
 80060ca:	d102      	bne.n	80060d2 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 80060cc:	f000 fd1a 	bl	8006b04 <xTimerCreateTimerTask>
 80060d0:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	2b01      	cmp	r3, #1
 80060d6:	d11b      	bne.n	8006110 <vTaskStartScheduler+0x98>
	__asm volatile
 80060d8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060dc:	f383 8811 	msr	BASEPRI, r3
 80060e0:	f3bf 8f6f 	isb	sy
 80060e4:	f3bf 8f4f 	dsb	sy
 80060e8:	613b      	str	r3, [r7, #16]
}
 80060ea:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80060ec:	4b15      	ldr	r3, [pc, #84]	@ (8006144 <vTaskStartScheduler+0xcc>)
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	3354      	adds	r3, #84	@ 0x54
 80060f2:	4a15      	ldr	r2, [pc, #84]	@ (8006148 <vTaskStartScheduler+0xd0>)
 80060f4:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80060f6:	4b15      	ldr	r3, [pc, #84]	@ (800614c <vTaskStartScheduler+0xd4>)
 80060f8:	f04f 32ff 	mov.w	r2, #4294967295
 80060fc:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80060fe:	4b14      	ldr	r3, [pc, #80]	@ (8006150 <vTaskStartScheduler+0xd8>)
 8006100:	2201      	movs	r2, #1
 8006102:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006104:	4b13      	ldr	r3, [pc, #76]	@ (8006154 <vTaskStartScheduler+0xdc>)
 8006106:	2200      	movs	r2, #0
 8006108:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800610a:	f001 f8e1 	bl	80072d0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800610e:	e00f      	b.n	8006130 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006110:	697b      	ldr	r3, [r7, #20]
 8006112:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006116:	d10b      	bne.n	8006130 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006118:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800611c:	f383 8811 	msr	BASEPRI, r3
 8006120:	f3bf 8f6f 	isb	sy
 8006124:	f3bf 8f4f 	dsb	sy
 8006128:	60fb      	str	r3, [r7, #12]
}
 800612a:	bf00      	nop
 800612c:	bf00      	nop
 800612e:	e7fd      	b.n	800612c <vTaskStartScheduler+0xb4>
}
 8006130:	bf00      	nop
 8006132:	3718      	adds	r7, #24
 8006134:	46bd      	mov	sp, r7
 8006136:	bd80      	pop	{r7, pc}
 8006138:	0800a7d4 	.word	0x0800a7d4
 800613c:	08006789 	.word	0x08006789
 8006140:	20000e2c 	.word	0x20000e2c
 8006144:	20000934 	.word	0x20000934
 8006148:	2000001c 	.word	0x2000001c
 800614c:	20000e28 	.word	0x20000e28
 8006150:	20000e14 	.word	0x20000e14
 8006154:	20000e0c 	.word	0x20000e0c

08006158 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006158:	b480      	push	{r7}
 800615a:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 800615c:	4b04      	ldr	r3, [pc, #16]	@ (8006170 <vTaskSuspendAll+0x18>)
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	3301      	adds	r3, #1
 8006162:	4a03      	ldr	r2, [pc, #12]	@ (8006170 <vTaskSuspendAll+0x18>)
 8006164:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006166:	bf00      	nop
 8006168:	46bd      	mov	sp, r7
 800616a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800616e:	4770      	bx	lr
 8006170:	20000e30 	.word	0x20000e30

08006174 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b084      	sub	sp, #16
 8006178:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800617a:	2300      	movs	r3, #0
 800617c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800617e:	2300      	movs	r3, #0
 8006180:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006182:	4b42      	ldr	r3, [pc, #264]	@ (800628c <xTaskResumeAll+0x118>)
 8006184:	681b      	ldr	r3, [r3, #0]
 8006186:	2b00      	cmp	r3, #0
 8006188:	d10b      	bne.n	80061a2 <xTaskResumeAll+0x2e>
	__asm volatile
 800618a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800618e:	f383 8811 	msr	BASEPRI, r3
 8006192:	f3bf 8f6f 	isb	sy
 8006196:	f3bf 8f4f 	dsb	sy
 800619a:	603b      	str	r3, [r7, #0]
}
 800619c:	bf00      	nop
 800619e:	bf00      	nop
 80061a0:	e7fd      	b.n	800619e <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 80061a2:	f001 f939 	bl	8007418 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 80061a6:	4b39      	ldr	r3, [pc, #228]	@ (800628c <xTaskResumeAll+0x118>)
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	3b01      	subs	r3, #1
 80061ac:	4a37      	ldr	r2, [pc, #220]	@ (800628c <xTaskResumeAll+0x118>)
 80061ae:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80061b0:	4b36      	ldr	r3, [pc, #216]	@ (800628c <xTaskResumeAll+0x118>)
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	2b00      	cmp	r3, #0
 80061b6:	d162      	bne.n	800627e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 80061b8:	4b35      	ldr	r3, [pc, #212]	@ (8006290 <xTaskResumeAll+0x11c>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	2b00      	cmp	r3, #0
 80061be:	d05e      	beq.n	800627e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80061c0:	e02f      	b.n	8006222 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80061c2:	4b34      	ldr	r3, [pc, #208]	@ (8006294 <xTaskResumeAll+0x120>)
 80061c4:	68db      	ldr	r3, [r3, #12]
 80061c6:	68db      	ldr	r3, [r3, #12]
 80061c8:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80061ca:	68fb      	ldr	r3, [r7, #12]
 80061cc:	3318      	adds	r3, #24
 80061ce:	4618      	mov	r0, r3
 80061d0:	f7fe ff7c 	bl	80050cc <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80061d4:	68fb      	ldr	r3, [r7, #12]
 80061d6:	3304      	adds	r3, #4
 80061d8:	4618      	mov	r0, r3
 80061da:	f7fe ff77 	bl	80050cc <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 80061de:	68fb      	ldr	r3, [r7, #12]
 80061e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061e2:	4b2d      	ldr	r3, [pc, #180]	@ (8006298 <xTaskResumeAll+0x124>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	429a      	cmp	r2, r3
 80061e8:	d903      	bls.n	80061f2 <xTaskResumeAll+0x7e>
 80061ea:	68fb      	ldr	r3, [r7, #12]
 80061ec:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80061ee:	4a2a      	ldr	r2, [pc, #168]	@ (8006298 <xTaskResumeAll+0x124>)
 80061f0:	6013      	str	r3, [r2, #0]
 80061f2:	68fb      	ldr	r3, [r7, #12]
 80061f4:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80061f6:	4613      	mov	r3, r2
 80061f8:	009b      	lsls	r3, r3, #2
 80061fa:	4413      	add	r3, r2
 80061fc:	009b      	lsls	r3, r3, #2
 80061fe:	4a27      	ldr	r2, [pc, #156]	@ (800629c <xTaskResumeAll+0x128>)
 8006200:	441a      	add	r2, r3
 8006202:	68fb      	ldr	r3, [r7, #12]
 8006204:	3304      	adds	r3, #4
 8006206:	4619      	mov	r1, r3
 8006208:	4610      	mov	r0, r2
 800620a:	f7fe ff02 	bl	8005012 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800620e:	68fb      	ldr	r3, [r7, #12]
 8006210:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006212:	4b23      	ldr	r3, [pc, #140]	@ (80062a0 <xTaskResumeAll+0x12c>)
 8006214:	681b      	ldr	r3, [r3, #0]
 8006216:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006218:	429a      	cmp	r2, r3
 800621a:	d302      	bcc.n	8006222 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 800621c:	4b21      	ldr	r3, [pc, #132]	@ (80062a4 <xTaskResumeAll+0x130>)
 800621e:	2201      	movs	r2, #1
 8006220:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006222:	4b1c      	ldr	r3, [pc, #112]	@ (8006294 <xTaskResumeAll+0x120>)
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	2b00      	cmp	r3, #0
 8006228:	d1cb      	bne.n	80061c2 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800622a:	68fb      	ldr	r3, [r7, #12]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d001      	beq.n	8006234 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006230:	f000 fb66 	bl	8006900 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006234:	4b1c      	ldr	r3, [pc, #112]	@ (80062a8 <xTaskResumeAll+0x134>)
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	2b00      	cmp	r3, #0
 800623e:	d010      	beq.n	8006262 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006240:	f000 f846 	bl	80062d0 <xTaskIncrementTick>
 8006244:	4603      	mov	r3, r0
 8006246:	2b00      	cmp	r3, #0
 8006248:	d002      	beq.n	8006250 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 800624a:	4b16      	ldr	r3, [pc, #88]	@ (80062a4 <xTaskResumeAll+0x130>)
 800624c:	2201      	movs	r2, #1
 800624e:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006250:	687b      	ldr	r3, [r7, #4]
 8006252:	3b01      	subs	r3, #1
 8006254:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	2b00      	cmp	r3, #0
 800625a:	d1f1      	bne.n	8006240 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 800625c:	4b12      	ldr	r3, [pc, #72]	@ (80062a8 <xTaskResumeAll+0x134>)
 800625e:	2200      	movs	r2, #0
 8006260:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006262:	4b10      	ldr	r3, [pc, #64]	@ (80062a4 <xTaskResumeAll+0x130>)
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	2b00      	cmp	r3, #0
 8006268:	d009      	beq.n	800627e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800626a:	2301      	movs	r3, #1
 800626c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800626e:	4b0f      	ldr	r3, [pc, #60]	@ (80062ac <xTaskResumeAll+0x138>)
 8006270:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006274:	601a      	str	r2, [r3, #0]
 8006276:	f3bf 8f4f 	dsb	sy
 800627a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800627e:	f001 f8fd 	bl	800747c <vPortExitCritical>

	return xAlreadyYielded;
 8006282:	68bb      	ldr	r3, [r7, #8]
}
 8006284:	4618      	mov	r0, r3
 8006286:	3710      	adds	r7, #16
 8006288:	46bd      	mov	sp, r7
 800628a:	bd80      	pop	{r7, pc}
 800628c:	20000e30 	.word	0x20000e30
 8006290:	20000e08 	.word	0x20000e08
 8006294:	20000dc8 	.word	0x20000dc8
 8006298:	20000e10 	.word	0x20000e10
 800629c:	20000938 	.word	0x20000938
 80062a0:	20000934 	.word	0x20000934
 80062a4:	20000e1c 	.word	0x20000e1c
 80062a8:	20000e18 	.word	0x20000e18
 80062ac:	e000ed04 	.word	0xe000ed04

080062b0 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 80062b0:	b480      	push	{r7}
 80062b2:	b083      	sub	sp, #12
 80062b4:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 80062b6:	4b05      	ldr	r3, [pc, #20]	@ (80062cc <xTaskGetTickCount+0x1c>)
 80062b8:	681b      	ldr	r3, [r3, #0]
 80062ba:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 80062bc:	687b      	ldr	r3, [r7, #4]
}
 80062be:	4618      	mov	r0, r3
 80062c0:	370c      	adds	r7, #12
 80062c2:	46bd      	mov	sp, r7
 80062c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062c8:	4770      	bx	lr
 80062ca:	bf00      	nop
 80062cc:	20000e0c 	.word	0x20000e0c

080062d0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80062d0:	b580      	push	{r7, lr}
 80062d2:	b086      	sub	sp, #24
 80062d4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80062d6:	2300      	movs	r3, #0
 80062d8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062da:	4b4f      	ldr	r3, [pc, #316]	@ (8006418 <xTaskIncrementTick+0x148>)
 80062dc:	681b      	ldr	r3, [r3, #0]
 80062de:	2b00      	cmp	r3, #0
 80062e0:	f040 8090 	bne.w	8006404 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80062e4:	4b4d      	ldr	r3, [pc, #308]	@ (800641c <xTaskIncrementTick+0x14c>)
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	3301      	adds	r3, #1
 80062ea:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80062ec:	4a4b      	ldr	r2, [pc, #300]	@ (800641c <xTaskIncrementTick+0x14c>)
 80062ee:	693b      	ldr	r3, [r7, #16]
 80062f0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80062f2:	693b      	ldr	r3, [r7, #16]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d121      	bne.n	800633c <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 80062f8:	4b49      	ldr	r3, [pc, #292]	@ (8006420 <xTaskIncrementTick+0x150>)
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	2b00      	cmp	r3, #0
 8006300:	d00b      	beq.n	800631a <xTaskIncrementTick+0x4a>
	__asm volatile
 8006302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006306:	f383 8811 	msr	BASEPRI, r3
 800630a:	f3bf 8f6f 	isb	sy
 800630e:	f3bf 8f4f 	dsb	sy
 8006312:	603b      	str	r3, [r7, #0]
}
 8006314:	bf00      	nop
 8006316:	bf00      	nop
 8006318:	e7fd      	b.n	8006316 <xTaskIncrementTick+0x46>
 800631a:	4b41      	ldr	r3, [pc, #260]	@ (8006420 <xTaskIncrementTick+0x150>)
 800631c:	681b      	ldr	r3, [r3, #0]
 800631e:	60fb      	str	r3, [r7, #12]
 8006320:	4b40      	ldr	r3, [pc, #256]	@ (8006424 <xTaskIncrementTick+0x154>)
 8006322:	681b      	ldr	r3, [r3, #0]
 8006324:	4a3e      	ldr	r2, [pc, #248]	@ (8006420 <xTaskIncrementTick+0x150>)
 8006326:	6013      	str	r3, [r2, #0]
 8006328:	4a3e      	ldr	r2, [pc, #248]	@ (8006424 <xTaskIncrementTick+0x154>)
 800632a:	68fb      	ldr	r3, [r7, #12]
 800632c:	6013      	str	r3, [r2, #0]
 800632e:	4b3e      	ldr	r3, [pc, #248]	@ (8006428 <xTaskIncrementTick+0x158>)
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	3301      	adds	r3, #1
 8006334:	4a3c      	ldr	r2, [pc, #240]	@ (8006428 <xTaskIncrementTick+0x158>)
 8006336:	6013      	str	r3, [r2, #0]
 8006338:	f000 fae2 	bl	8006900 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800633c:	4b3b      	ldr	r3, [pc, #236]	@ (800642c <xTaskIncrementTick+0x15c>)
 800633e:	681b      	ldr	r3, [r3, #0]
 8006340:	693a      	ldr	r2, [r7, #16]
 8006342:	429a      	cmp	r2, r3
 8006344:	d349      	bcc.n	80063da <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006346:	4b36      	ldr	r3, [pc, #216]	@ (8006420 <xTaskIncrementTick+0x150>)
 8006348:	681b      	ldr	r3, [r3, #0]
 800634a:	681b      	ldr	r3, [r3, #0]
 800634c:	2b00      	cmp	r3, #0
 800634e:	d104      	bne.n	800635a <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006350:	4b36      	ldr	r3, [pc, #216]	@ (800642c <xTaskIncrementTick+0x15c>)
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	601a      	str	r2, [r3, #0]
					break;
 8006358:	e03f      	b.n	80063da <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800635a:	4b31      	ldr	r3, [pc, #196]	@ (8006420 <xTaskIncrementTick+0x150>)
 800635c:	681b      	ldr	r3, [r3, #0]
 800635e:	68db      	ldr	r3, [r3, #12]
 8006360:	68db      	ldr	r3, [r3, #12]
 8006362:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006364:	68bb      	ldr	r3, [r7, #8]
 8006366:	685b      	ldr	r3, [r3, #4]
 8006368:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800636a:	693a      	ldr	r2, [r7, #16]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	429a      	cmp	r2, r3
 8006370:	d203      	bcs.n	800637a <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006372:	4a2e      	ldr	r2, [pc, #184]	@ (800642c <xTaskIncrementTick+0x15c>)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006378:	e02f      	b.n	80063da <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	3304      	adds	r3, #4
 800637e:	4618      	mov	r0, r3
 8006380:	f7fe fea4 	bl	80050cc <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006384:	68bb      	ldr	r3, [r7, #8]
 8006386:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006388:	2b00      	cmp	r3, #0
 800638a:	d004      	beq.n	8006396 <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800638c:	68bb      	ldr	r3, [r7, #8]
 800638e:	3318      	adds	r3, #24
 8006390:	4618      	mov	r0, r3
 8006392:	f7fe fe9b 	bl	80050cc <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006396:	68bb      	ldr	r3, [r7, #8]
 8006398:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800639a:	4b25      	ldr	r3, [pc, #148]	@ (8006430 <xTaskIncrementTick+0x160>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d903      	bls.n	80063aa <xTaskIncrementTick+0xda>
 80063a2:	68bb      	ldr	r3, [r7, #8]
 80063a4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063a6:	4a22      	ldr	r2, [pc, #136]	@ (8006430 <xTaskIncrementTick+0x160>)
 80063a8:	6013      	str	r3, [r2, #0]
 80063aa:	68bb      	ldr	r3, [r7, #8]
 80063ac:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ae:	4613      	mov	r3, r2
 80063b0:	009b      	lsls	r3, r3, #2
 80063b2:	4413      	add	r3, r2
 80063b4:	009b      	lsls	r3, r3, #2
 80063b6:	4a1f      	ldr	r2, [pc, #124]	@ (8006434 <xTaskIncrementTick+0x164>)
 80063b8:	441a      	add	r2, r3
 80063ba:	68bb      	ldr	r3, [r7, #8]
 80063bc:	3304      	adds	r3, #4
 80063be:	4619      	mov	r1, r3
 80063c0:	4610      	mov	r0, r2
 80063c2:	f7fe fe26 	bl	8005012 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80063c6:	68bb      	ldr	r3, [r7, #8]
 80063c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063ca:	4b1b      	ldr	r3, [pc, #108]	@ (8006438 <xTaskIncrementTick+0x168>)
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80063d0:	429a      	cmp	r2, r3
 80063d2:	d3b8      	bcc.n	8006346 <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 80063d4:	2301      	movs	r3, #1
 80063d6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80063d8:	e7b5      	b.n	8006346 <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80063da:	4b17      	ldr	r3, [pc, #92]	@ (8006438 <xTaskIncrementTick+0x168>)
 80063dc:	681b      	ldr	r3, [r3, #0]
 80063de:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80063e0:	4914      	ldr	r1, [pc, #80]	@ (8006434 <xTaskIncrementTick+0x164>)
 80063e2:	4613      	mov	r3, r2
 80063e4:	009b      	lsls	r3, r3, #2
 80063e6:	4413      	add	r3, r2
 80063e8:	009b      	lsls	r3, r3, #2
 80063ea:	440b      	add	r3, r1
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	2b01      	cmp	r3, #1
 80063f0:	d901      	bls.n	80063f6 <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80063f2:	2301      	movs	r3, #1
 80063f4:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80063f6:	4b11      	ldr	r3, [pc, #68]	@ (800643c <xTaskIncrementTick+0x16c>)
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	d007      	beq.n	800640e <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80063fe:	2301      	movs	r3, #1
 8006400:	617b      	str	r3, [r7, #20]
 8006402:	e004      	b.n	800640e <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006404:	4b0e      	ldr	r3, [pc, #56]	@ (8006440 <xTaskIncrementTick+0x170>)
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	3301      	adds	r3, #1
 800640a:	4a0d      	ldr	r2, [pc, #52]	@ (8006440 <xTaskIncrementTick+0x170>)
 800640c:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 800640e:	697b      	ldr	r3, [r7, #20]
}
 8006410:	4618      	mov	r0, r3
 8006412:	3718      	adds	r7, #24
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}
 8006418:	20000e30 	.word	0x20000e30
 800641c:	20000e0c 	.word	0x20000e0c
 8006420:	20000dc0 	.word	0x20000dc0
 8006424:	20000dc4 	.word	0x20000dc4
 8006428:	20000e20 	.word	0x20000e20
 800642c:	20000e28 	.word	0x20000e28
 8006430:	20000e10 	.word	0x20000e10
 8006434:	20000938 	.word	0x20000938
 8006438:	20000934 	.word	0x20000934
 800643c:	20000e1c 	.word	0x20000e1c
 8006440:	20000e18 	.word	0x20000e18

08006444 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006444:	b480      	push	{r7}
 8006446:	b085      	sub	sp, #20
 8006448:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800644a:	4b2b      	ldr	r3, [pc, #172]	@ (80064f8 <vTaskSwitchContext+0xb4>)
 800644c:	681b      	ldr	r3, [r3, #0]
 800644e:	2b00      	cmp	r3, #0
 8006450:	d003      	beq.n	800645a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006452:	4b2a      	ldr	r3, [pc, #168]	@ (80064fc <vTaskSwitchContext+0xb8>)
 8006454:	2201      	movs	r2, #1
 8006456:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006458:	e047      	b.n	80064ea <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 800645a:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <vTaskSwitchContext+0xb8>)
 800645c:	2200      	movs	r2, #0
 800645e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006460:	4b27      	ldr	r3, [pc, #156]	@ (8006500 <vTaskSwitchContext+0xbc>)
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	60fb      	str	r3, [r7, #12]
 8006466:	e011      	b.n	800648c <vTaskSwitchContext+0x48>
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	2b00      	cmp	r3, #0
 800646c:	d10b      	bne.n	8006486 <vTaskSwitchContext+0x42>
	__asm volatile
 800646e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006472:	f383 8811 	msr	BASEPRI, r3
 8006476:	f3bf 8f6f 	isb	sy
 800647a:	f3bf 8f4f 	dsb	sy
 800647e:	607b      	str	r3, [r7, #4]
}
 8006480:	bf00      	nop
 8006482:	bf00      	nop
 8006484:	e7fd      	b.n	8006482 <vTaskSwitchContext+0x3e>
 8006486:	68fb      	ldr	r3, [r7, #12]
 8006488:	3b01      	subs	r3, #1
 800648a:	60fb      	str	r3, [r7, #12]
 800648c:	491d      	ldr	r1, [pc, #116]	@ (8006504 <vTaskSwitchContext+0xc0>)
 800648e:	68fa      	ldr	r2, [r7, #12]
 8006490:	4613      	mov	r3, r2
 8006492:	009b      	lsls	r3, r3, #2
 8006494:	4413      	add	r3, r2
 8006496:	009b      	lsls	r3, r3, #2
 8006498:	440b      	add	r3, r1
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	2b00      	cmp	r3, #0
 800649e:	d0e3      	beq.n	8006468 <vTaskSwitchContext+0x24>
 80064a0:	68fa      	ldr	r2, [r7, #12]
 80064a2:	4613      	mov	r3, r2
 80064a4:	009b      	lsls	r3, r3, #2
 80064a6:	4413      	add	r3, r2
 80064a8:	009b      	lsls	r3, r3, #2
 80064aa:	4a16      	ldr	r2, [pc, #88]	@ (8006504 <vTaskSwitchContext+0xc0>)
 80064ac:	4413      	add	r3, r2
 80064ae:	60bb      	str	r3, [r7, #8]
 80064b0:	68bb      	ldr	r3, [r7, #8]
 80064b2:	685b      	ldr	r3, [r3, #4]
 80064b4:	685a      	ldr	r2, [r3, #4]
 80064b6:	68bb      	ldr	r3, [r7, #8]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	68bb      	ldr	r3, [r7, #8]
 80064bc:	685a      	ldr	r2, [r3, #4]
 80064be:	68bb      	ldr	r3, [r7, #8]
 80064c0:	3308      	adds	r3, #8
 80064c2:	429a      	cmp	r2, r3
 80064c4:	d104      	bne.n	80064d0 <vTaskSwitchContext+0x8c>
 80064c6:	68bb      	ldr	r3, [r7, #8]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	685a      	ldr	r2, [r3, #4]
 80064cc:	68bb      	ldr	r3, [r7, #8]
 80064ce:	605a      	str	r2, [r3, #4]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	685b      	ldr	r3, [r3, #4]
 80064d4:	68db      	ldr	r3, [r3, #12]
 80064d6:	4a0c      	ldr	r2, [pc, #48]	@ (8006508 <vTaskSwitchContext+0xc4>)
 80064d8:	6013      	str	r3, [r2, #0]
 80064da:	4a09      	ldr	r2, [pc, #36]	@ (8006500 <vTaskSwitchContext+0xbc>)
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80064e0:	4b09      	ldr	r3, [pc, #36]	@ (8006508 <vTaskSwitchContext+0xc4>)
 80064e2:	681b      	ldr	r3, [r3, #0]
 80064e4:	3354      	adds	r3, #84	@ 0x54
 80064e6:	4a09      	ldr	r2, [pc, #36]	@ (800650c <vTaskSwitchContext+0xc8>)
 80064e8:	6013      	str	r3, [r2, #0]
}
 80064ea:	bf00      	nop
 80064ec:	3714      	adds	r7, #20
 80064ee:	46bd      	mov	sp, r7
 80064f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f4:	4770      	bx	lr
 80064f6:	bf00      	nop
 80064f8:	20000e30 	.word	0x20000e30
 80064fc:	20000e1c 	.word	0x20000e1c
 8006500:	20000e10 	.word	0x20000e10
 8006504:	20000938 	.word	0x20000938
 8006508:	20000934 	.word	0x20000934
 800650c:	2000001c 	.word	0x2000001c

08006510 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006510:	b580      	push	{r7, lr}
 8006512:	b084      	sub	sp, #16
 8006514:	af00      	add	r7, sp, #0
 8006516:	6078      	str	r0, [r7, #4]
 8006518:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800651a:	687b      	ldr	r3, [r7, #4]
 800651c:	2b00      	cmp	r3, #0
 800651e:	d10b      	bne.n	8006538 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006520:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006524:	f383 8811 	msr	BASEPRI, r3
 8006528:	f3bf 8f6f 	isb	sy
 800652c:	f3bf 8f4f 	dsb	sy
 8006530:	60fb      	str	r3, [r7, #12]
}
 8006532:	bf00      	nop
 8006534:	bf00      	nop
 8006536:	e7fd      	b.n	8006534 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006538:	4b07      	ldr	r3, [pc, #28]	@ (8006558 <vTaskPlaceOnEventList+0x48>)
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	3318      	adds	r3, #24
 800653e:	4619      	mov	r1, r3
 8006540:	6878      	ldr	r0, [r7, #4]
 8006542:	f7fe fd8a 	bl	800505a <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006546:	2101      	movs	r1, #1
 8006548:	6838      	ldr	r0, [r7, #0]
 800654a:	f000 fa87 	bl	8006a5c <prvAddCurrentTaskToDelayedList>
}
 800654e:	bf00      	nop
 8006550:	3710      	adds	r7, #16
 8006552:	46bd      	mov	sp, r7
 8006554:	bd80      	pop	{r7, pc}
 8006556:	bf00      	nop
 8006558:	20000934 	.word	0x20000934

0800655c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b086      	sub	sp, #24
 8006560:	af00      	add	r7, sp, #0
 8006562:	60f8      	str	r0, [r7, #12]
 8006564:	60b9      	str	r1, [r7, #8]
 8006566:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	2b00      	cmp	r3, #0
 800656c:	d10b      	bne.n	8006586 <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 800656e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006572:	f383 8811 	msr	BASEPRI, r3
 8006576:	f3bf 8f6f 	isb	sy
 800657a:	f3bf 8f4f 	dsb	sy
 800657e:	617b      	str	r3, [r7, #20]
}
 8006580:	bf00      	nop
 8006582:	bf00      	nop
 8006584:	e7fd      	b.n	8006582 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006586:	4b0a      	ldr	r3, [pc, #40]	@ (80065b0 <vTaskPlaceOnEventListRestricted+0x54>)
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	3318      	adds	r3, #24
 800658c:	4619      	mov	r1, r3
 800658e:	68f8      	ldr	r0, [r7, #12]
 8006590:	f7fe fd3f 	bl	8005012 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	2b00      	cmp	r3, #0
 8006598:	d002      	beq.n	80065a0 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 800659a:	f04f 33ff 	mov.w	r3, #4294967295
 800659e:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 80065a0:	6879      	ldr	r1, [r7, #4]
 80065a2:	68b8      	ldr	r0, [r7, #8]
 80065a4:	f000 fa5a 	bl	8006a5c <prvAddCurrentTaskToDelayedList>
	}
 80065a8:	bf00      	nop
 80065aa:	3718      	adds	r7, #24
 80065ac:	46bd      	mov	sp, r7
 80065ae:	bd80      	pop	{r7, pc}
 80065b0:	20000934 	.word	0x20000934

080065b4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 80065b4:	b580      	push	{r7, lr}
 80065b6:	b086      	sub	sp, #24
 80065b8:	af00      	add	r7, sp, #0
 80065ba:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	68db      	ldr	r3, [r3, #12]
 80065c0:	68db      	ldr	r3, [r3, #12]
 80065c2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 80065c4:	693b      	ldr	r3, [r7, #16]
 80065c6:	2b00      	cmp	r3, #0
 80065c8:	d10b      	bne.n	80065e2 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 80065ca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065ce:	f383 8811 	msr	BASEPRI, r3
 80065d2:	f3bf 8f6f 	isb	sy
 80065d6:	f3bf 8f4f 	dsb	sy
 80065da:	60fb      	str	r3, [r7, #12]
}
 80065dc:	bf00      	nop
 80065de:	bf00      	nop
 80065e0:	e7fd      	b.n	80065de <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80065e2:	693b      	ldr	r3, [r7, #16]
 80065e4:	3318      	adds	r3, #24
 80065e6:	4618      	mov	r0, r3
 80065e8:	f7fe fd70 	bl	80050cc <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80065ec:	4b1d      	ldr	r3, [pc, #116]	@ (8006664 <xTaskRemoveFromEventList+0xb0>)
 80065ee:	681b      	ldr	r3, [r3, #0]
 80065f0:	2b00      	cmp	r3, #0
 80065f2:	d11d      	bne.n	8006630 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80065f4:	693b      	ldr	r3, [r7, #16]
 80065f6:	3304      	adds	r3, #4
 80065f8:	4618      	mov	r0, r3
 80065fa:	f7fe fd67 	bl	80050cc <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80065fe:	693b      	ldr	r3, [r7, #16]
 8006600:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006602:	4b19      	ldr	r3, [pc, #100]	@ (8006668 <xTaskRemoveFromEventList+0xb4>)
 8006604:	681b      	ldr	r3, [r3, #0]
 8006606:	429a      	cmp	r2, r3
 8006608:	d903      	bls.n	8006612 <xTaskRemoveFromEventList+0x5e>
 800660a:	693b      	ldr	r3, [r7, #16]
 800660c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800660e:	4a16      	ldr	r2, [pc, #88]	@ (8006668 <xTaskRemoveFromEventList+0xb4>)
 8006610:	6013      	str	r3, [r2, #0]
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006616:	4613      	mov	r3, r2
 8006618:	009b      	lsls	r3, r3, #2
 800661a:	4413      	add	r3, r2
 800661c:	009b      	lsls	r3, r3, #2
 800661e:	4a13      	ldr	r2, [pc, #76]	@ (800666c <xTaskRemoveFromEventList+0xb8>)
 8006620:	441a      	add	r2, r3
 8006622:	693b      	ldr	r3, [r7, #16]
 8006624:	3304      	adds	r3, #4
 8006626:	4619      	mov	r1, r3
 8006628:	4610      	mov	r0, r2
 800662a:	f7fe fcf2 	bl	8005012 <vListInsertEnd>
 800662e:	e005      	b.n	800663c <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006630:	693b      	ldr	r3, [r7, #16]
 8006632:	3318      	adds	r3, #24
 8006634:	4619      	mov	r1, r3
 8006636:	480e      	ldr	r0, [pc, #56]	@ (8006670 <xTaskRemoveFromEventList+0xbc>)
 8006638:	f7fe fceb 	bl	8005012 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800663c:	693b      	ldr	r3, [r7, #16]
 800663e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006640:	4b0c      	ldr	r3, [pc, #48]	@ (8006674 <xTaskRemoveFromEventList+0xc0>)
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006646:	429a      	cmp	r2, r3
 8006648:	d905      	bls.n	8006656 <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800664a:	2301      	movs	r3, #1
 800664c:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800664e:	4b0a      	ldr	r3, [pc, #40]	@ (8006678 <xTaskRemoveFromEventList+0xc4>)
 8006650:	2201      	movs	r2, #1
 8006652:	601a      	str	r2, [r3, #0]
 8006654:	e001      	b.n	800665a <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006656:	2300      	movs	r3, #0
 8006658:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800665a:	697b      	ldr	r3, [r7, #20]
}
 800665c:	4618      	mov	r0, r3
 800665e:	3718      	adds	r7, #24
 8006660:	46bd      	mov	sp, r7
 8006662:	bd80      	pop	{r7, pc}
 8006664:	20000e30 	.word	0x20000e30
 8006668:	20000e10 	.word	0x20000e10
 800666c:	20000938 	.word	0x20000938
 8006670:	20000dc8 	.word	0x20000dc8
 8006674:	20000934 	.word	0x20000934
 8006678:	20000e1c 	.word	0x20000e1c

0800667c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800667c:	b480      	push	{r7}
 800667e:	b083      	sub	sp, #12
 8006680:	af00      	add	r7, sp, #0
 8006682:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8006684:	4b06      	ldr	r3, [pc, #24]	@ (80066a0 <vTaskInternalSetTimeOutState+0x24>)
 8006686:	681a      	ldr	r2, [r3, #0]
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800668c:	4b05      	ldr	r3, [pc, #20]	@ (80066a4 <vTaskInternalSetTimeOutState+0x28>)
 800668e:	681a      	ldr	r2, [r3, #0]
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	605a      	str	r2, [r3, #4]
}
 8006694:	bf00      	nop
 8006696:	370c      	adds	r7, #12
 8006698:	46bd      	mov	sp, r7
 800669a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800669e:	4770      	bx	lr
 80066a0:	20000e20 	.word	0x20000e20
 80066a4:	20000e0c 	.word	0x20000e0c

080066a8 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b088      	sub	sp, #32
 80066ac:	af00      	add	r7, sp, #0
 80066ae:	6078      	str	r0, [r7, #4]
 80066b0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80066b2:	687b      	ldr	r3, [r7, #4]
 80066b4:	2b00      	cmp	r3, #0
 80066b6:	d10b      	bne.n	80066d0 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 80066b8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066bc:	f383 8811 	msr	BASEPRI, r3
 80066c0:	f3bf 8f6f 	isb	sy
 80066c4:	f3bf 8f4f 	dsb	sy
 80066c8:	613b      	str	r3, [r7, #16]
}
 80066ca:	bf00      	nop
 80066cc:	bf00      	nop
 80066ce:	e7fd      	b.n	80066cc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80066d0:	683b      	ldr	r3, [r7, #0]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d10b      	bne.n	80066ee <xTaskCheckForTimeOut+0x46>
	__asm volatile
 80066d6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80066da:	f383 8811 	msr	BASEPRI, r3
 80066de:	f3bf 8f6f 	isb	sy
 80066e2:	f3bf 8f4f 	dsb	sy
 80066e6:	60fb      	str	r3, [r7, #12]
}
 80066e8:	bf00      	nop
 80066ea:	bf00      	nop
 80066ec:	e7fd      	b.n	80066ea <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80066ee:	f000 fe93 	bl	8007418 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80066f2:	4b1d      	ldr	r3, [pc, #116]	@ (8006768 <xTaskCheckForTimeOut+0xc0>)
 80066f4:	681b      	ldr	r3, [r3, #0]
 80066f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80066f8:	687b      	ldr	r3, [r7, #4]
 80066fa:	685b      	ldr	r3, [r3, #4]
 80066fc:	69ba      	ldr	r2, [r7, #24]
 80066fe:	1ad3      	subs	r3, r2, r3
 8006700:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8006702:	683b      	ldr	r3, [r7, #0]
 8006704:	681b      	ldr	r3, [r3, #0]
 8006706:	f1b3 3fff 	cmp.w	r3, #4294967295
 800670a:	d102      	bne.n	8006712 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800670c:	2300      	movs	r3, #0
 800670e:	61fb      	str	r3, [r7, #28]
 8006710:	e023      	b.n	800675a <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	4b15      	ldr	r3, [pc, #84]	@ (800676c <xTaskCheckForTimeOut+0xc4>)
 8006718:	681b      	ldr	r3, [r3, #0]
 800671a:	429a      	cmp	r2, r3
 800671c:	d007      	beq.n	800672e <xTaskCheckForTimeOut+0x86>
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	685b      	ldr	r3, [r3, #4]
 8006722:	69ba      	ldr	r2, [r7, #24]
 8006724:	429a      	cmp	r2, r3
 8006726:	d302      	bcc.n	800672e <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8006728:	2301      	movs	r3, #1
 800672a:	61fb      	str	r3, [r7, #28]
 800672c:	e015      	b.n	800675a <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800672e:	683b      	ldr	r3, [r7, #0]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	697a      	ldr	r2, [r7, #20]
 8006734:	429a      	cmp	r2, r3
 8006736:	d20b      	bcs.n	8006750 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	697b      	ldr	r3, [r7, #20]
 800673e:	1ad2      	subs	r2, r2, r3
 8006740:	683b      	ldr	r3, [r7, #0]
 8006742:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8006744:	6878      	ldr	r0, [r7, #4]
 8006746:	f7ff ff99 	bl	800667c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800674a:	2300      	movs	r3, #0
 800674c:	61fb      	str	r3, [r7, #28]
 800674e:	e004      	b.n	800675a <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006750:	683b      	ldr	r3, [r7, #0]
 8006752:	2200      	movs	r2, #0
 8006754:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8006756:	2301      	movs	r3, #1
 8006758:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800675a:	f000 fe8f 	bl	800747c <vPortExitCritical>

	return xReturn;
 800675e:	69fb      	ldr	r3, [r7, #28]
}
 8006760:	4618      	mov	r0, r3
 8006762:	3720      	adds	r7, #32
 8006764:	46bd      	mov	sp, r7
 8006766:	bd80      	pop	{r7, pc}
 8006768:	20000e0c 	.word	0x20000e0c
 800676c:	20000e20 	.word	0x20000e20

08006770 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006770:	b480      	push	{r7}
 8006772:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8006774:	4b03      	ldr	r3, [pc, #12]	@ (8006784 <vTaskMissedYield+0x14>)
 8006776:	2201      	movs	r2, #1
 8006778:	601a      	str	r2, [r3, #0]
}
 800677a:	bf00      	nop
 800677c:	46bd      	mov	sp, r7
 800677e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006782:	4770      	bx	lr
 8006784:	20000e1c 	.word	0x20000e1c

08006788 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006788:	b580      	push	{r7, lr}
 800678a:	b082      	sub	sp, #8
 800678c:	af00      	add	r7, sp, #0
 800678e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006790:	f000 f852 	bl	8006838 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8006794:	4b06      	ldr	r3, [pc, #24]	@ (80067b0 <prvIdleTask+0x28>)
 8006796:	681b      	ldr	r3, [r3, #0]
 8006798:	2b01      	cmp	r3, #1
 800679a:	d9f9      	bls.n	8006790 <prvIdleTask+0x8>
			{
				taskYIELD();
 800679c:	4b05      	ldr	r3, [pc, #20]	@ (80067b4 <prvIdleTask+0x2c>)
 800679e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80067a2:	601a      	str	r2, [r3, #0]
 80067a4:	f3bf 8f4f 	dsb	sy
 80067a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 80067ac:	e7f0      	b.n	8006790 <prvIdleTask+0x8>
 80067ae:	bf00      	nop
 80067b0:	20000938 	.word	0x20000938
 80067b4:	e000ed04 	.word	0xe000ed04

080067b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80067b8:	b580      	push	{r7, lr}
 80067ba:	b082      	sub	sp, #8
 80067bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067be:	2300      	movs	r3, #0
 80067c0:	607b      	str	r3, [r7, #4]
 80067c2:	e00c      	b.n	80067de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80067c4:	687a      	ldr	r2, [r7, #4]
 80067c6:	4613      	mov	r3, r2
 80067c8:	009b      	lsls	r3, r3, #2
 80067ca:	4413      	add	r3, r2
 80067cc:	009b      	lsls	r3, r3, #2
 80067ce:	4a12      	ldr	r2, [pc, #72]	@ (8006818 <prvInitialiseTaskLists+0x60>)
 80067d0:	4413      	add	r3, r2
 80067d2:	4618      	mov	r0, r3
 80067d4:	f7fe fbf0 	bl	8004fb8 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80067d8:	687b      	ldr	r3, [r7, #4]
 80067da:	3301      	adds	r3, #1
 80067dc:	607b      	str	r3, [r7, #4]
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	2b37      	cmp	r3, #55	@ 0x37
 80067e2:	d9ef      	bls.n	80067c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80067e4:	480d      	ldr	r0, [pc, #52]	@ (800681c <prvInitialiseTaskLists+0x64>)
 80067e6:	f7fe fbe7 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80067ea:	480d      	ldr	r0, [pc, #52]	@ (8006820 <prvInitialiseTaskLists+0x68>)
 80067ec:	f7fe fbe4 	bl	8004fb8 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80067f0:	480c      	ldr	r0, [pc, #48]	@ (8006824 <prvInitialiseTaskLists+0x6c>)
 80067f2:	f7fe fbe1 	bl	8004fb8 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80067f6:	480c      	ldr	r0, [pc, #48]	@ (8006828 <prvInitialiseTaskLists+0x70>)
 80067f8:	f7fe fbde 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80067fc:	480b      	ldr	r0, [pc, #44]	@ (800682c <prvInitialiseTaskLists+0x74>)
 80067fe:	f7fe fbdb 	bl	8004fb8 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8006802:	4b0b      	ldr	r3, [pc, #44]	@ (8006830 <prvInitialiseTaskLists+0x78>)
 8006804:	4a05      	ldr	r2, [pc, #20]	@ (800681c <prvInitialiseTaskLists+0x64>)
 8006806:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8006808:	4b0a      	ldr	r3, [pc, #40]	@ (8006834 <prvInitialiseTaskLists+0x7c>)
 800680a:	4a05      	ldr	r2, [pc, #20]	@ (8006820 <prvInitialiseTaskLists+0x68>)
 800680c:	601a      	str	r2, [r3, #0]
}
 800680e:	bf00      	nop
 8006810:	3708      	adds	r7, #8
 8006812:	46bd      	mov	sp, r7
 8006814:	bd80      	pop	{r7, pc}
 8006816:	bf00      	nop
 8006818:	20000938 	.word	0x20000938
 800681c:	20000d98 	.word	0x20000d98
 8006820:	20000dac 	.word	0x20000dac
 8006824:	20000dc8 	.word	0x20000dc8
 8006828:	20000ddc 	.word	0x20000ddc
 800682c:	20000df4 	.word	0x20000df4
 8006830:	20000dc0 	.word	0x20000dc0
 8006834:	20000dc4 	.word	0x20000dc4

08006838 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006838:	b580      	push	{r7, lr}
 800683a:	b082      	sub	sp, #8
 800683c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800683e:	e019      	b.n	8006874 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006840:	f000 fdea 	bl	8007418 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006844:	4b10      	ldr	r3, [pc, #64]	@ (8006888 <prvCheckTasksWaitingTermination+0x50>)
 8006846:	68db      	ldr	r3, [r3, #12]
 8006848:	68db      	ldr	r3, [r3, #12]
 800684a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	3304      	adds	r3, #4
 8006850:	4618      	mov	r0, r3
 8006852:	f7fe fc3b 	bl	80050cc <uxListRemove>
				--uxCurrentNumberOfTasks;
 8006856:	4b0d      	ldr	r3, [pc, #52]	@ (800688c <prvCheckTasksWaitingTermination+0x54>)
 8006858:	681b      	ldr	r3, [r3, #0]
 800685a:	3b01      	subs	r3, #1
 800685c:	4a0b      	ldr	r2, [pc, #44]	@ (800688c <prvCheckTasksWaitingTermination+0x54>)
 800685e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006860:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <prvCheckTasksWaitingTermination+0x58>)
 8006862:	681b      	ldr	r3, [r3, #0]
 8006864:	3b01      	subs	r3, #1
 8006866:	4a0a      	ldr	r2, [pc, #40]	@ (8006890 <prvCheckTasksWaitingTermination+0x58>)
 8006868:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800686a:	f000 fe07 	bl	800747c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800686e:	6878      	ldr	r0, [r7, #4]
 8006870:	f000 f810 	bl	8006894 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006874:	4b06      	ldr	r3, [pc, #24]	@ (8006890 <prvCheckTasksWaitingTermination+0x58>)
 8006876:	681b      	ldr	r3, [r3, #0]
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e1      	bne.n	8006840 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800687c:	bf00      	nop
 800687e:	bf00      	nop
 8006880:	3708      	adds	r7, #8
 8006882:	46bd      	mov	sp, r7
 8006884:	bd80      	pop	{r7, pc}
 8006886:	bf00      	nop
 8006888:	20000ddc 	.word	0x20000ddc
 800688c:	20000e08 	.word	0x20000e08
 8006890:	20000df0 	.word	0x20000df0

08006894 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8006894:	b580      	push	{r7, lr}
 8006896:	b084      	sub	sp, #16
 8006898:	af00      	add	r7, sp, #0
 800689a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	3354      	adds	r3, #84	@ 0x54
 80068a0:	4618      	mov	r0, r3
 80068a2:	f001 fafb 	bl	8007e9c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068ac:	2b00      	cmp	r3, #0
 80068ae:	d108      	bne.n	80068c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80068b4:	4618      	mov	r0, r3
 80068b6:	f000 ff9f 	bl	80077f8 <vPortFree>
				vPortFree( pxTCB );
 80068ba:	6878      	ldr	r0, [r7, #4]
 80068bc:	f000 ff9c 	bl	80077f8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80068c0:	e019      	b.n	80068f6 <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068c8:	2b01      	cmp	r3, #1
 80068ca:	d103      	bne.n	80068d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80068cc:	6878      	ldr	r0, [r7, #4]
 80068ce:	f000 ff93 	bl	80077f8 <vPortFree>
	}
 80068d2:	e010      	b.n	80068f6 <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80068d4:	687b      	ldr	r3, [r7, #4]
 80068d6:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80068da:	2b02      	cmp	r3, #2
 80068dc:	d00b      	beq.n	80068f6 <prvDeleteTCB+0x62>
	__asm volatile
 80068de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80068e2:	f383 8811 	msr	BASEPRI, r3
 80068e6:	f3bf 8f6f 	isb	sy
 80068ea:	f3bf 8f4f 	dsb	sy
 80068ee:	60fb      	str	r3, [r7, #12]
}
 80068f0:	bf00      	nop
 80068f2:	bf00      	nop
 80068f4:	e7fd      	b.n	80068f2 <prvDeleteTCB+0x5e>
	}
 80068f6:	bf00      	nop
 80068f8:	3710      	adds	r7, #16
 80068fa:	46bd      	mov	sp, r7
 80068fc:	bd80      	pop	{r7, pc}
	...

08006900 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8006900:	b480      	push	{r7}
 8006902:	b083      	sub	sp, #12
 8006904:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006906:	4b0c      	ldr	r3, [pc, #48]	@ (8006938 <prvResetNextTaskUnblockTime+0x38>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d104      	bne.n	800691a <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8006910:	4b0a      	ldr	r3, [pc, #40]	@ (800693c <prvResetNextTaskUnblockTime+0x3c>)
 8006912:	f04f 32ff 	mov.w	r2, #4294967295
 8006916:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8006918:	e008      	b.n	800692c <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800691a:	4b07      	ldr	r3, [pc, #28]	@ (8006938 <prvResetNextTaskUnblockTime+0x38>)
 800691c:	681b      	ldr	r3, [r3, #0]
 800691e:	68db      	ldr	r3, [r3, #12]
 8006920:	68db      	ldr	r3, [r3, #12]
 8006922:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	4a04      	ldr	r2, [pc, #16]	@ (800693c <prvResetNextTaskUnblockTime+0x3c>)
 800692a:	6013      	str	r3, [r2, #0]
}
 800692c:	bf00      	nop
 800692e:	370c      	adds	r7, #12
 8006930:	46bd      	mov	sp, r7
 8006932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006936:	4770      	bx	lr
 8006938:	20000dc0 	.word	0x20000dc0
 800693c:	20000e28 	.word	0x20000e28

08006940 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006940:	b480      	push	{r7}
 8006942:	b083      	sub	sp, #12
 8006944:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8006946:	4b0b      	ldr	r3, [pc, #44]	@ (8006974 <xTaskGetSchedulerState+0x34>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	2b00      	cmp	r3, #0
 800694c:	d102      	bne.n	8006954 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800694e:	2301      	movs	r3, #1
 8006950:	607b      	str	r3, [r7, #4]
 8006952:	e008      	b.n	8006966 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006954:	4b08      	ldr	r3, [pc, #32]	@ (8006978 <xTaskGetSchedulerState+0x38>)
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	2b00      	cmp	r3, #0
 800695a:	d102      	bne.n	8006962 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800695c:	2302      	movs	r3, #2
 800695e:	607b      	str	r3, [r7, #4]
 8006960:	e001      	b.n	8006966 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8006962:	2300      	movs	r3, #0
 8006964:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8006966:	687b      	ldr	r3, [r7, #4]
	}
 8006968:	4618      	mov	r0, r3
 800696a:	370c      	adds	r7, #12
 800696c:	46bd      	mov	sp, r7
 800696e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006972:	4770      	bx	lr
 8006974:	20000e14 	.word	0x20000e14
 8006978:	20000e30 	.word	0x20000e30

0800697c <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800697c:	b580      	push	{r7, lr}
 800697e:	b086      	sub	sp, #24
 8006980:	af00      	add	r7, sp, #0
 8006982:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006988:	2300      	movs	r3, #0
 800698a:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	2b00      	cmp	r3, #0
 8006990:	d058      	beq.n	8006a44 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8006992:	4b2f      	ldr	r3, [pc, #188]	@ (8006a50 <xTaskPriorityDisinherit+0xd4>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	693a      	ldr	r2, [r7, #16]
 8006998:	429a      	cmp	r2, r3
 800699a:	d00b      	beq.n	80069b4 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 800699c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069a0:	f383 8811 	msr	BASEPRI, r3
 80069a4:	f3bf 8f6f 	isb	sy
 80069a8:	f3bf 8f4f 	dsb	sy
 80069ac:	60fb      	str	r3, [r7, #12]
}
 80069ae:	bf00      	nop
 80069b0:	bf00      	nop
 80069b2:	e7fd      	b.n	80069b0 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 80069b4:	693b      	ldr	r3, [r7, #16]
 80069b6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069b8:	2b00      	cmp	r3, #0
 80069ba:	d10b      	bne.n	80069d4 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 80069bc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069c0:	f383 8811 	msr	BASEPRI, r3
 80069c4:	f3bf 8f6f 	isb	sy
 80069c8:	f3bf 8f4f 	dsb	sy
 80069cc:	60bb      	str	r3, [r7, #8]
}
 80069ce:	bf00      	nop
 80069d0:	bf00      	nop
 80069d2:	e7fd      	b.n	80069d0 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 80069d4:	693b      	ldr	r3, [r7, #16]
 80069d6:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069d8:	1e5a      	subs	r2, r3, #1
 80069da:	693b      	ldr	r3, [r7, #16]
 80069dc:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80069de:	693b      	ldr	r3, [r7, #16]
 80069e0:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80069e2:	693b      	ldr	r3, [r7, #16]
 80069e4:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80069e6:	429a      	cmp	r2, r3
 80069e8:	d02c      	beq.n	8006a44 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80069ea:	693b      	ldr	r3, [r7, #16]
 80069ec:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80069ee:	2b00      	cmp	r3, #0
 80069f0:	d128      	bne.n	8006a44 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80069f2:	693b      	ldr	r3, [r7, #16]
 80069f4:	3304      	adds	r3, #4
 80069f6:	4618      	mov	r0, r3
 80069f8:	f7fe fb68 	bl	80050cc <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8006a00:	693b      	ldr	r3, [r7, #16]
 8006a02:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006a04:	693b      	ldr	r3, [r7, #16]
 8006a06:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a08:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006a0c:	693b      	ldr	r3, [r7, #16]
 8006a0e:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8006a10:	693b      	ldr	r3, [r7, #16]
 8006a12:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <xTaskPriorityDisinherit+0xd8>)
 8006a16:	681b      	ldr	r3, [r3, #0]
 8006a18:	429a      	cmp	r2, r3
 8006a1a:	d903      	bls.n	8006a24 <xTaskPriorityDisinherit+0xa8>
 8006a1c:	693b      	ldr	r3, [r7, #16]
 8006a1e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006a20:	4a0c      	ldr	r2, [pc, #48]	@ (8006a54 <xTaskPriorityDisinherit+0xd8>)
 8006a22:	6013      	str	r3, [r2, #0]
 8006a24:	693b      	ldr	r3, [r7, #16]
 8006a26:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006a28:	4613      	mov	r3, r2
 8006a2a:	009b      	lsls	r3, r3, #2
 8006a2c:	4413      	add	r3, r2
 8006a2e:	009b      	lsls	r3, r3, #2
 8006a30:	4a09      	ldr	r2, [pc, #36]	@ (8006a58 <xTaskPriorityDisinherit+0xdc>)
 8006a32:	441a      	add	r2, r3
 8006a34:	693b      	ldr	r3, [r7, #16]
 8006a36:	3304      	adds	r3, #4
 8006a38:	4619      	mov	r1, r3
 8006a3a:	4610      	mov	r0, r2
 8006a3c:	f7fe fae9 	bl	8005012 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8006a44:	697b      	ldr	r3, [r7, #20]
	}
 8006a46:	4618      	mov	r0, r3
 8006a48:	3718      	adds	r7, #24
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000934 	.word	0x20000934
 8006a54:	20000e10 	.word	0x20000e10
 8006a58:	20000938 	.word	0x20000938

08006a5c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006a5c:	b580      	push	{r7, lr}
 8006a5e:	b084      	sub	sp, #16
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
 8006a64:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8006a66:	4b21      	ldr	r3, [pc, #132]	@ (8006aec <prvAddCurrentTaskToDelayedList+0x90>)
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006a6c:	4b20      	ldr	r3, [pc, #128]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3304      	adds	r3, #4
 8006a72:	4618      	mov	r0, r3
 8006a74:	f7fe fb2a 	bl	80050cc <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a7e:	d10a      	bne.n	8006a96 <prvAddCurrentTaskToDelayedList+0x3a>
 8006a80:	683b      	ldr	r3, [r7, #0]
 8006a82:	2b00      	cmp	r3, #0
 8006a84:	d007      	beq.n	8006a96 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006a86:	4b1a      	ldr	r3, [pc, #104]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	3304      	adds	r3, #4
 8006a8c:	4619      	mov	r1, r3
 8006a8e:	4819      	ldr	r0, [pc, #100]	@ (8006af4 <prvAddCurrentTaskToDelayedList+0x98>)
 8006a90:	f7fe fabf 	bl	8005012 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8006a94:	e026      	b.n	8006ae4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8006a96:	68fa      	ldr	r2, [r7, #12]
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	4413      	add	r3, r2
 8006a9c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006a9e:	4b14      	ldr	r3, [pc, #80]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	68ba      	ldr	r2, [r7, #8]
 8006aa4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 8006aa6:	68ba      	ldr	r2, [r7, #8]
 8006aa8:	68fb      	ldr	r3, [r7, #12]
 8006aaa:	429a      	cmp	r2, r3
 8006aac:	d209      	bcs.n	8006ac2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006aae:	4b12      	ldr	r3, [pc, #72]	@ (8006af8 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006ab0:	681a      	ldr	r2, [r3, #0]
 8006ab2:	4b0f      	ldr	r3, [pc, #60]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	3304      	adds	r3, #4
 8006ab8:	4619      	mov	r1, r3
 8006aba:	4610      	mov	r0, r2
 8006abc:	f7fe facd 	bl	800505a <vListInsert>
}
 8006ac0:	e010      	b.n	8006ae4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006ac2:	4b0e      	ldr	r3, [pc, #56]	@ (8006afc <prvAddCurrentTaskToDelayedList+0xa0>)
 8006ac4:	681a      	ldr	r2, [r3, #0]
 8006ac6:	4b0a      	ldr	r3, [pc, #40]	@ (8006af0 <prvAddCurrentTaskToDelayedList+0x94>)
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	3304      	adds	r3, #4
 8006acc:	4619      	mov	r1, r3
 8006ace:	4610      	mov	r0, r2
 8006ad0:	f7fe fac3 	bl	800505a <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8006ad4:	4b0a      	ldr	r3, [pc, #40]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ad6:	681b      	ldr	r3, [r3, #0]
 8006ad8:	68ba      	ldr	r2, [r7, #8]
 8006ada:	429a      	cmp	r2, r3
 8006adc:	d202      	bcs.n	8006ae4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8006ade:	4a08      	ldr	r2, [pc, #32]	@ (8006b00 <prvAddCurrentTaskToDelayedList+0xa4>)
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	6013      	str	r3, [r2, #0]
}
 8006ae4:	bf00      	nop
 8006ae6:	3710      	adds	r7, #16
 8006ae8:	46bd      	mov	sp, r7
 8006aea:	bd80      	pop	{r7, pc}
 8006aec:	20000e0c 	.word	0x20000e0c
 8006af0:	20000934 	.word	0x20000934
 8006af4:	20000df4 	.word	0x20000df4
 8006af8:	20000dc4 	.word	0x20000dc4
 8006afc:	20000dc0 	.word	0x20000dc0
 8006b00:	20000e28 	.word	0x20000e28

08006b04 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8006b04:	b580      	push	{r7, lr}
 8006b06:	b08a      	sub	sp, #40	@ 0x28
 8006b08:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 8006b0a:	2300      	movs	r3, #0
 8006b0c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8006b0e:	f000 fb13 	bl	8007138 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8006b12:	4b1d      	ldr	r3, [pc, #116]	@ (8006b88 <xTimerCreateTimerTask+0x84>)
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	2b00      	cmp	r3, #0
 8006b18:	d021      	beq.n	8006b5e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 8006b1e:	2300      	movs	r3, #0
 8006b20:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8006b22:	1d3a      	adds	r2, r7, #4
 8006b24:	f107 0108 	add.w	r1, r7, #8
 8006b28:	f107 030c 	add.w	r3, r7, #12
 8006b2c:	4618      	mov	r0, r3
 8006b2e:	f7fe fa29 	bl	8004f84 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8006b32:	6879      	ldr	r1, [r7, #4]
 8006b34:	68bb      	ldr	r3, [r7, #8]
 8006b36:	68fa      	ldr	r2, [r7, #12]
 8006b38:	9202      	str	r2, [sp, #8]
 8006b3a:	9301      	str	r3, [sp, #4]
 8006b3c:	2302      	movs	r3, #2
 8006b3e:	9300      	str	r3, [sp, #0]
 8006b40:	2300      	movs	r3, #0
 8006b42:	460a      	mov	r2, r1
 8006b44:	4911      	ldr	r1, [pc, #68]	@ (8006b8c <xTimerCreateTimerTask+0x88>)
 8006b46:	4812      	ldr	r0, [pc, #72]	@ (8006b90 <xTimerCreateTimerTask+0x8c>)
 8006b48:	f7ff f8a2 	bl	8005c90 <xTaskCreateStatic>
 8006b4c:	4603      	mov	r3, r0
 8006b4e:	4a11      	ldr	r2, [pc, #68]	@ (8006b94 <xTimerCreateTimerTask+0x90>)
 8006b50:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8006b52:	4b10      	ldr	r3, [pc, #64]	@ (8006b94 <xTimerCreateTimerTask+0x90>)
 8006b54:	681b      	ldr	r3, [r3, #0]
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d001      	beq.n	8006b5e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006b5a:	2301      	movs	r3, #1
 8006b5c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006b5e:	697b      	ldr	r3, [r7, #20]
 8006b60:	2b00      	cmp	r3, #0
 8006b62:	d10b      	bne.n	8006b7c <xTimerCreateTimerTask+0x78>
	__asm volatile
 8006b64:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b68:	f383 8811 	msr	BASEPRI, r3
 8006b6c:	f3bf 8f6f 	isb	sy
 8006b70:	f3bf 8f4f 	dsb	sy
 8006b74:	613b      	str	r3, [r7, #16]
}
 8006b76:	bf00      	nop
 8006b78:	bf00      	nop
 8006b7a:	e7fd      	b.n	8006b78 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006b7c:	697b      	ldr	r3, [r7, #20]
}
 8006b7e:	4618      	mov	r0, r3
 8006b80:	3718      	adds	r7, #24
 8006b82:	46bd      	mov	sp, r7
 8006b84:	bd80      	pop	{r7, pc}
 8006b86:	bf00      	nop
 8006b88:	20000e64 	.word	0x20000e64
 8006b8c:	0800a7dc 	.word	0x0800a7dc
 8006b90:	08006cd1 	.word	0x08006cd1
 8006b94:	20000e68 	.word	0x20000e68

08006b98 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b08a      	sub	sp, #40	@ 0x28
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	60f8      	str	r0, [r7, #12]
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	607a      	str	r2, [r7, #4]
 8006ba4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 8006ba6:	2300      	movs	r3, #0
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006baa:	68fb      	ldr	r3, [r7, #12]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	d10b      	bne.n	8006bc8 <xTimerGenericCommand+0x30>
	__asm volatile
 8006bb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006bb4:	f383 8811 	msr	BASEPRI, r3
 8006bb8:	f3bf 8f6f 	isb	sy
 8006bbc:	f3bf 8f4f 	dsb	sy
 8006bc0:	623b      	str	r3, [r7, #32]
}
 8006bc2:	bf00      	nop
 8006bc4:	bf00      	nop
 8006bc6:	e7fd      	b.n	8006bc4 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006bc8:	4b19      	ldr	r3, [pc, #100]	@ (8006c30 <xTimerGenericCommand+0x98>)
 8006bca:	681b      	ldr	r3, [r3, #0]
 8006bcc:	2b00      	cmp	r3, #0
 8006bce:	d02a      	beq.n	8006c26 <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006bd0:	68bb      	ldr	r3, [r7, #8]
 8006bd2:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 8006bd8:	68fb      	ldr	r3, [r7, #12]
 8006bda:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8006bdc:	68bb      	ldr	r3, [r7, #8]
 8006bde:	2b05      	cmp	r3, #5
 8006be0:	dc18      	bgt.n	8006c14 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8006be2:	f7ff fead 	bl	8006940 <xTaskGetSchedulerState>
 8006be6:	4603      	mov	r3, r0
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d109      	bne.n	8006c00 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8006bec:	4b10      	ldr	r3, [pc, #64]	@ (8006c30 <xTimerGenericCommand+0x98>)
 8006bee:	6818      	ldr	r0, [r3, #0]
 8006bf0:	f107 0110 	add.w	r1, r7, #16
 8006bf4:	2300      	movs	r3, #0
 8006bf6:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006bf8:	f7fe fbd8 	bl	80053ac <xQueueGenericSend>
 8006bfc:	6278      	str	r0, [r7, #36]	@ 0x24
 8006bfe:	e012      	b.n	8006c26 <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8006c00:	4b0b      	ldr	r3, [pc, #44]	@ (8006c30 <xTimerGenericCommand+0x98>)
 8006c02:	6818      	ldr	r0, [r3, #0]
 8006c04:	f107 0110 	add.w	r1, r7, #16
 8006c08:	2300      	movs	r3, #0
 8006c0a:	2200      	movs	r2, #0
 8006c0c:	f7fe fbce 	bl	80053ac <xQueueGenericSend>
 8006c10:	6278      	str	r0, [r7, #36]	@ 0x24
 8006c12:	e008      	b.n	8006c26 <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8006c14:	4b06      	ldr	r3, [pc, #24]	@ (8006c30 <xTimerGenericCommand+0x98>)
 8006c16:	6818      	ldr	r0, [r3, #0]
 8006c18:	f107 0110 	add.w	r1, r7, #16
 8006c1c:	2300      	movs	r3, #0
 8006c1e:	683a      	ldr	r2, [r7, #0]
 8006c20:	f7fe fcc6 	bl	80055b0 <xQueueGenericSendFromISR>
 8006c24:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8006c26:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 8006c28:	4618      	mov	r0, r3
 8006c2a:	3728      	adds	r7, #40	@ 0x28
 8006c2c:	46bd      	mov	sp, r7
 8006c2e:	bd80      	pop	{r7, pc}
 8006c30:	20000e64 	.word	0x20000e64

08006c34 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8006c34:	b580      	push	{r7, lr}
 8006c36:	b088      	sub	sp, #32
 8006c38:	af02      	add	r7, sp, #8
 8006c3a:	6078      	str	r0, [r7, #4]
 8006c3c:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006c3e:	4b23      	ldr	r3, [pc, #140]	@ (8006ccc <prvProcessExpiredTimer+0x98>)
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	68db      	ldr	r3, [r3, #12]
 8006c44:	68db      	ldr	r3, [r3, #12]
 8006c46:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006c48:	697b      	ldr	r3, [r7, #20]
 8006c4a:	3304      	adds	r3, #4
 8006c4c:	4618      	mov	r0, r3
 8006c4e:	f7fe fa3d 	bl	80050cc <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c52:	697b      	ldr	r3, [r7, #20]
 8006c54:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c58:	f003 0304 	and.w	r3, r3, #4
 8006c5c:	2b00      	cmp	r3, #0
 8006c5e:	d023      	beq.n	8006ca8 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	699a      	ldr	r2, [r3, #24]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	18d1      	adds	r1, r2, r3
 8006c68:	687b      	ldr	r3, [r7, #4]
 8006c6a:	683a      	ldr	r2, [r7, #0]
 8006c6c:	6978      	ldr	r0, [r7, #20]
 8006c6e:	f000 f8d5 	bl	8006e1c <prvInsertTimerInActiveList>
 8006c72:	4603      	mov	r3, r0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d020      	beq.n	8006cba <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006c78:	2300      	movs	r3, #0
 8006c7a:	9300      	str	r3, [sp, #0]
 8006c7c:	2300      	movs	r3, #0
 8006c7e:	687a      	ldr	r2, [r7, #4]
 8006c80:	2100      	movs	r1, #0
 8006c82:	6978      	ldr	r0, [r7, #20]
 8006c84:	f7ff ff88 	bl	8006b98 <xTimerGenericCommand>
 8006c88:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006c8a:	693b      	ldr	r3, [r7, #16]
 8006c8c:	2b00      	cmp	r3, #0
 8006c8e:	d114      	bne.n	8006cba <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c94:	f383 8811 	msr	BASEPRI, r3
 8006c98:	f3bf 8f6f 	isb	sy
 8006c9c:	f3bf 8f4f 	dsb	sy
 8006ca0:	60fb      	str	r3, [r7, #12]
}
 8006ca2:	bf00      	nop
 8006ca4:	bf00      	nop
 8006ca6:	e7fd      	b.n	8006ca4 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006ca8:	697b      	ldr	r3, [r7, #20]
 8006caa:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cae:	f023 0301 	bic.w	r3, r3, #1
 8006cb2:	b2da      	uxtb	r2, r3
 8006cb4:	697b      	ldr	r3, [r7, #20]
 8006cb6:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006cba:	697b      	ldr	r3, [r7, #20]
 8006cbc:	6a1b      	ldr	r3, [r3, #32]
 8006cbe:	6978      	ldr	r0, [r7, #20]
 8006cc0:	4798      	blx	r3
}
 8006cc2:	bf00      	nop
 8006cc4:	3718      	adds	r7, #24
 8006cc6:	46bd      	mov	sp, r7
 8006cc8:	bd80      	pop	{r7, pc}
 8006cca:	bf00      	nop
 8006ccc:	20000e5c 	.word	0x20000e5c

08006cd0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006cd0:	b580      	push	{r7, lr}
 8006cd2:	b084      	sub	sp, #16
 8006cd4:	af00      	add	r7, sp, #0
 8006cd6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cd8:	f107 0308 	add.w	r3, r7, #8
 8006cdc:	4618      	mov	r0, r3
 8006cde:	f000 f859 	bl	8006d94 <prvGetNextExpireTime>
 8006ce2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8006ce4:	68bb      	ldr	r3, [r7, #8]
 8006ce6:	4619      	mov	r1, r3
 8006ce8:	68f8      	ldr	r0, [r7, #12]
 8006cea:	f000 f805 	bl	8006cf8 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8006cee:	f000 f8d7 	bl	8006ea0 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8006cf2:	bf00      	nop
 8006cf4:	e7f0      	b.n	8006cd8 <prvTimerTask+0x8>
	...

08006cf8 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 8006cf8:	b580      	push	{r7, lr}
 8006cfa:	b084      	sub	sp, #16
 8006cfc:	af00      	add	r7, sp, #0
 8006cfe:	6078      	str	r0, [r7, #4]
 8006d00:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8006d02:	f7ff fa29 	bl	8006158 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006d06:	f107 0308 	add.w	r3, r7, #8
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	f000 f866 	bl	8006ddc <prvSampleTimeNow>
 8006d10:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	2b00      	cmp	r3, #0
 8006d16:	d130      	bne.n	8006d7a <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 8006d18:	683b      	ldr	r3, [r7, #0]
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d10a      	bne.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
 8006d1e:	687a      	ldr	r2, [r7, #4]
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d806      	bhi.n	8006d34 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 8006d26:	f7ff fa25 	bl	8006174 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 8006d2a:	68f9      	ldr	r1, [r7, #12]
 8006d2c:	6878      	ldr	r0, [r7, #4]
 8006d2e:	f7ff ff81 	bl	8006c34 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8006d32:	e024      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8006d34:	683b      	ldr	r3, [r7, #0]
 8006d36:	2b00      	cmp	r3, #0
 8006d38:	d008      	beq.n	8006d4c <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006d3a:	4b13      	ldr	r3, [pc, #76]	@ (8006d88 <prvProcessTimerOrBlockTask+0x90>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d101      	bne.n	8006d48 <prvProcessTimerOrBlockTask+0x50>
 8006d44:	2301      	movs	r3, #1
 8006d46:	e000      	b.n	8006d4a <prvProcessTimerOrBlockTask+0x52>
 8006d48:	2300      	movs	r3, #0
 8006d4a:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006d4c:	4b0f      	ldr	r3, [pc, #60]	@ (8006d8c <prvProcessTimerOrBlockTask+0x94>)
 8006d4e:	6818      	ldr	r0, [r3, #0]
 8006d50:	687a      	ldr	r2, [r7, #4]
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	1ad3      	subs	r3, r2, r3
 8006d56:	683a      	ldr	r2, [r7, #0]
 8006d58:	4619      	mov	r1, r3
 8006d5a:	f7fe ff65 	bl	8005c28 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006d5e:	f7ff fa09 	bl	8006174 <xTaskResumeAll>
 8006d62:	4603      	mov	r3, r0
 8006d64:	2b00      	cmp	r3, #0
 8006d66:	d10a      	bne.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006d68:	4b09      	ldr	r3, [pc, #36]	@ (8006d90 <prvProcessTimerOrBlockTask+0x98>)
 8006d6a:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006d6e:	601a      	str	r2, [r3, #0]
 8006d70:	f3bf 8f4f 	dsb	sy
 8006d74:	f3bf 8f6f 	isb	sy
}
 8006d78:	e001      	b.n	8006d7e <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006d7a:	f7ff f9fb 	bl	8006174 <xTaskResumeAll>
}
 8006d7e:	bf00      	nop
 8006d80:	3710      	adds	r7, #16
 8006d82:	46bd      	mov	sp, r7
 8006d84:	bd80      	pop	{r7, pc}
 8006d86:	bf00      	nop
 8006d88:	20000e60 	.word	0x20000e60
 8006d8c:	20000e64 	.word	0x20000e64
 8006d90:	e000ed04 	.word	0xe000ed04

08006d94 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006d94:	b480      	push	{r7}
 8006d96:	b085      	sub	sp, #20
 8006d98:	af00      	add	r7, sp, #0
 8006d9a:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006d9c:	4b0e      	ldr	r3, [pc, #56]	@ (8006dd8 <prvGetNextExpireTime+0x44>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d101      	bne.n	8006daa <prvGetNextExpireTime+0x16>
 8006da6:	2201      	movs	r2, #1
 8006da8:	e000      	b.n	8006dac <prvGetNextExpireTime+0x18>
 8006daa:	2200      	movs	r2, #0
 8006dac:	687b      	ldr	r3, [r7, #4]
 8006dae:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d105      	bne.n	8006dc4 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006db8:	4b07      	ldr	r3, [pc, #28]	@ (8006dd8 <prvGetNextExpireTime+0x44>)
 8006dba:	681b      	ldr	r3, [r3, #0]
 8006dbc:	68db      	ldr	r3, [r3, #12]
 8006dbe:	681b      	ldr	r3, [r3, #0]
 8006dc0:	60fb      	str	r3, [r7, #12]
 8006dc2:	e001      	b.n	8006dc8 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006dc8:	68fb      	ldr	r3, [r7, #12]
}
 8006dca:	4618      	mov	r0, r3
 8006dcc:	3714      	adds	r7, #20
 8006dce:	46bd      	mov	sp, r7
 8006dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dd4:	4770      	bx	lr
 8006dd6:	bf00      	nop
 8006dd8:	20000e5c 	.word	0x20000e5c

08006ddc <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006ddc:	b580      	push	{r7, lr}
 8006dde:	b084      	sub	sp, #16
 8006de0:	af00      	add	r7, sp, #0
 8006de2:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006de4:	f7ff fa64 	bl	80062b0 <xTaskGetTickCount>
 8006de8:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006dea:	4b0b      	ldr	r3, [pc, #44]	@ (8006e18 <prvSampleTimeNow+0x3c>)
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68fa      	ldr	r2, [r7, #12]
 8006df0:	429a      	cmp	r2, r3
 8006df2:	d205      	bcs.n	8006e00 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006df4:	f000 f93a 	bl	800706c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	2201      	movs	r2, #1
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	e002      	b.n	8006e06 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006e00:	687b      	ldr	r3, [r7, #4]
 8006e02:	2200      	movs	r2, #0
 8006e04:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006e06:	4a04      	ldr	r2, [pc, #16]	@ (8006e18 <prvSampleTimeNow+0x3c>)
 8006e08:	68fb      	ldr	r3, [r7, #12]
 8006e0a:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006e0c:	68fb      	ldr	r3, [r7, #12]
}
 8006e0e:	4618      	mov	r0, r3
 8006e10:	3710      	adds	r7, #16
 8006e12:	46bd      	mov	sp, r7
 8006e14:	bd80      	pop	{r7, pc}
 8006e16:	bf00      	nop
 8006e18:	20000e6c 	.word	0x20000e6c

08006e1c <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006e1c:	b580      	push	{r7, lr}
 8006e1e:	b086      	sub	sp, #24
 8006e20:	af00      	add	r7, sp, #0
 8006e22:	60f8      	str	r0, [r7, #12]
 8006e24:	60b9      	str	r1, [r7, #8]
 8006e26:	607a      	str	r2, [r7, #4]
 8006e28:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006e2e:	68fb      	ldr	r3, [r7, #12]
 8006e30:	68ba      	ldr	r2, [r7, #8]
 8006e32:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006e34:	68fb      	ldr	r3, [r7, #12]
 8006e36:	68fa      	ldr	r2, [r7, #12]
 8006e38:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006e3a:	68ba      	ldr	r2, [r7, #8]
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	429a      	cmp	r2, r3
 8006e40:	d812      	bhi.n	8006e68 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006e42:	687a      	ldr	r2, [r7, #4]
 8006e44:	683b      	ldr	r3, [r7, #0]
 8006e46:	1ad2      	subs	r2, r2, r3
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	699b      	ldr	r3, [r3, #24]
 8006e4c:	429a      	cmp	r2, r3
 8006e4e:	d302      	bcc.n	8006e56 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006e50:	2301      	movs	r3, #1
 8006e52:	617b      	str	r3, [r7, #20]
 8006e54:	e01b      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006e56:	4b10      	ldr	r3, [pc, #64]	@ (8006e98 <prvInsertTimerInActiveList+0x7c>)
 8006e58:	681a      	ldr	r2, [r3, #0]
 8006e5a:	68fb      	ldr	r3, [r7, #12]
 8006e5c:	3304      	adds	r3, #4
 8006e5e:	4619      	mov	r1, r3
 8006e60:	4610      	mov	r0, r2
 8006e62:	f7fe f8fa 	bl	800505a <vListInsert>
 8006e66:	e012      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006e68:	687a      	ldr	r2, [r7, #4]
 8006e6a:	683b      	ldr	r3, [r7, #0]
 8006e6c:	429a      	cmp	r2, r3
 8006e6e:	d206      	bcs.n	8006e7e <prvInsertTimerInActiveList+0x62>
 8006e70:	68ba      	ldr	r2, [r7, #8]
 8006e72:	683b      	ldr	r3, [r7, #0]
 8006e74:	429a      	cmp	r2, r3
 8006e76:	d302      	bcc.n	8006e7e <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006e78:	2301      	movs	r3, #1
 8006e7a:	617b      	str	r3, [r7, #20]
 8006e7c:	e007      	b.n	8006e8e <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006e7e:	4b07      	ldr	r3, [pc, #28]	@ (8006e9c <prvInsertTimerInActiveList+0x80>)
 8006e80:	681a      	ldr	r2, [r3, #0]
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	3304      	adds	r3, #4
 8006e86:	4619      	mov	r1, r3
 8006e88:	4610      	mov	r0, r2
 8006e8a:	f7fe f8e6 	bl	800505a <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006e8e:	697b      	ldr	r3, [r7, #20]
}
 8006e90:	4618      	mov	r0, r3
 8006e92:	3718      	adds	r7, #24
 8006e94:	46bd      	mov	sp, r7
 8006e96:	bd80      	pop	{r7, pc}
 8006e98:	20000e60 	.word	0x20000e60
 8006e9c:	20000e5c 	.word	0x20000e5c

08006ea0 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006ea0:	b580      	push	{r7, lr}
 8006ea2:	b08e      	sub	sp, #56	@ 0x38
 8006ea4:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006ea6:	e0ce      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	da19      	bge.n	8006ee2 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006eae:	1d3b      	adds	r3, r7, #4
 8006eb0:	3304      	adds	r3, #4
 8006eb2:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006eb4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	d10b      	bne.n	8006ed2 <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006eba:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ebe:	f383 8811 	msr	BASEPRI, r3
 8006ec2:	f3bf 8f6f 	isb	sy
 8006ec6:	f3bf 8f4f 	dsb	sy
 8006eca:	61fb      	str	r3, [r7, #28]
}
 8006ecc:	bf00      	nop
 8006ece:	bf00      	nop
 8006ed0:	e7fd      	b.n	8006ece <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006ed2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ed8:	6850      	ldr	r0, [r2, #4]
 8006eda:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006edc:	6892      	ldr	r2, [r2, #8]
 8006ede:	4611      	mov	r1, r2
 8006ee0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006ee2:	687b      	ldr	r3, [r7, #4]
 8006ee4:	2b00      	cmp	r3, #0
 8006ee6:	f2c0 80ae 	blt.w	8007046 <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006eee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef0:	695b      	ldr	r3, [r3, #20]
 8006ef2:	2b00      	cmp	r3, #0
 8006ef4:	d004      	beq.n	8006f00 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006ef6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ef8:	3304      	adds	r3, #4
 8006efa:	4618      	mov	r0, r3
 8006efc:	f7fe f8e6 	bl	80050cc <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006f00:	463b      	mov	r3, r7
 8006f02:	4618      	mov	r0, r3
 8006f04:	f7ff ff6a 	bl	8006ddc <prvSampleTimeNow>
 8006f08:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	2b09      	cmp	r3, #9
 8006f0e:	f200 8097 	bhi.w	8007040 <prvProcessReceivedCommands+0x1a0>
 8006f12:	a201      	add	r2, pc, #4	@ (adr r2, 8006f18 <prvProcessReceivedCommands+0x78>)
 8006f14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f18:	08006f41 	.word	0x08006f41
 8006f1c:	08006f41 	.word	0x08006f41
 8006f20:	08006f41 	.word	0x08006f41
 8006f24:	08006fb7 	.word	0x08006fb7
 8006f28:	08006fcb 	.word	0x08006fcb
 8006f2c:	08007017 	.word	0x08007017
 8006f30:	08006f41 	.word	0x08006f41
 8006f34:	08006f41 	.word	0x08006f41
 8006f38:	08006fb7 	.word	0x08006fb7
 8006f3c:	08006fcb 	.word	0x08006fcb
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006f40:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f42:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f46:	f043 0301 	orr.w	r3, r3, #1
 8006f4a:	b2da      	uxtb	r2, r3
 8006f4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f4e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006f52:	68ba      	ldr	r2, [r7, #8]
 8006f54:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f56:	699b      	ldr	r3, [r3, #24]
 8006f58:	18d1      	adds	r1, r2, r3
 8006f5a:	68bb      	ldr	r3, [r7, #8]
 8006f5c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006f5e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f60:	f7ff ff5c 	bl	8006e1c <prvInsertTimerInActiveList>
 8006f64:	4603      	mov	r3, r0
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d06c      	beq.n	8007044 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006f6a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f6c:	6a1b      	ldr	r3, [r3, #32]
 8006f6e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f70:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006f72:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f74:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006f78:	f003 0304 	and.w	r3, r3, #4
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d061      	beq.n	8007044 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006f80:	68ba      	ldr	r2, [r7, #8]
 8006f82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006f84:	699b      	ldr	r3, [r3, #24]
 8006f86:	441a      	add	r2, r3
 8006f88:	2300      	movs	r3, #0
 8006f8a:	9300      	str	r3, [sp, #0]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	2100      	movs	r1, #0
 8006f90:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006f92:	f7ff fe01 	bl	8006b98 <xTimerGenericCommand>
 8006f96:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006f98:	6a3b      	ldr	r3, [r7, #32]
 8006f9a:	2b00      	cmp	r3, #0
 8006f9c:	d152      	bne.n	8007044 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006f9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fa2:	f383 8811 	msr	BASEPRI, r3
 8006fa6:	f3bf 8f6f 	isb	sy
 8006faa:	f3bf 8f4f 	dsb	sy
 8006fae:	61bb      	str	r3, [r7, #24]
}
 8006fb0:	bf00      	nop
 8006fb2:	bf00      	nop
 8006fb4:	e7fd      	b.n	8006fb2 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006fb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fb8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fbc:	f023 0301 	bic.w	r3, r3, #1
 8006fc0:	b2da      	uxtb	r2, r3
 8006fc2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fc4:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006fc8:	e03d      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006fca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fcc:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006fd0:	f043 0301 	orr.w	r3, r3, #1
 8006fd4:	b2da      	uxtb	r2, r3
 8006fd6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fd8:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006fdc:	68ba      	ldr	r2, [r7, #8]
 8006fde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe0:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006fe2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006fe4:	699b      	ldr	r3, [r3, #24]
 8006fe6:	2b00      	cmp	r3, #0
 8006fe8:	d10b      	bne.n	8007002 <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006fea:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fee:	f383 8811 	msr	BASEPRI, r3
 8006ff2:	f3bf 8f6f 	isb	sy
 8006ff6:	f3bf 8f4f 	dsb	sy
 8006ffa:	617b      	str	r3, [r7, #20]
}
 8006ffc:	bf00      	nop
 8006ffe:	bf00      	nop
 8007000:	e7fd      	b.n	8006ffe <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007002:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007004:	699a      	ldr	r2, [r3, #24]
 8007006:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007008:	18d1      	adds	r1, r2, r3
 800700a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800700c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800700e:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007010:	f7ff ff04 	bl	8006e1c <prvInsertTimerInActiveList>
					break;
 8007014:	e017      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8007016:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007018:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 800701c:	f003 0302 	and.w	r3, r3, #2
 8007020:	2b00      	cmp	r3, #0
 8007022:	d103      	bne.n	800702c <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8007024:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007026:	f000 fbe7 	bl	80077f8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800702a:	e00c      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800702c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800702e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007032:	f023 0301 	bic.w	r3, r3, #1
 8007036:	b2da      	uxtb	r2, r3
 8007038:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800703a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800703e:	e002      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8007040:	bf00      	nop
 8007042:	e000      	b.n	8007046 <prvProcessReceivedCommands+0x1a6>
					break;
 8007044:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8007046:	4b08      	ldr	r3, [pc, #32]	@ (8007068 <prvProcessReceivedCommands+0x1c8>)
 8007048:	681b      	ldr	r3, [r3, #0]
 800704a:	1d39      	adds	r1, r7, #4
 800704c:	2200      	movs	r2, #0
 800704e:	4618      	mov	r0, r3
 8007050:	f7fe fb4c 	bl	80056ec <xQueueReceive>
 8007054:	4603      	mov	r3, r0
 8007056:	2b00      	cmp	r3, #0
 8007058:	f47f af26 	bne.w	8006ea8 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 800705c:	bf00      	nop
 800705e:	bf00      	nop
 8007060:	3730      	adds	r7, #48	@ 0x30
 8007062:	46bd      	mov	sp, r7
 8007064:	bd80      	pop	{r7, pc}
 8007066:	bf00      	nop
 8007068:	20000e64 	.word	0x20000e64

0800706c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b088      	sub	sp, #32
 8007070:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007072:	e049      	b.n	8007108 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8007074:	4b2e      	ldr	r3, [pc, #184]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 8007076:	681b      	ldr	r3, [r3, #0]
 8007078:	68db      	ldr	r3, [r3, #12]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800707e:	4b2c      	ldr	r3, [pc, #176]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68db      	ldr	r3, [r3, #12]
 8007084:	68db      	ldr	r3, [r3, #12]
 8007086:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007088:	68fb      	ldr	r3, [r7, #12]
 800708a:	3304      	adds	r3, #4
 800708c:	4618      	mov	r0, r3
 800708e:	f7fe f81d 	bl	80050cc <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007092:	68fb      	ldr	r3, [r7, #12]
 8007094:	6a1b      	ldr	r3, [r3, #32]
 8007096:	68f8      	ldr	r0, [r7, #12]
 8007098:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800709a:	68fb      	ldr	r3, [r7, #12]
 800709c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80070a0:	f003 0304 	and.w	r3, r3, #4
 80070a4:	2b00      	cmp	r3, #0
 80070a6:	d02f      	beq.n	8007108 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 80070a8:	68fb      	ldr	r3, [r7, #12]
 80070aa:	699b      	ldr	r3, [r3, #24]
 80070ac:	693a      	ldr	r2, [r7, #16]
 80070ae:	4413      	add	r3, r2
 80070b0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 80070b2:	68ba      	ldr	r2, [r7, #8]
 80070b4:	693b      	ldr	r3, [r7, #16]
 80070b6:	429a      	cmp	r2, r3
 80070b8:	d90e      	bls.n	80070d8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	68ba      	ldr	r2, [r7, #8]
 80070be:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	68fa      	ldr	r2, [r7, #12]
 80070c4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 80070c6:	4b1a      	ldr	r3, [pc, #104]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	68fb      	ldr	r3, [r7, #12]
 80070cc:	3304      	adds	r3, #4
 80070ce:	4619      	mov	r1, r3
 80070d0:	4610      	mov	r0, r2
 80070d2:	f7fd ffc2 	bl	800505a <vListInsert>
 80070d6:	e017      	b.n	8007108 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80070d8:	2300      	movs	r3, #0
 80070da:	9300      	str	r3, [sp, #0]
 80070dc:	2300      	movs	r3, #0
 80070de:	693a      	ldr	r2, [r7, #16]
 80070e0:	2100      	movs	r1, #0
 80070e2:	68f8      	ldr	r0, [r7, #12]
 80070e4:	f7ff fd58 	bl	8006b98 <xTimerGenericCommand>
 80070e8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 80070ea:	687b      	ldr	r3, [r7, #4]
 80070ec:	2b00      	cmp	r3, #0
 80070ee:	d10b      	bne.n	8007108 <prvSwitchTimerLists+0x9c>
	__asm volatile
 80070f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f4:	f383 8811 	msr	BASEPRI, r3
 80070f8:	f3bf 8f6f 	isb	sy
 80070fc:	f3bf 8f4f 	dsb	sy
 8007100:	603b      	str	r3, [r7, #0]
}
 8007102:	bf00      	nop
 8007104:	bf00      	nop
 8007106:	e7fd      	b.n	8007104 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007108:	4b09      	ldr	r3, [pc, #36]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 800710a:	681b      	ldr	r3, [r3, #0]
 800710c:	681b      	ldr	r3, [r3, #0]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d1b0      	bne.n	8007074 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007112:	4b07      	ldr	r3, [pc, #28]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <prvSwitchTimerLists+0xc8>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	4a04      	ldr	r2, [pc, #16]	@ (8007130 <prvSwitchTimerLists+0xc4>)
 800711e:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007120:	4a04      	ldr	r2, [pc, #16]	@ (8007134 <prvSwitchTimerLists+0xc8>)
 8007122:	697b      	ldr	r3, [r7, #20]
 8007124:	6013      	str	r3, [r2, #0]
}
 8007126:	bf00      	nop
 8007128:	3718      	adds	r7, #24
 800712a:	46bd      	mov	sp, r7
 800712c:	bd80      	pop	{r7, pc}
 800712e:	bf00      	nop
 8007130:	20000e5c 	.word	0x20000e5c
 8007134:	20000e60 	.word	0x20000e60

08007138 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007138:	b580      	push	{r7, lr}
 800713a:	b082      	sub	sp, #8
 800713c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800713e:	f000 f96b 	bl	8007418 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007142:	4b15      	ldr	r3, [pc, #84]	@ (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007144:	681b      	ldr	r3, [r3, #0]
 8007146:	2b00      	cmp	r3, #0
 8007148:	d120      	bne.n	800718c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800714a:	4814      	ldr	r0, [pc, #80]	@ (800719c <prvCheckForValidListAndQueue+0x64>)
 800714c:	f7fd ff34 	bl	8004fb8 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007150:	4813      	ldr	r0, [pc, #76]	@ (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007152:	f7fd ff31 	bl	8004fb8 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007156:	4b13      	ldr	r3, [pc, #76]	@ (80071a4 <prvCheckForValidListAndQueue+0x6c>)
 8007158:	4a10      	ldr	r2, [pc, #64]	@ (800719c <prvCheckForValidListAndQueue+0x64>)
 800715a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800715c:	4b12      	ldr	r3, [pc, #72]	@ (80071a8 <prvCheckForValidListAndQueue+0x70>)
 800715e:	4a10      	ldr	r2, [pc, #64]	@ (80071a0 <prvCheckForValidListAndQueue+0x68>)
 8007160:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007162:	2300      	movs	r3, #0
 8007164:	9300      	str	r3, [sp, #0]
 8007166:	4b11      	ldr	r3, [pc, #68]	@ (80071ac <prvCheckForValidListAndQueue+0x74>)
 8007168:	4a11      	ldr	r2, [pc, #68]	@ (80071b0 <prvCheckForValidListAndQueue+0x78>)
 800716a:	2110      	movs	r1, #16
 800716c:	200a      	movs	r0, #10
 800716e:	f7fe f841 	bl	80051f4 <xQueueGenericCreateStatic>
 8007172:	4603      	mov	r3, r0
 8007174:	4a08      	ldr	r2, [pc, #32]	@ (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007176:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007178:	4b07      	ldr	r3, [pc, #28]	@ (8007198 <prvCheckForValidListAndQueue+0x60>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	2b00      	cmp	r3, #0
 800717e:	d005      	beq.n	800718c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007180:	4b05      	ldr	r3, [pc, #20]	@ (8007198 <prvCheckForValidListAndQueue+0x60>)
 8007182:	681b      	ldr	r3, [r3, #0]
 8007184:	490b      	ldr	r1, [pc, #44]	@ (80071b4 <prvCheckForValidListAndQueue+0x7c>)
 8007186:	4618      	mov	r0, r3
 8007188:	f7fe fd24 	bl	8005bd4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800718c:	f000 f976 	bl	800747c <vPortExitCritical>
}
 8007190:	bf00      	nop
 8007192:	46bd      	mov	sp, r7
 8007194:	bd80      	pop	{r7, pc}
 8007196:	bf00      	nop
 8007198:	20000e64 	.word	0x20000e64
 800719c:	20000e34 	.word	0x20000e34
 80071a0:	20000e48 	.word	0x20000e48
 80071a4:	20000e5c 	.word	0x20000e5c
 80071a8:	20000e60 	.word	0x20000e60
 80071ac:	20000f10 	.word	0x20000f10
 80071b0:	20000e70 	.word	0x20000e70
 80071b4:	0800a7e4 	.word	0x0800a7e4

080071b8 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 80071b8:	b480      	push	{r7}
 80071ba:	b085      	sub	sp, #20
 80071bc:	af00      	add	r7, sp, #0
 80071be:	60f8      	str	r0, [r7, #12]
 80071c0:	60b9      	str	r1, [r7, #8]
 80071c2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 80071c4:	68fb      	ldr	r3, [r7, #12]
 80071c6:	3b04      	subs	r3, #4
 80071c8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 80071d0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071d2:	68fb      	ldr	r3, [r7, #12]
 80071d4:	3b04      	subs	r3, #4
 80071d6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 80071d8:	68bb      	ldr	r3, [r7, #8]
 80071da:	f023 0201 	bic.w	r2, r3, #1
 80071de:	68fb      	ldr	r3, [r7, #12]
 80071e0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 80071e2:	68fb      	ldr	r3, [r7, #12]
 80071e4:	3b04      	subs	r3, #4
 80071e6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 80071e8:	4a0c      	ldr	r2, [pc, #48]	@ (800721c <pxPortInitialiseStack+0x64>)
 80071ea:	68fb      	ldr	r3, [r7, #12]
 80071ec:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	3b14      	subs	r3, #20
 80071f2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 80071f4:	687a      	ldr	r2, [r7, #4]
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 80071fa:	68fb      	ldr	r3, [r7, #12]
 80071fc:	3b04      	subs	r3, #4
 80071fe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007200:	68fb      	ldr	r3, [r7, #12]
 8007202:	f06f 0202 	mvn.w	r2, #2
 8007206:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007208:	68fb      	ldr	r3, [r7, #12]
 800720a:	3b20      	subs	r3, #32
 800720c:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800720e:	68fb      	ldr	r3, [r7, #12]
}
 8007210:	4618      	mov	r0, r3
 8007212:	3714      	adds	r7, #20
 8007214:	46bd      	mov	sp, r7
 8007216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800721a:	4770      	bx	lr
 800721c:	08007221 	.word	0x08007221

08007220 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007220:	b480      	push	{r7}
 8007222:	b085      	sub	sp, #20
 8007224:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007226:	2300      	movs	r3, #0
 8007228:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800722a:	4b13      	ldr	r3, [pc, #76]	@ (8007278 <prvTaskExitError+0x58>)
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007232:	d00b      	beq.n	800724c <prvTaskExitError+0x2c>
	__asm volatile
 8007234:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007238:	f383 8811 	msr	BASEPRI, r3
 800723c:	f3bf 8f6f 	isb	sy
 8007240:	f3bf 8f4f 	dsb	sy
 8007244:	60fb      	str	r3, [r7, #12]
}
 8007246:	bf00      	nop
 8007248:	bf00      	nop
 800724a:	e7fd      	b.n	8007248 <prvTaskExitError+0x28>
	__asm volatile
 800724c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007250:	f383 8811 	msr	BASEPRI, r3
 8007254:	f3bf 8f6f 	isb	sy
 8007258:	f3bf 8f4f 	dsb	sy
 800725c:	60bb      	str	r3, [r7, #8]
}
 800725e:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007260:	bf00      	nop
 8007262:	687b      	ldr	r3, [r7, #4]
 8007264:	2b00      	cmp	r3, #0
 8007266:	d0fc      	beq.n	8007262 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007268:	bf00      	nop
 800726a:	bf00      	nop
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	2000000c 	.word	0x2000000c
 800727c:	00000000 	.word	0x00000000

08007280 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007280:	4b07      	ldr	r3, [pc, #28]	@ (80072a0 <pxCurrentTCBConst2>)
 8007282:	6819      	ldr	r1, [r3, #0]
 8007284:	6808      	ldr	r0, [r1, #0]
 8007286:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800728a:	f380 8809 	msr	PSP, r0
 800728e:	f3bf 8f6f 	isb	sy
 8007292:	f04f 0000 	mov.w	r0, #0
 8007296:	f380 8811 	msr	BASEPRI, r0
 800729a:	4770      	bx	lr
 800729c:	f3af 8000 	nop.w

080072a0 <pxCurrentTCBConst2>:
 80072a0:	20000934 	.word	0x20000934
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 80072a4:	bf00      	nop
 80072a6:	bf00      	nop

080072a8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 80072a8:	4808      	ldr	r0, [pc, #32]	@ (80072cc <prvPortStartFirstTask+0x24>)
 80072aa:	6800      	ldr	r0, [r0, #0]
 80072ac:	6800      	ldr	r0, [r0, #0]
 80072ae:	f380 8808 	msr	MSP, r0
 80072b2:	f04f 0000 	mov.w	r0, #0
 80072b6:	f380 8814 	msr	CONTROL, r0
 80072ba:	b662      	cpsie	i
 80072bc:	b661      	cpsie	f
 80072be:	f3bf 8f4f 	dsb	sy
 80072c2:	f3bf 8f6f 	isb	sy
 80072c6:	df00      	svc	0
 80072c8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 80072ca:	bf00      	nop
 80072cc:	e000ed08 	.word	0xe000ed08

080072d0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 80072d0:	b580      	push	{r7, lr}
 80072d2:	b086      	sub	sp, #24
 80072d4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 80072d6:	4b47      	ldr	r3, [pc, #284]	@ (80073f4 <xPortStartScheduler+0x124>)
 80072d8:	681b      	ldr	r3, [r3, #0]
 80072da:	4a47      	ldr	r2, [pc, #284]	@ (80073f8 <xPortStartScheduler+0x128>)
 80072dc:	4293      	cmp	r3, r2
 80072de:	d10b      	bne.n	80072f8 <xPortStartScheduler+0x28>
	__asm volatile
 80072e0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072e4:	f383 8811 	msr	BASEPRI, r3
 80072e8:	f3bf 8f6f 	isb	sy
 80072ec:	f3bf 8f4f 	dsb	sy
 80072f0:	60fb      	str	r3, [r7, #12]
}
 80072f2:	bf00      	nop
 80072f4:	bf00      	nop
 80072f6:	e7fd      	b.n	80072f4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 80072f8:	4b3e      	ldr	r3, [pc, #248]	@ (80073f4 <xPortStartScheduler+0x124>)
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a3f      	ldr	r2, [pc, #252]	@ (80073fc <xPortStartScheduler+0x12c>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d10b      	bne.n	800731a <xPortStartScheduler+0x4a>
	__asm volatile
 8007302:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007306:	f383 8811 	msr	BASEPRI, r3
 800730a:	f3bf 8f6f 	isb	sy
 800730e:	f3bf 8f4f 	dsb	sy
 8007312:	613b      	str	r3, [r7, #16]
}
 8007314:	bf00      	nop
 8007316:	bf00      	nop
 8007318:	e7fd      	b.n	8007316 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800731a:	4b39      	ldr	r3, [pc, #228]	@ (8007400 <xPortStartScheduler+0x130>)
 800731c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800731e:	697b      	ldr	r3, [r7, #20]
 8007320:	781b      	ldrb	r3, [r3, #0]
 8007322:	b2db      	uxtb	r3, r3
 8007324:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007326:	697b      	ldr	r3, [r7, #20]
 8007328:	22ff      	movs	r2, #255	@ 0xff
 800732a:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800732c:	697b      	ldr	r3, [r7, #20]
 800732e:	781b      	ldrb	r3, [r3, #0]
 8007330:	b2db      	uxtb	r3, r3
 8007332:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007334:	78fb      	ldrb	r3, [r7, #3]
 8007336:	b2db      	uxtb	r3, r3
 8007338:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800733c:	b2da      	uxtb	r2, r3
 800733e:	4b31      	ldr	r3, [pc, #196]	@ (8007404 <xPortStartScheduler+0x134>)
 8007340:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007342:	4b31      	ldr	r3, [pc, #196]	@ (8007408 <xPortStartScheduler+0x138>)
 8007344:	2207      	movs	r2, #7
 8007346:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007348:	e009      	b.n	800735e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800734a:	4b2f      	ldr	r3, [pc, #188]	@ (8007408 <xPortStartScheduler+0x138>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	3b01      	subs	r3, #1
 8007350:	4a2d      	ldr	r2, [pc, #180]	@ (8007408 <xPortStartScheduler+0x138>)
 8007352:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007354:	78fb      	ldrb	r3, [r7, #3]
 8007356:	b2db      	uxtb	r3, r3
 8007358:	005b      	lsls	r3, r3, #1
 800735a:	b2db      	uxtb	r3, r3
 800735c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800735e:	78fb      	ldrb	r3, [r7, #3]
 8007360:	b2db      	uxtb	r3, r3
 8007362:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007366:	2b80      	cmp	r3, #128	@ 0x80
 8007368:	d0ef      	beq.n	800734a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800736a:	4b27      	ldr	r3, [pc, #156]	@ (8007408 <xPortStartScheduler+0x138>)
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	f1c3 0307 	rsb	r3, r3, #7
 8007372:	2b04      	cmp	r3, #4
 8007374:	d00b      	beq.n	800738e <xPortStartScheduler+0xbe>
	__asm volatile
 8007376:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800737a:	f383 8811 	msr	BASEPRI, r3
 800737e:	f3bf 8f6f 	isb	sy
 8007382:	f3bf 8f4f 	dsb	sy
 8007386:	60bb      	str	r3, [r7, #8]
}
 8007388:	bf00      	nop
 800738a:	bf00      	nop
 800738c:	e7fd      	b.n	800738a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800738e:	4b1e      	ldr	r3, [pc, #120]	@ (8007408 <xPortStartScheduler+0x138>)
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	021b      	lsls	r3, r3, #8
 8007394:	4a1c      	ldr	r2, [pc, #112]	@ (8007408 <xPortStartScheduler+0x138>)
 8007396:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007398:	4b1b      	ldr	r3, [pc, #108]	@ (8007408 <xPortStartScheduler+0x138>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 80073a0:	4a19      	ldr	r2, [pc, #100]	@ (8007408 <xPortStartScheduler+0x138>)
 80073a2:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	b2da      	uxtb	r2, r3
 80073a8:	697b      	ldr	r3, [r7, #20]
 80073aa:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80073ac:	4b17      	ldr	r3, [pc, #92]	@ (800740c <xPortStartScheduler+0x13c>)
 80073ae:	681b      	ldr	r3, [r3, #0]
 80073b0:	4a16      	ldr	r2, [pc, #88]	@ (800740c <xPortStartScheduler+0x13c>)
 80073b2:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80073b6:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 80073b8:	4b14      	ldr	r3, [pc, #80]	@ (800740c <xPortStartScheduler+0x13c>)
 80073ba:	681b      	ldr	r3, [r3, #0]
 80073bc:	4a13      	ldr	r2, [pc, #76]	@ (800740c <xPortStartScheduler+0x13c>)
 80073be:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 80073c2:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 80073c4:	f000 f8da 	bl	800757c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 80073c8:	4b11      	ldr	r3, [pc, #68]	@ (8007410 <xPortStartScheduler+0x140>)
 80073ca:	2200      	movs	r2, #0
 80073cc:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 80073ce:	f000 f8f9 	bl	80075c4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80073d2:	4b10      	ldr	r3, [pc, #64]	@ (8007414 <xPortStartScheduler+0x144>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	4a0f      	ldr	r2, [pc, #60]	@ (8007414 <xPortStartScheduler+0x144>)
 80073d8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80073dc:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80073de:	f7ff ff63 	bl	80072a8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80073e2:	f7ff f82f 	bl	8006444 <vTaskSwitchContext>
	prvTaskExitError();
 80073e6:	f7ff ff1b 	bl	8007220 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80073ea:	2300      	movs	r3, #0
}
 80073ec:	4618      	mov	r0, r3
 80073ee:	3718      	adds	r7, #24
 80073f0:	46bd      	mov	sp, r7
 80073f2:	bd80      	pop	{r7, pc}
 80073f4:	e000ed00 	.word	0xe000ed00
 80073f8:	410fc271 	.word	0x410fc271
 80073fc:	410fc270 	.word	0x410fc270
 8007400:	e000e400 	.word	0xe000e400
 8007404:	20000f60 	.word	0x20000f60
 8007408:	20000f64 	.word	0x20000f64
 800740c:	e000ed20 	.word	0xe000ed20
 8007410:	2000000c 	.word	0x2000000c
 8007414:	e000ef34 	.word	0xe000ef34

08007418 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007418:	b480      	push	{r7}
 800741a:	b083      	sub	sp, #12
 800741c:	af00      	add	r7, sp, #0
	__asm volatile
 800741e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007422:	f383 8811 	msr	BASEPRI, r3
 8007426:	f3bf 8f6f 	isb	sy
 800742a:	f3bf 8f4f 	dsb	sy
 800742e:	607b      	str	r3, [r7, #4]
}
 8007430:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007432:	4b10      	ldr	r3, [pc, #64]	@ (8007474 <vPortEnterCritical+0x5c>)
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	3301      	adds	r3, #1
 8007438:	4a0e      	ldr	r2, [pc, #56]	@ (8007474 <vPortEnterCritical+0x5c>)
 800743a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800743c:	4b0d      	ldr	r3, [pc, #52]	@ (8007474 <vPortEnterCritical+0x5c>)
 800743e:	681b      	ldr	r3, [r3, #0]
 8007440:	2b01      	cmp	r3, #1
 8007442:	d110      	bne.n	8007466 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007444:	4b0c      	ldr	r3, [pc, #48]	@ (8007478 <vPortEnterCritical+0x60>)
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	b2db      	uxtb	r3, r3
 800744a:	2b00      	cmp	r3, #0
 800744c:	d00b      	beq.n	8007466 <vPortEnterCritical+0x4e>
	__asm volatile
 800744e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007452:	f383 8811 	msr	BASEPRI, r3
 8007456:	f3bf 8f6f 	isb	sy
 800745a:	f3bf 8f4f 	dsb	sy
 800745e:	603b      	str	r3, [r7, #0]
}
 8007460:	bf00      	nop
 8007462:	bf00      	nop
 8007464:	e7fd      	b.n	8007462 <vPortEnterCritical+0x4a>
	}
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
 8007472:	bf00      	nop
 8007474:	2000000c 	.word	0x2000000c
 8007478:	e000ed04 	.word	0xe000ed04

0800747c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800747c:	b480      	push	{r7}
 800747e:	b083      	sub	sp, #12
 8007480:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007482:	4b12      	ldr	r3, [pc, #72]	@ (80074cc <vPortExitCritical+0x50>)
 8007484:	681b      	ldr	r3, [r3, #0]
 8007486:	2b00      	cmp	r3, #0
 8007488:	d10b      	bne.n	80074a2 <vPortExitCritical+0x26>
	__asm volatile
 800748a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800748e:	f383 8811 	msr	BASEPRI, r3
 8007492:	f3bf 8f6f 	isb	sy
 8007496:	f3bf 8f4f 	dsb	sy
 800749a:	607b      	str	r3, [r7, #4]
}
 800749c:	bf00      	nop
 800749e:	bf00      	nop
 80074a0:	e7fd      	b.n	800749e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 80074a2:	4b0a      	ldr	r3, [pc, #40]	@ (80074cc <vPortExitCritical+0x50>)
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	3b01      	subs	r3, #1
 80074a8:	4a08      	ldr	r2, [pc, #32]	@ (80074cc <vPortExitCritical+0x50>)
 80074aa:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80074ac:	4b07      	ldr	r3, [pc, #28]	@ (80074cc <vPortExitCritical+0x50>)
 80074ae:	681b      	ldr	r3, [r3, #0]
 80074b0:	2b00      	cmp	r3, #0
 80074b2:	d105      	bne.n	80074c0 <vPortExitCritical+0x44>
 80074b4:	2300      	movs	r3, #0
 80074b6:	603b      	str	r3, [r7, #0]
	__asm volatile
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	f383 8811 	msr	BASEPRI, r3
}
 80074be:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 80074c0:	bf00      	nop
 80074c2:	370c      	adds	r7, #12
 80074c4:	46bd      	mov	sp, r7
 80074c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074ca:	4770      	bx	lr
 80074cc:	2000000c 	.word	0x2000000c

080074d0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80074d0:	f3ef 8009 	mrs	r0, PSP
 80074d4:	f3bf 8f6f 	isb	sy
 80074d8:	4b15      	ldr	r3, [pc, #84]	@ (8007530 <pxCurrentTCBConst>)
 80074da:	681a      	ldr	r2, [r3, #0]
 80074dc:	f01e 0f10 	tst.w	lr, #16
 80074e0:	bf08      	it	eq
 80074e2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80074e6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80074ea:	6010      	str	r0, [r2, #0]
 80074ec:	e92d 0009 	stmdb	sp!, {r0, r3}
 80074f0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80074f4:	f380 8811 	msr	BASEPRI, r0
 80074f8:	f3bf 8f4f 	dsb	sy
 80074fc:	f3bf 8f6f 	isb	sy
 8007500:	f7fe ffa0 	bl	8006444 <vTaskSwitchContext>
 8007504:	f04f 0000 	mov.w	r0, #0
 8007508:	f380 8811 	msr	BASEPRI, r0
 800750c:	bc09      	pop	{r0, r3}
 800750e:	6819      	ldr	r1, [r3, #0]
 8007510:	6808      	ldr	r0, [r1, #0]
 8007512:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007516:	f01e 0f10 	tst.w	lr, #16
 800751a:	bf08      	it	eq
 800751c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007520:	f380 8809 	msr	PSP, r0
 8007524:	f3bf 8f6f 	isb	sy
 8007528:	4770      	bx	lr
 800752a:	bf00      	nop
 800752c:	f3af 8000 	nop.w

08007530 <pxCurrentTCBConst>:
 8007530:	20000934 	.word	0x20000934
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007534:	bf00      	nop
 8007536:	bf00      	nop

08007538 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007538:	b580      	push	{r7, lr}
 800753a:	b082      	sub	sp, #8
 800753c:	af00      	add	r7, sp, #0
	__asm volatile
 800753e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007542:	f383 8811 	msr	BASEPRI, r3
 8007546:	f3bf 8f6f 	isb	sy
 800754a:	f3bf 8f4f 	dsb	sy
 800754e:	607b      	str	r3, [r7, #4]
}
 8007550:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007552:	f7fe febd 	bl	80062d0 <xTaskIncrementTick>
 8007556:	4603      	mov	r3, r0
 8007558:	2b00      	cmp	r3, #0
 800755a:	d003      	beq.n	8007564 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800755c:	4b06      	ldr	r3, [pc, #24]	@ (8007578 <xPortSysTickHandler+0x40>)
 800755e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007562:	601a      	str	r2, [r3, #0]
 8007564:	2300      	movs	r3, #0
 8007566:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007568:	683b      	ldr	r3, [r7, #0]
 800756a:	f383 8811 	msr	BASEPRI, r3
}
 800756e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007570:	bf00      	nop
 8007572:	3708      	adds	r7, #8
 8007574:	46bd      	mov	sp, r7
 8007576:	bd80      	pop	{r7, pc}
 8007578:	e000ed04 	.word	0xe000ed04

0800757c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800757c:	b480      	push	{r7}
 800757e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007580:	4b0b      	ldr	r3, [pc, #44]	@ (80075b0 <vPortSetupTimerInterrupt+0x34>)
 8007582:	2200      	movs	r2, #0
 8007584:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007586:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <vPortSetupTimerInterrupt+0x38>)
 8007588:	2200      	movs	r2, #0
 800758a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800758c:	4b0a      	ldr	r3, [pc, #40]	@ (80075b8 <vPortSetupTimerInterrupt+0x3c>)
 800758e:	681b      	ldr	r3, [r3, #0]
 8007590:	4a0a      	ldr	r2, [pc, #40]	@ (80075bc <vPortSetupTimerInterrupt+0x40>)
 8007592:	fba2 2303 	umull	r2, r3, r2, r3
 8007596:	099b      	lsrs	r3, r3, #6
 8007598:	4a09      	ldr	r2, [pc, #36]	@ (80075c0 <vPortSetupTimerInterrupt+0x44>)
 800759a:	3b01      	subs	r3, #1
 800759c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800759e:	4b04      	ldr	r3, [pc, #16]	@ (80075b0 <vPortSetupTimerInterrupt+0x34>)
 80075a0:	2207      	movs	r2, #7
 80075a2:	601a      	str	r2, [r3, #0]
}
 80075a4:	bf00      	nop
 80075a6:	46bd      	mov	sp, r7
 80075a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ac:	4770      	bx	lr
 80075ae:	bf00      	nop
 80075b0:	e000e010 	.word	0xe000e010
 80075b4:	e000e018 	.word	0xe000e018
 80075b8:	20000000 	.word	0x20000000
 80075bc:	10624dd3 	.word	0x10624dd3
 80075c0:	e000e014 	.word	0xe000e014

080075c4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80075c4:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80075d4 <vPortEnableVFP+0x10>
 80075c8:	6801      	ldr	r1, [r0, #0]
 80075ca:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80075ce:	6001      	str	r1, [r0, #0]
 80075d0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80075d2:	bf00      	nop
 80075d4:	e000ed88 	.word	0xe000ed88

080075d8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80075de:	f3ef 8305 	mrs	r3, IPSR
 80075e2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	2b0f      	cmp	r3, #15
 80075e8:	d915      	bls.n	8007616 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80075ea:	4a18      	ldr	r2, [pc, #96]	@ (800764c <vPortValidateInterruptPriority+0x74>)
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4413      	add	r3, r2
 80075f0:	781b      	ldrb	r3, [r3, #0]
 80075f2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80075f4:	4b16      	ldr	r3, [pc, #88]	@ (8007650 <vPortValidateInterruptPriority+0x78>)
 80075f6:	781b      	ldrb	r3, [r3, #0]
 80075f8:	7afa      	ldrb	r2, [r7, #11]
 80075fa:	429a      	cmp	r2, r3
 80075fc:	d20b      	bcs.n	8007616 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80075fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007602:	f383 8811 	msr	BASEPRI, r3
 8007606:	f3bf 8f6f 	isb	sy
 800760a:	f3bf 8f4f 	dsb	sy
 800760e:	607b      	str	r3, [r7, #4]
}
 8007610:	bf00      	nop
 8007612:	bf00      	nop
 8007614:	e7fd      	b.n	8007612 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007616:	4b0f      	ldr	r3, [pc, #60]	@ (8007654 <vPortValidateInterruptPriority+0x7c>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 800761e:	4b0e      	ldr	r3, [pc, #56]	@ (8007658 <vPortValidateInterruptPriority+0x80>)
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	429a      	cmp	r2, r3
 8007624:	d90b      	bls.n	800763e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007626:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800762a:	f383 8811 	msr	BASEPRI, r3
 800762e:	f3bf 8f6f 	isb	sy
 8007632:	f3bf 8f4f 	dsb	sy
 8007636:	603b      	str	r3, [r7, #0]
}
 8007638:	bf00      	nop
 800763a:	bf00      	nop
 800763c:	e7fd      	b.n	800763a <vPortValidateInterruptPriority+0x62>
	}
 800763e:	bf00      	nop
 8007640:	3714      	adds	r7, #20
 8007642:	46bd      	mov	sp, r7
 8007644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007648:	4770      	bx	lr
 800764a:	bf00      	nop
 800764c:	e000e3f0 	.word	0xe000e3f0
 8007650:	20000f60 	.word	0x20000f60
 8007654:	e000ed0c 	.word	0xe000ed0c
 8007658:	20000f64 	.word	0x20000f64

0800765c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800765c:	b580      	push	{r7, lr}
 800765e:	b08a      	sub	sp, #40	@ 0x28
 8007660:	af00      	add	r7, sp, #0
 8007662:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007664:	2300      	movs	r3, #0
 8007666:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007668:	f7fe fd76 	bl	8006158 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800766c:	4b5c      	ldr	r3, [pc, #368]	@ (80077e0 <pvPortMalloc+0x184>)
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	2b00      	cmp	r3, #0
 8007672:	d101      	bne.n	8007678 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007674:	f000 f924 	bl	80078c0 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007678:	4b5a      	ldr	r3, [pc, #360]	@ (80077e4 <pvPortMalloc+0x188>)
 800767a:	681a      	ldr	r2, [r3, #0]
 800767c:	687b      	ldr	r3, [r7, #4]
 800767e:	4013      	ands	r3, r2
 8007680:	2b00      	cmp	r3, #0
 8007682:	f040 8095 	bne.w	80077b0 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007686:	687b      	ldr	r3, [r7, #4]
 8007688:	2b00      	cmp	r3, #0
 800768a:	d01e      	beq.n	80076ca <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800768c:	2208      	movs	r2, #8
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	4413      	add	r3, r2
 8007692:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	f003 0307 	and.w	r3, r3, #7
 800769a:	2b00      	cmp	r3, #0
 800769c:	d015      	beq.n	80076ca <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800769e:	687b      	ldr	r3, [r7, #4]
 80076a0:	f023 0307 	bic.w	r3, r3, #7
 80076a4:	3308      	adds	r3, #8
 80076a6:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 80076a8:	687b      	ldr	r3, [r7, #4]
 80076aa:	f003 0307 	and.w	r3, r3, #7
 80076ae:	2b00      	cmp	r3, #0
 80076b0:	d00b      	beq.n	80076ca <pvPortMalloc+0x6e>
	__asm volatile
 80076b2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80076b6:	f383 8811 	msr	BASEPRI, r3
 80076ba:	f3bf 8f6f 	isb	sy
 80076be:	f3bf 8f4f 	dsb	sy
 80076c2:	617b      	str	r3, [r7, #20]
}
 80076c4:	bf00      	nop
 80076c6:	bf00      	nop
 80076c8:	e7fd      	b.n	80076c6 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80076ca:	687b      	ldr	r3, [r7, #4]
 80076cc:	2b00      	cmp	r3, #0
 80076ce:	d06f      	beq.n	80077b0 <pvPortMalloc+0x154>
 80076d0:	4b45      	ldr	r3, [pc, #276]	@ (80077e8 <pvPortMalloc+0x18c>)
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	429a      	cmp	r2, r3
 80076d8:	d86a      	bhi.n	80077b0 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80076da:	4b44      	ldr	r3, [pc, #272]	@ (80077ec <pvPortMalloc+0x190>)
 80076dc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80076de:	4b43      	ldr	r3, [pc, #268]	@ (80077ec <pvPortMalloc+0x190>)
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076e4:	e004      	b.n	80076f0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80076e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076e8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80076ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076ec:	681b      	ldr	r3, [r3, #0]
 80076ee:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80076f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076f2:	685b      	ldr	r3, [r3, #4]
 80076f4:	687a      	ldr	r2, [r7, #4]
 80076f6:	429a      	cmp	r2, r3
 80076f8:	d903      	bls.n	8007702 <pvPortMalloc+0xa6>
 80076fa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80076fc:	681b      	ldr	r3, [r3, #0]
 80076fe:	2b00      	cmp	r3, #0
 8007700:	d1f1      	bne.n	80076e6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8007702:	4b37      	ldr	r3, [pc, #220]	@ (80077e0 <pvPortMalloc+0x184>)
 8007704:	681b      	ldr	r3, [r3, #0]
 8007706:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007708:	429a      	cmp	r2, r3
 800770a:	d051      	beq.n	80077b0 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800770c:	6a3b      	ldr	r3, [r7, #32]
 800770e:	681b      	ldr	r3, [r3, #0]
 8007710:	2208      	movs	r2, #8
 8007712:	4413      	add	r3, r2
 8007714:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8007716:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007718:	681a      	ldr	r2, [r3, #0]
 800771a:	6a3b      	ldr	r3, [r7, #32]
 800771c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800771e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007720:	685a      	ldr	r2, [r3, #4]
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	1ad2      	subs	r2, r2, r3
 8007726:	2308      	movs	r3, #8
 8007728:	005b      	lsls	r3, r3, #1
 800772a:	429a      	cmp	r2, r3
 800772c:	d920      	bls.n	8007770 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800772e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	4413      	add	r3, r2
 8007734:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007736:	69bb      	ldr	r3, [r7, #24]
 8007738:	f003 0307 	and.w	r3, r3, #7
 800773c:	2b00      	cmp	r3, #0
 800773e:	d00b      	beq.n	8007758 <pvPortMalloc+0xfc>
	__asm volatile
 8007740:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007744:	f383 8811 	msr	BASEPRI, r3
 8007748:	f3bf 8f6f 	isb	sy
 800774c:	f3bf 8f4f 	dsb	sy
 8007750:	613b      	str	r3, [r7, #16]
}
 8007752:	bf00      	nop
 8007754:	bf00      	nop
 8007756:	e7fd      	b.n	8007754 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007758:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800775a:	685a      	ldr	r2, [r3, #4]
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	1ad2      	subs	r2, r2, r3
 8007760:	69bb      	ldr	r3, [r7, #24]
 8007762:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007764:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007766:	687a      	ldr	r2, [r7, #4]
 8007768:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800776a:	69b8      	ldr	r0, [r7, #24]
 800776c:	f000 f90a 	bl	8007984 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007770:	4b1d      	ldr	r3, [pc, #116]	@ (80077e8 <pvPortMalloc+0x18c>)
 8007772:	681a      	ldr	r2, [r3, #0]
 8007774:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007776:	685b      	ldr	r3, [r3, #4]
 8007778:	1ad3      	subs	r3, r2, r3
 800777a:	4a1b      	ldr	r2, [pc, #108]	@ (80077e8 <pvPortMalloc+0x18c>)
 800777c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800777e:	4b1a      	ldr	r3, [pc, #104]	@ (80077e8 <pvPortMalloc+0x18c>)
 8007780:	681a      	ldr	r2, [r3, #0]
 8007782:	4b1b      	ldr	r3, [pc, #108]	@ (80077f0 <pvPortMalloc+0x194>)
 8007784:	681b      	ldr	r3, [r3, #0]
 8007786:	429a      	cmp	r2, r3
 8007788:	d203      	bcs.n	8007792 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800778a:	4b17      	ldr	r3, [pc, #92]	@ (80077e8 <pvPortMalloc+0x18c>)
 800778c:	681b      	ldr	r3, [r3, #0]
 800778e:	4a18      	ldr	r2, [pc, #96]	@ (80077f0 <pvPortMalloc+0x194>)
 8007790:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007792:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007794:	685a      	ldr	r2, [r3, #4]
 8007796:	4b13      	ldr	r3, [pc, #76]	@ (80077e4 <pvPortMalloc+0x188>)
 8007798:	681b      	ldr	r3, [r3, #0]
 800779a:	431a      	orrs	r2, r3
 800779c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800779e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80077a0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80077a2:	2200      	movs	r2, #0
 80077a4:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 80077a6:	4b13      	ldr	r3, [pc, #76]	@ (80077f4 <pvPortMalloc+0x198>)
 80077a8:	681b      	ldr	r3, [r3, #0]
 80077aa:	3301      	adds	r3, #1
 80077ac:	4a11      	ldr	r2, [pc, #68]	@ (80077f4 <pvPortMalloc+0x198>)
 80077ae:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 80077b0:	f7fe fce0 	bl	8006174 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 80077b4:	69fb      	ldr	r3, [r7, #28]
 80077b6:	f003 0307 	and.w	r3, r3, #7
 80077ba:	2b00      	cmp	r3, #0
 80077bc:	d00b      	beq.n	80077d6 <pvPortMalloc+0x17a>
	__asm volatile
 80077be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80077c2:	f383 8811 	msr	BASEPRI, r3
 80077c6:	f3bf 8f6f 	isb	sy
 80077ca:	f3bf 8f4f 	dsb	sy
 80077ce:	60fb      	str	r3, [r7, #12]
}
 80077d0:	bf00      	nop
 80077d2:	bf00      	nop
 80077d4:	e7fd      	b.n	80077d2 <pvPortMalloc+0x176>
	return pvReturn;
 80077d6:	69fb      	ldr	r3, [r7, #28]
}
 80077d8:	4618      	mov	r0, r3
 80077da:	3728      	adds	r7, #40	@ 0x28
 80077dc:	46bd      	mov	sp, r7
 80077de:	bd80      	pop	{r7, pc}
 80077e0:	20004b70 	.word	0x20004b70
 80077e4:	20004b84 	.word	0x20004b84
 80077e8:	20004b74 	.word	0x20004b74
 80077ec:	20004b68 	.word	0x20004b68
 80077f0:	20004b78 	.word	0x20004b78
 80077f4:	20004b7c 	.word	0x20004b7c

080077f8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80077f8:	b580      	push	{r7, lr}
 80077fa:	b086      	sub	sp, #24
 80077fc:	af00      	add	r7, sp, #0
 80077fe:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8007800:	687b      	ldr	r3, [r7, #4]
 8007802:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	2b00      	cmp	r3, #0
 8007808:	d04f      	beq.n	80078aa <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800780a:	2308      	movs	r3, #8
 800780c:	425b      	negs	r3, r3
 800780e:	697a      	ldr	r2, [r7, #20]
 8007810:	4413      	add	r3, r2
 8007812:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8007814:	697b      	ldr	r3, [r7, #20]
 8007816:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	685a      	ldr	r2, [r3, #4]
 800781c:	4b25      	ldr	r3, [pc, #148]	@ (80078b4 <vPortFree+0xbc>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4013      	ands	r3, r2
 8007822:	2b00      	cmp	r3, #0
 8007824:	d10b      	bne.n	800783e <vPortFree+0x46>
	__asm volatile
 8007826:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800782a:	f383 8811 	msr	BASEPRI, r3
 800782e:	f3bf 8f6f 	isb	sy
 8007832:	f3bf 8f4f 	dsb	sy
 8007836:	60fb      	str	r3, [r7, #12]
}
 8007838:	bf00      	nop
 800783a:	bf00      	nop
 800783c:	e7fd      	b.n	800783a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800783e:	693b      	ldr	r3, [r7, #16]
 8007840:	681b      	ldr	r3, [r3, #0]
 8007842:	2b00      	cmp	r3, #0
 8007844:	d00b      	beq.n	800785e <vPortFree+0x66>
	__asm volatile
 8007846:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800784a:	f383 8811 	msr	BASEPRI, r3
 800784e:	f3bf 8f6f 	isb	sy
 8007852:	f3bf 8f4f 	dsb	sy
 8007856:	60bb      	str	r3, [r7, #8]
}
 8007858:	bf00      	nop
 800785a:	bf00      	nop
 800785c:	e7fd      	b.n	800785a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800785e:	693b      	ldr	r3, [r7, #16]
 8007860:	685a      	ldr	r2, [r3, #4]
 8007862:	4b14      	ldr	r3, [pc, #80]	@ (80078b4 <vPortFree+0xbc>)
 8007864:	681b      	ldr	r3, [r3, #0]
 8007866:	4013      	ands	r3, r2
 8007868:	2b00      	cmp	r3, #0
 800786a:	d01e      	beq.n	80078aa <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800786c:	693b      	ldr	r3, [r7, #16]
 800786e:	681b      	ldr	r3, [r3, #0]
 8007870:	2b00      	cmp	r3, #0
 8007872:	d11a      	bne.n	80078aa <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007874:	693b      	ldr	r3, [r7, #16]
 8007876:	685a      	ldr	r2, [r3, #4]
 8007878:	4b0e      	ldr	r3, [pc, #56]	@ (80078b4 <vPortFree+0xbc>)
 800787a:	681b      	ldr	r3, [r3, #0]
 800787c:	43db      	mvns	r3, r3
 800787e:	401a      	ands	r2, r3
 8007880:	693b      	ldr	r3, [r7, #16]
 8007882:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007884:	f7fe fc68 	bl	8006158 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007888:	693b      	ldr	r3, [r7, #16]
 800788a:	685a      	ldr	r2, [r3, #4]
 800788c:	4b0a      	ldr	r3, [pc, #40]	@ (80078b8 <vPortFree+0xc0>)
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	4413      	add	r3, r2
 8007892:	4a09      	ldr	r2, [pc, #36]	@ (80078b8 <vPortFree+0xc0>)
 8007894:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007896:	6938      	ldr	r0, [r7, #16]
 8007898:	f000 f874 	bl	8007984 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800789c:	4b07      	ldr	r3, [pc, #28]	@ (80078bc <vPortFree+0xc4>)
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	3301      	adds	r3, #1
 80078a2:	4a06      	ldr	r2, [pc, #24]	@ (80078bc <vPortFree+0xc4>)
 80078a4:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 80078a6:	f7fe fc65 	bl	8006174 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80078aa:	bf00      	nop
 80078ac:	3718      	adds	r7, #24
 80078ae:	46bd      	mov	sp, r7
 80078b0:	bd80      	pop	{r7, pc}
 80078b2:	bf00      	nop
 80078b4:	20004b84 	.word	0x20004b84
 80078b8:	20004b74 	.word	0x20004b74
 80078bc:	20004b80 	.word	0x20004b80

080078c0 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 80078c0:	b480      	push	{r7}
 80078c2:	b085      	sub	sp, #20
 80078c4:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 80078c6:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 80078ca:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80078cc:	4b27      	ldr	r3, [pc, #156]	@ (800796c <prvHeapInit+0xac>)
 80078ce:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80078d0:	68fb      	ldr	r3, [r7, #12]
 80078d2:	f003 0307 	and.w	r3, r3, #7
 80078d6:	2b00      	cmp	r3, #0
 80078d8:	d00c      	beq.n	80078f4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80078da:	68fb      	ldr	r3, [r7, #12]
 80078dc:	3307      	adds	r3, #7
 80078de:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80078e0:	68fb      	ldr	r3, [r7, #12]
 80078e2:	f023 0307 	bic.w	r3, r3, #7
 80078e6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80078e8:	68ba      	ldr	r2, [r7, #8]
 80078ea:	68fb      	ldr	r3, [r7, #12]
 80078ec:	1ad3      	subs	r3, r2, r3
 80078ee:	4a1f      	ldr	r2, [pc, #124]	@ (800796c <prvHeapInit+0xac>)
 80078f0:	4413      	add	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80078f8:	4a1d      	ldr	r2, [pc, #116]	@ (8007970 <prvHeapInit+0xb0>)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80078fe:	4b1c      	ldr	r3, [pc, #112]	@ (8007970 <prvHeapInit+0xb0>)
 8007900:	2200      	movs	r2, #0
 8007902:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	68ba      	ldr	r2, [r7, #8]
 8007908:	4413      	add	r3, r2
 800790a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800790c:	2208      	movs	r2, #8
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	1a9b      	subs	r3, r3, r2
 8007912:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	f023 0307 	bic.w	r3, r3, #7
 800791a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800791c:	68fb      	ldr	r3, [r7, #12]
 800791e:	4a15      	ldr	r2, [pc, #84]	@ (8007974 <prvHeapInit+0xb4>)
 8007920:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8007922:	4b14      	ldr	r3, [pc, #80]	@ (8007974 <prvHeapInit+0xb4>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	2200      	movs	r2, #0
 8007928:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800792a:	4b12      	ldr	r3, [pc, #72]	@ (8007974 <prvHeapInit+0xb4>)
 800792c:	681b      	ldr	r3, [r3, #0]
 800792e:	2200      	movs	r2, #0
 8007930:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007936:	683b      	ldr	r3, [r7, #0]
 8007938:	68fa      	ldr	r2, [r7, #12]
 800793a:	1ad2      	subs	r2, r2, r3
 800793c:	683b      	ldr	r3, [r7, #0]
 800793e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007940:	4b0c      	ldr	r3, [pc, #48]	@ (8007974 <prvHeapInit+0xb4>)
 8007942:	681a      	ldr	r2, [r3, #0]
 8007944:	683b      	ldr	r3, [r7, #0]
 8007946:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007948:	683b      	ldr	r3, [r7, #0]
 800794a:	685b      	ldr	r3, [r3, #4]
 800794c:	4a0a      	ldr	r2, [pc, #40]	@ (8007978 <prvHeapInit+0xb8>)
 800794e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007950:	683b      	ldr	r3, [r7, #0]
 8007952:	685b      	ldr	r3, [r3, #4]
 8007954:	4a09      	ldr	r2, [pc, #36]	@ (800797c <prvHeapInit+0xbc>)
 8007956:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007958:	4b09      	ldr	r3, [pc, #36]	@ (8007980 <prvHeapInit+0xc0>)
 800795a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800795e:	601a      	str	r2, [r3, #0]
}
 8007960:	bf00      	nop
 8007962:	3714      	adds	r7, #20
 8007964:	46bd      	mov	sp, r7
 8007966:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796a:	4770      	bx	lr
 800796c:	20000f68 	.word	0x20000f68
 8007970:	20004b68 	.word	0x20004b68
 8007974:	20004b70 	.word	0x20004b70
 8007978:	20004b78 	.word	0x20004b78
 800797c:	20004b74 	.word	0x20004b74
 8007980:	20004b84 	.word	0x20004b84

08007984 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007984:	b480      	push	{r7}
 8007986:	b085      	sub	sp, #20
 8007988:	af00      	add	r7, sp, #0
 800798a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800798c:	4b28      	ldr	r3, [pc, #160]	@ (8007a30 <prvInsertBlockIntoFreeList+0xac>)
 800798e:	60fb      	str	r3, [r7, #12]
 8007990:	e002      	b.n	8007998 <prvInsertBlockIntoFreeList+0x14>
 8007992:	68fb      	ldr	r3, [r7, #12]
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	60fb      	str	r3, [r7, #12]
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	687a      	ldr	r2, [r7, #4]
 800799e:	429a      	cmp	r2, r3
 80079a0:	d8f7      	bhi.n	8007992 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80079a2:	68fb      	ldr	r3, [r7, #12]
 80079a4:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	685b      	ldr	r3, [r3, #4]
 80079aa:	68ba      	ldr	r2, [r7, #8]
 80079ac:	4413      	add	r3, r2
 80079ae:	687a      	ldr	r2, [r7, #4]
 80079b0:	429a      	cmp	r2, r3
 80079b2:	d108      	bne.n	80079c6 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80079b4:	68fb      	ldr	r3, [r7, #12]
 80079b6:	685a      	ldr	r2, [r3, #4]
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	685b      	ldr	r3, [r3, #4]
 80079bc:	441a      	add	r2, r3
 80079be:	68fb      	ldr	r3, [r7, #12]
 80079c0:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 80079c2:	68fb      	ldr	r3, [r7, #12]
 80079c4:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 80079c6:	687b      	ldr	r3, [r7, #4]
 80079c8:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	685b      	ldr	r3, [r3, #4]
 80079ce:	68ba      	ldr	r2, [r7, #8]
 80079d0:	441a      	add	r2, r3
 80079d2:	68fb      	ldr	r3, [r7, #12]
 80079d4:	681b      	ldr	r3, [r3, #0]
 80079d6:	429a      	cmp	r2, r3
 80079d8:	d118      	bne.n	8007a0c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	681a      	ldr	r2, [r3, #0]
 80079de:	4b15      	ldr	r3, [pc, #84]	@ (8007a34 <prvInsertBlockIntoFreeList+0xb0>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	429a      	cmp	r2, r3
 80079e4:	d00d      	beq.n	8007a02 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80079e6:	687b      	ldr	r3, [r7, #4]
 80079e8:	685a      	ldr	r2, [r3, #4]
 80079ea:	68fb      	ldr	r3, [r7, #12]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	685b      	ldr	r3, [r3, #4]
 80079f0:	441a      	add	r2, r3
 80079f2:	687b      	ldr	r3, [r7, #4]
 80079f4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80079f6:	68fb      	ldr	r3, [r7, #12]
 80079f8:	681b      	ldr	r3, [r3, #0]
 80079fa:	681a      	ldr	r2, [r3, #0]
 80079fc:	687b      	ldr	r3, [r7, #4]
 80079fe:	601a      	str	r2, [r3, #0]
 8007a00:	e008      	b.n	8007a14 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8007a02:	4b0c      	ldr	r3, [pc, #48]	@ (8007a34 <prvInsertBlockIntoFreeList+0xb0>)
 8007a04:	681a      	ldr	r2, [r3, #0]
 8007a06:	687b      	ldr	r3, [r7, #4]
 8007a08:	601a      	str	r2, [r3, #0]
 8007a0a:	e003      	b.n	8007a14 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	681a      	ldr	r2, [r3, #0]
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8007a14:	68fa      	ldr	r2, [r7, #12]
 8007a16:	687b      	ldr	r3, [r7, #4]
 8007a18:	429a      	cmp	r2, r3
 8007a1a:	d002      	beq.n	8007a22 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	687a      	ldr	r2, [r7, #4]
 8007a20:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007a22:	bf00      	nop
 8007a24:	3714      	adds	r7, #20
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr
 8007a2e:	bf00      	nop
 8007a30:	20004b68 	.word	0x20004b68
 8007a34:	20004b70 	.word	0x20004b70

08007a38 <std>:
 8007a38:	2300      	movs	r3, #0
 8007a3a:	b510      	push	{r4, lr}
 8007a3c:	4604      	mov	r4, r0
 8007a3e:	e9c0 3300 	strd	r3, r3, [r0]
 8007a42:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007a46:	6083      	str	r3, [r0, #8]
 8007a48:	8181      	strh	r1, [r0, #12]
 8007a4a:	6643      	str	r3, [r0, #100]	@ 0x64
 8007a4c:	81c2      	strh	r2, [r0, #14]
 8007a4e:	6183      	str	r3, [r0, #24]
 8007a50:	4619      	mov	r1, r3
 8007a52:	2208      	movs	r2, #8
 8007a54:	305c      	adds	r0, #92	@ 0x5c
 8007a56:	f000 fa09 	bl	8007e6c <memset>
 8007a5a:	4b0d      	ldr	r3, [pc, #52]	@ (8007a90 <std+0x58>)
 8007a5c:	6263      	str	r3, [r4, #36]	@ 0x24
 8007a5e:	4b0d      	ldr	r3, [pc, #52]	@ (8007a94 <std+0x5c>)
 8007a60:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007a62:	4b0d      	ldr	r3, [pc, #52]	@ (8007a98 <std+0x60>)
 8007a64:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007a66:	4b0d      	ldr	r3, [pc, #52]	@ (8007a9c <std+0x64>)
 8007a68:	6323      	str	r3, [r4, #48]	@ 0x30
 8007a6a:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa0 <std+0x68>)
 8007a6c:	6224      	str	r4, [r4, #32]
 8007a6e:	429c      	cmp	r4, r3
 8007a70:	d006      	beq.n	8007a80 <std+0x48>
 8007a72:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007a76:	4294      	cmp	r4, r2
 8007a78:	d002      	beq.n	8007a80 <std+0x48>
 8007a7a:	33d0      	adds	r3, #208	@ 0xd0
 8007a7c:	429c      	cmp	r4, r3
 8007a7e:	d105      	bne.n	8007a8c <std+0x54>
 8007a80:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007a84:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007a88:	f000 bac6 	b.w	8008018 <__retarget_lock_init_recursive>
 8007a8c:	bd10      	pop	{r4, pc}
 8007a8e:	bf00      	nop
 8007a90:	08007c9d 	.word	0x08007c9d
 8007a94:	08007cbf 	.word	0x08007cbf
 8007a98:	08007cf7 	.word	0x08007cf7
 8007a9c:	08007d1b 	.word	0x08007d1b
 8007aa0:	20004b88 	.word	0x20004b88

08007aa4 <stdio_exit_handler>:
 8007aa4:	4a02      	ldr	r2, [pc, #8]	@ (8007ab0 <stdio_exit_handler+0xc>)
 8007aa6:	4903      	ldr	r1, [pc, #12]	@ (8007ab4 <stdio_exit_handler+0x10>)
 8007aa8:	4803      	ldr	r0, [pc, #12]	@ (8007ab8 <stdio_exit_handler+0x14>)
 8007aaa:	f000 b869 	b.w	8007b80 <_fwalk_sglue>
 8007aae:	bf00      	nop
 8007ab0:	20000010 	.word	0x20000010
 8007ab4:	080088d1 	.word	0x080088d1
 8007ab8:	20000020 	.word	0x20000020

08007abc <cleanup_stdio>:
 8007abc:	6841      	ldr	r1, [r0, #4]
 8007abe:	4b0c      	ldr	r3, [pc, #48]	@ (8007af0 <cleanup_stdio+0x34>)
 8007ac0:	4299      	cmp	r1, r3
 8007ac2:	b510      	push	{r4, lr}
 8007ac4:	4604      	mov	r4, r0
 8007ac6:	d001      	beq.n	8007acc <cleanup_stdio+0x10>
 8007ac8:	f000 ff02 	bl	80088d0 <_fflush_r>
 8007acc:	68a1      	ldr	r1, [r4, #8]
 8007ace:	4b09      	ldr	r3, [pc, #36]	@ (8007af4 <cleanup_stdio+0x38>)
 8007ad0:	4299      	cmp	r1, r3
 8007ad2:	d002      	beq.n	8007ada <cleanup_stdio+0x1e>
 8007ad4:	4620      	mov	r0, r4
 8007ad6:	f000 fefb 	bl	80088d0 <_fflush_r>
 8007ada:	68e1      	ldr	r1, [r4, #12]
 8007adc:	4b06      	ldr	r3, [pc, #24]	@ (8007af8 <cleanup_stdio+0x3c>)
 8007ade:	4299      	cmp	r1, r3
 8007ae0:	d004      	beq.n	8007aec <cleanup_stdio+0x30>
 8007ae2:	4620      	mov	r0, r4
 8007ae4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007ae8:	f000 bef2 	b.w	80088d0 <_fflush_r>
 8007aec:	bd10      	pop	{r4, pc}
 8007aee:	bf00      	nop
 8007af0:	20004b88 	.word	0x20004b88
 8007af4:	20004bf0 	.word	0x20004bf0
 8007af8:	20004c58 	.word	0x20004c58

08007afc <global_stdio_init.part.0>:
 8007afc:	b510      	push	{r4, lr}
 8007afe:	4b0b      	ldr	r3, [pc, #44]	@ (8007b2c <global_stdio_init.part.0+0x30>)
 8007b00:	4c0b      	ldr	r4, [pc, #44]	@ (8007b30 <global_stdio_init.part.0+0x34>)
 8007b02:	4a0c      	ldr	r2, [pc, #48]	@ (8007b34 <global_stdio_init.part.0+0x38>)
 8007b04:	601a      	str	r2, [r3, #0]
 8007b06:	4620      	mov	r0, r4
 8007b08:	2200      	movs	r2, #0
 8007b0a:	2104      	movs	r1, #4
 8007b0c:	f7ff ff94 	bl	8007a38 <std>
 8007b10:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007b14:	2201      	movs	r2, #1
 8007b16:	2109      	movs	r1, #9
 8007b18:	f7ff ff8e 	bl	8007a38 <std>
 8007b1c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007b20:	2202      	movs	r2, #2
 8007b22:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b26:	2112      	movs	r1, #18
 8007b28:	f7ff bf86 	b.w	8007a38 <std>
 8007b2c:	20004cc0 	.word	0x20004cc0
 8007b30:	20004b88 	.word	0x20004b88
 8007b34:	08007aa5 	.word	0x08007aa5

08007b38 <__sfp_lock_acquire>:
 8007b38:	4801      	ldr	r0, [pc, #4]	@ (8007b40 <__sfp_lock_acquire+0x8>)
 8007b3a:	f000 ba6e 	b.w	800801a <__retarget_lock_acquire_recursive>
 8007b3e:	bf00      	nop
 8007b40:	20004cc9 	.word	0x20004cc9

08007b44 <__sfp_lock_release>:
 8007b44:	4801      	ldr	r0, [pc, #4]	@ (8007b4c <__sfp_lock_release+0x8>)
 8007b46:	f000 ba69 	b.w	800801c <__retarget_lock_release_recursive>
 8007b4a:	bf00      	nop
 8007b4c:	20004cc9 	.word	0x20004cc9

08007b50 <__sinit>:
 8007b50:	b510      	push	{r4, lr}
 8007b52:	4604      	mov	r4, r0
 8007b54:	f7ff fff0 	bl	8007b38 <__sfp_lock_acquire>
 8007b58:	6a23      	ldr	r3, [r4, #32]
 8007b5a:	b11b      	cbz	r3, 8007b64 <__sinit+0x14>
 8007b5c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007b60:	f7ff bff0 	b.w	8007b44 <__sfp_lock_release>
 8007b64:	4b04      	ldr	r3, [pc, #16]	@ (8007b78 <__sinit+0x28>)
 8007b66:	6223      	str	r3, [r4, #32]
 8007b68:	4b04      	ldr	r3, [pc, #16]	@ (8007b7c <__sinit+0x2c>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	2b00      	cmp	r3, #0
 8007b6e:	d1f5      	bne.n	8007b5c <__sinit+0xc>
 8007b70:	f7ff ffc4 	bl	8007afc <global_stdio_init.part.0>
 8007b74:	e7f2      	b.n	8007b5c <__sinit+0xc>
 8007b76:	bf00      	nop
 8007b78:	08007abd 	.word	0x08007abd
 8007b7c:	20004cc0 	.word	0x20004cc0

08007b80 <_fwalk_sglue>:
 8007b80:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007b84:	4607      	mov	r7, r0
 8007b86:	4688      	mov	r8, r1
 8007b88:	4614      	mov	r4, r2
 8007b8a:	2600      	movs	r6, #0
 8007b8c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007b90:	f1b9 0901 	subs.w	r9, r9, #1
 8007b94:	d505      	bpl.n	8007ba2 <_fwalk_sglue+0x22>
 8007b96:	6824      	ldr	r4, [r4, #0]
 8007b98:	2c00      	cmp	r4, #0
 8007b9a:	d1f7      	bne.n	8007b8c <_fwalk_sglue+0xc>
 8007b9c:	4630      	mov	r0, r6
 8007b9e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007ba2:	89ab      	ldrh	r3, [r5, #12]
 8007ba4:	2b01      	cmp	r3, #1
 8007ba6:	d907      	bls.n	8007bb8 <_fwalk_sglue+0x38>
 8007ba8:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007bac:	3301      	adds	r3, #1
 8007bae:	d003      	beq.n	8007bb8 <_fwalk_sglue+0x38>
 8007bb0:	4629      	mov	r1, r5
 8007bb2:	4638      	mov	r0, r7
 8007bb4:	47c0      	blx	r8
 8007bb6:	4306      	orrs	r6, r0
 8007bb8:	3568      	adds	r5, #104	@ 0x68
 8007bba:	e7e9      	b.n	8007b90 <_fwalk_sglue+0x10>

08007bbc <iprintf>:
 8007bbc:	b40f      	push	{r0, r1, r2, r3}
 8007bbe:	b507      	push	{r0, r1, r2, lr}
 8007bc0:	4906      	ldr	r1, [pc, #24]	@ (8007bdc <iprintf+0x20>)
 8007bc2:	ab04      	add	r3, sp, #16
 8007bc4:	6808      	ldr	r0, [r1, #0]
 8007bc6:	f853 2b04 	ldr.w	r2, [r3], #4
 8007bca:	6881      	ldr	r1, [r0, #8]
 8007bcc:	9301      	str	r3, [sp, #4]
 8007bce:	f000 fb57 	bl	8008280 <_vfiprintf_r>
 8007bd2:	b003      	add	sp, #12
 8007bd4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007bd8:	b004      	add	sp, #16
 8007bda:	4770      	bx	lr
 8007bdc:	2000001c 	.word	0x2000001c

08007be0 <_puts_r>:
 8007be0:	6a03      	ldr	r3, [r0, #32]
 8007be2:	b570      	push	{r4, r5, r6, lr}
 8007be4:	6884      	ldr	r4, [r0, #8]
 8007be6:	4605      	mov	r5, r0
 8007be8:	460e      	mov	r6, r1
 8007bea:	b90b      	cbnz	r3, 8007bf0 <_puts_r+0x10>
 8007bec:	f7ff ffb0 	bl	8007b50 <__sinit>
 8007bf0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007bf2:	07db      	lsls	r3, r3, #31
 8007bf4:	d405      	bmi.n	8007c02 <_puts_r+0x22>
 8007bf6:	89a3      	ldrh	r3, [r4, #12]
 8007bf8:	0598      	lsls	r0, r3, #22
 8007bfa:	d402      	bmi.n	8007c02 <_puts_r+0x22>
 8007bfc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007bfe:	f000 fa0c 	bl	800801a <__retarget_lock_acquire_recursive>
 8007c02:	89a3      	ldrh	r3, [r4, #12]
 8007c04:	0719      	lsls	r1, r3, #28
 8007c06:	d502      	bpl.n	8007c0e <_puts_r+0x2e>
 8007c08:	6923      	ldr	r3, [r4, #16]
 8007c0a:	2b00      	cmp	r3, #0
 8007c0c:	d135      	bne.n	8007c7a <_puts_r+0x9a>
 8007c0e:	4621      	mov	r1, r4
 8007c10:	4628      	mov	r0, r5
 8007c12:	f000 f8c5 	bl	8007da0 <__swsetup_r>
 8007c16:	b380      	cbz	r0, 8007c7a <_puts_r+0x9a>
 8007c18:	f04f 35ff 	mov.w	r5, #4294967295
 8007c1c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007c1e:	07da      	lsls	r2, r3, #31
 8007c20:	d405      	bmi.n	8007c2e <_puts_r+0x4e>
 8007c22:	89a3      	ldrh	r3, [r4, #12]
 8007c24:	059b      	lsls	r3, r3, #22
 8007c26:	d402      	bmi.n	8007c2e <_puts_r+0x4e>
 8007c28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007c2a:	f000 f9f7 	bl	800801c <__retarget_lock_release_recursive>
 8007c2e:	4628      	mov	r0, r5
 8007c30:	bd70      	pop	{r4, r5, r6, pc}
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	da04      	bge.n	8007c40 <_puts_r+0x60>
 8007c36:	69a2      	ldr	r2, [r4, #24]
 8007c38:	429a      	cmp	r2, r3
 8007c3a:	dc17      	bgt.n	8007c6c <_puts_r+0x8c>
 8007c3c:	290a      	cmp	r1, #10
 8007c3e:	d015      	beq.n	8007c6c <_puts_r+0x8c>
 8007c40:	6823      	ldr	r3, [r4, #0]
 8007c42:	1c5a      	adds	r2, r3, #1
 8007c44:	6022      	str	r2, [r4, #0]
 8007c46:	7019      	strb	r1, [r3, #0]
 8007c48:	68a3      	ldr	r3, [r4, #8]
 8007c4a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007c4e:	3b01      	subs	r3, #1
 8007c50:	60a3      	str	r3, [r4, #8]
 8007c52:	2900      	cmp	r1, #0
 8007c54:	d1ed      	bne.n	8007c32 <_puts_r+0x52>
 8007c56:	2b00      	cmp	r3, #0
 8007c58:	da11      	bge.n	8007c7e <_puts_r+0x9e>
 8007c5a:	4622      	mov	r2, r4
 8007c5c:	210a      	movs	r1, #10
 8007c5e:	4628      	mov	r0, r5
 8007c60:	f000 f85f 	bl	8007d22 <__swbuf_r>
 8007c64:	3001      	adds	r0, #1
 8007c66:	d0d7      	beq.n	8007c18 <_puts_r+0x38>
 8007c68:	250a      	movs	r5, #10
 8007c6a:	e7d7      	b.n	8007c1c <_puts_r+0x3c>
 8007c6c:	4622      	mov	r2, r4
 8007c6e:	4628      	mov	r0, r5
 8007c70:	f000 f857 	bl	8007d22 <__swbuf_r>
 8007c74:	3001      	adds	r0, #1
 8007c76:	d1e7      	bne.n	8007c48 <_puts_r+0x68>
 8007c78:	e7ce      	b.n	8007c18 <_puts_r+0x38>
 8007c7a:	3e01      	subs	r6, #1
 8007c7c:	e7e4      	b.n	8007c48 <_puts_r+0x68>
 8007c7e:	6823      	ldr	r3, [r4, #0]
 8007c80:	1c5a      	adds	r2, r3, #1
 8007c82:	6022      	str	r2, [r4, #0]
 8007c84:	220a      	movs	r2, #10
 8007c86:	701a      	strb	r2, [r3, #0]
 8007c88:	e7ee      	b.n	8007c68 <_puts_r+0x88>
	...

08007c8c <puts>:
 8007c8c:	4b02      	ldr	r3, [pc, #8]	@ (8007c98 <puts+0xc>)
 8007c8e:	4601      	mov	r1, r0
 8007c90:	6818      	ldr	r0, [r3, #0]
 8007c92:	f7ff bfa5 	b.w	8007be0 <_puts_r>
 8007c96:	bf00      	nop
 8007c98:	2000001c 	.word	0x2000001c

08007c9c <__sread>:
 8007c9c:	b510      	push	{r4, lr}
 8007c9e:	460c      	mov	r4, r1
 8007ca0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ca4:	f000 f96a 	bl	8007f7c <_read_r>
 8007ca8:	2800      	cmp	r0, #0
 8007caa:	bfab      	itete	ge
 8007cac:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007cae:	89a3      	ldrhlt	r3, [r4, #12]
 8007cb0:	181b      	addge	r3, r3, r0
 8007cb2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007cb6:	bfac      	ite	ge
 8007cb8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007cba:	81a3      	strhlt	r3, [r4, #12]
 8007cbc:	bd10      	pop	{r4, pc}

08007cbe <__swrite>:
 8007cbe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007cc2:	461f      	mov	r7, r3
 8007cc4:	898b      	ldrh	r3, [r1, #12]
 8007cc6:	05db      	lsls	r3, r3, #23
 8007cc8:	4605      	mov	r5, r0
 8007cca:	460c      	mov	r4, r1
 8007ccc:	4616      	mov	r6, r2
 8007cce:	d505      	bpl.n	8007cdc <__swrite+0x1e>
 8007cd0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cd4:	2302      	movs	r3, #2
 8007cd6:	2200      	movs	r2, #0
 8007cd8:	f000 f93e 	bl	8007f58 <_lseek_r>
 8007cdc:	89a3      	ldrh	r3, [r4, #12]
 8007cde:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007ce2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007ce6:	81a3      	strh	r3, [r4, #12]
 8007ce8:	4632      	mov	r2, r6
 8007cea:	463b      	mov	r3, r7
 8007cec:	4628      	mov	r0, r5
 8007cee:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007cf2:	f000 b955 	b.w	8007fa0 <_write_r>

08007cf6 <__sseek>:
 8007cf6:	b510      	push	{r4, lr}
 8007cf8:	460c      	mov	r4, r1
 8007cfa:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007cfe:	f000 f92b 	bl	8007f58 <_lseek_r>
 8007d02:	1c43      	adds	r3, r0, #1
 8007d04:	89a3      	ldrh	r3, [r4, #12]
 8007d06:	bf15      	itete	ne
 8007d08:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007d0a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007d0e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007d12:	81a3      	strheq	r3, [r4, #12]
 8007d14:	bf18      	it	ne
 8007d16:	81a3      	strhne	r3, [r4, #12]
 8007d18:	bd10      	pop	{r4, pc}

08007d1a <__sclose>:
 8007d1a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007d1e:	f000 b8ad 	b.w	8007e7c <_close_r>

08007d22 <__swbuf_r>:
 8007d22:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d24:	460e      	mov	r6, r1
 8007d26:	4614      	mov	r4, r2
 8007d28:	4605      	mov	r5, r0
 8007d2a:	b118      	cbz	r0, 8007d34 <__swbuf_r+0x12>
 8007d2c:	6a03      	ldr	r3, [r0, #32]
 8007d2e:	b90b      	cbnz	r3, 8007d34 <__swbuf_r+0x12>
 8007d30:	f7ff ff0e 	bl	8007b50 <__sinit>
 8007d34:	69a3      	ldr	r3, [r4, #24]
 8007d36:	60a3      	str	r3, [r4, #8]
 8007d38:	89a3      	ldrh	r3, [r4, #12]
 8007d3a:	071a      	lsls	r2, r3, #28
 8007d3c:	d501      	bpl.n	8007d42 <__swbuf_r+0x20>
 8007d3e:	6923      	ldr	r3, [r4, #16]
 8007d40:	b943      	cbnz	r3, 8007d54 <__swbuf_r+0x32>
 8007d42:	4621      	mov	r1, r4
 8007d44:	4628      	mov	r0, r5
 8007d46:	f000 f82b 	bl	8007da0 <__swsetup_r>
 8007d4a:	b118      	cbz	r0, 8007d54 <__swbuf_r+0x32>
 8007d4c:	f04f 37ff 	mov.w	r7, #4294967295
 8007d50:	4638      	mov	r0, r7
 8007d52:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007d54:	6823      	ldr	r3, [r4, #0]
 8007d56:	6922      	ldr	r2, [r4, #16]
 8007d58:	1a98      	subs	r0, r3, r2
 8007d5a:	6963      	ldr	r3, [r4, #20]
 8007d5c:	b2f6      	uxtb	r6, r6
 8007d5e:	4283      	cmp	r3, r0
 8007d60:	4637      	mov	r7, r6
 8007d62:	dc05      	bgt.n	8007d70 <__swbuf_r+0x4e>
 8007d64:	4621      	mov	r1, r4
 8007d66:	4628      	mov	r0, r5
 8007d68:	f000 fdb2 	bl	80088d0 <_fflush_r>
 8007d6c:	2800      	cmp	r0, #0
 8007d6e:	d1ed      	bne.n	8007d4c <__swbuf_r+0x2a>
 8007d70:	68a3      	ldr	r3, [r4, #8]
 8007d72:	3b01      	subs	r3, #1
 8007d74:	60a3      	str	r3, [r4, #8]
 8007d76:	6823      	ldr	r3, [r4, #0]
 8007d78:	1c5a      	adds	r2, r3, #1
 8007d7a:	6022      	str	r2, [r4, #0]
 8007d7c:	701e      	strb	r6, [r3, #0]
 8007d7e:	6962      	ldr	r2, [r4, #20]
 8007d80:	1c43      	adds	r3, r0, #1
 8007d82:	429a      	cmp	r2, r3
 8007d84:	d004      	beq.n	8007d90 <__swbuf_r+0x6e>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	07db      	lsls	r3, r3, #31
 8007d8a:	d5e1      	bpl.n	8007d50 <__swbuf_r+0x2e>
 8007d8c:	2e0a      	cmp	r6, #10
 8007d8e:	d1df      	bne.n	8007d50 <__swbuf_r+0x2e>
 8007d90:	4621      	mov	r1, r4
 8007d92:	4628      	mov	r0, r5
 8007d94:	f000 fd9c 	bl	80088d0 <_fflush_r>
 8007d98:	2800      	cmp	r0, #0
 8007d9a:	d0d9      	beq.n	8007d50 <__swbuf_r+0x2e>
 8007d9c:	e7d6      	b.n	8007d4c <__swbuf_r+0x2a>
	...

08007da0 <__swsetup_r>:
 8007da0:	b538      	push	{r3, r4, r5, lr}
 8007da2:	4b29      	ldr	r3, [pc, #164]	@ (8007e48 <__swsetup_r+0xa8>)
 8007da4:	4605      	mov	r5, r0
 8007da6:	6818      	ldr	r0, [r3, #0]
 8007da8:	460c      	mov	r4, r1
 8007daa:	b118      	cbz	r0, 8007db4 <__swsetup_r+0x14>
 8007dac:	6a03      	ldr	r3, [r0, #32]
 8007dae:	b90b      	cbnz	r3, 8007db4 <__swsetup_r+0x14>
 8007db0:	f7ff fece 	bl	8007b50 <__sinit>
 8007db4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007db8:	0719      	lsls	r1, r3, #28
 8007dba:	d422      	bmi.n	8007e02 <__swsetup_r+0x62>
 8007dbc:	06da      	lsls	r2, r3, #27
 8007dbe:	d407      	bmi.n	8007dd0 <__swsetup_r+0x30>
 8007dc0:	2209      	movs	r2, #9
 8007dc2:	602a      	str	r2, [r5, #0]
 8007dc4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007dc8:	81a3      	strh	r3, [r4, #12]
 8007dca:	f04f 30ff 	mov.w	r0, #4294967295
 8007dce:	e033      	b.n	8007e38 <__swsetup_r+0x98>
 8007dd0:	0758      	lsls	r0, r3, #29
 8007dd2:	d512      	bpl.n	8007dfa <__swsetup_r+0x5a>
 8007dd4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007dd6:	b141      	cbz	r1, 8007dea <__swsetup_r+0x4a>
 8007dd8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007ddc:	4299      	cmp	r1, r3
 8007dde:	d002      	beq.n	8007de6 <__swsetup_r+0x46>
 8007de0:	4628      	mov	r0, r5
 8007de2:	f000 f92b 	bl	800803c <_free_r>
 8007de6:	2300      	movs	r3, #0
 8007de8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007dea:	89a3      	ldrh	r3, [r4, #12]
 8007dec:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007df0:	81a3      	strh	r3, [r4, #12]
 8007df2:	2300      	movs	r3, #0
 8007df4:	6063      	str	r3, [r4, #4]
 8007df6:	6923      	ldr	r3, [r4, #16]
 8007df8:	6023      	str	r3, [r4, #0]
 8007dfa:	89a3      	ldrh	r3, [r4, #12]
 8007dfc:	f043 0308 	orr.w	r3, r3, #8
 8007e00:	81a3      	strh	r3, [r4, #12]
 8007e02:	6923      	ldr	r3, [r4, #16]
 8007e04:	b94b      	cbnz	r3, 8007e1a <__swsetup_r+0x7a>
 8007e06:	89a3      	ldrh	r3, [r4, #12]
 8007e08:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007e0c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007e10:	d003      	beq.n	8007e1a <__swsetup_r+0x7a>
 8007e12:	4621      	mov	r1, r4
 8007e14:	4628      	mov	r0, r5
 8007e16:	f000 fda9 	bl	800896c <__smakebuf_r>
 8007e1a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007e1e:	f013 0201 	ands.w	r2, r3, #1
 8007e22:	d00a      	beq.n	8007e3a <__swsetup_r+0x9a>
 8007e24:	2200      	movs	r2, #0
 8007e26:	60a2      	str	r2, [r4, #8]
 8007e28:	6962      	ldr	r2, [r4, #20]
 8007e2a:	4252      	negs	r2, r2
 8007e2c:	61a2      	str	r2, [r4, #24]
 8007e2e:	6922      	ldr	r2, [r4, #16]
 8007e30:	b942      	cbnz	r2, 8007e44 <__swsetup_r+0xa4>
 8007e32:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007e36:	d1c5      	bne.n	8007dc4 <__swsetup_r+0x24>
 8007e38:	bd38      	pop	{r3, r4, r5, pc}
 8007e3a:	0799      	lsls	r1, r3, #30
 8007e3c:	bf58      	it	pl
 8007e3e:	6962      	ldrpl	r2, [r4, #20]
 8007e40:	60a2      	str	r2, [r4, #8]
 8007e42:	e7f4      	b.n	8007e2e <__swsetup_r+0x8e>
 8007e44:	2000      	movs	r0, #0
 8007e46:	e7f7      	b.n	8007e38 <__swsetup_r+0x98>
 8007e48:	2000001c 	.word	0x2000001c

08007e4c <memcmp>:
 8007e4c:	b510      	push	{r4, lr}
 8007e4e:	3901      	subs	r1, #1
 8007e50:	4402      	add	r2, r0
 8007e52:	4290      	cmp	r0, r2
 8007e54:	d101      	bne.n	8007e5a <memcmp+0xe>
 8007e56:	2000      	movs	r0, #0
 8007e58:	e005      	b.n	8007e66 <memcmp+0x1a>
 8007e5a:	7803      	ldrb	r3, [r0, #0]
 8007e5c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007e60:	42a3      	cmp	r3, r4
 8007e62:	d001      	beq.n	8007e68 <memcmp+0x1c>
 8007e64:	1b18      	subs	r0, r3, r4
 8007e66:	bd10      	pop	{r4, pc}
 8007e68:	3001      	adds	r0, #1
 8007e6a:	e7f2      	b.n	8007e52 <memcmp+0x6>

08007e6c <memset>:
 8007e6c:	4402      	add	r2, r0
 8007e6e:	4603      	mov	r3, r0
 8007e70:	4293      	cmp	r3, r2
 8007e72:	d100      	bne.n	8007e76 <memset+0xa>
 8007e74:	4770      	bx	lr
 8007e76:	f803 1b01 	strb.w	r1, [r3], #1
 8007e7a:	e7f9      	b.n	8007e70 <memset+0x4>

08007e7c <_close_r>:
 8007e7c:	b538      	push	{r3, r4, r5, lr}
 8007e7e:	4d06      	ldr	r5, [pc, #24]	@ (8007e98 <_close_r+0x1c>)
 8007e80:	2300      	movs	r3, #0
 8007e82:	4604      	mov	r4, r0
 8007e84:	4608      	mov	r0, r1
 8007e86:	602b      	str	r3, [r5, #0]
 8007e88:	f7fa fc01 	bl	800268e <_close>
 8007e8c:	1c43      	adds	r3, r0, #1
 8007e8e:	d102      	bne.n	8007e96 <_close_r+0x1a>
 8007e90:	682b      	ldr	r3, [r5, #0]
 8007e92:	b103      	cbz	r3, 8007e96 <_close_r+0x1a>
 8007e94:	6023      	str	r3, [r4, #0]
 8007e96:	bd38      	pop	{r3, r4, r5, pc}
 8007e98:	20004cc4 	.word	0x20004cc4

08007e9c <_reclaim_reent>:
 8007e9c:	4b2d      	ldr	r3, [pc, #180]	@ (8007f54 <_reclaim_reent+0xb8>)
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	4283      	cmp	r3, r0
 8007ea2:	b570      	push	{r4, r5, r6, lr}
 8007ea4:	4604      	mov	r4, r0
 8007ea6:	d053      	beq.n	8007f50 <_reclaim_reent+0xb4>
 8007ea8:	69c3      	ldr	r3, [r0, #28]
 8007eaa:	b31b      	cbz	r3, 8007ef4 <_reclaim_reent+0x58>
 8007eac:	68db      	ldr	r3, [r3, #12]
 8007eae:	b163      	cbz	r3, 8007eca <_reclaim_reent+0x2e>
 8007eb0:	2500      	movs	r5, #0
 8007eb2:	69e3      	ldr	r3, [r4, #28]
 8007eb4:	68db      	ldr	r3, [r3, #12]
 8007eb6:	5959      	ldr	r1, [r3, r5]
 8007eb8:	b9b1      	cbnz	r1, 8007ee8 <_reclaim_reent+0x4c>
 8007eba:	3504      	adds	r5, #4
 8007ebc:	2d80      	cmp	r5, #128	@ 0x80
 8007ebe:	d1f8      	bne.n	8007eb2 <_reclaim_reent+0x16>
 8007ec0:	69e3      	ldr	r3, [r4, #28]
 8007ec2:	4620      	mov	r0, r4
 8007ec4:	68d9      	ldr	r1, [r3, #12]
 8007ec6:	f000 f8b9 	bl	800803c <_free_r>
 8007eca:	69e3      	ldr	r3, [r4, #28]
 8007ecc:	6819      	ldr	r1, [r3, #0]
 8007ece:	b111      	cbz	r1, 8007ed6 <_reclaim_reent+0x3a>
 8007ed0:	4620      	mov	r0, r4
 8007ed2:	f000 f8b3 	bl	800803c <_free_r>
 8007ed6:	69e3      	ldr	r3, [r4, #28]
 8007ed8:	689d      	ldr	r5, [r3, #8]
 8007eda:	b15d      	cbz	r5, 8007ef4 <_reclaim_reent+0x58>
 8007edc:	4629      	mov	r1, r5
 8007ede:	4620      	mov	r0, r4
 8007ee0:	682d      	ldr	r5, [r5, #0]
 8007ee2:	f000 f8ab 	bl	800803c <_free_r>
 8007ee6:	e7f8      	b.n	8007eda <_reclaim_reent+0x3e>
 8007ee8:	680e      	ldr	r6, [r1, #0]
 8007eea:	4620      	mov	r0, r4
 8007eec:	f000 f8a6 	bl	800803c <_free_r>
 8007ef0:	4631      	mov	r1, r6
 8007ef2:	e7e1      	b.n	8007eb8 <_reclaim_reent+0x1c>
 8007ef4:	6961      	ldr	r1, [r4, #20]
 8007ef6:	b111      	cbz	r1, 8007efe <_reclaim_reent+0x62>
 8007ef8:	4620      	mov	r0, r4
 8007efa:	f000 f89f 	bl	800803c <_free_r>
 8007efe:	69e1      	ldr	r1, [r4, #28]
 8007f00:	b111      	cbz	r1, 8007f08 <_reclaim_reent+0x6c>
 8007f02:	4620      	mov	r0, r4
 8007f04:	f000 f89a 	bl	800803c <_free_r>
 8007f08:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007f0a:	b111      	cbz	r1, 8007f12 <_reclaim_reent+0x76>
 8007f0c:	4620      	mov	r0, r4
 8007f0e:	f000 f895 	bl	800803c <_free_r>
 8007f12:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007f14:	b111      	cbz	r1, 8007f1c <_reclaim_reent+0x80>
 8007f16:	4620      	mov	r0, r4
 8007f18:	f000 f890 	bl	800803c <_free_r>
 8007f1c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007f1e:	b111      	cbz	r1, 8007f26 <_reclaim_reent+0x8a>
 8007f20:	4620      	mov	r0, r4
 8007f22:	f000 f88b 	bl	800803c <_free_r>
 8007f26:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007f28:	b111      	cbz	r1, 8007f30 <_reclaim_reent+0x94>
 8007f2a:	4620      	mov	r0, r4
 8007f2c:	f000 f886 	bl	800803c <_free_r>
 8007f30:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007f32:	b111      	cbz	r1, 8007f3a <_reclaim_reent+0x9e>
 8007f34:	4620      	mov	r0, r4
 8007f36:	f000 f881 	bl	800803c <_free_r>
 8007f3a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007f3c:	b111      	cbz	r1, 8007f44 <_reclaim_reent+0xa8>
 8007f3e:	4620      	mov	r0, r4
 8007f40:	f000 f87c 	bl	800803c <_free_r>
 8007f44:	6a23      	ldr	r3, [r4, #32]
 8007f46:	b11b      	cbz	r3, 8007f50 <_reclaim_reent+0xb4>
 8007f48:	4620      	mov	r0, r4
 8007f4a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007f4e:	4718      	bx	r3
 8007f50:	bd70      	pop	{r4, r5, r6, pc}
 8007f52:	bf00      	nop
 8007f54:	2000001c 	.word	0x2000001c

08007f58 <_lseek_r>:
 8007f58:	b538      	push	{r3, r4, r5, lr}
 8007f5a:	4d07      	ldr	r5, [pc, #28]	@ (8007f78 <_lseek_r+0x20>)
 8007f5c:	4604      	mov	r4, r0
 8007f5e:	4608      	mov	r0, r1
 8007f60:	4611      	mov	r1, r2
 8007f62:	2200      	movs	r2, #0
 8007f64:	602a      	str	r2, [r5, #0]
 8007f66:	461a      	mov	r2, r3
 8007f68:	f7fa fbb8 	bl	80026dc <_lseek>
 8007f6c:	1c43      	adds	r3, r0, #1
 8007f6e:	d102      	bne.n	8007f76 <_lseek_r+0x1e>
 8007f70:	682b      	ldr	r3, [r5, #0]
 8007f72:	b103      	cbz	r3, 8007f76 <_lseek_r+0x1e>
 8007f74:	6023      	str	r3, [r4, #0]
 8007f76:	bd38      	pop	{r3, r4, r5, pc}
 8007f78:	20004cc4 	.word	0x20004cc4

08007f7c <_read_r>:
 8007f7c:	b538      	push	{r3, r4, r5, lr}
 8007f7e:	4d07      	ldr	r5, [pc, #28]	@ (8007f9c <_read_r+0x20>)
 8007f80:	4604      	mov	r4, r0
 8007f82:	4608      	mov	r0, r1
 8007f84:	4611      	mov	r1, r2
 8007f86:	2200      	movs	r2, #0
 8007f88:	602a      	str	r2, [r5, #0]
 8007f8a:	461a      	mov	r2, r3
 8007f8c:	f7fa fb62 	bl	8002654 <_read>
 8007f90:	1c43      	adds	r3, r0, #1
 8007f92:	d102      	bne.n	8007f9a <_read_r+0x1e>
 8007f94:	682b      	ldr	r3, [r5, #0]
 8007f96:	b103      	cbz	r3, 8007f9a <_read_r+0x1e>
 8007f98:	6023      	str	r3, [r4, #0]
 8007f9a:	bd38      	pop	{r3, r4, r5, pc}
 8007f9c:	20004cc4 	.word	0x20004cc4

08007fa0 <_write_r>:
 8007fa0:	b538      	push	{r3, r4, r5, lr}
 8007fa2:	4d07      	ldr	r5, [pc, #28]	@ (8007fc0 <_write_r+0x20>)
 8007fa4:	4604      	mov	r4, r0
 8007fa6:	4608      	mov	r0, r1
 8007fa8:	4611      	mov	r1, r2
 8007faa:	2200      	movs	r2, #0
 8007fac:	602a      	str	r2, [r5, #0]
 8007fae:	461a      	mov	r2, r3
 8007fb0:	f7f9 f820 	bl	8000ff4 <_write>
 8007fb4:	1c43      	adds	r3, r0, #1
 8007fb6:	d102      	bne.n	8007fbe <_write_r+0x1e>
 8007fb8:	682b      	ldr	r3, [r5, #0]
 8007fba:	b103      	cbz	r3, 8007fbe <_write_r+0x1e>
 8007fbc:	6023      	str	r3, [r4, #0]
 8007fbe:	bd38      	pop	{r3, r4, r5, pc}
 8007fc0:	20004cc4 	.word	0x20004cc4

08007fc4 <__errno>:
 8007fc4:	4b01      	ldr	r3, [pc, #4]	@ (8007fcc <__errno+0x8>)
 8007fc6:	6818      	ldr	r0, [r3, #0]
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	2000001c 	.word	0x2000001c

08007fd0 <__libc_init_array>:
 8007fd0:	b570      	push	{r4, r5, r6, lr}
 8007fd2:	4d0d      	ldr	r5, [pc, #52]	@ (8008008 <__libc_init_array+0x38>)
 8007fd4:	4c0d      	ldr	r4, [pc, #52]	@ (800800c <__libc_init_array+0x3c>)
 8007fd6:	1b64      	subs	r4, r4, r5
 8007fd8:	10a4      	asrs	r4, r4, #2
 8007fda:	2600      	movs	r6, #0
 8007fdc:	42a6      	cmp	r6, r4
 8007fde:	d109      	bne.n	8007ff4 <__libc_init_array+0x24>
 8007fe0:	4d0b      	ldr	r5, [pc, #44]	@ (8008010 <__libc_init_array+0x40>)
 8007fe2:	4c0c      	ldr	r4, [pc, #48]	@ (8008014 <__libc_init_array+0x44>)
 8007fe4:	f000 fd30 	bl	8008a48 <_init>
 8007fe8:	1b64      	subs	r4, r4, r5
 8007fea:	10a4      	asrs	r4, r4, #2
 8007fec:	2600      	movs	r6, #0
 8007fee:	42a6      	cmp	r6, r4
 8007ff0:	d105      	bne.n	8007ffe <__libc_init_array+0x2e>
 8007ff2:	bd70      	pop	{r4, r5, r6, pc}
 8007ff4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007ff8:	4798      	blx	r3
 8007ffa:	3601      	adds	r6, #1
 8007ffc:	e7ee      	b.n	8007fdc <__libc_init_array+0xc>
 8007ffe:	f855 3b04 	ldr.w	r3, [r5], #4
 8008002:	4798      	blx	r3
 8008004:	3601      	adds	r6, #1
 8008006:	e7f2      	b.n	8007fee <__libc_init_array+0x1e>
 8008008:	0800a8d0 	.word	0x0800a8d0
 800800c:	0800a8d0 	.word	0x0800a8d0
 8008010:	0800a8d0 	.word	0x0800a8d0
 8008014:	0800a8d4 	.word	0x0800a8d4

08008018 <__retarget_lock_init_recursive>:
 8008018:	4770      	bx	lr

0800801a <__retarget_lock_acquire_recursive>:
 800801a:	4770      	bx	lr

0800801c <__retarget_lock_release_recursive>:
 800801c:	4770      	bx	lr

0800801e <memcpy>:
 800801e:	440a      	add	r2, r1
 8008020:	4291      	cmp	r1, r2
 8008022:	f100 33ff 	add.w	r3, r0, #4294967295
 8008026:	d100      	bne.n	800802a <memcpy+0xc>
 8008028:	4770      	bx	lr
 800802a:	b510      	push	{r4, lr}
 800802c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008030:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008034:	4291      	cmp	r1, r2
 8008036:	d1f9      	bne.n	800802c <memcpy+0xe>
 8008038:	bd10      	pop	{r4, pc}
	...

0800803c <_free_r>:
 800803c:	b538      	push	{r3, r4, r5, lr}
 800803e:	4605      	mov	r5, r0
 8008040:	2900      	cmp	r1, #0
 8008042:	d041      	beq.n	80080c8 <_free_r+0x8c>
 8008044:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008048:	1f0c      	subs	r4, r1, #4
 800804a:	2b00      	cmp	r3, #0
 800804c:	bfb8      	it	lt
 800804e:	18e4      	addlt	r4, r4, r3
 8008050:	f000 f8e0 	bl	8008214 <__malloc_lock>
 8008054:	4a1d      	ldr	r2, [pc, #116]	@ (80080cc <_free_r+0x90>)
 8008056:	6813      	ldr	r3, [r2, #0]
 8008058:	b933      	cbnz	r3, 8008068 <_free_r+0x2c>
 800805a:	6063      	str	r3, [r4, #4]
 800805c:	6014      	str	r4, [r2, #0]
 800805e:	4628      	mov	r0, r5
 8008060:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008064:	f000 b8dc 	b.w	8008220 <__malloc_unlock>
 8008068:	42a3      	cmp	r3, r4
 800806a:	d908      	bls.n	800807e <_free_r+0x42>
 800806c:	6820      	ldr	r0, [r4, #0]
 800806e:	1821      	adds	r1, r4, r0
 8008070:	428b      	cmp	r3, r1
 8008072:	bf01      	itttt	eq
 8008074:	6819      	ldreq	r1, [r3, #0]
 8008076:	685b      	ldreq	r3, [r3, #4]
 8008078:	1809      	addeq	r1, r1, r0
 800807a:	6021      	streq	r1, [r4, #0]
 800807c:	e7ed      	b.n	800805a <_free_r+0x1e>
 800807e:	461a      	mov	r2, r3
 8008080:	685b      	ldr	r3, [r3, #4]
 8008082:	b10b      	cbz	r3, 8008088 <_free_r+0x4c>
 8008084:	42a3      	cmp	r3, r4
 8008086:	d9fa      	bls.n	800807e <_free_r+0x42>
 8008088:	6811      	ldr	r1, [r2, #0]
 800808a:	1850      	adds	r0, r2, r1
 800808c:	42a0      	cmp	r0, r4
 800808e:	d10b      	bne.n	80080a8 <_free_r+0x6c>
 8008090:	6820      	ldr	r0, [r4, #0]
 8008092:	4401      	add	r1, r0
 8008094:	1850      	adds	r0, r2, r1
 8008096:	4283      	cmp	r3, r0
 8008098:	6011      	str	r1, [r2, #0]
 800809a:	d1e0      	bne.n	800805e <_free_r+0x22>
 800809c:	6818      	ldr	r0, [r3, #0]
 800809e:	685b      	ldr	r3, [r3, #4]
 80080a0:	6053      	str	r3, [r2, #4]
 80080a2:	4408      	add	r0, r1
 80080a4:	6010      	str	r0, [r2, #0]
 80080a6:	e7da      	b.n	800805e <_free_r+0x22>
 80080a8:	d902      	bls.n	80080b0 <_free_r+0x74>
 80080aa:	230c      	movs	r3, #12
 80080ac:	602b      	str	r3, [r5, #0]
 80080ae:	e7d6      	b.n	800805e <_free_r+0x22>
 80080b0:	6820      	ldr	r0, [r4, #0]
 80080b2:	1821      	adds	r1, r4, r0
 80080b4:	428b      	cmp	r3, r1
 80080b6:	bf04      	itt	eq
 80080b8:	6819      	ldreq	r1, [r3, #0]
 80080ba:	685b      	ldreq	r3, [r3, #4]
 80080bc:	6063      	str	r3, [r4, #4]
 80080be:	bf04      	itt	eq
 80080c0:	1809      	addeq	r1, r1, r0
 80080c2:	6021      	streq	r1, [r4, #0]
 80080c4:	6054      	str	r4, [r2, #4]
 80080c6:	e7ca      	b.n	800805e <_free_r+0x22>
 80080c8:	bd38      	pop	{r3, r4, r5, pc}
 80080ca:	bf00      	nop
 80080cc:	20004cd0 	.word	0x20004cd0

080080d0 <sbrk_aligned>:
 80080d0:	b570      	push	{r4, r5, r6, lr}
 80080d2:	4e0f      	ldr	r6, [pc, #60]	@ (8008110 <sbrk_aligned+0x40>)
 80080d4:	460c      	mov	r4, r1
 80080d6:	6831      	ldr	r1, [r6, #0]
 80080d8:	4605      	mov	r5, r0
 80080da:	b911      	cbnz	r1, 80080e2 <sbrk_aligned+0x12>
 80080dc:	f000 fca4 	bl	8008a28 <_sbrk_r>
 80080e0:	6030      	str	r0, [r6, #0]
 80080e2:	4621      	mov	r1, r4
 80080e4:	4628      	mov	r0, r5
 80080e6:	f000 fc9f 	bl	8008a28 <_sbrk_r>
 80080ea:	1c43      	adds	r3, r0, #1
 80080ec:	d103      	bne.n	80080f6 <sbrk_aligned+0x26>
 80080ee:	f04f 34ff 	mov.w	r4, #4294967295
 80080f2:	4620      	mov	r0, r4
 80080f4:	bd70      	pop	{r4, r5, r6, pc}
 80080f6:	1cc4      	adds	r4, r0, #3
 80080f8:	f024 0403 	bic.w	r4, r4, #3
 80080fc:	42a0      	cmp	r0, r4
 80080fe:	d0f8      	beq.n	80080f2 <sbrk_aligned+0x22>
 8008100:	1a21      	subs	r1, r4, r0
 8008102:	4628      	mov	r0, r5
 8008104:	f000 fc90 	bl	8008a28 <_sbrk_r>
 8008108:	3001      	adds	r0, #1
 800810a:	d1f2      	bne.n	80080f2 <sbrk_aligned+0x22>
 800810c:	e7ef      	b.n	80080ee <sbrk_aligned+0x1e>
 800810e:	bf00      	nop
 8008110:	20004ccc 	.word	0x20004ccc

08008114 <_malloc_r>:
 8008114:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008118:	1ccd      	adds	r5, r1, #3
 800811a:	f025 0503 	bic.w	r5, r5, #3
 800811e:	3508      	adds	r5, #8
 8008120:	2d0c      	cmp	r5, #12
 8008122:	bf38      	it	cc
 8008124:	250c      	movcc	r5, #12
 8008126:	2d00      	cmp	r5, #0
 8008128:	4606      	mov	r6, r0
 800812a:	db01      	blt.n	8008130 <_malloc_r+0x1c>
 800812c:	42a9      	cmp	r1, r5
 800812e:	d904      	bls.n	800813a <_malloc_r+0x26>
 8008130:	230c      	movs	r3, #12
 8008132:	6033      	str	r3, [r6, #0]
 8008134:	2000      	movs	r0, #0
 8008136:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800813a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008210 <_malloc_r+0xfc>
 800813e:	f000 f869 	bl	8008214 <__malloc_lock>
 8008142:	f8d8 3000 	ldr.w	r3, [r8]
 8008146:	461c      	mov	r4, r3
 8008148:	bb44      	cbnz	r4, 800819c <_malloc_r+0x88>
 800814a:	4629      	mov	r1, r5
 800814c:	4630      	mov	r0, r6
 800814e:	f7ff ffbf 	bl	80080d0 <sbrk_aligned>
 8008152:	1c43      	adds	r3, r0, #1
 8008154:	4604      	mov	r4, r0
 8008156:	d158      	bne.n	800820a <_malloc_r+0xf6>
 8008158:	f8d8 4000 	ldr.w	r4, [r8]
 800815c:	4627      	mov	r7, r4
 800815e:	2f00      	cmp	r7, #0
 8008160:	d143      	bne.n	80081ea <_malloc_r+0xd6>
 8008162:	2c00      	cmp	r4, #0
 8008164:	d04b      	beq.n	80081fe <_malloc_r+0xea>
 8008166:	6823      	ldr	r3, [r4, #0]
 8008168:	4639      	mov	r1, r7
 800816a:	4630      	mov	r0, r6
 800816c:	eb04 0903 	add.w	r9, r4, r3
 8008170:	f000 fc5a 	bl	8008a28 <_sbrk_r>
 8008174:	4581      	cmp	r9, r0
 8008176:	d142      	bne.n	80081fe <_malloc_r+0xea>
 8008178:	6821      	ldr	r1, [r4, #0]
 800817a:	1a6d      	subs	r5, r5, r1
 800817c:	4629      	mov	r1, r5
 800817e:	4630      	mov	r0, r6
 8008180:	f7ff ffa6 	bl	80080d0 <sbrk_aligned>
 8008184:	3001      	adds	r0, #1
 8008186:	d03a      	beq.n	80081fe <_malloc_r+0xea>
 8008188:	6823      	ldr	r3, [r4, #0]
 800818a:	442b      	add	r3, r5
 800818c:	6023      	str	r3, [r4, #0]
 800818e:	f8d8 3000 	ldr.w	r3, [r8]
 8008192:	685a      	ldr	r2, [r3, #4]
 8008194:	bb62      	cbnz	r2, 80081f0 <_malloc_r+0xdc>
 8008196:	f8c8 7000 	str.w	r7, [r8]
 800819a:	e00f      	b.n	80081bc <_malloc_r+0xa8>
 800819c:	6822      	ldr	r2, [r4, #0]
 800819e:	1b52      	subs	r2, r2, r5
 80081a0:	d420      	bmi.n	80081e4 <_malloc_r+0xd0>
 80081a2:	2a0b      	cmp	r2, #11
 80081a4:	d917      	bls.n	80081d6 <_malloc_r+0xc2>
 80081a6:	1961      	adds	r1, r4, r5
 80081a8:	42a3      	cmp	r3, r4
 80081aa:	6025      	str	r5, [r4, #0]
 80081ac:	bf18      	it	ne
 80081ae:	6059      	strne	r1, [r3, #4]
 80081b0:	6863      	ldr	r3, [r4, #4]
 80081b2:	bf08      	it	eq
 80081b4:	f8c8 1000 	streq.w	r1, [r8]
 80081b8:	5162      	str	r2, [r4, r5]
 80081ba:	604b      	str	r3, [r1, #4]
 80081bc:	4630      	mov	r0, r6
 80081be:	f000 f82f 	bl	8008220 <__malloc_unlock>
 80081c2:	f104 000b 	add.w	r0, r4, #11
 80081c6:	1d23      	adds	r3, r4, #4
 80081c8:	f020 0007 	bic.w	r0, r0, #7
 80081cc:	1ac2      	subs	r2, r0, r3
 80081ce:	bf1c      	itt	ne
 80081d0:	1a1b      	subne	r3, r3, r0
 80081d2:	50a3      	strne	r3, [r4, r2]
 80081d4:	e7af      	b.n	8008136 <_malloc_r+0x22>
 80081d6:	6862      	ldr	r2, [r4, #4]
 80081d8:	42a3      	cmp	r3, r4
 80081da:	bf0c      	ite	eq
 80081dc:	f8c8 2000 	streq.w	r2, [r8]
 80081e0:	605a      	strne	r2, [r3, #4]
 80081e2:	e7eb      	b.n	80081bc <_malloc_r+0xa8>
 80081e4:	4623      	mov	r3, r4
 80081e6:	6864      	ldr	r4, [r4, #4]
 80081e8:	e7ae      	b.n	8008148 <_malloc_r+0x34>
 80081ea:	463c      	mov	r4, r7
 80081ec:	687f      	ldr	r7, [r7, #4]
 80081ee:	e7b6      	b.n	800815e <_malloc_r+0x4a>
 80081f0:	461a      	mov	r2, r3
 80081f2:	685b      	ldr	r3, [r3, #4]
 80081f4:	42a3      	cmp	r3, r4
 80081f6:	d1fb      	bne.n	80081f0 <_malloc_r+0xdc>
 80081f8:	2300      	movs	r3, #0
 80081fa:	6053      	str	r3, [r2, #4]
 80081fc:	e7de      	b.n	80081bc <_malloc_r+0xa8>
 80081fe:	230c      	movs	r3, #12
 8008200:	6033      	str	r3, [r6, #0]
 8008202:	4630      	mov	r0, r6
 8008204:	f000 f80c 	bl	8008220 <__malloc_unlock>
 8008208:	e794      	b.n	8008134 <_malloc_r+0x20>
 800820a:	6005      	str	r5, [r0, #0]
 800820c:	e7d6      	b.n	80081bc <_malloc_r+0xa8>
 800820e:	bf00      	nop
 8008210:	20004cd0 	.word	0x20004cd0

08008214 <__malloc_lock>:
 8008214:	4801      	ldr	r0, [pc, #4]	@ (800821c <__malloc_lock+0x8>)
 8008216:	f7ff bf00 	b.w	800801a <__retarget_lock_acquire_recursive>
 800821a:	bf00      	nop
 800821c:	20004cc8 	.word	0x20004cc8

08008220 <__malloc_unlock>:
 8008220:	4801      	ldr	r0, [pc, #4]	@ (8008228 <__malloc_unlock+0x8>)
 8008222:	f7ff befb 	b.w	800801c <__retarget_lock_release_recursive>
 8008226:	bf00      	nop
 8008228:	20004cc8 	.word	0x20004cc8

0800822c <__sfputc_r>:
 800822c:	6893      	ldr	r3, [r2, #8]
 800822e:	3b01      	subs	r3, #1
 8008230:	2b00      	cmp	r3, #0
 8008232:	b410      	push	{r4}
 8008234:	6093      	str	r3, [r2, #8]
 8008236:	da08      	bge.n	800824a <__sfputc_r+0x1e>
 8008238:	6994      	ldr	r4, [r2, #24]
 800823a:	42a3      	cmp	r3, r4
 800823c:	db01      	blt.n	8008242 <__sfputc_r+0x16>
 800823e:	290a      	cmp	r1, #10
 8008240:	d103      	bne.n	800824a <__sfputc_r+0x1e>
 8008242:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008246:	f7ff bd6c 	b.w	8007d22 <__swbuf_r>
 800824a:	6813      	ldr	r3, [r2, #0]
 800824c:	1c58      	adds	r0, r3, #1
 800824e:	6010      	str	r0, [r2, #0]
 8008250:	7019      	strb	r1, [r3, #0]
 8008252:	4608      	mov	r0, r1
 8008254:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008258:	4770      	bx	lr

0800825a <__sfputs_r>:
 800825a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800825c:	4606      	mov	r6, r0
 800825e:	460f      	mov	r7, r1
 8008260:	4614      	mov	r4, r2
 8008262:	18d5      	adds	r5, r2, r3
 8008264:	42ac      	cmp	r4, r5
 8008266:	d101      	bne.n	800826c <__sfputs_r+0x12>
 8008268:	2000      	movs	r0, #0
 800826a:	e007      	b.n	800827c <__sfputs_r+0x22>
 800826c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008270:	463a      	mov	r2, r7
 8008272:	4630      	mov	r0, r6
 8008274:	f7ff ffda 	bl	800822c <__sfputc_r>
 8008278:	1c43      	adds	r3, r0, #1
 800827a:	d1f3      	bne.n	8008264 <__sfputs_r+0xa>
 800827c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008280 <_vfiprintf_r>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	460d      	mov	r5, r1
 8008286:	b09d      	sub	sp, #116	@ 0x74
 8008288:	4614      	mov	r4, r2
 800828a:	4698      	mov	r8, r3
 800828c:	4606      	mov	r6, r0
 800828e:	b118      	cbz	r0, 8008298 <_vfiprintf_r+0x18>
 8008290:	6a03      	ldr	r3, [r0, #32]
 8008292:	b90b      	cbnz	r3, 8008298 <_vfiprintf_r+0x18>
 8008294:	f7ff fc5c 	bl	8007b50 <__sinit>
 8008298:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800829a:	07d9      	lsls	r1, r3, #31
 800829c:	d405      	bmi.n	80082aa <_vfiprintf_r+0x2a>
 800829e:	89ab      	ldrh	r3, [r5, #12]
 80082a0:	059a      	lsls	r2, r3, #22
 80082a2:	d402      	bmi.n	80082aa <_vfiprintf_r+0x2a>
 80082a4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082a6:	f7ff feb8 	bl	800801a <__retarget_lock_acquire_recursive>
 80082aa:	89ab      	ldrh	r3, [r5, #12]
 80082ac:	071b      	lsls	r3, r3, #28
 80082ae:	d501      	bpl.n	80082b4 <_vfiprintf_r+0x34>
 80082b0:	692b      	ldr	r3, [r5, #16]
 80082b2:	b99b      	cbnz	r3, 80082dc <_vfiprintf_r+0x5c>
 80082b4:	4629      	mov	r1, r5
 80082b6:	4630      	mov	r0, r6
 80082b8:	f7ff fd72 	bl	8007da0 <__swsetup_r>
 80082bc:	b170      	cbz	r0, 80082dc <_vfiprintf_r+0x5c>
 80082be:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80082c0:	07dc      	lsls	r4, r3, #31
 80082c2:	d504      	bpl.n	80082ce <_vfiprintf_r+0x4e>
 80082c4:	f04f 30ff 	mov.w	r0, #4294967295
 80082c8:	b01d      	add	sp, #116	@ 0x74
 80082ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80082ce:	89ab      	ldrh	r3, [r5, #12]
 80082d0:	0598      	lsls	r0, r3, #22
 80082d2:	d4f7      	bmi.n	80082c4 <_vfiprintf_r+0x44>
 80082d4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80082d6:	f7ff fea1 	bl	800801c <__retarget_lock_release_recursive>
 80082da:	e7f3      	b.n	80082c4 <_vfiprintf_r+0x44>
 80082dc:	2300      	movs	r3, #0
 80082de:	9309      	str	r3, [sp, #36]	@ 0x24
 80082e0:	2320      	movs	r3, #32
 80082e2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 80082e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80082ea:	2330      	movs	r3, #48	@ 0x30
 80082ec:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800849c <_vfiprintf_r+0x21c>
 80082f0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 80082f4:	f04f 0901 	mov.w	r9, #1
 80082f8:	4623      	mov	r3, r4
 80082fa:	469a      	mov	sl, r3
 80082fc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008300:	b10a      	cbz	r2, 8008306 <_vfiprintf_r+0x86>
 8008302:	2a25      	cmp	r2, #37	@ 0x25
 8008304:	d1f9      	bne.n	80082fa <_vfiprintf_r+0x7a>
 8008306:	ebba 0b04 	subs.w	fp, sl, r4
 800830a:	d00b      	beq.n	8008324 <_vfiprintf_r+0xa4>
 800830c:	465b      	mov	r3, fp
 800830e:	4622      	mov	r2, r4
 8008310:	4629      	mov	r1, r5
 8008312:	4630      	mov	r0, r6
 8008314:	f7ff ffa1 	bl	800825a <__sfputs_r>
 8008318:	3001      	adds	r0, #1
 800831a:	f000 80a7 	beq.w	800846c <_vfiprintf_r+0x1ec>
 800831e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008320:	445a      	add	r2, fp
 8008322:	9209      	str	r2, [sp, #36]	@ 0x24
 8008324:	f89a 3000 	ldrb.w	r3, [sl]
 8008328:	2b00      	cmp	r3, #0
 800832a:	f000 809f 	beq.w	800846c <_vfiprintf_r+0x1ec>
 800832e:	2300      	movs	r3, #0
 8008330:	f04f 32ff 	mov.w	r2, #4294967295
 8008334:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008338:	f10a 0a01 	add.w	sl, sl, #1
 800833c:	9304      	str	r3, [sp, #16]
 800833e:	9307      	str	r3, [sp, #28]
 8008340:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008344:	931a      	str	r3, [sp, #104]	@ 0x68
 8008346:	4654      	mov	r4, sl
 8008348:	2205      	movs	r2, #5
 800834a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800834e:	4853      	ldr	r0, [pc, #332]	@ (800849c <_vfiprintf_r+0x21c>)
 8008350:	f7f7 ff3e 	bl	80001d0 <memchr>
 8008354:	9a04      	ldr	r2, [sp, #16]
 8008356:	b9d8      	cbnz	r0, 8008390 <_vfiprintf_r+0x110>
 8008358:	06d1      	lsls	r1, r2, #27
 800835a:	bf44      	itt	mi
 800835c:	2320      	movmi	r3, #32
 800835e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008362:	0713      	lsls	r3, r2, #28
 8008364:	bf44      	itt	mi
 8008366:	232b      	movmi	r3, #43	@ 0x2b
 8008368:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800836c:	f89a 3000 	ldrb.w	r3, [sl]
 8008370:	2b2a      	cmp	r3, #42	@ 0x2a
 8008372:	d015      	beq.n	80083a0 <_vfiprintf_r+0x120>
 8008374:	9a07      	ldr	r2, [sp, #28]
 8008376:	4654      	mov	r4, sl
 8008378:	2000      	movs	r0, #0
 800837a:	f04f 0c0a 	mov.w	ip, #10
 800837e:	4621      	mov	r1, r4
 8008380:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008384:	3b30      	subs	r3, #48	@ 0x30
 8008386:	2b09      	cmp	r3, #9
 8008388:	d94b      	bls.n	8008422 <_vfiprintf_r+0x1a2>
 800838a:	b1b0      	cbz	r0, 80083ba <_vfiprintf_r+0x13a>
 800838c:	9207      	str	r2, [sp, #28]
 800838e:	e014      	b.n	80083ba <_vfiprintf_r+0x13a>
 8008390:	eba0 0308 	sub.w	r3, r0, r8
 8008394:	fa09 f303 	lsl.w	r3, r9, r3
 8008398:	4313      	orrs	r3, r2
 800839a:	9304      	str	r3, [sp, #16]
 800839c:	46a2      	mov	sl, r4
 800839e:	e7d2      	b.n	8008346 <_vfiprintf_r+0xc6>
 80083a0:	9b03      	ldr	r3, [sp, #12]
 80083a2:	1d19      	adds	r1, r3, #4
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	9103      	str	r1, [sp, #12]
 80083a8:	2b00      	cmp	r3, #0
 80083aa:	bfbb      	ittet	lt
 80083ac:	425b      	neglt	r3, r3
 80083ae:	f042 0202 	orrlt.w	r2, r2, #2
 80083b2:	9307      	strge	r3, [sp, #28]
 80083b4:	9307      	strlt	r3, [sp, #28]
 80083b6:	bfb8      	it	lt
 80083b8:	9204      	strlt	r2, [sp, #16]
 80083ba:	7823      	ldrb	r3, [r4, #0]
 80083bc:	2b2e      	cmp	r3, #46	@ 0x2e
 80083be:	d10a      	bne.n	80083d6 <_vfiprintf_r+0x156>
 80083c0:	7863      	ldrb	r3, [r4, #1]
 80083c2:	2b2a      	cmp	r3, #42	@ 0x2a
 80083c4:	d132      	bne.n	800842c <_vfiprintf_r+0x1ac>
 80083c6:	9b03      	ldr	r3, [sp, #12]
 80083c8:	1d1a      	adds	r2, r3, #4
 80083ca:	681b      	ldr	r3, [r3, #0]
 80083cc:	9203      	str	r2, [sp, #12]
 80083ce:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80083d2:	3402      	adds	r4, #2
 80083d4:	9305      	str	r3, [sp, #20]
 80083d6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80084ac <_vfiprintf_r+0x22c>
 80083da:	7821      	ldrb	r1, [r4, #0]
 80083dc:	2203      	movs	r2, #3
 80083de:	4650      	mov	r0, sl
 80083e0:	f7f7 fef6 	bl	80001d0 <memchr>
 80083e4:	b138      	cbz	r0, 80083f6 <_vfiprintf_r+0x176>
 80083e6:	9b04      	ldr	r3, [sp, #16]
 80083e8:	eba0 000a 	sub.w	r0, r0, sl
 80083ec:	2240      	movs	r2, #64	@ 0x40
 80083ee:	4082      	lsls	r2, r0
 80083f0:	4313      	orrs	r3, r2
 80083f2:	3401      	adds	r4, #1
 80083f4:	9304      	str	r3, [sp, #16]
 80083f6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80083fa:	4829      	ldr	r0, [pc, #164]	@ (80084a0 <_vfiprintf_r+0x220>)
 80083fc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008400:	2206      	movs	r2, #6
 8008402:	f7f7 fee5 	bl	80001d0 <memchr>
 8008406:	2800      	cmp	r0, #0
 8008408:	d03f      	beq.n	800848a <_vfiprintf_r+0x20a>
 800840a:	4b26      	ldr	r3, [pc, #152]	@ (80084a4 <_vfiprintf_r+0x224>)
 800840c:	bb1b      	cbnz	r3, 8008456 <_vfiprintf_r+0x1d6>
 800840e:	9b03      	ldr	r3, [sp, #12]
 8008410:	3307      	adds	r3, #7
 8008412:	f023 0307 	bic.w	r3, r3, #7
 8008416:	3308      	adds	r3, #8
 8008418:	9303      	str	r3, [sp, #12]
 800841a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800841c:	443b      	add	r3, r7
 800841e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008420:	e76a      	b.n	80082f8 <_vfiprintf_r+0x78>
 8008422:	fb0c 3202 	mla	r2, ip, r2, r3
 8008426:	460c      	mov	r4, r1
 8008428:	2001      	movs	r0, #1
 800842a:	e7a8      	b.n	800837e <_vfiprintf_r+0xfe>
 800842c:	2300      	movs	r3, #0
 800842e:	3401      	adds	r4, #1
 8008430:	9305      	str	r3, [sp, #20]
 8008432:	4619      	mov	r1, r3
 8008434:	f04f 0c0a 	mov.w	ip, #10
 8008438:	4620      	mov	r0, r4
 800843a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800843e:	3a30      	subs	r2, #48	@ 0x30
 8008440:	2a09      	cmp	r2, #9
 8008442:	d903      	bls.n	800844c <_vfiprintf_r+0x1cc>
 8008444:	2b00      	cmp	r3, #0
 8008446:	d0c6      	beq.n	80083d6 <_vfiprintf_r+0x156>
 8008448:	9105      	str	r1, [sp, #20]
 800844a:	e7c4      	b.n	80083d6 <_vfiprintf_r+0x156>
 800844c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008450:	4604      	mov	r4, r0
 8008452:	2301      	movs	r3, #1
 8008454:	e7f0      	b.n	8008438 <_vfiprintf_r+0x1b8>
 8008456:	ab03      	add	r3, sp, #12
 8008458:	9300      	str	r3, [sp, #0]
 800845a:	462a      	mov	r2, r5
 800845c:	4b12      	ldr	r3, [pc, #72]	@ (80084a8 <_vfiprintf_r+0x228>)
 800845e:	a904      	add	r1, sp, #16
 8008460:	4630      	mov	r0, r6
 8008462:	f3af 8000 	nop.w
 8008466:	4607      	mov	r7, r0
 8008468:	1c78      	adds	r0, r7, #1
 800846a:	d1d6      	bne.n	800841a <_vfiprintf_r+0x19a>
 800846c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800846e:	07d9      	lsls	r1, r3, #31
 8008470:	d405      	bmi.n	800847e <_vfiprintf_r+0x1fe>
 8008472:	89ab      	ldrh	r3, [r5, #12]
 8008474:	059a      	lsls	r2, r3, #22
 8008476:	d402      	bmi.n	800847e <_vfiprintf_r+0x1fe>
 8008478:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800847a:	f7ff fdcf 	bl	800801c <__retarget_lock_release_recursive>
 800847e:	89ab      	ldrh	r3, [r5, #12]
 8008480:	065b      	lsls	r3, r3, #25
 8008482:	f53f af1f 	bmi.w	80082c4 <_vfiprintf_r+0x44>
 8008486:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008488:	e71e      	b.n	80082c8 <_vfiprintf_r+0x48>
 800848a:	ab03      	add	r3, sp, #12
 800848c:	9300      	str	r3, [sp, #0]
 800848e:	462a      	mov	r2, r5
 8008490:	4b05      	ldr	r3, [pc, #20]	@ (80084a8 <_vfiprintf_r+0x228>)
 8008492:	a904      	add	r1, sp, #16
 8008494:	4630      	mov	r0, r6
 8008496:	f000 f879 	bl	800858c <_printf_i>
 800849a:	e7e4      	b.n	8008466 <_vfiprintf_r+0x1e6>
 800849c:	0800a894 	.word	0x0800a894
 80084a0:	0800a89e 	.word	0x0800a89e
 80084a4:	00000000 	.word	0x00000000
 80084a8:	0800825b 	.word	0x0800825b
 80084ac:	0800a89a 	.word	0x0800a89a

080084b0 <_printf_common>:
 80084b0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80084b4:	4616      	mov	r6, r2
 80084b6:	4698      	mov	r8, r3
 80084b8:	688a      	ldr	r2, [r1, #8]
 80084ba:	690b      	ldr	r3, [r1, #16]
 80084bc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80084c0:	4293      	cmp	r3, r2
 80084c2:	bfb8      	it	lt
 80084c4:	4613      	movlt	r3, r2
 80084c6:	6033      	str	r3, [r6, #0]
 80084c8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80084cc:	4607      	mov	r7, r0
 80084ce:	460c      	mov	r4, r1
 80084d0:	b10a      	cbz	r2, 80084d6 <_printf_common+0x26>
 80084d2:	3301      	adds	r3, #1
 80084d4:	6033      	str	r3, [r6, #0]
 80084d6:	6823      	ldr	r3, [r4, #0]
 80084d8:	0699      	lsls	r1, r3, #26
 80084da:	bf42      	ittt	mi
 80084dc:	6833      	ldrmi	r3, [r6, #0]
 80084de:	3302      	addmi	r3, #2
 80084e0:	6033      	strmi	r3, [r6, #0]
 80084e2:	6825      	ldr	r5, [r4, #0]
 80084e4:	f015 0506 	ands.w	r5, r5, #6
 80084e8:	d106      	bne.n	80084f8 <_printf_common+0x48>
 80084ea:	f104 0a19 	add.w	sl, r4, #25
 80084ee:	68e3      	ldr	r3, [r4, #12]
 80084f0:	6832      	ldr	r2, [r6, #0]
 80084f2:	1a9b      	subs	r3, r3, r2
 80084f4:	42ab      	cmp	r3, r5
 80084f6:	dc26      	bgt.n	8008546 <_printf_common+0x96>
 80084f8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80084fc:	6822      	ldr	r2, [r4, #0]
 80084fe:	3b00      	subs	r3, #0
 8008500:	bf18      	it	ne
 8008502:	2301      	movne	r3, #1
 8008504:	0692      	lsls	r2, r2, #26
 8008506:	d42b      	bmi.n	8008560 <_printf_common+0xb0>
 8008508:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800850c:	4641      	mov	r1, r8
 800850e:	4638      	mov	r0, r7
 8008510:	47c8      	blx	r9
 8008512:	3001      	adds	r0, #1
 8008514:	d01e      	beq.n	8008554 <_printf_common+0xa4>
 8008516:	6823      	ldr	r3, [r4, #0]
 8008518:	6922      	ldr	r2, [r4, #16]
 800851a:	f003 0306 	and.w	r3, r3, #6
 800851e:	2b04      	cmp	r3, #4
 8008520:	bf02      	ittt	eq
 8008522:	68e5      	ldreq	r5, [r4, #12]
 8008524:	6833      	ldreq	r3, [r6, #0]
 8008526:	1aed      	subeq	r5, r5, r3
 8008528:	68a3      	ldr	r3, [r4, #8]
 800852a:	bf0c      	ite	eq
 800852c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008530:	2500      	movne	r5, #0
 8008532:	4293      	cmp	r3, r2
 8008534:	bfc4      	itt	gt
 8008536:	1a9b      	subgt	r3, r3, r2
 8008538:	18ed      	addgt	r5, r5, r3
 800853a:	2600      	movs	r6, #0
 800853c:	341a      	adds	r4, #26
 800853e:	42b5      	cmp	r5, r6
 8008540:	d11a      	bne.n	8008578 <_printf_common+0xc8>
 8008542:	2000      	movs	r0, #0
 8008544:	e008      	b.n	8008558 <_printf_common+0xa8>
 8008546:	2301      	movs	r3, #1
 8008548:	4652      	mov	r2, sl
 800854a:	4641      	mov	r1, r8
 800854c:	4638      	mov	r0, r7
 800854e:	47c8      	blx	r9
 8008550:	3001      	adds	r0, #1
 8008552:	d103      	bne.n	800855c <_printf_common+0xac>
 8008554:	f04f 30ff 	mov.w	r0, #4294967295
 8008558:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800855c:	3501      	adds	r5, #1
 800855e:	e7c6      	b.n	80084ee <_printf_common+0x3e>
 8008560:	18e1      	adds	r1, r4, r3
 8008562:	1c5a      	adds	r2, r3, #1
 8008564:	2030      	movs	r0, #48	@ 0x30
 8008566:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800856a:	4422      	add	r2, r4
 800856c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008570:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008574:	3302      	adds	r3, #2
 8008576:	e7c7      	b.n	8008508 <_printf_common+0x58>
 8008578:	2301      	movs	r3, #1
 800857a:	4622      	mov	r2, r4
 800857c:	4641      	mov	r1, r8
 800857e:	4638      	mov	r0, r7
 8008580:	47c8      	blx	r9
 8008582:	3001      	adds	r0, #1
 8008584:	d0e6      	beq.n	8008554 <_printf_common+0xa4>
 8008586:	3601      	adds	r6, #1
 8008588:	e7d9      	b.n	800853e <_printf_common+0x8e>
	...

0800858c <_printf_i>:
 800858c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008590:	7e0f      	ldrb	r7, [r1, #24]
 8008592:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008594:	2f78      	cmp	r7, #120	@ 0x78
 8008596:	4691      	mov	r9, r2
 8008598:	4680      	mov	r8, r0
 800859a:	460c      	mov	r4, r1
 800859c:	469a      	mov	sl, r3
 800859e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80085a2:	d807      	bhi.n	80085b4 <_printf_i+0x28>
 80085a4:	2f62      	cmp	r7, #98	@ 0x62
 80085a6:	d80a      	bhi.n	80085be <_printf_i+0x32>
 80085a8:	2f00      	cmp	r7, #0
 80085aa:	f000 80d1 	beq.w	8008750 <_printf_i+0x1c4>
 80085ae:	2f58      	cmp	r7, #88	@ 0x58
 80085b0:	f000 80b8 	beq.w	8008724 <_printf_i+0x198>
 80085b4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80085b8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80085bc:	e03a      	b.n	8008634 <_printf_i+0xa8>
 80085be:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80085c2:	2b15      	cmp	r3, #21
 80085c4:	d8f6      	bhi.n	80085b4 <_printf_i+0x28>
 80085c6:	a101      	add	r1, pc, #4	@ (adr r1, 80085cc <_printf_i+0x40>)
 80085c8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80085cc:	08008625 	.word	0x08008625
 80085d0:	08008639 	.word	0x08008639
 80085d4:	080085b5 	.word	0x080085b5
 80085d8:	080085b5 	.word	0x080085b5
 80085dc:	080085b5 	.word	0x080085b5
 80085e0:	080085b5 	.word	0x080085b5
 80085e4:	08008639 	.word	0x08008639
 80085e8:	080085b5 	.word	0x080085b5
 80085ec:	080085b5 	.word	0x080085b5
 80085f0:	080085b5 	.word	0x080085b5
 80085f4:	080085b5 	.word	0x080085b5
 80085f8:	08008737 	.word	0x08008737
 80085fc:	08008663 	.word	0x08008663
 8008600:	080086f1 	.word	0x080086f1
 8008604:	080085b5 	.word	0x080085b5
 8008608:	080085b5 	.word	0x080085b5
 800860c:	08008759 	.word	0x08008759
 8008610:	080085b5 	.word	0x080085b5
 8008614:	08008663 	.word	0x08008663
 8008618:	080085b5 	.word	0x080085b5
 800861c:	080085b5 	.word	0x080085b5
 8008620:	080086f9 	.word	0x080086f9
 8008624:	6833      	ldr	r3, [r6, #0]
 8008626:	1d1a      	adds	r2, r3, #4
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	6032      	str	r2, [r6, #0]
 800862c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008630:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008634:	2301      	movs	r3, #1
 8008636:	e09c      	b.n	8008772 <_printf_i+0x1e6>
 8008638:	6833      	ldr	r3, [r6, #0]
 800863a:	6820      	ldr	r0, [r4, #0]
 800863c:	1d19      	adds	r1, r3, #4
 800863e:	6031      	str	r1, [r6, #0]
 8008640:	0606      	lsls	r6, r0, #24
 8008642:	d501      	bpl.n	8008648 <_printf_i+0xbc>
 8008644:	681d      	ldr	r5, [r3, #0]
 8008646:	e003      	b.n	8008650 <_printf_i+0xc4>
 8008648:	0645      	lsls	r5, r0, #25
 800864a:	d5fb      	bpl.n	8008644 <_printf_i+0xb8>
 800864c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008650:	2d00      	cmp	r5, #0
 8008652:	da03      	bge.n	800865c <_printf_i+0xd0>
 8008654:	232d      	movs	r3, #45	@ 0x2d
 8008656:	426d      	negs	r5, r5
 8008658:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800865c:	4858      	ldr	r0, [pc, #352]	@ (80087c0 <_printf_i+0x234>)
 800865e:	230a      	movs	r3, #10
 8008660:	e011      	b.n	8008686 <_printf_i+0xfa>
 8008662:	6821      	ldr	r1, [r4, #0]
 8008664:	6833      	ldr	r3, [r6, #0]
 8008666:	0608      	lsls	r0, r1, #24
 8008668:	f853 5b04 	ldr.w	r5, [r3], #4
 800866c:	d402      	bmi.n	8008674 <_printf_i+0xe8>
 800866e:	0649      	lsls	r1, r1, #25
 8008670:	bf48      	it	mi
 8008672:	b2ad      	uxthmi	r5, r5
 8008674:	2f6f      	cmp	r7, #111	@ 0x6f
 8008676:	4852      	ldr	r0, [pc, #328]	@ (80087c0 <_printf_i+0x234>)
 8008678:	6033      	str	r3, [r6, #0]
 800867a:	bf14      	ite	ne
 800867c:	230a      	movne	r3, #10
 800867e:	2308      	moveq	r3, #8
 8008680:	2100      	movs	r1, #0
 8008682:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008686:	6866      	ldr	r6, [r4, #4]
 8008688:	60a6      	str	r6, [r4, #8]
 800868a:	2e00      	cmp	r6, #0
 800868c:	db05      	blt.n	800869a <_printf_i+0x10e>
 800868e:	6821      	ldr	r1, [r4, #0]
 8008690:	432e      	orrs	r6, r5
 8008692:	f021 0104 	bic.w	r1, r1, #4
 8008696:	6021      	str	r1, [r4, #0]
 8008698:	d04b      	beq.n	8008732 <_printf_i+0x1a6>
 800869a:	4616      	mov	r6, r2
 800869c:	fbb5 f1f3 	udiv	r1, r5, r3
 80086a0:	fb03 5711 	mls	r7, r3, r1, r5
 80086a4:	5dc7      	ldrb	r7, [r0, r7]
 80086a6:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80086aa:	462f      	mov	r7, r5
 80086ac:	42bb      	cmp	r3, r7
 80086ae:	460d      	mov	r5, r1
 80086b0:	d9f4      	bls.n	800869c <_printf_i+0x110>
 80086b2:	2b08      	cmp	r3, #8
 80086b4:	d10b      	bne.n	80086ce <_printf_i+0x142>
 80086b6:	6823      	ldr	r3, [r4, #0]
 80086b8:	07df      	lsls	r7, r3, #31
 80086ba:	d508      	bpl.n	80086ce <_printf_i+0x142>
 80086bc:	6923      	ldr	r3, [r4, #16]
 80086be:	6861      	ldr	r1, [r4, #4]
 80086c0:	4299      	cmp	r1, r3
 80086c2:	bfde      	ittt	le
 80086c4:	2330      	movle	r3, #48	@ 0x30
 80086c6:	f806 3c01 	strble.w	r3, [r6, #-1]
 80086ca:	f106 36ff 	addle.w	r6, r6, #4294967295
 80086ce:	1b92      	subs	r2, r2, r6
 80086d0:	6122      	str	r2, [r4, #16]
 80086d2:	f8cd a000 	str.w	sl, [sp]
 80086d6:	464b      	mov	r3, r9
 80086d8:	aa03      	add	r2, sp, #12
 80086da:	4621      	mov	r1, r4
 80086dc:	4640      	mov	r0, r8
 80086de:	f7ff fee7 	bl	80084b0 <_printf_common>
 80086e2:	3001      	adds	r0, #1
 80086e4:	d14a      	bne.n	800877c <_printf_i+0x1f0>
 80086e6:	f04f 30ff 	mov.w	r0, #4294967295
 80086ea:	b004      	add	sp, #16
 80086ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80086f0:	6823      	ldr	r3, [r4, #0]
 80086f2:	f043 0320 	orr.w	r3, r3, #32
 80086f6:	6023      	str	r3, [r4, #0]
 80086f8:	4832      	ldr	r0, [pc, #200]	@ (80087c4 <_printf_i+0x238>)
 80086fa:	2778      	movs	r7, #120	@ 0x78
 80086fc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8008700:	6823      	ldr	r3, [r4, #0]
 8008702:	6831      	ldr	r1, [r6, #0]
 8008704:	061f      	lsls	r7, r3, #24
 8008706:	f851 5b04 	ldr.w	r5, [r1], #4
 800870a:	d402      	bmi.n	8008712 <_printf_i+0x186>
 800870c:	065f      	lsls	r7, r3, #25
 800870e:	bf48      	it	mi
 8008710:	b2ad      	uxthmi	r5, r5
 8008712:	6031      	str	r1, [r6, #0]
 8008714:	07d9      	lsls	r1, r3, #31
 8008716:	bf44      	itt	mi
 8008718:	f043 0320 	orrmi.w	r3, r3, #32
 800871c:	6023      	strmi	r3, [r4, #0]
 800871e:	b11d      	cbz	r5, 8008728 <_printf_i+0x19c>
 8008720:	2310      	movs	r3, #16
 8008722:	e7ad      	b.n	8008680 <_printf_i+0xf4>
 8008724:	4826      	ldr	r0, [pc, #152]	@ (80087c0 <_printf_i+0x234>)
 8008726:	e7e9      	b.n	80086fc <_printf_i+0x170>
 8008728:	6823      	ldr	r3, [r4, #0]
 800872a:	f023 0320 	bic.w	r3, r3, #32
 800872e:	6023      	str	r3, [r4, #0]
 8008730:	e7f6      	b.n	8008720 <_printf_i+0x194>
 8008732:	4616      	mov	r6, r2
 8008734:	e7bd      	b.n	80086b2 <_printf_i+0x126>
 8008736:	6833      	ldr	r3, [r6, #0]
 8008738:	6825      	ldr	r5, [r4, #0]
 800873a:	6961      	ldr	r1, [r4, #20]
 800873c:	1d18      	adds	r0, r3, #4
 800873e:	6030      	str	r0, [r6, #0]
 8008740:	062e      	lsls	r6, r5, #24
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	d501      	bpl.n	800874a <_printf_i+0x1be>
 8008746:	6019      	str	r1, [r3, #0]
 8008748:	e002      	b.n	8008750 <_printf_i+0x1c4>
 800874a:	0668      	lsls	r0, r5, #25
 800874c:	d5fb      	bpl.n	8008746 <_printf_i+0x1ba>
 800874e:	8019      	strh	r1, [r3, #0]
 8008750:	2300      	movs	r3, #0
 8008752:	6123      	str	r3, [r4, #16]
 8008754:	4616      	mov	r6, r2
 8008756:	e7bc      	b.n	80086d2 <_printf_i+0x146>
 8008758:	6833      	ldr	r3, [r6, #0]
 800875a:	1d1a      	adds	r2, r3, #4
 800875c:	6032      	str	r2, [r6, #0]
 800875e:	681e      	ldr	r6, [r3, #0]
 8008760:	6862      	ldr	r2, [r4, #4]
 8008762:	2100      	movs	r1, #0
 8008764:	4630      	mov	r0, r6
 8008766:	f7f7 fd33 	bl	80001d0 <memchr>
 800876a:	b108      	cbz	r0, 8008770 <_printf_i+0x1e4>
 800876c:	1b80      	subs	r0, r0, r6
 800876e:	6060      	str	r0, [r4, #4]
 8008770:	6863      	ldr	r3, [r4, #4]
 8008772:	6123      	str	r3, [r4, #16]
 8008774:	2300      	movs	r3, #0
 8008776:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800877a:	e7aa      	b.n	80086d2 <_printf_i+0x146>
 800877c:	6923      	ldr	r3, [r4, #16]
 800877e:	4632      	mov	r2, r6
 8008780:	4649      	mov	r1, r9
 8008782:	4640      	mov	r0, r8
 8008784:	47d0      	blx	sl
 8008786:	3001      	adds	r0, #1
 8008788:	d0ad      	beq.n	80086e6 <_printf_i+0x15a>
 800878a:	6823      	ldr	r3, [r4, #0]
 800878c:	079b      	lsls	r3, r3, #30
 800878e:	d413      	bmi.n	80087b8 <_printf_i+0x22c>
 8008790:	68e0      	ldr	r0, [r4, #12]
 8008792:	9b03      	ldr	r3, [sp, #12]
 8008794:	4298      	cmp	r0, r3
 8008796:	bfb8      	it	lt
 8008798:	4618      	movlt	r0, r3
 800879a:	e7a6      	b.n	80086ea <_printf_i+0x15e>
 800879c:	2301      	movs	r3, #1
 800879e:	4632      	mov	r2, r6
 80087a0:	4649      	mov	r1, r9
 80087a2:	4640      	mov	r0, r8
 80087a4:	47d0      	blx	sl
 80087a6:	3001      	adds	r0, #1
 80087a8:	d09d      	beq.n	80086e6 <_printf_i+0x15a>
 80087aa:	3501      	adds	r5, #1
 80087ac:	68e3      	ldr	r3, [r4, #12]
 80087ae:	9903      	ldr	r1, [sp, #12]
 80087b0:	1a5b      	subs	r3, r3, r1
 80087b2:	42ab      	cmp	r3, r5
 80087b4:	dcf2      	bgt.n	800879c <_printf_i+0x210>
 80087b6:	e7eb      	b.n	8008790 <_printf_i+0x204>
 80087b8:	2500      	movs	r5, #0
 80087ba:	f104 0619 	add.w	r6, r4, #25
 80087be:	e7f5      	b.n	80087ac <_printf_i+0x220>
 80087c0:	0800a8a5 	.word	0x0800a8a5
 80087c4:	0800a8b6 	.word	0x0800a8b6

080087c8 <__sflush_r>:
 80087c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087d0:	0716      	lsls	r6, r2, #28
 80087d2:	4605      	mov	r5, r0
 80087d4:	460c      	mov	r4, r1
 80087d6:	d454      	bmi.n	8008882 <__sflush_r+0xba>
 80087d8:	684b      	ldr	r3, [r1, #4]
 80087da:	2b00      	cmp	r3, #0
 80087dc:	dc02      	bgt.n	80087e4 <__sflush_r+0x1c>
 80087de:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	dd48      	ble.n	8008876 <__sflush_r+0xae>
 80087e4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80087e6:	2e00      	cmp	r6, #0
 80087e8:	d045      	beq.n	8008876 <__sflush_r+0xae>
 80087ea:	2300      	movs	r3, #0
 80087ec:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80087f0:	682f      	ldr	r7, [r5, #0]
 80087f2:	6a21      	ldr	r1, [r4, #32]
 80087f4:	602b      	str	r3, [r5, #0]
 80087f6:	d030      	beq.n	800885a <__sflush_r+0x92>
 80087f8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80087fa:	89a3      	ldrh	r3, [r4, #12]
 80087fc:	0759      	lsls	r1, r3, #29
 80087fe:	d505      	bpl.n	800880c <__sflush_r+0x44>
 8008800:	6863      	ldr	r3, [r4, #4]
 8008802:	1ad2      	subs	r2, r2, r3
 8008804:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008806:	b10b      	cbz	r3, 800880c <__sflush_r+0x44>
 8008808:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800880a:	1ad2      	subs	r2, r2, r3
 800880c:	2300      	movs	r3, #0
 800880e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008810:	6a21      	ldr	r1, [r4, #32]
 8008812:	4628      	mov	r0, r5
 8008814:	47b0      	blx	r6
 8008816:	1c43      	adds	r3, r0, #1
 8008818:	89a3      	ldrh	r3, [r4, #12]
 800881a:	d106      	bne.n	800882a <__sflush_r+0x62>
 800881c:	6829      	ldr	r1, [r5, #0]
 800881e:	291d      	cmp	r1, #29
 8008820:	d82b      	bhi.n	800887a <__sflush_r+0xb2>
 8008822:	4a2a      	ldr	r2, [pc, #168]	@ (80088cc <__sflush_r+0x104>)
 8008824:	40ca      	lsrs	r2, r1
 8008826:	07d6      	lsls	r6, r2, #31
 8008828:	d527      	bpl.n	800887a <__sflush_r+0xb2>
 800882a:	2200      	movs	r2, #0
 800882c:	6062      	str	r2, [r4, #4]
 800882e:	04d9      	lsls	r1, r3, #19
 8008830:	6922      	ldr	r2, [r4, #16]
 8008832:	6022      	str	r2, [r4, #0]
 8008834:	d504      	bpl.n	8008840 <__sflush_r+0x78>
 8008836:	1c42      	adds	r2, r0, #1
 8008838:	d101      	bne.n	800883e <__sflush_r+0x76>
 800883a:	682b      	ldr	r3, [r5, #0]
 800883c:	b903      	cbnz	r3, 8008840 <__sflush_r+0x78>
 800883e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008840:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008842:	602f      	str	r7, [r5, #0]
 8008844:	b1b9      	cbz	r1, 8008876 <__sflush_r+0xae>
 8008846:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800884a:	4299      	cmp	r1, r3
 800884c:	d002      	beq.n	8008854 <__sflush_r+0x8c>
 800884e:	4628      	mov	r0, r5
 8008850:	f7ff fbf4 	bl	800803c <_free_r>
 8008854:	2300      	movs	r3, #0
 8008856:	6363      	str	r3, [r4, #52]	@ 0x34
 8008858:	e00d      	b.n	8008876 <__sflush_r+0xae>
 800885a:	2301      	movs	r3, #1
 800885c:	4628      	mov	r0, r5
 800885e:	47b0      	blx	r6
 8008860:	4602      	mov	r2, r0
 8008862:	1c50      	adds	r0, r2, #1
 8008864:	d1c9      	bne.n	80087fa <__sflush_r+0x32>
 8008866:	682b      	ldr	r3, [r5, #0]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d0c6      	beq.n	80087fa <__sflush_r+0x32>
 800886c:	2b1d      	cmp	r3, #29
 800886e:	d001      	beq.n	8008874 <__sflush_r+0xac>
 8008870:	2b16      	cmp	r3, #22
 8008872:	d11e      	bne.n	80088b2 <__sflush_r+0xea>
 8008874:	602f      	str	r7, [r5, #0]
 8008876:	2000      	movs	r0, #0
 8008878:	e022      	b.n	80088c0 <__sflush_r+0xf8>
 800887a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800887e:	b21b      	sxth	r3, r3
 8008880:	e01b      	b.n	80088ba <__sflush_r+0xf2>
 8008882:	690f      	ldr	r7, [r1, #16]
 8008884:	2f00      	cmp	r7, #0
 8008886:	d0f6      	beq.n	8008876 <__sflush_r+0xae>
 8008888:	0793      	lsls	r3, r2, #30
 800888a:	680e      	ldr	r6, [r1, #0]
 800888c:	bf08      	it	eq
 800888e:	694b      	ldreq	r3, [r1, #20]
 8008890:	600f      	str	r7, [r1, #0]
 8008892:	bf18      	it	ne
 8008894:	2300      	movne	r3, #0
 8008896:	eba6 0807 	sub.w	r8, r6, r7
 800889a:	608b      	str	r3, [r1, #8]
 800889c:	f1b8 0f00 	cmp.w	r8, #0
 80088a0:	dde9      	ble.n	8008876 <__sflush_r+0xae>
 80088a2:	6a21      	ldr	r1, [r4, #32]
 80088a4:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088a6:	4643      	mov	r3, r8
 80088a8:	463a      	mov	r2, r7
 80088aa:	4628      	mov	r0, r5
 80088ac:	47b0      	blx	r6
 80088ae:	2800      	cmp	r0, #0
 80088b0:	dc08      	bgt.n	80088c4 <__sflush_r+0xfc>
 80088b2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088b6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088ba:	81a3      	strh	r3, [r4, #12]
 80088bc:	f04f 30ff 	mov.w	r0, #4294967295
 80088c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088c4:	4407      	add	r7, r0
 80088c6:	eba8 0800 	sub.w	r8, r8, r0
 80088ca:	e7e7      	b.n	800889c <__sflush_r+0xd4>
 80088cc:	20400001 	.word	0x20400001

080088d0 <_fflush_r>:
 80088d0:	b538      	push	{r3, r4, r5, lr}
 80088d2:	690b      	ldr	r3, [r1, #16]
 80088d4:	4605      	mov	r5, r0
 80088d6:	460c      	mov	r4, r1
 80088d8:	b913      	cbnz	r3, 80088e0 <_fflush_r+0x10>
 80088da:	2500      	movs	r5, #0
 80088dc:	4628      	mov	r0, r5
 80088de:	bd38      	pop	{r3, r4, r5, pc}
 80088e0:	b118      	cbz	r0, 80088ea <_fflush_r+0x1a>
 80088e2:	6a03      	ldr	r3, [r0, #32]
 80088e4:	b90b      	cbnz	r3, 80088ea <_fflush_r+0x1a>
 80088e6:	f7ff f933 	bl	8007b50 <__sinit>
 80088ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088ee:	2b00      	cmp	r3, #0
 80088f0:	d0f3      	beq.n	80088da <_fflush_r+0xa>
 80088f2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80088f4:	07d0      	lsls	r0, r2, #31
 80088f6:	d404      	bmi.n	8008902 <_fflush_r+0x32>
 80088f8:	0599      	lsls	r1, r3, #22
 80088fa:	d402      	bmi.n	8008902 <_fflush_r+0x32>
 80088fc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80088fe:	f7ff fb8c 	bl	800801a <__retarget_lock_acquire_recursive>
 8008902:	4628      	mov	r0, r5
 8008904:	4621      	mov	r1, r4
 8008906:	f7ff ff5f 	bl	80087c8 <__sflush_r>
 800890a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800890c:	07da      	lsls	r2, r3, #31
 800890e:	4605      	mov	r5, r0
 8008910:	d4e4      	bmi.n	80088dc <_fflush_r+0xc>
 8008912:	89a3      	ldrh	r3, [r4, #12]
 8008914:	059b      	lsls	r3, r3, #22
 8008916:	d4e1      	bmi.n	80088dc <_fflush_r+0xc>
 8008918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800891a:	f7ff fb7f 	bl	800801c <__retarget_lock_release_recursive>
 800891e:	e7dd      	b.n	80088dc <_fflush_r+0xc>

08008920 <__swhatbuf_r>:
 8008920:	b570      	push	{r4, r5, r6, lr}
 8008922:	460c      	mov	r4, r1
 8008924:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008928:	2900      	cmp	r1, #0
 800892a:	b096      	sub	sp, #88	@ 0x58
 800892c:	4615      	mov	r5, r2
 800892e:	461e      	mov	r6, r3
 8008930:	da0d      	bge.n	800894e <__swhatbuf_r+0x2e>
 8008932:	89a3      	ldrh	r3, [r4, #12]
 8008934:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008938:	f04f 0100 	mov.w	r1, #0
 800893c:	bf14      	ite	ne
 800893e:	2340      	movne	r3, #64	@ 0x40
 8008940:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008944:	2000      	movs	r0, #0
 8008946:	6031      	str	r1, [r6, #0]
 8008948:	602b      	str	r3, [r5, #0]
 800894a:	b016      	add	sp, #88	@ 0x58
 800894c:	bd70      	pop	{r4, r5, r6, pc}
 800894e:	466a      	mov	r2, sp
 8008950:	f000 f848 	bl	80089e4 <_fstat_r>
 8008954:	2800      	cmp	r0, #0
 8008956:	dbec      	blt.n	8008932 <__swhatbuf_r+0x12>
 8008958:	9901      	ldr	r1, [sp, #4]
 800895a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800895e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008962:	4259      	negs	r1, r3
 8008964:	4159      	adcs	r1, r3
 8008966:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800896a:	e7eb      	b.n	8008944 <__swhatbuf_r+0x24>

0800896c <__smakebuf_r>:
 800896c:	898b      	ldrh	r3, [r1, #12]
 800896e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008970:	079d      	lsls	r5, r3, #30
 8008972:	4606      	mov	r6, r0
 8008974:	460c      	mov	r4, r1
 8008976:	d507      	bpl.n	8008988 <__smakebuf_r+0x1c>
 8008978:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800897c:	6023      	str	r3, [r4, #0]
 800897e:	6123      	str	r3, [r4, #16]
 8008980:	2301      	movs	r3, #1
 8008982:	6163      	str	r3, [r4, #20]
 8008984:	b003      	add	sp, #12
 8008986:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008988:	ab01      	add	r3, sp, #4
 800898a:	466a      	mov	r2, sp
 800898c:	f7ff ffc8 	bl	8008920 <__swhatbuf_r>
 8008990:	9f00      	ldr	r7, [sp, #0]
 8008992:	4605      	mov	r5, r0
 8008994:	4639      	mov	r1, r7
 8008996:	4630      	mov	r0, r6
 8008998:	f7ff fbbc 	bl	8008114 <_malloc_r>
 800899c:	b948      	cbnz	r0, 80089b2 <__smakebuf_r+0x46>
 800899e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089a2:	059a      	lsls	r2, r3, #22
 80089a4:	d4ee      	bmi.n	8008984 <__smakebuf_r+0x18>
 80089a6:	f023 0303 	bic.w	r3, r3, #3
 80089aa:	f043 0302 	orr.w	r3, r3, #2
 80089ae:	81a3      	strh	r3, [r4, #12]
 80089b0:	e7e2      	b.n	8008978 <__smakebuf_r+0xc>
 80089b2:	89a3      	ldrh	r3, [r4, #12]
 80089b4:	6020      	str	r0, [r4, #0]
 80089b6:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089ba:	81a3      	strh	r3, [r4, #12]
 80089bc:	9b01      	ldr	r3, [sp, #4]
 80089be:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089c2:	b15b      	cbz	r3, 80089dc <__smakebuf_r+0x70>
 80089c4:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089c8:	4630      	mov	r0, r6
 80089ca:	f000 f81d 	bl	8008a08 <_isatty_r>
 80089ce:	b128      	cbz	r0, 80089dc <__smakebuf_r+0x70>
 80089d0:	89a3      	ldrh	r3, [r4, #12]
 80089d2:	f023 0303 	bic.w	r3, r3, #3
 80089d6:	f043 0301 	orr.w	r3, r3, #1
 80089da:	81a3      	strh	r3, [r4, #12]
 80089dc:	89a3      	ldrh	r3, [r4, #12]
 80089de:	431d      	orrs	r5, r3
 80089e0:	81a5      	strh	r5, [r4, #12]
 80089e2:	e7cf      	b.n	8008984 <__smakebuf_r+0x18>

080089e4 <_fstat_r>:
 80089e4:	b538      	push	{r3, r4, r5, lr}
 80089e6:	4d07      	ldr	r5, [pc, #28]	@ (8008a04 <_fstat_r+0x20>)
 80089e8:	2300      	movs	r3, #0
 80089ea:	4604      	mov	r4, r0
 80089ec:	4608      	mov	r0, r1
 80089ee:	4611      	mov	r1, r2
 80089f0:	602b      	str	r3, [r5, #0]
 80089f2:	f7f9 fe58 	bl	80026a6 <_fstat>
 80089f6:	1c43      	adds	r3, r0, #1
 80089f8:	d102      	bne.n	8008a00 <_fstat_r+0x1c>
 80089fa:	682b      	ldr	r3, [r5, #0]
 80089fc:	b103      	cbz	r3, 8008a00 <_fstat_r+0x1c>
 80089fe:	6023      	str	r3, [r4, #0]
 8008a00:	bd38      	pop	{r3, r4, r5, pc}
 8008a02:	bf00      	nop
 8008a04:	20004cc4 	.word	0x20004cc4

08008a08 <_isatty_r>:
 8008a08:	b538      	push	{r3, r4, r5, lr}
 8008a0a:	4d06      	ldr	r5, [pc, #24]	@ (8008a24 <_isatty_r+0x1c>)
 8008a0c:	2300      	movs	r3, #0
 8008a0e:	4604      	mov	r4, r0
 8008a10:	4608      	mov	r0, r1
 8008a12:	602b      	str	r3, [r5, #0]
 8008a14:	f7f9 fe57 	bl	80026c6 <_isatty>
 8008a18:	1c43      	adds	r3, r0, #1
 8008a1a:	d102      	bne.n	8008a22 <_isatty_r+0x1a>
 8008a1c:	682b      	ldr	r3, [r5, #0]
 8008a1e:	b103      	cbz	r3, 8008a22 <_isatty_r+0x1a>
 8008a20:	6023      	str	r3, [r4, #0]
 8008a22:	bd38      	pop	{r3, r4, r5, pc}
 8008a24:	20004cc4 	.word	0x20004cc4

08008a28 <_sbrk_r>:
 8008a28:	b538      	push	{r3, r4, r5, lr}
 8008a2a:	4d06      	ldr	r5, [pc, #24]	@ (8008a44 <_sbrk_r+0x1c>)
 8008a2c:	2300      	movs	r3, #0
 8008a2e:	4604      	mov	r4, r0
 8008a30:	4608      	mov	r0, r1
 8008a32:	602b      	str	r3, [r5, #0]
 8008a34:	f7f9 fe60 	bl	80026f8 <_sbrk>
 8008a38:	1c43      	adds	r3, r0, #1
 8008a3a:	d102      	bne.n	8008a42 <_sbrk_r+0x1a>
 8008a3c:	682b      	ldr	r3, [r5, #0]
 8008a3e:	b103      	cbz	r3, 8008a42 <_sbrk_r+0x1a>
 8008a40:	6023      	str	r3, [r4, #0]
 8008a42:	bd38      	pop	{r3, r4, r5, pc}
 8008a44:	20004cc4 	.word	0x20004cc4

08008a48 <_init>:
 8008a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a4a:	bf00      	nop
 8008a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a4e:	bc08      	pop	{r3}
 8008a50:	469e      	mov	lr, r3
 8008a52:	4770      	bx	lr

08008a54 <_fini>:
 8008a54:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008a56:	bf00      	nop
 8008a58:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008a5a:	bc08      	pop	{r3}
 8008a5c:	469e      	mov	lr, r3
 8008a5e:	4770      	bx	lr
