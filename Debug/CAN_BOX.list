
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000085a0  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001898  08008730  08008730  00009730  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fc8  08009fc8  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fc8  08009fc8  0000afc8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fd0  08009fd0  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fd0  08009fd0  0000afd0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fd4  08009fd4  0000afd4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009fd8  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004c64  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004cd0  20004cd0  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001b894  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00003c7f  00000000  00000000  00026930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001858  00000000  00000000  0002a5b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000012f7  00000000  00000000  0002be08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00024f88  00000000  00000000  0002d0ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001a86c  00000000  00000000  00052087  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000da6ca  00000000  00000000  0006c8f3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00146fbd  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00006e9c  00000000  00000000  00147000  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0014de9c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	08008718 	.word	0x08008718

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	08008718 	.word	0x08008718

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <CAN_App_Init>:
  * @brief  CAN应用初始化
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
    // 初始化MCP2515 (500Kbps波特率)
    if (MCP2515_Init(MCP2515_BAUD_500K) != MCP2515_OK) {
 80005a0:	2002      	movs	r0, #2
 80005a2:	f000 ff21 	bl	80013e8 <MCP2515_Init>
 80005a6:	4603      	mov	r3, r0
 80005a8:	2b00      	cmp	r3, #0
 80005aa:	d004      	beq.n	80005b6 <CAN_App_Init+0x1a>
        printf("MCP2515 initialization failed!\r\n");
 80005ac:	480e      	ldr	r0, [pc, #56]	@ (80005e8 <CAN_App_Init+0x4c>)
 80005ae:	f007 f9d5 	bl	800795c <puts>
        return CAN_APP_ERROR;
 80005b2:	2301      	movs	r3, #1
 80005b4:	e015      	b.n	80005e2 <CAN_App_Init+0x46>
    }
    
    printf("MCP2515 initialization successful!\r\n");
 80005b6:	480d      	ldr	r0, [pc, #52]	@ (80005ec <CAN_App_Init+0x50>)
 80005b8:	f007 f9d0 	bl	800795c <puts>
    
    // 配置接收过滤器 (接收所有消息)
    MCP2515_SetMask(0, 0x00000000, 0);  // 掩码0: 接收所有标准帧
 80005bc:	2200      	movs	r2, #0
 80005be:	2100      	movs	r1, #0
 80005c0:	2000      	movs	r0, #0
 80005c2:	f000 ff53 	bl	800146c <MCP2515_SetMask>
    MCP2515_SetMask(1, 0x00000000, 0);  // 掩码1: 接收所有标准帧
 80005c6:	2200      	movs	r2, #0
 80005c8:	2100      	movs	r1, #0
 80005ca:	2001      	movs	r0, #1
 80005cc:	f000 ff4e 	bl	800146c <MCP2515_SetMask>
    
    // 打印初始状态
    MCP2515_PrintStatus();
 80005d0:	f001 f8e8 	bl	80017a4 <MCP2515_PrintStatus>
    
    can_app_initialized = 1;
 80005d4:	4b06      	ldr	r3, [pc, #24]	@ (80005f0 <CAN_App_Init+0x54>)
 80005d6:	2201      	movs	r2, #1
 80005d8:	701a      	strb	r2, [r3, #0]
    
    printf("CAN application initialization completed!\r\n");
 80005da:	4806      	ldr	r0, [pc, #24]	@ (80005f4 <CAN_App_Init+0x58>)
 80005dc:	f007 f9be 	bl	800795c <puts>
    return CAN_APP_OK;
 80005e0:	2300      	movs	r3, #0
}
 80005e2:	4618      	mov	r0, r3
 80005e4:	bd80      	pop	{r7, pc}
 80005e6:	bf00      	nop
 80005e8:	08008730 	.word	0x08008730
 80005ec:	08008750 	.word	0x08008750
 80005f0:	20000094 	.word	0x20000094
 80005f4:	08008774 	.word	0x08008774

080005f8 <CAN_App_GetStats>:
  * @brief  获取CAN应用统计信息
  * @param  stats: 统计信息结构体指针
  * @retval None
  */
void CAN_App_GetStats(CAN_App_Stats_t *stats)
{
 80005f8:	b480      	push	{r7}
 80005fa:	b083      	sub	sp, #12
 80005fc:	af00      	add	r7, sp, #0
 80005fe:	6078      	str	r0, [r7, #4]
    if (stats != NULL) {
 8000600:	687b      	ldr	r3, [r7, #4]
 8000602:	2b00      	cmp	r3, #0
 8000604:	d00f      	beq.n	8000626 <CAN_App_GetStats+0x2e>
        stats->tx_count = can_tx_counter;
 8000606:	4b0b      	ldr	r3, [pc, #44]	@ (8000634 <CAN_App_GetStats+0x3c>)
 8000608:	681a      	ldr	r2, [r3, #0]
 800060a:	687b      	ldr	r3, [r7, #4]
 800060c:	601a      	str	r2, [r3, #0]
        stats->rx_count = can_rx_counter;
 800060e:	4b0a      	ldr	r3, [pc, #40]	@ (8000638 <CAN_App_GetStats+0x40>)
 8000610:	681a      	ldr	r2, [r3, #0]
 8000612:	687b      	ldr	r3, [r7, #4]
 8000614:	605a      	str	r2, [r3, #4]
        stats->error_count = can_error_counter;
 8000616:	4b09      	ldr	r3, [pc, #36]	@ (800063c <CAN_App_GetStats+0x44>)
 8000618:	681a      	ldr	r2, [r3, #0]
 800061a:	687b      	ldr	r3, [r7, #4]
 800061c:	609a      	str	r2, [r3, #8]
        stats->initialized = can_app_initialized;
 800061e:	4b08      	ldr	r3, [pc, #32]	@ (8000640 <CAN_App_GetStats+0x48>)
 8000620:	781a      	ldrb	r2, [r3, #0]
 8000622:	687b      	ldr	r3, [r7, #4]
 8000624:	751a      	strb	r2, [r3, #20]
    }
}
 8000626:	bf00      	nop
 8000628:	370c      	adds	r7, #12
 800062a:	46bd      	mov	sp, r7
 800062c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000630:	4770      	bx	lr
 8000632:	bf00      	nop
 8000634:	20000088 	.word	0x20000088
 8000638:	2000008c 	.word	0x2000008c
 800063c:	20000090 	.word	0x20000090
 8000640:	20000094 	.word	0x20000094

08000644 <CAN_SendTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANSendTask中调用
  */
void CAN_SendTask_Main(void *argument)
{
 8000644:	b580      	push	{r7, lr}
 8000646:	b08c      	sub	sp, #48	@ 0x30
 8000648:	af00      	add	r7, sp, #0
 800064a:	6078      	str	r0, [r7, #4]
    uint32_t last_heartbeat = 0;
 800064c:	2300      	movs	r3, #0
 800064e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t last_data_send = 0;
 8000650:	2300      	movs	r3, #0
 8000652:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t current_time;
    
    printf("CAN send task started\r\n");
 8000654:	4826      	ldr	r0, [pc, #152]	@ (80006f0 <CAN_SendTask_Main+0xac>)
 8000656:	f007 f981 	bl	800795c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 800065a:	e002      	b.n	8000662 <CAN_SendTask_Main+0x1e>
        osDelay(100);
 800065c:	2064      	movs	r0, #100	@ 0x64
 800065e:	f004 f9ef 	bl	8004a40 <osDelay>
    while (!can_app_initialized) {
 8000662:	4b24      	ldr	r3, [pc, #144]	@ (80006f4 <CAN_SendTask_Main+0xb0>)
 8000664:	781b      	ldrb	r3, [r3, #0]
 8000666:	2b00      	cmp	r3, #0
 8000668:	d0f8      	beq.n	800065c <CAN_SendTask_Main+0x18>
    }
    
    for (;;) {
        current_time = HAL_GetTick();
 800066a:	f001 ff51 	bl	8002510 <HAL_GetTick>
 800066e:	6278      	str	r0, [r7, #36]	@ 0x24
        
        // 每1秒发送一次心跳消息
        if ((current_time - last_heartbeat) >= 1000) {
 8000670:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000672:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000674:	1ad3      	subs	r3, r2, r3
 8000676:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800067a:	d303      	bcc.n	8000684 <CAN_SendTask_Main+0x40>
            CAN_SendHeartbeat();
 800067c:	f000 f846 	bl	800070c <CAN_SendHeartbeat>
            last_heartbeat = current_time;
 8000680:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000682:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        
        // 每2秒发送一次测试数据
        if ((current_time - last_data_send) >= 2000) {
 8000684:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000686:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800068e:	d303      	bcc.n	8000698 <CAN_SendTask_Main+0x54>
            CAN_SendTestData();
 8000690:	f000 f892 	bl	80007b8 <CAN_SendTestData>
            last_data_send = current_time;
 8000694:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000696:	62bb      	str	r3, [r7, #40]	@ 0x28
        }
        
        // 检查是否有来自队列的发送请求
        CAN_QueueMessage_t queue_msg;
        if (osMessageQueueGet(myQueue01Handle, &queue_msg, NULL, 10) == osOK) {
 8000698:	4b17      	ldr	r3, [pc, #92]	@ (80006f8 <CAN_SendTask_Main+0xb4>)
 800069a:	6818      	ldr	r0, [r3, #0]
 800069c:	f107 010c 	add.w	r1, r7, #12
 80006a0:	230a      	movs	r3, #10
 80006a2:	2200      	movs	r2, #0
 80006a4:	f004 fa5a 	bl	8004b5c <osMessageQueueGet>
 80006a8:	4603      	mov	r3, r0
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d11c      	bne.n	80006e8 <CAN_SendTask_Main+0xa4>
            // 处理队列中的发送请求
            if (MCP2515_SendMessage(&queue_msg.message) == MCP2515_OK) {
 80006ae:	f107 030c 	add.w	r3, r7, #12
 80006b2:	4618      	mov	r0, r3
 80006b4:	f000 ff5e 	bl	8001574 <MCP2515_SendMessage>
 80006b8:	4603      	mov	r3, r0
 80006ba:	2b00      	cmp	r3, #0
 80006bc:	d10a      	bne.n	80006d4 <CAN_SendTask_Main+0x90>
                can_tx_counter++;
 80006be:	4b0f      	ldr	r3, [pc, #60]	@ (80006fc <CAN_SendTask_Main+0xb8>)
 80006c0:	681b      	ldr	r3, [r3, #0]
 80006c2:	3301      	adds	r3, #1
 80006c4:	4a0d      	ldr	r2, [pc, #52]	@ (80006fc <CAN_SendTask_Main+0xb8>)
 80006c6:	6013      	str	r3, [r2, #0]
                printf("Queue message sent successfully, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006c8:	68fb      	ldr	r3, [r7, #12]
 80006ca:	4619      	mov	r1, r3
 80006cc:	480c      	ldr	r0, [pc, #48]	@ (8000700 <CAN_SendTask_Main+0xbc>)
 80006ce:	f007 f8dd 	bl	800788c <iprintf>
 80006d2:	e009      	b.n	80006e8 <CAN_SendTask_Main+0xa4>
            } else {
                can_error_counter++;
 80006d4:	4b0b      	ldr	r3, [pc, #44]	@ (8000704 <CAN_SendTask_Main+0xc0>)
 80006d6:	681b      	ldr	r3, [r3, #0]
 80006d8:	3301      	adds	r3, #1
 80006da:	4a0a      	ldr	r2, [pc, #40]	@ (8000704 <CAN_SendTask_Main+0xc0>)
 80006dc:	6013      	str	r3, [r2, #0]
                printf("Queue message send failed, ID: 0x%03X\r\n", (unsigned int)queue_msg.message.id);
 80006de:	68fb      	ldr	r3, [r7, #12]
 80006e0:	4619      	mov	r1, r3
 80006e2:	4809      	ldr	r0, [pc, #36]	@ (8000708 <CAN_SendTask_Main+0xc4>)
 80006e4:	f007 f8d2 	bl	800788c <iprintf>
            }
        }
        
        osDelay(50);  // 50ms周期
 80006e8:	2032      	movs	r0, #50	@ 0x32
 80006ea:	f004 f9a9 	bl	8004a40 <osDelay>
    for (;;) {
 80006ee:	e7bc      	b.n	800066a <CAN_SendTask_Main+0x26>
 80006f0:	080087a0 	.word	0x080087a0
 80006f4:	20000094 	.word	0x20000094
 80006f8:	20000144 	.word	0x20000144
 80006fc:	20000088 	.word	0x20000088
 8000700:	080087b8 	.word	0x080087b8
 8000704:	20000090 	.word	0x20000090
 8000708:	080087e8 	.word	0x080087e8

0800070c <CAN_SendHeartbeat>:
  * @brief  发送心跳消息
  * @param  None
  * @retval None
  */
static void CAN_SendHeartbeat(void)
{
 800070c:	b580      	push	{r7, lr}
 800070e:	b084      	sub	sp, #16
 8000710:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t heartbeat;
    
    // 构造心跳消息
    heartbeat.id = CAN_HEARTBEAT_ID;
 8000712:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8000716:	603b      	str	r3, [r7, #0]
    heartbeat.ide = 0;  // 标准帧
 8000718:	2300      	movs	r3, #0
 800071a:	713b      	strb	r3, [r7, #4]
    heartbeat.rtr = 0;  // 数据帧
 800071c:	2300      	movs	r3, #0
 800071e:	717b      	strb	r3, [r7, #5]
    heartbeat.dlc = 8;  // 8字节数据
 8000720:	2308      	movs	r3, #8
 8000722:	71bb      	strb	r3, [r7, #6]
    
    // 填充心跳数据
    heartbeat.data[0] = 0xAA;  // 心跳标识
 8000724:	23aa      	movs	r3, #170	@ 0xaa
 8000726:	71fb      	strb	r3, [r7, #7]
    heartbeat.data[1] = 0x55;
 8000728:	2355      	movs	r3, #85	@ 0x55
 800072a:	723b      	strb	r3, [r7, #8]
    heartbeat.data[2] = (uint8_t)(can_tx_counter >> 24);
 800072c:	4b1e      	ldr	r3, [pc, #120]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800072e:	681b      	ldr	r3, [r3, #0]
 8000730:	0e1b      	lsrs	r3, r3, #24
 8000732:	b2db      	uxtb	r3, r3
 8000734:	727b      	strb	r3, [r7, #9]
    heartbeat.data[3] = (uint8_t)(can_tx_counter >> 16);
 8000736:	4b1c      	ldr	r3, [pc, #112]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000738:	681b      	ldr	r3, [r3, #0]
 800073a:	0c1b      	lsrs	r3, r3, #16
 800073c:	b2db      	uxtb	r3, r3
 800073e:	72bb      	strb	r3, [r7, #10]
    heartbeat.data[4] = (uint8_t)(can_tx_counter >> 8);
 8000740:	4b19      	ldr	r3, [pc, #100]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000742:	681b      	ldr	r3, [r3, #0]
 8000744:	0a1b      	lsrs	r3, r3, #8
 8000746:	b2db      	uxtb	r3, r3
 8000748:	72fb      	strb	r3, [r7, #11]
    heartbeat.data[5] = (uint8_t)can_tx_counter;
 800074a:	4b17      	ldr	r3, [pc, #92]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800074c:	681b      	ldr	r3, [r3, #0]
 800074e:	b2db      	uxtb	r3, r3
 8000750:	733b      	strb	r3, [r7, #12]
    heartbeat.data[6] = (uint8_t)(HAL_GetTick() >> 8);
 8000752:	f001 fedd 	bl	8002510 <HAL_GetTick>
 8000756:	4603      	mov	r3, r0
 8000758:	0a1b      	lsrs	r3, r3, #8
 800075a:	b2db      	uxtb	r3, r3
 800075c:	737b      	strb	r3, [r7, #13]
    heartbeat.data[7] = (uint8_t)HAL_GetTick();
 800075e:	f001 fed7 	bl	8002510 <HAL_GetTick>
 8000762:	4603      	mov	r3, r0
 8000764:	b2db      	uxtb	r3, r3
 8000766:	73bb      	strb	r3, [r7, #14]
    
    // 发送心跳消息
    if (MCP2515_SendMessage(&heartbeat) == MCP2515_OK) {
 8000768:	463b      	mov	r3, r7
 800076a:	4618      	mov	r0, r3
 800076c:	f000 ff02 	bl	8001574 <MCP2515_SendMessage>
 8000770:	4603      	mov	r3, r0
 8000772:	2b00      	cmp	r3, #0
 8000774:	d10b      	bne.n	800078e <CAN_SendHeartbeat+0x82>
        can_tx_counter++;
 8000776:	4b0c      	ldr	r3, [pc, #48]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000778:	681b      	ldr	r3, [r3, #0]
 800077a:	3301      	adds	r3, #1
 800077c:	4a0a      	ldr	r2, [pc, #40]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 800077e:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message sent successfully [%lu]\r\n", can_tx_counter);
 8000780:	4b09      	ldr	r3, [pc, #36]	@ (80007a8 <CAN_SendHeartbeat+0x9c>)
 8000782:	681b      	ldr	r3, [r3, #0]
 8000784:	4619      	mov	r1, r3
 8000786:	4809      	ldr	r0, [pc, #36]	@ (80007ac <CAN_SendHeartbeat+0xa0>)
 8000788:	f007 f880 	bl	800788c <iprintf>
    } else {
        can_error_counter++;
        printf("Heartbeat message send failed\r\n");
    }
}
 800078c:	e007      	b.n	800079e <CAN_SendHeartbeat+0x92>
        can_error_counter++;
 800078e:	4b08      	ldr	r3, [pc, #32]	@ (80007b0 <CAN_SendHeartbeat+0xa4>)
 8000790:	681b      	ldr	r3, [r3, #0]
 8000792:	3301      	adds	r3, #1
 8000794:	4a06      	ldr	r2, [pc, #24]	@ (80007b0 <CAN_SendHeartbeat+0xa4>)
 8000796:	6013      	str	r3, [r2, #0]
        printf("Heartbeat message send failed\r\n");
 8000798:	4806      	ldr	r0, [pc, #24]	@ (80007b4 <CAN_SendHeartbeat+0xa8>)
 800079a:	f007 f8df 	bl	800795c <puts>
}
 800079e:	bf00      	nop
 80007a0:	3710      	adds	r7, #16
 80007a2:	46bd      	mov	sp, r7
 80007a4:	bd80      	pop	{r7, pc}
 80007a6:	bf00      	nop
 80007a8:	20000088 	.word	0x20000088
 80007ac:	08008810 	.word	0x08008810
 80007b0:	20000090 	.word	0x20000090
 80007b4:	0800883c 	.word	0x0800883c

080007b8 <CAN_SendTestData>:
  * @brief  发送测试数据
  * @param  None
  * @retval None
  */
static void CAN_SendTestData(void)
{
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b084      	sub	sp, #16
 80007bc:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_data;
    static uint16_t data_counter = 0;
    
    // 构造测试数据消息
    test_data.id = CAN_DATA_ID;
 80007be:	f44f 7300 	mov.w	r3, #512	@ 0x200
 80007c2:	603b      	str	r3, [r7, #0]
    test_data.ide = 0;  // 标准帧
 80007c4:	2300      	movs	r3, #0
 80007c6:	713b      	strb	r3, [r7, #4]
    test_data.rtr = 0;  // 数据帧
 80007c8:	2300      	movs	r3, #0
 80007ca:	717b      	strb	r3, [r7, #5]
    test_data.dlc = 6;  // 6字节数据
 80007cc:	2306      	movs	r3, #6
 80007ce:	71bb      	strb	r3, [r7, #6]
    
    // 填充测试数据
    test_data.data[0] = 0x12;  // 数据标识
 80007d0:	2312      	movs	r3, #18
 80007d2:	71fb      	strb	r3, [r7, #7]
    test_data.data[1] = 0x34;
 80007d4:	2334      	movs	r3, #52	@ 0x34
 80007d6:	723b      	strb	r3, [r7, #8]
    test_data.data[2] = (uint8_t)(data_counter >> 8);
 80007d8:	4b1d      	ldr	r3, [pc, #116]	@ (8000850 <CAN_SendTestData+0x98>)
 80007da:	881b      	ldrh	r3, [r3, #0]
 80007dc:	0a1b      	lsrs	r3, r3, #8
 80007de:	b29b      	uxth	r3, r3
 80007e0:	b2db      	uxtb	r3, r3
 80007e2:	727b      	strb	r3, [r7, #9]
    test_data.data[3] = (uint8_t)data_counter;
 80007e4:	4b1a      	ldr	r3, [pc, #104]	@ (8000850 <CAN_SendTestData+0x98>)
 80007e6:	881b      	ldrh	r3, [r3, #0]
 80007e8:	b2db      	uxtb	r3, r3
 80007ea:	72bb      	strb	r3, [r7, #10]
    test_data.data[4] = (uint8_t)(HAL_GetTick() >> 16);
 80007ec:	f001 fe90 	bl	8002510 <HAL_GetTick>
 80007f0:	4603      	mov	r3, r0
 80007f2:	0c1b      	lsrs	r3, r3, #16
 80007f4:	b2db      	uxtb	r3, r3
 80007f6:	72fb      	strb	r3, [r7, #11]
    test_data.data[5] = (uint8_t)(HAL_GetTick() >> 8);
 80007f8:	f001 fe8a 	bl	8002510 <HAL_GetTick>
 80007fc:	4603      	mov	r3, r0
 80007fe:	0a1b      	lsrs	r3, r3, #8
 8000800:	b2db      	uxtb	r3, r3
 8000802:	733b      	strb	r3, [r7, #12]
    
    // 发送测试数据
    if (MCP2515_SendMessage(&test_data) == MCP2515_OK) {
 8000804:	463b      	mov	r3, r7
 8000806:	4618      	mov	r0, r3
 8000808:	f000 feb4 	bl	8001574 <MCP2515_SendMessage>
 800080c:	4603      	mov	r3, r0
 800080e:	2b00      	cmp	r3, #0
 8000810:	d111      	bne.n	8000836 <CAN_SendTestData+0x7e>
        can_tx_counter++;
 8000812:	4b10      	ldr	r3, [pc, #64]	@ (8000854 <CAN_SendTestData+0x9c>)
 8000814:	681b      	ldr	r3, [r3, #0]
 8000816:	3301      	adds	r3, #1
 8000818:	4a0e      	ldr	r2, [pc, #56]	@ (8000854 <CAN_SendTestData+0x9c>)
 800081a:	6013      	str	r3, [r2, #0]
        data_counter++;
 800081c:	4b0c      	ldr	r3, [pc, #48]	@ (8000850 <CAN_SendTestData+0x98>)
 800081e:	881b      	ldrh	r3, [r3, #0]
 8000820:	3301      	adds	r3, #1
 8000822:	b29a      	uxth	r2, r3
 8000824:	4b0a      	ldr	r3, [pc, #40]	@ (8000850 <CAN_SendTestData+0x98>)
 8000826:	801a      	strh	r2, [r3, #0]
        printf("Test data sent successfully, count: %d\r\n", data_counter);
 8000828:	4b09      	ldr	r3, [pc, #36]	@ (8000850 <CAN_SendTestData+0x98>)
 800082a:	881b      	ldrh	r3, [r3, #0]
 800082c:	4619      	mov	r1, r3
 800082e:	480a      	ldr	r0, [pc, #40]	@ (8000858 <CAN_SendTestData+0xa0>)
 8000830:	f007 f82c 	bl	800788c <iprintf>
    } else {
        can_error_counter++;
        printf("Test data send failed\r\n");
    }
}
 8000834:	e007      	b.n	8000846 <CAN_SendTestData+0x8e>
        can_error_counter++;
 8000836:	4b09      	ldr	r3, [pc, #36]	@ (800085c <CAN_SendTestData+0xa4>)
 8000838:	681b      	ldr	r3, [r3, #0]
 800083a:	3301      	adds	r3, #1
 800083c:	4a07      	ldr	r2, [pc, #28]	@ (800085c <CAN_SendTestData+0xa4>)
 800083e:	6013      	str	r3, [r2, #0]
        printf("Test data send failed\r\n");
 8000840:	4807      	ldr	r0, [pc, #28]	@ (8000860 <CAN_SendTestData+0xa8>)
 8000842:	f007 f88b 	bl	800795c <puts>
}
 8000846:	bf00      	nop
 8000848:	3710      	adds	r7, #16
 800084a:	46bd      	mov	sp, r7
 800084c:	bd80      	pop	{r7, pc}
 800084e:	bf00      	nop
 8000850:	20000096 	.word	0x20000096
 8000854:	20000088 	.word	0x20000088
 8000858:	0800885c 	.word	0x0800885c
 800085c:	20000090 	.word	0x20000090
 8000860:	08008888 	.word	0x08008888

08000864 <CAN_ReceiveTask_Main>:
  * @param  argument: 任务参数
  * @retval None
  * @note   此函数在StartCANReceiveTask中调用
  */
void CAN_ReceiveTask_Main(void *argument)
{
 8000864:	b580      	push	{r7, lr}
 8000866:	b086      	sub	sp, #24
 8000868:	af00      	add	r7, sp, #0
 800086a:	6078      	str	r0, [r7, #4]
    MCP2515_CANMessage_t received_message;
    
    printf("CAN receive task started\r\n");
 800086c:	481a      	ldr	r0, [pc, #104]	@ (80008d8 <CAN_ReceiveTask_Main+0x74>)
 800086e:	f007 f875 	bl	800795c <puts>
    
    // 等待CAN应用初始化完成
    while (!can_app_initialized) {
 8000872:	e002      	b.n	800087a <CAN_ReceiveTask_Main+0x16>
        osDelay(100);
 8000874:	2064      	movs	r0, #100	@ 0x64
 8000876:	f004 f8e3 	bl	8004a40 <osDelay>
    while (!can_app_initialized) {
 800087a:	4b18      	ldr	r3, [pc, #96]	@ (80008dc <CAN_ReceiveTask_Main+0x78>)
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	2b00      	cmp	r3, #0
 8000880:	d0f8      	beq.n	8000874 <CAN_ReceiveTask_Main+0x10>
    }
    
    for (;;) {
        // 检查是否有消息接收
        if (MCP2515_CheckReceive()) {
 8000882:	f000 ff01 	bl	8001688 <MCP2515_CheckReceive>
 8000886:	4603      	mov	r3, r0
 8000888:	2b00      	cmp	r3, #0
 800088a:	d020      	beq.n	80008ce <CAN_ReceiveTask_Main+0x6a>
            // 接收消息
            if (MCP2515_ReceiveMessage(&received_message) == MCP2515_OK) {
 800088c:	f107 0308 	add.w	r3, r7, #8
 8000890:	4618      	mov	r0, r3
 8000892:	f000 fec5 	bl	8001620 <MCP2515_ReceiveMessage>
 8000896:	4603      	mov	r3, r0
 8000898:	2b00      	cmp	r3, #0
 800089a:	d110      	bne.n	80008be <CAN_ReceiveTask_Main+0x5a>
                can_rx_counter++;
 800089c:	4b10      	ldr	r3, [pc, #64]	@ (80008e0 <CAN_ReceiveTask_Main+0x7c>)
 800089e:	681b      	ldr	r3, [r3, #0]
 80008a0:	3301      	adds	r3, #1
 80008a2:	4a0f      	ldr	r2, [pc, #60]	@ (80008e0 <CAN_ReceiveTask_Main+0x7c>)
 80008a4:	6013      	str	r3, [r2, #0]
                
                // 打印接收到的消息
                CAN_PrintMessage("Received", &received_message);
 80008a6:	f107 0308 	add.w	r3, r7, #8
 80008aa:	4619      	mov	r1, r3
 80008ac:	480d      	ldr	r0, [pc, #52]	@ (80008e4 <CAN_ReceiveTask_Main+0x80>)
 80008ae:	f000 f91f 	bl	8000af0 <CAN_PrintMessage>
                
                // 处理接收到的消息
                CAN_ProcessReceivedMessage(&received_message);
 80008b2:	f107 0308 	add.w	r3, r7, #8
 80008b6:	4618      	mov	r0, r3
 80008b8:	f000 f81a 	bl	80008f0 <CAN_ProcessReceivedMessage>
 80008bc:	e007      	b.n	80008ce <CAN_ReceiveTask_Main+0x6a>
            } else {
                can_error_counter++;
 80008be:	4b0a      	ldr	r3, [pc, #40]	@ (80008e8 <CAN_ReceiveTask_Main+0x84>)
 80008c0:	681b      	ldr	r3, [r3, #0]
 80008c2:	3301      	adds	r3, #1
 80008c4:	4a08      	ldr	r2, [pc, #32]	@ (80008e8 <CAN_ReceiveTask_Main+0x84>)
 80008c6:	6013      	str	r3, [r2, #0]
                printf("Message receive failed\r\n");
 80008c8:	4808      	ldr	r0, [pc, #32]	@ (80008ec <CAN_ReceiveTask_Main+0x88>)
 80008ca:	f007 f847 	bl	800795c <puts>
            }
        }
        
        osDelay(10);  // 10ms周期检查
 80008ce:	200a      	movs	r0, #10
 80008d0:	f004 f8b6 	bl	8004a40 <osDelay>
        if (MCP2515_CheckReceive()) {
 80008d4:	e7d5      	b.n	8000882 <CAN_ReceiveTask_Main+0x1e>
 80008d6:	bf00      	nop
 80008d8:	080088a0 	.word	0x080088a0
 80008dc:	20000094 	.word	0x20000094
 80008e0:	2000008c 	.word	0x2000008c
 80008e4:	080088bc 	.word	0x080088bc
 80008e8:	20000090 	.word	0x20000090
 80008ec:	080088c8 	.word	0x080088c8

080008f0 <CAN_ProcessReceivedMessage>:
  * @brief  处理接收到的CAN消息
  * @param  message: 接收到的消息
  * @retval None
  */
static void CAN_ProcessReceivedMessage(MCP2515_CANMessage_t *message)
{
 80008f0:	b580      	push	{r7, lr}
 80008f2:	b084      	sub	sp, #16
 80008f4:	af00      	add	r7, sp, #0
 80008f6:	6078      	str	r0, [r7, #4]
    switch (message->id) {
 80008f8:	687b      	ldr	r3, [r7, #4]
 80008fa:	681b      	ldr	r3, [r3, #0]
 80008fc:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000900:	d036      	beq.n	8000970 <CAN_ProcessReceivedMessage+0x80>
 8000902:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000906:	d837      	bhi.n	8000978 <CAN_ProcessReceivedMessage+0x88>
 8000908:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800090c:	d003      	beq.n	8000916 <CAN_ProcessReceivedMessage+0x26>
 800090e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000912:	d010      	beq.n	8000936 <CAN_ProcessReceivedMessage+0x46>
 8000914:	e030      	b.n	8000978 <CAN_ProcessReceivedMessage+0x88>
        case CAN_HEARTBEAT_ID:
            // 处理心跳消息
            if (message->dlc >= 2 && message->data[0] == 0xAA && message->data[1] == 0x55) {
 8000916:	687b      	ldr	r3, [r7, #4]
 8000918:	799b      	ldrb	r3, [r3, #6]
 800091a:	2b01      	cmp	r3, #1
 800091c:	d933      	bls.n	8000986 <CAN_ProcessReceivedMessage+0x96>
 800091e:	687b      	ldr	r3, [r7, #4]
 8000920:	79db      	ldrb	r3, [r3, #7]
 8000922:	2baa      	cmp	r3, #170	@ 0xaa
 8000924:	d12f      	bne.n	8000986 <CAN_ProcessReceivedMessage+0x96>
 8000926:	687b      	ldr	r3, [r7, #4]
 8000928:	7a1b      	ldrb	r3, [r3, #8]
 800092a:	2b55      	cmp	r3, #85	@ 0x55
 800092c:	d12b      	bne.n	8000986 <CAN_ProcessReceivedMessage+0x96>
                printf("Heartbeat message received\r\n");
 800092e:	4819      	ldr	r0, [pc, #100]	@ (8000994 <CAN_ProcessReceivedMessage+0xa4>)
 8000930:	f007 f814 	bl	800795c <puts>
            }
            break;
 8000934:	e027      	b.n	8000986 <CAN_ProcessReceivedMessage+0x96>
            
        case CAN_DATA_ID:
            // 处理数据消息
            if (message->dlc >= 2 && message->data[0] == 0x12 && message->data[1] == 0x34) {
 8000936:	687b      	ldr	r3, [r7, #4]
 8000938:	799b      	ldrb	r3, [r3, #6]
 800093a:	2b01      	cmp	r3, #1
 800093c:	d925      	bls.n	800098a <CAN_ProcessReceivedMessage+0x9a>
 800093e:	687b      	ldr	r3, [r7, #4]
 8000940:	79db      	ldrb	r3, [r3, #7]
 8000942:	2b12      	cmp	r3, #18
 8000944:	d121      	bne.n	800098a <CAN_ProcessReceivedMessage+0x9a>
 8000946:	687b      	ldr	r3, [r7, #4]
 8000948:	7a1b      	ldrb	r3, [r3, #8]
 800094a:	2b34      	cmp	r3, #52	@ 0x34
 800094c:	d11d      	bne.n	800098a <CAN_ProcessReceivedMessage+0x9a>
                uint16_t counter = (message->data[2] << 8) | message->data[3];
 800094e:	687b      	ldr	r3, [r7, #4]
 8000950:	7a5b      	ldrb	r3, [r3, #9]
 8000952:	b21b      	sxth	r3, r3
 8000954:	021b      	lsls	r3, r3, #8
 8000956:	b21a      	sxth	r2, r3
 8000958:	687b      	ldr	r3, [r7, #4]
 800095a:	7a9b      	ldrb	r3, [r3, #10]
 800095c:	b21b      	sxth	r3, r3
 800095e:	4313      	orrs	r3, r2
 8000960:	b21b      	sxth	r3, r3
 8000962:	81fb      	strh	r3, [r7, #14]
                printf("Test data received, count: %d\r\n", counter);
 8000964:	89fb      	ldrh	r3, [r7, #14]
 8000966:	4619      	mov	r1, r3
 8000968:	480b      	ldr	r0, [pc, #44]	@ (8000998 <CAN_ProcessReceivedMessage+0xa8>)
 800096a:	f006 ff8f 	bl	800788c <iprintf>
            }
            break;
 800096e:	e00c      	b.n	800098a <CAN_ProcessReceivedMessage+0x9a>
            
        case CAN_STATUS_ID:
            // 处理状态消息
            printf("Status message received\r\n");
 8000970:	480a      	ldr	r0, [pc, #40]	@ (800099c <CAN_ProcessReceivedMessage+0xac>)
 8000972:	f006 fff3 	bl	800795c <puts>
            break;
 8000976:	e009      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            
        default:
            // 处理其他消息
            printf("Unknown message received, ID: 0x%03X\r\n", (unsigned int)message->id);
 8000978:	687b      	ldr	r3, [r7, #4]
 800097a:	681b      	ldr	r3, [r3, #0]
 800097c:	4619      	mov	r1, r3
 800097e:	4808      	ldr	r0, [pc, #32]	@ (80009a0 <CAN_ProcessReceivedMessage+0xb0>)
 8000980:	f006 ff84 	bl	800788c <iprintf>
            break;
 8000984:	e002      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            break;
 8000986:	bf00      	nop
 8000988:	e000      	b.n	800098c <CAN_ProcessReceivedMessage+0x9c>
            break;
 800098a:	bf00      	nop
    }
}
 800098c:	bf00      	nop
 800098e:	3710      	adds	r7, #16
 8000990:	46bd      	mov	sp, r7
 8000992:	bd80      	pop	{r7, pc}
 8000994:	080088e0 	.word	0x080088e0
 8000998:	080088fc 	.word	0x080088fc
 800099c:	0800891c 	.word	0x0800891c
 80009a0:	08008938 	.word	0x08008938

080009a4 <CAN_App_SelfTest>:
  * @brief  CAN应用自检测试
  * @param  None
  * @retval CAN_APP_OK: 成功, CAN_APP_ERROR: 失败
  */
uint8_t CAN_App_SelfTest(void)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08a      	sub	sp, #40	@ 0x28
 80009a8:	af00      	add	r7, sp, #0
    printf("Starting CAN application self-test...\r\n");
 80009aa:	4845      	ldr	r0, [pc, #276]	@ (8000ac0 <CAN_App_SelfTest+0x11c>)
 80009ac:	f006 ffd6 	bl	800795c <puts>
    
    // 检查MCP2515硬件
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80009b0:	f000 fece 	bl	8001750 <MCP2515_SelfTest>
 80009b4:	4603      	mov	r3, r0
 80009b6:	2b00      	cmp	r3, #0
 80009b8:	d004      	beq.n	80009c4 <CAN_App_SelfTest+0x20>
        printf("MCP2515 hardware test failed!\r\n");
 80009ba:	4842      	ldr	r0, [pc, #264]	@ (8000ac4 <CAN_App_SelfTest+0x120>)
 80009bc:	f006 ffce 	bl	800795c <puts>
        return CAN_APP_ERROR;
 80009c0:	2301      	movs	r3, #1
 80009c2:	e078      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("MCP2515 hardware test passed\r\n");
 80009c4:	4840      	ldr	r0, [pc, #256]	@ (8000ac8 <CAN_App_SelfTest+0x124>)
 80009c6:	f006 ffc9 	bl	800795c <puts>
    
    // 检查回环模式
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 80009ca:	2040      	movs	r0, #64	@ 0x40
 80009cc:	f000 fcaa 	bl	8001324 <MCP2515_SetMode>
 80009d0:	4603      	mov	r3, r0
 80009d2:	2b00      	cmp	r3, #0
 80009d4:	d004      	beq.n	80009e0 <CAN_App_SelfTest+0x3c>
        printf("Set loopback mode failed!\r\n");
 80009d6:	483d      	ldr	r0, [pc, #244]	@ (8000acc <CAN_App_SelfTest+0x128>)
 80009d8:	f006 ffc0 	bl	800795c <puts>
        return CAN_APP_ERROR;
 80009dc:	2301      	movs	r3, #1
 80009de:	e06a      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback mode set successfully\r\n");
 80009e0:	483b      	ldr	r0, [pc, #236]	@ (8000ad0 <CAN_App_SelfTest+0x12c>)
 80009e2:	f006 ffbb 	bl	800795c <puts>
    
    // 发送测试消息
    MCP2515_CANMessage_t test_msg;
    test_msg.id = 0x123;
 80009e6:	f240 1323 	movw	r3, #291	@ 0x123
 80009ea:	617b      	str	r3, [r7, #20]
    test_msg.ide = 0;
 80009ec:	2300      	movs	r3, #0
 80009ee:	763b      	strb	r3, [r7, #24]
    test_msg.rtr = 0;
 80009f0:	2300      	movs	r3, #0
 80009f2:	767b      	strb	r3, [r7, #25]
    test_msg.dlc = 8;
 80009f4:	2308      	movs	r3, #8
 80009f6:	76bb      	strb	r3, [r7, #26]
    for (int i = 0; i < 8; i++) {
 80009f8:	2300      	movs	r3, #0
 80009fa:	627b      	str	r3, [r7, #36]	@ 0x24
 80009fc:	e00c      	b.n	8000a18 <CAN_App_SelfTest+0x74>
        test_msg.data[i] = i + 1;
 80009fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a00:	b2db      	uxtb	r3, r3
 8000a02:	3301      	adds	r3, #1
 8000a04:	b2d9      	uxtb	r1, r3
 8000a06:	f107 021b 	add.w	r2, r7, #27
 8000a0a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a0c:	4413      	add	r3, r2
 8000a0e:	460a      	mov	r2, r1
 8000a10:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8000a12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a14:	3301      	adds	r3, #1
 8000a16:	627b      	str	r3, [r7, #36]	@ 0x24
 8000a18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000a1a:	2b07      	cmp	r3, #7
 8000a1c:	ddef      	ble.n	80009fe <CAN_App_SelfTest+0x5a>
    }
    
    if (MCP2515_SendMessage(&test_msg) != MCP2515_OK) {
 8000a1e:	f107 0314 	add.w	r3, r7, #20
 8000a22:	4618      	mov	r0, r3
 8000a24:	f000 fda6 	bl	8001574 <MCP2515_SendMessage>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d004      	beq.n	8000a38 <CAN_App_SelfTest+0x94>
        printf("Loopback test message send failed!\r\n");
 8000a2e:	4829      	ldr	r0, [pc, #164]	@ (8000ad4 <CAN_App_SelfTest+0x130>)
 8000a30:	f006 ff94 	bl	800795c <puts>
        return CAN_APP_ERROR;
 8000a34:	2301      	movs	r3, #1
 8000a36:	e03e      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("Loopback test message sent successfully\r\n");
 8000a38:	4827      	ldr	r0, [pc, #156]	@ (8000ad8 <CAN_App_SelfTest+0x134>)
 8000a3a:	f006 ff8f 	bl	800795c <puts>
    
    // 等待并接收消息
    osDelay(100);
 8000a3e:	2064      	movs	r0, #100	@ 0x64
 8000a40:	f003 fffe 	bl	8004a40 <osDelay>
    
    MCP2515_CANMessage_t received_msg;
    if (MCP2515_ReceiveMessage(&received_msg) == MCP2515_OK) {
 8000a44:	1d3b      	adds	r3, r7, #4
 8000a46:	4618      	mov	r0, r3
 8000a48:	f000 fdea 	bl	8001620 <MCP2515_ReceiveMessage>
 8000a4c:	4603      	mov	r3, r0
 8000a4e:	2b00      	cmp	r3, #0
 8000a50:	d123      	bne.n	8000a9a <CAN_App_SelfTest+0xf6>
        // 验证接收到的消息
        if (received_msg.id == test_msg.id && 
 8000a52:	687a      	ldr	r2, [r7, #4]
 8000a54:	697b      	ldr	r3, [r7, #20]
 8000a56:	429a      	cmp	r2, r3
 8000a58:	d11a      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            received_msg.dlc == test_msg.dlc &&
 8000a5a:	7aba      	ldrb	r2, [r7, #10]
 8000a5c:	7ebb      	ldrb	r3, [r7, #26]
        if (received_msg.id == test_msg.id && 
 8000a5e:	429a      	cmp	r2, r3
 8000a60:	d116      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            memcmp(received_msg.data, test_msg.data, test_msg.dlc) == 0) {
 8000a62:	7ebb      	ldrb	r3, [r7, #26]
 8000a64:	461a      	mov	r2, r3
 8000a66:	f107 0314 	add.w	r3, r7, #20
 8000a6a:	1dd9      	adds	r1, r3, #7
 8000a6c:	1d3b      	adds	r3, r7, #4
 8000a6e:	3307      	adds	r3, #7
 8000a70:	4618      	mov	r0, r3
 8000a72:	f007 f853 	bl	8007b1c <memcmp>
 8000a76:	4603      	mov	r3, r0
            received_msg.dlc == test_msg.dlc &&
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d109      	bne.n	8000a90 <CAN_App_SelfTest+0xec>
            printf("Loopback test successful!\r\n");
 8000a7c:	4817      	ldr	r0, [pc, #92]	@ (8000adc <CAN_App_SelfTest+0x138>)
 8000a7e:	f006 ff6d 	bl	800795c <puts>
        printf("Loopback test message receive failed!\r\n");
        return CAN_APP_ERROR;
    }
    
    // 恢复正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8000a82:	2000      	movs	r0, #0
 8000a84:	f000 fc4e 	bl	8001324 <MCP2515_SetMode>
 8000a88:	4603      	mov	r3, r0
 8000a8a:	2b00      	cmp	r3, #0
 8000a8c:	d00f      	beq.n	8000aae <CAN_App_SelfTest+0x10a>
 8000a8e:	e009      	b.n	8000aa4 <CAN_App_SelfTest+0x100>
            printf("Loopback test data mismatch!\r\n");
 8000a90:	4813      	ldr	r0, [pc, #76]	@ (8000ae0 <CAN_App_SelfTest+0x13c>)
 8000a92:	f006 ff63 	bl	800795c <puts>
            return CAN_APP_ERROR;
 8000a96:	2301      	movs	r3, #1
 8000a98:	e00d      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
        printf("Loopback test message receive failed!\r\n");
 8000a9a:	4812      	ldr	r0, [pc, #72]	@ (8000ae4 <CAN_App_SelfTest+0x140>)
 8000a9c:	f006 ff5e 	bl	800795c <puts>
        return CAN_APP_ERROR;
 8000aa0:	2301      	movs	r3, #1
 8000aa2:	e008      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
        printf("Restore normal mode failed!\r\n");
 8000aa4:	4810      	ldr	r0, [pc, #64]	@ (8000ae8 <CAN_App_SelfTest+0x144>)
 8000aa6:	f006 ff59 	bl	800795c <puts>
        return CAN_APP_ERROR;
 8000aaa:	2301      	movs	r3, #1
 8000aac:	e003      	b.n	8000ab6 <CAN_App_SelfTest+0x112>
    }
    
    printf("CAN application self-test completed!\r\n");
 8000aae:	480f      	ldr	r0, [pc, #60]	@ (8000aec <CAN_App_SelfTest+0x148>)
 8000ab0:	f006 ff54 	bl	800795c <puts>
    return CAN_APP_OK;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3728      	adds	r7, #40	@ 0x28
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	080089ec 	.word	0x080089ec
 8000ac4:	08008a14 	.word	0x08008a14
 8000ac8:	08008a34 	.word	0x08008a34
 8000acc:	08008a54 	.word	0x08008a54
 8000ad0:	08008a70 	.word	0x08008a70
 8000ad4:	08008a90 	.word	0x08008a90
 8000ad8:	08008ab4 	.word	0x08008ab4
 8000adc:	08008ae0 	.word	0x08008ae0
 8000ae0:	08008afc 	.word	0x08008afc
 8000ae4:	08008b1c 	.word	0x08008b1c
 8000ae8:	08008b44 	.word	0x08008b44
 8000aec:	08008b64 	.word	0x08008b64

08000af0 <CAN_PrintMessage>:
  * @param  prefix: 前缀字符串
  * @param  message: CAN消息指针
  * @retval None
  */
static void CAN_PrintMessage(const char *prefix, MCP2515_CANMessage_t *message)
{
 8000af0:	b580      	push	{r7, lr}
 8000af2:	b086      	sub	sp, #24
 8000af4:	af02      	add	r7, sp, #8
 8000af6:	6078      	str	r0, [r7, #4]
 8000af8:	6039      	str	r1, [r7, #0]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
           prefix,
           (unsigned int)message->id,
 8000afa:	683b      	ldr	r3, [r7, #0]
 8000afc:	6819      	ldr	r1, [r3, #0]
           message->ide ? "Extended" : "Standard",
 8000afe:	683b      	ldr	r3, [r7, #0]
 8000b00:	791b      	ldrb	r3, [r3, #4]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b02:	2b00      	cmp	r3, #0
 8000b04:	d001      	beq.n	8000b0a <CAN_PrintMessage+0x1a>
 8000b06:	481b      	ldr	r0, [pc, #108]	@ (8000b74 <CAN_PrintMessage+0x84>)
 8000b08:	e000      	b.n	8000b0c <CAN_PrintMessage+0x1c>
 8000b0a:	481b      	ldr	r0, [pc, #108]	@ (8000b78 <CAN_PrintMessage+0x88>)
           message->rtr ? "Remote" : "Data",
 8000b0c:	683b      	ldr	r3, [r7, #0]
 8000b0e:	795b      	ldrb	r3, [r3, #5]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b10:	2b00      	cmp	r3, #0
 8000b12:	d001      	beq.n	8000b18 <CAN_PrintMessage+0x28>
 8000b14:	4b19      	ldr	r3, [pc, #100]	@ (8000b7c <CAN_PrintMessage+0x8c>)
 8000b16:	e000      	b.n	8000b1a <CAN_PrintMessage+0x2a>
 8000b18:	4b19      	ldr	r3, [pc, #100]	@ (8000b80 <CAN_PrintMessage+0x90>)
           message->dlc);
 8000b1a:	683a      	ldr	r2, [r7, #0]
 8000b1c:	7992      	ldrb	r2, [r2, #6]
    printf("%s Message: ID=0x%03X, %s, %s, DLC=%d, Data=", 
 8000b1e:	9201      	str	r2, [sp, #4]
 8000b20:	9300      	str	r3, [sp, #0]
 8000b22:	4603      	mov	r3, r0
 8000b24:	460a      	mov	r2, r1
 8000b26:	6879      	ldr	r1, [r7, #4]
 8000b28:	4816      	ldr	r0, [pc, #88]	@ (8000b84 <CAN_PrintMessage+0x94>)
 8000b2a:	f006 feaf 	bl	800788c <iprintf>
    
    if (!message->rtr) {
 8000b2e:	683b      	ldr	r3, [r7, #0]
 8000b30:	795b      	ldrb	r3, [r3, #5]
 8000b32:	2b00      	cmp	r3, #0
 8000b34:	d117      	bne.n	8000b66 <CAN_PrintMessage+0x76>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b36:	2300      	movs	r3, #0
 8000b38:	60fb      	str	r3, [r7, #12]
 8000b3a:	e00b      	b.n	8000b54 <CAN_PrintMessage+0x64>
            printf("%02X ", message->data[i]);
 8000b3c:	683a      	ldr	r2, [r7, #0]
 8000b3e:	68fb      	ldr	r3, [r7, #12]
 8000b40:	4413      	add	r3, r2
 8000b42:	3307      	adds	r3, #7
 8000b44:	781b      	ldrb	r3, [r3, #0]
 8000b46:	4619      	mov	r1, r3
 8000b48:	480f      	ldr	r0, [pc, #60]	@ (8000b88 <CAN_PrintMessage+0x98>)
 8000b4a:	f006 fe9f 	bl	800788c <iprintf>
        for (int i = 0; i < message->dlc && i < 8; i++) {
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3301      	adds	r3, #1
 8000b52:	60fb      	str	r3, [r7, #12]
 8000b54:	683b      	ldr	r3, [r7, #0]
 8000b56:	799b      	ldrb	r3, [r3, #6]
 8000b58:	461a      	mov	r2, r3
 8000b5a:	68fb      	ldr	r3, [r7, #12]
 8000b5c:	4293      	cmp	r3, r2
 8000b5e:	da02      	bge.n	8000b66 <CAN_PrintMessage+0x76>
 8000b60:	68fb      	ldr	r3, [r7, #12]
 8000b62:	2b07      	cmp	r3, #7
 8000b64:	ddea      	ble.n	8000b3c <CAN_PrintMessage+0x4c>
        }
    }
    
    printf("\r\n");
 8000b66:	4809      	ldr	r0, [pc, #36]	@ (8000b8c <CAN_PrintMessage+0x9c>)
 8000b68:	f006 fef8 	bl	800795c <puts>
}
 8000b6c:	bf00      	nop
 8000b6e:	3710      	adds	r7, #16
 8000b70:	46bd      	mov	sp, r7
 8000b72:	bd80      	pop	{r7, pc}
 8000b74:	08008b8c 	.word	0x08008b8c
 8000b78:	08008b98 	.word	0x08008b98
 8000b7c:	08008ba4 	.word	0x08008ba4
 8000b80:	08008bac 	.word	0x08008bac
 8000b84:	08008bb4 	.word	0x08008bb4
 8000b88:	08008be4 	.word	0x08008be4
 8000b8c:	08008bec 	.word	0x08008bec

08000b90 <CAN_App_PrintStatus>:
  * @brief  打印CAN应用状态
  * @param  None
  * @retval None
  */
void CAN_App_PrintStatus(void)
{
 8000b90:	b580      	push	{r7, lr}
 8000b92:	b086      	sub	sp, #24
 8000b94:	af00      	add	r7, sp, #0
    CAN_App_Stats_t stats;
    CAN_App_GetStats(&stats);
 8000b96:	463b      	mov	r3, r7
 8000b98:	4618      	mov	r0, r3
 8000b9a:	f7ff fd2d 	bl	80005f8 <CAN_App_GetStats>
    
    printf("\r\n=== CAN Application Status ===\r\n");
 8000b9e:	481c      	ldr	r0, [pc, #112]	@ (8000c10 <CAN_App_PrintStatus+0x80>)
 8000ba0:	f006 fedc 	bl	800795c <puts>
    printf("Initialization Status: %s\r\n", stats.initialized ? "Initialized" : "Not Initialized");
 8000ba4:	7d3b      	ldrb	r3, [r7, #20]
 8000ba6:	2b00      	cmp	r3, #0
 8000ba8:	d001      	beq.n	8000bae <CAN_App_PrintStatus+0x1e>
 8000baa:	4b1a      	ldr	r3, [pc, #104]	@ (8000c14 <CAN_App_PrintStatus+0x84>)
 8000bac:	e000      	b.n	8000bb0 <CAN_App_PrintStatus+0x20>
 8000bae:	4b1a      	ldr	r3, [pc, #104]	@ (8000c18 <CAN_App_PrintStatus+0x88>)
 8000bb0:	4619      	mov	r1, r3
 8000bb2:	481a      	ldr	r0, [pc, #104]	@ (8000c1c <CAN_App_PrintStatus+0x8c>)
 8000bb4:	f006 fe6a 	bl	800788c <iprintf>
    printf("TX Count: %lu\r\n", stats.tx_count);
 8000bb8:	683b      	ldr	r3, [r7, #0]
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4818      	ldr	r0, [pc, #96]	@ (8000c20 <CAN_App_PrintStatus+0x90>)
 8000bbe:	f006 fe65 	bl	800788c <iprintf>
    printf("RX Count: %lu\r\n", stats.rx_count);
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	4619      	mov	r1, r3
 8000bc6:	4817      	ldr	r0, [pc, #92]	@ (8000c24 <CAN_App_PrintStatus+0x94>)
 8000bc8:	f006 fe60 	bl	800788c <iprintf>
    printf("Error Count: %lu\r\n", stats.error_count);
 8000bcc:	68bb      	ldr	r3, [r7, #8]
 8000bce:	4619      	mov	r1, r3
 8000bd0:	4815      	ldr	r0, [pc, #84]	@ (8000c28 <CAN_App_PrintStatus+0x98>)
 8000bd2:	f006 fe5b 	bl	800788c <iprintf>
    printf("TX Buffer Free: %d\r\n", MCP2515_CheckTransmit());
 8000bd6:	f000 fd6a 	bl	80016ae <MCP2515_CheckTransmit>
 8000bda:	4603      	mov	r3, r0
 8000bdc:	4619      	mov	r1, r3
 8000bde:	4813      	ldr	r0, [pc, #76]	@ (8000c2c <CAN_App_PrintStatus+0x9c>)
 8000be0:	f006 fe54 	bl	800788c <iprintf>
    printf("RX Status: %s\r\n", MCP2515_CheckReceive() ? "Message Available" : "No Message");
 8000be4:	f000 fd50 	bl	8001688 <MCP2515_CheckReceive>
 8000be8:	4603      	mov	r3, r0
 8000bea:	2b00      	cmp	r3, #0
 8000bec:	d001      	beq.n	8000bf2 <CAN_App_PrintStatus+0x62>
 8000bee:	4b10      	ldr	r3, [pc, #64]	@ (8000c30 <CAN_App_PrintStatus+0xa0>)
 8000bf0:	e000      	b.n	8000bf4 <CAN_App_PrintStatus+0x64>
 8000bf2:	4b10      	ldr	r3, [pc, #64]	@ (8000c34 <CAN_App_PrintStatus+0xa4>)
 8000bf4:	4619      	mov	r1, r3
 8000bf6:	4810      	ldr	r0, [pc, #64]	@ (8000c38 <CAN_App_PrintStatus+0xa8>)
 8000bf8:	f006 fe48 	bl	800788c <iprintf>
    
    // 打印MCP2515状态
    MCP2515_PrintStatus();
 8000bfc:	f000 fdd2 	bl	80017a4 <MCP2515_PrintStatus>
    
    printf("==================\r\n\r\n");
 8000c00:	480e      	ldr	r0, [pc, #56]	@ (8000c3c <CAN_App_PrintStatus+0xac>)
 8000c02:	f006 feab 	bl	800795c <puts>
}
 8000c06:	bf00      	nop
 8000c08:	3718      	adds	r7, #24
 8000c0a:	46bd      	mov	sp, r7
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	08008bf0 	.word	0x08008bf0
 8000c14:	08008c14 	.word	0x08008c14
 8000c18:	08008c20 	.word	0x08008c20
 8000c1c:	08008c30 	.word	0x08008c30
 8000c20:	08008c4c 	.word	0x08008c4c
 8000c24:	08008c5c 	.word	0x08008c5c
 8000c28:	08008c6c 	.word	0x08008c6c
 8000c2c:	08008c80 	.word	0x08008c80
 8000c30:	08008c98 	.word	0x08008c98
 8000c34:	08008cac 	.word	0x08008cac
 8000c38:	08008cb8 	.word	0x08008cb8
 8000c3c:	08008cc8 	.word	0x08008cc8

08000c40 <CAN_App_IRQ_Callback>:
  * @retval None
  * @note   此函数在外部中断服务程序中被调用
  *         用于处理MCP2515的中断信号
  */
void CAN_App_IRQ_Callback(void)
{
 8000c40:	b480      	push	{r7}
 8000c42:	af00      	add	r7, sp, #0
    // 可以在这里设置事件标志或信号量来通知任务
    // 这里暂时不做具体处理，实际处理在接收任务的轮询中进行
    
    // 如果需要立即处理，可以发送信号给接收任务
    // 例如：osThreadFlagsSet(CANReceiveTaskHandle, 0x01);
 8000c44:	bf00      	nop
 8000c46:	46bd      	mov	sp, r7
 8000c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c4c:	4770      	bx	lr
	...

08000c50 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c50:	b580      	push	{r7, lr}
 8000c52:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c54:	f001 fc26 	bl	80024a4 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c58:	f000 f89a 	bl	8000d90 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c5c:	f000 f962 	bl	8000f24 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c60:	f000 f900 	bl	8000e64 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8000c64:	f000 f934 	bl	8000ed0 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  // 初始化CAN应用
  printf("\r\n=== STM32F407 + MCP2515 CAN Communication System Startup ===\r\n");
 8000c68:	4833      	ldr	r0, [pc, #204]	@ (8000d38 <main+0xe8>)
 8000c6a:	f006 fe77 	bl	800795c <puts>
  printf("System Clock: %lu MHz\r\n", HAL_RCC_GetHCLKFreq() / 1000000);
 8000c6e:	f002 fb9f 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 8000c72:	4603      	mov	r3, r0
 8000c74:	4a31      	ldr	r2, [pc, #196]	@ (8000d3c <main+0xec>)
 8000c76:	fba2 2303 	umull	r2, r3, r2, r3
 8000c7a:	0c9b      	lsrs	r3, r3, #18
 8000c7c:	4619      	mov	r1, r3
 8000c7e:	4830      	ldr	r0, [pc, #192]	@ (8000d40 <main+0xf0>)
 8000c80:	f006 fe04 	bl	800788c <iprintf>
  printf("SPI1 Clock: %lu MHz\r\n", HAL_RCC_GetPCLK2Freq() / 1000000 / 32);  // SPI1预分频32
 8000c84:	f002 fbb4 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8000c88:	4603      	mov	r3, r0
 8000c8a:	4a2c      	ldr	r2, [pc, #176]	@ (8000d3c <main+0xec>)
 8000c8c:	fba2 2303 	umull	r2, r3, r2, r3
 8000c90:	0ddb      	lsrs	r3, r3, #23
 8000c92:	4619      	mov	r1, r3
 8000c94:	482b      	ldr	r0, [pc, #172]	@ (8000d44 <main+0xf4>)
 8000c96:	f006 fdf9 	bl	800788c <iprintf>
  
  // 延时等待硬件稳定
  HAL_Delay(100);
 8000c9a:	2064      	movs	r0, #100	@ 0x64
 8000c9c:	f001 fc44 	bl	8002528 <HAL_Delay>
  
  // 初始化CAN应用
  if (CAN_App_Init() == CAN_APP_OK) {
 8000ca0:	f7ff fc7c 	bl	800059c <CAN_App_Init>
 8000ca4:	4603      	mov	r3, r0
 8000ca6:	2b00      	cmp	r3, #0
 8000ca8:	d114      	bne.n	8000cd4 <main+0x84>
    printf("CAN application initialization successful!\r\n");
 8000caa:	4827      	ldr	r0, [pc, #156]	@ (8000d48 <main+0xf8>)
 8000cac:	f006 fe56 	bl	800795c <puts>
    
    // 执行自检测试
    if (CAN_App_SelfTest() == CAN_APP_OK) {
 8000cb0:	f7ff fe78 	bl	80009a4 <CAN_App_SelfTest>
 8000cb4:	4603      	mov	r3, r0
 8000cb6:	2b00      	cmp	r3, #0
 8000cb8:	d103      	bne.n	8000cc2 <main+0x72>
      printf("CAN self-test passed!\r\n");
 8000cba:	4824      	ldr	r0, [pc, #144]	@ (8000d4c <main+0xfc>)
 8000cbc:	f006 fe4e 	bl	800795c <puts>
 8000cc0:	e010      	b.n	8000ce4 <main+0x94>
    } else {
      printf("CAN self-test failed!\r\n");
 8000cc2:	4823      	ldr	r0, [pc, #140]	@ (8000d50 <main+0x100>)
 8000cc4:	f006 fe4a 	bl	800795c <puts>
      // If self-test fails, run diagnosis
      printf("\r\nWARNING: CAN communication problem detected, starting diagnosis...\r\n");
 8000cc8:	4822      	ldr	r0, [pc, #136]	@ (8000d54 <main+0x104>)
 8000cca:	f006 fe47 	bl	800795c <puts>
      CAN_DiagnoseAndFix();
 8000cce:	f001 f951 	bl	8001f74 <CAN_DiagnoseAndFix>
 8000cd2:	e007      	b.n	8000ce4 <main+0x94>
    }
  } else {
    printf("CAN application initialization failed!\r\n");
 8000cd4:	4820      	ldr	r0, [pc, #128]	@ (8000d58 <main+0x108>)
 8000cd6:	f006 fe41 	bl	800795c <puts>
    // If initialization fails, run diagnosis
    printf("\r\nWARNING: CAN initialization failed, starting diagnosis...\r\n");
 8000cda:	4820      	ldr	r0, [pc, #128]	@ (8000d5c <main+0x10c>)
 8000cdc:	f006 fe3e 	bl	800795c <puts>
    CAN_DiagnoseAndFix();
 8000ce0:	f001 f948 	bl	8001f74 <CAN_DiagnoseAndFix>
  }
  
  printf("System initialization completed, starting operation...\r\n\r\n");
 8000ce4:	481e      	ldr	r0, [pc, #120]	@ (8000d60 <main+0x110>)
 8000ce6:	f006 fe39 	bl	800795c <puts>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000cea:	f003 fdcd 	bl	8004888 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 8000cee:	4a1d      	ldr	r2, [pc, #116]	@ (8000d64 <main+0x114>)
 8000cf0:	210d      	movs	r1, #13
 8000cf2:	200a      	movs	r0, #10
 8000cf4:	f003 febf 	bl	8004a76 <osMessageQueueNew>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	4a1b      	ldr	r2, [pc, #108]	@ (8000d68 <main+0x118>)
 8000cfc:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8000cfe:	4a1b      	ldr	r2, [pc, #108]	@ (8000d6c <main+0x11c>)
 8000d00:	2100      	movs	r1, #0
 8000d02:	481b      	ldr	r0, [pc, #108]	@ (8000d70 <main+0x120>)
 8000d04:	f003 fe0a 	bl	800491c <osThreadNew>
 8000d08:	4603      	mov	r3, r0
 8000d0a:	4a1a      	ldr	r2, [pc, #104]	@ (8000d74 <main+0x124>)
 8000d0c:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 8000d0e:	4a1a      	ldr	r2, [pc, #104]	@ (8000d78 <main+0x128>)
 8000d10:	2100      	movs	r1, #0
 8000d12:	481a      	ldr	r0, [pc, #104]	@ (8000d7c <main+0x12c>)
 8000d14:	f003 fe02 	bl	800491c <osThreadNew>
 8000d18:	4603      	mov	r3, r0
 8000d1a:	4a19      	ldr	r2, [pc, #100]	@ (8000d80 <main+0x130>)
 8000d1c:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 8000d1e:	4a19      	ldr	r2, [pc, #100]	@ (8000d84 <main+0x134>)
 8000d20:	2100      	movs	r1, #0
 8000d22:	4819      	ldr	r0, [pc, #100]	@ (8000d88 <main+0x138>)
 8000d24:	f003 fdfa 	bl	800491c <osThreadNew>
 8000d28:	4603      	mov	r3, r0
 8000d2a:	4a18      	ldr	r2, [pc, #96]	@ (8000d8c <main+0x13c>)
 8000d2c:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8000d2e:	f003 fdcf 	bl	80048d0 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000d32:	bf00      	nop
 8000d34:	e7fd      	b.n	8000d32 <main+0xe2>
 8000d36:	bf00      	nop
 8000d38:	08008d14 	.word	0x08008d14
 8000d3c:	431bde83 	.word	0x431bde83
 8000d40:	08008d54 	.word	0x08008d54
 8000d44:	08008d6c 	.word	0x08008d6c
 8000d48:	08008d84 	.word	0x08008d84
 8000d4c:	08008db0 	.word	0x08008db0
 8000d50:	08008dc8 	.word	0x08008dc8
 8000d54:	08008de0 	.word	0x08008de0
 8000d58:	08008e28 	.word	0x08008e28
 8000d5c:	08008e50 	.word	0x08008e50
 8000d60:	08008e90 	.word	0x08008e90
 8000d64:	08009f58 	.word	0x08009f58
 8000d68:	20000144 	.word	0x20000144
 8000d6c:	08009eec 	.word	0x08009eec
 8000d70:	08001021 	.word	0x08001021
 8000d74:	20000138 	.word	0x20000138
 8000d78:	08009f10 	.word	0x08009f10
 8000d7c:	080010ad 	.word	0x080010ad
 8000d80:	2000013c 	.word	0x2000013c
 8000d84:	08009f34 	.word	0x08009f34
 8000d88:	080010c3 	.word	0x080010c3
 8000d8c:	20000140 	.word	0x20000140

08000d90 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d90:	b580      	push	{r7, lr}
 8000d92:	b094      	sub	sp, #80	@ 0x50
 8000d94:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d96:	f107 0320 	add.w	r3, r7, #32
 8000d9a:	2230      	movs	r2, #48	@ 0x30
 8000d9c:	2100      	movs	r1, #0
 8000d9e:	4618      	mov	r0, r3
 8000da0:	f006 fecc 	bl	8007b3c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000da4:	f107 030c 	add.w	r3, r7, #12
 8000da8:	2200      	movs	r2, #0
 8000daa:	601a      	str	r2, [r3, #0]
 8000dac:	605a      	str	r2, [r3, #4]
 8000dae:	609a      	str	r2, [r3, #8]
 8000db0:	60da      	str	r2, [r3, #12]
 8000db2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000db4:	2300      	movs	r3, #0
 8000db6:	60bb      	str	r3, [r7, #8]
 8000db8:	4b28      	ldr	r3, [pc, #160]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dbc:	4a27      	ldr	r2, [pc, #156]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dbe:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000dc2:	6413      	str	r3, [r2, #64]	@ 0x40
 8000dc4:	4b25      	ldr	r3, [pc, #148]	@ (8000e5c <SystemClock_Config+0xcc>)
 8000dc6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000dc8:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000dcc:	60bb      	str	r3, [r7, #8]
 8000dce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8000dd0:	2300      	movs	r3, #0
 8000dd2:	607b      	str	r3, [r7, #4]
 8000dd4:	4b22      	ldr	r3, [pc, #136]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	4a21      	ldr	r2, [pc, #132]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000dda:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000dde:	6013      	str	r3, [r2, #0]
 8000de0:	4b1f      	ldr	r3, [pc, #124]	@ (8000e60 <SystemClock_Config+0xd0>)
 8000de2:	681b      	ldr	r3, [r3, #0]
 8000de4:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8000de8:	607b      	str	r3, [r7, #4]
 8000dea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000dec:	2301      	movs	r3, #1
 8000dee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8000df0:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8000df4:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000df6:	2302      	movs	r3, #2
 8000df8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000dfa:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8000dfe:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000e00:	2308      	movs	r3, #8
 8000e02:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8000e04:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8000e08:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000e0a:	2302      	movs	r3, #2
 8000e0c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8000e0e:	2304      	movs	r3, #4
 8000e10:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e12:	f107 0320 	add.w	r3, r7, #32
 8000e16:	4618      	mov	r0, r3
 8000e18:	f001 fe66 	bl	8002ae8 <HAL_RCC_OscConfig>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8000e22:	f000 f96b 	bl	80010fc <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e26:	230f      	movs	r3, #15
 8000e28:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e2e:	2300      	movs	r3, #0
 8000e30:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000e32:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000e36:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000e38:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000e3c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8000e3e:	f107 030c 	add.w	r3, r7, #12
 8000e42:	2105      	movs	r1, #5
 8000e44:	4618      	mov	r0, r3
 8000e46:	f002 f8c7 	bl	8002fd8 <HAL_RCC_ClockConfig>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8000e50:	f000 f954 	bl	80010fc <Error_Handler>
  }
}
 8000e54:	bf00      	nop
 8000e56:	3750      	adds	r7, #80	@ 0x50
 8000e58:	46bd      	mov	sp, r7
 8000e5a:	bd80      	pop	{r7, pc}
 8000e5c:	40023800 	.word	0x40023800
 8000e60:	40007000 	.word	0x40007000

08000e64 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e64:	b580      	push	{r7, lr}
 8000e66:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e68:	4b17      	ldr	r3, [pc, #92]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e6a:	4a18      	ldr	r2, [pc, #96]	@ (8000ecc <MX_SPI1_Init+0x68>)
 8000e6c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e6e:	4b16      	ldr	r3, [pc, #88]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e70:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e74:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e76:	4b14      	ldr	r3, [pc, #80]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e78:	2200      	movs	r2, #0
 8000e7a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e7c:	4b12      	ldr	r3, [pc, #72]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e7e:	2200      	movs	r2, #0
 8000e80:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e82:	4b11      	ldr	r3, [pc, #68]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e84:	2200      	movs	r2, #0
 8000e86:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e88:	4b0f      	ldr	r3, [pc, #60]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e8a:	2200      	movs	r2, #0
 8000e8c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e8e:	4b0e      	ldr	r3, [pc, #56]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e90:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e94:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8000e96:	4b0c      	ldr	r3, [pc, #48]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e98:	2230      	movs	r2, #48	@ 0x30
 8000e9a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e9c:	4b0a      	ldr	r3, [pc, #40]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000e9e:	2200      	movs	r2, #0
 8000ea0:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000ea2:	4b09      	ldr	r3, [pc, #36]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000ea4:	2200      	movs	r2, #0
 8000ea6:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ea8:	4b07      	ldr	r3, [pc, #28]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eaa:	2200      	movs	r2, #0
 8000eac:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000eae:	4b06      	ldr	r3, [pc, #24]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb0:	220a      	movs	r2, #10
 8000eb2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000eb4:	4804      	ldr	r0, [pc, #16]	@ (8000ec8 <MX_SPI1_Init+0x64>)
 8000eb6:	f002 fae1 	bl	800347c <HAL_SPI_Init>
 8000eba:	4603      	mov	r3, r0
 8000ebc:	2b00      	cmp	r3, #0
 8000ebe:	d001      	beq.n	8000ec4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ec0:	f000 f91c 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}
 8000ec8:	20000098 	.word	0x20000098
 8000ecc:	40013000 	.word	0x40013000

08000ed0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000ed0:	b580      	push	{r7, lr}
 8000ed2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000ed4:	4b11      	ldr	r3, [pc, #68]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ed6:	4a12      	ldr	r2, [pc, #72]	@ (8000f20 <MX_USART2_UART_Init+0x50>)
 8000ed8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000eda:	4b10      	ldr	r3, [pc, #64]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000edc:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000ee0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000ee2:	4b0e      	ldr	r3, [pc, #56]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ee4:	2200      	movs	r2, #0
 8000ee6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000ee8:	4b0c      	ldr	r3, [pc, #48]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000eea:	2200      	movs	r2, #0
 8000eec:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8000eee:	4b0b      	ldr	r3, [pc, #44]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef0:	2200      	movs	r2, #0
 8000ef2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000ef4:	4b09      	ldr	r3, [pc, #36]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000ef6:	220c      	movs	r2, #12
 8000ef8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000efa:	4b08      	ldr	r3, [pc, #32]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000efc:	2200      	movs	r2, #0
 8000efe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000f00:	4b06      	ldr	r3, [pc, #24]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f02:	2200      	movs	r2, #0
 8000f04:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000f06:	4805      	ldr	r0, [pc, #20]	@ (8000f1c <MX_USART2_UART_Init+0x4c>)
 8000f08:	f003 f86e 	bl	8003fe8 <HAL_UART_Init>
 8000f0c:	4603      	mov	r3, r0
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d001      	beq.n	8000f16 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8000f12:	f000 f8f3 	bl	80010fc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000f16:	bf00      	nop
 8000f18:	bd80      	pop	{r7, pc}
 8000f1a:	bf00      	nop
 8000f1c:	200000f0 	.word	0x200000f0
 8000f20:	40004400 	.word	0x40004400

08000f24 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000f24:	b580      	push	{r7, lr}
 8000f26:	b088      	sub	sp, #32
 8000f28:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000f2a:	f107 030c 	add.w	r3, r7, #12
 8000f2e:	2200      	movs	r2, #0
 8000f30:	601a      	str	r2, [r3, #0]
 8000f32:	605a      	str	r2, [r3, #4]
 8000f34:	609a      	str	r2, [r3, #8]
 8000f36:	60da      	str	r2, [r3, #12]
 8000f38:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000f3a:	2300      	movs	r3, #0
 8000f3c:	60bb      	str	r3, [r7, #8]
 8000f3e:	4b2b      	ldr	r3, [pc, #172]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f40:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f42:	4a2a      	ldr	r2, [pc, #168]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f44:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8000f48:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f4a:	4b28      	ldr	r3, [pc, #160]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f4e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8000f52:	60bb      	str	r3, [r7, #8]
 8000f54:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000f56:	2300      	movs	r3, #0
 8000f58:	607b      	str	r3, [r7, #4]
 8000f5a:	4b24      	ldr	r3, [pc, #144]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f5c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f5e:	4a23      	ldr	r2, [pc, #140]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f60:	f043 0301 	orr.w	r3, r3, #1
 8000f64:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f66:	4b21      	ldr	r3, [pc, #132]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f6a:	f003 0301 	and.w	r3, r3, #1
 8000f6e:	607b      	str	r3, [r7, #4]
 8000f70:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f72:	2300      	movs	r3, #0
 8000f74:	603b      	str	r3, [r7, #0]
 8000f76:	4b1d      	ldr	r3, [pc, #116]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f78:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f7a:	4a1c      	ldr	r2, [pc, #112]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f7c:	f043 0302 	orr.w	r3, r3, #2
 8000f80:	6313      	str	r3, [r2, #48]	@ 0x30
 8000f82:	4b1a      	ldr	r3, [pc, #104]	@ (8000fec <MX_GPIO_Init+0xc8>)
 8000f84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000f86:	f003 0302 	and.w	r3, r3, #2
 8000f8a:	603b      	str	r3, [r7, #0]
 8000f8c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 8000f8e:	2200      	movs	r2, #0
 8000f90:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000f94:	4816      	ldr	r0, [pc, #88]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000f96:	f001 fd69 	bl	8002a6c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : MCP2515_INT_Pin */
  GPIO_InitStruct.Pin = MCP2515_INT_Pin;
 8000f9a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f9e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000fa0:	f44f 1304 	mov.w	r3, #2162688	@ 0x210000
 8000fa4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fa6:	2301      	movs	r3, #1
 8000fa8:	617b      	str	r3, [r7, #20]
  HAL_GPIO_Init(MCP2515_INT_GPIO_Port, &GPIO_InitStruct);
 8000faa:	f107 030c 	add.w	r3, r7, #12
 8000fae:	4619      	mov	r1, r3
 8000fb0:	480f      	ldr	r0, [pc, #60]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000fb2:	f001 fbbf 	bl	8002734 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 8000fb6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fba:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fbc:	2301      	movs	r3, #1
 8000fbe:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000fc4:	2302      	movs	r3, #2
 8000fc6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 8000fc8:	f107 030c 	add.w	r3, r7, #12
 8000fcc:	4619      	mov	r1, r3
 8000fce:	4808      	ldr	r0, [pc, #32]	@ (8000ff0 <MX_GPIO_Init+0xcc>)
 8000fd0:	f001 fbb0 	bl	8002734 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 6, 0);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2106      	movs	r1, #6
 8000fd8:	2028      	movs	r0, #40	@ 0x28
 8000fda:	f001 fb81 	bl	80026e0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8000fde:	2028      	movs	r0, #40	@ 0x28
 8000fe0:	f001 fb9a 	bl	8002718 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8000fe4:	bf00      	nop
 8000fe6:	3720      	adds	r7, #32
 8000fe8:	46bd      	mov	sp, r7
 8000fea:	bd80      	pop	{r7, pc}
 8000fec:	40023800 	.word	0x40023800
 8000ff0:	40020400 	.word	0x40020400

08000ff4 <_write>:
  * @param  ptr: 数据指针
  * @param  len: 数据长度
  * @retval 发送的字节数
  */
int _write(int file, char *ptr, int len)
{
 8000ff4:	b580      	push	{r7, lr}
 8000ff6:	b084      	sub	sp, #16
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	b29a      	uxth	r2, r3
 8001004:	f04f 33ff 	mov.w	r3, #4294967295
 8001008:	68b9      	ldr	r1, [r7, #8]
 800100a:	4804      	ldr	r0, [pc, #16]	@ (800101c <_write+0x28>)
 800100c:	f003 f83c 	bl	8004088 <HAL_UART_Transmit>
  return len;
 8001010:	687b      	ldr	r3, [r7, #4]
}
 8001012:	4618      	mov	r0, r3
 8001014:	3710      	adds	r7, #16
 8001016:	46bd      	mov	sp, r7
 8001018:	bd80      	pop	{r7, pc}
 800101a:	bf00      	nop
 800101c:	200000f0 	.word	0x200000f0

08001020 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8001020:	b580      	push	{r7, lr}
 8001022:	b086      	sub	sp, #24
 8001024:	af00      	add	r7, sp, #0
 8001026:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  uint32_t last_status_print = 0;
 8001028:	2300      	movs	r3, #0
 800102a:	617b      	str	r3, [r7, #20]
  uint32_t last_heartbeat_print = 0;
 800102c:	2300      	movs	r3, #0
 800102e:	613b      	str	r3, [r7, #16]
  uint32_t heartbeat_counter = 0;
 8001030:	2300      	movs	r3, #0
 8001032:	60fb      	str	r3, [r7, #12]
  
  printf("Default Task Started\r\n");  // 使用英文避免乱码
 8001034:	4818      	ldr	r0, [pc, #96]	@ (8001098 <StartDefaultTask+0x78>)
 8001036:	f006 fc91 	bl	800795c <puts>
  printf("System Heartbeat Monitor Active\r\n");
 800103a:	4818      	ldr	r0, [pc, #96]	@ (800109c <StartDefaultTask+0x7c>)
 800103c:	f006 fc8e 	bl	800795c <puts>
  
  /* Infinite loop */
  for(;;)
  {
    uint32_t current_time = HAL_GetTick();
 8001040:	f001 fa66 	bl	8002510 <HAL_GetTick>
 8001044:	60b8      	str	r0, [r7, #8]
    
    // 每2秒发送一次心跳数据包（增加频率）
    if ((current_time - last_heartbeat_print) >= 2000) {
 8001046:	68ba      	ldr	r2, [r7, #8]
 8001048:	693b      	ldr	r3, [r7, #16]
 800104a:	1ad3      	subs	r3, r2, r3
 800104c:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 8001050:	d30a      	bcc.n	8001068 <StartDefaultTask+0x48>
      heartbeat_counter++;
 8001052:	68fb      	ldr	r3, [r7, #12]
 8001054:	3301      	adds	r3, #1
 8001056:	60fb      	str	r3, [r7, #12]
      printf("[%lu] Heartbeat #%lu - System Running OK - Time: %lu ms\r\n", 
 8001058:	68bb      	ldr	r3, [r7, #8]
 800105a:	68fa      	ldr	r2, [r7, #12]
 800105c:	68f9      	ldr	r1, [r7, #12]
 800105e:	4810      	ldr	r0, [pc, #64]	@ (80010a0 <StartDefaultTask+0x80>)
 8001060:	f006 fc14 	bl	800788c <iprintf>
             heartbeat_counter, heartbeat_counter, current_time);
      last_heartbeat_print = current_time;
 8001064:	68bb      	ldr	r3, [r7, #8]
 8001066:	613b      	str	r3, [r7, #16]
    }
    
    // 每10秒打印一次详细系统状态
    if ((current_time - last_status_print) >= 10000) {
 8001068:	68ba      	ldr	r2, [r7, #8]
 800106a:	697b      	ldr	r3, [r7, #20]
 800106c:	1ad3      	subs	r3, r2, r3
 800106e:	f242 720f 	movw	r2, #9999	@ 0x270f
 8001072:	4293      	cmp	r3, r2
 8001074:	d90a      	bls.n	800108c <StartDefaultTask+0x6c>
      printf("\r\n=== System Status Report #%lu ===\r\n", heartbeat_counter);
 8001076:	68f9      	ldr	r1, [r7, #12]
 8001078:	480a      	ldr	r0, [pc, #40]	@ (80010a4 <StartDefaultTask+0x84>)
 800107a:	f006 fc07 	bl	800788c <iprintf>
      CAN_App_PrintStatus();
 800107e:	f7ff fd87 	bl	8000b90 <CAN_App_PrintStatus>
      printf("=== End of Status Report ===\r\n\r\n");
 8001082:	4809      	ldr	r0, [pc, #36]	@ (80010a8 <StartDefaultTask+0x88>)
 8001084:	f006 fc6a 	bl	800795c <puts>
      last_status_print = current_time;
 8001088:	68bb      	ldr	r3, [r7, #8]
 800108a:	617b      	str	r3, [r7, #20]
    }
    
    // 检查系统运行状态
    // 这里可以添加系统监控代码
    
    osDelay(500);  // 减少到500ms周期，提高响应性
 800108c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001090:	f003 fcd6 	bl	8004a40 <osDelay>
  {
 8001094:	e7d4      	b.n	8001040 <StartDefaultTask+0x20>
 8001096:	bf00      	nop
 8001098:	08008ecc 	.word	0x08008ecc
 800109c:	08008ee4 	.word	0x08008ee4
 80010a0:	08008f08 	.word	0x08008f08
 80010a4:	08008f44 	.word	0x08008f44
 80010a8:	08008f6c 	.word	0x08008f6c

080010ac <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 80010ac:	b580      	push	{r7, lr}
 80010ae:	b082      	sub	sp, #8
 80010b0:	af00      	add	r7, sp, #0
 80010b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  // 调用CAN发送任务主函数
  CAN_SendTask_Main(argument);
 80010b4:	6878      	ldr	r0, [r7, #4]
 80010b6:	f7ff fac5 	bl	8000644 <CAN_SendTask_Main>
  /* USER CODE END StartCANSendTask */
}
 80010ba:	bf00      	nop
 80010bc:	3708      	adds	r7, #8
 80010be:	46bd      	mov	sp, r7
 80010c0:	bd80      	pop	{r7, pc}

080010c2 <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 80010c2:	b580      	push	{r7, lr}
 80010c4:	b082      	sub	sp, #8
 80010c6:	af00      	add	r7, sp, #0
 80010c8:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  // 调用CAN接收任务主函数
  CAN_ReceiveTask_Main(argument);
 80010ca:	6878      	ldr	r0, [r7, #4]
 80010cc:	f7ff fbca 	bl	8000864 <CAN_ReceiveTask_Main>
  /* USER CODE END StartCANReceiveTask */
}
 80010d0:	bf00      	nop
 80010d2:	3708      	adds	r7, #8
 80010d4:	46bd      	mov	sp, r7
 80010d6:	bd80      	pop	{r7, pc}

080010d8 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80010d8:	b580      	push	{r7, lr}
 80010da:	b082      	sub	sp, #8
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 80010e0:	687b      	ldr	r3, [r7, #4]
 80010e2:	681b      	ldr	r3, [r3, #0]
 80010e4:	4a04      	ldr	r2, [pc, #16]	@ (80010f8 <HAL_TIM_PeriodElapsedCallback+0x20>)
 80010e6:	4293      	cmp	r3, r2
 80010e8:	d101      	bne.n	80010ee <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 80010ea:	f001 f9fd 	bl	80024e8 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 80010ee:	bf00      	nop
 80010f0:	3708      	adds	r7, #8
 80010f2:	46bd      	mov	sp, r7
 80010f4:	bd80      	pop	{r7, pc}
 80010f6:	bf00      	nop
 80010f8:	40010000 	.word	0x40010000

080010fc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80010fc:	b480      	push	{r7}
 80010fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001100:	b672      	cpsid	i
}
 8001102:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001104:	bf00      	nop
 8001106:	e7fd      	b.n	8001104 <Error_Handler+0x8>

08001108 <MCP2515_SPI_ReadWrite>:
  * @brief  SPI读写一个字节
  * @param  data: 要发送的数据
  * @retval 接收到的数据
  */
uint8_t MCP2515_SPI_ReadWrite(uint8_t data)
{
 8001108:	b580      	push	{r7, lr}
 800110a:	b088      	sub	sp, #32
 800110c:	af02      	add	r7, sp, #8
 800110e:	4603      	mov	r3, r0
 8001110:	71fb      	strb	r3, [r7, #7]
    uint8_t rx_data = 0;
 8001112:	2300      	movs	r3, #0
 8001114:	73fb      	strb	r3, [r7, #15]
    HAL_StatusTypeDef status;
    
    // 使用HAL库进行SPI通信
    status = HAL_SPI_TransmitReceive(&hspi1, &data, &rx_data, 1, MCP2515_SPI_TIMEOUT);
 8001116:	f107 020f 	add.w	r2, r7, #15
 800111a:	1df9      	adds	r1, r7, #7
 800111c:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001120:	9300      	str	r3, [sp, #0]
 8001122:	2301      	movs	r3, #1
 8001124:	4818      	ldr	r0, [pc, #96]	@ (8001188 <MCP2515_SPI_ReadWrite+0x80>)
 8001126:	f002 fa32 	bl	800358e <HAL_SPI_TransmitReceive>
 800112a:	4603      	mov	r3, r0
 800112c:	75fb      	strb	r3, [r7, #23]
    
    if (status != HAL_OK) {
 800112e:	7dfb      	ldrb	r3, [r7, #23]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d023      	beq.n	800117c <MCP2515_SPI_ReadWrite+0x74>
        printf("SPI Error: Status=%d, TX=0x%02X\r\n", status, data);
 8001134:	7dfb      	ldrb	r3, [r7, #23]
 8001136:	79fa      	ldrb	r2, [r7, #7]
 8001138:	4619      	mov	r1, r3
 800113a:	4814      	ldr	r0, [pc, #80]	@ (800118c <MCP2515_SPI_ReadWrite+0x84>)
 800113c:	f006 fba6 	bl	800788c <iprintf>
        
        // 检查具体错误类型
        if (status == HAL_TIMEOUT) {
 8001140:	7dfb      	ldrb	r3, [r7, #23]
 8001142:	2b03      	cmp	r3, #3
 8001144:	d103      	bne.n	800114e <MCP2515_SPI_ReadWrite+0x46>
            printf("SPI Timeout - Check MISO connection\r\n");
 8001146:	4812      	ldr	r0, [pc, #72]	@ (8001190 <MCP2515_SPI_ReadWrite+0x88>)
 8001148:	f006 fc08 	bl	800795c <puts>
 800114c:	e014      	b.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_ERROR) {
 800114e:	7dfb      	ldrb	r3, [r7, #23]
 8001150:	2b01      	cmp	r3, #1
 8001152:	d10b      	bne.n	800116c <MCP2515_SPI_ReadWrite+0x64>
            printf("SPI Hardware Error - Check configuration\r\n");
 8001154:	480f      	ldr	r0, [pc, #60]	@ (8001194 <MCP2515_SPI_ReadWrite+0x8c>)
 8001156:	f006 fc01 	bl	800795c <puts>
            uint32_t error = HAL_SPI_GetError(&hspi1);
 800115a:	480b      	ldr	r0, [pc, #44]	@ (8001188 <MCP2515_SPI_ReadWrite+0x80>)
 800115c:	f002 fbc0 	bl	80038e0 <HAL_SPI_GetError>
 8001160:	6138      	str	r0, [r7, #16]
            printf("SPI Error Code: 0x%08lX\r\n", error);
 8001162:	6939      	ldr	r1, [r7, #16]
 8001164:	480c      	ldr	r0, [pc, #48]	@ (8001198 <MCP2515_SPI_ReadWrite+0x90>)
 8001166:	f006 fb91 	bl	800788c <iprintf>
 800116a:	e005      	b.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
        } else if (status == HAL_BUSY) {
 800116c:	7dfb      	ldrb	r3, [r7, #23]
 800116e:	2b02      	cmp	r3, #2
 8001170:	d102      	bne.n	8001178 <MCP2515_SPI_ReadWrite+0x70>
            printf("SPI Busy - Previous operation not completed\r\n");
 8001172:	480a      	ldr	r0, [pc, #40]	@ (800119c <MCP2515_SPI_ReadWrite+0x94>)
 8001174:	f006 fbf2 	bl	800795c <puts>
        }
        
        return 0xFF;
 8001178:	23ff      	movs	r3, #255	@ 0xff
 800117a:	e000      	b.n	800117e <MCP2515_SPI_ReadWrite+0x76>
    }
    
    return rx_data;
 800117c:	7bfb      	ldrb	r3, [r7, #15]
}
 800117e:	4618      	mov	r0, r3
 8001180:	3718      	adds	r7, #24
 8001182:	46bd      	mov	sp, r7
 8001184:	bd80      	pop	{r7, pc}
 8001186:	bf00      	nop
 8001188:	20000098 	.word	0x20000098
 800118c:	08008f8c 	.word	0x08008f8c
 8001190:	08008fb0 	.word	0x08008fb0
 8001194:	08008fd8 	.word	0x08008fd8
 8001198:	08009004 	.word	0x08009004
 800119c:	08009020 	.word	0x08009020

080011a0 <MCP2515_CS_Low>:
  * @brief  拉低MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_Low(void)
{
 80011a0:	b580      	push	{r7, lr}
 80011a2:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 80011a4:	2200      	movs	r2, #0
 80011a6:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011aa:	4802      	ldr	r0, [pc, #8]	@ (80011b4 <MCP2515_CS_Low+0x14>)
 80011ac:	f001 fc5e 	bl	8002a6c <HAL_GPIO_WritePin>
}
 80011b0:	bf00      	nop
 80011b2:	bd80      	pop	{r7, pc}
 80011b4:	40020400 	.word	0x40020400

080011b8 <MCP2515_CS_High>:
  * @brief  拉高MCP2515片选信号
  * @param  None
  * @retval None
  */
void MCP2515_CS_High(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
 80011bc:	2201      	movs	r2, #1
 80011be:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 80011c2:	4802      	ldr	r0, [pc, #8]	@ (80011cc <MCP2515_CS_High+0x14>)
 80011c4:	f001 fc52 	bl	8002a6c <HAL_GPIO_WritePin>
}
 80011c8:	bf00      	nop
 80011ca:	bd80      	pop	{r7, pc}
 80011cc:	40020400 	.word	0x40020400

080011d0 <MCP2515_ReadRegister>:
  * @brief  读取MCP2515寄存器
  * @param  address: 寄存器地址
  * @retval 寄存器值
  */
uint8_t MCP2515_ReadRegister(uint8_t address)
{
 80011d0:	b580      	push	{r7, lr}
 80011d2:	b084      	sub	sp, #16
 80011d4:	af00      	add	r7, sp, #0
 80011d6:	4603      	mov	r3, r0
 80011d8:	71fb      	strb	r3, [r7, #7]
    uint8_t data;
    
    MCP2515_CS_Low();                           // 拉低片选
 80011da:	f7ff ffe1 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ);    // 发送读指令
 80011de:	2003      	movs	r0, #3
 80011e0:	f7ff ff92 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 80011e4:	79fb      	ldrb	r3, [r7, #7]
 80011e6:	4618      	mov	r0, r3
 80011e8:	f7ff ff8e 	bl	8001108 <MCP2515_SPI_ReadWrite>
    data = MCP2515_SPI_ReadWrite(0x00);         // 读取数据
 80011ec:	2000      	movs	r0, #0
 80011ee:	f7ff ff8b 	bl	8001108 <MCP2515_SPI_ReadWrite>
 80011f2:	4603      	mov	r3, r0
 80011f4:	73fb      	strb	r3, [r7, #15]
    MCP2515_CS_High();                          // 拉高片选
 80011f6:	f7ff ffdf 	bl	80011b8 <MCP2515_CS_High>
    
    return data;
 80011fa:	7bfb      	ldrb	r3, [r7, #15]
}
 80011fc:	4618      	mov	r0, r3
 80011fe:	3710      	adds	r7, #16
 8001200:	46bd      	mov	sp, r7
 8001202:	bd80      	pop	{r7, pc}

08001204 <MCP2515_WriteRegister>:
  * @param  address: 寄存器地址
  * @param  data: 要写入的数据
  * @retval None
  */
void MCP2515_WriteRegister(uint8_t address, uint8_t data)
{
 8001204:	b580      	push	{r7, lr}
 8001206:	b082      	sub	sp, #8
 8001208:	af00      	add	r7, sp, #0
 800120a:	4603      	mov	r3, r0
 800120c:	460a      	mov	r2, r1
 800120e:	71fb      	strb	r3, [r7, #7]
 8001210:	4613      	mov	r3, r2
 8001212:	71bb      	strb	r3, [r7, #6]
    MCP2515_CS_Low();                           // 拉低片选
 8001214:	f7ff ffc4 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_WRITE);   // 发送写指令
 8001218:	2002      	movs	r0, #2
 800121a:	f7ff ff75 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);             // 发送寄存器地址
 800121e:	79fb      	ldrb	r3, [r7, #7]
 8001220:	4618      	mov	r0, r3
 8001222:	f7ff ff71 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                // 发送数据
 8001226:	79bb      	ldrb	r3, [r7, #6]
 8001228:	4618      	mov	r0, r3
 800122a:	f7ff ff6d 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                          // 拉高片选
 800122e:	f7ff ffc3 	bl	80011b8 <MCP2515_CS_High>
}
 8001232:	bf00      	nop
 8001234:	3708      	adds	r7, #8
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}

0800123a <MCP2515_ModifyRegister>:
  * @param  mask: 位掩码
  * @param  data: 新的位值
  * @retval None
  */
void MCP2515_ModifyRegister(uint8_t address, uint8_t mask, uint8_t data)
{
 800123a:	b580      	push	{r7, lr}
 800123c:	b082      	sub	sp, #8
 800123e:	af00      	add	r7, sp, #0
 8001240:	4603      	mov	r3, r0
 8001242:	71fb      	strb	r3, [r7, #7]
 8001244:	460b      	mov	r3, r1
 8001246:	71bb      	strb	r3, [r7, #6]
 8001248:	4613      	mov	r3, r2
 800124a:	717b      	strb	r3, [r7, #5]
    MCP2515_CS_Low();                               // 拉低片选
 800124c:	f7ff ffa8 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_BIT_MODIFY);  // 发送位修改指令
 8001250:	2005      	movs	r0, #5
 8001252:	f7ff ff59 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(address);                 // 发送寄存器地址
 8001256:	79fb      	ldrb	r3, [r7, #7]
 8001258:	4618      	mov	r0, r3
 800125a:	f7ff ff55 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(mask);                    // 发送位掩码
 800125e:	79bb      	ldrb	r3, [r7, #6]
 8001260:	4618      	mov	r0, r3
 8001262:	f7ff ff51 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_SPI_ReadWrite(data);                    // 发送新数据
 8001266:	797b      	ldrb	r3, [r7, #5]
 8001268:	4618      	mov	r0, r3
 800126a:	f7ff ff4d 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();                              // 拉高片选
 800126e:	f7ff ffa3 	bl	80011b8 <MCP2515_CS_High>
}
 8001272:	bf00      	nop
 8001274:	3708      	adds	r7, #8
 8001276:	46bd      	mov	sp, r7
 8001278:	bd80      	pop	{r7, pc}
	...

0800127c <MCP2515_Reset>:
  * @brief  复位MCP2515
  * @param  None
  * @retval None
  */
void MCP2515_Reset(void)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b082      	sub	sp, #8
 8001280:	af00      	add	r7, sp, #0
    printf("Starting MCP2515 reset...\r\n");
 8001282:	481f      	ldr	r0, [pc, #124]	@ (8001300 <MCP2515_Reset+0x84>)
 8001284:	f006 fb6a 	bl	800795c <puts>
    
    MCP2515_CS_Low();
 8001288:	f7ff ff8a 	bl	80011a0 <MCP2515_CS_Low>
    printf("CS pulled low\r\n");
 800128c:	481d      	ldr	r0, [pc, #116]	@ (8001304 <MCP2515_Reset+0x88>)
 800128e:	f006 fb65 	bl	800795c <puts>
    
    uint8_t result = MCP2515_SPI_ReadWrite(MCP2515_CMD_RESET);
 8001292:	20c0      	movs	r0, #192	@ 0xc0
 8001294:	f7ff ff38 	bl	8001108 <MCP2515_SPI_ReadWrite>
 8001298:	4603      	mov	r3, r0
 800129a:	71fb      	strb	r3, [r7, #7]
    printf("Reset command sent, SPI result: 0x%02X\r\n", result);
 800129c:	79fb      	ldrb	r3, [r7, #7]
 800129e:	4619      	mov	r1, r3
 80012a0:	4819      	ldr	r0, [pc, #100]	@ (8001308 <MCP2515_Reset+0x8c>)
 80012a2:	f006 faf3 	bl	800788c <iprintf>
    
    MCP2515_CS_High();
 80012a6:	f7ff ff87 	bl	80011b8 <MCP2515_CS_High>
    printf("CS pulled high\r\n");
 80012aa:	4818      	ldr	r0, [pc, #96]	@ (800130c <MCP2515_Reset+0x90>)
 80012ac:	f006 fb56 	bl	800795c <puts>
    
    osDelay(20);  // 增加延时确保复位完成
 80012b0:	2014      	movs	r0, #20
 80012b2:	f003 fbc5 	bl	8004a40 <osDelay>
    printf("Reset delay completed\r\n");
 80012b6:	4816      	ldr	r0, [pc, #88]	@ (8001310 <MCP2515_Reset+0x94>)
 80012b8:	f006 fb50 	bl	800795c <puts>
    
    // 验证复位状态
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80012bc:	200e      	movs	r0, #14
 80012be:	f7ff ff87 	bl	80011d0 <MCP2515_ReadRegister>
 80012c2:	4603      	mov	r3, r0
 80012c4:	71bb      	strb	r3, [r7, #6]
    printf("CANSTAT after reset: 0x%02X (Expected: 0x80)\r\n", canstat);
 80012c6:	79bb      	ldrb	r3, [r7, #6]
 80012c8:	4619      	mov	r1, r3
 80012ca:	4812      	ldr	r0, [pc, #72]	@ (8001314 <MCP2515_Reset+0x98>)
 80012cc:	f006 fade 	bl	800788c <iprintf>
    
    if (canstat == 0x80) {
 80012d0:	79bb      	ldrb	r3, [r7, #6]
 80012d2:	2b80      	cmp	r3, #128	@ 0x80
 80012d4:	d103      	bne.n	80012de <MCP2515_Reset+0x62>
        printf("✓ MCP2515 reset successful\r\n");
 80012d6:	4810      	ldr	r0, [pc, #64]	@ (8001318 <MCP2515_Reset+0x9c>)
 80012d8:	f006 fb40 	bl	800795c <puts>
    } else if (canstat == 0xFF) {
        printf("✗ No SPI response - Check MISO connection\r\n");
    } else {
        printf("✗ Unexpected reset state: 0x%02X\r\n", canstat);
    }
}
 80012dc:	e00b      	b.n	80012f6 <MCP2515_Reset+0x7a>
    } else if (canstat == 0xFF) {
 80012de:	79bb      	ldrb	r3, [r7, #6]
 80012e0:	2bff      	cmp	r3, #255	@ 0xff
 80012e2:	d103      	bne.n	80012ec <MCP2515_Reset+0x70>
        printf("✗ No SPI response - Check MISO connection\r\n");
 80012e4:	480d      	ldr	r0, [pc, #52]	@ (800131c <MCP2515_Reset+0xa0>)
 80012e6:	f006 fb39 	bl	800795c <puts>
}
 80012ea:	e004      	b.n	80012f6 <MCP2515_Reset+0x7a>
        printf("✗ Unexpected reset state: 0x%02X\r\n", canstat);
 80012ec:	79bb      	ldrb	r3, [r7, #6]
 80012ee:	4619      	mov	r1, r3
 80012f0:	480b      	ldr	r0, [pc, #44]	@ (8001320 <MCP2515_Reset+0xa4>)
 80012f2:	f006 facb 	bl	800788c <iprintf>
}
 80012f6:	bf00      	nop
 80012f8:	3708      	adds	r7, #8
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	08009050 	.word	0x08009050
 8001304:	0800906c 	.word	0x0800906c
 8001308:	0800907c 	.word	0x0800907c
 800130c:	080090a8 	.word	0x080090a8
 8001310:	080090b8 	.word	0x080090b8
 8001314:	080090d0 	.word	0x080090d0
 8001318:	08009100 	.word	0x08009100
 800131c:	08009120 	.word	0x08009120
 8001320:	08009150 	.word	0x08009150

08001324 <MCP2515_SetMode>:
  * @brief  设置MCP2515工作模式
  * @param  mode: 工作模式
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SetMode(uint8_t mode)
{
 8001324:	b580      	push	{r7, lr}
 8001326:	b082      	sub	sp, #8
 8001328:	af00      	add	r7, sp, #0
 800132a:	4603      	mov	r3, r0
 800132c:	71fb      	strb	r3, [r7, #7]
    // 修改CANCTRL寄存器的模式位
    MCP2515_ModifyRegister(MCP2515_CANCTRL, 0xE0, mode);
 800132e:	79fb      	ldrb	r3, [r7, #7]
 8001330:	461a      	mov	r2, r3
 8001332:	21e0      	movs	r1, #224	@ 0xe0
 8001334:	200f      	movs	r0, #15
 8001336:	f7ff ff80 	bl	800123a <MCP2515_ModifyRegister>
    
    // 等待模式切换完成
    return MCP2515_WaitForMode(mode, MCP2515_MODE_TIMEOUT);
 800133a:	79fb      	ldrb	r3, [r7, #7]
 800133c:	2132      	movs	r1, #50	@ 0x32
 800133e:	4618      	mov	r0, r3
 8001340:	f000 faaa 	bl	8001898 <MCP2515_WaitForMode>
 8001344:	4603      	mov	r3, r0
}
 8001346:	4618      	mov	r0, r3
 8001348:	3708      	adds	r7, #8
 800134a:	46bd      	mov	sp, r7
 800134c:	bd80      	pop	{r7, pc}

0800134e <MCP2515_GetMode>:
  * @brief  获取MCP2515当前工作模式
  * @param  None
  * @retval 当前工作模式
  */
uint8_t MCP2515_GetMode(void)
{
 800134e:	b580      	push	{r7, lr}
 8001350:	b082      	sub	sp, #8
 8001352:	af00      	add	r7, sp, #0
    uint8_t mode = MCP2515_ReadRegister(MCP2515_CANSTAT);
 8001354:	200e      	movs	r0, #14
 8001356:	f7ff ff3b 	bl	80011d0 <MCP2515_ReadRegister>
 800135a:	4603      	mov	r3, r0
 800135c:	71fb      	strb	r3, [r7, #7]
    return (mode & 0xE0);  // 返回模式位
 800135e:	79fb      	ldrb	r3, [r7, #7]
 8001360:	f023 031f 	bic.w	r3, r3, #31
 8001364:	b2db      	uxtb	r3, r3
}
 8001366:	4618      	mov	r0, r3
 8001368:	3708      	adds	r7, #8
 800136a:	46bd      	mov	sp, r7
 800136c:	bd80      	pop	{r7, pc}
	...

08001370 <MCP2515_SetBaudRate>:
  * @brief  设置CAN波特率
  * @param  baudrate: 波特率选择 (MCP2515_BAUD_125K ~ MCP2515_BAUD_1000K)
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetBaudRate(uint8_t baudrate)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b082      	sub	sp, #8
 8001374:	af00      	add	r7, sp, #0
 8001376:	4603      	mov	r3, r0
 8001378:	71fb      	strb	r3, [r7, #7]
    if (baudrate > MCP2515_BAUD_1000K) {
 800137a:	79fb      	ldrb	r3, [r7, #7]
 800137c:	2b03      	cmp	r3, #3
 800137e:	d901      	bls.n	8001384 <MCP2515_SetBaudRate+0x14>
        return MCP2515_ERROR;  // 无效的波特率参数
 8001380:	2301      	movs	r3, #1
 8001382:	e02b      	b.n	80013dc <MCP2515_SetBaudRate+0x6c>
    }
    
    // 必须在配置模式下设置波特率
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001384:	2080      	movs	r0, #128	@ 0x80
 8001386:	f7ff ffcd 	bl	8001324 <MCP2515_SetMode>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MCP2515_SetBaudRate+0x24>
        return MCP2515_ERROR;
 8001390:	2301      	movs	r3, #1
 8001392:	e023      	b.n	80013dc <MCP2515_SetBaudRate+0x6c>
    }
    
    // 写入波特率配置寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, mcp2515_baud_config[baudrate][0]);
 8001394:	79fa      	ldrb	r2, [r7, #7]
 8001396:	4913      	ldr	r1, [pc, #76]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 8001398:	4613      	mov	r3, r2
 800139a:	005b      	lsls	r3, r3, #1
 800139c:	4413      	add	r3, r2
 800139e:	440b      	add	r3, r1
 80013a0:	781b      	ldrb	r3, [r3, #0]
 80013a2:	4619      	mov	r1, r3
 80013a4:	202a      	movs	r0, #42	@ 0x2a
 80013a6:	f7ff ff2d 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF2, mcp2515_baud_config[baudrate][1]);
 80013aa:	79fa      	ldrb	r2, [r7, #7]
 80013ac:	490d      	ldr	r1, [pc, #52]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 80013ae:	4613      	mov	r3, r2
 80013b0:	005b      	lsls	r3, r3, #1
 80013b2:	4413      	add	r3, r2
 80013b4:	440b      	add	r3, r1
 80013b6:	3301      	adds	r3, #1
 80013b8:	781b      	ldrb	r3, [r3, #0]
 80013ba:	4619      	mov	r1, r3
 80013bc:	2029      	movs	r0, #41	@ 0x29
 80013be:	f7ff ff21 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_CNF3, mcp2515_baud_config[baudrate][2]);
 80013c2:	79fa      	ldrb	r2, [r7, #7]
 80013c4:	4907      	ldr	r1, [pc, #28]	@ (80013e4 <MCP2515_SetBaudRate+0x74>)
 80013c6:	4613      	mov	r3, r2
 80013c8:	005b      	lsls	r3, r3, #1
 80013ca:	4413      	add	r3, r2
 80013cc:	440b      	add	r3, r1
 80013ce:	3302      	adds	r3, #2
 80013d0:	781b      	ldrb	r3, [r3, #0]
 80013d2:	4619      	mov	r1, r3
 80013d4:	2028      	movs	r0, #40	@ 0x28
 80013d6:	f7ff ff15 	bl	8001204 <MCP2515_WriteRegister>
    
    return MCP2515_OK;
 80013da:	2300      	movs	r3, #0
}
 80013dc:	4618      	mov	r0, r3
 80013de:	3708      	adds	r7, #8
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	08009f70 	.word	0x08009f70

080013e8 <MCP2515_Init>:
  * @brief  初始化MCP2515
  * @param  baudrate: CAN波特率
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_Init(uint8_t baudrate)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b082      	sub	sp, #8
 80013ec:	af00      	add	r7, sp, #0
 80013ee:	4603      	mov	r3, r0
 80013f0:	71fb      	strb	r3, [r7, #7]
    // 复位MCP2515
    MCP2515_Reset();
 80013f2:	f7ff ff43 	bl	800127c <MCP2515_Reset>
    
    // 检查MCP2515是否响应
    if (MCP2515_SelfTest() != MCP2515_OK) {
 80013f6:	f000 f9ab 	bl	8001750 <MCP2515_SelfTest>
 80013fa:	4603      	mov	r3, r0
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d001      	beq.n	8001404 <MCP2515_Init+0x1c>
        return MCP2515_ERROR;
 8001400:	2301      	movs	r3, #1
 8001402:	e02c      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 设置为配置模式
    if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 8001404:	2080      	movs	r0, #128	@ 0x80
 8001406:	f7ff ff8d 	bl	8001324 <MCP2515_SetMode>
 800140a:	4603      	mov	r3, r0
 800140c:	2b00      	cmp	r3, #0
 800140e:	d001      	beq.n	8001414 <MCP2515_Init+0x2c>
        return MCP2515_ERROR;
 8001410:	2301      	movs	r3, #1
 8001412:	e024      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 设置波特率
    if (MCP2515_SetBaudRate(baudrate) != MCP2515_OK) {
 8001414:	79fb      	ldrb	r3, [r7, #7]
 8001416:	4618      	mov	r0, r3
 8001418:	f7ff ffaa 	bl	8001370 <MCP2515_SetBaudRate>
 800141c:	4603      	mov	r3, r0
 800141e:	2b00      	cmp	r3, #0
 8001420:	d001      	beq.n	8001426 <MCP2515_Init+0x3e>
        return MCP2515_ERROR;
 8001422:	2301      	movs	r3, #1
 8001424:	e01b      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    // 配置接收缓冲区控制寄存器
    MCP2515_WriteRegister(MCP2515_RXB0CTRL, 0x60);  // 接收所有消息
 8001426:	2160      	movs	r1, #96	@ 0x60
 8001428:	2060      	movs	r0, #96	@ 0x60
 800142a:	f7ff feeb 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(MCP2515_RXB1CTRL, 0x60);  // 接收所有消息
 800142e:	2160      	movs	r1, #96	@ 0x60
 8001430:	2070      	movs	r0, #112	@ 0x70
 8001432:	f7ff fee7 	bl	8001204 <MCP2515_WriteRegister>
    
    // 清除所有中断标志
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8001436:	2100      	movs	r1, #0
 8001438:	202c      	movs	r0, #44	@ 0x2c
 800143a:	f7ff fee3 	bl	8001204 <MCP2515_WriteRegister>
    
    // 启用接收中断
    MCP2515_WriteRegister(MCP2515_CANINTE, MCP2515_INT_RX0IF | MCP2515_INT_RX1IF);
 800143e:	2103      	movs	r1, #3
 8001440:	202b      	movs	r0, #43	@ 0x2b
 8001442:	f7ff fedf 	bl	8001204 <MCP2515_WriteRegister>
    
    // 切换到正常模式
    if (MCP2515_SetMode(MCP2515_MODE_NORMAL) != MCP2515_OK) {
 8001446:	2000      	movs	r0, #0
 8001448:	f7ff ff6c 	bl	8001324 <MCP2515_SetMode>
 800144c:	4603      	mov	r3, r0
 800144e:	2b00      	cmp	r3, #0
 8001450:	d001      	beq.n	8001456 <MCP2515_Init+0x6e>
        return MCP2515_ERROR;
 8001452:	2301      	movs	r3, #1
 8001454:	e003      	b.n	800145e <MCP2515_Init+0x76>
    }
    
    mcp2515_initialized = 1;  // 设置初始化标志
 8001456:	4b04      	ldr	r3, [pc, #16]	@ (8001468 <MCP2515_Init+0x80>)
 8001458:	2201      	movs	r2, #1
 800145a:	701a      	strb	r2, [r3, #0]
    
    return MCP2515_OK;
 800145c:	2300      	movs	r3, #0
}
 800145e:	4618      	mov	r0, r3
 8001460:	3708      	adds	r7, #8
 8001462:	46bd      	mov	sp, r7
 8001464:	bd80      	pop	{r7, pc}
 8001466:	bf00      	nop
 8001468:	20000148 	.word	0x20000148

0800146c <MCP2515_SetMask>:
  * @param  mask_value: 掩码值
  * @param  extended: 0=标准帧, 1=扩展帧
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SetMask(uint8_t mask_num, uint32_t mask_value, uint8_t extended)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	b086      	sub	sp, #24
 8001470:	af00      	add	r7, sp, #0
 8001472:	4603      	mov	r3, r0
 8001474:	6039      	str	r1, [r7, #0]
 8001476:	71fb      	strb	r3, [r7, #7]
 8001478:	4613      	mov	r3, r2
 800147a:	71bb      	strb	r3, [r7, #6]
    uint8_t sidh, sidl, eid8, eid0;
    uint8_t mask_regs[2][4] = {
 800147c:	4a3c      	ldr	r2, [pc, #240]	@ (8001570 <MCP2515_SetMask+0x104>)
 800147e:	f107 0308 	add.w	r3, r7, #8
 8001482:	e892 0003 	ldmia.w	r2, {r0, r1}
 8001486:	e883 0003 	stmia.w	r3, {r0, r1}
        {0x20, 0x21, 0x22, 0x23},  // RXM0
        {0x24, 0x25, 0x26, 0x27}   // RXM1
    };
    
    if (mask_num > 1) {
 800148a:	79fb      	ldrb	r3, [r7, #7]
 800148c:	2b01      	cmp	r3, #1
 800148e:	d901      	bls.n	8001494 <MCP2515_SetMask+0x28>
        return MCP2515_ERROR;
 8001490:	2301      	movs	r3, #1
 8001492:	e069      	b.n	8001568 <MCP2515_SetMask+0xfc>
    }
    
    // 必须在配置模式下设置掩码
    uint8_t current_mode = MCP2515_GetMode();
 8001494:	f7ff ff5b 	bl	800134e <MCP2515_GetMode>
 8001498:	4603      	mov	r3, r0
 800149a:	74fb      	strb	r3, [r7, #19]
    if (current_mode != MCP2515_MODE_CONFIG) {
 800149c:	7cfb      	ldrb	r3, [r7, #19]
 800149e:	2b80      	cmp	r3, #128	@ 0x80
 80014a0:	d007      	beq.n	80014b2 <MCP2515_SetMask+0x46>
        if (MCP2515_SetMode(MCP2515_MODE_CONFIG) != MCP2515_OK) {
 80014a2:	2080      	movs	r0, #128	@ 0x80
 80014a4:	f7ff ff3e 	bl	8001324 <MCP2515_SetMode>
 80014a8:	4603      	mov	r3, r0
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d001      	beq.n	80014b2 <MCP2515_SetMask+0x46>
            return MCP2515_ERROR;
 80014ae:	2301      	movs	r3, #1
 80014b0:	e05a      	b.n	8001568 <MCP2515_SetMask+0xfc>
        }
    }
    
    if (extended) {
 80014b2:	79bb      	ldrb	r3, [r7, #6]
 80014b4:	2b00      	cmp	r3, #0
 80014b6:	d018      	beq.n	80014ea <MCP2515_SetMask+0x7e>
        // 扩展帧掩码配置
        sidh = (uint8_t)(mask_value >> 21);
 80014b8:	683b      	ldr	r3, [r7, #0]
 80014ba:	0d5b      	lsrs	r3, r3, #21
 80014bc:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)(((mask_value >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((mask_value >> 16) & 0x03);
 80014be:	683b      	ldr	r3, [r7, #0]
 80014c0:	0c9b      	lsrs	r3, r3, #18
 80014c2:	b2db      	uxtb	r3, r3
 80014c4:	015b      	lsls	r3, r3, #5
 80014c6:	b2da      	uxtb	r2, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	0c1b      	lsrs	r3, r3, #16
 80014cc:	b2db      	uxtb	r3, r3
 80014ce:	f003 0303 	and.w	r3, r3, #3
 80014d2:	b2db      	uxtb	r3, r3
 80014d4:	4313      	orrs	r3, r2
 80014d6:	b2db      	uxtb	r3, r3
 80014d8:	f043 0308 	orr.w	r3, r3, #8
 80014dc:	75bb      	strb	r3, [r7, #22]
        eid8 = (uint8_t)(mask_value >> 8);
 80014de:	683b      	ldr	r3, [r7, #0]
 80014e0:	0a1b      	lsrs	r3, r3, #8
 80014e2:	757b      	strb	r3, [r7, #21]
        eid0 = (uint8_t)mask_value;
 80014e4:	683b      	ldr	r3, [r7, #0]
 80014e6:	753b      	strb	r3, [r7, #20]
 80014e8:	e00a      	b.n	8001500 <MCP2515_SetMask+0x94>
    } else {
        // 标准帧掩码配置
        sidh = (uint8_t)(mask_value >> 3);
 80014ea:	683b      	ldr	r3, [r7, #0]
 80014ec:	08db      	lsrs	r3, r3, #3
 80014ee:	75fb      	strb	r3, [r7, #23]
        sidl = (uint8_t)((mask_value & 0x07) << 5);
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	b2db      	uxtb	r3, r3
 80014f4:	015b      	lsls	r3, r3, #5
 80014f6:	75bb      	strb	r3, [r7, #22]
        eid8 = 0;
 80014f8:	2300      	movs	r3, #0
 80014fa:	757b      	strb	r3, [r7, #21]
        eid0 = 0;
 80014fc:	2300      	movs	r3, #0
 80014fe:	753b      	strb	r3, [r7, #20]
    }
    
    // 写入掩码寄存器
    MCP2515_WriteRegister(mask_regs[mask_num][0], sidh);
 8001500:	79fb      	ldrb	r3, [r7, #7]
 8001502:	009b      	lsls	r3, r3, #2
 8001504:	3318      	adds	r3, #24
 8001506:	443b      	add	r3, r7
 8001508:	f813 3c10 	ldrb.w	r3, [r3, #-16]
 800150c:	7dfa      	ldrb	r2, [r7, #23]
 800150e:	4611      	mov	r1, r2
 8001510:	4618      	mov	r0, r3
 8001512:	f7ff fe77 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][1], sidl);
 8001516:	79fb      	ldrb	r3, [r7, #7]
 8001518:	009b      	lsls	r3, r3, #2
 800151a:	3318      	adds	r3, #24
 800151c:	443b      	add	r3, r7
 800151e:	f813 3c0f 	ldrb.w	r3, [r3, #-15]
 8001522:	7dba      	ldrb	r2, [r7, #22]
 8001524:	4611      	mov	r1, r2
 8001526:	4618      	mov	r0, r3
 8001528:	f7ff fe6c 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][2], eid8);
 800152c:	79fb      	ldrb	r3, [r7, #7]
 800152e:	009b      	lsls	r3, r3, #2
 8001530:	3318      	adds	r3, #24
 8001532:	443b      	add	r3, r7
 8001534:	f813 3c0e 	ldrb.w	r3, [r3, #-14]
 8001538:	7d7a      	ldrb	r2, [r7, #21]
 800153a:	4611      	mov	r1, r2
 800153c:	4618      	mov	r0, r3
 800153e:	f7ff fe61 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(mask_regs[mask_num][3], eid0);
 8001542:	79fb      	ldrb	r3, [r7, #7]
 8001544:	009b      	lsls	r3, r3, #2
 8001546:	3318      	adds	r3, #24
 8001548:	443b      	add	r3, r7
 800154a:	f813 3c0d 	ldrb.w	r3, [r3, #-13]
 800154e:	7d3a      	ldrb	r2, [r7, #20]
 8001550:	4611      	mov	r1, r2
 8001552:	4618      	mov	r0, r3
 8001554:	f7ff fe56 	bl	8001204 <MCP2515_WriteRegister>
    
    // 恢复原来的模式
    if (current_mode != MCP2515_MODE_CONFIG) {
 8001558:	7cfb      	ldrb	r3, [r7, #19]
 800155a:	2b80      	cmp	r3, #128	@ 0x80
 800155c:	d003      	beq.n	8001566 <MCP2515_SetMask+0xfa>
        MCP2515_SetMode(current_mode);
 800155e:	7cfb      	ldrb	r3, [r7, #19]
 8001560:	4618      	mov	r0, r3
 8001562:	f7ff fedf 	bl	8001324 <MCP2515_SetMode>
    }
    
    return MCP2515_OK;
 8001566:	2300      	movs	r3, #0
}
 8001568:	4618      	mov	r0, r3
 800156a:	3718      	adds	r7, #24
 800156c:	46bd      	mov	sp, r7
 800156e:	bd80      	pop	{r7, pc}
 8001570:	08009190 	.word	0x08009190

08001574 <MCP2515_SendMessage>:
  * @brief  发送CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败, MCP2515_TIMEOUT: 超时
  */
uint8_t MCP2515_SendMessage(MCP2515_CANMessage_t *message)
{
 8001574:	b580      	push	{r7, lr}
 8001576:	b084      	sub	sp, #16
 8001578:	af00      	add	r7, sp, #0
 800157a:	6078      	str	r0, [r7, #4]
    uint8_t buffer;
    uint32_t timeout = 0;
 800157c:	2300      	movs	r3, #0
 800157e:	60fb      	str	r3, [r7, #12]
    
    if (!mcp2515_initialized || message == NULL) {
 8001580:	4b26      	ldr	r3, [pc, #152]	@ (800161c <MCP2515_SendMessage+0xa8>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	2b00      	cmp	r3, #0
 8001586:	d002      	beq.n	800158e <MCP2515_SendMessage+0x1a>
 8001588:	687b      	ldr	r3, [r7, #4]
 800158a:	2b00      	cmp	r3, #0
 800158c:	d101      	bne.n	8001592 <MCP2515_SendMessage+0x1e>
        return MCP2515_ERROR;
 800158e:	2301      	movs	r3, #1
 8001590:	e03f      	b.n	8001612 <MCP2515_SendMessage+0x9e>
    }
    
    // 查找空闲的发送缓冲区
    buffer = MCP2515_GetTxBuffer();
 8001592:	f000 f9a4 	bl	80018de <MCP2515_GetTxBuffer>
 8001596:	4603      	mov	r3, r0
 8001598:	72fb      	strb	r3, [r7, #11]
    if (buffer == 0xFF) {
 800159a:	7afb      	ldrb	r3, [r7, #11]
 800159c:	2bff      	cmp	r3, #255	@ 0xff
 800159e:	d101      	bne.n	80015a4 <MCP2515_SendMessage+0x30>
        return MCP2515_ERROR;  // 没有空闲的发送缓冲区
 80015a0:	2301      	movs	r3, #1
 80015a2:	e036      	b.n	8001612 <MCP2515_SendMessage+0x9e>
    }
    
    // 加载消息到发送缓冲区
    MCP2515_LoadTxBuffer(buffer, message);
 80015a4:	7afb      	ldrb	r3, [r7, #11]
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	4618      	mov	r0, r3
 80015aa:	f000 f9b9 	bl	8001920 <MCP2515_LoadTxBuffer>
    
    // 请求发送
    MCP2515_CS_Low();
 80015ae:	f7ff fdf7 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_RTS | (1 << buffer));
 80015b2:	7afb      	ldrb	r3, [r7, #11]
 80015b4:	2201      	movs	r2, #1
 80015b6:	fa02 f303 	lsl.w	r3, r2, r3
 80015ba:	b25b      	sxtb	r3, r3
 80015bc:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80015c0:	b25b      	sxtb	r3, r3
 80015c2:	b2db      	uxtb	r3, r3
 80015c4:	4618      	mov	r0, r3
 80015c6:	f7ff fd9f 	bl	8001108 <MCP2515_SPI_ReadWrite>
    MCP2515_CS_High();
 80015ca:	f7ff fdf5 	bl	80011b8 <MCP2515_CS_High>
    
    // 等待发送完成
    while (timeout < 1000) {
 80015ce:	e01b      	b.n	8001608 <MCP2515_SendMessage+0x94>
        uint8_t status = MCP2515_GetInterruptFlags();
 80015d0:	f000 f893 	bl	80016fa <MCP2515_GetInterruptFlags>
 80015d4:	4603      	mov	r3, r0
 80015d6:	72bb      	strb	r3, [r7, #10]
        if (status & (MCP2515_INT_TX0IF << buffer)) {
 80015d8:	7aba      	ldrb	r2, [r7, #10]
 80015da:	7afb      	ldrb	r3, [r7, #11]
 80015dc:	2104      	movs	r1, #4
 80015de:	fa01 f303 	lsl.w	r3, r1, r3
 80015e2:	4013      	ands	r3, r2
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d009      	beq.n	80015fc <MCP2515_SendMessage+0x88>
            // 清除发送完成中断标志
            MCP2515_ClearInterruptFlags(MCP2515_INT_TX0IF << buffer);
 80015e8:	7afb      	ldrb	r3, [r7, #11]
 80015ea:	2204      	movs	r2, #4
 80015ec:	fa02 f303 	lsl.w	r3, r2, r3
 80015f0:	b2db      	uxtb	r3, r3
 80015f2:	4618      	mov	r0, r3
 80015f4:	f000 f889 	bl	800170a <MCP2515_ClearInterruptFlags>
            return MCP2515_OK;
 80015f8:	2300      	movs	r3, #0
 80015fa:	e00a      	b.n	8001612 <MCP2515_SendMessage+0x9e>
        }
        osDelay(1);
 80015fc:	2001      	movs	r0, #1
 80015fe:	f003 fa1f 	bl	8004a40 <osDelay>
        timeout++;
 8001602:	68fb      	ldr	r3, [r7, #12]
 8001604:	3301      	adds	r3, #1
 8001606:	60fb      	str	r3, [r7, #12]
    while (timeout < 1000) {
 8001608:	68fb      	ldr	r3, [r7, #12]
 800160a:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800160e:	d3df      	bcc.n	80015d0 <MCP2515_SendMessage+0x5c>
    }
    
    return MCP2515_TIMEOUT;
 8001610:	2302      	movs	r3, #2
}
 8001612:	4618      	mov	r0, r3
 8001614:	3710      	adds	r7, #16
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000148 	.word	0x20000148

08001620 <MCP2515_ReceiveMessage>:
  * @brief  接收CAN消息
  * @param  message: CAN消息结构体指针
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_ReceiveMessage(MCP2515_CANMessage_t *message)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
    uint8_t status;
    
    if (!mcp2515_initialized || message == NULL) {
 8001628:	4b16      	ldr	r3, [pc, #88]	@ (8001684 <MCP2515_ReceiveMessage+0x64>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d002      	beq.n	8001636 <MCP2515_ReceiveMessage+0x16>
 8001630:	687b      	ldr	r3, [r7, #4]
 8001632:	2b00      	cmp	r3, #0
 8001634:	d101      	bne.n	800163a <MCP2515_ReceiveMessage+0x1a>
        return MCP2515_ERROR;
 8001636:	2301      	movs	r3, #1
 8001638:	e020      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    }
    
    status = MCP2515_GetInterruptFlags();
 800163a:	f000 f85e 	bl	80016fa <MCP2515_GetInterruptFlags>
 800163e:	4603      	mov	r3, r0
 8001640:	73fb      	strb	r3, [r7, #15]
    
    if (status & MCP2515_INT_RX0IF) {
 8001642:	7bfb      	ldrb	r3, [r7, #15]
 8001644:	f003 0301 	and.w	r3, r3, #1
 8001648:	2b00      	cmp	r3, #0
 800164a:	d008      	beq.n	800165e <MCP2515_ReceiveMessage+0x3e>
        // 从接收缓冲区0读取消息
        MCP2515_ReadRxBuffer(0, message);
 800164c:	6879      	ldr	r1, [r7, #4]
 800164e:	2000      	movs	r0, #0
 8001650:	f000 f9f4 	bl	8001a3c <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX0IF);
 8001654:	2001      	movs	r0, #1
 8001656:	f000 f858 	bl	800170a <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 800165a:	2300      	movs	r3, #0
 800165c:	e00e      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    } else if (status & MCP2515_INT_RX1IF) {
 800165e:	7bfb      	ldrb	r3, [r7, #15]
 8001660:	f003 0302 	and.w	r3, r3, #2
 8001664:	2b00      	cmp	r3, #0
 8001666:	d008      	beq.n	800167a <MCP2515_ReceiveMessage+0x5a>
        // 从接收缓冲区1读取消息
        MCP2515_ReadRxBuffer(1, message);
 8001668:	6879      	ldr	r1, [r7, #4]
 800166a:	2001      	movs	r0, #1
 800166c:	f000 f9e6 	bl	8001a3c <MCP2515_ReadRxBuffer>
        MCP2515_ClearInterruptFlags(MCP2515_INT_RX1IF);
 8001670:	2002      	movs	r0, #2
 8001672:	f000 f84a 	bl	800170a <MCP2515_ClearInterruptFlags>
        return MCP2515_OK;
 8001676:	2300      	movs	r3, #0
 8001678:	e000      	b.n	800167c <MCP2515_ReceiveMessage+0x5c>
    }
    
    return MCP2515_ERROR;  // 没有接收到消息
 800167a:	2301      	movs	r3, #1
}
 800167c:	4618      	mov	r0, r3
 800167e:	3710      	adds	r7, #16
 8001680:	46bd      	mov	sp, r7
 8001682:	bd80      	pop	{r7, pc}
 8001684:	20000148 	.word	0x20000148

08001688 <MCP2515_CheckReceive>:
  * @brief  检查是否有消息接收
  * @param  None
  * @retval 1: 有消息, 0: 无消息
  */
uint8_t MCP2515_CheckReceive(void)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetInterruptFlags();
 800168e:	f000 f834 	bl	80016fa <MCP2515_GetInterruptFlags>
 8001692:	4603      	mov	r3, r0
 8001694:	71fb      	strb	r3, [r7, #7]
    return (status & (MCP2515_INT_RX0IF | MCP2515_INT_RX1IF)) ? 1 : 0;
 8001696:	79fb      	ldrb	r3, [r7, #7]
 8001698:	f003 0303 	and.w	r3, r3, #3
 800169c:	2b00      	cmp	r3, #0
 800169e:	bf14      	ite	ne
 80016a0:	2301      	movne	r3, #1
 80016a2:	2300      	moveq	r3, #0
 80016a4:	b2db      	uxtb	r3, r3
}
 80016a6:	4618      	mov	r0, r3
 80016a8:	3708      	adds	r7, #8
 80016aa:	46bd      	mov	sp, r7
 80016ac:	bd80      	pop	{r7, pc}

080016ae <MCP2515_CheckTransmit>:
  * @brief  检查发送缓冲区状态
  * @param  None
  * @retval 发送缓冲区空闲数量
  */
uint8_t MCP2515_CheckTransmit(void)
{
 80016ae:	b580      	push	{r7, lr}
 80016b0:	b082      	sub	sp, #8
 80016b2:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80016b4:	f000 f838 	bl	8001728 <MCP2515_GetStatus>
 80016b8:	4603      	mov	r3, r0
 80016ba:	71bb      	strb	r3, [r7, #6]
    uint8_t free_buffers = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) free_buffers++;  // TXB0空闲
 80016c0:	79bb      	ldrb	r3, [r7, #6]
 80016c2:	f003 0304 	and.w	r3, r3, #4
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d102      	bne.n	80016d0 <MCP2515_CheckTransmit+0x22>
 80016ca:	79fb      	ldrb	r3, [r7, #7]
 80016cc:	3301      	adds	r3, #1
 80016ce:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x10)) free_buffers++;  // TXB1空闲
 80016d0:	79bb      	ldrb	r3, [r7, #6]
 80016d2:	f003 0310 	and.w	r3, r3, #16
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d102      	bne.n	80016e0 <MCP2515_CheckTransmit+0x32>
 80016da:	79fb      	ldrb	r3, [r7, #7]
 80016dc:	3301      	adds	r3, #1
 80016de:	71fb      	strb	r3, [r7, #7]
    if (!(status & 0x40)) free_buffers++;  // TXB2空闲
 80016e0:	79bb      	ldrb	r3, [r7, #6]
 80016e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d102      	bne.n	80016f0 <MCP2515_CheckTransmit+0x42>
 80016ea:	79fb      	ldrb	r3, [r7, #7]
 80016ec:	3301      	adds	r3, #1
 80016ee:	71fb      	strb	r3, [r7, #7]
    
    return free_buffers;
 80016f0:	79fb      	ldrb	r3, [r7, #7]
}
 80016f2:	4618      	mov	r0, r3
 80016f4:	3708      	adds	r7, #8
 80016f6:	46bd      	mov	sp, r7
 80016f8:	bd80      	pop	{r7, pc}

080016fa <MCP2515_GetInterruptFlags>:
  * @brief  获取中断标志
  * @param  None
  * @retval 中断标志寄存器值
  */
uint8_t MCP2515_GetInterruptFlags(void)
{
 80016fa:	b580      	push	{r7, lr}
 80016fc:	af00      	add	r7, sp, #0
    return MCP2515_ReadRegister(MCP2515_CANINTF);
 80016fe:	202c      	movs	r0, #44	@ 0x2c
 8001700:	f7ff fd66 	bl	80011d0 <MCP2515_ReadRegister>
 8001704:	4603      	mov	r3, r0
}
 8001706:	4618      	mov	r0, r3
 8001708:	bd80      	pop	{r7, pc}

0800170a <MCP2515_ClearInterruptFlags>:
  * @brief  清除中断标志
  * @param  flags: 要清除的中断标志
  * @retval None
  */
void MCP2515_ClearInterruptFlags(uint8_t flags)
{
 800170a:	b580      	push	{r7, lr}
 800170c:	b082      	sub	sp, #8
 800170e:	af00      	add	r7, sp, #0
 8001710:	4603      	mov	r3, r0
 8001712:	71fb      	strb	r3, [r7, #7]
    MCP2515_ModifyRegister(MCP2515_CANINTF, flags, 0x00);
 8001714:	79fb      	ldrb	r3, [r7, #7]
 8001716:	2200      	movs	r2, #0
 8001718:	4619      	mov	r1, r3
 800171a:	202c      	movs	r0, #44	@ 0x2c
 800171c:	f7ff fd8d 	bl	800123a <MCP2515_ModifyRegister>
}
 8001720:	bf00      	nop
 8001722:	3708      	adds	r7, #8
 8001724:	46bd      	mov	sp, r7
 8001726:	bd80      	pop	{r7, pc}

08001728 <MCP2515_GetStatus>:
  * @brief  获取MCP2515状态
  * @param  None
  * @retval 状态寄存器值
  */
uint8_t MCP2515_GetStatus(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	b082      	sub	sp, #8
 800172c:	af00      	add	r7, sp, #0
    uint8_t status;
    
    MCP2515_CS_Low();
 800172e:	f7ff fd37 	bl	80011a0 <MCP2515_CS_Low>
    MCP2515_SPI_ReadWrite(MCP2515_CMD_READ_STATUS);
 8001732:	20a0      	movs	r0, #160	@ 0xa0
 8001734:	f7ff fce8 	bl	8001108 <MCP2515_SPI_ReadWrite>
    status = MCP2515_SPI_ReadWrite(0x00);
 8001738:	2000      	movs	r0, #0
 800173a:	f7ff fce5 	bl	8001108 <MCP2515_SPI_ReadWrite>
 800173e:	4603      	mov	r3, r0
 8001740:	71fb      	strb	r3, [r7, #7]
    MCP2515_CS_High();
 8001742:	f7ff fd39 	bl	80011b8 <MCP2515_CS_High>
    
    return status;
 8001746:	79fb      	ldrb	r3, [r7, #7]
}
 8001748:	4618      	mov	r0, r3
 800174a:	3708      	adds	r7, #8
 800174c:	46bd      	mov	sp, r7
 800174e:	bd80      	pop	{r7, pc}

08001750 <MCP2515_SelfTest>:
  * @brief  MCP2515自检测试
  * @param  None
  * @retval MCP2515_OK: 成功, MCP2515_ERROR: 失败
  */
uint8_t MCP2515_SelfTest(void)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
    uint8_t test_data = 0xAA;
 8001756:	23aa      	movs	r3, #170	@ 0xaa
 8001758:	71fb      	strb	r3, [r7, #7]
    uint8_t read_data;
    
    // 写入测试数据到一个可读写的寄存器
    MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	4619      	mov	r1, r3
 800175e:	202a      	movs	r0, #42	@ 0x2a
 8001760:	f7ff fd50 	bl	8001204 <MCP2515_WriteRegister>
    
    // 读回数据进行比较
    read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001764:	202a      	movs	r0, #42	@ 0x2a
 8001766:	f7ff fd33 	bl	80011d0 <MCP2515_ReadRegister>
 800176a:	4603      	mov	r3, r0
 800176c:	71bb      	strb	r3, [r7, #6]
    
    if (read_data == test_data) {
 800176e:	79ba      	ldrb	r2, [r7, #6]
 8001770:	79fb      	ldrb	r3, [r7, #7]
 8001772:	429a      	cmp	r2, r3
 8001774:	d111      	bne.n	800179a <MCP2515_SelfTest+0x4a>
        // 再次测试不同的数据
        test_data = 0x55;
 8001776:	2355      	movs	r3, #85	@ 0x55
 8001778:	71fb      	strb	r3, [r7, #7]
        MCP2515_WriteRegister(MCP2515_CNF1, test_data);
 800177a:	79fb      	ldrb	r3, [r7, #7]
 800177c:	4619      	mov	r1, r3
 800177e:	202a      	movs	r0, #42	@ 0x2a
 8001780:	f7ff fd40 	bl	8001204 <MCP2515_WriteRegister>
        read_data = MCP2515_ReadRegister(MCP2515_CNF1);
 8001784:	202a      	movs	r0, #42	@ 0x2a
 8001786:	f7ff fd23 	bl	80011d0 <MCP2515_ReadRegister>
 800178a:	4603      	mov	r3, r0
 800178c:	71bb      	strb	r3, [r7, #6]
        
        if (read_data == test_data) {
 800178e:	79ba      	ldrb	r2, [r7, #6]
 8001790:	79fb      	ldrb	r3, [r7, #7]
 8001792:	429a      	cmp	r2, r3
 8001794:	d101      	bne.n	800179a <MCP2515_SelfTest+0x4a>
            return MCP2515_OK;
 8001796:	2300      	movs	r3, #0
 8001798:	e000      	b.n	800179c <MCP2515_SelfTest+0x4c>
        }
    }
    
    return MCP2515_ERROR;
 800179a:	2301      	movs	r3, #1
}
 800179c:	4618      	mov	r0, r3
 800179e:	3708      	adds	r7, #8
 80017a0:	46bd      	mov	sp, r7
 80017a2:	bd80      	pop	{r7, pc}

080017a4 <MCP2515_PrintStatus>:
  * @brief  打印MCP2515状态信息
  * @param  None
  * @retval None
  */
void MCP2515_PrintStatus(void)
{
 80017a4:	b580      	push	{r7, lr}
 80017a6:	b082      	sub	sp, #8
 80017a8:	af00      	add	r7, sp, #0
    uint8_t canstat = MCP2515_ReadRegister(MCP2515_CANSTAT);
 80017aa:	200e      	movs	r0, #14
 80017ac:	f7ff fd10 	bl	80011d0 <MCP2515_ReadRegister>
 80017b0:	4603      	mov	r3, r0
 80017b2:	71fb      	strb	r3, [r7, #7]
    uint8_t canctrl = MCP2515_ReadRegister(MCP2515_CANCTRL);
 80017b4:	200f      	movs	r0, #15
 80017b6:	f7ff fd0b 	bl	80011d0 <MCP2515_ReadRegister>
 80017ba:	4603      	mov	r3, r0
 80017bc:	71bb      	strb	r3, [r7, #6]
    uint8_t canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 80017be:	202c      	movs	r0, #44	@ 0x2c
 80017c0:	f7ff fd06 	bl	80011d0 <MCP2515_ReadRegister>
 80017c4:	4603      	mov	r3, r0
 80017c6:	717b      	strb	r3, [r7, #5]
    uint8_t eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 80017c8:	202d      	movs	r0, #45	@ 0x2d
 80017ca:	f7ff fd01 	bl	80011d0 <MCP2515_ReadRegister>
 80017ce:	4603      	mov	r3, r0
 80017d0:	713b      	strb	r3, [r7, #4]
    
    printf("MCP2515 Status:\r\n");
 80017d2:	4825      	ldr	r0, [pc, #148]	@ (8001868 <MCP2515_PrintStatus+0xc4>)
 80017d4:	f006 f8c2 	bl	800795c <puts>
    printf("CANSTAT: 0x%02X\r\n", canstat);
 80017d8:	79fb      	ldrb	r3, [r7, #7]
 80017da:	4619      	mov	r1, r3
 80017dc:	4823      	ldr	r0, [pc, #140]	@ (800186c <MCP2515_PrintStatus+0xc8>)
 80017de:	f006 f855 	bl	800788c <iprintf>
    printf("CANCTRL: 0x%02X\r\n", canctrl);
 80017e2:	79bb      	ldrb	r3, [r7, #6]
 80017e4:	4619      	mov	r1, r3
 80017e6:	4822      	ldr	r0, [pc, #136]	@ (8001870 <MCP2515_PrintStatus+0xcc>)
 80017e8:	f006 f850 	bl	800788c <iprintf>
    printf("CANINTF: 0x%02X\r\n", canintf);
 80017ec:	797b      	ldrb	r3, [r7, #5]
 80017ee:	4619      	mov	r1, r3
 80017f0:	4820      	ldr	r0, [pc, #128]	@ (8001874 <MCP2515_PrintStatus+0xd0>)
 80017f2:	f006 f84b 	bl	800788c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 80017f6:	793b      	ldrb	r3, [r7, #4]
 80017f8:	4619      	mov	r1, r3
 80017fa:	481f      	ldr	r0, [pc, #124]	@ (8001878 <MCP2515_PrintStatus+0xd4>)
 80017fc:	f006 f846 	bl	800788c <iprintf>
    printf("Mode: ");
 8001800:	481e      	ldr	r0, [pc, #120]	@ (800187c <MCP2515_PrintStatus+0xd8>)
 8001802:	f006 f843 	bl	800788c <iprintf>
    
    switch (canstat & 0xE0) {
 8001806:	79fb      	ldrb	r3, [r7, #7]
 8001808:	f003 03e0 	and.w	r3, r3, #224	@ 0xe0
 800180c:	2b80      	cmp	r3, #128	@ 0x80
 800180e:	d01e      	beq.n	800184e <MCP2515_PrintStatus+0xaa>
 8001810:	2b80      	cmp	r3, #128	@ 0x80
 8001812:	dc20      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 8001814:	2b60      	cmp	r3, #96	@ 0x60
 8001816:	d016      	beq.n	8001846 <MCP2515_PrintStatus+0xa2>
 8001818:	2b60      	cmp	r3, #96	@ 0x60
 800181a:	dc1c      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 800181c:	2b40      	cmp	r3, #64	@ 0x40
 800181e:	d00e      	beq.n	800183e <MCP2515_PrintStatus+0x9a>
 8001820:	2b40      	cmp	r3, #64	@ 0x40
 8001822:	dc18      	bgt.n	8001856 <MCP2515_PrintStatus+0xb2>
 8001824:	2b00      	cmp	r3, #0
 8001826:	d002      	beq.n	800182e <MCP2515_PrintStatus+0x8a>
 8001828:	2b20      	cmp	r3, #32
 800182a:	d004      	beq.n	8001836 <MCP2515_PrintStatus+0x92>
 800182c:	e013      	b.n	8001856 <MCP2515_PrintStatus+0xb2>
        case MCP2515_MODE_NORMAL:
            printf("Normal\r\n");
 800182e:	4814      	ldr	r0, [pc, #80]	@ (8001880 <MCP2515_PrintStatus+0xdc>)
 8001830:	f006 f894 	bl	800795c <puts>
            break;
 8001834:	e013      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_SLEEP:
            printf("Sleep\r\n");
 8001836:	4813      	ldr	r0, [pc, #76]	@ (8001884 <MCP2515_PrintStatus+0xe0>)
 8001838:	f006 f890 	bl	800795c <puts>
            break;
 800183c:	e00f      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LOOPBACK:
            printf("Loopback\r\n");
 800183e:	4812      	ldr	r0, [pc, #72]	@ (8001888 <MCP2515_PrintStatus+0xe4>)
 8001840:	f006 f88c 	bl	800795c <puts>
            break;
 8001844:	e00b      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_LISTENONLY:
            printf("Listen Only\r\n");
 8001846:	4811      	ldr	r0, [pc, #68]	@ (800188c <MCP2515_PrintStatus+0xe8>)
 8001848:	f006 f888 	bl	800795c <puts>
            break;
 800184c:	e007      	b.n	800185e <MCP2515_PrintStatus+0xba>
        case MCP2515_MODE_CONFIG:
            printf("Configuration\r\n");
 800184e:	4810      	ldr	r0, [pc, #64]	@ (8001890 <MCP2515_PrintStatus+0xec>)
 8001850:	f006 f884 	bl	800795c <puts>
            break;
 8001854:	e003      	b.n	800185e <MCP2515_PrintStatus+0xba>
        default:
            printf("Unknown\r\n");
 8001856:	480f      	ldr	r0, [pc, #60]	@ (8001894 <MCP2515_PrintStatus+0xf0>)
 8001858:	f006 f880 	bl	800795c <puts>
            break;
 800185c:	bf00      	nop
    }
}
 800185e:	bf00      	nop
 8001860:	3708      	adds	r7, #8
 8001862:	46bd      	mov	sp, r7
 8001864:	bd80      	pop	{r7, pc}
 8001866:	bf00      	nop
 8001868:	0800943c 	.word	0x0800943c
 800186c:	08009450 	.word	0x08009450
 8001870:	08009464 	.word	0x08009464
 8001874:	08009478 	.word	0x08009478
 8001878:	0800948c 	.word	0x0800948c
 800187c:	0800949c 	.word	0x0800949c
 8001880:	080094a4 	.word	0x080094a4
 8001884:	080094ac 	.word	0x080094ac
 8001888:	080094b4 	.word	0x080094b4
 800188c:	080094c0 	.word	0x080094c0
 8001890:	080094d0 	.word	0x080094d0
 8001894:	080094e0 	.word	0x080094e0

08001898 <MCP2515_WaitForMode>:
  * @param  mode: 目标模式
  * @param  timeout: 超时时间(ms)
  * @retval MCP2515_OK: 成功, MCP2515_TIMEOUT: 超时
  */
static uint8_t MCP2515_WaitForMode(uint8_t mode, uint32_t timeout)
{
 8001898:	b580      	push	{r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	4603      	mov	r3, r0
 80018a0:	6039      	str	r1, [r7, #0]
 80018a2:	71fb      	strb	r3, [r7, #7]
    uint32_t start_time = HAL_GetTick();
 80018a4:	f000 fe34 	bl	8002510 <HAL_GetTick>
 80018a8:	60f8      	str	r0, [r7, #12]
    
    while ((HAL_GetTick() - start_time) < timeout) {
 80018aa:	e00b      	b.n	80018c4 <MCP2515_WaitForMode+0x2c>
        if (MCP2515_GetMode() == mode) {
 80018ac:	f7ff fd4f 	bl	800134e <MCP2515_GetMode>
 80018b0:	4603      	mov	r3, r0
 80018b2:	461a      	mov	r2, r3
 80018b4:	79fb      	ldrb	r3, [r7, #7]
 80018b6:	4293      	cmp	r3, r2
 80018b8:	d101      	bne.n	80018be <MCP2515_WaitForMode+0x26>
            return MCP2515_OK;
 80018ba:	2300      	movs	r3, #0
 80018bc:	e00b      	b.n	80018d6 <MCP2515_WaitForMode+0x3e>
        }
        osDelay(1);
 80018be:	2001      	movs	r0, #1
 80018c0:	f003 f8be 	bl	8004a40 <osDelay>
    while ((HAL_GetTick() - start_time) < timeout) {
 80018c4:	f000 fe24 	bl	8002510 <HAL_GetTick>
 80018c8:	4602      	mov	r2, r0
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	1ad3      	subs	r3, r2, r3
 80018ce:	683a      	ldr	r2, [r7, #0]
 80018d0:	429a      	cmp	r2, r3
 80018d2:	d8eb      	bhi.n	80018ac <MCP2515_WaitForMode+0x14>
    }
    
    return MCP2515_TIMEOUT;
 80018d4:	2302      	movs	r3, #2
}
 80018d6:	4618      	mov	r0, r3
 80018d8:	3710      	adds	r7, #16
 80018da:	46bd      	mov	sp, r7
 80018dc:	bd80      	pop	{r7, pc}

080018de <MCP2515_GetTxBuffer>:
  * @brief  获取空闲的发送缓冲区
  * @param  None
  * @retval 缓冲区编号 (0-2), 0xFF表示无空闲缓冲区
  */
static uint8_t MCP2515_GetTxBuffer(void)
{
 80018de:	b580      	push	{r7, lr}
 80018e0:	b082      	sub	sp, #8
 80018e2:	af00      	add	r7, sp, #0
    uint8_t status = MCP2515_GetStatus();
 80018e4:	f7ff ff20 	bl	8001728 <MCP2515_GetStatus>
 80018e8:	4603      	mov	r3, r0
 80018ea:	71fb      	strb	r3, [r7, #7]
    
    if (!(status & 0x04)) return 0;  // TXB0空闲
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	f003 0304 	and.w	r3, r3, #4
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d101      	bne.n	80018fa <MCP2515_GetTxBuffer+0x1c>
 80018f6:	2300      	movs	r3, #0
 80018f8:	e00e      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x10)) return 1;  // TXB1空闲
 80018fa:	79fb      	ldrb	r3, [r7, #7]
 80018fc:	f003 0310 	and.w	r3, r3, #16
 8001900:	2b00      	cmp	r3, #0
 8001902:	d101      	bne.n	8001908 <MCP2515_GetTxBuffer+0x2a>
 8001904:	2301      	movs	r3, #1
 8001906:	e007      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    if (!(status & 0x40)) return 2;  // TXB2空闲
 8001908:	79fb      	ldrb	r3, [r7, #7]
 800190a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800190e:	2b00      	cmp	r3, #0
 8001910:	d101      	bne.n	8001916 <MCP2515_GetTxBuffer+0x38>
 8001912:	2302      	movs	r3, #2
 8001914:	e000      	b.n	8001918 <MCP2515_GetTxBuffer+0x3a>
    
    return 0xFF;  // 无空闲缓冲区
 8001916:	23ff      	movs	r3, #255	@ 0xff
}
 8001918:	4618      	mov	r0, r3
 800191a:	3708      	adds	r7, #8
 800191c:	46bd      	mov	sp, r7
 800191e:	bd80      	pop	{r7, pc}

08001920 <MCP2515_LoadTxBuffer>:
  * @param  buffer: 缓冲区编号 (0-2)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_LoadTxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001920:	b580      	push	{r7, lr}
 8001922:	b084      	sub	sp, #16
 8001924:	af00      	add	r7, sp, #0
 8001926:	4603      	mov	r3, r0
 8001928:	6039      	str	r1, [r7, #0]
 800192a:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x30 + (buffer * 0x10);  // 计算缓冲区基地址
 800192c:	79fb      	ldrb	r3, [r7, #7]
 800192e:	3303      	adds	r3, #3
 8001930:	b2db      	uxtb	r3, r3
 8001932:	011b      	lsls	r3, r3, #4
 8001934:	727b      	strb	r3, [r7, #9]
    uint8_t i;
    
    // 准备ID寄存器值
    if (message->ide) {
 8001936:	683b      	ldr	r3, [r7, #0]
 8001938:	791b      	ldrb	r3, [r3, #4]
 800193a:	2b00      	cmp	r3, #0
 800193c:	d01d      	beq.n	800197a <MCP2515_LoadTxBuffer+0x5a>
        // 扩展帧
        sidh = (uint8_t)(message->id >> 21);
 800193e:	683b      	ldr	r3, [r7, #0]
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	0d5b      	lsrs	r3, r3, #21
 8001944:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)(((message->id >> 18) & 0x07) << 5) | 0x08 | (uint8_t)((message->id >> 16) & 0x03);
 8001946:	683b      	ldr	r3, [r7, #0]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	0c9b      	lsrs	r3, r3, #18
 800194c:	b2db      	uxtb	r3, r3
 800194e:	015b      	lsls	r3, r3, #5
 8001950:	b2da      	uxtb	r2, r3
 8001952:	683b      	ldr	r3, [r7, #0]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	0c1b      	lsrs	r3, r3, #16
 8001958:	b2db      	uxtb	r3, r3
 800195a:	f003 0303 	and.w	r3, r3, #3
 800195e:	b2db      	uxtb	r3, r3
 8001960:	4313      	orrs	r3, r2
 8001962:	b2db      	uxtb	r3, r3
 8001964:	f043 0308 	orr.w	r3, r3, #8
 8001968:	73bb      	strb	r3, [r7, #14]
        eid8 = (uint8_t)(message->id >> 8);
 800196a:	683b      	ldr	r3, [r7, #0]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	0a1b      	lsrs	r3, r3, #8
 8001970:	737b      	strb	r3, [r7, #13]
        eid0 = (uint8_t)message->id;
 8001972:	683b      	ldr	r3, [r7, #0]
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	733b      	strb	r3, [r7, #12]
 8001978:	e00c      	b.n	8001994 <MCP2515_LoadTxBuffer+0x74>
    } else {
        // 标准帧
        sidh = (uint8_t)(message->id >> 3);
 800197a:	683b      	ldr	r3, [r7, #0]
 800197c:	681b      	ldr	r3, [r3, #0]
 800197e:	08db      	lsrs	r3, r3, #3
 8001980:	73fb      	strb	r3, [r7, #15]
        sidl = (uint8_t)((message->id & 0x07) << 5);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	681b      	ldr	r3, [r3, #0]
 8001986:	b2db      	uxtb	r3, r3
 8001988:	015b      	lsls	r3, r3, #5
 800198a:	73bb      	strb	r3, [r7, #14]
        eid8 = 0;
 800198c:	2300      	movs	r3, #0
 800198e:	737b      	strb	r3, [r7, #13]
        eid0 = 0;
 8001990:	2300      	movs	r3, #0
 8001992:	733b      	strb	r3, [r7, #12]
    }
    
    // 准备DLC寄存器值
    dlc = message->dlc & 0x0F;
 8001994:	683b      	ldr	r3, [r7, #0]
 8001996:	799b      	ldrb	r3, [r3, #6]
 8001998:	f003 030f 	and.w	r3, r3, #15
 800199c:	72fb      	strb	r3, [r7, #11]
    if (message->rtr) {
 800199e:	683b      	ldr	r3, [r7, #0]
 80019a0:	795b      	ldrb	r3, [r3, #5]
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d003      	beq.n	80019ae <MCP2515_LoadTxBuffer+0x8e>
        dlc |= 0x40;  // 设置RTR位
 80019a6:	7afb      	ldrb	r3, [r7, #11]
 80019a8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80019ac:	72fb      	strb	r3, [r7, #11]
    }
    
    // 写入ID和控制信息
    MCP2515_WriteRegister(base_addr + 1, sidh);  // SIDH
 80019ae:	7a7b      	ldrb	r3, [r7, #9]
 80019b0:	3301      	adds	r3, #1
 80019b2:	b2db      	uxtb	r3, r3
 80019b4:	7bfa      	ldrb	r2, [r7, #15]
 80019b6:	4611      	mov	r1, r2
 80019b8:	4618      	mov	r0, r3
 80019ba:	f7ff fc23 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 2, sidl);  // SIDL
 80019be:	7a7b      	ldrb	r3, [r7, #9]
 80019c0:	3302      	adds	r3, #2
 80019c2:	b2db      	uxtb	r3, r3
 80019c4:	7bba      	ldrb	r2, [r7, #14]
 80019c6:	4611      	mov	r1, r2
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7ff fc1b 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 3, eid8);  // EID8
 80019ce:	7a7b      	ldrb	r3, [r7, #9]
 80019d0:	3303      	adds	r3, #3
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	7b7a      	ldrb	r2, [r7, #13]
 80019d6:	4611      	mov	r1, r2
 80019d8:	4618      	mov	r0, r3
 80019da:	f7ff fc13 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 4, eid0);  // EID0
 80019de:	7a7b      	ldrb	r3, [r7, #9]
 80019e0:	3304      	adds	r3, #4
 80019e2:	b2db      	uxtb	r3, r3
 80019e4:	7b3a      	ldrb	r2, [r7, #12]
 80019e6:	4611      	mov	r1, r2
 80019e8:	4618      	mov	r0, r3
 80019ea:	f7ff fc0b 	bl	8001204 <MCP2515_WriteRegister>
    MCP2515_WriteRegister(base_addr + 5, dlc);   // DLC
 80019ee:	7a7b      	ldrb	r3, [r7, #9]
 80019f0:	3305      	adds	r3, #5
 80019f2:	b2db      	uxtb	r3, r3
 80019f4:	7afa      	ldrb	r2, [r7, #11]
 80019f6:	4611      	mov	r1, r2
 80019f8:	4618      	mov	r0, r3
 80019fa:	f7ff fc03 	bl	8001204 <MCP2515_WriteRegister>
    
    // 写入数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 80019fe:	2300      	movs	r3, #0
 8001a00:	72bb      	strb	r3, [r7, #10]
 8001a02:	e00f      	b.n	8001a24 <MCP2515_LoadTxBuffer+0x104>
        MCP2515_WriteRegister(base_addr + 6 + i, message->data[i]);
 8001a04:	7a7a      	ldrb	r2, [r7, #9]
 8001a06:	7abb      	ldrb	r3, [r7, #10]
 8001a08:	4413      	add	r3, r2
 8001a0a:	b2db      	uxtb	r3, r3
 8001a0c:	3306      	adds	r3, #6
 8001a0e:	b2d8      	uxtb	r0, r3
 8001a10:	7abb      	ldrb	r3, [r7, #10]
 8001a12:	683a      	ldr	r2, [r7, #0]
 8001a14:	4413      	add	r3, r2
 8001a16:	79db      	ldrb	r3, [r3, #7]
 8001a18:	4619      	mov	r1, r3
 8001a1a:	f7ff fbf3 	bl	8001204 <MCP2515_WriteRegister>
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001a1e:	7abb      	ldrb	r3, [r7, #10]
 8001a20:	3301      	adds	r3, #1
 8001a22:	72bb      	strb	r3, [r7, #10]
 8001a24:	683b      	ldr	r3, [r7, #0]
 8001a26:	799b      	ldrb	r3, [r3, #6]
 8001a28:	7aba      	ldrb	r2, [r7, #10]
 8001a2a:	429a      	cmp	r2, r3
 8001a2c:	d202      	bcs.n	8001a34 <MCP2515_LoadTxBuffer+0x114>
 8001a2e:	7abb      	ldrb	r3, [r7, #10]
 8001a30:	2b07      	cmp	r3, #7
 8001a32:	d9e7      	bls.n	8001a04 <MCP2515_LoadTxBuffer+0xe4>
    }
}
 8001a34:	bf00      	nop
 8001a36:	3710      	adds	r7, #16
 8001a38:	46bd      	mov	sp, r7
 8001a3a:	bd80      	pop	{r7, pc}

08001a3c <MCP2515_ReadRxBuffer>:
  * @param  buffer: 缓冲区编号 (0-1)
  * @param  message: CAN消息指针
  * @retval None
  */
static void MCP2515_ReadRxBuffer(uint8_t buffer, MCP2515_CANMessage_t *message)
{
 8001a3c:	b590      	push	{r4, r7, lr}
 8001a3e:	b085      	sub	sp, #20
 8001a40:	af00      	add	r7, sp, #0
 8001a42:	4603      	mov	r3, r0
 8001a44:	6039      	str	r1, [r7, #0]
 8001a46:	71fb      	strb	r3, [r7, #7]
    uint8_t sidh, sidl, eid8, eid0, dlc;
    uint8_t base_addr = 0x60 + (buffer * 0x10);  // 计算缓冲区基地址
 8001a48:	79fb      	ldrb	r3, [r7, #7]
 8001a4a:	3306      	adds	r3, #6
 8001a4c:	b2db      	uxtb	r3, r3
 8001a4e:	011b      	lsls	r3, r3, #4
 8001a50:	73bb      	strb	r3, [r7, #14]
    uint8_t i;
    
    // 读取ID和控制信息
    sidh = MCP2515_ReadRegister(base_addr + 1);  // SIDH
 8001a52:	7bbb      	ldrb	r3, [r7, #14]
 8001a54:	3301      	adds	r3, #1
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	4618      	mov	r0, r3
 8001a5a:	f7ff fbb9 	bl	80011d0 <MCP2515_ReadRegister>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	737b      	strb	r3, [r7, #13]
    sidl = MCP2515_ReadRegister(base_addr + 2);  // SIDL
 8001a62:	7bbb      	ldrb	r3, [r7, #14]
 8001a64:	3302      	adds	r3, #2
 8001a66:	b2db      	uxtb	r3, r3
 8001a68:	4618      	mov	r0, r3
 8001a6a:	f7ff fbb1 	bl	80011d0 <MCP2515_ReadRegister>
 8001a6e:	4603      	mov	r3, r0
 8001a70:	733b      	strb	r3, [r7, #12]
    eid8 = MCP2515_ReadRegister(base_addr + 3);  // EID8
 8001a72:	7bbb      	ldrb	r3, [r7, #14]
 8001a74:	3303      	adds	r3, #3
 8001a76:	b2db      	uxtb	r3, r3
 8001a78:	4618      	mov	r0, r3
 8001a7a:	f7ff fba9 	bl	80011d0 <MCP2515_ReadRegister>
 8001a7e:	4603      	mov	r3, r0
 8001a80:	72fb      	strb	r3, [r7, #11]
    eid0 = MCP2515_ReadRegister(base_addr + 4);  // EID0
 8001a82:	7bbb      	ldrb	r3, [r7, #14]
 8001a84:	3304      	adds	r3, #4
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f7ff fba1 	bl	80011d0 <MCP2515_ReadRegister>
 8001a8e:	4603      	mov	r3, r0
 8001a90:	72bb      	strb	r3, [r7, #10]
    dlc = MCP2515_ReadRegister(base_addr + 5);   // DLC
 8001a92:	7bbb      	ldrb	r3, [r7, #14]
 8001a94:	3305      	adds	r3, #5
 8001a96:	b2db      	uxtb	r3, r3
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff fb99 	bl	80011d0 <MCP2515_ReadRegister>
 8001a9e:	4603      	mov	r3, r0
 8001aa0:	727b      	strb	r3, [r7, #9]
    
    // 解析ID
    if (sidl & 0x08) {
 8001aa2:	7b3b      	ldrb	r3, [r7, #12]
 8001aa4:	f003 0308 	and.w	r3, r3, #8
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d016      	beq.n	8001ada <MCP2515_ReadRxBuffer+0x9e>
        // 扩展帧
        message->ide = 1;
 8001aac:	683b      	ldr	r3, [r7, #0]
 8001aae:	2201      	movs	r2, #1
 8001ab0:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 21) | 
 8001ab2:	7b7b      	ldrb	r3, [r7, #13]
 8001ab4:	055a      	lsls	r2, r3, #21
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001ab6:	7b3b      	ldrb	r3, [r7, #12]
 8001ab8:	035b      	lsls	r3, r3, #13
 8001aba:	f403 13e0 	and.w	r3, r3, #1835008	@ 0x1c0000
        message->id = ((uint32_t)sidh << 21) | 
 8001abe:	431a      	orrs	r2, r3
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001ac0:	7b3b      	ldrb	r3, [r7, #12]
 8001ac2:	041b      	lsls	r3, r3, #16
 8001ac4:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
                      ((uint32_t)(sidl & 0xE0) << 13) | 
 8001ac8:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001aca:	7afb      	ldrb	r3, [r7, #11]
 8001acc:	021b      	lsls	r3, r3, #8
                      ((uint32_t)(sidl & 0x03) << 16) | 
 8001ace:	431a      	orrs	r2, r3
                      ((uint32_t)eid8 << 8) | 
 8001ad0:	7abb      	ldrb	r3, [r7, #10]
 8001ad2:	431a      	orrs	r2, r3
        message->id = ((uint32_t)sidh << 21) | 
 8001ad4:	683b      	ldr	r3, [r7, #0]
 8001ad6:	601a      	str	r2, [r3, #0]
 8001ad8:	e00a      	b.n	8001af0 <MCP2515_ReadRxBuffer+0xb4>
                      eid0;
    } else {
        // 标准帧
        message->ide = 0;
 8001ada:	683b      	ldr	r3, [r7, #0]
 8001adc:	2200      	movs	r2, #0
 8001ade:	711a      	strb	r2, [r3, #4]
        message->id = ((uint32_t)sidh << 3) | ((sidl & 0xE0) >> 5);
 8001ae0:	7b7b      	ldrb	r3, [r7, #13]
 8001ae2:	00db      	lsls	r3, r3, #3
 8001ae4:	7b3a      	ldrb	r2, [r7, #12]
 8001ae6:	0952      	lsrs	r2, r2, #5
 8001ae8:	b2d2      	uxtb	r2, r2
 8001aea:	431a      	orrs	r2, r3
 8001aec:	683b      	ldr	r3, [r7, #0]
 8001aee:	601a      	str	r2, [r3, #0]
    }
    
    // 解析控制信息
    message->rtr = (dlc & 0x40) ? 1 : 0;
 8001af0:	7a7b      	ldrb	r3, [r7, #9]
 8001af2:	119b      	asrs	r3, r3, #6
 8001af4:	b2db      	uxtb	r3, r3
 8001af6:	f003 0301 	and.w	r3, r3, #1
 8001afa:	b2da      	uxtb	r2, r3
 8001afc:	683b      	ldr	r3, [r7, #0]
 8001afe:	715a      	strb	r2, [r3, #5]
    message->dlc = dlc & 0x0F;
 8001b00:	7a7b      	ldrb	r3, [r7, #9]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	b2da      	uxtb	r2, r3
 8001b08:	683b      	ldr	r3, [r7, #0]
 8001b0a:	719a      	strb	r2, [r3, #6]
    
    // 读取数据
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	73fb      	strb	r3, [r7, #15]
 8001b10:	e011      	b.n	8001b36 <MCP2515_ReadRxBuffer+0xfa>
        message->data[i] = MCP2515_ReadRegister(base_addr + 6 + i);
 8001b12:	7bba      	ldrb	r2, [r7, #14]
 8001b14:	7bfb      	ldrb	r3, [r7, #15]
 8001b16:	4413      	add	r3, r2
 8001b18:	b2db      	uxtb	r3, r3
 8001b1a:	3306      	adds	r3, #6
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	7bfc      	ldrb	r4, [r7, #15]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff fb55 	bl	80011d0 <MCP2515_ReadRegister>
 8001b26:	4603      	mov	r3, r0
 8001b28:	461a      	mov	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	4423      	add	r3, r4
 8001b2e:	71da      	strb	r2, [r3, #7]
    for (i = 0; i < message->dlc && i < 8; i++) {
 8001b30:	7bfb      	ldrb	r3, [r7, #15]
 8001b32:	3301      	adds	r3, #1
 8001b34:	73fb      	strb	r3, [r7, #15]
 8001b36:	683b      	ldr	r3, [r7, #0]
 8001b38:	799b      	ldrb	r3, [r3, #6]
 8001b3a:	7bfa      	ldrb	r2, [r7, #15]
 8001b3c:	429a      	cmp	r2, r3
 8001b3e:	d20b      	bcs.n	8001b58 <MCP2515_ReadRxBuffer+0x11c>
 8001b40:	7bfb      	ldrb	r3, [r7, #15]
 8001b42:	2b07      	cmp	r3, #7
 8001b44:	d9e5      	bls.n	8001b12 <MCP2515_ReadRxBuffer+0xd6>
    }
    
    // 清空剩余数据字节
    for (; i < 8; i++) {
 8001b46:	e007      	b.n	8001b58 <MCP2515_ReadRxBuffer+0x11c>
        message->data[i] = 0;
 8001b48:	7bfb      	ldrb	r3, [r7, #15]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	4413      	add	r3, r2
 8001b4e:	2200      	movs	r2, #0
 8001b50:	71da      	strb	r2, [r3, #7]
    for (; i < 8; i++) {
 8001b52:	7bfb      	ldrb	r3, [r7, #15]
 8001b54:	3301      	adds	r3, #1
 8001b56:	73fb      	strb	r3, [r7, #15]
 8001b58:	7bfb      	ldrb	r3, [r7, #15]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	d9f4      	bls.n	8001b48 <MCP2515_ReadRxBuffer+0x10c>
    }
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bd90      	pop	{r4, r7, pc}

08001b68 <MCP2515_GetErrorCounters>:
  * @param  tec: 发送错误计数器指针
  * @param  rec: 接收错误计数器指针
  * @retval None
  */
void MCP2515_GetErrorCounters(uint8_t *tec, uint8_t *rec)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b082      	sub	sp, #8
 8001b6c:	af00      	add	r7, sp, #0
 8001b6e:	6078      	str	r0, [r7, #4]
 8001b70:	6039      	str	r1, [r7, #0]
    *tec = MCP2515_ReadRegister(MCP2515_TEC);
 8001b72:	201c      	movs	r0, #28
 8001b74:	f7ff fb2c 	bl	80011d0 <MCP2515_ReadRegister>
 8001b78:	4603      	mov	r3, r0
 8001b7a:	461a      	mov	r2, r3
 8001b7c:	687b      	ldr	r3, [r7, #4]
 8001b7e:	701a      	strb	r2, [r3, #0]
    *rec = MCP2515_ReadRegister(MCP2515_REC);
 8001b80:	201d      	movs	r0, #29
 8001b82:	f7ff fb25 	bl	80011d0 <MCP2515_ReadRegister>
 8001b86:	4603      	mov	r3, r0
 8001b88:	461a      	mov	r2, r3
 8001b8a:	683b      	ldr	r3, [r7, #0]
 8001b8c:	701a      	strb	r2, [r3, #0]
}
 8001b8e:	bf00      	nop
 8001b90:	3708      	adds	r7, #8
 8001b92:	46bd      	mov	sp, r7
 8001b94:	bd80      	pop	{r7, pc}
	...

08001b98 <MCP2515_DiagnoseErrors>:
  * @brief  详细的错误状态诊断
  * @param  None
  * @retval None
  */
void MCP2515_DiagnoseErrors(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b082      	sub	sp, #8
 8001b9c:	af00      	add	r7, sp, #0
    uint8_t canintf, eflg, tec, rec;
    
    printf("\r\n=== MCP2515 Error Diagnosis ===\r\n");
 8001b9e:	4869      	ldr	r0, [pc, #420]	@ (8001d44 <MCP2515_DiagnoseErrors+0x1ac>)
 8001ba0:	f005 fedc 	bl	800795c <puts>
    
    // Read status registers
    canintf = MCP2515_ReadRegister(MCP2515_CANINTF);
 8001ba4:	202c      	movs	r0, #44	@ 0x2c
 8001ba6:	f7ff fb13 	bl	80011d0 <MCP2515_ReadRegister>
 8001baa:	4603      	mov	r3, r0
 8001bac:	71fb      	strb	r3, [r7, #7]
    eflg = MCP2515_ReadRegister(MCP2515_EFLG);
 8001bae:	202d      	movs	r0, #45	@ 0x2d
 8001bb0:	f7ff fb0e 	bl	80011d0 <MCP2515_ReadRegister>
 8001bb4:	4603      	mov	r3, r0
 8001bb6:	71bb      	strb	r3, [r7, #6]
    MCP2515_GetErrorCounters(&tec, &rec);
 8001bb8:	1d3a      	adds	r2, r7, #4
 8001bba:	1d7b      	adds	r3, r7, #5
 8001bbc:	4611      	mov	r1, r2
 8001bbe:	4618      	mov	r0, r3
 8001bc0:	f7ff ffd2 	bl	8001b68 <MCP2515_GetErrorCounters>
    
    printf("CANINTF: 0x%02X\r\n", canintf);
 8001bc4:	79fb      	ldrb	r3, [r7, #7]
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	485f      	ldr	r0, [pc, #380]	@ (8001d48 <MCP2515_DiagnoseErrors+0x1b0>)
 8001bca:	f005 fe5f 	bl	800788c <iprintf>
    printf("EFLG: 0x%02X\r\n", eflg);
 8001bce:	79bb      	ldrb	r3, [r7, #6]
 8001bd0:	4619      	mov	r1, r3
 8001bd2:	485e      	ldr	r0, [pc, #376]	@ (8001d4c <MCP2515_DiagnoseErrors+0x1b4>)
 8001bd4:	f005 fe5a 	bl	800788c <iprintf>
    printf("Transmit Error Counter (TEC): %d\r\n", tec);
 8001bd8:	797b      	ldrb	r3, [r7, #5]
 8001bda:	4619      	mov	r1, r3
 8001bdc:	485c      	ldr	r0, [pc, #368]	@ (8001d50 <MCP2515_DiagnoseErrors+0x1b8>)
 8001bde:	f005 fe55 	bl	800788c <iprintf>
    printf("Receive Error Counter (REC): %d\r\n", rec);
 8001be2:	793b      	ldrb	r3, [r7, #4]
 8001be4:	4619      	mov	r1, r3
 8001be6:	485b      	ldr	r0, [pc, #364]	@ (8001d54 <MCP2515_DiagnoseErrors+0x1bc>)
 8001be8:	f005 fe50 	bl	800788c <iprintf>
    
    // Analyze CANINTF
    printf("\r\n--- CANINTF Analysis ---\r\n");
 8001bec:	485a      	ldr	r0, [pc, #360]	@ (8001d58 <MCP2515_DiagnoseErrors+0x1c0>)
 8001bee:	f005 feb5 	bl	800795c <puts>
    if (canintf & 0x80) printf("WARNING: MERRF - Message Error Interrupt\r\n");
 8001bf2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001bf6:	2b00      	cmp	r3, #0
 8001bf8:	da02      	bge.n	8001c00 <MCP2515_DiagnoseErrors+0x68>
 8001bfa:	4858      	ldr	r0, [pc, #352]	@ (8001d5c <MCP2515_DiagnoseErrors+0x1c4>)
 8001bfc:	f005 feae 	bl	800795c <puts>
    if (canintf & 0x40) printf("INFO: WAKIF - Wake-up Interrupt\r\n");
 8001c00:	79fb      	ldrb	r3, [r7, #7]
 8001c02:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c06:	2b00      	cmp	r3, #0
 8001c08:	d002      	beq.n	8001c10 <MCP2515_DiagnoseErrors+0x78>
 8001c0a:	4855      	ldr	r0, [pc, #340]	@ (8001d60 <MCP2515_DiagnoseErrors+0x1c8>)
 8001c0c:	f005 fea6 	bl	800795c <puts>
    if (canintf & 0x20) printf("WARNING: ERRIF - Error Interrupt\r\n");
 8001c10:	79fb      	ldrb	r3, [r7, #7]
 8001c12:	f003 0320 	and.w	r3, r3, #32
 8001c16:	2b00      	cmp	r3, #0
 8001c18:	d002      	beq.n	8001c20 <MCP2515_DiagnoseErrors+0x88>
 8001c1a:	4852      	ldr	r0, [pc, #328]	@ (8001d64 <MCP2515_DiagnoseErrors+0x1cc>)
 8001c1c:	f005 fe9e 	bl	800795c <puts>
    if (canintf & 0x10) printf("OK: TX2IF - Transmit Buffer 2 Interrupt\r\n");
 8001c20:	79fb      	ldrb	r3, [r7, #7]
 8001c22:	f003 0310 	and.w	r3, r3, #16
 8001c26:	2b00      	cmp	r3, #0
 8001c28:	d002      	beq.n	8001c30 <MCP2515_DiagnoseErrors+0x98>
 8001c2a:	484f      	ldr	r0, [pc, #316]	@ (8001d68 <MCP2515_DiagnoseErrors+0x1d0>)
 8001c2c:	f005 fe96 	bl	800795c <puts>
    if (canintf & 0x08) printf("OK: TX1IF - Transmit Buffer 1 Interrupt\r\n");
 8001c30:	79fb      	ldrb	r3, [r7, #7]
 8001c32:	f003 0308 	and.w	r3, r3, #8
 8001c36:	2b00      	cmp	r3, #0
 8001c38:	d002      	beq.n	8001c40 <MCP2515_DiagnoseErrors+0xa8>
 8001c3a:	484c      	ldr	r0, [pc, #304]	@ (8001d6c <MCP2515_DiagnoseErrors+0x1d4>)
 8001c3c:	f005 fe8e 	bl	800795c <puts>
    if (canintf & 0x04) printf("OK: TX0IF - Transmit Buffer 0 Interrupt\r\n");
 8001c40:	79fb      	ldrb	r3, [r7, #7]
 8001c42:	f003 0304 	and.w	r3, r3, #4
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d002      	beq.n	8001c50 <MCP2515_DiagnoseErrors+0xb8>
 8001c4a:	4849      	ldr	r0, [pc, #292]	@ (8001d70 <MCP2515_DiagnoseErrors+0x1d8>)
 8001c4c:	f005 fe86 	bl	800795c <puts>
    if (canintf & 0x02) printf("INFO: RX1IF - Receive Buffer 1 Interrupt\r\n");
 8001c50:	79fb      	ldrb	r3, [r7, #7]
 8001c52:	f003 0302 	and.w	r3, r3, #2
 8001c56:	2b00      	cmp	r3, #0
 8001c58:	d002      	beq.n	8001c60 <MCP2515_DiagnoseErrors+0xc8>
 8001c5a:	4846      	ldr	r0, [pc, #280]	@ (8001d74 <MCP2515_DiagnoseErrors+0x1dc>)
 8001c5c:	f005 fe7e 	bl	800795c <puts>
    if (canintf & 0x01) printf("INFO: RX0IF - Receive Buffer 0 Interrupt\r\n");
 8001c60:	79fb      	ldrb	r3, [r7, #7]
 8001c62:	f003 0301 	and.w	r3, r3, #1
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d002      	beq.n	8001c70 <MCP2515_DiagnoseErrors+0xd8>
 8001c6a:	4843      	ldr	r0, [pc, #268]	@ (8001d78 <MCP2515_DiagnoseErrors+0x1e0>)
 8001c6c:	f005 fe76 	bl	800795c <puts>
    
    // Analyze EFLG
    printf("\r\n--- EFLG Analysis ---\r\n");
 8001c70:	4842      	ldr	r0, [pc, #264]	@ (8001d7c <MCP2515_DiagnoseErrors+0x1e4>)
 8001c72:	f005 fe73 	bl	800795c <puts>
    if (eflg & 0x80) printf("ERROR: RX1OVR - Receive Buffer 1 Overflow\r\n");
 8001c76:	f997 3006 	ldrsb.w	r3, [r7, #6]
 8001c7a:	2b00      	cmp	r3, #0
 8001c7c:	da02      	bge.n	8001c84 <MCP2515_DiagnoseErrors+0xec>
 8001c7e:	4840      	ldr	r0, [pc, #256]	@ (8001d80 <MCP2515_DiagnoseErrors+0x1e8>)
 8001c80:	f005 fe6c 	bl	800795c <puts>
    if (eflg & 0x40) printf("ERROR: RX0OVR - Receive Buffer 0 Overflow\r\n");
 8001c84:	79bb      	ldrb	r3, [r7, #6]
 8001c86:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d002      	beq.n	8001c94 <MCP2515_DiagnoseErrors+0xfc>
 8001c8e:	483d      	ldr	r0, [pc, #244]	@ (8001d84 <MCP2515_DiagnoseErrors+0x1ec>)
 8001c90:	f005 fe64 	bl	800795c <puts>
    if (eflg & 0x20) printf("ERROR: TXBO - Bus-Off State\r\n");
 8001c94:	79bb      	ldrb	r3, [r7, #6]
 8001c96:	f003 0320 	and.w	r3, r3, #32
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d002      	beq.n	8001ca4 <MCP2515_DiagnoseErrors+0x10c>
 8001c9e:	483a      	ldr	r0, [pc, #232]	@ (8001d88 <MCP2515_DiagnoseErrors+0x1f0>)
 8001ca0:	f005 fe5c 	bl	800795c <puts>
    if (eflg & 0x10) printf("WARNING: TXEP - Transmit Error Passive\r\n");
 8001ca4:	79bb      	ldrb	r3, [r7, #6]
 8001ca6:	f003 0310 	and.w	r3, r3, #16
 8001caa:	2b00      	cmp	r3, #0
 8001cac:	d002      	beq.n	8001cb4 <MCP2515_DiagnoseErrors+0x11c>
 8001cae:	4837      	ldr	r0, [pc, #220]	@ (8001d8c <MCP2515_DiagnoseErrors+0x1f4>)
 8001cb0:	f005 fe54 	bl	800795c <puts>
    if (eflg & 0x08) printf("WARNING: RXEP - Receive Error Passive\r\n");
 8001cb4:	79bb      	ldrb	r3, [r7, #6]
 8001cb6:	f003 0308 	and.w	r3, r3, #8
 8001cba:	2b00      	cmp	r3, #0
 8001cbc:	d002      	beq.n	8001cc4 <MCP2515_DiagnoseErrors+0x12c>
 8001cbe:	4834      	ldr	r0, [pc, #208]	@ (8001d90 <MCP2515_DiagnoseErrors+0x1f8>)
 8001cc0:	f005 fe4c 	bl	800795c <puts>
    if (eflg & 0x04) printf("WARNING: TXWAR - Transmit Error Warning\r\n");
 8001cc4:	79bb      	ldrb	r3, [r7, #6]
 8001cc6:	f003 0304 	and.w	r3, r3, #4
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d002      	beq.n	8001cd4 <MCP2515_DiagnoseErrors+0x13c>
 8001cce:	4831      	ldr	r0, [pc, #196]	@ (8001d94 <MCP2515_DiagnoseErrors+0x1fc>)
 8001cd0:	f005 fe44 	bl	800795c <puts>
    if (eflg & 0x02) printf("WARNING: RXWAR - Receive Error Warning\r\n");
 8001cd4:	79bb      	ldrb	r3, [r7, #6]
 8001cd6:	f003 0302 	and.w	r3, r3, #2
 8001cda:	2b00      	cmp	r3, #0
 8001cdc:	d002      	beq.n	8001ce4 <MCP2515_DiagnoseErrors+0x14c>
 8001cde:	482e      	ldr	r0, [pc, #184]	@ (8001d98 <MCP2515_DiagnoseErrors+0x200>)
 8001ce0:	f005 fe3c 	bl	800795c <puts>
    if (eflg & 0x01) printf("WARNING: EWARN - Error Warning\r\n");
 8001ce4:	79bb      	ldrb	r3, [r7, #6]
 8001ce6:	f003 0301 	and.w	r3, r3, #1
 8001cea:	2b00      	cmp	r3, #0
 8001cec:	d002      	beq.n	8001cf4 <MCP2515_DiagnoseErrors+0x15c>
 8001cee:	482b      	ldr	r0, [pc, #172]	@ (8001d9c <MCP2515_DiagnoseErrors+0x204>)
 8001cf0:	f005 fe34 	bl	800795c <puts>
    
    // Error level assessment
    printf("\r\n--- Error Level Assessment ---\r\n");
 8001cf4:	482a      	ldr	r0, [pc, #168]	@ (8001da0 <MCP2515_DiagnoseErrors+0x208>)
 8001cf6:	f005 fe31 	bl	800795c <puts>
    if (eflg & 0x20) {
 8001cfa:	79bb      	ldrb	r3, [r7, #6]
 8001cfc:	f003 0320 	and.w	r3, r3, #32
 8001d00:	2b00      	cmp	r3, #0
 8001d02:	d003      	beq.n	8001d0c <MCP2515_DiagnoseErrors+0x174>
        printf("CRITICAL: Bus-Off state, requires re-initialization\r\n");
 8001d04:	4827      	ldr	r0, [pc, #156]	@ (8001da4 <MCP2515_DiagnoseErrors+0x20c>)
 8001d06:	f005 fe29 	bl	800795c <puts>
 8001d0a:	e013      	b.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x10) {
 8001d0c:	79bb      	ldrb	r3, [r7, #6]
 8001d0e:	f003 0310 	and.w	r3, r3, #16
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d006      	beq.n	8001d24 <MCP2515_DiagnoseErrors+0x18c>
        printf("WARNING: Transmit Error Passive, TEC >= 128\r\n");
 8001d16:	4824      	ldr	r0, [pc, #144]	@ (8001da8 <MCP2515_DiagnoseErrors+0x210>)
 8001d18:	f005 fe20 	bl	800795c <puts>
        printf("   Suggestion: Check bus connection and termination resistors\r\n");
 8001d1c:	4823      	ldr	r0, [pc, #140]	@ (8001dac <MCP2515_DiagnoseErrors+0x214>)
 8001d1e:	f005 fe1d 	bl	800795c <puts>
 8001d22:	e007      	b.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
    } else if (eflg & 0x04) {
 8001d24:	79bb      	ldrb	r3, [r7, #6]
 8001d26:	f003 0304 	and.w	r3, r3, #4
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d002      	beq.n	8001d34 <MCP2515_DiagnoseErrors+0x19c>
        printf("INFO: Transmit Error Warning, TEC >= 96\r\n");
 8001d2e:	4820      	ldr	r0, [pc, #128]	@ (8001db0 <MCP2515_DiagnoseErrors+0x218>)
 8001d30:	f005 fe14 	bl	800795c <puts>
    }
    
    printf("===============================\r\n");
 8001d34:	481f      	ldr	r0, [pc, #124]	@ (8001db4 <MCP2515_DiagnoseErrors+0x21c>)
 8001d36:	f005 fe11 	bl	800795c <puts>
}
 8001d3a:	bf00      	nop
 8001d3c:	3708      	adds	r7, #8
 8001d3e:	46bd      	mov	sp, r7
 8001d40:	bd80      	pop	{r7, pc}
 8001d42:	bf00      	nop
 8001d44:	08009530 	.word	0x08009530
 8001d48:	08009478 	.word	0x08009478
 8001d4c:	0800948c 	.word	0x0800948c
 8001d50:	08009554 	.word	0x08009554
 8001d54:	08009578 	.word	0x08009578
 8001d58:	0800959c 	.word	0x0800959c
 8001d5c:	080095b8 	.word	0x080095b8
 8001d60:	080095e4 	.word	0x080095e4
 8001d64:	08009608 	.word	0x08009608
 8001d68:	0800962c 	.word	0x0800962c
 8001d6c:	08009658 	.word	0x08009658
 8001d70:	08009684 	.word	0x08009684
 8001d74:	080096b0 	.word	0x080096b0
 8001d78:	080096dc 	.word	0x080096dc
 8001d7c:	08009708 	.word	0x08009708
 8001d80:	08009724 	.word	0x08009724
 8001d84:	08009750 	.word	0x08009750
 8001d88:	0800977c 	.word	0x0800977c
 8001d8c:	0800979c 	.word	0x0800979c
 8001d90:	080097c4 	.word	0x080097c4
 8001d94:	080097ec 	.word	0x080097ec
 8001d98:	08009818 	.word	0x08009818
 8001d9c:	08009840 	.word	0x08009840
 8001da0:	08009860 	.word	0x08009860
 8001da4:	08009884 	.word	0x08009884
 8001da8:	080098bc 	.word	0x080098bc
 8001dac:	080098ec 	.word	0x080098ec
 8001db0:	0800992c 	.word	0x0800992c
 8001db4:	08009958 	.word	0x08009958

08001db8 <MCP2515_ClearAllErrors>:
  * @brief  清除所有错误标志和中断标志
  * @param  None
  * @retval None
  */
void MCP2515_ClearAllErrors(void)
{
 8001db8:	b580      	push	{r7, lr}
 8001dba:	af00      	add	r7, sp, #0
    printf("Clearing error flags...\r\n");
 8001dbc:	4805      	ldr	r0, [pc, #20]	@ (8001dd4 <MCP2515_ClearAllErrors+0x1c>)
 8001dbe:	f005 fdcd 	bl	800795c <puts>
    
    // Clear interrupt flags
    MCP2515_WriteRegister(MCP2515_CANINTF, 0x00);
 8001dc2:	2100      	movs	r1, #0
 8001dc4:	202c      	movs	r0, #44	@ 0x2c
 8001dc6:	f7ff fa1d 	bl	8001204 <MCP2515_WriteRegister>
    
    printf("Error flags cleared\r\n");
 8001dca:	4803      	ldr	r0, [pc, #12]	@ (8001dd8 <MCP2515_ClearAllErrors+0x20>)
 8001dcc:	f005 fdc6 	bl	800795c <puts>
}
 8001dd0:	bf00      	nop
 8001dd2:	bd80      	pop	{r7, pc}
 8001dd4:	0800997c 	.word	0x0800997c
 8001dd8:	08009998 	.word	0x08009998

08001ddc <MCP2515_LoopbackTest>:
  * @brief  回环模式测试
  * @param  None
  * @retval 测试结果 (MCP2515_OK: 成功, MCP2515_ERROR: 失败)
  */
uint8_t MCP2515_LoopbackTest(void)
{
 8001ddc:	b580      	push	{r7, lr}
 8001dde:	b08c      	sub	sp, #48	@ 0x30
 8001de0:	af00      	add	r7, sp, #0
    MCP2515_CANMessage_t test_msg;
    MCP2515_CANMessage_t recv_msg;
    uint8_t result = MCP2515_ERROR;
 8001de2:	2301      	movs	r3, #1
 8001de4:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    
    printf("\r\n=== Loopback Mode Test ===\r\n");
 8001de8:	4854      	ldr	r0, [pc, #336]	@ (8001f3c <MCP2515_LoopbackTest+0x160>)
 8001dea:	f005 fdb7 	bl	800795c <puts>
    
    // Switch to loopback mode
    printf("Switching to loopback mode...\r\n");
 8001dee:	4854      	ldr	r0, [pc, #336]	@ (8001f40 <MCP2515_LoopbackTest+0x164>)
 8001df0:	f005 fdb4 	bl	800795c <puts>
    if (MCP2515_SetMode(MCP2515_MODE_LOOPBACK) != MCP2515_OK) {
 8001df4:	2040      	movs	r0, #64	@ 0x40
 8001df6:	f7ff fa95 	bl	8001324 <MCP2515_SetMode>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	2b00      	cmp	r3, #0
 8001dfe:	d004      	beq.n	8001e0a <MCP2515_LoopbackTest+0x2e>
        printf("ERROR: Failed to switch to loopback mode\r\n");
 8001e00:	4850      	ldr	r0, [pc, #320]	@ (8001f44 <MCP2515_LoopbackTest+0x168>)
 8001e02:	f005 fdab 	bl	800795c <puts>
        return MCP2515_ERROR;
 8001e06:	2301      	movs	r3, #1
 8001e08:	e093      	b.n	8001f32 <MCP2515_LoopbackTest+0x156>
    }
    
    HAL_Delay(100);  // Wait for mode switch completion
 8001e0a:	2064      	movs	r0, #100	@ 0x64
 8001e0c:	f000 fb8c 	bl	8002528 <HAL_Delay>
    
    // Prepare test message
    test_msg.id = 0x123;
 8001e10:	f240 1323 	movw	r3, #291	@ 0x123
 8001e14:	613b      	str	r3, [r7, #16]
    test_msg.dlc = 8;
 8001e16:	2308      	movs	r3, #8
 8001e18:	75bb      	strb	r3, [r7, #22]
    test_msg.rtr = 0;
 8001e1a:	2300      	movs	r3, #0
 8001e1c:	757b      	strb	r3, [r7, #21]
    test_msg.ide = 0;
 8001e1e:	2300      	movs	r3, #0
 8001e20:	753b      	strb	r3, [r7, #20]
    for (int i = 0; i < 8; i++) {
 8001e22:	2300      	movs	r3, #0
 8001e24:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e26:	e00c      	b.n	8001e42 <MCP2515_LoopbackTest+0x66>
        test_msg.data[i] = 0xA0 + i;
 8001e28:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e2a:	b2db      	uxtb	r3, r3
 8001e2c:	3b60      	subs	r3, #96	@ 0x60
 8001e2e:	b2d9      	uxtb	r1, r3
 8001e30:	f107 0217 	add.w	r2, r7, #23
 8001e34:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e36:	4413      	add	r3, r2
 8001e38:	460a      	mov	r2, r1
 8001e3a:	701a      	strb	r2, [r3, #0]
    for (int i = 0; i < 8; i++) {
 8001e3c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e3e:	3301      	adds	r3, #1
 8001e40:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001e42:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001e44:	2b07      	cmp	r3, #7
 8001e46:	ddef      	ble.n	8001e28 <MCP2515_LoopbackTest+0x4c>
    }
    
    printf("Sending test message ID:0x%03lX...\r\n", test_msg.id);
 8001e48:	693b      	ldr	r3, [r7, #16]
 8001e4a:	4619      	mov	r1, r3
 8001e4c:	483e      	ldr	r0, [pc, #248]	@ (8001f48 <MCP2515_LoopbackTest+0x16c>)
 8001e4e:	f005 fd1d 	bl	800788c <iprintf>
    
    // Send message
    if (MCP2515_SendMessage(&test_msg) == MCP2515_OK) {
 8001e52:	f107 0310 	add.w	r3, r7, #16
 8001e56:	4618      	mov	r0, r3
 8001e58:	f7ff fb8c 	bl	8001574 <MCP2515_SendMessage>
 8001e5c:	4603      	mov	r3, r0
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d156      	bne.n	8001f10 <MCP2515_LoopbackTest+0x134>
        printf("OK: Message sent successfully\r\n");
 8001e62:	483a      	ldr	r0, [pc, #232]	@ (8001f4c <MCP2515_LoopbackTest+0x170>)
 8001e64:	f005 fd7a 	bl	800795c <puts>
        
        // Wait for a while
        HAL_Delay(50);
 8001e68:	2032      	movs	r0, #50	@ 0x32
 8001e6a:	f000 fb5d 	bl	8002528 <HAL_Delay>
        
        // Check if message received
        if (MCP2515_CheckReceive() == MCP2515_OK) {
 8001e6e:	f7ff fc0b 	bl	8001688 <MCP2515_CheckReceive>
 8001e72:	4603      	mov	r3, r0
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d147      	bne.n	8001f08 <MCP2515_LoopbackTest+0x12c>
            if (MCP2515_ReceiveMessage(&recv_msg) == MCP2515_OK) {
 8001e78:	463b      	mov	r3, r7
 8001e7a:	4618      	mov	r0, r3
 8001e7c:	f7ff fbd0 	bl	8001620 <MCP2515_ReceiveMessage>
 8001e80:	4603      	mov	r3, r0
 8001e82:	2b00      	cmp	r3, #0
 8001e84:	d13c      	bne.n	8001f00 <MCP2515_LoopbackTest+0x124>
                printf("OK: Received loopback message ID:0x%03lX\r\n", recv_msg.id);
 8001e86:	683b      	ldr	r3, [r7, #0]
 8001e88:	4619      	mov	r1, r3
 8001e8a:	4831      	ldr	r0, [pc, #196]	@ (8001f50 <MCP2515_LoopbackTest+0x174>)
 8001e8c:	f005 fcfe 	bl	800788c <iprintf>
                
                // Verify data
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001e90:	683a      	ldr	r2, [r7, #0]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	429a      	cmp	r2, r3
 8001e96:	d12f      	bne.n	8001ef8 <MCP2515_LoopbackTest+0x11c>
 8001e98:	79ba      	ldrb	r2, [r7, #6]
 8001e9a:	7dbb      	ldrb	r3, [r7, #22]
 8001e9c:	429a      	cmp	r2, r3
 8001e9e:	d12b      	bne.n	8001ef8 <MCP2515_LoopbackTest+0x11c>
                    uint8_t data_match = 1;
 8001ea0:	2301      	movs	r3, #1
 8001ea2:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                    for (int i = 0; i < test_msg.dlc; i++) {
 8001ea6:	2300      	movs	r3, #0
 8001ea8:	623b      	str	r3, [r7, #32]
 8001eaa:	e011      	b.n	8001ed0 <MCP2515_LoopbackTest+0xf4>
                        if (recv_msg.data[i] != test_msg.data[i]) {
 8001eac:	1dfa      	adds	r2, r7, #7
 8001eae:	6a3b      	ldr	r3, [r7, #32]
 8001eb0:	4413      	add	r3, r2
 8001eb2:	781a      	ldrb	r2, [r3, #0]
 8001eb4:	f107 0117 	add.w	r1, r7, #23
 8001eb8:	6a3b      	ldr	r3, [r7, #32]
 8001eba:	440b      	add	r3, r1
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	429a      	cmp	r2, r3
 8001ec0:	d003      	beq.n	8001eca <MCP2515_LoopbackTest+0xee>
                            data_match = 0;
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
                            break;
 8001ec8:	e007      	b.n	8001eda <MCP2515_LoopbackTest+0xfe>
                    for (int i = 0; i < test_msg.dlc; i++) {
 8001eca:	6a3b      	ldr	r3, [r7, #32]
 8001ecc:	3301      	adds	r3, #1
 8001ece:	623b      	str	r3, [r7, #32]
 8001ed0:	7dbb      	ldrb	r3, [r7, #22]
 8001ed2:	461a      	mov	r2, r3
 8001ed4:	6a3b      	ldr	r3, [r7, #32]
 8001ed6:	4293      	cmp	r3, r2
 8001ed8:	dbe8      	blt.n	8001eac <MCP2515_LoopbackTest+0xd0>
                        }
                    }
                    
                    if (data_match) {
 8001eda:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	d006      	beq.n	8001ef0 <MCP2515_LoopbackTest+0x114>
                        printf("SUCCESS: Loopback test passed! MCP2515 hardware is working\r\n");
 8001ee2:	481c      	ldr	r0, [pc, #112]	@ (8001f54 <MCP2515_LoopbackTest+0x178>)
 8001ee4:	f005 fd3a 	bl	800795c <puts>
                        result = MCP2515_OK;
 8001ee8:	2300      	movs	r3, #0
 8001eea:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001eee:	e012      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                    } else {
                        printf("ERROR: Data mismatch\r\n");
 8001ef0:	4819      	ldr	r0, [pc, #100]	@ (8001f58 <MCP2515_LoopbackTest+0x17c>)
 8001ef2:	f005 fd33 	bl	800795c <puts>
                if (recv_msg.id == test_msg.id && recv_msg.dlc == test_msg.dlc) {
 8001ef6:	e00e      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                    }
                } else {
                    printf("ERROR: ID or DLC mismatch\r\n");
 8001ef8:	4818      	ldr	r0, [pc, #96]	@ (8001f5c <MCP2515_LoopbackTest+0x180>)
 8001efa:	f005 fd2f 	bl	800795c <puts>
 8001efe:	e00a      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
                }
            } else {
                printf("ERROR: Failed to receive message\r\n");
 8001f00:	4817      	ldr	r0, [pc, #92]	@ (8001f60 <MCP2515_LoopbackTest+0x184>)
 8001f02:	f005 fd2b 	bl	800795c <puts>
 8001f06:	e006      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
            }
        } else {
            printf("ERROR: No loopback message received\r\n");
 8001f08:	4816      	ldr	r0, [pc, #88]	@ (8001f64 <MCP2515_LoopbackTest+0x188>)
 8001f0a:	f005 fd27 	bl	800795c <puts>
 8001f0e:	e002      	b.n	8001f16 <MCP2515_LoopbackTest+0x13a>
        }
    } else {
        printf("ERROR: Message send failed\r\n");
 8001f10:	4815      	ldr	r0, [pc, #84]	@ (8001f68 <MCP2515_LoopbackTest+0x18c>)
 8001f12:	f005 fd23 	bl	800795c <puts>
    }
    
    // Switch back to normal mode
    printf("Switching back to normal mode...\r\n");
 8001f16:	4815      	ldr	r0, [pc, #84]	@ (8001f6c <MCP2515_LoopbackTest+0x190>)
 8001f18:	f005 fd20 	bl	800795c <puts>
    MCP2515_SetMode(MCP2515_MODE_NORMAL);
 8001f1c:	2000      	movs	r0, #0
 8001f1e:	f7ff fa01 	bl	8001324 <MCP2515_SetMode>
    HAL_Delay(100);
 8001f22:	2064      	movs	r0, #100	@ 0x64
 8001f24:	f000 fb00 	bl	8002528 <HAL_Delay>
    
    printf("==========================\r\n");
 8001f28:	4811      	ldr	r0, [pc, #68]	@ (8001f70 <MCP2515_LoopbackTest+0x194>)
 8001f2a:	f005 fd17 	bl	800795c <puts>
    return result;
 8001f2e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	3730      	adds	r7, #48	@ 0x30
 8001f36:	46bd      	mov	sp, r7
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	080099b0 	.word	0x080099b0
 8001f40:	080099d0 	.word	0x080099d0
 8001f44:	080099f0 	.word	0x080099f0
 8001f48:	08009a1c 	.word	0x08009a1c
 8001f4c:	08009a44 	.word	0x08009a44
 8001f50:	08009a64 	.word	0x08009a64
 8001f54:	08009a90 	.word	0x08009a90
 8001f58:	08009acc 	.word	0x08009acc
 8001f5c:	08009ae4 	.word	0x08009ae4
 8001f60:	08009b00 	.word	0x08009b00
 8001f64:	08009b24 	.word	0x08009b24
 8001f68:	08009b4c 	.word	0x08009b4c
 8001f6c:	08009b68 	.word	0x08009b68
 8001f70:	08009b8c 	.word	0x08009b8c

08001f74 <CAN_DiagnoseAndFix>:
  * @brief  完整的CAN问题诊断和修复流程
  * @param  None
  * @retval None
  */
void CAN_DiagnoseAndFix(void)
{
 8001f74:	b580      	push	{r7, lr}
 8001f76:	af00      	add	r7, sp, #0
    printf("\r\nStarting CAN problem diagnosis and repair process...\r\n");
 8001f78:	4825      	ldr	r0, [pc, #148]	@ (8002010 <CAN_DiagnoseAndFix+0x9c>)
 8001f7a:	f005 fcef 	bl	800795c <puts>
    
    // Step 1: Diagnose current error status
    MCP2515_DiagnoseErrors();
 8001f7e:	f7ff fe0b 	bl	8001b98 <MCP2515_DiagnoseErrors>
    
    // Step 2: Clear error flags
    MCP2515_ClearAllErrors();
 8001f82:	f7ff ff19 	bl	8001db8 <MCP2515_ClearAllErrors>
    
    // Step 3: Loopback mode test
    if (MCP2515_LoopbackTest() == MCP2515_OK) {
 8001f86:	f7ff ff29 	bl	8001ddc <MCP2515_LoopbackTest>
 8001f8a:	4603      	mov	r3, r0
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d11b      	bne.n	8001fc8 <CAN_DiagnoseAndFix+0x54>
        printf("\r\nSUCCESS: MCP2515 hardware is functioning normally\r\n");
 8001f90:	4820      	ldr	r0, [pc, #128]	@ (8002014 <CAN_DiagnoseAndFix+0xa0>)
 8001f92:	f005 fce3 	bl	800795c <puts>
        printf("Possible issues:\r\n");
 8001f96:	4820      	ldr	r0, [pc, #128]	@ (8002018 <CAN_DiagnoseAndFix+0xa4>)
 8001f98:	f005 fce0 	bl	800795c <puts>
        printf("   1. No other CAN nodes on the bus to acknowledge\r\n");
 8001f9c:	481f      	ldr	r0, [pc, #124]	@ (800201c <CAN_DiagnoseAndFix+0xa8>)
 8001f9e:	f005 fcdd 	bl	800795c <puts>
        printf("   2. Termination resistors not properly installed\r\n");
 8001fa2:	481f      	ldr	r0, [pc, #124]	@ (8002020 <CAN_DiagnoseAndFix+0xac>)
 8001fa4:	f005 fcda 	bl	800795c <puts>
        printf("   3. CAN transceiver connection problems\r\n");
 8001fa8:	481e      	ldr	r0, [pc, #120]	@ (8002024 <CAN_DiagnoseAndFix+0xb0>)
 8001faa:	f005 fcd7 	bl	800795c <puts>
        
        printf("\r\nSuggested solutions:\r\n");
 8001fae:	481e      	ldr	r0, [pc, #120]	@ (8002028 <CAN_DiagnoseAndFix+0xb4>)
 8001fb0:	f005 fcd4 	bl	800795c <puts>
        printf("   1. Add 120 ohm resistor between CAN_H and CAN_L\r\n");
 8001fb4:	481d      	ldr	r0, [pc, #116]	@ (800202c <CAN_DiagnoseAndFix+0xb8>)
 8001fb6:	f005 fcd1 	bl	800795c <puts>
        printf("   2. Connect a second CAN node or CAN analyzer\r\n");
 8001fba:	481d      	ldr	r0, [pc, #116]	@ (8002030 <CAN_DiagnoseAndFix+0xbc>)
 8001fbc:	f005 fcce 	bl	800795c <puts>
        printf("   3. Check TJA1050 transceiver connections\r\n");
 8001fc0:	481c      	ldr	r0, [pc, #112]	@ (8002034 <CAN_DiagnoseAndFix+0xc0>)
 8001fc2:	f005 fccb 	bl	800795c <puts>
 8001fc6:	e00e      	b.n	8001fe6 <CAN_DiagnoseAndFix+0x72>
    } else {
        printf("\r\nERROR: MCP2515 hardware may have problems\r\n");
 8001fc8:	481b      	ldr	r0, [pc, #108]	@ (8002038 <CAN_DiagnoseAndFix+0xc4>)
 8001fca:	f005 fcc7 	bl	800795c <puts>
        printf("Suggested checks:\r\n");
 8001fce:	481b      	ldr	r0, [pc, #108]	@ (800203c <CAN_DiagnoseAndFix+0xc8>)
 8001fd0:	f005 fcc4 	bl	800795c <puts>
        printf("   1. Verify SPI connections are correct\r\n");
 8001fd4:	481a      	ldr	r0, [pc, #104]	@ (8002040 <CAN_DiagnoseAndFix+0xcc>)
 8001fd6:	f005 fcc1 	bl	800795c <puts>
        printf("   2. Check MCP2515 power supply\r\n");
 8001fda:	481a      	ldr	r0, [pc, #104]	@ (8002044 <CAN_DiagnoseAndFix+0xd0>)
 8001fdc:	f005 fcbe 	bl	800795c <puts>
        printf("   3. Verify crystal oscillator is working\r\n");
 8001fe0:	4819      	ldr	r0, [pc, #100]	@ (8002048 <CAN_DiagnoseAndFix+0xd4>)
 8001fe2:	f005 fcbb 	bl	800795c <puts>
    }
    
    // Step 4: Re-initialize
    printf("\r\nRe-initializing MCP2515...\r\n");
 8001fe6:	4819      	ldr	r0, [pc, #100]	@ (800204c <CAN_DiagnoseAndFix+0xd8>)
 8001fe8:	f005 fcb8 	bl	800795c <puts>
    if (MCP2515_Init(MCP2515_BAUD_500K) == MCP2515_OK) {
 8001fec:	2002      	movs	r0, #2
 8001fee:	f7ff f9fb 	bl	80013e8 <MCP2515_Init>
 8001ff2:	4603      	mov	r3, r0
 8001ff4:	2b00      	cmp	r3, #0
 8001ff6:	d103      	bne.n	8002000 <CAN_DiagnoseAndFix+0x8c>
        printf("OK: MCP2515 re-initialization successful\r\n");
 8001ff8:	4815      	ldr	r0, [pc, #84]	@ (8002050 <CAN_DiagnoseAndFix+0xdc>)
 8001ffa:	f005 fcaf 	bl	800795c <puts>
 8001ffe:	e002      	b.n	8002006 <CAN_DiagnoseAndFix+0x92>
    } else {
        printf("ERROR: MCP2515 re-initialization failed\r\n");
 8002000:	4814      	ldr	r0, [pc, #80]	@ (8002054 <CAN_DiagnoseAndFix+0xe0>)
 8002002:	f005 fcab 	bl	800795c <puts>
    }
    
    printf("\r\nDiagnosis and repair process completed\r\n");
 8002006:	4814      	ldr	r0, [pc, #80]	@ (8002058 <CAN_DiagnoseAndFix+0xe4>)
 8002008:	f005 fca8 	bl	800795c <puts>
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	08009ba8 	.word	0x08009ba8
 8002014:	08009be0 	.word	0x08009be0
 8002018:	08009c18 	.word	0x08009c18
 800201c:	08009c2c 	.word	0x08009c2c
 8002020:	08009c60 	.word	0x08009c60
 8002024:	08009c94 	.word	0x08009c94
 8002028:	08009cc0 	.word	0x08009cc0
 800202c:	08009cd8 	.word	0x08009cd8
 8002030:	08009d0c 	.word	0x08009d0c
 8002034:	08009d40 	.word	0x08009d40
 8002038:	08009d70 	.word	0x08009d70
 800203c:	08009da0 	.word	0x08009da0
 8002040:	08009db4 	.word	0x08009db4
 8002044:	08009de0 	.word	0x08009de0
 8002048:	08009e04 	.word	0x08009e04
 800204c:	08009e30 	.word	0x08009e30
 8002050:	08009e50 	.word	0x08009e50
 8002054:	08009e7c 	.word	0x08009e7c
 8002058:	08009ea8 	.word	0x08009ea8

0800205c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	b082      	sub	sp, #8
 8002060:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002062:	2300      	movs	r3, #0
 8002064:	607b      	str	r3, [r7, #4]
 8002066:	4b12      	ldr	r3, [pc, #72]	@ (80020b0 <HAL_MspInit+0x54>)
 8002068:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800206a:	4a11      	ldr	r2, [pc, #68]	@ (80020b0 <HAL_MspInit+0x54>)
 800206c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002070:	6453      	str	r3, [r2, #68]	@ 0x44
 8002072:	4b0f      	ldr	r3, [pc, #60]	@ (80020b0 <HAL_MspInit+0x54>)
 8002074:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002076:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800207a:	607b      	str	r3, [r7, #4]
 800207c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800207e:	2300      	movs	r3, #0
 8002080:	603b      	str	r3, [r7, #0]
 8002082:	4b0b      	ldr	r3, [pc, #44]	@ (80020b0 <HAL_MspInit+0x54>)
 8002084:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002086:	4a0a      	ldr	r2, [pc, #40]	@ (80020b0 <HAL_MspInit+0x54>)
 8002088:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800208c:	6413      	str	r3, [r2, #64]	@ 0x40
 800208e:	4b08      	ldr	r3, [pc, #32]	@ (80020b0 <HAL_MspInit+0x54>)
 8002090:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002092:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002096:	603b      	str	r3, [r7, #0]
 8002098:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800209a:	2200      	movs	r2, #0
 800209c:	210f      	movs	r1, #15
 800209e:	f06f 0001 	mvn.w	r0, #1
 80020a2:	f000 fb1d 	bl	80026e0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80020a6:	bf00      	nop
 80020a8:	3708      	adds	r7, #8
 80020aa:	46bd      	mov	sp, r7
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	40023800 	.word	0x40023800

080020b4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b08a      	sub	sp, #40	@ 0x28
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020bc:	f107 0314 	add.w	r3, r7, #20
 80020c0:	2200      	movs	r2, #0
 80020c2:	601a      	str	r2, [r3, #0]
 80020c4:	605a      	str	r2, [r3, #4]
 80020c6:	609a      	str	r2, [r3, #8]
 80020c8:	60da      	str	r2, [r3, #12]
 80020ca:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4a19      	ldr	r2, [pc, #100]	@ (8002138 <HAL_SPI_MspInit+0x84>)
 80020d2:	4293      	cmp	r3, r2
 80020d4:	d12b      	bne.n	800212e <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80020d6:	2300      	movs	r3, #0
 80020d8:	613b      	str	r3, [r7, #16]
 80020da:	4b18      	ldr	r3, [pc, #96]	@ (800213c <HAL_SPI_MspInit+0x88>)
 80020dc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020de:	4a17      	ldr	r2, [pc, #92]	@ (800213c <HAL_SPI_MspInit+0x88>)
 80020e0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80020e4:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e6:	4b15      	ldr	r3, [pc, #84]	@ (800213c <HAL_SPI_MspInit+0x88>)
 80020e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020ea:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80020ee:	613b      	str	r3, [r7, #16]
 80020f0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80020f2:	2300      	movs	r3, #0
 80020f4:	60fb      	str	r3, [r7, #12]
 80020f6:	4b11      	ldr	r3, [pc, #68]	@ (800213c <HAL_SPI_MspInit+0x88>)
 80020f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020fa:	4a10      	ldr	r2, [pc, #64]	@ (800213c <HAL_SPI_MspInit+0x88>)
 80020fc:	f043 0302 	orr.w	r3, r3, #2
 8002100:	6313      	str	r3, [r2, #48]	@ 0x30
 8002102:	4b0e      	ldr	r3, [pc, #56]	@ (800213c <HAL_SPI_MspInit+0x88>)
 8002104:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002106:	f003 0302 	and.w	r3, r3, #2
 800210a:	60fb      	str	r3, [r7, #12]
 800210c:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 800210e:	2338      	movs	r3, #56	@ 0x38
 8002110:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002112:	2302      	movs	r3, #2
 8002114:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002116:	2300      	movs	r3, #0
 8002118:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800211a:	2303      	movs	r3, #3
 800211c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800211e:	2305      	movs	r3, #5
 8002120:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002122:	f107 0314 	add.w	r3, r7, #20
 8002126:	4619      	mov	r1, r3
 8002128:	4805      	ldr	r0, [pc, #20]	@ (8002140 <HAL_SPI_MspInit+0x8c>)
 800212a:	f000 fb03 	bl	8002734 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 800212e:	bf00      	nop
 8002130:	3728      	adds	r7, #40	@ 0x28
 8002132:	46bd      	mov	sp, r7
 8002134:	bd80      	pop	{r7, pc}
 8002136:	bf00      	nop
 8002138:	40013000 	.word	0x40013000
 800213c:	40023800 	.word	0x40023800
 8002140:	40020400 	.word	0x40020400

08002144 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002144:	b580      	push	{r7, lr}
 8002146:	b08a      	sub	sp, #40	@ 0x28
 8002148:	af00      	add	r7, sp, #0
 800214a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800214c:	f107 0314 	add.w	r3, r7, #20
 8002150:	2200      	movs	r2, #0
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	605a      	str	r2, [r3, #4]
 8002156:	609a      	str	r2, [r3, #8]
 8002158:	60da      	str	r2, [r3, #12]
 800215a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	4a19      	ldr	r2, [pc, #100]	@ (80021c8 <HAL_UART_MspInit+0x84>)
 8002162:	4293      	cmp	r3, r2
 8002164:	d12b      	bne.n	80021be <HAL_UART_MspInit+0x7a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002166:	2300      	movs	r3, #0
 8002168:	613b      	str	r3, [r7, #16]
 800216a:	4b18      	ldr	r3, [pc, #96]	@ (80021cc <HAL_UART_MspInit+0x88>)
 800216c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800216e:	4a17      	ldr	r2, [pc, #92]	@ (80021cc <HAL_UART_MspInit+0x88>)
 8002170:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002174:	6413      	str	r3, [r2, #64]	@ 0x40
 8002176:	4b15      	ldr	r3, [pc, #84]	@ (80021cc <HAL_UART_MspInit+0x88>)
 8002178:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800217a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800217e:	613b      	str	r3, [r7, #16]
 8002180:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002182:	2300      	movs	r3, #0
 8002184:	60fb      	str	r3, [r7, #12]
 8002186:	4b11      	ldr	r3, [pc, #68]	@ (80021cc <HAL_UART_MspInit+0x88>)
 8002188:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800218a:	4a10      	ldr	r2, [pc, #64]	@ (80021cc <HAL_UART_MspInit+0x88>)
 800218c:	f043 0301 	orr.w	r3, r3, #1
 8002190:	6313      	str	r3, [r2, #48]	@ 0x30
 8002192:	4b0e      	ldr	r3, [pc, #56]	@ (80021cc <HAL_UART_MspInit+0x88>)
 8002194:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002196:	f003 0301 	and.w	r3, r3, #1
 800219a:	60fb      	str	r3, [r7, #12]
 800219c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800219e:	230c      	movs	r3, #12
 80021a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80021a2:	2302      	movs	r3, #2
 80021a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a6:	2300      	movs	r3, #0
 80021a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80021aa:	2303      	movs	r3, #3
 80021ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80021ae:	2307      	movs	r3, #7
 80021b0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80021b2:	f107 0314 	add.w	r3, r7, #20
 80021b6:	4619      	mov	r1, r3
 80021b8:	4805      	ldr	r0, [pc, #20]	@ (80021d0 <HAL_UART_MspInit+0x8c>)
 80021ba:	f000 fabb 	bl	8002734 <HAL_GPIO_Init>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80021be:	bf00      	nop
 80021c0:	3728      	adds	r7, #40	@ 0x28
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	40004400 	.word	0x40004400
 80021cc:	40023800 	.word	0x40023800
 80021d0:	40020000 	.word	0x40020000

080021d4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80021d4:	b580      	push	{r7, lr}
 80021d6:	b08c      	sub	sp, #48	@ 0x30
 80021d8:	af00      	add	r7, sp, #0
 80021da:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 80021dc:	2300      	movs	r3, #0
 80021de:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 80021e0:	2300      	movs	r3, #0
 80021e2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 80021e4:	2300      	movs	r3, #0
 80021e6:	60bb      	str	r3, [r7, #8]
 80021e8:	4b2f      	ldr	r3, [pc, #188]	@ (80022a8 <HAL_InitTick+0xd4>)
 80021ea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ec:	4a2e      	ldr	r2, [pc, #184]	@ (80022a8 <HAL_InitTick+0xd4>)
 80021ee:	f043 0301 	orr.w	r3, r3, #1
 80021f2:	6453      	str	r3, [r2, #68]	@ 0x44
 80021f4:	4b2c      	ldr	r3, [pc, #176]	@ (80022a8 <HAL_InitTick+0xd4>)
 80021f6:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021f8:	f003 0301 	and.w	r3, r3, #1
 80021fc:	60bb      	str	r3, [r7, #8]
 80021fe:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8002200:	f107 020c 	add.w	r2, r7, #12
 8002204:	f107 0310 	add.w	r3, r7, #16
 8002208:	4611      	mov	r1, r2
 800220a:	4618      	mov	r0, r3
 800220c:	f001 f904 	bl	8003418 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8002210:	f001 f8ee 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 8002214:	4603      	mov	r3, r0
 8002216:	005b      	lsls	r3, r3, #1
 8002218:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 800221a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800221c:	4a23      	ldr	r2, [pc, #140]	@ (80022ac <HAL_InitTick+0xd8>)
 800221e:	fba2 2303 	umull	r2, r3, r2, r3
 8002222:	0c9b      	lsrs	r3, r3, #18
 8002224:	3b01      	subs	r3, #1
 8002226:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8002228:	4b21      	ldr	r3, [pc, #132]	@ (80022b0 <HAL_InitTick+0xdc>)
 800222a:	4a22      	ldr	r2, [pc, #136]	@ (80022b4 <HAL_InitTick+0xe0>)
 800222c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 800222e:	4b20      	ldr	r3, [pc, #128]	@ (80022b0 <HAL_InitTick+0xdc>)
 8002230:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8002234:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8002236:	4a1e      	ldr	r2, [pc, #120]	@ (80022b0 <HAL_InitTick+0xdc>)
 8002238:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800223a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 800223c:	4b1c      	ldr	r3, [pc, #112]	@ (80022b0 <HAL_InitTick+0xdc>)
 800223e:	2200      	movs	r2, #0
 8002240:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8002242:	4b1b      	ldr	r3, [pc, #108]	@ (80022b0 <HAL_InitTick+0xdc>)
 8002244:	2200      	movs	r2, #0
 8002246:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8002248:	4b19      	ldr	r3, [pc, #100]	@ (80022b0 <HAL_InitTick+0xdc>)
 800224a:	2200      	movs	r2, #0
 800224c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 800224e:	4818      	ldr	r0, [pc, #96]	@ (80022b0 <HAL_InitTick+0xdc>)
 8002250:	f001 fc2e 	bl	8003ab0 <HAL_TIM_Base_Init>
 8002254:	4603      	mov	r3, r0
 8002256:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 800225a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 800225e:	2b00      	cmp	r3, #0
 8002260:	d11b      	bne.n	800229a <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8002262:	4813      	ldr	r0, [pc, #76]	@ (80022b0 <HAL_InitTick+0xdc>)
 8002264:	f001 fc7e 	bl	8003b64 <HAL_TIM_Base_Start_IT>
 8002268:	4603      	mov	r3, r0
 800226a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 800226e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8002272:	2b00      	cmp	r3, #0
 8002274:	d111      	bne.n	800229a <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8002276:	2019      	movs	r0, #25
 8002278:	f000 fa4e 	bl	8002718 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	2b0f      	cmp	r3, #15
 8002280:	d808      	bhi.n	8002294 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8002282:	2200      	movs	r2, #0
 8002284:	6879      	ldr	r1, [r7, #4]
 8002286:	2019      	movs	r0, #25
 8002288:	f000 fa2a 	bl	80026e0 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800228c:	4a0a      	ldr	r2, [pc, #40]	@ (80022b8 <HAL_InitTick+0xe4>)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	6013      	str	r3, [r2, #0]
 8002292:	e002      	b.n	800229a <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8002294:	2301      	movs	r3, #1
 8002296:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 800229a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 800229e:	4618      	mov	r0, r3
 80022a0:	3730      	adds	r7, #48	@ 0x30
 80022a2:	46bd      	mov	sp, r7
 80022a4:	bd80      	pop	{r7, pc}
 80022a6:	bf00      	nop
 80022a8:	40023800 	.word	0x40023800
 80022ac:	431bde83 	.word	0x431bde83
 80022b0:	2000014c 	.word	0x2000014c
 80022b4:	40010000 	.word	0x40010000
 80022b8:	20000004 	.word	0x20000004

080022bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80022bc:	b480      	push	{r7}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80022c0:	bf00      	nop
 80022c2:	e7fd      	b.n	80022c0 <NMI_Handler+0x4>

080022c4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80022c4:	b480      	push	{r7}
 80022c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80022c8:	bf00      	nop
 80022ca:	e7fd      	b.n	80022c8 <HardFault_Handler+0x4>

080022cc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80022cc:	b480      	push	{r7}
 80022ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80022d0:	bf00      	nop
 80022d2:	e7fd      	b.n	80022d0 <MemManage_Handler+0x4>

080022d4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80022d4:	b480      	push	{r7}
 80022d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80022d8:	bf00      	nop
 80022da:	e7fd      	b.n	80022d8 <BusFault_Handler+0x4>

080022dc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80022dc:	b480      	push	{r7}
 80022de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80022e0:	bf00      	nop
 80022e2:	e7fd      	b.n	80022e0 <UsageFault_Handler+0x4>

080022e4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80022e4:	b480      	push	{r7}
 80022e6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80022e8:	bf00      	nop
 80022ea:	46bd      	mov	sp, r7
 80022ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022f0:	4770      	bx	lr
	...

080022f4 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 80022f4:	b580      	push	{r7, lr}
 80022f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 80022f8:	4802      	ldr	r0, [pc, #8]	@ (8002304 <TIM1_UP_TIM10_IRQHandler+0x10>)
 80022fa:	f001 fca3 	bl	8003c44 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 80022fe:	bf00      	nop
 8002300:	bd80      	pop	{r7, pc}
 8002302:	bf00      	nop
 8002304:	2000014c 	.word	0x2000014c

08002308 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8002308:	b580      	push	{r7, lr}
 800230a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(MCP2515_INT_Pin);
 800230c:	f44f 6080 	mov.w	r0, #1024	@ 0x400
 8002310:	f000 fbc6 	bl	8002aa0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */
  // MCP2515中断处理
  // 注意：这里只是触发中断标志，实际处理在CAN任务中进行
  CAN_App_IRQ_Callback();
 8002314:	f7fe fc94 	bl	8000c40 <CAN_App_IRQ_Callback>
  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8002318:	bf00      	nop
 800231a:	bd80      	pop	{r7, pc}

0800231c <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b086      	sub	sp, #24
 8002320:	af00      	add	r7, sp, #0
 8002322:	60f8      	str	r0, [r7, #12]
 8002324:	60b9      	str	r1, [r7, #8]
 8002326:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002328:	2300      	movs	r3, #0
 800232a:	617b      	str	r3, [r7, #20]
 800232c:	e00a      	b.n	8002344 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800232e:	f3af 8000 	nop.w
 8002332:	4601      	mov	r1, r0
 8002334:	68bb      	ldr	r3, [r7, #8]
 8002336:	1c5a      	adds	r2, r3, #1
 8002338:	60ba      	str	r2, [r7, #8]
 800233a:	b2ca      	uxtb	r2, r1
 800233c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800233e:	697b      	ldr	r3, [r7, #20]
 8002340:	3301      	adds	r3, #1
 8002342:	617b      	str	r3, [r7, #20]
 8002344:	697a      	ldr	r2, [r7, #20]
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	429a      	cmp	r2, r3
 800234a:	dbf0      	blt.n	800232e <_read+0x12>
  }

  return len;
 800234c:	687b      	ldr	r3, [r7, #4]
}
 800234e:	4618      	mov	r0, r3
 8002350:	3718      	adds	r7, #24
 8002352:	46bd      	mov	sp, r7
 8002354:	bd80      	pop	{r7, pc}

08002356 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002356:	b480      	push	{r7}
 8002358:	b083      	sub	sp, #12
 800235a:	af00      	add	r7, sp, #0
 800235c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800235e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002362:	4618      	mov	r0, r3
 8002364:	370c      	adds	r7, #12
 8002366:	46bd      	mov	sp, r7
 8002368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800236c:	4770      	bx	lr

0800236e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800236e:	b480      	push	{r7}
 8002370:	b083      	sub	sp, #12
 8002372:	af00      	add	r7, sp, #0
 8002374:	6078      	str	r0, [r7, #4]
 8002376:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002378:	683b      	ldr	r3, [r7, #0]
 800237a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800237e:	605a      	str	r2, [r3, #4]
  return 0;
 8002380:	2300      	movs	r3, #0
}
 8002382:	4618      	mov	r0, r3
 8002384:	370c      	adds	r7, #12
 8002386:	46bd      	mov	sp, r7
 8002388:	f85d 7b04 	ldr.w	r7, [sp], #4
 800238c:	4770      	bx	lr

0800238e <_isatty>:

int _isatty(int file)
{
 800238e:	b480      	push	{r7}
 8002390:	b083      	sub	sp, #12
 8002392:	af00      	add	r7, sp, #0
 8002394:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002396:	2301      	movs	r3, #1
}
 8002398:	4618      	mov	r0, r3
 800239a:	370c      	adds	r7, #12
 800239c:	46bd      	mov	sp, r7
 800239e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023a2:	4770      	bx	lr

080023a4 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80023a4:	b480      	push	{r7}
 80023a6:	b085      	sub	sp, #20
 80023a8:	af00      	add	r7, sp, #0
 80023aa:	60f8      	str	r0, [r7, #12]
 80023ac:	60b9      	str	r1, [r7, #8]
 80023ae:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80023b0:	2300      	movs	r3, #0
}
 80023b2:	4618      	mov	r0, r3
 80023b4:	3714      	adds	r7, #20
 80023b6:	46bd      	mov	sp, r7
 80023b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023bc:	4770      	bx	lr
	...

080023c0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80023c0:	b580      	push	{r7, lr}
 80023c2:	b086      	sub	sp, #24
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80023c8:	4a14      	ldr	r2, [pc, #80]	@ (800241c <_sbrk+0x5c>)
 80023ca:	4b15      	ldr	r3, [pc, #84]	@ (8002420 <_sbrk+0x60>)
 80023cc:	1ad3      	subs	r3, r2, r3
 80023ce:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80023d0:	697b      	ldr	r3, [r7, #20]
 80023d2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80023d4:	4b13      	ldr	r3, [pc, #76]	@ (8002424 <_sbrk+0x64>)
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	2b00      	cmp	r3, #0
 80023da:	d102      	bne.n	80023e2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80023dc:	4b11      	ldr	r3, [pc, #68]	@ (8002424 <_sbrk+0x64>)
 80023de:	4a12      	ldr	r2, [pc, #72]	@ (8002428 <_sbrk+0x68>)
 80023e0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80023e2:	4b10      	ldr	r3, [pc, #64]	@ (8002424 <_sbrk+0x64>)
 80023e4:	681a      	ldr	r2, [r3, #0]
 80023e6:	687b      	ldr	r3, [r7, #4]
 80023e8:	4413      	add	r3, r2
 80023ea:	693a      	ldr	r2, [r7, #16]
 80023ec:	429a      	cmp	r2, r3
 80023ee:	d207      	bcs.n	8002400 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80023f0:	f005 fc50 	bl	8007c94 <__errno>
 80023f4:	4603      	mov	r3, r0
 80023f6:	220c      	movs	r2, #12
 80023f8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80023fa:	f04f 33ff 	mov.w	r3, #4294967295
 80023fe:	e009      	b.n	8002414 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002400:	4b08      	ldr	r3, [pc, #32]	@ (8002424 <_sbrk+0x64>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002406:	4b07      	ldr	r3, [pc, #28]	@ (8002424 <_sbrk+0x64>)
 8002408:	681a      	ldr	r2, [r3, #0]
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	4413      	add	r3, r2
 800240e:	4a05      	ldr	r2, [pc, #20]	@ (8002424 <_sbrk+0x64>)
 8002410:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002412:	68fb      	ldr	r3, [r7, #12]
}
 8002414:	4618      	mov	r0, r3
 8002416:	3718      	adds	r7, #24
 8002418:	46bd      	mov	sp, r7
 800241a:	bd80      	pop	{r7, pc}
 800241c:	20020000 	.word	0x20020000
 8002420:	00000400 	.word	0x00000400
 8002424:	20000194 	.word	0x20000194
 8002428:	20004cd0 	.word	0x20004cd0

0800242c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800242c:	b480      	push	{r7}
 800242e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002430:	4b06      	ldr	r3, [pc, #24]	@ (800244c <SystemInit+0x20>)
 8002432:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002436:	4a05      	ldr	r2, [pc, #20]	@ (800244c <SystemInit+0x20>)
 8002438:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 800243c:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002440:	bf00      	nop
 8002442:	46bd      	mov	sp, r7
 8002444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002448:	4770      	bx	lr
 800244a:	bf00      	nop
 800244c:	e000ed00 	.word	0xe000ed00

08002450 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002450:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8002488 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002454:	f7ff ffea 	bl	800242c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002458:	480c      	ldr	r0, [pc, #48]	@ (800248c <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800245a:	490d      	ldr	r1, [pc, #52]	@ (8002490 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 800245c:	4a0d      	ldr	r2, [pc, #52]	@ (8002494 <LoopFillZerobss+0x1a>)
  movs r3, #0
 800245e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002460:	e002      	b.n	8002468 <LoopCopyDataInit>

08002462 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002462:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002464:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002466:	3304      	adds	r3, #4

08002468 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002468:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800246a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800246c:	d3f9      	bcc.n	8002462 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800246e:	4a0a      	ldr	r2, [pc, #40]	@ (8002498 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002470:	4c0a      	ldr	r4, [pc, #40]	@ (800249c <LoopFillZerobss+0x22>)
  movs r3, #0
 8002472:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002474:	e001      	b.n	800247a <LoopFillZerobss>

08002476 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002476:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002478:	3204      	adds	r2, #4

0800247a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800247a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800247c:	d3fb      	bcc.n	8002476 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800247e:	f005 fc0f 	bl	8007ca0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002482:	f7fe fbe5 	bl	8000c50 <main>
  bx  lr    
 8002486:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8002488:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 800248c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002490:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002494:	08009fd8 	.word	0x08009fd8
  ldr r2, =_sbss
 8002498:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 800249c:	20004cd0 	.word	0x20004cd0

080024a0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80024a0:	e7fe      	b.n	80024a0 <ADC_IRQHandler>
	...

080024a4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80024a4:	b580      	push	{r7, lr}
 80024a6:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80024a8:	4b0e      	ldr	r3, [pc, #56]	@ (80024e4 <HAL_Init+0x40>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a0d      	ldr	r2, [pc, #52]	@ (80024e4 <HAL_Init+0x40>)
 80024ae:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80024b2:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80024b4:	4b0b      	ldr	r3, [pc, #44]	@ (80024e4 <HAL_Init+0x40>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	4a0a      	ldr	r2, [pc, #40]	@ (80024e4 <HAL_Init+0x40>)
 80024ba:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80024be:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80024c0:	4b08      	ldr	r3, [pc, #32]	@ (80024e4 <HAL_Init+0x40>)
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a07      	ldr	r2, [pc, #28]	@ (80024e4 <HAL_Init+0x40>)
 80024c6:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80024ca:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80024cc:	2003      	movs	r0, #3
 80024ce:	f000 f8fc 	bl	80026ca <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80024d2:	200f      	movs	r0, #15
 80024d4:	f7ff fe7e 	bl	80021d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80024d8:	f7ff fdc0 	bl	800205c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80024dc:	2300      	movs	r3, #0
}
 80024de:	4618      	mov	r0, r3
 80024e0:	bd80      	pop	{r7, pc}
 80024e2:	bf00      	nop
 80024e4:	40023c00 	.word	0x40023c00

080024e8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80024e8:	b480      	push	{r7}
 80024ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80024ec:	4b06      	ldr	r3, [pc, #24]	@ (8002508 <HAL_IncTick+0x20>)
 80024ee:	781b      	ldrb	r3, [r3, #0]
 80024f0:	461a      	mov	r2, r3
 80024f2:	4b06      	ldr	r3, [pc, #24]	@ (800250c <HAL_IncTick+0x24>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4413      	add	r3, r2
 80024f8:	4a04      	ldr	r2, [pc, #16]	@ (800250c <HAL_IncTick+0x24>)
 80024fa:	6013      	str	r3, [r2, #0]
}
 80024fc:	bf00      	nop
 80024fe:	46bd      	mov	sp, r7
 8002500:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002504:	4770      	bx	lr
 8002506:	bf00      	nop
 8002508:	20000008 	.word	0x20000008
 800250c:	20000198 	.word	0x20000198

08002510 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002510:	b480      	push	{r7}
 8002512:	af00      	add	r7, sp, #0
  return uwTick;
 8002514:	4b03      	ldr	r3, [pc, #12]	@ (8002524 <HAL_GetTick+0x14>)
 8002516:	681b      	ldr	r3, [r3, #0]
}
 8002518:	4618      	mov	r0, r3
 800251a:	46bd      	mov	sp, r7
 800251c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002520:	4770      	bx	lr
 8002522:	bf00      	nop
 8002524:	20000198 	.word	0x20000198

08002528 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002528:	b580      	push	{r7, lr}
 800252a:	b084      	sub	sp, #16
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002530:	f7ff ffee 	bl	8002510 <HAL_GetTick>
 8002534:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800253a:	68fb      	ldr	r3, [r7, #12]
 800253c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002540:	d005      	beq.n	800254e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8002542:	4b0a      	ldr	r3, [pc, #40]	@ (800256c <HAL_Delay+0x44>)
 8002544:	781b      	ldrb	r3, [r3, #0]
 8002546:	461a      	mov	r2, r3
 8002548:	68fb      	ldr	r3, [r7, #12]
 800254a:	4413      	add	r3, r2
 800254c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800254e:	bf00      	nop
 8002550:	f7ff ffde 	bl	8002510 <HAL_GetTick>
 8002554:	4602      	mov	r2, r0
 8002556:	68bb      	ldr	r3, [r7, #8]
 8002558:	1ad3      	subs	r3, r2, r3
 800255a:	68fa      	ldr	r2, [r7, #12]
 800255c:	429a      	cmp	r2, r3
 800255e:	d8f7      	bhi.n	8002550 <HAL_Delay+0x28>
  {
  }
}
 8002560:	bf00      	nop
 8002562:	bf00      	nop
 8002564:	3710      	adds	r7, #16
 8002566:	46bd      	mov	sp, r7
 8002568:	bd80      	pop	{r7, pc}
 800256a:	bf00      	nop
 800256c:	20000008 	.word	0x20000008

08002570 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002570:	b480      	push	{r7}
 8002572:	b085      	sub	sp, #20
 8002574:	af00      	add	r7, sp, #0
 8002576:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002578:	687b      	ldr	r3, [r7, #4]
 800257a:	f003 0307 	and.w	r3, r3, #7
 800257e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002580:	4b0c      	ldr	r3, [pc, #48]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 8002582:	68db      	ldr	r3, [r3, #12]
 8002584:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002586:	68ba      	ldr	r2, [r7, #8]
 8002588:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800258c:	4013      	ands	r3, r2
 800258e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002590:	68fb      	ldr	r3, [r7, #12]
 8002592:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002594:	68bb      	ldr	r3, [r7, #8]
 8002596:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002598:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800259c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80025a0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80025a2:	4a04      	ldr	r2, [pc, #16]	@ (80025b4 <__NVIC_SetPriorityGrouping+0x44>)
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	60d3      	str	r3, [r2, #12]
}
 80025a8:	bf00      	nop
 80025aa:	3714      	adds	r7, #20
 80025ac:	46bd      	mov	sp, r7
 80025ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025b2:	4770      	bx	lr
 80025b4:	e000ed00 	.word	0xe000ed00

080025b8 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80025b8:	b480      	push	{r7}
 80025ba:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80025bc:	4b04      	ldr	r3, [pc, #16]	@ (80025d0 <__NVIC_GetPriorityGrouping+0x18>)
 80025be:	68db      	ldr	r3, [r3, #12]
 80025c0:	0a1b      	lsrs	r3, r3, #8
 80025c2:	f003 0307 	and.w	r3, r3, #7
}
 80025c6:	4618      	mov	r0, r3
 80025c8:	46bd      	mov	sp, r7
 80025ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025ce:	4770      	bx	lr
 80025d0:	e000ed00 	.word	0xe000ed00

080025d4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80025d4:	b480      	push	{r7}
 80025d6:	b083      	sub	sp, #12
 80025d8:	af00      	add	r7, sp, #0
 80025da:	4603      	mov	r3, r0
 80025dc:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80025de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	db0b      	blt.n	80025fe <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80025e6:	79fb      	ldrb	r3, [r7, #7]
 80025e8:	f003 021f 	and.w	r2, r3, #31
 80025ec:	4907      	ldr	r1, [pc, #28]	@ (800260c <__NVIC_EnableIRQ+0x38>)
 80025ee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80025f2:	095b      	lsrs	r3, r3, #5
 80025f4:	2001      	movs	r0, #1
 80025f6:	fa00 f202 	lsl.w	r2, r0, r2
 80025fa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80025fe:	bf00      	nop
 8002600:	370c      	adds	r7, #12
 8002602:	46bd      	mov	sp, r7
 8002604:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002608:	4770      	bx	lr
 800260a:	bf00      	nop
 800260c:	e000e100 	.word	0xe000e100

08002610 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002610:	b480      	push	{r7}
 8002612:	b083      	sub	sp, #12
 8002614:	af00      	add	r7, sp, #0
 8002616:	4603      	mov	r3, r0
 8002618:	6039      	str	r1, [r7, #0]
 800261a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800261c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002620:	2b00      	cmp	r3, #0
 8002622:	db0a      	blt.n	800263a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002624:	683b      	ldr	r3, [r7, #0]
 8002626:	b2da      	uxtb	r2, r3
 8002628:	490c      	ldr	r1, [pc, #48]	@ (800265c <__NVIC_SetPriority+0x4c>)
 800262a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800262e:	0112      	lsls	r2, r2, #4
 8002630:	b2d2      	uxtb	r2, r2
 8002632:	440b      	add	r3, r1
 8002634:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002638:	e00a      	b.n	8002650 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800263a:	683b      	ldr	r3, [r7, #0]
 800263c:	b2da      	uxtb	r2, r3
 800263e:	4908      	ldr	r1, [pc, #32]	@ (8002660 <__NVIC_SetPriority+0x50>)
 8002640:	79fb      	ldrb	r3, [r7, #7]
 8002642:	f003 030f 	and.w	r3, r3, #15
 8002646:	3b04      	subs	r3, #4
 8002648:	0112      	lsls	r2, r2, #4
 800264a:	b2d2      	uxtb	r2, r2
 800264c:	440b      	add	r3, r1
 800264e:	761a      	strb	r2, [r3, #24]
}
 8002650:	bf00      	nop
 8002652:	370c      	adds	r7, #12
 8002654:	46bd      	mov	sp, r7
 8002656:	f85d 7b04 	ldr.w	r7, [sp], #4
 800265a:	4770      	bx	lr
 800265c:	e000e100 	.word	0xe000e100
 8002660:	e000ed00 	.word	0xe000ed00

08002664 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002664:	b480      	push	{r7}
 8002666:	b089      	sub	sp, #36	@ 0x24
 8002668:	af00      	add	r7, sp, #0
 800266a:	60f8      	str	r0, [r7, #12]
 800266c:	60b9      	str	r1, [r7, #8]
 800266e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	f003 0307 	and.w	r3, r3, #7
 8002676:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002678:	69fb      	ldr	r3, [r7, #28]
 800267a:	f1c3 0307 	rsb	r3, r3, #7
 800267e:	2b04      	cmp	r3, #4
 8002680:	bf28      	it	cs
 8002682:	2304      	movcs	r3, #4
 8002684:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002686:	69fb      	ldr	r3, [r7, #28]
 8002688:	3304      	adds	r3, #4
 800268a:	2b06      	cmp	r3, #6
 800268c:	d902      	bls.n	8002694 <NVIC_EncodePriority+0x30>
 800268e:	69fb      	ldr	r3, [r7, #28]
 8002690:	3b03      	subs	r3, #3
 8002692:	e000      	b.n	8002696 <NVIC_EncodePriority+0x32>
 8002694:	2300      	movs	r3, #0
 8002696:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002698:	f04f 32ff 	mov.w	r2, #4294967295
 800269c:	69bb      	ldr	r3, [r7, #24]
 800269e:	fa02 f303 	lsl.w	r3, r2, r3
 80026a2:	43da      	mvns	r2, r3
 80026a4:	68bb      	ldr	r3, [r7, #8]
 80026a6:	401a      	ands	r2, r3
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80026ac:	f04f 31ff 	mov.w	r1, #4294967295
 80026b0:	697b      	ldr	r3, [r7, #20]
 80026b2:	fa01 f303 	lsl.w	r3, r1, r3
 80026b6:	43d9      	mvns	r1, r3
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80026bc:	4313      	orrs	r3, r2
         );
}
 80026be:	4618      	mov	r0, r3
 80026c0:	3724      	adds	r7, #36	@ 0x24
 80026c2:	46bd      	mov	sp, r7
 80026c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026c8:	4770      	bx	lr

080026ca <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80026d2:	6878      	ldr	r0, [r7, #4]
 80026d4:	f7ff ff4c 	bl	8002570 <__NVIC_SetPriorityGrouping>
}
 80026d8:	bf00      	nop
 80026da:	3708      	adds	r7, #8
 80026dc:	46bd      	mov	sp, r7
 80026de:	bd80      	pop	{r7, pc}

080026e0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80026e0:	b580      	push	{r7, lr}
 80026e2:	b086      	sub	sp, #24
 80026e4:	af00      	add	r7, sp, #0
 80026e6:	4603      	mov	r3, r0
 80026e8:	60b9      	str	r1, [r7, #8]
 80026ea:	607a      	str	r2, [r7, #4]
 80026ec:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80026ee:	2300      	movs	r3, #0
 80026f0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80026f2:	f7ff ff61 	bl	80025b8 <__NVIC_GetPriorityGrouping>
 80026f6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80026f8:	687a      	ldr	r2, [r7, #4]
 80026fa:	68b9      	ldr	r1, [r7, #8]
 80026fc:	6978      	ldr	r0, [r7, #20]
 80026fe:	f7ff ffb1 	bl	8002664 <NVIC_EncodePriority>
 8002702:	4602      	mov	r2, r0
 8002704:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002708:	4611      	mov	r1, r2
 800270a:	4618      	mov	r0, r3
 800270c:	f7ff ff80 	bl	8002610 <__NVIC_SetPriority>
}
 8002710:	bf00      	nop
 8002712:	3718      	adds	r7, #24
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}

08002718 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002718:	b580      	push	{r7, lr}
 800271a:	b082      	sub	sp, #8
 800271c:	af00      	add	r7, sp, #0
 800271e:	4603      	mov	r3, r0
 8002720:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002726:	4618      	mov	r0, r3
 8002728:	f7ff ff54 	bl	80025d4 <__NVIC_EnableIRQ>
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}

08002734 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002734:	b480      	push	{r7}
 8002736:	b089      	sub	sp, #36	@ 0x24
 8002738:	af00      	add	r7, sp, #0
 800273a:	6078      	str	r0, [r7, #4]
 800273c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800273e:	2300      	movs	r3, #0
 8002740:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002742:	2300      	movs	r3, #0
 8002744:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002746:	2300      	movs	r3, #0
 8002748:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800274a:	2300      	movs	r3, #0
 800274c:	61fb      	str	r3, [r7, #28]
 800274e:	e16b      	b.n	8002a28 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002750:	2201      	movs	r2, #1
 8002752:	69fb      	ldr	r3, [r7, #28]
 8002754:	fa02 f303 	lsl.w	r3, r2, r3
 8002758:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800275a:	683b      	ldr	r3, [r7, #0]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	697a      	ldr	r2, [r7, #20]
 8002760:	4013      	ands	r3, r2
 8002762:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002764:	693a      	ldr	r2, [r7, #16]
 8002766:	697b      	ldr	r3, [r7, #20]
 8002768:	429a      	cmp	r2, r3
 800276a:	f040 815a 	bne.w	8002a22 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800276e:	683b      	ldr	r3, [r7, #0]
 8002770:	685b      	ldr	r3, [r3, #4]
 8002772:	f003 0303 	and.w	r3, r3, #3
 8002776:	2b01      	cmp	r3, #1
 8002778:	d005      	beq.n	8002786 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800277a:	683b      	ldr	r3, [r7, #0]
 800277c:	685b      	ldr	r3, [r3, #4]
 800277e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002782:	2b02      	cmp	r3, #2
 8002784:	d130      	bne.n	80027e8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800278c:	69fb      	ldr	r3, [r7, #28]
 800278e:	005b      	lsls	r3, r3, #1
 8002790:	2203      	movs	r2, #3
 8002792:	fa02 f303 	lsl.w	r3, r2, r3
 8002796:	43db      	mvns	r3, r3
 8002798:	69ba      	ldr	r2, [r7, #24]
 800279a:	4013      	ands	r3, r2
 800279c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	68da      	ldr	r2, [r3, #12]
 80027a2:	69fb      	ldr	r3, [r7, #28]
 80027a4:	005b      	lsls	r3, r3, #1
 80027a6:	fa02 f303 	lsl.w	r3, r2, r3
 80027aa:	69ba      	ldr	r2, [r7, #24]
 80027ac:	4313      	orrs	r3, r2
 80027ae:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80027b0:	687b      	ldr	r3, [r7, #4]
 80027b2:	69ba      	ldr	r2, [r7, #24]
 80027b4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	685b      	ldr	r3, [r3, #4]
 80027ba:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80027bc:	2201      	movs	r2, #1
 80027be:	69fb      	ldr	r3, [r7, #28]
 80027c0:	fa02 f303 	lsl.w	r3, r2, r3
 80027c4:	43db      	mvns	r3, r3
 80027c6:	69ba      	ldr	r2, [r7, #24]
 80027c8:	4013      	ands	r3, r2
 80027ca:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80027cc:	683b      	ldr	r3, [r7, #0]
 80027ce:	685b      	ldr	r3, [r3, #4]
 80027d0:	091b      	lsrs	r3, r3, #4
 80027d2:	f003 0201 	and.w	r2, r3, #1
 80027d6:	69fb      	ldr	r3, [r7, #28]
 80027d8:	fa02 f303 	lsl.w	r3, r2, r3
 80027dc:	69ba      	ldr	r2, [r7, #24]
 80027de:	4313      	orrs	r3, r2
 80027e0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	69ba      	ldr	r2, [r7, #24]
 80027e6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80027e8:	683b      	ldr	r3, [r7, #0]
 80027ea:	685b      	ldr	r3, [r3, #4]
 80027ec:	f003 0303 	and.w	r3, r3, #3
 80027f0:	2b03      	cmp	r3, #3
 80027f2:	d017      	beq.n	8002824 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	68db      	ldr	r3, [r3, #12]
 80027f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80027fa:	69fb      	ldr	r3, [r7, #28]
 80027fc:	005b      	lsls	r3, r3, #1
 80027fe:	2203      	movs	r2, #3
 8002800:	fa02 f303 	lsl.w	r3, r2, r3
 8002804:	43db      	mvns	r3, r3
 8002806:	69ba      	ldr	r2, [r7, #24]
 8002808:	4013      	ands	r3, r2
 800280a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800280c:	683b      	ldr	r3, [r7, #0]
 800280e:	689a      	ldr	r2, [r3, #8]
 8002810:	69fb      	ldr	r3, [r7, #28]
 8002812:	005b      	lsls	r3, r3, #1
 8002814:	fa02 f303 	lsl.w	r3, r2, r3
 8002818:	69ba      	ldr	r2, [r7, #24]
 800281a:	4313      	orrs	r3, r2
 800281c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69ba      	ldr	r2, [r7, #24]
 8002822:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f003 0303 	and.w	r3, r3, #3
 800282c:	2b02      	cmp	r3, #2
 800282e:	d123      	bne.n	8002878 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002830:	69fb      	ldr	r3, [r7, #28]
 8002832:	08da      	lsrs	r2, r3, #3
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	3208      	adds	r2, #8
 8002838:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800283c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800283e:	69fb      	ldr	r3, [r7, #28]
 8002840:	f003 0307 	and.w	r3, r3, #7
 8002844:	009b      	lsls	r3, r3, #2
 8002846:	220f      	movs	r2, #15
 8002848:	fa02 f303 	lsl.w	r3, r2, r3
 800284c:	43db      	mvns	r3, r3
 800284e:	69ba      	ldr	r2, [r7, #24]
 8002850:	4013      	ands	r3, r2
 8002852:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002854:	683b      	ldr	r3, [r7, #0]
 8002856:	691a      	ldr	r2, [r3, #16]
 8002858:	69fb      	ldr	r3, [r7, #28]
 800285a:	f003 0307 	and.w	r3, r3, #7
 800285e:	009b      	lsls	r3, r3, #2
 8002860:	fa02 f303 	lsl.w	r3, r2, r3
 8002864:	69ba      	ldr	r2, [r7, #24]
 8002866:	4313      	orrs	r3, r2
 8002868:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800286a:	69fb      	ldr	r3, [r7, #28]
 800286c:	08da      	lsrs	r2, r3, #3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	3208      	adds	r2, #8
 8002872:	69b9      	ldr	r1, [r7, #24]
 8002874:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800287e:	69fb      	ldr	r3, [r7, #28]
 8002880:	005b      	lsls	r3, r3, #1
 8002882:	2203      	movs	r2, #3
 8002884:	fa02 f303 	lsl.w	r3, r2, r3
 8002888:	43db      	mvns	r3, r3
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4013      	ands	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002890:	683b      	ldr	r3, [r7, #0]
 8002892:	685b      	ldr	r3, [r3, #4]
 8002894:	f003 0203 	and.w	r2, r3, #3
 8002898:	69fb      	ldr	r3, [r7, #28]
 800289a:	005b      	lsls	r3, r3, #1
 800289c:	fa02 f303 	lsl.w	r3, r2, r3
 80028a0:	69ba      	ldr	r2, [r7, #24]
 80028a2:	4313      	orrs	r3, r2
 80028a4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80028ac:	683b      	ldr	r3, [r7, #0]
 80028ae:	685b      	ldr	r3, [r3, #4]
 80028b0:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80028b4:	2b00      	cmp	r3, #0
 80028b6:	f000 80b4 	beq.w	8002a22 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	60fb      	str	r3, [r7, #12]
 80028be:	4b60      	ldr	r3, [pc, #384]	@ (8002a40 <HAL_GPIO_Init+0x30c>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a5f      	ldr	r2, [pc, #380]	@ (8002a40 <HAL_GPIO_Init+0x30c>)
 80028c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b5d      	ldr	r3, [pc, #372]	@ (8002a40 <HAL_GPIO_Init+0x30c>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80028d2:	60fb      	str	r3, [r7, #12]
 80028d4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80028d6:	4a5b      	ldr	r2, [pc, #364]	@ (8002a44 <HAL_GPIO_Init+0x310>)
 80028d8:	69fb      	ldr	r3, [r7, #28]
 80028da:	089b      	lsrs	r3, r3, #2
 80028dc:	3302      	adds	r3, #2
 80028de:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80028e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80028e4:	69fb      	ldr	r3, [r7, #28]
 80028e6:	f003 0303 	and.w	r3, r3, #3
 80028ea:	009b      	lsls	r3, r3, #2
 80028ec:	220f      	movs	r2, #15
 80028ee:	fa02 f303 	lsl.w	r3, r2, r3
 80028f2:	43db      	mvns	r3, r3
 80028f4:	69ba      	ldr	r2, [r7, #24]
 80028f6:	4013      	ands	r3, r2
 80028f8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80028fa:	687b      	ldr	r3, [r7, #4]
 80028fc:	4a52      	ldr	r2, [pc, #328]	@ (8002a48 <HAL_GPIO_Init+0x314>)
 80028fe:	4293      	cmp	r3, r2
 8002900:	d02b      	beq.n	800295a <HAL_GPIO_Init+0x226>
 8002902:	687b      	ldr	r3, [r7, #4]
 8002904:	4a51      	ldr	r2, [pc, #324]	@ (8002a4c <HAL_GPIO_Init+0x318>)
 8002906:	4293      	cmp	r3, r2
 8002908:	d025      	beq.n	8002956 <HAL_GPIO_Init+0x222>
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	4a50      	ldr	r2, [pc, #320]	@ (8002a50 <HAL_GPIO_Init+0x31c>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d01f      	beq.n	8002952 <HAL_GPIO_Init+0x21e>
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	4a4f      	ldr	r2, [pc, #316]	@ (8002a54 <HAL_GPIO_Init+0x320>)
 8002916:	4293      	cmp	r3, r2
 8002918:	d019      	beq.n	800294e <HAL_GPIO_Init+0x21a>
 800291a:	687b      	ldr	r3, [r7, #4]
 800291c:	4a4e      	ldr	r2, [pc, #312]	@ (8002a58 <HAL_GPIO_Init+0x324>)
 800291e:	4293      	cmp	r3, r2
 8002920:	d013      	beq.n	800294a <HAL_GPIO_Init+0x216>
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	4a4d      	ldr	r2, [pc, #308]	@ (8002a5c <HAL_GPIO_Init+0x328>)
 8002926:	4293      	cmp	r3, r2
 8002928:	d00d      	beq.n	8002946 <HAL_GPIO_Init+0x212>
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	4a4c      	ldr	r2, [pc, #304]	@ (8002a60 <HAL_GPIO_Init+0x32c>)
 800292e:	4293      	cmp	r3, r2
 8002930:	d007      	beq.n	8002942 <HAL_GPIO_Init+0x20e>
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	4a4b      	ldr	r2, [pc, #300]	@ (8002a64 <HAL_GPIO_Init+0x330>)
 8002936:	4293      	cmp	r3, r2
 8002938:	d101      	bne.n	800293e <HAL_GPIO_Init+0x20a>
 800293a:	2307      	movs	r3, #7
 800293c:	e00e      	b.n	800295c <HAL_GPIO_Init+0x228>
 800293e:	2308      	movs	r3, #8
 8002940:	e00c      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002942:	2306      	movs	r3, #6
 8002944:	e00a      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002946:	2305      	movs	r3, #5
 8002948:	e008      	b.n	800295c <HAL_GPIO_Init+0x228>
 800294a:	2304      	movs	r3, #4
 800294c:	e006      	b.n	800295c <HAL_GPIO_Init+0x228>
 800294e:	2303      	movs	r3, #3
 8002950:	e004      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002952:	2302      	movs	r3, #2
 8002954:	e002      	b.n	800295c <HAL_GPIO_Init+0x228>
 8002956:	2301      	movs	r3, #1
 8002958:	e000      	b.n	800295c <HAL_GPIO_Init+0x228>
 800295a:	2300      	movs	r3, #0
 800295c:	69fa      	ldr	r2, [r7, #28]
 800295e:	f002 0203 	and.w	r2, r2, #3
 8002962:	0092      	lsls	r2, r2, #2
 8002964:	4093      	lsls	r3, r2
 8002966:	69ba      	ldr	r2, [r7, #24]
 8002968:	4313      	orrs	r3, r2
 800296a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800296c:	4935      	ldr	r1, [pc, #212]	@ (8002a44 <HAL_GPIO_Init+0x310>)
 800296e:	69fb      	ldr	r3, [r7, #28]
 8002970:	089b      	lsrs	r3, r3, #2
 8002972:	3302      	adds	r3, #2
 8002974:	69ba      	ldr	r2, [r7, #24]
 8002976:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800297a:	4b3b      	ldr	r3, [pc, #236]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 800297c:	689b      	ldr	r3, [r3, #8]
 800297e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	43db      	mvns	r3, r3
 8002984:	69ba      	ldr	r2, [r7, #24]
 8002986:	4013      	ands	r3, r2
 8002988:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800298a:	683b      	ldr	r3, [r7, #0]
 800298c:	685b      	ldr	r3, [r3, #4]
 800298e:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002992:	2b00      	cmp	r3, #0
 8002994:	d003      	beq.n	800299e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8002996:	69ba      	ldr	r2, [r7, #24]
 8002998:	693b      	ldr	r3, [r7, #16]
 800299a:	4313      	orrs	r3, r2
 800299c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800299e:	4a32      	ldr	r2, [pc, #200]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029a0:	69bb      	ldr	r3, [r7, #24]
 80029a2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80029a4:	4b30      	ldr	r3, [pc, #192]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029a6:	68db      	ldr	r3, [r3, #12]
 80029a8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029aa:	693b      	ldr	r3, [r7, #16]
 80029ac:	43db      	mvns	r3, r3
 80029ae:	69ba      	ldr	r2, [r7, #24]
 80029b0:	4013      	ands	r3, r2
 80029b2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80029b4:	683b      	ldr	r3, [r7, #0]
 80029b6:	685b      	ldr	r3, [r3, #4]
 80029b8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80029bc:	2b00      	cmp	r3, #0
 80029be:	d003      	beq.n	80029c8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80029c0:	69ba      	ldr	r2, [r7, #24]
 80029c2:	693b      	ldr	r3, [r7, #16]
 80029c4:	4313      	orrs	r3, r2
 80029c6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80029c8:	4a27      	ldr	r2, [pc, #156]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029ca:	69bb      	ldr	r3, [r7, #24]
 80029cc:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80029ce:	4b26      	ldr	r3, [pc, #152]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029d4:	693b      	ldr	r3, [r7, #16]
 80029d6:	43db      	mvns	r3, r3
 80029d8:	69ba      	ldr	r2, [r7, #24]
 80029da:	4013      	ands	r3, r2
 80029dc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80029de:	683b      	ldr	r3, [r7, #0]
 80029e0:	685b      	ldr	r3, [r3, #4]
 80029e2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d003      	beq.n	80029f2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80029ea:	69ba      	ldr	r2, [r7, #24]
 80029ec:	693b      	ldr	r3, [r7, #16]
 80029ee:	4313      	orrs	r3, r2
 80029f0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80029f2:	4a1d      	ldr	r2, [pc, #116]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029f4:	69bb      	ldr	r3, [r7, #24]
 80029f6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80029f8:	4b1b      	ldr	r3, [pc, #108]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 80029fa:	681b      	ldr	r3, [r3, #0]
 80029fc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80029fe:	693b      	ldr	r3, [r7, #16]
 8002a00:	43db      	mvns	r3, r3
 8002a02:	69ba      	ldr	r2, [r7, #24]
 8002a04:	4013      	ands	r3, r2
 8002a06:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002a08:	683b      	ldr	r3, [r7, #0]
 8002a0a:	685b      	ldr	r3, [r3, #4]
 8002a0c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a10:	2b00      	cmp	r3, #0
 8002a12:	d003      	beq.n	8002a1c <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8002a14:	69ba      	ldr	r2, [r7, #24]
 8002a16:	693b      	ldr	r3, [r7, #16]
 8002a18:	4313      	orrs	r3, r2
 8002a1a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002a1c:	4a12      	ldr	r2, [pc, #72]	@ (8002a68 <HAL_GPIO_Init+0x334>)
 8002a1e:	69bb      	ldr	r3, [r7, #24]
 8002a20:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002a22:	69fb      	ldr	r3, [r7, #28]
 8002a24:	3301      	adds	r3, #1
 8002a26:	61fb      	str	r3, [r7, #28]
 8002a28:	69fb      	ldr	r3, [r7, #28]
 8002a2a:	2b0f      	cmp	r3, #15
 8002a2c:	f67f ae90 	bls.w	8002750 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002a30:	bf00      	nop
 8002a32:	bf00      	nop
 8002a34:	3724      	adds	r7, #36	@ 0x24
 8002a36:	46bd      	mov	sp, r7
 8002a38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a3c:	4770      	bx	lr
 8002a3e:	bf00      	nop
 8002a40:	40023800 	.word	0x40023800
 8002a44:	40013800 	.word	0x40013800
 8002a48:	40020000 	.word	0x40020000
 8002a4c:	40020400 	.word	0x40020400
 8002a50:	40020800 	.word	0x40020800
 8002a54:	40020c00 	.word	0x40020c00
 8002a58:	40021000 	.word	0x40021000
 8002a5c:	40021400 	.word	0x40021400
 8002a60:	40021800 	.word	0x40021800
 8002a64:	40021c00 	.word	0x40021c00
 8002a68:	40013c00 	.word	0x40013c00

08002a6c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	b083      	sub	sp, #12
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
 8002a74:	460b      	mov	r3, r1
 8002a76:	807b      	strh	r3, [r7, #2]
 8002a78:	4613      	mov	r3, r2
 8002a7a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002a7c:	787b      	ldrb	r3, [r7, #1]
 8002a7e:	2b00      	cmp	r3, #0
 8002a80:	d003      	beq.n	8002a8a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002a82:	887a      	ldrh	r2, [r7, #2]
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002a88:	e003      	b.n	8002a92 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002a8a:	887b      	ldrh	r3, [r7, #2]
 8002a8c:	041a      	lsls	r2, r3, #16
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	619a      	str	r2, [r3, #24]
}
 8002a92:	bf00      	nop
 8002a94:	370c      	adds	r7, #12
 8002a96:	46bd      	mov	sp, r7
 8002a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a9c:	4770      	bx	lr
	...

08002aa0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8002aa0:	b580      	push	{r7, lr}
 8002aa2:	b082      	sub	sp, #8
 8002aa4:	af00      	add	r7, sp, #0
 8002aa6:	4603      	mov	r3, r0
 8002aa8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8002aaa:	4b08      	ldr	r3, [pc, #32]	@ (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002aac:	695a      	ldr	r2, [r3, #20]
 8002aae:	88fb      	ldrh	r3, [r7, #6]
 8002ab0:	4013      	ands	r3, r2
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d006      	beq.n	8002ac4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002ab6:	4a05      	ldr	r2, [pc, #20]	@ (8002acc <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002ab8:	88fb      	ldrh	r3, [r7, #6]
 8002aba:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002abc:	88fb      	ldrh	r3, [r7, #6]
 8002abe:	4618      	mov	r0, r3
 8002ac0:	f000 f806 	bl	8002ad0 <HAL_GPIO_EXTI_Callback>
  }
}
 8002ac4:	bf00      	nop
 8002ac6:	3708      	adds	r7, #8
 8002ac8:	46bd      	mov	sp, r7
 8002aca:	bd80      	pop	{r7, pc}
 8002acc:	40013c00 	.word	0x40013c00

08002ad0 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b083      	sub	sp, #12
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	4603      	mov	r3, r0
 8002ad8:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002ada:	bf00      	nop
 8002adc:	370c      	adds	r7, #12
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ae4:	4770      	bx	lr
	...

08002ae8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ae8:	b580      	push	{r7, lr}
 8002aea:	b086      	sub	sp, #24
 8002aec:	af00      	add	r7, sp, #0
 8002aee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	d101      	bne.n	8002afa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002af6:	2301      	movs	r3, #1
 8002af8:	e267      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002afa:	687b      	ldr	r3, [r7, #4]
 8002afc:	681b      	ldr	r3, [r3, #0]
 8002afe:	f003 0301 	and.w	r3, r3, #1
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d075      	beq.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b06:	4b88      	ldr	r3, [pc, #544]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b08:	689b      	ldr	r3, [r3, #8]
 8002b0a:	f003 030c 	and.w	r3, r3, #12
 8002b0e:	2b04      	cmp	r3, #4
 8002b10:	d00c      	beq.n	8002b2c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b12:	4b85      	ldr	r3, [pc, #532]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b14:	689b      	ldr	r3, [r3, #8]
 8002b16:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8002b1a:	2b08      	cmp	r3, #8
 8002b1c:	d112      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002b1e:	4b82      	ldr	r3, [pc, #520]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b20:	685b      	ldr	r3, [r3, #4]
 8002b22:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002b26:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8002b2a:	d10b      	bne.n	8002b44 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002b34:	2b00      	cmp	r3, #0
 8002b36:	d05b      	beq.n	8002bf0 <HAL_RCC_OscConfig+0x108>
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	685b      	ldr	r3, [r3, #4]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d157      	bne.n	8002bf0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002b40:	2301      	movs	r3, #1
 8002b42:	e242      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002b44:	687b      	ldr	r3, [r7, #4]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002b4c:	d106      	bne.n	8002b5c <HAL_RCC_OscConfig+0x74>
 8002b4e:	4b76      	ldr	r3, [pc, #472]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	4a75      	ldr	r2, [pc, #468]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b54:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b58:	6013      	str	r3, [r2, #0]
 8002b5a:	e01d      	b.n	8002b98 <HAL_RCC_OscConfig+0xb0>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	685b      	ldr	r3, [r3, #4]
 8002b60:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002b64:	d10c      	bne.n	8002b80 <HAL_RCC_OscConfig+0x98>
 8002b66:	4b70      	ldr	r3, [pc, #448]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	4a6f      	ldr	r2, [pc, #444]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b6c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002b70:	6013      	str	r3, [r2, #0]
 8002b72:	4b6d      	ldr	r3, [pc, #436]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	4a6c      	ldr	r2, [pc, #432]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b78:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002b7c:	6013      	str	r3, [r2, #0]
 8002b7e:	e00b      	b.n	8002b98 <HAL_RCC_OscConfig+0xb0>
 8002b80:	4b69      	ldr	r3, [pc, #420]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b82:	681b      	ldr	r3, [r3, #0]
 8002b84:	4a68      	ldr	r2, [pc, #416]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b86:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002b8a:	6013      	str	r3, [r2, #0]
 8002b8c:	4b66      	ldr	r3, [pc, #408]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a65      	ldr	r2, [pc, #404]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002b92:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002b96:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	685b      	ldr	r3, [r3, #4]
 8002b9c:	2b00      	cmp	r3, #0
 8002b9e:	d013      	beq.n	8002bc8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ba0:	f7ff fcb6 	bl	8002510 <HAL_GetTick>
 8002ba4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002ba6:	e008      	b.n	8002bba <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002ba8:	f7ff fcb2 	bl	8002510 <HAL_GetTick>
 8002bac:	4602      	mov	r2, r0
 8002bae:	693b      	ldr	r3, [r7, #16]
 8002bb0:	1ad3      	subs	r3, r2, r3
 8002bb2:	2b64      	cmp	r3, #100	@ 0x64
 8002bb4:	d901      	bls.n	8002bba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8002bb6:	2303      	movs	r3, #3
 8002bb8:	e207      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002bba:	4b5b      	ldr	r3, [pc, #364]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bc2:	2b00      	cmp	r3, #0
 8002bc4:	d0f0      	beq.n	8002ba8 <HAL_RCC_OscConfig+0xc0>
 8002bc6:	e014      	b.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bc8:	f7ff fca2 	bl	8002510 <HAL_GetTick>
 8002bcc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002bce:	e008      	b.n	8002be2 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002bd0:	f7ff fc9e 	bl	8002510 <HAL_GetTick>
 8002bd4:	4602      	mov	r2, r0
 8002bd6:	693b      	ldr	r3, [r7, #16]
 8002bd8:	1ad3      	subs	r3, r2, r3
 8002bda:	2b64      	cmp	r3, #100	@ 0x64
 8002bdc:	d901      	bls.n	8002be2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002bde:	2303      	movs	r3, #3
 8002be0:	e1f3      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002be2:	4b51      	ldr	r3, [pc, #324]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d1f0      	bne.n	8002bd0 <HAL_RCC_OscConfig+0xe8>
 8002bee:	e000      	b.n	8002bf2 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002bf0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 0302 	and.w	r3, r3, #2
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d063      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002bfe:	4b4a      	ldr	r3, [pc, #296]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 030c 	and.w	r3, r3, #12
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d00b      	beq.n	8002c22 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c0a:	4b47      	ldr	r3, [pc, #284]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c0c:	689b      	ldr	r3, [r3, #8]
 8002c0e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8002c12:	2b08      	cmp	r3, #8
 8002c14:	d11c      	bne.n	8002c50 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002c16:	4b44      	ldr	r3, [pc, #272]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002c1e:	2b00      	cmp	r3, #0
 8002c20:	d116      	bne.n	8002c50 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c22:	4b41      	ldr	r3, [pc, #260]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b00      	cmp	r3, #0
 8002c2c:	d005      	beq.n	8002c3a <HAL_RCC_OscConfig+0x152>
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	68db      	ldr	r3, [r3, #12]
 8002c32:	2b01      	cmp	r3, #1
 8002c34:	d001      	beq.n	8002c3a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8002c36:	2301      	movs	r3, #1
 8002c38:	e1c7      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c3a:	4b3b      	ldr	r3, [pc, #236]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	691b      	ldr	r3, [r3, #16]
 8002c46:	00db      	lsls	r3, r3, #3
 8002c48:	4937      	ldr	r1, [pc, #220]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c4a:	4313      	orrs	r3, r2
 8002c4c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002c4e:	e03a      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	68db      	ldr	r3, [r3, #12]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d020      	beq.n	8002c9a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002c58:	4b34      	ldr	r3, [pc, #208]	@ (8002d2c <HAL_RCC_OscConfig+0x244>)
 8002c5a:	2201      	movs	r2, #1
 8002c5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c5e:	f7ff fc57 	bl	8002510 <HAL_GetTick>
 8002c62:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c64:	e008      	b.n	8002c78 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002c66:	f7ff fc53 	bl	8002510 <HAL_GetTick>
 8002c6a:	4602      	mov	r2, r0
 8002c6c:	693b      	ldr	r3, [r7, #16]
 8002c6e:	1ad3      	subs	r3, r2, r3
 8002c70:	2b02      	cmp	r3, #2
 8002c72:	d901      	bls.n	8002c78 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002c74:	2303      	movs	r3, #3
 8002c76:	e1a8      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002c78:	4b2b      	ldr	r3, [pc, #172]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f003 0302 	and.w	r3, r3, #2
 8002c80:	2b00      	cmp	r3, #0
 8002c82:	d0f0      	beq.n	8002c66 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002c84:	4b28      	ldr	r3, [pc, #160]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c86:	681b      	ldr	r3, [r3, #0]
 8002c88:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	691b      	ldr	r3, [r3, #16]
 8002c90:	00db      	lsls	r3, r3, #3
 8002c92:	4925      	ldr	r1, [pc, #148]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002c94:	4313      	orrs	r3, r2
 8002c96:	600b      	str	r3, [r1, #0]
 8002c98:	e015      	b.n	8002cc6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002c9a:	4b24      	ldr	r3, [pc, #144]	@ (8002d2c <HAL_RCC_OscConfig+0x244>)
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002ca0:	f7ff fc36 	bl	8002510 <HAL_GetTick>
 8002ca4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002ca6:	e008      	b.n	8002cba <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002ca8:	f7ff fc32 	bl	8002510 <HAL_GetTick>
 8002cac:	4602      	mov	r2, r0
 8002cae:	693b      	ldr	r3, [r7, #16]
 8002cb0:	1ad3      	subs	r3, r2, r3
 8002cb2:	2b02      	cmp	r3, #2
 8002cb4:	d901      	bls.n	8002cba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8002cb6:	2303      	movs	r3, #3
 8002cb8:	e187      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002cba:	4b1b      	ldr	r3, [pc, #108]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002cbc:	681b      	ldr	r3, [r3, #0]
 8002cbe:	f003 0302 	and.w	r3, r3, #2
 8002cc2:	2b00      	cmp	r3, #0
 8002cc4:	d1f0      	bne.n	8002ca8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002cc6:	687b      	ldr	r3, [r7, #4]
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f003 0308 	and.w	r3, r3, #8
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d036      	beq.n	8002d40 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	695b      	ldr	r3, [r3, #20]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d016      	beq.n	8002d08 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002cda:	4b15      	ldr	r3, [pc, #84]	@ (8002d30 <HAL_RCC_OscConfig+0x248>)
 8002cdc:	2201      	movs	r2, #1
 8002cde:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ce0:	f7ff fc16 	bl	8002510 <HAL_GetTick>
 8002ce4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ce6:	e008      	b.n	8002cfa <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002ce8:	f7ff fc12 	bl	8002510 <HAL_GetTick>
 8002cec:	4602      	mov	r2, r0
 8002cee:	693b      	ldr	r3, [r7, #16]
 8002cf0:	1ad3      	subs	r3, r2, r3
 8002cf2:	2b02      	cmp	r3, #2
 8002cf4:	d901      	bls.n	8002cfa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8002cf6:	2303      	movs	r3, #3
 8002cf8:	e167      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002cfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002d28 <HAL_RCC_OscConfig+0x240>)
 8002cfc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002cfe:	f003 0302 	and.w	r3, r3, #2
 8002d02:	2b00      	cmp	r3, #0
 8002d04:	d0f0      	beq.n	8002ce8 <HAL_RCC_OscConfig+0x200>
 8002d06:	e01b      	b.n	8002d40 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002d08:	4b09      	ldr	r3, [pc, #36]	@ (8002d30 <HAL_RCC_OscConfig+0x248>)
 8002d0a:	2200      	movs	r2, #0
 8002d0c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002d0e:	f7ff fbff 	bl	8002510 <HAL_GetTick>
 8002d12:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d14:	e00e      	b.n	8002d34 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002d16:	f7ff fbfb 	bl	8002510 <HAL_GetTick>
 8002d1a:	4602      	mov	r2, r0
 8002d1c:	693b      	ldr	r3, [r7, #16]
 8002d1e:	1ad3      	subs	r3, r2, r3
 8002d20:	2b02      	cmp	r3, #2
 8002d22:	d907      	bls.n	8002d34 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002d24:	2303      	movs	r3, #3
 8002d26:	e150      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
 8002d28:	40023800 	.word	0x40023800
 8002d2c:	42470000 	.word	0x42470000
 8002d30:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002d34:	4b88      	ldr	r3, [pc, #544]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d36:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002d38:	f003 0302 	and.w	r3, r3, #2
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d1ea      	bne.n	8002d16 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002d40:	687b      	ldr	r3, [r7, #4]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	f003 0304 	and.w	r3, r3, #4
 8002d48:	2b00      	cmp	r3, #0
 8002d4a:	f000 8097 	beq.w	8002e7c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002d4e:	2300      	movs	r3, #0
 8002d50:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002d52:	4b81      	ldr	r3, [pc, #516]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d54:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d56:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d10f      	bne.n	8002d7e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002d5e:	2300      	movs	r3, #0
 8002d60:	60bb      	str	r3, [r7, #8]
 8002d62:	4b7d      	ldr	r3, [pc, #500]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d66:	4a7c      	ldr	r2, [pc, #496]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d68:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002d6c:	6413      	str	r3, [r2, #64]	@ 0x40
 8002d6e:	4b7a      	ldr	r3, [pc, #488]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002d70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002d72:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002d76:	60bb      	str	r3, [r7, #8]
 8002d78:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002d7a:	2301      	movs	r3, #1
 8002d7c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d7e:	4b77      	ldr	r3, [pc, #476]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d118      	bne.n	8002dbc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002d8a:	4b74      	ldr	r3, [pc, #464]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d8c:	681b      	ldr	r3, [r3, #0]
 8002d8e:	4a73      	ldr	r2, [pc, #460]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002d90:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002d94:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002d96:	f7ff fbbb 	bl	8002510 <HAL_GetTick>
 8002d9a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002d9c:	e008      	b.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002d9e:	f7ff fbb7 	bl	8002510 <HAL_GetTick>
 8002da2:	4602      	mov	r2, r0
 8002da4:	693b      	ldr	r3, [r7, #16]
 8002da6:	1ad3      	subs	r3, r2, r3
 8002da8:	2b02      	cmp	r3, #2
 8002daa:	d901      	bls.n	8002db0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8002dac:	2303      	movs	r3, #3
 8002dae:	e10c      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002db0:	4b6a      	ldr	r3, [pc, #424]	@ (8002f5c <HAL_RCC_OscConfig+0x474>)
 8002db2:	681b      	ldr	r3, [r3, #0]
 8002db4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002db8:	2b00      	cmp	r3, #0
 8002dba:	d0f0      	beq.n	8002d9e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	689b      	ldr	r3, [r3, #8]
 8002dc0:	2b01      	cmp	r3, #1
 8002dc2:	d106      	bne.n	8002dd2 <HAL_RCC_OscConfig+0x2ea>
 8002dc4:	4b64      	ldr	r3, [pc, #400]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dc8:	4a63      	ldr	r2, [pc, #396]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dca:	f043 0301 	orr.w	r3, r3, #1
 8002dce:	6713      	str	r3, [r2, #112]	@ 0x70
 8002dd0:	e01c      	b.n	8002e0c <HAL_RCC_OscConfig+0x324>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	689b      	ldr	r3, [r3, #8]
 8002dd6:	2b05      	cmp	r3, #5
 8002dd8:	d10c      	bne.n	8002df4 <HAL_RCC_OscConfig+0x30c>
 8002dda:	4b5f      	ldr	r3, [pc, #380]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002ddc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dde:	4a5e      	ldr	r2, [pc, #376]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002de0:	f043 0304 	orr.w	r3, r3, #4
 8002de4:	6713      	str	r3, [r2, #112]	@ 0x70
 8002de6:	4b5c      	ldr	r3, [pc, #368]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002de8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002dea:	4a5b      	ldr	r2, [pc, #364]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dec:	f043 0301 	orr.w	r3, r3, #1
 8002df0:	6713      	str	r3, [r2, #112]	@ 0x70
 8002df2:	e00b      	b.n	8002e0c <HAL_RCC_OscConfig+0x324>
 8002df4:	4b58      	ldr	r3, [pc, #352]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002df6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002df8:	4a57      	ldr	r2, [pc, #348]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002dfa:	f023 0301 	bic.w	r3, r3, #1
 8002dfe:	6713      	str	r3, [r2, #112]	@ 0x70
 8002e00:	4b55      	ldr	r3, [pc, #340]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e02:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e04:	4a54      	ldr	r2, [pc, #336]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e06:	f023 0304 	bic.w	r3, r3, #4
 8002e0a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	689b      	ldr	r3, [r3, #8]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d015      	beq.n	8002e40 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002e14:	f7ff fb7c 	bl	8002510 <HAL_GetTick>
 8002e18:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e1a:	e00a      	b.n	8002e32 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e1c:	f7ff fb78 	bl	8002510 <HAL_GetTick>
 8002e20:	4602      	mov	r2, r0
 8002e22:	693b      	ldr	r3, [r7, #16]
 8002e24:	1ad3      	subs	r3, r2, r3
 8002e26:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e2a:	4293      	cmp	r3, r2
 8002e2c:	d901      	bls.n	8002e32 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002e2e:	2303      	movs	r3, #3
 8002e30:	e0cb      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002e32:	4b49      	ldr	r3, [pc, #292]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e34:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e36:	f003 0302 	and.w	r3, r3, #2
 8002e3a:	2b00      	cmp	r3, #0
 8002e3c:	d0ee      	beq.n	8002e1c <HAL_RCC_OscConfig+0x334>
 8002e3e:	e014      	b.n	8002e6a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002e40:	f7ff fb66 	bl	8002510 <HAL_GetTick>
 8002e44:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e46:	e00a      	b.n	8002e5e <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002e48:	f7ff fb62 	bl	8002510 <HAL_GetTick>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	693b      	ldr	r3, [r7, #16]
 8002e50:	1ad3      	subs	r3, r2, r3
 8002e52:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002e56:	4293      	cmp	r3, r2
 8002e58:	d901      	bls.n	8002e5e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8002e5a:	2303      	movs	r3, #3
 8002e5c:	e0b5      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002e5e:	4b3e      	ldr	r3, [pc, #248]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e60:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002e62:	f003 0302 	and.w	r3, r3, #2
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d1ee      	bne.n	8002e48 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002e6a:	7dfb      	ldrb	r3, [r7, #23]
 8002e6c:	2b01      	cmp	r3, #1
 8002e6e:	d105      	bne.n	8002e7c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002e70:	4b39      	ldr	r3, [pc, #228]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e72:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002e74:	4a38      	ldr	r2, [pc, #224]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e76:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8002e7a:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	699b      	ldr	r3, [r3, #24]
 8002e80:	2b00      	cmp	r3, #0
 8002e82:	f000 80a1 	beq.w	8002fc8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8002e86:	4b34      	ldr	r3, [pc, #208]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002e88:	689b      	ldr	r3, [r3, #8]
 8002e8a:	f003 030c 	and.w	r3, r3, #12
 8002e8e:	2b08      	cmp	r3, #8
 8002e90:	d05c      	beq.n	8002f4c <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002e92:	687b      	ldr	r3, [r7, #4]
 8002e94:	699b      	ldr	r3, [r3, #24]
 8002e96:	2b02      	cmp	r3, #2
 8002e98:	d141      	bne.n	8002f1e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002e9a:	4b31      	ldr	r3, [pc, #196]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ea0:	f7ff fb36 	bl	8002510 <HAL_GetTick>
 8002ea4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002ea6:	e008      	b.n	8002eba <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002ea8:	f7ff fb32 	bl	8002510 <HAL_GetTick>
 8002eac:	4602      	mov	r2, r0
 8002eae:	693b      	ldr	r3, [r7, #16]
 8002eb0:	1ad3      	subs	r3, r2, r3
 8002eb2:	2b02      	cmp	r3, #2
 8002eb4:	d901      	bls.n	8002eba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8002eb6:	2303      	movs	r3, #3
 8002eb8:	e087      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002eba:	4b27      	ldr	r3, [pc, #156]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002ec2:	2b00      	cmp	r3, #0
 8002ec4:	d1f0      	bne.n	8002ea8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	69da      	ldr	r2, [r3, #28]
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	6a1b      	ldr	r3, [r3, #32]
 8002ece:	431a      	orrs	r2, r3
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002ed4:	019b      	lsls	r3, r3, #6
 8002ed6:	431a      	orrs	r2, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002edc:	085b      	lsrs	r3, r3, #1
 8002ede:	3b01      	subs	r3, #1
 8002ee0:	041b      	lsls	r3, r3, #16
 8002ee2:	431a      	orrs	r2, r3
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002ee8:	061b      	lsls	r3, r3, #24
 8002eea:	491b      	ldr	r1, [pc, #108]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002eec:	4313      	orrs	r3, r2
 8002eee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ef0:	4b1b      	ldr	r3, [pc, #108]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002ef2:	2201      	movs	r2, #1
 8002ef4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002ef6:	f7ff fb0b 	bl	8002510 <HAL_GetTick>
 8002efa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002efc:	e008      	b.n	8002f10 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002efe:	f7ff fb07 	bl	8002510 <HAL_GetTick>
 8002f02:	4602      	mov	r2, r0
 8002f04:	693b      	ldr	r3, [r7, #16]
 8002f06:	1ad3      	subs	r3, r2, r3
 8002f08:	2b02      	cmp	r3, #2
 8002f0a:	d901      	bls.n	8002f10 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002f0c:	2303      	movs	r3, #3
 8002f0e:	e05c      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002f10:	4b11      	ldr	r3, [pc, #68]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f18:	2b00      	cmp	r3, #0
 8002f1a:	d0f0      	beq.n	8002efe <HAL_RCC_OscConfig+0x416>
 8002f1c:	e054      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002f1e:	4b10      	ldr	r3, [pc, #64]	@ (8002f60 <HAL_RCC_OscConfig+0x478>)
 8002f20:	2200      	movs	r2, #0
 8002f22:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f24:	f7ff faf4 	bl	8002510 <HAL_GetTick>
 8002f28:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f2a:	e008      	b.n	8002f3e <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002f2c:	f7ff faf0 	bl	8002510 <HAL_GetTick>
 8002f30:	4602      	mov	r2, r0
 8002f32:	693b      	ldr	r3, [r7, #16]
 8002f34:	1ad3      	subs	r3, r2, r3
 8002f36:	2b02      	cmp	r3, #2
 8002f38:	d901      	bls.n	8002f3e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8002f3a:	2303      	movs	r3, #3
 8002f3c:	e045      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002f3e:	4b06      	ldr	r3, [pc, #24]	@ (8002f58 <HAL_RCC_OscConfig+0x470>)
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d1f0      	bne.n	8002f2c <HAL_RCC_OscConfig+0x444>
 8002f4a:	e03d      	b.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	699b      	ldr	r3, [r3, #24]
 8002f50:	2b01      	cmp	r3, #1
 8002f52:	d107      	bne.n	8002f64 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002f54:	2301      	movs	r3, #1
 8002f56:	e038      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
 8002f58:	40023800 	.word	0x40023800
 8002f5c:	40007000 	.word	0x40007000
 8002f60:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002f64:	4b1b      	ldr	r3, [pc, #108]	@ (8002fd4 <HAL_RCC_OscConfig+0x4ec>)
 8002f66:	685b      	ldr	r3, [r3, #4]
 8002f68:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f6a:	687b      	ldr	r3, [r7, #4]
 8002f6c:	699b      	ldr	r3, [r3, #24]
 8002f6e:	2b01      	cmp	r3, #1
 8002f70:	d028      	beq.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002f7c:	429a      	cmp	r2, r3
 8002f7e:	d121      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8002f86:	687b      	ldr	r3, [r7, #4]
 8002f88:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002f8a:	429a      	cmp	r2, r3
 8002f8c:	d11a      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002f8e:	68fa      	ldr	r2, [r7, #12]
 8002f90:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002f94:	4013      	ands	r3, r2
 8002f96:	687a      	ldr	r2, [r7, #4]
 8002f98:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8002f9a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002f9c:	4293      	cmp	r3, r2
 8002f9e:	d111      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002faa:	085b      	lsrs	r3, r3, #1
 8002fac:	3b01      	subs	r3, #1
 8002fae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002fb0:	429a      	cmp	r2, r3
 8002fb2:	d107      	bne.n	8002fc4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8002fbe:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d001      	beq.n	8002fc8 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8002fc4:	2301      	movs	r3, #1
 8002fc6:	e000      	b.n	8002fca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8002fc8:	2300      	movs	r3, #0
}
 8002fca:	4618      	mov	r0, r3
 8002fcc:	3718      	adds	r7, #24
 8002fce:	46bd      	mov	sp, r7
 8002fd0:	bd80      	pop	{r7, pc}
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800

08002fd8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002fd8:	b580      	push	{r7, lr}
 8002fda:	b084      	sub	sp, #16
 8002fdc:	af00      	add	r7, sp, #0
 8002fde:	6078      	str	r0, [r7, #4]
 8002fe0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	2b00      	cmp	r3, #0
 8002fe6:	d101      	bne.n	8002fec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002fe8:	2301      	movs	r3, #1
 8002fea:	e0cc      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002fec:	4b68      	ldr	r3, [pc, #416]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	f003 0307 	and.w	r3, r3, #7
 8002ff4:	683a      	ldr	r2, [r7, #0]
 8002ff6:	429a      	cmp	r2, r3
 8002ff8:	d90c      	bls.n	8003014 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002ffa:	4b65      	ldr	r3, [pc, #404]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8002ffc:	683a      	ldr	r2, [r7, #0]
 8002ffe:	b2d2      	uxtb	r2, r2
 8003000:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003002:	4b63      	ldr	r3, [pc, #396]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0307 	and.w	r3, r3, #7
 800300a:	683a      	ldr	r2, [r7, #0]
 800300c:	429a      	cmp	r2, r3
 800300e:	d001      	beq.n	8003014 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003010:	2301      	movs	r3, #1
 8003012:	e0b8      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003014:	687b      	ldr	r3, [r7, #4]
 8003016:	681b      	ldr	r3, [r3, #0]
 8003018:	f003 0302 	and.w	r3, r3, #2
 800301c:	2b00      	cmp	r3, #0
 800301e:	d020      	beq.n	8003062 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003020:	687b      	ldr	r3, [r7, #4]
 8003022:	681b      	ldr	r3, [r3, #0]
 8003024:	f003 0304 	and.w	r3, r3, #4
 8003028:	2b00      	cmp	r3, #0
 800302a:	d005      	beq.n	8003038 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800302c:	4b59      	ldr	r3, [pc, #356]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800302e:	689b      	ldr	r3, [r3, #8]
 8003030:	4a58      	ldr	r2, [pc, #352]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003032:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8003036:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	681b      	ldr	r3, [r3, #0]
 800303c:	f003 0308 	and.w	r3, r3, #8
 8003040:	2b00      	cmp	r3, #0
 8003042:	d005      	beq.n	8003050 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003044:	4b53      	ldr	r3, [pc, #332]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003046:	689b      	ldr	r3, [r3, #8]
 8003048:	4a52      	ldr	r2, [pc, #328]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800304a:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800304e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003050:	4b50      	ldr	r3, [pc, #320]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003052:	689b      	ldr	r3, [r3, #8]
 8003054:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	689b      	ldr	r3, [r3, #8]
 800305c:	494d      	ldr	r1, [pc, #308]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800305e:	4313      	orrs	r3, r2
 8003060:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	681b      	ldr	r3, [r3, #0]
 8003066:	f003 0301 	and.w	r3, r3, #1
 800306a:	2b00      	cmp	r3, #0
 800306c:	d044      	beq.n	80030f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800306e:	687b      	ldr	r3, [r7, #4]
 8003070:	685b      	ldr	r3, [r3, #4]
 8003072:	2b01      	cmp	r3, #1
 8003074:	d107      	bne.n	8003086 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003076:	4b47      	ldr	r3, [pc, #284]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800307e:	2b00      	cmp	r3, #0
 8003080:	d119      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003082:	2301      	movs	r3, #1
 8003084:	e07f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	685b      	ldr	r3, [r3, #4]
 800308a:	2b02      	cmp	r3, #2
 800308c:	d003      	beq.n	8003096 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003092:	2b03      	cmp	r3, #3
 8003094:	d107      	bne.n	80030a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003096:	4b3f      	ldr	r3, [pc, #252]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003098:	681b      	ldr	r3, [r3, #0]
 800309a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800309e:	2b00      	cmp	r3, #0
 80030a0:	d109      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030a2:	2301      	movs	r3, #1
 80030a4:	e06f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80030a6:	4b3b      	ldr	r3, [pc, #236]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0302 	and.w	r3, r3, #2
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d101      	bne.n	80030b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80030b2:	2301      	movs	r3, #1
 80030b4:	e067      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80030b6:	4b37      	ldr	r3, [pc, #220]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030b8:	689b      	ldr	r3, [r3, #8]
 80030ba:	f023 0203 	bic.w	r2, r3, #3
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	4934      	ldr	r1, [pc, #208]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030c4:	4313      	orrs	r3, r2
 80030c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80030c8:	f7ff fa22 	bl	8002510 <HAL_GetTick>
 80030cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030ce:	e00a      	b.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80030d0:	f7ff fa1e 	bl	8002510 <HAL_GetTick>
 80030d4:	4602      	mov	r2, r0
 80030d6:	68fb      	ldr	r3, [r7, #12]
 80030d8:	1ad3      	subs	r3, r2, r3
 80030da:	f241 3288 	movw	r2, #5000	@ 0x1388
 80030de:	4293      	cmp	r3, r2
 80030e0:	d901      	bls.n	80030e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80030e2:	2303      	movs	r3, #3
 80030e4:	e04f      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80030e6:	4b2b      	ldr	r3, [pc, #172]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 80030e8:	689b      	ldr	r3, [r3, #8]
 80030ea:	f003 020c 	and.w	r2, r3, #12
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	685b      	ldr	r3, [r3, #4]
 80030f2:	009b      	lsls	r3, r3, #2
 80030f4:	429a      	cmp	r2, r3
 80030f6:	d1eb      	bne.n	80030d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80030f8:	4b25      	ldr	r3, [pc, #148]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	f003 0307 	and.w	r3, r3, #7
 8003100:	683a      	ldr	r2, [r7, #0]
 8003102:	429a      	cmp	r2, r3
 8003104:	d20c      	bcs.n	8003120 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003106:	4b22      	ldr	r3, [pc, #136]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003108:	683a      	ldr	r2, [r7, #0]
 800310a:	b2d2      	uxtb	r2, r2
 800310c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800310e:	4b20      	ldr	r3, [pc, #128]	@ (8003190 <HAL_RCC_ClockConfig+0x1b8>)
 8003110:	681b      	ldr	r3, [r3, #0]
 8003112:	f003 0307 	and.w	r3, r3, #7
 8003116:	683a      	ldr	r2, [r7, #0]
 8003118:	429a      	cmp	r2, r3
 800311a:	d001      	beq.n	8003120 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800311c:	2301      	movs	r3, #1
 800311e:	e032      	b.n	8003186 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	f003 0304 	and.w	r3, r3, #4
 8003128:	2b00      	cmp	r3, #0
 800312a:	d008      	beq.n	800313e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800312c:	4b19      	ldr	r3, [pc, #100]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800312e:	689b      	ldr	r3, [r3, #8]
 8003130:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	68db      	ldr	r3, [r3, #12]
 8003138:	4916      	ldr	r1, [pc, #88]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800313a:	4313      	orrs	r3, r2
 800313c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800313e:	687b      	ldr	r3, [r7, #4]
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	f003 0308 	and.w	r3, r3, #8
 8003146:	2b00      	cmp	r3, #0
 8003148:	d009      	beq.n	800315e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800314a:	4b12      	ldr	r3, [pc, #72]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003152:	687b      	ldr	r3, [r7, #4]
 8003154:	691b      	ldr	r3, [r3, #16]
 8003156:	00db      	lsls	r3, r3, #3
 8003158:	490e      	ldr	r1, [pc, #56]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 800315a:	4313      	orrs	r3, r2
 800315c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 800315e:	f000 f821 	bl	80031a4 <HAL_RCC_GetSysClockFreq>
 8003162:	4602      	mov	r2, r0
 8003164:	4b0b      	ldr	r3, [pc, #44]	@ (8003194 <HAL_RCC_ClockConfig+0x1bc>)
 8003166:	689b      	ldr	r3, [r3, #8]
 8003168:	091b      	lsrs	r3, r3, #4
 800316a:	f003 030f 	and.w	r3, r3, #15
 800316e:	490a      	ldr	r1, [pc, #40]	@ (8003198 <HAL_RCC_ClockConfig+0x1c0>)
 8003170:	5ccb      	ldrb	r3, [r1, r3]
 8003172:	fa22 f303 	lsr.w	r3, r2, r3
 8003176:	4a09      	ldr	r2, [pc, #36]	@ (800319c <HAL_RCC_ClockConfig+0x1c4>)
 8003178:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800317a:	4b09      	ldr	r3, [pc, #36]	@ (80031a0 <HAL_RCC_ClockConfig+0x1c8>)
 800317c:	681b      	ldr	r3, [r3, #0]
 800317e:	4618      	mov	r0, r3
 8003180:	f7ff f828 	bl	80021d4 <HAL_InitTick>

  return HAL_OK;
 8003184:	2300      	movs	r3, #0
}
 8003186:	4618      	mov	r0, r3
 8003188:	3710      	adds	r7, #16
 800318a:	46bd      	mov	sp, r7
 800318c:	bd80      	pop	{r7, pc}
 800318e:	bf00      	nop
 8003190:	40023c00 	.word	0x40023c00
 8003194:	40023800 	.word	0x40023800
 8003198:	08009f7c 	.word	0x08009f7c
 800319c:	20000000 	.word	0x20000000
 80031a0:	20000004 	.word	0x20000004

080031a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80031a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80031a8:	b094      	sub	sp, #80	@ 0x50
 80031aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80031ac:	2300      	movs	r3, #0
 80031ae:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80031b0:	2300      	movs	r3, #0
 80031b2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 80031b4:	2300      	movs	r3, #0
 80031b6:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 80031b8:	2300      	movs	r3, #0
 80031ba:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80031bc:	4b79      	ldr	r3, [pc, #484]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031be:	689b      	ldr	r3, [r3, #8]
 80031c0:	f003 030c 	and.w	r3, r3, #12
 80031c4:	2b08      	cmp	r3, #8
 80031c6:	d00d      	beq.n	80031e4 <HAL_RCC_GetSysClockFreq+0x40>
 80031c8:	2b08      	cmp	r3, #8
 80031ca:	f200 80e1 	bhi.w	8003390 <HAL_RCC_GetSysClockFreq+0x1ec>
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	d002      	beq.n	80031d8 <HAL_RCC_GetSysClockFreq+0x34>
 80031d2:	2b04      	cmp	r3, #4
 80031d4:	d003      	beq.n	80031de <HAL_RCC_GetSysClockFreq+0x3a>
 80031d6:	e0db      	b.n	8003390 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80031d8:	4b73      	ldr	r3, [pc, #460]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x204>)
 80031da:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031dc:	e0db      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80031de:	4b73      	ldr	r3, [pc, #460]	@ (80033ac <HAL_RCC_GetSysClockFreq+0x208>)
 80031e0:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80031e2:	e0d8      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80031e4:	4b6f      	ldr	r3, [pc, #444]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80031ec:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80031ee:	4b6d      	ldr	r3, [pc, #436]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031f0:	685b      	ldr	r3, [r3, #4]
 80031f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d063      	beq.n	80032c2 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80031fa:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80031fc:	685b      	ldr	r3, [r3, #4]
 80031fe:	099b      	lsrs	r3, r3, #6
 8003200:	2200      	movs	r2, #0
 8003202:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003204:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003206:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003208:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800320c:	633b      	str	r3, [r7, #48]	@ 0x30
 800320e:	2300      	movs	r3, #0
 8003210:	637b      	str	r3, [r7, #52]	@ 0x34
 8003212:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003216:	4622      	mov	r2, r4
 8003218:	462b      	mov	r3, r5
 800321a:	f04f 0000 	mov.w	r0, #0
 800321e:	f04f 0100 	mov.w	r1, #0
 8003222:	0159      	lsls	r1, r3, #5
 8003224:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003228:	0150      	lsls	r0, r2, #5
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4621      	mov	r1, r4
 8003230:	1a51      	subs	r1, r2, r1
 8003232:	6139      	str	r1, [r7, #16]
 8003234:	4629      	mov	r1, r5
 8003236:	eb63 0301 	sbc.w	r3, r3, r1
 800323a:	617b      	str	r3, [r7, #20]
 800323c:	f04f 0200 	mov.w	r2, #0
 8003240:	f04f 0300 	mov.w	r3, #0
 8003244:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003248:	4659      	mov	r1, fp
 800324a:	018b      	lsls	r3, r1, #6
 800324c:	4651      	mov	r1, sl
 800324e:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003252:	4651      	mov	r1, sl
 8003254:	018a      	lsls	r2, r1, #6
 8003256:	4651      	mov	r1, sl
 8003258:	ebb2 0801 	subs.w	r8, r2, r1
 800325c:	4659      	mov	r1, fp
 800325e:	eb63 0901 	sbc.w	r9, r3, r1
 8003262:	f04f 0200 	mov.w	r2, #0
 8003266:	f04f 0300 	mov.w	r3, #0
 800326a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800326e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003272:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003276:	4690      	mov	r8, r2
 8003278:	4699      	mov	r9, r3
 800327a:	4623      	mov	r3, r4
 800327c:	eb18 0303 	adds.w	r3, r8, r3
 8003280:	60bb      	str	r3, [r7, #8]
 8003282:	462b      	mov	r3, r5
 8003284:	eb49 0303 	adc.w	r3, r9, r3
 8003288:	60fb      	str	r3, [r7, #12]
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	f04f 0300 	mov.w	r3, #0
 8003292:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003296:	4629      	mov	r1, r5
 8003298:	024b      	lsls	r3, r1, #9
 800329a:	4621      	mov	r1, r4
 800329c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80032a0:	4621      	mov	r1, r4
 80032a2:	024a      	lsls	r2, r1, #9
 80032a4:	4610      	mov	r0, r2
 80032a6:	4619      	mov	r1, r3
 80032a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80032aa:	2200      	movs	r2, #0
 80032ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80032ae:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80032b0:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80032b4:	f7fc ffdc 	bl	8000270 <__aeabi_uldivmod>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4613      	mov	r3, r2
 80032be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80032c0:	e058      	b.n	8003374 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80032c2:	4b38      	ldr	r3, [pc, #224]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 80032c4:	685b      	ldr	r3, [r3, #4]
 80032c6:	099b      	lsrs	r3, r3, #6
 80032c8:	2200      	movs	r2, #0
 80032ca:	4618      	mov	r0, r3
 80032cc:	4611      	mov	r1, r2
 80032ce:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80032d2:	623b      	str	r3, [r7, #32]
 80032d4:	2300      	movs	r3, #0
 80032d6:	627b      	str	r3, [r7, #36]	@ 0x24
 80032d8:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80032dc:	4642      	mov	r2, r8
 80032de:	464b      	mov	r3, r9
 80032e0:	f04f 0000 	mov.w	r0, #0
 80032e4:	f04f 0100 	mov.w	r1, #0
 80032e8:	0159      	lsls	r1, r3, #5
 80032ea:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80032ee:	0150      	lsls	r0, r2, #5
 80032f0:	4602      	mov	r2, r0
 80032f2:	460b      	mov	r3, r1
 80032f4:	4641      	mov	r1, r8
 80032f6:	ebb2 0a01 	subs.w	sl, r2, r1
 80032fa:	4649      	mov	r1, r9
 80032fc:	eb63 0b01 	sbc.w	fp, r3, r1
 8003300:	f04f 0200 	mov.w	r2, #0
 8003304:	f04f 0300 	mov.w	r3, #0
 8003308:	ea4f 138b 	mov.w	r3, fp, lsl #6
 800330c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003310:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003314:	ebb2 040a 	subs.w	r4, r2, sl
 8003318:	eb63 050b 	sbc.w	r5, r3, fp
 800331c:	f04f 0200 	mov.w	r2, #0
 8003320:	f04f 0300 	mov.w	r3, #0
 8003324:	00eb      	lsls	r3, r5, #3
 8003326:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800332a:	00e2      	lsls	r2, r4, #3
 800332c:	4614      	mov	r4, r2
 800332e:	461d      	mov	r5, r3
 8003330:	4643      	mov	r3, r8
 8003332:	18e3      	adds	r3, r4, r3
 8003334:	603b      	str	r3, [r7, #0]
 8003336:	464b      	mov	r3, r9
 8003338:	eb45 0303 	adc.w	r3, r5, r3
 800333c:	607b      	str	r3, [r7, #4]
 800333e:	f04f 0200 	mov.w	r2, #0
 8003342:	f04f 0300 	mov.w	r3, #0
 8003346:	e9d7 4500 	ldrd	r4, r5, [r7]
 800334a:	4629      	mov	r1, r5
 800334c:	028b      	lsls	r3, r1, #10
 800334e:	4621      	mov	r1, r4
 8003350:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003354:	4621      	mov	r1, r4
 8003356:	028a      	lsls	r2, r1, #10
 8003358:	4610      	mov	r0, r2
 800335a:	4619      	mov	r1, r3
 800335c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800335e:	2200      	movs	r2, #0
 8003360:	61bb      	str	r3, [r7, #24]
 8003362:	61fa      	str	r2, [r7, #28]
 8003364:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003368:	f7fc ff82 	bl	8000270 <__aeabi_uldivmod>
 800336c:	4602      	mov	r2, r0
 800336e:	460b      	mov	r3, r1
 8003370:	4613      	mov	r3, r2
 8003372:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_GetSysClockFreq+0x200>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	0c1b      	lsrs	r3, r3, #16
 800337a:	f003 0303 	and.w	r3, r3, #3
 800337e:	3301      	adds	r3, #1
 8003380:	005b      	lsls	r3, r3, #1
 8003382:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003384:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003386:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003388:	fbb2 f3f3 	udiv	r3, r2, r3
 800338c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800338e:	e002      	b.n	8003396 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003390:	4b05      	ldr	r3, [pc, #20]	@ (80033a8 <HAL_RCC_GetSysClockFreq+0x204>)
 8003392:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003394:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003396:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003398:	4618      	mov	r0, r3
 800339a:	3750      	adds	r7, #80	@ 0x50
 800339c:	46bd      	mov	sp, r7
 800339e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80033a2:	bf00      	nop
 80033a4:	40023800 	.word	0x40023800
 80033a8:	00f42400 	.word	0x00f42400
 80033ac:	007a1200 	.word	0x007a1200

080033b0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80033b0:	b480      	push	{r7}
 80033b2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80033b4:	4b03      	ldr	r3, [pc, #12]	@ (80033c4 <HAL_RCC_GetHCLKFreq+0x14>)
 80033b6:	681b      	ldr	r3, [r3, #0]
}
 80033b8:	4618      	mov	r0, r3
 80033ba:	46bd      	mov	sp, r7
 80033bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033c0:	4770      	bx	lr
 80033c2:	bf00      	nop
 80033c4:	20000000 	.word	0x20000000

080033c8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80033c8:	b580      	push	{r7, lr}
 80033ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80033cc:	f7ff fff0 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033d0:	4602      	mov	r2, r0
 80033d2:	4b05      	ldr	r3, [pc, #20]	@ (80033e8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80033d4:	689b      	ldr	r3, [r3, #8]
 80033d6:	0a9b      	lsrs	r3, r3, #10
 80033d8:	f003 0307 	and.w	r3, r3, #7
 80033dc:	4903      	ldr	r1, [pc, #12]	@ (80033ec <HAL_RCC_GetPCLK1Freq+0x24>)
 80033de:	5ccb      	ldrb	r3, [r1, r3]
 80033e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80033e4:	4618      	mov	r0, r3
 80033e6:	bd80      	pop	{r7, pc}
 80033e8:	40023800 	.word	0x40023800
 80033ec:	08009f8c 	.word	0x08009f8c

080033f0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80033f0:	b580      	push	{r7, lr}
 80033f2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80033f4:	f7ff ffdc 	bl	80033b0 <HAL_RCC_GetHCLKFreq>
 80033f8:	4602      	mov	r2, r0
 80033fa:	4b05      	ldr	r3, [pc, #20]	@ (8003410 <HAL_RCC_GetPCLK2Freq+0x20>)
 80033fc:	689b      	ldr	r3, [r3, #8]
 80033fe:	0b5b      	lsrs	r3, r3, #13
 8003400:	f003 0307 	and.w	r3, r3, #7
 8003404:	4903      	ldr	r1, [pc, #12]	@ (8003414 <HAL_RCC_GetPCLK2Freq+0x24>)
 8003406:	5ccb      	ldrb	r3, [r1, r3]
 8003408:	fa22 f303 	lsr.w	r3, r2, r3
}
 800340c:	4618      	mov	r0, r3
 800340e:	bd80      	pop	{r7, pc}
 8003410:	40023800 	.word	0x40023800
 8003414:	08009f8c 	.word	0x08009f8c

08003418 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003418:	b480      	push	{r7}
 800341a:	b083      	sub	sp, #12
 800341c:	af00      	add	r7, sp, #0
 800341e:	6078      	str	r0, [r7, #4]
 8003420:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	220f      	movs	r2, #15
 8003426:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003428:	4b12      	ldr	r3, [pc, #72]	@ (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 800342a:	689b      	ldr	r3, [r3, #8]
 800342c:	f003 0203 	and.w	r2, r3, #3
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003434:	4b0f      	ldr	r3, [pc, #60]	@ (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 8003436:	689b      	ldr	r3, [r3, #8]
 8003438:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003440:	4b0c      	ldr	r3, [pc, #48]	@ (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 8003442:	689b      	ldr	r3, [r3, #8]
 8003444:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800344c:	4b09      	ldr	r3, [pc, #36]	@ (8003474 <HAL_RCC_GetClockConfig+0x5c>)
 800344e:	689b      	ldr	r3, [r3, #8]
 8003450:	08db      	lsrs	r3, r3, #3
 8003452:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800345a:	4b07      	ldr	r3, [pc, #28]	@ (8003478 <HAL_RCC_GetClockConfig+0x60>)
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f003 0207 	and.w	r2, r3, #7
 8003462:	683b      	ldr	r3, [r7, #0]
 8003464:	601a      	str	r2, [r3, #0]
}
 8003466:	bf00      	nop
 8003468:	370c      	adds	r7, #12
 800346a:	46bd      	mov	sp, r7
 800346c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003470:	4770      	bx	lr
 8003472:	bf00      	nop
 8003474:	40023800 	.word	0x40023800
 8003478:	40023c00 	.word	0x40023c00

0800347c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800347c:	b580      	push	{r7, lr}
 800347e:	b082      	sub	sp, #8
 8003480:	af00      	add	r7, sp, #0
 8003482:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d101      	bne.n	800348e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e07b      	b.n	8003586 <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003492:	2b00      	cmp	r3, #0
 8003494:	d108      	bne.n	80034a8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	685b      	ldr	r3, [r3, #4]
 800349a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800349e:	d009      	beq.n	80034b4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	2200      	movs	r2, #0
 80034a4:	61da      	str	r2, [r3, #28]
 80034a6:	e005      	b.n	80034b4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2200      	movs	r2, #0
 80034ac:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	2200      	movs	r2, #0
 80034b2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	2200      	movs	r2, #0
 80034b8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80034c0:	b2db      	uxtb	r3, r3
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d106      	bne.n	80034d4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	2200      	movs	r2, #0
 80034ca:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80034ce:	6878      	ldr	r0, [r7, #4]
 80034d0:	f7fe fdf0 	bl	80020b4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80034d4:	687b      	ldr	r3, [r7, #4]
 80034d6:	2202      	movs	r2, #2
 80034d8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	681a      	ldr	r2, [r3, #0]
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80034ea:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	685b      	ldr	r3, [r3, #4]
 80034f0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	689b      	ldr	r3, [r3, #8]
 80034f8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80034fc:	431a      	orrs	r2, r3
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	68db      	ldr	r3, [r3, #12]
 8003502:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003506:	431a      	orrs	r2, r3
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	691b      	ldr	r3, [r3, #16]
 800350c:	f003 0302 	and.w	r3, r3, #2
 8003510:	431a      	orrs	r2, r3
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	695b      	ldr	r3, [r3, #20]
 8003516:	f003 0301 	and.w	r3, r3, #1
 800351a:	431a      	orrs	r2, r3
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	699b      	ldr	r3, [r3, #24]
 8003520:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003524:	431a      	orrs	r2, r3
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	69db      	ldr	r3, [r3, #28]
 800352a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800352e:	431a      	orrs	r2, r3
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	6a1b      	ldr	r3, [r3, #32]
 8003534:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003538:	ea42 0103 	orr.w	r1, r2, r3
 800353c:	687b      	ldr	r3, [r7, #4]
 800353e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003540:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	430a      	orrs	r2, r1
 800354a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	699b      	ldr	r3, [r3, #24]
 8003550:	0c1b      	lsrs	r3, r3, #16
 8003552:	f003 0104 	and.w	r1, r3, #4
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800355a:	f003 0210 	and.w	r2, r3, #16
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	430a      	orrs	r2, r1
 8003564:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	69da      	ldr	r2, [r3, #28]
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003574:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	2200      	movs	r2, #0
 800357a:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	2201      	movs	r2, #1
 8003580:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003584:	2300      	movs	r3, #0
}
 8003586:	4618      	mov	r0, r3
 8003588:	3708      	adds	r7, #8
 800358a:	46bd      	mov	sp, r7
 800358c:	bd80      	pop	{r7, pc}

0800358e <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration in ms
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, const uint8_t *pTxData, uint8_t *pRxData,
                                          uint16_t Size, uint32_t Timeout)
{
 800358e:	b580      	push	{r7, lr}
 8003590:	b08a      	sub	sp, #40	@ 0x28
 8003592:	af00      	add	r7, sp, #0
 8003594:	60f8      	str	r0, [r7, #12]
 8003596:	60b9      	str	r1, [r7, #8]
 8003598:	607a      	str	r2, [r7, #4]
 800359a:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800359c:	2301      	movs	r3, #1
 800359e:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 80035a0:	f7fe ffb6 	bl	8002510 <HAL_GetTick>
 80035a4:	6238      	str	r0, [r7, #32]

  /* Init temporary variables */
  tmp_state           = hspi->State;
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80035ac:	77fb      	strb	r3, [r7, #31]
  tmp_mode            = hspi->Init.Mode;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	685b      	ldr	r3, [r3, #4]
 80035b2:	61bb      	str	r3, [r7, #24]
  initial_TxXferCount = Size;
 80035b4:	887b      	ldrh	r3, [r7, #2]
 80035b6:	82fb      	strh	r3, [r7, #22]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 80035b8:	7ffb      	ldrb	r3, [r7, #31]
 80035ba:	2b01      	cmp	r3, #1
 80035bc:	d00c      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x4a>
 80035be:	69bb      	ldr	r3, [r7, #24]
 80035c0:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80035c4:	d106      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x46>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) &&
 80035c6:	68fb      	ldr	r3, [r7, #12]
 80035c8:	689b      	ldr	r3, [r3, #8]
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d102      	bne.n	80035d4 <HAL_SPI_TransmitReceive+0x46>
 80035ce:	7ffb      	ldrb	r3, [r7, #31]
 80035d0:	2b04      	cmp	r3, #4
 80035d2:	d001      	beq.n	80035d8 <HAL_SPI_TransmitReceive+0x4a>
         (tmp_state == HAL_SPI_STATE_BUSY_RX))))
  {
    return HAL_BUSY;
 80035d4:	2302      	movs	r3, #2
 80035d6:	e17f      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 80035d8:	68bb      	ldr	r3, [r7, #8]
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d005      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x5c>
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	d002      	beq.n	80035ea <HAL_SPI_TransmitReceive+0x5c>
 80035e4:	887b      	ldrh	r3, [r7, #2]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d101      	bne.n	80035ee <HAL_SPI_TransmitReceive+0x60>
  {
    return HAL_ERROR;
 80035ea:	2301      	movs	r3, #1
 80035ec:	e174      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 80035f4:	2b01      	cmp	r3, #1
 80035f6:	d101      	bne.n	80035fc <HAL_SPI_TransmitReceive+0x6e>
 80035f8:	2302      	movs	r3, #2
 80035fa:	e16d      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	2201      	movs	r2, #1
 8003600:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8003604:	68fb      	ldr	r3, [r7, #12]
 8003606:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b04      	cmp	r3, #4
 800360e:	d003      	beq.n	8003618 <HAL_SPI_TransmitReceive+0x8a>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8003610:	68fb      	ldr	r3, [r7, #12]
 8003612:	2205      	movs	r2, #5
 8003614:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2200      	movs	r2, #0
 800361c:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800361e:	68fb      	ldr	r3, [r7, #12]
 8003620:	687a      	ldr	r2, [r7, #4]
 8003622:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8003624:	68fb      	ldr	r3, [r7, #12]
 8003626:	887a      	ldrh	r2, [r7, #2]
 8003628:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 800362a:	68fb      	ldr	r3, [r7, #12]
 800362c:	887a      	ldrh	r2, [r7, #2]
 800362e:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (const uint8_t *)pTxData;
 8003630:	68fb      	ldr	r3, [r7, #12]
 8003632:	68ba      	ldr	r2, [r7, #8]
 8003634:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	887a      	ldrh	r2, [r7, #2]
 800363a:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	887a      	ldrh	r2, [r7, #2]
 8003640:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	2200      	movs	r2, #0
 8003646:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8003648:	68fb      	ldr	r3, [r7, #12]
 800364a:	2200      	movs	r2, #0
 800364c:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	681b      	ldr	r3, [r3, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003658:	2b40      	cmp	r3, #64	@ 0x40
 800365a:	d007      	beq.n	800366c <HAL_SPI_TransmitReceive+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	681a      	ldr	r2, [r3, #0]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800366a:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	68db      	ldr	r3, [r3, #12]
 8003670:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8003674:	d17e      	bne.n	8003774 <HAL_SPI_TransmitReceive+0x1e6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003676:	68fb      	ldr	r3, [r7, #12]
 8003678:	685b      	ldr	r3, [r3, #4]
 800367a:	2b00      	cmp	r3, #0
 800367c:	d002      	beq.n	8003684 <HAL_SPI_TransmitReceive+0xf6>
 800367e:	8afb      	ldrh	r3, [r7, #22]
 8003680:	2b01      	cmp	r3, #1
 8003682:	d16c      	bne.n	800375e <HAL_SPI_TransmitReceive+0x1d0>
    {
      hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003688:	881a      	ldrh	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003690:	68fb      	ldr	r3, [r7, #12]
 8003692:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003694:	1c9a      	adds	r2, r3, #2
 8003696:	68fb      	ldr	r3, [r7, #12]
 8003698:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800369a:	68fb      	ldr	r3, [r7, #12]
 800369c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800369e:	b29b      	uxth	r3, r3
 80036a0:	3b01      	subs	r3, #1
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80036a8:	e059      	b.n	800375e <HAL_SPI_TransmitReceive+0x1d0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80036aa:	68fb      	ldr	r3, [r7, #12]
 80036ac:	681b      	ldr	r3, [r3, #0]
 80036ae:	689b      	ldr	r3, [r3, #8]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b02      	cmp	r3, #2
 80036b6:	d11b      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x162>
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036bc:	b29b      	uxth	r3, r3
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d016      	beq.n	80036f0 <HAL_SPI_TransmitReceive+0x162>
 80036c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036c4:	2b01      	cmp	r3, #1
 80036c6:	d113      	bne.n	80036f0 <HAL_SPI_TransmitReceive+0x162>
      {
        hspi->Instance->DR = *((const uint16_t *)hspi->pTxBuffPtr);
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036cc:	881a      	ldrh	r2, [r3, #0]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80036d8:	1c9a      	adds	r2, r3, #2
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80036de:	68fb      	ldr	r3, [r7, #12]
 80036e0:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80036e2:	b29b      	uxth	r3, r3
 80036e4:	3b01      	subs	r3, #1
 80036e6:	b29a      	uxth	r2, r3
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	f003 0301 	and.w	r3, r3, #1
 80036fa:	2b01      	cmp	r3, #1
 80036fc:	d119      	bne.n	8003732 <HAL_SPI_TransmitReceive+0x1a4>
 80036fe:	68fb      	ldr	r3, [r7, #12]
 8003700:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003702:	b29b      	uxth	r3, r3
 8003704:	2b00      	cmp	r3, #0
 8003706:	d014      	beq.n	8003732 <HAL_SPI_TransmitReceive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003708:	68fb      	ldr	r3, [r7, #12]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68da      	ldr	r2, [r3, #12]
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003712:	b292      	uxth	r2, r2
 8003714:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800371a:	1c9a      	adds	r2, r3, #2
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003720:	68fb      	ldr	r3, [r7, #12]
 8003722:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003724:	b29b      	uxth	r3, r3
 8003726:	3b01      	subs	r3, #1
 8003728:	b29a      	uxth	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800372e:	2301      	movs	r3, #1
 8003730:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8003732:	f7fe feed 	bl	8002510 <HAL_GetTick>
 8003736:	4602      	mov	r2, r0
 8003738:	6a3b      	ldr	r3, [r7, #32]
 800373a:	1ad3      	subs	r3, r2, r3
 800373c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800373e:	429a      	cmp	r2, r3
 8003740:	d80d      	bhi.n	800375e <HAL_SPI_TransmitReceive+0x1d0>
 8003742:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d009      	beq.n	800375e <HAL_SPI_TransmitReceive+0x1d0>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800374a:	68fb      	ldr	r3, [r7, #12]
 800374c:	2201      	movs	r2, #1
 800374e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 8003752:	68fb      	ldr	r3, [r7, #12]
 8003754:	2200      	movs	r2, #0
 8003756:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 800375a:	2303      	movs	r3, #3
 800375c:	e0bc      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800375e:	68fb      	ldr	r3, [r7, #12]
 8003760:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003762:	b29b      	uxth	r3, r3
 8003764:	2b00      	cmp	r3, #0
 8003766:	d1a0      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x11c>
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800376c:	b29b      	uxth	r3, r3
 800376e:	2b00      	cmp	r3, #0
 8003770:	d19b      	bne.n	80036aa <HAL_SPI_TransmitReceive+0x11c>
 8003772:	e082      	b.n	800387a <HAL_SPI_TransmitReceive+0x2ec>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d002      	beq.n	8003782 <HAL_SPI_TransmitReceive+0x1f4>
 800377c:	8afb      	ldrh	r3, [r7, #22]
 800377e:	2b01      	cmp	r3, #1
 8003780:	d171      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = *((const uint8_t *)hspi->pTxBuffPtr);
 8003782:	68fb      	ldr	r3, [r7, #12]
 8003784:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	330c      	adds	r3, #12
 800378c:	7812      	ldrb	r2, [r2, #0]
 800378e:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003790:	68fb      	ldr	r3, [r7, #12]
 8003792:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003794:	1c5a      	adds	r2, r3, #1
 8003796:	68fb      	ldr	r3, [r7, #12]
 8003798:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 800379a:	68fb      	ldr	r3, [r7, #12]
 800379c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800379e:	b29b      	uxth	r3, r3
 80037a0:	3b01      	subs	r3, #1
 80037a2:	b29a      	uxth	r2, r3
 80037a4:	68fb      	ldr	r3, [r7, #12]
 80037a6:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80037a8:	e05d      	b.n	8003866 <HAL_SPI_TransmitReceive+0x2d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	689b      	ldr	r3, [r3, #8]
 80037b0:	f003 0302 	and.w	r3, r3, #2
 80037b4:	2b02      	cmp	r3, #2
 80037b6:	d11c      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x264>
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037bc:	b29b      	uxth	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d017      	beq.n	80037f2 <HAL_SPI_TransmitReceive+0x264>
 80037c2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037c4:	2b01      	cmp	r3, #1
 80037c6:	d114      	bne.n	80037f2 <HAL_SPI_TransmitReceive+0x264>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = *((const uint8_t *)hspi->pTxBuffPtr);
 80037c8:	68fb      	ldr	r3, [r7, #12]
 80037ca:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	330c      	adds	r3, #12
 80037d2:	7812      	ldrb	r2, [r2, #0]
 80037d4:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80037d6:	68fb      	ldr	r3, [r7, #12]
 80037d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80037da:	1c5a      	adds	r2, r3, #1
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80037e0:	68fb      	ldr	r3, [r7, #12]
 80037e2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80037e4:	b29b      	uxth	r3, r3
 80037e6:	3b01      	subs	r3, #1
 80037e8:	b29a      	uxth	r2, r3
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80037ee:	2300      	movs	r3, #0
 80037f0:	627b      	str	r3, [r7, #36]	@ 0x24
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80037f2:	68fb      	ldr	r3, [r7, #12]
 80037f4:	681b      	ldr	r3, [r3, #0]
 80037f6:	689b      	ldr	r3, [r3, #8]
 80037f8:	f003 0301 	and.w	r3, r3, #1
 80037fc:	2b01      	cmp	r3, #1
 80037fe:	d119      	bne.n	8003834 <HAL_SPI_TransmitReceive+0x2a6>
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003804:	b29b      	uxth	r3, r3
 8003806:	2b00      	cmp	r3, #0
 8003808:	d014      	beq.n	8003834 <HAL_SPI_TransmitReceive+0x2a6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	68da      	ldr	r2, [r3, #12]
 8003810:	68fb      	ldr	r3, [r7, #12]
 8003812:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003814:	b2d2      	uxtb	r2, r2
 8003816:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003818:	68fb      	ldr	r3, [r7, #12]
 800381a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800381c:	1c5a      	adds	r2, r3, #1
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003826:	b29b      	uxth	r3, r3
 8003828:	3b01      	subs	r3, #1
 800382a:	b29a      	uxth	r2, r3
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003830:	2301      	movs	r3, #1
 8003832:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8003834:	f7fe fe6c 	bl	8002510 <HAL_GetTick>
 8003838:	4602      	mov	r2, r0
 800383a:	6a3b      	ldr	r3, [r7, #32]
 800383c:	1ad3      	subs	r3, r2, r3
 800383e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003840:	429a      	cmp	r2, r3
 8003842:	d803      	bhi.n	800384c <HAL_SPI_TransmitReceive+0x2be>
 8003844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003846:	f1b3 3fff 	cmp.w	r3, #4294967295
 800384a:	d102      	bne.n	8003852 <HAL_SPI_TransmitReceive+0x2c4>
 800384c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800384e:	2b00      	cmp	r3, #0
 8003850:	d109      	bne.n	8003866 <HAL_SPI_TransmitReceive+0x2d8>
      {
        hspi->State = HAL_SPI_STATE_READY;
 8003852:	68fb      	ldr	r3, [r7, #12]
 8003854:	2201      	movs	r2, #1
 8003856:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        __HAL_UNLOCK(hspi);
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	2200      	movs	r2, #0
 800385e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
        return HAL_TIMEOUT;
 8003862:	2303      	movs	r3, #3
 8003864:	e038      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800386a:	b29b      	uxth	r3, r3
 800386c:	2b00      	cmp	r3, #0
 800386e:	d19c      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x21c>
 8003870:	68fb      	ldr	r3, [r7, #12]
 8003872:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003874:	b29b      	uxth	r3, r3
 8003876:	2b00      	cmp	r3, #0
 8003878:	d197      	bne.n	80037aa <HAL_SPI_TransmitReceive+0x21c>
    return HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800387a:	6a3a      	ldr	r2, [r7, #32]
 800387c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f000 f8c2 	bl	8003a08 <SPI_EndRxTxTransaction>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d008      	beq.n	800389c <HAL_SPI_TransmitReceive+0x30e>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800388a:	68fb      	ldr	r3, [r7, #12]
 800388c:	2220      	movs	r2, #32
 800388e:	655a      	str	r2, [r3, #84]	@ 0x54
    __HAL_UNLOCK(hspi);
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	2200      	movs	r2, #0
 8003894:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
    return HAL_ERROR;
 8003898:	2301      	movs	r3, #1
 800389a:	e01d      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	689b      	ldr	r3, [r3, #8]
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d10a      	bne.n	80038ba <HAL_SPI_TransmitReceive+0x32c>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80038a4:	2300      	movs	r3, #0
 80038a6:	613b      	str	r3, [r7, #16]
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	68db      	ldr	r3, [r3, #12]
 80038ae:	613b      	str	r3, [r7, #16]
 80038b0:	68fb      	ldr	r3, [r7, #12]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	689b      	ldr	r3, [r3, #8]
 80038b6:	613b      	str	r3, [r7, #16]
 80038b8:	693b      	ldr	r3, [r7, #16]
  }


  hspi->State = HAL_SPI_STATE_READY;
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	2201      	movs	r2, #1
 80038be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  /* Unlock the process */
  __HAL_UNLOCK(hspi);
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	2200      	movs	r2, #0
 80038c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <HAL_SPI_TransmitReceive+0x348>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e000      	b.n	80038d8 <HAL_SPI_TransmitReceive+0x34a>
  }
  else
  {
    return HAL_OK;
 80038d6:	2300      	movs	r3, #0
  }
}
 80038d8:	4618      	mov	r0, r3
 80038da:	3728      	adds	r7, #40	@ 0x28
 80038dc:	46bd      	mov	sp, r7
 80038de:	bd80      	pop	{r7, pc}

080038e0 <HAL_SPI_GetError>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI error code in bitmap format
  */
uint32_t HAL_SPI_GetError(const SPI_HandleTypeDef *hspi)
{
 80038e0:	b480      	push	{r7}
 80038e2:	b083      	sub	sp, #12
 80038e4:	af00      	add	r7, sp, #0
 80038e6:	6078      	str	r0, [r7, #4]
  /* Return SPI ErrorCode */
  return hspi->ErrorCode;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
}
 80038ec:	4618      	mov	r0, r3
 80038ee:	370c      	adds	r7, #12
 80038f0:	46bd      	mov	sp, r7
 80038f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038f6:	4770      	bx	lr

080038f8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af00      	add	r7, sp, #0
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	60b9      	str	r1, [r7, #8]
 8003902:	603b      	str	r3, [r7, #0]
 8003904:	4613      	mov	r3, r2
 8003906:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8003908:	f7fe fe02 	bl	8002510 <HAL_GetTick>
 800390c:	4602      	mov	r2, r0
 800390e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003910:	1a9b      	subs	r3, r3, r2
 8003912:	683a      	ldr	r2, [r7, #0]
 8003914:	4413      	add	r3, r2
 8003916:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8003918:	f7fe fdfa 	bl	8002510 <HAL_GetTick>
 800391c:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800391e:	4b39      	ldr	r3, [pc, #228]	@ (8003a04 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003920:	681b      	ldr	r3, [r3, #0]
 8003922:	015b      	lsls	r3, r3, #5
 8003924:	0d1b      	lsrs	r3, r3, #20
 8003926:	69fa      	ldr	r2, [r7, #28]
 8003928:	fb02 f303 	mul.w	r3, r2, r3
 800392c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800392e:	e055      	b.n	80039dc <SPI_WaitFlagStateUntilTimeout+0xe4>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003930:	683b      	ldr	r3, [r7, #0]
 8003932:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003936:	d051      	beq.n	80039dc <SPI_WaitFlagStateUntilTimeout+0xe4>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003938:	f7fe fdea 	bl	8002510 <HAL_GetTick>
 800393c:	4602      	mov	r2, r0
 800393e:	69bb      	ldr	r3, [r7, #24]
 8003940:	1ad3      	subs	r3, r2, r3
 8003942:	69fa      	ldr	r2, [r7, #28]
 8003944:	429a      	cmp	r2, r3
 8003946:	d902      	bls.n	800394e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003948:	69fb      	ldr	r3, [r7, #28]
 800394a:	2b00      	cmp	r3, #0
 800394c:	d13d      	bne.n	80039ca <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	681b      	ldr	r3, [r3, #0]
 8003952:	685a      	ldr	r2, [r3, #4]
 8003954:	68fb      	ldr	r3, [r7, #12]
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800395c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	685b      	ldr	r3, [r3, #4]
 8003962:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003966:	d111      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	689b      	ldr	r3, [r3, #8]
 800396c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003970:	d004      	beq.n	800397c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003972:	68fb      	ldr	r3, [r7, #12]
 8003974:	689b      	ldr	r3, [r3, #8]
 8003976:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800397a:	d107      	bne.n	800398c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	681b      	ldr	r3, [r3, #0]
 8003980:	681a      	ldr	r2, [r3, #0]
 8003982:	68fb      	ldr	r3, [r7, #12]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800398a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003990:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003994:	d10f      	bne.n	80039b6 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	681a      	ldr	r2, [r3, #0]
 800399c:	68fb      	ldr	r3, [r7, #12]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80039a4:	601a      	str	r2, [r3, #0]
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	681b      	ldr	r3, [r3, #0]
 80039aa:	681a      	ldr	r2, [r3, #0]
 80039ac:	68fb      	ldr	r3, [r7, #12]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80039b4:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2201      	movs	r2, #1
 80039ba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	2200      	movs	r2, #0
 80039c2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80039c6:	2303      	movs	r3, #3
 80039c8:	e018      	b.n	80039fc <SPI_WaitFlagStateUntilTimeout+0x104>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80039ca:	697b      	ldr	r3, [r7, #20]
 80039cc:	2b00      	cmp	r3, #0
 80039ce:	d102      	bne.n	80039d6 <SPI_WaitFlagStateUntilTimeout+0xde>
      {
        tmp_timeout = 0U;
 80039d0:	2300      	movs	r3, #0
 80039d2:	61fb      	str	r3, [r7, #28]
 80039d4:	e002      	b.n	80039dc <SPI_WaitFlagStateUntilTimeout+0xe4>
      }
      else
      {
        count--;
 80039d6:	697b      	ldr	r3, [r7, #20]
 80039d8:	3b01      	subs	r3, #1
 80039da:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	689a      	ldr	r2, [r3, #8]
 80039e2:	68bb      	ldr	r3, [r7, #8]
 80039e4:	4013      	ands	r3, r2
 80039e6:	68ba      	ldr	r2, [r7, #8]
 80039e8:	429a      	cmp	r2, r3
 80039ea:	bf0c      	ite	eq
 80039ec:	2301      	moveq	r3, #1
 80039ee:	2300      	movne	r3, #0
 80039f0:	b2db      	uxtb	r3, r3
 80039f2:	461a      	mov	r2, r3
 80039f4:	79fb      	ldrb	r3, [r7, #7]
 80039f6:	429a      	cmp	r2, r3
 80039f8:	d19a      	bne.n	8003930 <SPI_WaitFlagStateUntilTimeout+0x38>
      }
    }
  }

  return HAL_OK;
 80039fa:	2300      	movs	r3, #0
}
 80039fc:	4618      	mov	r0, r3
 80039fe:	3720      	adds	r7, #32
 8003a00:	46bd      	mov	sp, r7
 8003a02:	bd80      	pop	{r7, pc}
 8003a04:	20000000 	.word	0x20000000

08003a08 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b088      	sub	sp, #32
 8003a0c:	af02      	add	r7, sp, #8
 8003a0e:	60f8      	str	r0, [r7, #12]
 8003a10:	60b9      	str	r1, [r7, #8]
 8003a12:	607a      	str	r2, [r7, #4]
  __IO uint32_t count;

  /* Wait until TXE flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	68bb      	ldr	r3, [r7, #8]
 8003a1a:	2201      	movs	r2, #1
 8003a1c:	2102      	movs	r1, #2
 8003a1e:	68f8      	ldr	r0, [r7, #12]
 8003a20:	f7ff ff6a 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003a24:	4603      	mov	r3, r0
 8003a26:	2b00      	cmp	r3, #0
 8003a28:	d007      	beq.n	8003a3a <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a2e:	f043 0220 	orr.w	r2, r3, #32
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 8003a36:	2303      	movs	r3, #3
 8003a38:	e032      	b.n	8003aa0 <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in us */
  count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8003a3a:	4b1b      	ldr	r3, [pc, #108]	@ (8003aa8 <SPI_EndRxTxTransaction+0xa0>)
 8003a3c:	681b      	ldr	r3, [r3, #0]
 8003a3e:	4a1b      	ldr	r2, [pc, #108]	@ (8003aac <SPI_EndRxTxTransaction+0xa4>)
 8003a40:	fba2 2303 	umull	r2, r3, r2, r3
 8003a44:	0d5b      	lsrs	r3, r3, #21
 8003a46:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 8003a4a:	fb02 f303 	mul.w	r3, r2, r3
 8003a4e:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	685b      	ldr	r3, [r3, #4]
 8003a54:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003a58:	d112      	bne.n	8003a80 <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	9300      	str	r3, [sp, #0]
 8003a5e:	68bb      	ldr	r3, [r7, #8]
 8003a60:	2200      	movs	r2, #0
 8003a62:	2180      	movs	r1, #128	@ 0x80
 8003a64:	68f8      	ldr	r0, [r7, #12]
 8003a66:	f7ff ff47 	bl	80038f8 <SPI_WaitFlagStateUntilTimeout>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	2b00      	cmp	r3, #0
 8003a6e:	d016      	beq.n	8003a9e <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003a70:	68fb      	ldr	r3, [r7, #12]
 8003a72:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003a74:	f043 0220 	orr.w	r2, r3, #32
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003a7c:	2303      	movs	r3, #3
 8003a7e:	e00f      	b.n	8003aa0 <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8003a80:	697b      	ldr	r3, [r7, #20]
 8003a82:	2b00      	cmp	r3, #0
 8003a84:	d00a      	beq.n	8003a9c <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003a86:	697b      	ldr	r3, [r7, #20]
 8003a88:	3b01      	subs	r3, #1
 8003a8a:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	689b      	ldr	r3, [r3, #8]
 8003a92:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003a96:	2b80      	cmp	r3, #128	@ 0x80
 8003a98:	d0f2      	beq.n	8003a80 <SPI_EndRxTxTransaction+0x78>
 8003a9a:	e000      	b.n	8003a9e <SPI_EndRxTxTransaction+0x96>
        break;
 8003a9c:	bf00      	nop
  }

  return HAL_OK;
 8003a9e:	2300      	movs	r3, #0
}
 8003aa0:	4618      	mov	r0, r3
 8003aa2:	3718      	adds	r7, #24
 8003aa4:	46bd      	mov	sp, r7
 8003aa6:	bd80      	pop	{r7, pc}
 8003aa8:	20000000 	.word	0x20000000
 8003aac:	165e9f81 	.word	0x165e9f81

08003ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	b082      	sub	sp, #8
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2b00      	cmp	r3, #0
 8003abc:	d101      	bne.n	8003ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003abe:	2301      	movs	r3, #1
 8003ac0:	e041      	b.n	8003b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ac8:	b2db      	uxtb	r3, r3
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d106      	bne.n	8003adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2200      	movs	r2, #0
 8003ad2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ad6:	6878      	ldr	r0, [r7, #4]
 8003ad8:	f000 f839 	bl	8003b4e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2202      	movs	r2, #2
 8003ae0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681a      	ldr	r2, [r3, #0]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	3304      	adds	r3, #4
 8003aec:	4619      	mov	r1, r3
 8003aee:	4610      	mov	r0, r2
 8003af0:	f000 f9c0 	bl	8003e74 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b3c:	687b      	ldr	r3, [r7, #4]
 8003b3e:	2201      	movs	r2, #1
 8003b40:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003b44:	2300      	movs	r3, #0
}
 8003b46:	4618      	mov	r0, r3
 8003b48:	3708      	adds	r7, #8
 8003b4a:	46bd      	mov	sp, r7
 8003b4c:	bd80      	pop	{r7, pc}

08003b4e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 8003b4e:	b480      	push	{r7}
 8003b50:	b083      	sub	sp, #12
 8003b52:	af00      	add	r7, sp, #0
 8003b54:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 8003b56:	bf00      	nop
 8003b58:	370c      	adds	r7, #12
 8003b5a:	46bd      	mov	sp, r7
 8003b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b60:	4770      	bx	lr
	...

08003b64 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003b64:	b480      	push	{r7}
 8003b66:	b085      	sub	sp, #20
 8003b68:	af00      	add	r7, sp, #0
 8003b6a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b72:	b2db      	uxtb	r3, r3
 8003b74:	2b01      	cmp	r3, #1
 8003b76:	d001      	beq.n	8003b7c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003b78:	2301      	movs	r3, #1
 8003b7a:	e04e      	b.n	8003c1a <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2202      	movs	r2, #2
 8003b80:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	68da      	ldr	r2, [r3, #12]
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	f042 0201 	orr.w	r2, r2, #1
 8003b92:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	4a23      	ldr	r2, [pc, #140]	@ (8003c28 <HAL_TIM_Base_Start_IT+0xc4>)
 8003b9a:	4293      	cmp	r3, r2
 8003b9c:	d022      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ba6:	d01d      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a1f      	ldr	r2, [pc, #124]	@ (8003c2c <HAL_TIM_Base_Start_IT+0xc8>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d018      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	4a1e      	ldr	r2, [pc, #120]	@ (8003c30 <HAL_TIM_Base_Start_IT+0xcc>)
 8003bb8:	4293      	cmp	r3, r2
 8003bba:	d013      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	4a1c      	ldr	r2, [pc, #112]	@ (8003c34 <HAL_TIM_Base_Start_IT+0xd0>)
 8003bc2:	4293      	cmp	r3, r2
 8003bc4:	d00e      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003bc6:	687b      	ldr	r3, [r7, #4]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	4a1b      	ldr	r2, [pc, #108]	@ (8003c38 <HAL_TIM_Base_Start_IT+0xd4>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d009      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	4a19      	ldr	r2, [pc, #100]	@ (8003c3c <HAL_TIM_Base_Start_IT+0xd8>)
 8003bd6:	4293      	cmp	r3, r2
 8003bd8:	d004      	beq.n	8003be4 <HAL_TIM_Base_Start_IT+0x80>
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	681b      	ldr	r3, [r3, #0]
 8003bde:	4a18      	ldr	r2, [pc, #96]	@ (8003c40 <HAL_TIM_Base_Start_IT+0xdc>)
 8003be0:	4293      	cmp	r3, r2
 8003be2:	d111      	bne.n	8003c08 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	689b      	ldr	r3, [r3, #8]
 8003bea:	f003 0307 	and.w	r3, r3, #7
 8003bee:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b06      	cmp	r3, #6
 8003bf4:	d010      	beq.n	8003c18 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	681b      	ldr	r3, [r3, #0]
 8003bfa:	681a      	ldr	r2, [r3, #0]
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f042 0201 	orr.w	r2, r2, #1
 8003c04:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c06:	e007      	b.n	8003c18 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	681b      	ldr	r3, [r3, #0]
 8003c0c:	681a      	ldr	r2, [r3, #0]
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	f042 0201 	orr.w	r2, r2, #1
 8003c16:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003c18:	2300      	movs	r3, #0
}
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	3714      	adds	r7, #20
 8003c1e:	46bd      	mov	sp, r7
 8003c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c24:	4770      	bx	lr
 8003c26:	bf00      	nop
 8003c28:	40010000 	.word	0x40010000
 8003c2c:	40000400 	.word	0x40000400
 8003c30:	40000800 	.word	0x40000800
 8003c34:	40000c00 	.word	0x40000c00
 8003c38:	40010400 	.word	0x40010400
 8003c3c:	40014000 	.word	0x40014000
 8003c40:	40001800 	.word	0x40001800

08003c44 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c44:	b580      	push	{r7, lr}
 8003c46:	b084      	sub	sp, #16
 8003c48:	af00      	add	r7, sp, #0
 8003c4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	691b      	ldr	r3, [r3, #16]
 8003c5a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	f003 0302 	and.w	r3, r3, #2
 8003c62:	2b00      	cmp	r3, #0
 8003c64:	d020      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	f003 0302 	and.w	r3, r3, #2
 8003c6c:	2b00      	cmp	r3, #0
 8003c6e:	d01b      	beq.n	8003ca8 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	f06f 0202 	mvn.w	r2, #2
 8003c78:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	2201      	movs	r2, #1
 8003c7e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	699b      	ldr	r3, [r3, #24]
 8003c86:	f003 0303 	and.w	r3, r3, #3
 8003c8a:	2b00      	cmp	r3, #0
 8003c8c:	d003      	beq.n	8003c96 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c8e:	6878      	ldr	r0, [r7, #4]
 8003c90:	f000 f8d2 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003c94:	e005      	b.n	8003ca2 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c96:	6878      	ldr	r0, [r7, #4]
 8003c98:	f000 f8c4 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f000 f8d5 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	2200      	movs	r2, #0
 8003ca6:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 8003ca8:	68bb      	ldr	r3, [r7, #8]
 8003caa:	f003 0304 	and.w	r3, r3, #4
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d020      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8003cb2:	68fb      	ldr	r3, [r7, #12]
 8003cb4:	f003 0304 	and.w	r3, r3, #4
 8003cb8:	2b00      	cmp	r3, #0
 8003cba:	d01b      	beq.n	8003cf4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	f06f 0204 	mvn.w	r2, #4
 8003cc4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	2202      	movs	r2, #2
 8003cca:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	699b      	ldr	r3, [r3, #24]
 8003cd2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d003      	beq.n	8003ce2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003cda:	6878      	ldr	r0, [r7, #4]
 8003cdc:	f000 f8ac 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003ce0:	e005      	b.n	8003cee <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003ce2:	6878      	ldr	r0, [r7, #4]
 8003ce4:	f000 f89e 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ce8:	6878      	ldr	r0, [r7, #4]
 8003cea:	f000 f8af 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8003cf4:	68bb      	ldr	r3, [r7, #8]
 8003cf6:	f003 0308 	and.w	r3, r3, #8
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	d020      	beq.n	8003d40 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	f003 0308 	and.w	r3, r3, #8
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d01b      	beq.n	8003d40 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	681b      	ldr	r3, [r3, #0]
 8003d0c:	f06f 0208 	mvn.w	r2, #8
 8003d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2204      	movs	r2, #4
 8003d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	69db      	ldr	r3, [r3, #28]
 8003d1e:	f003 0303 	and.w	r3, r3, #3
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d003      	beq.n	8003d2e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d26:	6878      	ldr	r0, [r7, #4]
 8003d28:	f000 f886 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003d2c:	e005      	b.n	8003d3a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d2e:	6878      	ldr	r0, [r7, #4]
 8003d30:	f000 f878 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d34:	6878      	ldr	r0, [r7, #4]
 8003d36:	f000 f889 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d3a:	687b      	ldr	r3, [r7, #4]
 8003d3c:	2200      	movs	r2, #0
 8003d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003d40:	68bb      	ldr	r3, [r7, #8]
 8003d42:	f003 0310 	and.w	r3, r3, #16
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d020      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	f003 0310 	and.w	r3, r3, #16
 8003d50:	2b00      	cmp	r3, #0
 8003d52:	d01b      	beq.n	8003d8c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	f06f 0210 	mvn.w	r2, #16
 8003d5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d5e:	687b      	ldr	r3, [r7, #4]
 8003d60:	2208      	movs	r2, #8
 8003d62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	69db      	ldr	r3, [r3, #28]
 8003d6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d6e:	2b00      	cmp	r3, #0
 8003d70:	d003      	beq.n	8003d7a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d72:	6878      	ldr	r0, [r7, #4]
 8003d74:	f000 f860 	bl	8003e38 <HAL_TIM_IC_CaptureCallback>
 8003d78:	e005      	b.n	8003d86 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f852 	bl	8003e24 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d80:	6878      	ldr	r0, [r7, #4]
 8003d82:	f000 f863 	bl	8003e4c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	2200      	movs	r2, #0
 8003d8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 8003d8c:	68bb      	ldr	r3, [r7, #8]
 8003d8e:	f003 0301 	and.w	r3, r3, #1
 8003d92:	2b00      	cmp	r3, #0
 8003d94:	d00c      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	f003 0301 	and.w	r3, r3, #1
 8003d9c:	2b00      	cmp	r3, #0
 8003d9e:	d007      	beq.n	8003db0 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	f06f 0201 	mvn.w	r2, #1
 8003da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7fd f994 	bl	80010d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8003db0:	68bb      	ldr	r3, [r7, #8]
 8003db2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003db6:	2b00      	cmp	r3, #0
 8003db8:	d00c      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003dc0:	2b00      	cmp	r3, #0
 8003dc2:	d007      	beq.n	8003dd4 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003dcc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f000 f900 	bl	8003fd4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8003dd4:	68bb      	ldr	r3, [r7, #8]
 8003dd6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d00c      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003dde:	68fb      	ldr	r3, [r7, #12]
 8003de0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d007      	beq.n	8003df8 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003df0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003df2:	6878      	ldr	r0, [r7, #4]
 8003df4:	f000 f834 	bl	8003e60 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003df8:	68bb      	ldr	r3, [r7, #8]
 8003dfa:	f003 0320 	and.w	r3, r3, #32
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	d00c      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	f003 0320 	and.w	r3, r3, #32
 8003e08:	2b00      	cmp	r3, #0
 8003e0a:	d007      	beq.n	8003e1c <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	f06f 0220 	mvn.w	r2, #32
 8003e14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f000 f8d2 	bl	8003fc0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e1c:	bf00      	nop
 8003e1e:	3710      	adds	r7, #16
 8003e20:	46bd      	mov	sp, r7
 8003e22:	bd80      	pop	{r7, pc}

08003e24 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003e24:	b480      	push	{r7}
 8003e26:	b083      	sub	sp, #12
 8003e28:	af00      	add	r7, sp, #0
 8003e2a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003e2c:	bf00      	nop
 8003e2e:	370c      	adds	r7, #12
 8003e30:	46bd      	mov	sp, r7
 8003e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e36:	4770      	bx	lr

08003e38 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003e38:	b480      	push	{r7}
 8003e3a:	b083      	sub	sp, #12
 8003e3c:	af00      	add	r7, sp, #0
 8003e3e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003e40:	bf00      	nop
 8003e42:	370c      	adds	r7, #12
 8003e44:	46bd      	mov	sp, r7
 8003e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4a:	4770      	bx	lr

08003e4c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003e4c:	b480      	push	{r7}
 8003e4e:	b083      	sub	sp, #12
 8003e50:	af00      	add	r7, sp, #0
 8003e52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003e54:	bf00      	nop
 8003e56:	370c      	adds	r7, #12
 8003e58:	46bd      	mov	sp, r7
 8003e5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e5e:	4770      	bx	lr

08003e60 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003e60:	b480      	push	{r7}
 8003e62:	b083      	sub	sp, #12
 8003e64:	af00      	add	r7, sp, #0
 8003e66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003e68:	bf00      	nop
 8003e6a:	370c      	adds	r7, #12
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003e74:	b480      	push	{r7}
 8003e76:	b085      	sub	sp, #20
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	681b      	ldr	r3, [r3, #0]
 8003e82:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	4a43      	ldr	r2, [pc, #268]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003e88:	4293      	cmp	r3, r2
 8003e8a:	d013      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e92:	d00f      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	4a40      	ldr	r2, [pc, #256]	@ (8003f98 <TIM_Base_SetConfig+0x124>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d00b      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	4a3f      	ldr	r2, [pc, #252]	@ (8003f9c <TIM_Base_SetConfig+0x128>)
 8003ea0:	4293      	cmp	r3, r2
 8003ea2:	d007      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	4a3e      	ldr	r2, [pc, #248]	@ (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d003      	beq.n	8003eb4 <TIM_Base_SetConfig+0x40>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	4a3d      	ldr	r2, [pc, #244]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d108      	bne.n	8003ec6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003eba:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	685b      	ldr	r3, [r3, #4]
 8003ec0:	68fa      	ldr	r2, [r7, #12]
 8003ec2:	4313      	orrs	r3, r2
 8003ec4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	4a32      	ldr	r2, [pc, #200]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d02b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ed4:	d027      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	4a2f      	ldr	r2, [pc, #188]	@ (8003f98 <TIM_Base_SetConfig+0x124>)
 8003eda:	4293      	cmp	r3, r2
 8003edc:	d023      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4a2e      	ldr	r2, [pc, #184]	@ (8003f9c <TIM_Base_SetConfig+0x128>)
 8003ee2:	4293      	cmp	r3, r2
 8003ee4:	d01f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	4a2d      	ldr	r2, [pc, #180]	@ (8003fa0 <TIM_Base_SetConfig+0x12c>)
 8003eea:	4293      	cmp	r3, r2
 8003eec:	d01b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	4a2c      	ldr	r2, [pc, #176]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003ef2:	4293      	cmp	r3, r2
 8003ef4:	d017      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003ef6:	687b      	ldr	r3, [r7, #4]
 8003ef8:	4a2b      	ldr	r2, [pc, #172]	@ (8003fa8 <TIM_Base_SetConfig+0x134>)
 8003efa:	4293      	cmp	r3, r2
 8003efc:	d013      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	4a2a      	ldr	r2, [pc, #168]	@ (8003fac <TIM_Base_SetConfig+0x138>)
 8003f02:	4293      	cmp	r3, r2
 8003f04:	d00f      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	4a29      	ldr	r2, [pc, #164]	@ (8003fb0 <TIM_Base_SetConfig+0x13c>)
 8003f0a:	4293      	cmp	r3, r2
 8003f0c:	d00b      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	4a28      	ldr	r2, [pc, #160]	@ (8003fb4 <TIM_Base_SetConfig+0x140>)
 8003f12:	4293      	cmp	r3, r2
 8003f14:	d007      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	4a27      	ldr	r2, [pc, #156]	@ (8003fb8 <TIM_Base_SetConfig+0x144>)
 8003f1a:	4293      	cmp	r3, r2
 8003f1c:	d003      	beq.n	8003f26 <TIM_Base_SetConfig+0xb2>
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	4a26      	ldr	r2, [pc, #152]	@ (8003fbc <TIM_Base_SetConfig+0x148>)
 8003f22:	4293      	cmp	r3, r2
 8003f24:	d108      	bne.n	8003f38 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003f2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003f2e:	683b      	ldr	r3, [r7, #0]
 8003f30:	68db      	ldr	r3, [r3, #12]
 8003f32:	68fa      	ldr	r2, [r7, #12]
 8003f34:	4313      	orrs	r3, r2
 8003f36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003f3e:	683b      	ldr	r3, [r7, #0]
 8003f40:	695b      	ldr	r3, [r3, #20]
 8003f42:	4313      	orrs	r3, r2
 8003f44:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003f46:	683b      	ldr	r3, [r7, #0]
 8003f48:	689a      	ldr	r2, [r3, #8]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003f4e:	683b      	ldr	r3, [r7, #0]
 8003f50:	681a      	ldr	r2, [r3, #0]
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	4a0e      	ldr	r2, [pc, #56]	@ (8003f94 <TIM_Base_SetConfig+0x120>)
 8003f5a:	4293      	cmp	r3, r2
 8003f5c:	d003      	beq.n	8003f66 <TIM_Base_SetConfig+0xf2>
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	4a10      	ldr	r2, [pc, #64]	@ (8003fa4 <TIM_Base_SetConfig+0x130>)
 8003f62:	4293      	cmp	r3, r2
 8003f64:	d103      	bne.n	8003f6e <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003f66:	683b      	ldr	r3, [r7, #0]
 8003f68:	691a      	ldr	r2, [r3, #16]
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f043 0204 	orr.w	r2, r3, #4
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003f7a:	687b      	ldr	r3, [r7, #4]
 8003f7c:	2201      	movs	r2, #1
 8003f7e:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	68fa      	ldr	r2, [r7, #12]
 8003f84:	601a      	str	r2, [r3, #0]
}
 8003f86:	bf00      	nop
 8003f88:	3714      	adds	r7, #20
 8003f8a:	46bd      	mov	sp, r7
 8003f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f90:	4770      	bx	lr
 8003f92:	bf00      	nop
 8003f94:	40010000 	.word	0x40010000
 8003f98:	40000400 	.word	0x40000400
 8003f9c:	40000800 	.word	0x40000800
 8003fa0:	40000c00 	.word	0x40000c00
 8003fa4:	40010400 	.word	0x40010400
 8003fa8:	40014000 	.word	0x40014000
 8003fac:	40014400 	.word	0x40014400
 8003fb0:	40014800 	.word	0x40014800
 8003fb4:	40001800 	.word	0x40001800
 8003fb8:	40001c00 	.word	0x40001c00
 8003fbc:	40002000 	.word	0x40002000

08003fc0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003fc0:	b480      	push	{r7}
 8003fc2:	b083      	sub	sp, #12
 8003fc4:	af00      	add	r7, sp, #0
 8003fc6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003fc8:	bf00      	nop
 8003fca:	370c      	adds	r7, #12
 8003fcc:	46bd      	mov	sp, r7
 8003fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003fe6:	4770      	bx	lr

08003fe8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003fe8:	b580      	push	{r7, lr}
 8003fea:	b082      	sub	sp, #8
 8003fec:	af00      	add	r7, sp, #0
 8003fee:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	2b00      	cmp	r3, #0
 8003ff4:	d101      	bne.n	8003ffa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003ff6:	2301      	movs	r3, #1
 8003ff8:	e042      	b.n	8004080 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d106      	bne.n	8004014 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2200      	movs	r2, #0
 800400a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800400e:	6878      	ldr	r0, [r7, #4]
 8004010:	f7fe f898 	bl	8002144 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	2224      	movs	r2, #36	@ 0x24
 8004018:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	68da      	ldr	r2, [r3, #12]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800402a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800402c:	6878      	ldr	r0, [r7, #4]
 800402e:	f000 f973 	bl	8004318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	691a      	ldr	r2, [r3, #16]
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8004040:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	681b      	ldr	r3, [r3, #0]
 8004046:	695a      	ldr	r2, [r3, #20]
 8004048:	687b      	ldr	r3, [r7, #4]
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8004050:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	68da      	ldr	r2, [r3, #12]
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8004060:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	2200      	movs	r2, #0
 8004066:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	2220      	movs	r2, #32
 800406c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	2220      	movs	r2, #32
 8004074:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	2200      	movs	r2, #0
 800407c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 800407e:	2300      	movs	r3, #0
}
 8004080:	4618      	mov	r0, r3
 8004082:	3708      	adds	r7, #8
 8004084:	46bd      	mov	sp, r7
 8004086:	bd80      	pop	{r7, pc}

08004088 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004088:	b580      	push	{r7, lr}
 800408a:	b08a      	sub	sp, #40	@ 0x28
 800408c:	af02      	add	r7, sp, #8
 800408e:	60f8      	str	r0, [r7, #12]
 8004090:	60b9      	str	r1, [r7, #8]
 8004092:	603b      	str	r3, [r7, #0]
 8004094:	4613      	mov	r3, r2
 8004096:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004098:	2300      	movs	r3, #0
 800409a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80040a2:	b2db      	uxtb	r3, r3
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d175      	bne.n	8004194 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80040a8:	68bb      	ldr	r3, [r7, #8]
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d002      	beq.n	80040b4 <HAL_UART_Transmit+0x2c>
 80040ae:	88fb      	ldrh	r3, [r7, #6]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d101      	bne.n	80040b8 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80040b4:	2301      	movs	r3, #1
 80040b6:	e06e      	b.n	8004196 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	2200      	movs	r2, #0
 80040bc:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2221      	movs	r2, #33	@ 0x21
 80040c2:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80040c6:	f7fe fa23 	bl	8002510 <HAL_GetTick>
 80040ca:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	88fa      	ldrh	r2, [r7, #6]
 80040d0:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	88fa      	ldrh	r2, [r7, #6]
 80040d6:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	689b      	ldr	r3, [r3, #8]
 80040dc:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80040e0:	d108      	bne.n	80040f4 <HAL_UART_Transmit+0x6c>
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	691b      	ldr	r3, [r3, #16]
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d104      	bne.n	80040f4 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 80040ea:	2300      	movs	r3, #0
 80040ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80040ee:	68bb      	ldr	r3, [r7, #8]
 80040f0:	61bb      	str	r3, [r7, #24]
 80040f2:	e003      	b.n	80040fc <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 80040f4:	68bb      	ldr	r3, [r7, #8]
 80040f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80040f8:	2300      	movs	r3, #0
 80040fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80040fc:	e02e      	b.n	800415c <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80040fe:	683b      	ldr	r3, [r7, #0]
 8004100:	9300      	str	r3, [sp, #0]
 8004102:	697b      	ldr	r3, [r7, #20]
 8004104:	2200      	movs	r2, #0
 8004106:	2180      	movs	r1, #128	@ 0x80
 8004108:	68f8      	ldr	r0, [r7, #12]
 800410a:	f000 f848 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 800410e:	4603      	mov	r3, r0
 8004110:	2b00      	cmp	r3, #0
 8004112:	d005      	beq.n	8004120 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	2220      	movs	r2, #32
 8004118:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 800411c:	2303      	movs	r3, #3
 800411e:	e03a      	b.n	8004196 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004120:	69fb      	ldr	r3, [r7, #28]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d10b      	bne.n	800413e <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8004126:	69bb      	ldr	r3, [r7, #24]
 8004128:	881b      	ldrh	r3, [r3, #0]
 800412a:	461a      	mov	r2, r3
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	681b      	ldr	r3, [r3, #0]
 8004130:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004134:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8004136:	69bb      	ldr	r3, [r7, #24]
 8004138:	3302      	adds	r3, #2
 800413a:	61bb      	str	r3, [r7, #24]
 800413c:	e007      	b.n	800414e <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800413e:	69fb      	ldr	r3, [r7, #28]
 8004140:	781a      	ldrb	r2, [r3, #0]
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8004148:	69fb      	ldr	r3, [r7, #28]
 800414a:	3301      	adds	r3, #1
 800414c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800414e:	68fb      	ldr	r3, [r7, #12]
 8004150:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004152:	b29b      	uxth	r3, r3
 8004154:	3b01      	subs	r3, #1
 8004156:	b29a      	uxth	r2, r3
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004160:	b29b      	uxth	r3, r3
 8004162:	2b00      	cmp	r3, #0
 8004164:	d1cb      	bne.n	80040fe <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	9300      	str	r3, [sp, #0]
 800416a:	697b      	ldr	r3, [r7, #20]
 800416c:	2200      	movs	r2, #0
 800416e:	2140      	movs	r1, #64	@ 0x40
 8004170:	68f8      	ldr	r0, [r7, #12]
 8004172:	f000 f814 	bl	800419e <UART_WaitOnFlagUntilTimeout>
 8004176:	4603      	mov	r3, r0
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 800417c:	68fb      	ldr	r3, [r7, #12]
 800417e:	2220      	movs	r2, #32
 8004180:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004184:	2303      	movs	r3, #3
 8004186:	e006      	b.n	8004196 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2220      	movs	r2, #32
 800418c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004190:	2300      	movs	r3, #0
 8004192:	e000      	b.n	8004196 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004194:	2302      	movs	r3, #2
  }
}
 8004196:	4618      	mov	r0, r3
 8004198:	3720      	adds	r7, #32
 800419a:	46bd      	mov	sp, r7
 800419c:	bd80      	pop	{r7, pc}

0800419e <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800419e:	b580      	push	{r7, lr}
 80041a0:	b086      	sub	sp, #24
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	60f8      	str	r0, [r7, #12]
 80041a6:	60b9      	str	r1, [r7, #8]
 80041a8:	603b      	str	r3, [r7, #0]
 80041aa:	4613      	mov	r3, r2
 80041ac:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80041ae:	e03b      	b.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80041b0:	6a3b      	ldr	r3, [r7, #32]
 80041b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80041b6:	d037      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80041b8:	f7fe f9aa 	bl	8002510 <HAL_GetTick>
 80041bc:	4602      	mov	r2, r0
 80041be:	683b      	ldr	r3, [r7, #0]
 80041c0:	1ad3      	subs	r3, r2, r3
 80041c2:	6a3a      	ldr	r2, [r7, #32]
 80041c4:	429a      	cmp	r2, r3
 80041c6:	d302      	bcc.n	80041ce <UART_WaitOnFlagUntilTimeout+0x30>
 80041c8:	6a3b      	ldr	r3, [r7, #32]
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d101      	bne.n	80041d2 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 80041ce:	2303      	movs	r3, #3
 80041d0:	e03a      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	68db      	ldr	r3, [r3, #12]
 80041d8:	f003 0304 	and.w	r3, r3, #4
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d023      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041e0:	68bb      	ldr	r3, [r7, #8]
 80041e2:	2b80      	cmp	r3, #128	@ 0x80
 80041e4:	d020      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	2b40      	cmp	r3, #64	@ 0x40
 80041ea:	d01d      	beq.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f003 0308 	and.w	r3, r3, #8
 80041f6:	2b08      	cmp	r3, #8
 80041f8:	d116      	bne.n	8004228 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80041fa:	2300      	movs	r3, #0
 80041fc:	617b      	str	r3, [r7, #20]
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	681b      	ldr	r3, [r3, #0]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	617b      	str	r3, [r7, #20]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	617b      	str	r3, [r7, #20]
 800420e:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004210:	68f8      	ldr	r0, [r7, #12]
 8004212:	f000 f81d 	bl	8004250 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	2208      	movs	r2, #8
 800421a:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	2200      	movs	r2, #0
 8004220:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004224:	2301      	movs	r3, #1
 8004226:	e00f      	b.n	8004248 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	681a      	ldr	r2, [r3, #0]
 800422e:	68bb      	ldr	r3, [r7, #8]
 8004230:	4013      	ands	r3, r2
 8004232:	68ba      	ldr	r2, [r7, #8]
 8004234:	429a      	cmp	r2, r3
 8004236:	bf0c      	ite	eq
 8004238:	2301      	moveq	r3, #1
 800423a:	2300      	movne	r3, #0
 800423c:	b2db      	uxtb	r3, r3
 800423e:	461a      	mov	r2, r3
 8004240:	79fb      	ldrb	r3, [r7, #7]
 8004242:	429a      	cmp	r2, r3
 8004244:	d0b4      	beq.n	80041b0 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004246:	2300      	movs	r3, #0
}
 8004248:	4618      	mov	r0, r3
 800424a:	3718      	adds	r7, #24
 800424c:	46bd      	mov	sp, r7
 800424e:	bd80      	pop	{r7, pc}

08004250 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004250:	b480      	push	{r7}
 8004252:	b095      	sub	sp, #84	@ 0x54
 8004254:	af00      	add	r7, sp, #0
 8004256:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	330c      	adds	r3, #12
 800425e:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004260:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004262:	e853 3f00 	ldrex	r3, [r3]
 8004266:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004268:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800426a:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800426e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	330c      	adds	r3, #12
 8004276:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004278:	643a      	str	r2, [r7, #64]	@ 0x40
 800427a:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800427c:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800427e:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004280:	e841 2300 	strex	r3, r2, [r1]
 8004284:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004286:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004288:	2b00      	cmp	r3, #0
 800428a:	d1e5      	bne.n	8004258 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	3314      	adds	r3, #20
 8004292:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004294:	6a3b      	ldr	r3, [r7, #32]
 8004296:	e853 3f00 	ldrex	r3, [r3]
 800429a:	61fb      	str	r3, [r7, #28]
   return(result);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f023 0301 	bic.w	r3, r3, #1
 80042a2:	64bb      	str	r3, [r7, #72]	@ 0x48
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	3314      	adds	r3, #20
 80042aa:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80042ac:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80042ae:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042b0:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80042b2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80042b4:	e841 2300 	strex	r3, r2, [r1]
 80042b8:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80042ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d1e5      	bne.n	800428c <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80042c4:	2b01      	cmp	r3, #1
 80042c6:	d119      	bne.n	80042fc <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	681b      	ldr	r3, [r3, #0]
 80042cc:	330c      	adds	r3, #12
 80042ce:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80042d0:	68fb      	ldr	r3, [r7, #12]
 80042d2:	e853 3f00 	ldrex	r3, [r3]
 80042d6:	60bb      	str	r3, [r7, #8]
   return(result);
 80042d8:	68bb      	ldr	r3, [r7, #8]
 80042da:	f023 0310 	bic.w	r3, r3, #16
 80042de:	647b      	str	r3, [r7, #68]	@ 0x44
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	330c      	adds	r3, #12
 80042e6:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80042e8:	61ba      	str	r2, [r7, #24]
 80042ea:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80042ec:	6979      	ldr	r1, [r7, #20]
 80042ee:	69ba      	ldr	r2, [r7, #24]
 80042f0:	e841 2300 	strex	r3, r2, [r1]
 80042f4:	613b      	str	r3, [r7, #16]
   return(result);
 80042f6:	693b      	ldr	r3, [r7, #16]
 80042f8:	2b00      	cmp	r3, #0
 80042fa:	d1e5      	bne.n	80042c8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	2220      	movs	r2, #32
 8004300:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	2200      	movs	r2, #0
 8004308:	631a      	str	r2, [r3, #48]	@ 0x30
}
 800430a:	bf00      	nop
 800430c:	3754      	adds	r7, #84	@ 0x54
 800430e:	46bd      	mov	sp, r7
 8004310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004314:	4770      	bx	lr
	...

08004318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004318:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800431c:	b0c0      	sub	sp, #256	@ 0x100
 800431e:	af00      	add	r7, sp, #0
 8004320:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004324:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004328:	681b      	ldr	r3, [r3, #0]
 800432a:	691b      	ldr	r3, [r3, #16]
 800432c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8004330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004334:	68d9      	ldr	r1, [r3, #12]
 8004336:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800433a:	681a      	ldr	r2, [r3, #0]
 800433c:	ea40 0301 	orr.w	r3, r0, r1
 8004340:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8004342:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004346:	689a      	ldr	r2, [r3, #8]
 8004348:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800434c:	691b      	ldr	r3, [r3, #16]
 800434e:	431a      	orrs	r2, r3
 8004350:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004354:	695b      	ldr	r3, [r3, #20]
 8004356:	431a      	orrs	r2, r3
 8004358:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800435c:	69db      	ldr	r3, [r3, #28]
 800435e:	4313      	orrs	r3, r2
 8004360:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8004364:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	68db      	ldr	r3, [r3, #12]
 800436c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8004370:	f021 010c 	bic.w	r1, r1, #12
 8004374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004378:	681a      	ldr	r2, [r3, #0]
 800437a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800437e:	430b      	orrs	r3, r1
 8004380:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8004382:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800438e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004392:	6999      	ldr	r1, [r3, #24]
 8004394:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004398:	681a      	ldr	r2, [r3, #0]
 800439a:	ea40 0301 	orr.w	r3, r0, r1
 800439e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80043a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043a4:	681a      	ldr	r2, [r3, #0]
 80043a6:	4b8f      	ldr	r3, [pc, #572]	@ (80045e4 <UART_SetConfig+0x2cc>)
 80043a8:	429a      	cmp	r2, r3
 80043aa:	d005      	beq.n	80043b8 <UART_SetConfig+0xa0>
 80043ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043b0:	681a      	ldr	r2, [r3, #0]
 80043b2:	4b8d      	ldr	r3, [pc, #564]	@ (80045e8 <UART_SetConfig+0x2d0>)
 80043b4:	429a      	cmp	r2, r3
 80043b6:	d104      	bne.n	80043c2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80043b8:	f7ff f81a 	bl	80033f0 <HAL_RCC_GetPCLK2Freq>
 80043bc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80043c0:	e003      	b.n	80043ca <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80043c2:	f7ff f801 	bl	80033c8 <HAL_RCC_GetPCLK1Freq>
 80043c6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80043ca:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80043ce:	69db      	ldr	r3, [r3, #28]
 80043d0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80043d4:	f040 810c 	bne.w	80045f0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80043d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80043dc:	2200      	movs	r2, #0
 80043de:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80043e2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80043e6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80043ea:	4622      	mov	r2, r4
 80043ec:	462b      	mov	r3, r5
 80043ee:	1891      	adds	r1, r2, r2
 80043f0:	65b9      	str	r1, [r7, #88]	@ 0x58
 80043f2:	415b      	adcs	r3, r3
 80043f4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80043f6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 80043fa:	4621      	mov	r1, r4
 80043fc:	eb12 0801 	adds.w	r8, r2, r1
 8004400:	4629      	mov	r1, r5
 8004402:	eb43 0901 	adc.w	r9, r3, r1
 8004406:	f04f 0200 	mov.w	r2, #0
 800440a:	f04f 0300 	mov.w	r3, #0
 800440e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8004412:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8004416:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800441a:	4690      	mov	r8, r2
 800441c:	4699      	mov	r9, r3
 800441e:	4623      	mov	r3, r4
 8004420:	eb18 0303 	adds.w	r3, r8, r3
 8004424:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8004428:	462b      	mov	r3, r5
 800442a:	eb49 0303 	adc.w	r3, r9, r3
 800442e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8004432:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004436:	685b      	ldr	r3, [r3, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800443e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8004442:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8004446:	460b      	mov	r3, r1
 8004448:	18db      	adds	r3, r3, r3
 800444a:	653b      	str	r3, [r7, #80]	@ 0x50
 800444c:	4613      	mov	r3, r2
 800444e:	eb42 0303 	adc.w	r3, r2, r3
 8004452:	657b      	str	r3, [r7, #84]	@ 0x54
 8004454:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8004458:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800445c:	f7fb ff08 	bl	8000270 <__aeabi_uldivmod>
 8004460:	4602      	mov	r2, r0
 8004462:	460b      	mov	r3, r1
 8004464:	4b61      	ldr	r3, [pc, #388]	@ (80045ec <UART_SetConfig+0x2d4>)
 8004466:	fba3 2302 	umull	r2, r3, r3, r2
 800446a:	095b      	lsrs	r3, r3, #5
 800446c:	011c      	lsls	r4, r3, #4
 800446e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004472:	2200      	movs	r2, #0
 8004474:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004478:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800447c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8004480:	4642      	mov	r2, r8
 8004482:	464b      	mov	r3, r9
 8004484:	1891      	adds	r1, r2, r2
 8004486:	64b9      	str	r1, [r7, #72]	@ 0x48
 8004488:	415b      	adcs	r3, r3
 800448a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800448c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8004490:	4641      	mov	r1, r8
 8004492:	eb12 0a01 	adds.w	sl, r2, r1
 8004496:	4649      	mov	r1, r9
 8004498:	eb43 0b01 	adc.w	fp, r3, r1
 800449c:	f04f 0200 	mov.w	r2, #0
 80044a0:	f04f 0300 	mov.w	r3, #0
 80044a4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80044a8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80044ac:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80044b0:	4692      	mov	sl, r2
 80044b2:	469b      	mov	fp, r3
 80044b4:	4643      	mov	r3, r8
 80044b6:	eb1a 0303 	adds.w	r3, sl, r3
 80044ba:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80044be:	464b      	mov	r3, r9
 80044c0:	eb4b 0303 	adc.w	r3, fp, r3
 80044c4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80044c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80044cc:	685b      	ldr	r3, [r3, #4]
 80044ce:	2200      	movs	r2, #0
 80044d0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80044d4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80044d8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80044dc:	460b      	mov	r3, r1
 80044de:	18db      	adds	r3, r3, r3
 80044e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80044e2:	4613      	mov	r3, r2
 80044e4:	eb42 0303 	adc.w	r3, r2, r3
 80044e8:	647b      	str	r3, [r7, #68]	@ 0x44
 80044ea:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80044ee:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80044f2:	f7fb febd 	bl	8000270 <__aeabi_uldivmod>
 80044f6:	4602      	mov	r2, r0
 80044f8:	460b      	mov	r3, r1
 80044fa:	4611      	mov	r1, r2
 80044fc:	4b3b      	ldr	r3, [pc, #236]	@ (80045ec <UART_SetConfig+0x2d4>)
 80044fe:	fba3 2301 	umull	r2, r3, r3, r1
 8004502:	095b      	lsrs	r3, r3, #5
 8004504:	2264      	movs	r2, #100	@ 0x64
 8004506:	fb02 f303 	mul.w	r3, r2, r3
 800450a:	1acb      	subs	r3, r1, r3
 800450c:	00db      	lsls	r3, r3, #3
 800450e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8004512:	4b36      	ldr	r3, [pc, #216]	@ (80045ec <UART_SetConfig+0x2d4>)
 8004514:	fba3 2302 	umull	r2, r3, r3, r2
 8004518:	095b      	lsrs	r3, r3, #5
 800451a:	005b      	lsls	r3, r3, #1
 800451c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8004520:	441c      	add	r4, r3
 8004522:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004526:	2200      	movs	r2, #0
 8004528:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800452c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8004530:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8004534:	4642      	mov	r2, r8
 8004536:	464b      	mov	r3, r9
 8004538:	1891      	adds	r1, r2, r2
 800453a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800453c:	415b      	adcs	r3, r3
 800453e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8004540:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8004544:	4641      	mov	r1, r8
 8004546:	1851      	adds	r1, r2, r1
 8004548:	6339      	str	r1, [r7, #48]	@ 0x30
 800454a:	4649      	mov	r1, r9
 800454c:	414b      	adcs	r3, r1
 800454e:	637b      	str	r3, [r7, #52]	@ 0x34
 8004550:	f04f 0200 	mov.w	r2, #0
 8004554:	f04f 0300 	mov.w	r3, #0
 8004558:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800455c:	4659      	mov	r1, fp
 800455e:	00cb      	lsls	r3, r1, #3
 8004560:	4651      	mov	r1, sl
 8004562:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8004566:	4651      	mov	r1, sl
 8004568:	00ca      	lsls	r2, r1, #3
 800456a:	4610      	mov	r0, r2
 800456c:	4619      	mov	r1, r3
 800456e:	4603      	mov	r3, r0
 8004570:	4642      	mov	r2, r8
 8004572:	189b      	adds	r3, r3, r2
 8004574:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004578:	464b      	mov	r3, r9
 800457a:	460a      	mov	r2, r1
 800457c:	eb42 0303 	adc.w	r3, r2, r3
 8004580:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004584:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004588:	685b      	ldr	r3, [r3, #4]
 800458a:	2200      	movs	r2, #0
 800458c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8004590:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8004594:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8004598:	460b      	mov	r3, r1
 800459a:	18db      	adds	r3, r3, r3
 800459c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800459e:	4613      	mov	r3, r2
 80045a0:	eb42 0303 	adc.w	r3, r2, r3
 80045a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80045a6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80045aa:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80045ae:	f7fb fe5f 	bl	8000270 <__aeabi_uldivmod>
 80045b2:	4602      	mov	r2, r0
 80045b4:	460b      	mov	r3, r1
 80045b6:	4b0d      	ldr	r3, [pc, #52]	@ (80045ec <UART_SetConfig+0x2d4>)
 80045b8:	fba3 1302 	umull	r1, r3, r3, r2
 80045bc:	095b      	lsrs	r3, r3, #5
 80045be:	2164      	movs	r1, #100	@ 0x64
 80045c0:	fb01 f303 	mul.w	r3, r1, r3
 80045c4:	1ad3      	subs	r3, r2, r3
 80045c6:	00db      	lsls	r3, r3, #3
 80045c8:	3332      	adds	r3, #50	@ 0x32
 80045ca:	4a08      	ldr	r2, [pc, #32]	@ (80045ec <UART_SetConfig+0x2d4>)
 80045cc:	fba2 2303 	umull	r2, r3, r2, r3
 80045d0:	095b      	lsrs	r3, r3, #5
 80045d2:	f003 0207 	and.w	r2, r3, #7
 80045d6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	4422      	add	r2, r4
 80045de:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80045e0:	e106      	b.n	80047f0 <UART_SetConfig+0x4d8>
 80045e2:	bf00      	nop
 80045e4:	40011000 	.word	0x40011000
 80045e8:	40011400 	.word	0x40011400
 80045ec:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80045f0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80045f4:	2200      	movs	r2, #0
 80045f6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80045fa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80045fe:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8004602:	4642      	mov	r2, r8
 8004604:	464b      	mov	r3, r9
 8004606:	1891      	adds	r1, r2, r2
 8004608:	6239      	str	r1, [r7, #32]
 800460a:	415b      	adcs	r3, r3
 800460c:	627b      	str	r3, [r7, #36]	@ 0x24
 800460e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004612:	4641      	mov	r1, r8
 8004614:	1854      	adds	r4, r2, r1
 8004616:	4649      	mov	r1, r9
 8004618:	eb43 0501 	adc.w	r5, r3, r1
 800461c:	f04f 0200 	mov.w	r2, #0
 8004620:	f04f 0300 	mov.w	r3, #0
 8004624:	00eb      	lsls	r3, r5, #3
 8004626:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800462a:	00e2      	lsls	r2, r4, #3
 800462c:	4614      	mov	r4, r2
 800462e:	461d      	mov	r5, r3
 8004630:	4643      	mov	r3, r8
 8004632:	18e3      	adds	r3, r4, r3
 8004634:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8004638:	464b      	mov	r3, r9
 800463a:	eb45 0303 	adc.w	r3, r5, r3
 800463e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8004642:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004646:	685b      	ldr	r3, [r3, #4]
 8004648:	2200      	movs	r2, #0
 800464a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800464e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004652:	f04f 0200 	mov.w	r2, #0
 8004656:	f04f 0300 	mov.w	r3, #0
 800465a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800465e:	4629      	mov	r1, r5
 8004660:	008b      	lsls	r3, r1, #2
 8004662:	4621      	mov	r1, r4
 8004664:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004668:	4621      	mov	r1, r4
 800466a:	008a      	lsls	r2, r1, #2
 800466c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8004670:	f7fb fdfe 	bl	8000270 <__aeabi_uldivmod>
 8004674:	4602      	mov	r2, r0
 8004676:	460b      	mov	r3, r1
 8004678:	4b60      	ldr	r3, [pc, #384]	@ (80047fc <UART_SetConfig+0x4e4>)
 800467a:	fba3 2302 	umull	r2, r3, r3, r2
 800467e:	095b      	lsrs	r3, r3, #5
 8004680:	011c      	lsls	r4, r3, #4
 8004682:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8004686:	2200      	movs	r2, #0
 8004688:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800468c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8004690:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8004694:	4642      	mov	r2, r8
 8004696:	464b      	mov	r3, r9
 8004698:	1891      	adds	r1, r2, r2
 800469a:	61b9      	str	r1, [r7, #24]
 800469c:	415b      	adcs	r3, r3
 800469e:	61fb      	str	r3, [r7, #28]
 80046a0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80046a4:	4641      	mov	r1, r8
 80046a6:	1851      	adds	r1, r2, r1
 80046a8:	6139      	str	r1, [r7, #16]
 80046aa:	4649      	mov	r1, r9
 80046ac:	414b      	adcs	r3, r1
 80046ae:	617b      	str	r3, [r7, #20]
 80046b0:	f04f 0200 	mov.w	r2, #0
 80046b4:	f04f 0300 	mov.w	r3, #0
 80046b8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80046bc:	4659      	mov	r1, fp
 80046be:	00cb      	lsls	r3, r1, #3
 80046c0:	4651      	mov	r1, sl
 80046c2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80046c6:	4651      	mov	r1, sl
 80046c8:	00ca      	lsls	r2, r1, #3
 80046ca:	4610      	mov	r0, r2
 80046cc:	4619      	mov	r1, r3
 80046ce:	4603      	mov	r3, r0
 80046d0:	4642      	mov	r2, r8
 80046d2:	189b      	adds	r3, r3, r2
 80046d4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80046d8:	464b      	mov	r3, r9
 80046da:	460a      	mov	r2, r1
 80046dc:	eb42 0303 	adc.w	r3, r2, r3
 80046e0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80046e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80046e8:	685b      	ldr	r3, [r3, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	67bb      	str	r3, [r7, #120]	@ 0x78
 80046ee:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80046f0:	f04f 0200 	mov.w	r2, #0
 80046f4:	f04f 0300 	mov.w	r3, #0
 80046f8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80046fc:	4649      	mov	r1, r9
 80046fe:	008b      	lsls	r3, r1, #2
 8004700:	4641      	mov	r1, r8
 8004702:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8004706:	4641      	mov	r1, r8
 8004708:	008a      	lsls	r2, r1, #2
 800470a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800470e:	f7fb fdaf 	bl	8000270 <__aeabi_uldivmod>
 8004712:	4602      	mov	r2, r0
 8004714:	460b      	mov	r3, r1
 8004716:	4611      	mov	r1, r2
 8004718:	4b38      	ldr	r3, [pc, #224]	@ (80047fc <UART_SetConfig+0x4e4>)
 800471a:	fba3 2301 	umull	r2, r3, r3, r1
 800471e:	095b      	lsrs	r3, r3, #5
 8004720:	2264      	movs	r2, #100	@ 0x64
 8004722:	fb02 f303 	mul.w	r3, r2, r3
 8004726:	1acb      	subs	r3, r1, r3
 8004728:	011b      	lsls	r3, r3, #4
 800472a:	3332      	adds	r3, #50	@ 0x32
 800472c:	4a33      	ldr	r2, [pc, #204]	@ (80047fc <UART_SetConfig+0x4e4>)
 800472e:	fba2 2303 	umull	r2, r3, r2, r3
 8004732:	095b      	lsrs	r3, r3, #5
 8004734:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8004738:	441c      	add	r4, r3
 800473a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800473e:	2200      	movs	r2, #0
 8004740:	673b      	str	r3, [r7, #112]	@ 0x70
 8004742:	677a      	str	r2, [r7, #116]	@ 0x74
 8004744:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8004748:	4642      	mov	r2, r8
 800474a:	464b      	mov	r3, r9
 800474c:	1891      	adds	r1, r2, r2
 800474e:	60b9      	str	r1, [r7, #8]
 8004750:	415b      	adcs	r3, r3
 8004752:	60fb      	str	r3, [r7, #12]
 8004754:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004758:	4641      	mov	r1, r8
 800475a:	1851      	adds	r1, r2, r1
 800475c:	6039      	str	r1, [r7, #0]
 800475e:	4649      	mov	r1, r9
 8004760:	414b      	adcs	r3, r1
 8004762:	607b      	str	r3, [r7, #4]
 8004764:	f04f 0200 	mov.w	r2, #0
 8004768:	f04f 0300 	mov.w	r3, #0
 800476c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8004770:	4659      	mov	r1, fp
 8004772:	00cb      	lsls	r3, r1, #3
 8004774:	4651      	mov	r1, sl
 8004776:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800477a:	4651      	mov	r1, sl
 800477c:	00ca      	lsls	r2, r1, #3
 800477e:	4610      	mov	r0, r2
 8004780:	4619      	mov	r1, r3
 8004782:	4603      	mov	r3, r0
 8004784:	4642      	mov	r2, r8
 8004786:	189b      	adds	r3, r3, r2
 8004788:	66bb      	str	r3, [r7, #104]	@ 0x68
 800478a:	464b      	mov	r3, r9
 800478c:	460a      	mov	r2, r1
 800478e:	eb42 0303 	adc.w	r3, r2, r3
 8004792:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8004794:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	2200      	movs	r2, #0
 800479c:	663b      	str	r3, [r7, #96]	@ 0x60
 800479e:	667a      	str	r2, [r7, #100]	@ 0x64
 80047a0:	f04f 0200 	mov.w	r2, #0
 80047a4:	f04f 0300 	mov.w	r3, #0
 80047a8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80047ac:	4649      	mov	r1, r9
 80047ae:	008b      	lsls	r3, r1, #2
 80047b0:	4641      	mov	r1, r8
 80047b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80047b6:	4641      	mov	r1, r8
 80047b8:	008a      	lsls	r2, r1, #2
 80047ba:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80047be:	f7fb fd57 	bl	8000270 <__aeabi_uldivmod>
 80047c2:	4602      	mov	r2, r0
 80047c4:	460b      	mov	r3, r1
 80047c6:	4b0d      	ldr	r3, [pc, #52]	@ (80047fc <UART_SetConfig+0x4e4>)
 80047c8:	fba3 1302 	umull	r1, r3, r3, r2
 80047cc:	095b      	lsrs	r3, r3, #5
 80047ce:	2164      	movs	r1, #100	@ 0x64
 80047d0:	fb01 f303 	mul.w	r3, r1, r3
 80047d4:	1ad3      	subs	r3, r2, r3
 80047d6:	011b      	lsls	r3, r3, #4
 80047d8:	3332      	adds	r3, #50	@ 0x32
 80047da:	4a08      	ldr	r2, [pc, #32]	@ (80047fc <UART_SetConfig+0x4e4>)
 80047dc:	fba2 2303 	umull	r2, r3, r2, r3
 80047e0:	095b      	lsrs	r3, r3, #5
 80047e2:	f003 020f 	and.w	r2, r3, #15
 80047e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	4422      	add	r2, r4
 80047ee:	609a      	str	r2, [r3, #8]
}
 80047f0:	bf00      	nop
 80047f2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80047f6:	46bd      	mov	sp, r7
 80047f8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047fc:	51eb851f 	.word	0x51eb851f

08004800 <__NVIC_SetPriority>:
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	4603      	mov	r3, r0
 8004808:	6039      	str	r1, [r7, #0]
 800480a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800480c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004810:	2b00      	cmp	r3, #0
 8004812:	db0a      	blt.n	800482a <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	b2da      	uxtb	r2, r3
 8004818:	490c      	ldr	r1, [pc, #48]	@ (800484c <__NVIC_SetPriority+0x4c>)
 800481a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800481e:	0112      	lsls	r2, r2, #4
 8004820:	b2d2      	uxtb	r2, r2
 8004822:	440b      	add	r3, r1
 8004824:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8004828:	e00a      	b.n	8004840 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	b2da      	uxtb	r2, r3
 800482e:	4908      	ldr	r1, [pc, #32]	@ (8004850 <__NVIC_SetPriority+0x50>)
 8004830:	79fb      	ldrb	r3, [r7, #7]
 8004832:	f003 030f 	and.w	r3, r3, #15
 8004836:	3b04      	subs	r3, #4
 8004838:	0112      	lsls	r2, r2, #4
 800483a:	b2d2      	uxtb	r2, r2
 800483c:	440b      	add	r3, r1
 800483e:	761a      	strb	r2, [r3, #24]
}
 8004840:	bf00      	nop
 8004842:	370c      	adds	r7, #12
 8004844:	46bd      	mov	sp, r7
 8004846:	f85d 7b04 	ldr.w	r7, [sp], #4
 800484a:	4770      	bx	lr
 800484c:	e000e100 	.word	0xe000e100
 8004850:	e000ed00 	.word	0xe000ed00

08004854 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 8004854:	b580      	push	{r7, lr}
 8004856:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8004858:	4b05      	ldr	r3, [pc, #20]	@ (8004870 <SysTick_Handler+0x1c>)
 800485a:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 800485c:	f001 fed4 	bl	8006608 <xTaskGetSchedulerState>
 8004860:	4603      	mov	r3, r0
 8004862:	2b01      	cmp	r3, #1
 8004864:	d001      	beq.n	800486a <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 8004866:	f002 fccf 	bl	8007208 <xPortSysTickHandler>
  }
}
 800486a:	bf00      	nop
 800486c:	bd80      	pop	{r7, pc}
 800486e:	bf00      	nop
 8004870:	e000e010 	.word	0xe000e010

08004874 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8004874:	b580      	push	{r7, lr}
 8004876:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8004878:	2100      	movs	r1, #0
 800487a:	f06f 0004 	mvn.w	r0, #4
 800487e:	f7ff ffbf 	bl	8004800 <__NVIC_SetPriority>
#endif
}
 8004882:	bf00      	nop
 8004884:	bd80      	pop	{r7, pc}
	...

08004888 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8004888:	b480      	push	{r7}
 800488a:	b083      	sub	sp, #12
 800488c:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800488e:	f3ef 8305 	mrs	r3, IPSR
 8004892:	603b      	str	r3, [r7, #0]
  return(result);
 8004894:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004896:	2b00      	cmp	r3, #0
 8004898:	d003      	beq.n	80048a2 <osKernelInitialize+0x1a>
    stat = osErrorISR;
 800489a:	f06f 0305 	mvn.w	r3, #5
 800489e:	607b      	str	r3, [r7, #4]
 80048a0:	e00c      	b.n	80048bc <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80048a2:	4b0a      	ldr	r3, [pc, #40]	@ (80048cc <osKernelInitialize+0x44>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	2b00      	cmp	r3, #0
 80048a8:	d105      	bne.n	80048b6 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80048aa:	4b08      	ldr	r3, [pc, #32]	@ (80048cc <osKernelInitialize+0x44>)
 80048ac:	2201      	movs	r2, #1
 80048ae:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80048b0:	2300      	movs	r3, #0
 80048b2:	607b      	str	r3, [r7, #4]
 80048b4:	e002      	b.n	80048bc <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80048b6:	f04f 33ff 	mov.w	r3, #4294967295
 80048ba:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80048bc:	687b      	ldr	r3, [r7, #4]
}
 80048be:	4618      	mov	r0, r3
 80048c0:	370c      	adds	r7, #12
 80048c2:	46bd      	mov	sp, r7
 80048c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048c8:	4770      	bx	lr
 80048ca:	bf00      	nop
 80048cc:	2000019c 	.word	0x2000019c

080048d0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80048d0:	b580      	push	{r7, lr}
 80048d2:	b082      	sub	sp, #8
 80048d4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80048d6:	f3ef 8305 	mrs	r3, IPSR
 80048da:	603b      	str	r3, [r7, #0]
  return(result);
 80048dc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d003      	beq.n	80048ea <osKernelStart+0x1a>
    stat = osErrorISR;
 80048e2:	f06f 0305 	mvn.w	r3, #5
 80048e6:	607b      	str	r3, [r7, #4]
 80048e8:	e010      	b.n	800490c <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 80048ea:	4b0b      	ldr	r3, [pc, #44]	@ (8004918 <osKernelStart+0x48>)
 80048ec:	681b      	ldr	r3, [r3, #0]
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d109      	bne.n	8004906 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 80048f2:	f7ff ffbf 	bl	8004874 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 80048f6:	4b08      	ldr	r3, [pc, #32]	@ (8004918 <osKernelStart+0x48>)
 80048f8:	2202      	movs	r2, #2
 80048fa:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 80048fc:	f001 fa20 	bl	8005d40 <vTaskStartScheduler>
      stat = osOK;
 8004900:	2300      	movs	r3, #0
 8004902:	607b      	str	r3, [r7, #4]
 8004904:	e002      	b.n	800490c <osKernelStart+0x3c>
    } else {
      stat = osError;
 8004906:	f04f 33ff 	mov.w	r3, #4294967295
 800490a:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 800490c:	687b      	ldr	r3, [r7, #4]
}
 800490e:	4618      	mov	r0, r3
 8004910:	3708      	adds	r7, #8
 8004912:	46bd      	mov	sp, r7
 8004914:	bd80      	pop	{r7, pc}
 8004916:	bf00      	nop
 8004918:	2000019c 	.word	0x2000019c

0800491c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800491c:	b580      	push	{r7, lr}
 800491e:	b08e      	sub	sp, #56	@ 0x38
 8004920:	af04      	add	r7, sp, #16
 8004922:	60f8      	str	r0, [r7, #12]
 8004924:	60b9      	str	r1, [r7, #8]
 8004926:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8004928:	2300      	movs	r3, #0
 800492a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800492c:	f3ef 8305 	mrs	r3, IPSR
 8004930:	617b      	str	r3, [r7, #20]
  return(result);
 8004932:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8004934:	2b00      	cmp	r3, #0
 8004936:	d17e      	bne.n	8004a36 <osThreadNew+0x11a>
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	2b00      	cmp	r3, #0
 800493c:	d07b      	beq.n	8004a36 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 800493e:	2380      	movs	r3, #128	@ 0x80
 8004940:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8004942:	2318      	movs	r3, #24
 8004944:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8004946:	2300      	movs	r3, #0
 8004948:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 800494a:	f04f 33ff 	mov.w	r3, #4294967295
 800494e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004950:	687b      	ldr	r3, [r7, #4]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d045      	beq.n	80049e2 <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d002      	beq.n	8004964 <osThreadNew+0x48>
        name = attr->name;
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 8004964:	687b      	ldr	r3, [r7, #4]
 8004966:	699b      	ldr	r3, [r3, #24]
 8004968:	2b00      	cmp	r3, #0
 800496a:	d002      	beq.n	8004972 <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 800496c:	687b      	ldr	r3, [r7, #4]
 800496e:	699b      	ldr	r3, [r3, #24]
 8004970:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d008      	beq.n	800498a <osThreadNew+0x6e>
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	2b38      	cmp	r3, #56	@ 0x38
 800497c:	d805      	bhi.n	800498a <osThreadNew+0x6e>
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	685b      	ldr	r3, [r3, #4]
 8004982:	f003 0301 	and.w	r3, r3, #1
 8004986:	2b00      	cmp	r3, #0
 8004988:	d001      	beq.n	800498e <osThreadNew+0x72>
        return (NULL);
 800498a:	2300      	movs	r3, #0
 800498c:	e054      	b.n	8004a38 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	695b      	ldr	r3, [r3, #20]
 8004992:	2b00      	cmp	r3, #0
 8004994:	d003      	beq.n	800499e <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	695b      	ldr	r3, [r3, #20]
 800499a:	089b      	lsrs	r3, r3, #2
 800499c:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	689b      	ldr	r3, [r3, #8]
 80049a2:	2b00      	cmp	r3, #0
 80049a4:	d00e      	beq.n	80049c4 <osThreadNew+0xa8>
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	68db      	ldr	r3, [r3, #12]
 80049aa:	2ba7      	cmp	r3, #167	@ 0xa7
 80049ac:	d90a      	bls.n	80049c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80049b2:	2b00      	cmp	r3, #0
 80049b4:	d006      	beq.n	80049c4 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	695b      	ldr	r3, [r3, #20]
 80049ba:	2b00      	cmp	r3, #0
 80049bc:	d002      	beq.n	80049c4 <osThreadNew+0xa8>
        mem = 1;
 80049be:	2301      	movs	r3, #1
 80049c0:	61bb      	str	r3, [r7, #24]
 80049c2:	e010      	b.n	80049e6 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	689b      	ldr	r3, [r3, #8]
 80049c8:	2b00      	cmp	r3, #0
 80049ca:	d10c      	bne.n	80049e6 <osThreadNew+0xca>
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	68db      	ldr	r3, [r3, #12]
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d108      	bne.n	80049e6 <osThreadNew+0xca>
 80049d4:	687b      	ldr	r3, [r7, #4]
 80049d6:	691b      	ldr	r3, [r3, #16]
 80049d8:	2b00      	cmp	r3, #0
 80049da:	d104      	bne.n	80049e6 <osThreadNew+0xca>
          mem = 0;
 80049dc:	2300      	movs	r3, #0
 80049de:	61bb      	str	r3, [r7, #24]
 80049e0:	e001      	b.n	80049e6 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 80049e2:	2300      	movs	r3, #0
 80049e4:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 80049e6:	69bb      	ldr	r3, [r7, #24]
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d110      	bne.n	8004a0e <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 80049f0:	687a      	ldr	r2, [r7, #4]
 80049f2:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 80049f4:	9202      	str	r2, [sp, #8]
 80049f6:	9301      	str	r3, [sp, #4]
 80049f8:	69fb      	ldr	r3, [r7, #28]
 80049fa:	9300      	str	r3, [sp, #0]
 80049fc:	68bb      	ldr	r3, [r7, #8]
 80049fe:	6a3a      	ldr	r2, [r7, #32]
 8004a00:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a02:	68f8      	ldr	r0, [r7, #12]
 8004a04:	f000 ffa8 	bl	8005958 <xTaskCreateStatic>
 8004a08:	4603      	mov	r3, r0
 8004a0a:	613b      	str	r3, [r7, #16]
 8004a0c:	e013      	b.n	8004a36 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8004a0e:	69bb      	ldr	r3, [r7, #24]
 8004a10:	2b00      	cmp	r3, #0
 8004a12:	d110      	bne.n	8004a36 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8004a14:	6a3b      	ldr	r3, [r7, #32]
 8004a16:	b29a      	uxth	r2, r3
 8004a18:	f107 0310 	add.w	r3, r7, #16
 8004a1c:	9301      	str	r3, [sp, #4]
 8004a1e:	69fb      	ldr	r3, [r7, #28]
 8004a20:	9300      	str	r3, [sp, #0]
 8004a22:	68bb      	ldr	r3, [r7, #8]
 8004a24:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8004a26:	68f8      	ldr	r0, [r7, #12]
 8004a28:	f000 fff6 	bl	8005a18 <xTaskCreate>
 8004a2c:	4603      	mov	r3, r0
 8004a2e:	2b01      	cmp	r3, #1
 8004a30:	d001      	beq.n	8004a36 <osThreadNew+0x11a>
            hTask = NULL;
 8004a32:	2300      	movs	r3, #0
 8004a34:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8004a36:	693b      	ldr	r3, [r7, #16]
}
 8004a38:	4618      	mov	r0, r3
 8004a3a:	3728      	adds	r7, #40	@ 0x28
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	bd80      	pop	{r7, pc}

08004a40 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8004a40:	b580      	push	{r7, lr}
 8004a42:	b084      	sub	sp, #16
 8004a44:	af00      	add	r7, sp, #0
 8004a46:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a48:	f3ef 8305 	mrs	r3, IPSR
 8004a4c:	60bb      	str	r3, [r7, #8]
  return(result);
 8004a4e:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	d003      	beq.n	8004a5c <osDelay+0x1c>
    stat = osErrorISR;
 8004a54:	f06f 0305 	mvn.w	r3, #5
 8004a58:	60fb      	str	r3, [r7, #12]
 8004a5a:	e007      	b.n	8004a6c <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8004a5c:	2300      	movs	r3, #0
 8004a5e:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d002      	beq.n	8004a6c <osDelay+0x2c>
      vTaskDelay(ticks);
 8004a66:	6878      	ldr	r0, [r7, #4]
 8004a68:	f001 f934 	bl	8005cd4 <vTaskDelay>
    }
  }

  return (stat);
 8004a6c:	68fb      	ldr	r3, [r7, #12]
}
 8004a6e:	4618      	mov	r0, r3
 8004a70:	3710      	adds	r7, #16
 8004a72:	46bd      	mov	sp, r7
 8004a74:	bd80      	pop	{r7, pc}

08004a76 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8004a76:	b580      	push	{r7, lr}
 8004a78:	b08a      	sub	sp, #40	@ 0x28
 8004a7a:	af02      	add	r7, sp, #8
 8004a7c:	60f8      	str	r0, [r7, #12]
 8004a7e:	60b9      	str	r1, [r7, #8]
 8004a80:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8004a82:	2300      	movs	r3, #0
 8004a84:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004a86:	f3ef 8305 	mrs	r3, IPSR
 8004a8a:	613b      	str	r3, [r7, #16]
  return(result);
 8004a8c:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8004a8e:	2b00      	cmp	r3, #0
 8004a90:	d15f      	bne.n	8004b52 <osMessageQueueNew+0xdc>
 8004a92:	68fb      	ldr	r3, [r7, #12]
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d05c      	beq.n	8004b52 <osMessageQueueNew+0xdc>
 8004a98:	68bb      	ldr	r3, [r7, #8]
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d059      	beq.n	8004b52 <osMessageQueueNew+0xdc>
    mem = -1;
 8004a9e:	f04f 33ff 	mov.w	r3, #4294967295
 8004aa2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8004aa4:	687b      	ldr	r3, [r7, #4]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d029      	beq.n	8004afe <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	689b      	ldr	r3, [r3, #8]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d012      	beq.n	8004ad8 <osMessageQueueNew+0x62>
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	68db      	ldr	r3, [r3, #12]
 8004ab6:	2b4f      	cmp	r3, #79	@ 0x4f
 8004ab8:	d90e      	bls.n	8004ad8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004aba:	687b      	ldr	r3, [r7, #4]
 8004abc:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d00a      	beq.n	8004ad8 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	695a      	ldr	r2, [r3, #20]
 8004ac6:	68fb      	ldr	r3, [r7, #12]
 8004ac8:	68b9      	ldr	r1, [r7, #8]
 8004aca:	fb01 f303 	mul.w	r3, r1, r3
 8004ace:	429a      	cmp	r2, r3
 8004ad0:	d302      	bcc.n	8004ad8 <osMessageQueueNew+0x62>
        mem = 1;
 8004ad2:	2301      	movs	r3, #1
 8004ad4:	61bb      	str	r3, [r7, #24]
 8004ad6:	e014      	b.n	8004b02 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	689b      	ldr	r3, [r3, #8]
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d110      	bne.n	8004b02 <osMessageQueueNew+0x8c>
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	68db      	ldr	r3, [r3, #12]
 8004ae4:	2b00      	cmp	r3, #0
 8004ae6:	d10c      	bne.n	8004b02 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8004aec:	2b00      	cmp	r3, #0
 8004aee:	d108      	bne.n	8004b02 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	695b      	ldr	r3, [r3, #20]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	d104      	bne.n	8004b02 <osMessageQueueNew+0x8c>
          mem = 0;
 8004af8:	2300      	movs	r3, #0
 8004afa:	61bb      	str	r3, [r7, #24]
 8004afc:	e001      	b.n	8004b02 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8004afe:	2300      	movs	r3, #0
 8004b00:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8004b02:	69bb      	ldr	r3, [r7, #24]
 8004b04:	2b01      	cmp	r3, #1
 8004b06:	d10b      	bne.n	8004b20 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	691a      	ldr	r2, [r3, #16]
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	689b      	ldr	r3, [r3, #8]
 8004b10:	2100      	movs	r1, #0
 8004b12:	9100      	str	r1, [sp, #0]
 8004b14:	68b9      	ldr	r1, [r7, #8]
 8004b16:	68f8      	ldr	r0, [r7, #12]
 8004b18:	f000 f9d0 	bl	8004ebc <xQueueGenericCreateStatic>
 8004b1c:	61f8      	str	r0, [r7, #28]
 8004b1e:	e008      	b.n	8004b32 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8004b20:	69bb      	ldr	r3, [r7, #24]
 8004b22:	2b00      	cmp	r3, #0
 8004b24:	d105      	bne.n	8004b32 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 8004b26:	2200      	movs	r2, #0
 8004b28:	68b9      	ldr	r1, [r7, #8]
 8004b2a:	68f8      	ldr	r0, [r7, #12]
 8004b2c:	f000 fa43 	bl	8004fb6 <xQueueGenericCreate>
 8004b30:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8004b32:	69fb      	ldr	r3, [r7, #28]
 8004b34:	2b00      	cmp	r3, #0
 8004b36:	d00c      	beq.n	8004b52 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 8004b38:	687b      	ldr	r3, [r7, #4]
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d003      	beq.n	8004b46 <osMessageQueueNew+0xd0>
        name = attr->name;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	617b      	str	r3, [r7, #20]
 8004b44:	e001      	b.n	8004b4a <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 8004b46:	2300      	movs	r3, #0
 8004b48:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8004b4a:	6979      	ldr	r1, [r7, #20]
 8004b4c:	69f8      	ldr	r0, [r7, #28]
 8004b4e:	f000 fea5 	bl	800589c <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8004b52:	69fb      	ldr	r3, [r7, #28]
}
 8004b54:	4618      	mov	r0, r3
 8004b56:	3720      	adds	r7, #32
 8004b58:	46bd      	mov	sp, r7
 8004b5a:	bd80      	pop	{r7, pc}

08004b5c <osMessageQueueGet>:
  }

  return (stat);
}

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8004b5c:	b580      	push	{r7, lr}
 8004b5e:	b088      	sub	sp, #32
 8004b60:	af00      	add	r7, sp, #0
 8004b62:	60f8      	str	r0, [r7, #12]
 8004b64:	60b9      	str	r1, [r7, #8]
 8004b66:	607a      	str	r2, [r7, #4]
 8004b68:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8004b6e:	2300      	movs	r3, #0
 8004b70:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8004b72:	f3ef 8305 	mrs	r3, IPSR
 8004b76:	617b      	str	r3, [r7, #20]
  return(result);
 8004b78:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d028      	beq.n	8004bd0 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8004b7e:	69bb      	ldr	r3, [r7, #24]
 8004b80:	2b00      	cmp	r3, #0
 8004b82:	d005      	beq.n	8004b90 <osMessageQueueGet+0x34>
 8004b84:	68bb      	ldr	r3, [r7, #8]
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d002      	beq.n	8004b90 <osMessageQueueGet+0x34>
 8004b8a:	683b      	ldr	r3, [r7, #0]
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d003      	beq.n	8004b98 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8004b90:	f06f 0303 	mvn.w	r3, #3
 8004b94:	61fb      	str	r3, [r7, #28]
 8004b96:	e037      	b.n	8004c08 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8004b98:	2300      	movs	r3, #0
 8004b9a:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8004b9c:	f107 0310 	add.w	r3, r7, #16
 8004ba0:	461a      	mov	r2, r3
 8004ba2:	68b9      	ldr	r1, [r7, #8]
 8004ba4:	69b8      	ldr	r0, [r7, #24]
 8004ba6:	f000 fce7 	bl	8005578 <xQueueReceiveFromISR>
 8004baa:	4603      	mov	r3, r0
 8004bac:	2b01      	cmp	r3, #1
 8004bae:	d003      	beq.n	8004bb8 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8004bb0:	f06f 0302 	mvn.w	r3, #2
 8004bb4:	61fb      	str	r3, [r7, #28]
 8004bb6:	e027      	b.n	8004c08 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8004bb8:	693b      	ldr	r3, [r7, #16]
 8004bba:	2b00      	cmp	r3, #0
 8004bbc:	d024      	beq.n	8004c08 <osMessageQueueGet+0xac>
 8004bbe:	4b15      	ldr	r3, [pc, #84]	@ (8004c14 <osMessageQueueGet+0xb8>)
 8004bc0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004bc4:	601a      	str	r2, [r3, #0]
 8004bc6:	f3bf 8f4f 	dsb	sy
 8004bca:	f3bf 8f6f 	isb	sy
 8004bce:	e01b      	b.n	8004c08 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8004bd0:	69bb      	ldr	r3, [r7, #24]
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d002      	beq.n	8004bdc <osMessageQueueGet+0x80>
 8004bd6:	68bb      	ldr	r3, [r7, #8]
 8004bd8:	2b00      	cmp	r3, #0
 8004bda:	d103      	bne.n	8004be4 <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8004bdc:	f06f 0303 	mvn.w	r3, #3
 8004be0:	61fb      	str	r3, [r7, #28]
 8004be2:	e011      	b.n	8004c08 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 8004be4:	683a      	ldr	r2, [r7, #0]
 8004be6:	68b9      	ldr	r1, [r7, #8]
 8004be8:	69b8      	ldr	r0, [r7, #24]
 8004bea:	f000 fbe3 	bl	80053b4 <xQueueReceive>
 8004bee:	4603      	mov	r3, r0
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d009      	beq.n	8004c08 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 8004bf4:	683b      	ldr	r3, [r7, #0]
 8004bf6:	2b00      	cmp	r3, #0
 8004bf8:	d003      	beq.n	8004c02 <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 8004bfa:	f06f 0301 	mvn.w	r3, #1
 8004bfe:	61fb      	str	r3, [r7, #28]
 8004c00:	e002      	b.n	8004c08 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 8004c02:	f06f 0302 	mvn.w	r3, #2
 8004c06:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8004c08:	69fb      	ldr	r3, [r7, #28]
}
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	3720      	adds	r7, #32
 8004c0e:	46bd      	mov	sp, r7
 8004c10:	bd80      	pop	{r7, pc}
 8004c12:	bf00      	nop
 8004c14:	e000ed04 	.word	0xe000ed04

08004c18 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8004c18:	b480      	push	{r7}
 8004c1a:	b085      	sub	sp, #20
 8004c1c:	af00      	add	r7, sp, #0
 8004c1e:	60f8      	str	r0, [r7, #12]
 8004c20:	60b9      	str	r1, [r7, #8]
 8004c22:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	4a07      	ldr	r2, [pc, #28]	@ (8004c44 <vApplicationGetIdleTaskMemory+0x2c>)
 8004c28:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8004c2a:	68bb      	ldr	r3, [r7, #8]
 8004c2c:	4a06      	ldr	r2, [pc, #24]	@ (8004c48 <vApplicationGetIdleTaskMemory+0x30>)
 8004c2e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2280      	movs	r2, #128	@ 0x80
 8004c34:	601a      	str	r2, [r3, #0]
}
 8004c36:	bf00      	nop
 8004c38:	3714      	adds	r7, #20
 8004c3a:	46bd      	mov	sp, r7
 8004c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c40:	4770      	bx	lr
 8004c42:	bf00      	nop
 8004c44:	200001a0 	.word	0x200001a0
 8004c48:	20000248 	.word	0x20000248

08004c4c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8004c4c:	b480      	push	{r7}
 8004c4e:	b085      	sub	sp, #20
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	60f8      	str	r0, [r7, #12]
 8004c54:	60b9      	str	r1, [r7, #8]
 8004c56:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8004c58:	68fb      	ldr	r3, [r7, #12]
 8004c5a:	4a07      	ldr	r2, [pc, #28]	@ (8004c78 <vApplicationGetTimerTaskMemory+0x2c>)
 8004c5c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8004c5e:	68bb      	ldr	r3, [r7, #8]
 8004c60:	4a06      	ldr	r2, [pc, #24]	@ (8004c7c <vApplicationGetTimerTaskMemory+0x30>)
 8004c62:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8004c6a:	601a      	str	r2, [r3, #0]
}
 8004c6c:	bf00      	nop
 8004c6e:	3714      	adds	r7, #20
 8004c70:	46bd      	mov	sp, r7
 8004c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c76:	4770      	bx	lr
 8004c78:	20000448 	.word	0x20000448
 8004c7c:	200004f0 	.word	0x200004f0

08004c80 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8004c80:	b480      	push	{r7}
 8004c82:	b083      	sub	sp, #12
 8004c84:	af00      	add	r7, sp, #0
 8004c86:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	f103 0208 	add.w	r2, r3, #8
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8004c92:	687b      	ldr	r3, [r7, #4]
 8004c94:	f04f 32ff 	mov.w	r2, #4294967295
 8004c98:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	f103 0208 	add.w	r2, r3, #8
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	f103 0208 	add.w	r2, r3, #8
 8004caa:	687b      	ldr	r3, [r7, #4]
 8004cac:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8004cb4:	bf00      	nop
 8004cb6:	370c      	adds	r7, #12
 8004cb8:	46bd      	mov	sp, r7
 8004cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cbe:	4770      	bx	lr

08004cc0 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8004cc0:	b480      	push	{r7}
 8004cc2:	b083      	sub	sp, #12
 8004cc4:	af00      	add	r7, sp, #0
 8004cc6:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	2200      	movs	r2, #0
 8004ccc:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8004cce:	bf00      	nop
 8004cd0:	370c      	adds	r7, #12
 8004cd2:	46bd      	mov	sp, r7
 8004cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cd8:	4770      	bx	lr

08004cda <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004cda:	b480      	push	{r7}
 8004cdc:	b085      	sub	sp, #20
 8004cde:	af00      	add	r7, sp, #0
 8004ce0:	6078      	str	r0, [r7, #4]
 8004ce2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8004ce4:	687b      	ldr	r3, [r7, #4]
 8004ce6:	685b      	ldr	r3, [r3, #4]
 8004ce8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8004cea:	683b      	ldr	r3, [r7, #0]
 8004cec:	68fa      	ldr	r2, [r7, #12]
 8004cee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8004cf0:	68fb      	ldr	r3, [r7, #12]
 8004cf2:	689a      	ldr	r2, [r3, #8]
 8004cf4:	683b      	ldr	r3, [r7, #0]
 8004cf6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8004cf8:	68fb      	ldr	r3, [r7, #12]
 8004cfa:	689b      	ldr	r3, [r3, #8]
 8004cfc:	683a      	ldr	r2, [r7, #0]
 8004cfe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	683a      	ldr	r2, [r7, #0]
 8004d04:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8004d06:	683b      	ldr	r3, [r7, #0]
 8004d08:	687a      	ldr	r2, [r7, #4]
 8004d0a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d0c:	687b      	ldr	r3, [r7, #4]
 8004d0e:	681b      	ldr	r3, [r3, #0]
 8004d10:	1c5a      	adds	r2, r3, #1
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	601a      	str	r2, [r3, #0]
}
 8004d16:	bf00      	nop
 8004d18:	3714      	adds	r7, #20
 8004d1a:	46bd      	mov	sp, r7
 8004d1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d20:	4770      	bx	lr

08004d22 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8004d22:	b480      	push	{r7}
 8004d24:	b085      	sub	sp, #20
 8004d26:	af00      	add	r7, sp, #0
 8004d28:	6078      	str	r0, [r7, #4]
 8004d2a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8004d2c:	683b      	ldr	r3, [r7, #0]
 8004d2e:	681b      	ldr	r3, [r3, #0]
 8004d30:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8004d32:	68bb      	ldr	r3, [r7, #8]
 8004d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d38:	d103      	bne.n	8004d42 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	691b      	ldr	r3, [r3, #16]
 8004d3e:	60fb      	str	r3, [r7, #12]
 8004d40:	e00c      	b.n	8004d5c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	3308      	adds	r3, #8
 8004d46:	60fb      	str	r3, [r7, #12]
 8004d48:	e002      	b.n	8004d50 <vListInsert+0x2e>
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	685b      	ldr	r3, [r3, #4]
 8004d4e:	60fb      	str	r3, [r7, #12]
 8004d50:	68fb      	ldr	r3, [r7, #12]
 8004d52:	685b      	ldr	r3, [r3, #4]
 8004d54:	681b      	ldr	r3, [r3, #0]
 8004d56:	68ba      	ldr	r2, [r7, #8]
 8004d58:	429a      	cmp	r2, r3
 8004d5a:	d2f6      	bcs.n	8004d4a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8004d5c:	68fb      	ldr	r3, [r7, #12]
 8004d5e:	685a      	ldr	r2, [r3, #4]
 8004d60:	683b      	ldr	r3, [r7, #0]
 8004d62:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8004d64:	683b      	ldr	r3, [r7, #0]
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	683a      	ldr	r2, [r7, #0]
 8004d6a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8004d6c:	683b      	ldr	r3, [r7, #0]
 8004d6e:	68fa      	ldr	r2, [r7, #12]
 8004d70:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8004d72:	68fb      	ldr	r3, [r7, #12]
 8004d74:	683a      	ldr	r2, [r7, #0]
 8004d76:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8004d78:	683b      	ldr	r3, [r7, #0]
 8004d7a:	687a      	ldr	r2, [r7, #4]
 8004d7c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	1c5a      	adds	r2, r3, #1
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	601a      	str	r2, [r3, #0]
}
 8004d88:	bf00      	nop
 8004d8a:	3714      	adds	r7, #20
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8004d94:	b480      	push	{r7}
 8004d96:	b085      	sub	sp, #20
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	691b      	ldr	r3, [r3, #16]
 8004da0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	685b      	ldr	r3, [r3, #4]
 8004da6:	687a      	ldr	r2, [r7, #4]
 8004da8:	6892      	ldr	r2, [r2, #8]
 8004daa:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	689b      	ldr	r3, [r3, #8]
 8004db0:	687a      	ldr	r2, [r7, #4]
 8004db2:	6852      	ldr	r2, [r2, #4]
 8004db4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8004db6:	68fb      	ldr	r3, [r7, #12]
 8004db8:	685b      	ldr	r3, [r3, #4]
 8004dba:	687a      	ldr	r2, [r7, #4]
 8004dbc:	429a      	cmp	r2, r3
 8004dbe:	d103      	bne.n	8004dc8 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8004dc0:	687b      	ldr	r3, [r7, #4]
 8004dc2:	689a      	ldr	r2, [r3, #8]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8004dc8:	687b      	ldr	r3, [r7, #4]
 8004dca:	2200      	movs	r2, #0
 8004dcc:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	1e5a      	subs	r2, r3, #1
 8004dd4:	68fb      	ldr	r3, [r7, #12]
 8004dd6:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
}
 8004ddc:	4618      	mov	r0, r3
 8004dde:	3714      	adds	r7, #20
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b084      	sub	sp, #16
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	6078      	str	r0, [r7, #4]
 8004df0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8004df2:	687b      	ldr	r3, [r7, #4]
 8004df4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d10b      	bne.n	8004e14 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8004dfc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004e00:	f383 8811 	msr	BASEPRI, r3
 8004e04:	f3bf 8f6f 	isb	sy
 8004e08:	f3bf 8f4f 	dsb	sy
 8004e0c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8004e0e:	bf00      	nop
 8004e10:	bf00      	nop
 8004e12:	e7fd      	b.n	8004e10 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8004e14:	f002 f968 	bl	80070e8 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e18:	68fb      	ldr	r3, [r7, #12]
 8004e1a:	681a      	ldr	r2, [r3, #0]
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	68f9      	ldr	r1, [r7, #12]
 8004e22:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e24:	fb01 f303 	mul.w	r3, r1, r3
 8004e28:	441a      	add	r2, r3
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8004e2e:	68fb      	ldr	r3, [r7, #12]
 8004e30:	2200      	movs	r2, #0
 8004e32:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	681a      	ldr	r2, [r3, #0]
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8004e3c:	68fb      	ldr	r3, [r7, #12]
 8004e3e:	681a      	ldr	r2, [r3, #0]
 8004e40:	68fb      	ldr	r3, [r7, #12]
 8004e42:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e44:	3b01      	subs	r3, #1
 8004e46:	68f9      	ldr	r1, [r7, #12]
 8004e48:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8004e4a:	fb01 f303 	mul.w	r3, r1, r3
 8004e4e:	441a      	add	r2, r3
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	22ff      	movs	r2, #255	@ 0xff
 8004e58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8004e5c:	68fb      	ldr	r3, [r7, #12]
 8004e5e:	22ff      	movs	r2, #255	@ 0xff
 8004e60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8004e64:	683b      	ldr	r3, [r7, #0]
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d114      	bne.n	8004e94 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	691b      	ldr	r3, [r3, #16]
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d01a      	beq.n	8004ea8 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	3310      	adds	r3, #16
 8004e76:	4618      	mov	r0, r3
 8004e78:	f001 fa00 	bl	800627c <xTaskRemoveFromEventList>
 8004e7c:	4603      	mov	r3, r0
 8004e7e:	2b00      	cmp	r3, #0
 8004e80:	d012      	beq.n	8004ea8 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8004e82:	4b0d      	ldr	r3, [pc, #52]	@ (8004eb8 <xQueueGenericReset+0xd0>)
 8004e84:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8004e88:	601a      	str	r2, [r3, #0]
 8004e8a:	f3bf 8f4f 	dsb	sy
 8004e8e:	f3bf 8f6f 	isb	sy
 8004e92:	e009      	b.n	8004ea8 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	3310      	adds	r3, #16
 8004e98:	4618      	mov	r0, r3
 8004e9a:	f7ff fef1 	bl	8004c80 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	3324      	adds	r3, #36	@ 0x24
 8004ea2:	4618      	mov	r0, r3
 8004ea4:	f7ff feec 	bl	8004c80 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8004ea8:	f002 f950 	bl	800714c <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8004eac:	2301      	movs	r3, #1
}
 8004eae:	4618      	mov	r0, r3
 8004eb0:	3710      	adds	r7, #16
 8004eb2:	46bd      	mov	sp, r7
 8004eb4:	bd80      	pop	{r7, pc}
 8004eb6:	bf00      	nop
 8004eb8:	e000ed04 	.word	0xe000ed04

08004ebc <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8004ebc:	b580      	push	{r7, lr}
 8004ebe:	b08e      	sub	sp, #56	@ 0x38
 8004ec0:	af02      	add	r7, sp, #8
 8004ec2:	60f8      	str	r0, [r7, #12]
 8004ec4:	60b9      	str	r1, [r7, #8]
 8004ec6:	607a      	str	r2, [r7, #4]
 8004ec8:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	2b00      	cmp	r3, #0
 8004ece:	d10b      	bne.n	8004ee8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8004ed0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ed4:	f383 8811 	msr	BASEPRI, r3
 8004ed8:	f3bf 8f6f 	isb	sy
 8004edc:	f3bf 8f4f 	dsb	sy
 8004ee0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8004ee2:	bf00      	nop
 8004ee4:	bf00      	nop
 8004ee6:	e7fd      	b.n	8004ee4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8004ee8:	683b      	ldr	r3, [r7, #0]
 8004eea:	2b00      	cmp	r3, #0
 8004eec:	d10b      	bne.n	8004f06 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8004eee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004ef2:	f383 8811 	msr	BASEPRI, r3
 8004ef6:	f3bf 8f6f 	isb	sy
 8004efa:	f3bf 8f4f 	dsb	sy
 8004efe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8004f00:	bf00      	nop
 8004f02:	bf00      	nop
 8004f04:	e7fd      	b.n	8004f02 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	2b00      	cmp	r3, #0
 8004f0a:	d002      	beq.n	8004f12 <xQueueGenericCreateStatic+0x56>
 8004f0c:	68bb      	ldr	r3, [r7, #8]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d001      	beq.n	8004f16 <xQueueGenericCreateStatic+0x5a>
 8004f12:	2301      	movs	r3, #1
 8004f14:	e000      	b.n	8004f18 <xQueueGenericCreateStatic+0x5c>
 8004f16:	2300      	movs	r3, #0
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d10b      	bne.n	8004f34 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8004f1c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f20:	f383 8811 	msr	BASEPRI, r3
 8004f24:	f3bf 8f6f 	isb	sy
 8004f28:	f3bf 8f4f 	dsb	sy
 8004f2c:	623b      	str	r3, [r7, #32]
}
 8004f2e:	bf00      	nop
 8004f30:	bf00      	nop
 8004f32:	e7fd      	b.n	8004f30 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8004f34:	687b      	ldr	r3, [r7, #4]
 8004f36:	2b00      	cmp	r3, #0
 8004f38:	d102      	bne.n	8004f40 <xQueueGenericCreateStatic+0x84>
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	2b00      	cmp	r3, #0
 8004f3e:	d101      	bne.n	8004f44 <xQueueGenericCreateStatic+0x88>
 8004f40:	2301      	movs	r3, #1
 8004f42:	e000      	b.n	8004f46 <xQueueGenericCreateStatic+0x8a>
 8004f44:	2300      	movs	r3, #0
 8004f46:	2b00      	cmp	r3, #0
 8004f48:	d10b      	bne.n	8004f62 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8004f4a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f4e:	f383 8811 	msr	BASEPRI, r3
 8004f52:	f3bf 8f6f 	isb	sy
 8004f56:	f3bf 8f4f 	dsb	sy
 8004f5a:	61fb      	str	r3, [r7, #28]
}
 8004f5c:	bf00      	nop
 8004f5e:	bf00      	nop
 8004f60:	e7fd      	b.n	8004f5e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8004f62:	2350      	movs	r3, #80	@ 0x50
 8004f64:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8004f66:	697b      	ldr	r3, [r7, #20]
 8004f68:	2b50      	cmp	r3, #80	@ 0x50
 8004f6a:	d00b      	beq.n	8004f84 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8004f6c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004f70:	f383 8811 	msr	BASEPRI, r3
 8004f74:	f3bf 8f6f 	isb	sy
 8004f78:	f3bf 8f4f 	dsb	sy
 8004f7c:	61bb      	str	r3, [r7, #24]
}
 8004f7e:	bf00      	nop
 8004f80:	bf00      	nop
 8004f82:	e7fd      	b.n	8004f80 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8004f84:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8004f86:	683b      	ldr	r3, [r7, #0]
 8004f88:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8004f8a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d00d      	beq.n	8004fac <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8004f90:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f92:	2201      	movs	r2, #1
 8004f94:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8004f98:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8004f9c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8004f9e:	9300      	str	r3, [sp, #0]
 8004fa0:	4613      	mov	r3, r2
 8004fa2:	687a      	ldr	r2, [r7, #4]
 8004fa4:	68b9      	ldr	r1, [r7, #8]
 8004fa6:	68f8      	ldr	r0, [r7, #12]
 8004fa8:	f000 f840 	bl	800502c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8004fac:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8004fae:	4618      	mov	r0, r3
 8004fb0:	3730      	adds	r7, #48	@ 0x30
 8004fb2:	46bd      	mov	sp, r7
 8004fb4:	bd80      	pop	{r7, pc}

08004fb6 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8004fb6:	b580      	push	{r7, lr}
 8004fb8:	b08a      	sub	sp, #40	@ 0x28
 8004fba:	af02      	add	r7, sp, #8
 8004fbc:	60f8      	str	r0, [r7, #12]
 8004fbe:	60b9      	str	r1, [r7, #8]
 8004fc0:	4613      	mov	r3, r2
 8004fc2:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8004fc4:	68fb      	ldr	r3, [r7, #12]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d10b      	bne.n	8004fe2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8004fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8004fce:	f383 8811 	msr	BASEPRI, r3
 8004fd2:	f3bf 8f6f 	isb	sy
 8004fd6:	f3bf 8f4f 	dsb	sy
 8004fda:	613b      	str	r3, [r7, #16]
}
 8004fdc:	bf00      	nop
 8004fde:	bf00      	nop
 8004fe0:	e7fd      	b.n	8004fde <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8004fe2:	68fb      	ldr	r3, [r7, #12]
 8004fe4:	68ba      	ldr	r2, [r7, #8]
 8004fe6:	fb02 f303 	mul.w	r3, r2, r3
 8004fea:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8004fec:	69fb      	ldr	r3, [r7, #28]
 8004fee:	3350      	adds	r3, #80	@ 0x50
 8004ff0:	4618      	mov	r0, r3
 8004ff2:	f002 f99b 	bl	800732c <pvPortMalloc>
 8004ff6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8004ff8:	69bb      	ldr	r3, [r7, #24]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d011      	beq.n	8005022 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8004ffe:	69bb      	ldr	r3, [r7, #24]
 8005000:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005002:	697b      	ldr	r3, [r7, #20]
 8005004:	3350      	adds	r3, #80	@ 0x50
 8005006:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005008:	69bb      	ldr	r3, [r7, #24]
 800500a:	2200      	movs	r2, #0
 800500c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005010:	79fa      	ldrb	r2, [r7, #7]
 8005012:	69bb      	ldr	r3, [r7, #24]
 8005014:	9300      	str	r3, [sp, #0]
 8005016:	4613      	mov	r3, r2
 8005018:	697a      	ldr	r2, [r7, #20]
 800501a:	68b9      	ldr	r1, [r7, #8]
 800501c:	68f8      	ldr	r0, [r7, #12]
 800501e:	f000 f805 	bl	800502c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005022:	69bb      	ldr	r3, [r7, #24]
	}
 8005024:	4618      	mov	r0, r3
 8005026:	3720      	adds	r7, #32
 8005028:	46bd      	mov	sp, r7
 800502a:	bd80      	pop	{r7, pc}

0800502c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800502c:	b580      	push	{r7, lr}
 800502e:	b084      	sub	sp, #16
 8005030:	af00      	add	r7, sp, #0
 8005032:	60f8      	str	r0, [r7, #12]
 8005034:	60b9      	str	r1, [r7, #8]
 8005036:	607a      	str	r2, [r7, #4]
 8005038:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800503a:	68bb      	ldr	r3, [r7, #8]
 800503c:	2b00      	cmp	r3, #0
 800503e:	d103      	bne.n	8005048 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005040:	69bb      	ldr	r3, [r7, #24]
 8005042:	69ba      	ldr	r2, [r7, #24]
 8005044:	601a      	str	r2, [r3, #0]
 8005046:	e002      	b.n	800504e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005048:	69bb      	ldr	r3, [r7, #24]
 800504a:	687a      	ldr	r2, [r7, #4]
 800504c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800504e:	69bb      	ldr	r3, [r7, #24]
 8005050:	68fa      	ldr	r2, [r7, #12]
 8005052:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005054:	69bb      	ldr	r3, [r7, #24]
 8005056:	68ba      	ldr	r2, [r7, #8]
 8005058:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800505a:	2101      	movs	r1, #1
 800505c:	69b8      	ldr	r0, [r7, #24]
 800505e:	f7ff fec3 	bl	8004de8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005062:	69bb      	ldr	r3, [r7, #24]
 8005064:	78fa      	ldrb	r2, [r7, #3]
 8005066:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800506a:	bf00      	nop
 800506c:	3710      	adds	r7, #16
 800506e:	46bd      	mov	sp, r7
 8005070:	bd80      	pop	{r7, pc}
	...

08005074 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005074:	b580      	push	{r7, lr}
 8005076:	b08e      	sub	sp, #56	@ 0x38
 8005078:	af00      	add	r7, sp, #0
 800507a:	60f8      	str	r0, [r7, #12]
 800507c:	60b9      	str	r1, [r7, #8]
 800507e:	607a      	str	r2, [r7, #4]
 8005080:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005082:	2300      	movs	r3, #0
 8005084:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005086:	68fb      	ldr	r3, [r7, #12]
 8005088:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 800508a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800508c:	2b00      	cmp	r3, #0
 800508e:	d10b      	bne.n	80050a8 <xQueueGenericSend+0x34>
	__asm volatile
 8005090:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005094:	f383 8811 	msr	BASEPRI, r3
 8005098:	f3bf 8f6f 	isb	sy
 800509c:	f3bf 8f4f 	dsb	sy
 80050a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80050a2:	bf00      	nop
 80050a4:	bf00      	nop
 80050a6:	e7fd      	b.n	80050a4 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80050a8:	68bb      	ldr	r3, [r7, #8]
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d103      	bne.n	80050b6 <xQueueGenericSend+0x42>
 80050ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d101      	bne.n	80050ba <xQueueGenericSend+0x46>
 80050b6:	2301      	movs	r3, #1
 80050b8:	e000      	b.n	80050bc <xQueueGenericSend+0x48>
 80050ba:	2300      	movs	r3, #0
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d10b      	bne.n	80050d8 <xQueueGenericSend+0x64>
	__asm volatile
 80050c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050c4:	f383 8811 	msr	BASEPRI, r3
 80050c8:	f3bf 8f6f 	isb	sy
 80050cc:	f3bf 8f4f 	dsb	sy
 80050d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80050d2:	bf00      	nop
 80050d4:	bf00      	nop
 80050d6:	e7fd      	b.n	80050d4 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80050d8:	683b      	ldr	r3, [r7, #0]
 80050da:	2b02      	cmp	r3, #2
 80050dc:	d103      	bne.n	80050e6 <xQueueGenericSend+0x72>
 80050de:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80050e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80050e2:	2b01      	cmp	r3, #1
 80050e4:	d101      	bne.n	80050ea <xQueueGenericSend+0x76>
 80050e6:	2301      	movs	r3, #1
 80050e8:	e000      	b.n	80050ec <xQueueGenericSend+0x78>
 80050ea:	2300      	movs	r3, #0
 80050ec:	2b00      	cmp	r3, #0
 80050ee:	d10b      	bne.n	8005108 <xQueueGenericSend+0x94>
	__asm volatile
 80050f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80050f4:	f383 8811 	msr	BASEPRI, r3
 80050f8:	f3bf 8f6f 	isb	sy
 80050fc:	f3bf 8f4f 	dsb	sy
 8005100:	623b      	str	r3, [r7, #32]
}
 8005102:	bf00      	nop
 8005104:	bf00      	nop
 8005106:	e7fd      	b.n	8005104 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005108:	f001 fa7e 	bl	8006608 <xTaskGetSchedulerState>
 800510c:	4603      	mov	r3, r0
 800510e:	2b00      	cmp	r3, #0
 8005110:	d102      	bne.n	8005118 <xQueueGenericSend+0xa4>
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	2b00      	cmp	r3, #0
 8005116:	d101      	bne.n	800511c <xQueueGenericSend+0xa8>
 8005118:	2301      	movs	r3, #1
 800511a:	e000      	b.n	800511e <xQueueGenericSend+0xaa>
 800511c:	2300      	movs	r3, #0
 800511e:	2b00      	cmp	r3, #0
 8005120:	d10b      	bne.n	800513a <xQueueGenericSend+0xc6>
	__asm volatile
 8005122:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005126:	f383 8811 	msr	BASEPRI, r3
 800512a:	f3bf 8f6f 	isb	sy
 800512e:	f3bf 8f4f 	dsb	sy
 8005132:	61fb      	str	r3, [r7, #28]
}
 8005134:	bf00      	nop
 8005136:	bf00      	nop
 8005138:	e7fd      	b.n	8005136 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800513a:	f001 ffd5 	bl	80070e8 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800513e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005140:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005142:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005144:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005146:	429a      	cmp	r2, r3
 8005148:	d302      	bcc.n	8005150 <xQueueGenericSend+0xdc>
 800514a:	683b      	ldr	r3, [r7, #0]
 800514c:	2b02      	cmp	r3, #2
 800514e:	d129      	bne.n	80051a4 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005150:	683a      	ldr	r2, [r7, #0]
 8005152:	68b9      	ldr	r1, [r7, #8]
 8005154:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005156:	f000 fa91 	bl	800567c <prvCopyDataToQueue>
 800515a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800515c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800515e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005160:	2b00      	cmp	r3, #0
 8005162:	d010      	beq.n	8005186 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005164:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005166:	3324      	adds	r3, #36	@ 0x24
 8005168:	4618      	mov	r0, r3
 800516a:	f001 f887 	bl	800627c <xTaskRemoveFromEventList>
 800516e:	4603      	mov	r3, r0
 8005170:	2b00      	cmp	r3, #0
 8005172:	d013      	beq.n	800519c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005174:	4b3f      	ldr	r3, [pc, #252]	@ (8005274 <xQueueGenericSend+0x200>)
 8005176:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800517a:	601a      	str	r2, [r3, #0]
 800517c:	f3bf 8f4f 	dsb	sy
 8005180:	f3bf 8f6f 	isb	sy
 8005184:	e00a      	b.n	800519c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005186:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005188:	2b00      	cmp	r3, #0
 800518a:	d007      	beq.n	800519c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800518c:	4b39      	ldr	r3, [pc, #228]	@ (8005274 <xQueueGenericSend+0x200>)
 800518e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005192:	601a      	str	r2, [r3, #0]
 8005194:	f3bf 8f4f 	dsb	sy
 8005198:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800519c:	f001 ffd6 	bl	800714c <vPortExitCritical>
				return pdPASS;
 80051a0:	2301      	movs	r3, #1
 80051a2:	e063      	b.n	800526c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80051aa:	f001 ffcf 	bl	800714c <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 80051ae:	2300      	movs	r3, #0
 80051b0:	e05c      	b.n	800526c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80051b2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80051b4:	2b00      	cmp	r3, #0
 80051b6:	d106      	bne.n	80051c6 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80051b8:	f107 0314 	add.w	r3, r7, #20
 80051bc:	4618      	mov	r0, r3
 80051be:	f001 f8c1 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80051c2:	2301      	movs	r3, #1
 80051c4:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80051c6:	f001 ffc1 	bl	800714c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80051ca:	f000 fe29 	bl	8005e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80051ce:	f001 ff8b 	bl	80070e8 <vPortEnterCritical>
 80051d2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051d4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80051d8:	b25b      	sxtb	r3, r3
 80051da:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051de:	d103      	bne.n	80051e8 <xQueueGenericSend+0x174>
 80051e0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051e2:	2200      	movs	r2, #0
 80051e4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80051e8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051ea:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80051ee:	b25b      	sxtb	r3, r3
 80051f0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80051f4:	d103      	bne.n	80051fe <xQueueGenericSend+0x18a>
 80051f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80051f8:	2200      	movs	r2, #0
 80051fa:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80051fe:	f001 ffa5 	bl	800714c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005202:	1d3a      	adds	r2, r7, #4
 8005204:	f107 0314 	add.w	r3, r7, #20
 8005208:	4611      	mov	r1, r2
 800520a:	4618      	mov	r0, r3
 800520c:	f001 f8b0 	bl	8006370 <xTaskCheckForTimeOut>
 8005210:	4603      	mov	r3, r0
 8005212:	2b00      	cmp	r3, #0
 8005214:	d124      	bne.n	8005260 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005216:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005218:	f000 fb28 	bl	800586c <prvIsQueueFull>
 800521c:	4603      	mov	r3, r0
 800521e:	2b00      	cmp	r3, #0
 8005220:	d018      	beq.n	8005254 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005222:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005224:	3310      	adds	r3, #16
 8005226:	687a      	ldr	r2, [r7, #4]
 8005228:	4611      	mov	r1, r2
 800522a:	4618      	mov	r0, r3
 800522c:	f000 ffd4 	bl	80061d8 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005230:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005232:	f000 fab3 	bl	800579c <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005236:	f000 fe01 	bl	8005e3c <xTaskResumeAll>
 800523a:	4603      	mov	r3, r0
 800523c:	2b00      	cmp	r3, #0
 800523e:	f47f af7c 	bne.w	800513a <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8005242:	4b0c      	ldr	r3, [pc, #48]	@ (8005274 <xQueueGenericSend+0x200>)
 8005244:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005248:	601a      	str	r2, [r3, #0]
 800524a:	f3bf 8f4f 	dsb	sy
 800524e:	f3bf 8f6f 	isb	sy
 8005252:	e772      	b.n	800513a <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8005254:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005256:	f000 faa1 	bl	800579c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800525a:	f000 fdef 	bl	8005e3c <xTaskResumeAll>
 800525e:	e76c      	b.n	800513a <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8005260:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005262:	f000 fa9b 	bl	800579c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005266:	f000 fde9 	bl	8005e3c <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800526a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800526c:	4618      	mov	r0, r3
 800526e:	3738      	adds	r7, #56	@ 0x38
 8005270:	46bd      	mov	sp, r7
 8005272:	bd80      	pop	{r7, pc}
 8005274:	e000ed04 	.word	0xe000ed04

08005278 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8005278:	b580      	push	{r7, lr}
 800527a:	b090      	sub	sp, #64	@ 0x40
 800527c:	af00      	add	r7, sp, #0
 800527e:	60f8      	str	r0, [r7, #12]
 8005280:	60b9      	str	r1, [r7, #8]
 8005282:	607a      	str	r2, [r7, #4]
 8005284:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800528a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800528c:	2b00      	cmp	r3, #0
 800528e:	d10b      	bne.n	80052a8 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8005290:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005294:	f383 8811 	msr	BASEPRI, r3
 8005298:	f3bf 8f6f 	isb	sy
 800529c:	f3bf 8f4f 	dsb	sy
 80052a0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 80052a2:	bf00      	nop
 80052a4:	bf00      	nop
 80052a6:	e7fd      	b.n	80052a4 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80052a8:	68bb      	ldr	r3, [r7, #8]
 80052aa:	2b00      	cmp	r3, #0
 80052ac:	d103      	bne.n	80052b6 <xQueueGenericSendFromISR+0x3e>
 80052ae:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80052b2:	2b00      	cmp	r3, #0
 80052b4:	d101      	bne.n	80052ba <xQueueGenericSendFromISR+0x42>
 80052b6:	2301      	movs	r3, #1
 80052b8:	e000      	b.n	80052bc <xQueueGenericSendFromISR+0x44>
 80052ba:	2300      	movs	r3, #0
 80052bc:	2b00      	cmp	r3, #0
 80052be:	d10b      	bne.n	80052d8 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 80052c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052c4:	f383 8811 	msr	BASEPRI, r3
 80052c8:	f3bf 8f6f 	isb	sy
 80052cc:	f3bf 8f4f 	dsb	sy
 80052d0:	627b      	str	r3, [r7, #36]	@ 0x24
}
 80052d2:	bf00      	nop
 80052d4:	bf00      	nop
 80052d6:	e7fd      	b.n	80052d4 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 80052d8:	683b      	ldr	r3, [r7, #0]
 80052da:	2b02      	cmp	r3, #2
 80052dc:	d103      	bne.n	80052e6 <xQueueGenericSendFromISR+0x6e>
 80052de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80052e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80052e2:	2b01      	cmp	r3, #1
 80052e4:	d101      	bne.n	80052ea <xQueueGenericSendFromISR+0x72>
 80052e6:	2301      	movs	r3, #1
 80052e8:	e000      	b.n	80052ec <xQueueGenericSendFromISR+0x74>
 80052ea:	2300      	movs	r3, #0
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d10b      	bne.n	8005308 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80052f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80052f4:	f383 8811 	msr	BASEPRI, r3
 80052f8:	f3bf 8f6f 	isb	sy
 80052fc:	f3bf 8f4f 	dsb	sy
 8005300:	623b      	str	r3, [r7, #32]
}
 8005302:	bf00      	nop
 8005304:	bf00      	nop
 8005306:	e7fd      	b.n	8005304 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8005308:	f001 ffce 	bl	80072a8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800530c:	f3ef 8211 	mrs	r2, BASEPRI
 8005310:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005314:	f383 8811 	msr	BASEPRI, r3
 8005318:	f3bf 8f6f 	isb	sy
 800531c:	f3bf 8f4f 	dsb	sy
 8005320:	61fa      	str	r2, [r7, #28]
 8005322:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8005324:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8005326:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005328:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800532c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800532e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005330:	429a      	cmp	r2, r3
 8005332:	d302      	bcc.n	800533a <xQueueGenericSendFromISR+0xc2>
 8005334:	683b      	ldr	r3, [r7, #0]
 8005336:	2b02      	cmp	r3, #2
 8005338:	d12f      	bne.n	800539a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800533a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800533c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005340:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8005344:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005346:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005348:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800534a:	683a      	ldr	r2, [r7, #0]
 800534c:	68b9      	ldr	r1, [r7, #8]
 800534e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8005350:	f000 f994 	bl	800567c <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8005354:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8005358:	f1b3 3fff 	cmp.w	r3, #4294967295
 800535c:	d112      	bne.n	8005384 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800535e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005360:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005362:	2b00      	cmp	r3, #0
 8005364:	d016      	beq.n	8005394 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005366:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005368:	3324      	adds	r3, #36	@ 0x24
 800536a:	4618      	mov	r0, r3
 800536c:	f000 ff86 	bl	800627c <xTaskRemoveFromEventList>
 8005370:	4603      	mov	r3, r0
 8005372:	2b00      	cmp	r3, #0
 8005374:	d00e      	beq.n	8005394 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d00b      	beq.n	8005394 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2201      	movs	r2, #1
 8005380:	601a      	str	r2, [r3, #0]
 8005382:	e007      	b.n	8005394 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8005384:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8005388:	3301      	adds	r3, #1
 800538a:	b2db      	uxtb	r3, r3
 800538c:	b25a      	sxtb	r2, r3
 800538e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005390:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8005394:	2301      	movs	r3, #1
 8005396:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8005398:	e001      	b.n	800539e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800539a:	2300      	movs	r3, #0
 800539c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800539e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80053a0:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80053a2:	697b      	ldr	r3, [r7, #20]
 80053a4:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 80053a8:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80053aa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 80053ac:	4618      	mov	r0, r3
 80053ae:	3740      	adds	r7, #64	@ 0x40
 80053b0:	46bd      	mov	sp, r7
 80053b2:	bd80      	pop	{r7, pc}

080053b4 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 80053b4:	b580      	push	{r7, lr}
 80053b6:	b08c      	sub	sp, #48	@ 0x30
 80053b8:	af00      	add	r7, sp, #0
 80053ba:	60f8      	str	r0, [r7, #12]
 80053bc:	60b9      	str	r1, [r7, #8]
 80053be:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 80053c0:	2300      	movs	r3, #0
 80053c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80053c4:	68fb      	ldr	r3, [r7, #12]
 80053c6:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80053c8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d10b      	bne.n	80053e6 <xQueueReceive+0x32>
	__asm volatile
 80053ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80053d2:	f383 8811 	msr	BASEPRI, r3
 80053d6:	f3bf 8f6f 	isb	sy
 80053da:	f3bf 8f4f 	dsb	sy
 80053de:	623b      	str	r3, [r7, #32]
}
 80053e0:	bf00      	nop
 80053e2:	bf00      	nop
 80053e4:	e7fd      	b.n	80053e2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80053e6:	68bb      	ldr	r3, [r7, #8]
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d103      	bne.n	80053f4 <xQueueReceive+0x40>
 80053ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80053ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053f0:	2b00      	cmp	r3, #0
 80053f2:	d101      	bne.n	80053f8 <xQueueReceive+0x44>
 80053f4:	2301      	movs	r3, #1
 80053f6:	e000      	b.n	80053fa <xQueueReceive+0x46>
 80053f8:	2300      	movs	r3, #0
 80053fa:	2b00      	cmp	r3, #0
 80053fc:	d10b      	bne.n	8005416 <xQueueReceive+0x62>
	__asm volatile
 80053fe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005402:	f383 8811 	msr	BASEPRI, r3
 8005406:	f3bf 8f6f 	isb	sy
 800540a:	f3bf 8f4f 	dsb	sy
 800540e:	61fb      	str	r3, [r7, #28]
}
 8005410:	bf00      	nop
 8005412:	bf00      	nop
 8005414:	e7fd      	b.n	8005412 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005416:	f001 f8f7 	bl	8006608 <xTaskGetSchedulerState>
 800541a:	4603      	mov	r3, r0
 800541c:	2b00      	cmp	r3, #0
 800541e:	d102      	bne.n	8005426 <xQueueReceive+0x72>
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	2b00      	cmp	r3, #0
 8005424:	d101      	bne.n	800542a <xQueueReceive+0x76>
 8005426:	2301      	movs	r3, #1
 8005428:	e000      	b.n	800542c <xQueueReceive+0x78>
 800542a:	2300      	movs	r3, #0
 800542c:	2b00      	cmp	r3, #0
 800542e:	d10b      	bne.n	8005448 <xQueueReceive+0x94>
	__asm volatile
 8005430:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005434:	f383 8811 	msr	BASEPRI, r3
 8005438:	f3bf 8f6f 	isb	sy
 800543c:	f3bf 8f4f 	dsb	sy
 8005440:	61bb      	str	r3, [r7, #24]
}
 8005442:	bf00      	nop
 8005444:	bf00      	nop
 8005446:	e7fd      	b.n	8005444 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005448:	f001 fe4e 	bl	80070e8 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800544c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800544e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005450:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005452:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005454:	2b00      	cmp	r3, #0
 8005456:	d01f      	beq.n	8005498 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8005458:	68b9      	ldr	r1, [r7, #8]
 800545a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800545c:	f000 f978 	bl	8005750 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005460:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005462:	1e5a      	subs	r2, r3, #1
 8005464:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005466:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005468:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800546a:	691b      	ldr	r3, [r3, #16]
 800546c:	2b00      	cmp	r3, #0
 800546e:	d00f      	beq.n	8005490 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005470:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005472:	3310      	adds	r3, #16
 8005474:	4618      	mov	r0, r3
 8005476:	f000 ff01 	bl	800627c <xTaskRemoveFromEventList>
 800547a:	4603      	mov	r3, r0
 800547c:	2b00      	cmp	r3, #0
 800547e:	d007      	beq.n	8005490 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8005480:	4b3c      	ldr	r3, [pc, #240]	@ (8005574 <xQueueReceive+0x1c0>)
 8005482:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005486:	601a      	str	r2, [r3, #0]
 8005488:	f3bf 8f4f 	dsb	sy
 800548c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8005490:	f001 fe5c 	bl	800714c <vPortExitCritical>
				return pdPASS;
 8005494:	2301      	movs	r3, #1
 8005496:	e069      	b.n	800556c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	2b00      	cmp	r3, #0
 800549c:	d103      	bne.n	80054a6 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800549e:	f001 fe55 	bl	800714c <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80054a2:	2300      	movs	r3, #0
 80054a4:	e062      	b.n	800556c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 80054a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80054a8:	2b00      	cmp	r3, #0
 80054aa:	d106      	bne.n	80054ba <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80054ac:	f107 0310 	add.w	r3, r7, #16
 80054b0:	4618      	mov	r0, r3
 80054b2:	f000 ff47 	bl	8006344 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80054ba:	f001 fe47 	bl	800714c <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 80054be:	f000 fcaf 	bl	8005e20 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 80054c2:	f001 fe11 	bl	80070e8 <vPortEnterCritical>
 80054c6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054c8:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80054cc:	b25b      	sxtb	r3, r3
 80054ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054d2:	d103      	bne.n	80054dc <xQueueReceive+0x128>
 80054d4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054d6:	2200      	movs	r2, #0
 80054d8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80054dc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054de:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80054e2:	b25b      	sxtb	r3, r3
 80054e4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80054e8:	d103      	bne.n	80054f2 <xQueueReceive+0x13e>
 80054ea:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80054ec:	2200      	movs	r2, #0
 80054ee:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80054f2:	f001 fe2b 	bl	800714c <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80054f6:	1d3a      	adds	r2, r7, #4
 80054f8:	f107 0310 	add.w	r3, r7, #16
 80054fc:	4611      	mov	r1, r2
 80054fe:	4618      	mov	r0, r3
 8005500:	f000 ff36 	bl	8006370 <xTaskCheckForTimeOut>
 8005504:	4603      	mov	r3, r0
 8005506:	2b00      	cmp	r3, #0
 8005508:	d123      	bne.n	8005552 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800550a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800550c:	f000 f998 	bl	8005840 <prvIsQueueEmpty>
 8005510:	4603      	mov	r3, r0
 8005512:	2b00      	cmp	r3, #0
 8005514:	d017      	beq.n	8005546 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8005516:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005518:	3324      	adds	r3, #36	@ 0x24
 800551a:	687a      	ldr	r2, [r7, #4]
 800551c:	4611      	mov	r1, r2
 800551e:	4618      	mov	r0, r3
 8005520:	f000 fe5a 	bl	80061d8 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8005524:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005526:	f000 f939 	bl	800579c <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800552a:	f000 fc87 	bl	8005e3c <xTaskResumeAll>
 800552e:	4603      	mov	r3, r0
 8005530:	2b00      	cmp	r3, #0
 8005532:	d189      	bne.n	8005448 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 8005534:	4b0f      	ldr	r3, [pc, #60]	@ (8005574 <xQueueReceive+0x1c0>)
 8005536:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800553a:	601a      	str	r2, [r3, #0]
 800553c:	f3bf 8f4f 	dsb	sy
 8005540:	f3bf 8f6f 	isb	sy
 8005544:	e780      	b.n	8005448 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8005546:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005548:	f000 f928 	bl	800579c <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800554c:	f000 fc76 	bl	8005e3c <xTaskResumeAll>
 8005550:	e77a      	b.n	8005448 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8005552:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8005554:	f000 f922 	bl	800579c <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8005558:	f000 fc70 	bl	8005e3c <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800555c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800555e:	f000 f96f 	bl	8005840 <prvIsQueueEmpty>
 8005562:	4603      	mov	r3, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f43f af6f 	beq.w	8005448 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800556a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800556c:	4618      	mov	r0, r3
 800556e:	3730      	adds	r7, #48	@ 0x30
 8005570:	46bd      	mov	sp, r7
 8005572:	bd80      	pop	{r7, pc}
 8005574:	e000ed04 	.word	0xe000ed04

08005578 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8005578:	b580      	push	{r7, lr}
 800557a:	b08e      	sub	sp, #56	@ 0x38
 800557c:	af00      	add	r7, sp, #0
 800557e:	60f8      	str	r0, [r7, #12]
 8005580:	60b9      	str	r1, [r7, #8]
 8005582:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8005584:	68fb      	ldr	r3, [r7, #12]
 8005586:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005588:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800558a:	2b00      	cmp	r3, #0
 800558c:	d10b      	bne.n	80055a6 <xQueueReceiveFromISR+0x2e>
	__asm volatile
 800558e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005592:	f383 8811 	msr	BASEPRI, r3
 8005596:	f3bf 8f6f 	isb	sy
 800559a:	f3bf 8f4f 	dsb	sy
 800559e:	623b      	str	r3, [r7, #32]
}
 80055a0:	bf00      	nop
 80055a2:	bf00      	nop
 80055a4:	e7fd      	b.n	80055a2 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80055a6:	68bb      	ldr	r3, [r7, #8]
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d103      	bne.n	80055b4 <xQueueReceiveFromISR+0x3c>
 80055ac:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80055b0:	2b00      	cmp	r3, #0
 80055b2:	d101      	bne.n	80055b8 <xQueueReceiveFromISR+0x40>
 80055b4:	2301      	movs	r3, #1
 80055b6:	e000      	b.n	80055ba <xQueueReceiveFromISR+0x42>
 80055b8:	2300      	movs	r3, #0
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d10b      	bne.n	80055d6 <xQueueReceiveFromISR+0x5e>
	__asm volatile
 80055be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055c2:	f383 8811 	msr	BASEPRI, r3
 80055c6:	f3bf 8f6f 	isb	sy
 80055ca:	f3bf 8f4f 	dsb	sy
 80055ce:	61fb      	str	r3, [r7, #28]
}
 80055d0:	bf00      	nop
 80055d2:	bf00      	nop
 80055d4:	e7fd      	b.n	80055d2 <xQueueReceiveFromISR+0x5a>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80055d6:	f001 fe67 	bl	80072a8 <vPortValidateInterruptPriority>
	__asm volatile
 80055da:	f3ef 8211 	mrs	r2, BASEPRI
 80055de:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80055e2:	f383 8811 	msr	BASEPRI, r3
 80055e6:	f3bf 8f6f 	isb	sy
 80055ea:	f3bf 8f4f 	dsb	sy
 80055ee:	61ba      	str	r2, [r7, #24]
 80055f0:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 80055f2:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80055f4:	62fb      	str	r3, [r7, #44]	@ 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80055f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80055f8:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80055fa:	62bb      	str	r3, [r7, #40]	@ 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80055fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d02f      	beq.n	8005662 <xQueueReceiveFromISR+0xea>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 8005602:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005604:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005608:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800560c:	68b9      	ldr	r1, [r7, #8]
 800560e:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005610:	f000 f89e 	bl	8005750 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8005614:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005616:	1e5a      	subs	r2, r3, #1
 8005618:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800561a:	639a      	str	r2, [r3, #56]	@ 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800561c:	f997 3027 	ldrsb.w	r3, [r7, #39]	@ 0x27
 8005620:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005624:	d112      	bne.n	800564c <xQueueReceiveFromISR+0xd4>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005626:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005628:	691b      	ldr	r3, [r3, #16]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d016      	beq.n	800565c <xQueueReceiveFromISR+0xe4>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800562e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005630:	3310      	adds	r3, #16
 8005632:	4618      	mov	r0, r3
 8005634:	f000 fe22 	bl	800627c <xTaskRemoveFromEventList>
 8005638:	4603      	mov	r3, r0
 800563a:	2b00      	cmp	r3, #0
 800563c:	d00e      	beq.n	800565c <xQueueReceiveFromISR+0xe4>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2b00      	cmp	r3, #0
 8005642:	d00b      	beq.n	800565c <xQueueReceiveFromISR+0xe4>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	2201      	movs	r2, #1
 8005648:	601a      	str	r2, [r3, #0]
 800564a:	e007      	b.n	800565c <xQueueReceiveFromISR+0xe4>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800564c:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 8005650:	3301      	adds	r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	b25a      	sxtb	r2, r3
 8005656:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005658:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
			}

			xReturn = pdPASS;
 800565c:	2301      	movs	r3, #1
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	e001      	b.n	8005666 <xQueueReceiveFromISR+0xee>
		}
		else
		{
			xReturn = pdFAIL;
 8005662:	2300      	movs	r3, #0
 8005664:	637b      	str	r3, [r7, #52]	@ 0x34
 8005666:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005668:	613b      	str	r3, [r7, #16]
	__asm volatile
 800566a:	693b      	ldr	r3, [r7, #16]
 800566c:	f383 8811 	msr	BASEPRI, r3
}
 8005670:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8005672:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
}
 8005674:	4618      	mov	r0, r3
 8005676:	3738      	adds	r7, #56	@ 0x38
 8005678:	46bd      	mov	sp, r7
 800567a:	bd80      	pop	{r7, pc}

0800567c <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800567c:	b580      	push	{r7, lr}
 800567e:	b086      	sub	sp, #24
 8005680:	af00      	add	r7, sp, #0
 8005682:	60f8      	str	r0, [r7, #12]
 8005684:	60b9      	str	r1, [r7, #8]
 8005686:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8005688:	2300      	movs	r3, #0
 800568a:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800568c:	68fb      	ldr	r3, [r7, #12]
 800568e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005690:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 8005692:	68fb      	ldr	r3, [r7, #12]
 8005694:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005696:	2b00      	cmp	r3, #0
 8005698:	d10d      	bne.n	80056b6 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	2b00      	cmp	r3, #0
 80056a0:	d14d      	bne.n	800573e <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80056a2:	68fb      	ldr	r3, [r7, #12]
 80056a4:	689b      	ldr	r3, [r3, #8]
 80056a6:	4618      	mov	r0, r3
 80056a8:	f000 ffcc 	bl	8006644 <xTaskPriorityDisinherit>
 80056ac:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2200      	movs	r2, #0
 80056b2:	609a      	str	r2, [r3, #8]
 80056b4:	e043      	b.n	800573e <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	2b00      	cmp	r3, #0
 80056ba:	d119      	bne.n	80056f0 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80056bc:	68fb      	ldr	r3, [r7, #12]
 80056be:	6858      	ldr	r0, [r3, #4]
 80056c0:	68fb      	ldr	r3, [r7, #12]
 80056c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056c4:	461a      	mov	r2, r3
 80056c6:	68b9      	ldr	r1, [r7, #8]
 80056c8:	f002 fb11 	bl	8007cee <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	685a      	ldr	r2, [r3, #4]
 80056d0:	68fb      	ldr	r3, [r7, #12]
 80056d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056d4:	441a      	add	r2, r3
 80056d6:	68fb      	ldr	r3, [r7, #12]
 80056d8:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80056da:	68fb      	ldr	r3, [r7, #12]
 80056dc:	685a      	ldr	r2, [r3, #4]
 80056de:	68fb      	ldr	r3, [r7, #12]
 80056e0:	689b      	ldr	r3, [r3, #8]
 80056e2:	429a      	cmp	r2, r3
 80056e4:	d32b      	bcc.n	800573e <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80056e6:	68fb      	ldr	r3, [r7, #12]
 80056e8:	681a      	ldr	r2, [r3, #0]
 80056ea:	68fb      	ldr	r3, [r7, #12]
 80056ec:	605a      	str	r2, [r3, #4]
 80056ee:	e026      	b.n	800573e <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80056f0:	68fb      	ldr	r3, [r7, #12]
 80056f2:	68d8      	ldr	r0, [r3, #12]
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80056f8:	461a      	mov	r2, r3
 80056fa:	68b9      	ldr	r1, [r7, #8]
 80056fc:	f002 faf7 	bl	8007cee <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8005700:	68fb      	ldr	r3, [r7, #12]
 8005702:	68da      	ldr	r2, [r3, #12]
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005708:	425b      	negs	r3, r3
 800570a:	441a      	add	r2, r3
 800570c:	68fb      	ldr	r3, [r7, #12]
 800570e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8005710:	68fb      	ldr	r3, [r7, #12]
 8005712:	68da      	ldr	r2, [r3, #12]
 8005714:	68fb      	ldr	r3, [r7, #12]
 8005716:	681b      	ldr	r3, [r3, #0]
 8005718:	429a      	cmp	r2, r3
 800571a:	d207      	bcs.n	800572c <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800571c:	68fb      	ldr	r3, [r7, #12]
 800571e:	689a      	ldr	r2, [r3, #8]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005724:	425b      	negs	r3, r3
 8005726:	441a      	add	r2, r3
 8005728:	68fb      	ldr	r3, [r7, #12]
 800572a:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	2b02      	cmp	r3, #2
 8005730:	d105      	bne.n	800573e <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8005732:	693b      	ldr	r3, [r7, #16]
 8005734:	2b00      	cmp	r3, #0
 8005736:	d002      	beq.n	800573e <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 8005738:	693b      	ldr	r3, [r7, #16]
 800573a:	3b01      	subs	r3, #1
 800573c:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800573e:	693b      	ldr	r3, [r7, #16]
 8005740:	1c5a      	adds	r2, r3, #1
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8005746:	697b      	ldr	r3, [r7, #20]
}
 8005748:	4618      	mov	r0, r3
 800574a:	3718      	adds	r7, #24
 800574c:	46bd      	mov	sp, r7
 800574e:	bd80      	pop	{r7, pc}

08005750 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8005750:	b580      	push	{r7, lr}
 8005752:	b082      	sub	sp, #8
 8005754:	af00      	add	r7, sp, #0
 8005756:	6078      	str	r0, [r7, #4]
 8005758:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800575e:	2b00      	cmp	r3, #0
 8005760:	d018      	beq.n	8005794 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	68da      	ldr	r2, [r3, #12]
 8005766:	687b      	ldr	r3, [r7, #4]
 8005768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800576a:	441a      	add	r2, r3
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	68da      	ldr	r2, [r3, #12]
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	689b      	ldr	r3, [r3, #8]
 8005778:	429a      	cmp	r2, r3
 800577a:	d303      	bcc.n	8005784 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	681a      	ldr	r2, [r3, #0]
 8005780:	687b      	ldr	r3, [r7, #4]
 8005782:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	68d9      	ldr	r1, [r3, #12]
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800578c:	461a      	mov	r2, r3
 800578e:	6838      	ldr	r0, [r7, #0]
 8005790:	f002 faad 	bl	8007cee <memcpy>
	}
}
 8005794:	bf00      	nop
 8005796:	3708      	adds	r7, #8
 8005798:	46bd      	mov	sp, r7
 800579a:	bd80      	pop	{r7, pc}

0800579c <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800579c:	b580      	push	{r7, lr}
 800579e:	b084      	sub	sp, #16
 80057a0:	af00      	add	r7, sp, #0
 80057a2:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80057a4:	f001 fca0 	bl	80070e8 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80057ae:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057b0:	e011      	b.n	80057d6 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d012      	beq.n	80057e0 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	3324      	adds	r3, #36	@ 0x24
 80057be:	4618      	mov	r0, r3
 80057c0:	f000 fd5c 	bl	800627c <xTaskRemoveFromEventList>
 80057c4:	4603      	mov	r3, r0
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d001      	beq.n	80057ce <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 80057ca:	f000 fe35 	bl	8006438 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 80057ce:	7bfb      	ldrb	r3, [r7, #15]
 80057d0:	3b01      	subs	r3, #1
 80057d2:	b2db      	uxtb	r3, r3
 80057d4:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 80057d6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80057da:	2b00      	cmp	r3, #0
 80057dc:	dce9      	bgt.n	80057b2 <prvUnlockQueue+0x16>
 80057de:	e000      	b.n	80057e2 <prvUnlockQueue+0x46>
					break;
 80057e0:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 80057e2:	687b      	ldr	r3, [r7, #4]
 80057e4:	22ff      	movs	r2, #255	@ 0xff
 80057e6:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80057ea:	f001 fcaf 	bl	800714c <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80057ee:	f001 fc7b 	bl	80070e8 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80057f8:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80057fa:	e011      	b.n	8005820 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	691b      	ldr	r3, [r3, #16]
 8005800:	2b00      	cmp	r3, #0
 8005802:	d012      	beq.n	800582a <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005804:	687b      	ldr	r3, [r7, #4]
 8005806:	3310      	adds	r3, #16
 8005808:	4618      	mov	r0, r3
 800580a:	f000 fd37 	bl	800627c <xTaskRemoveFromEventList>
 800580e:	4603      	mov	r3, r0
 8005810:	2b00      	cmp	r3, #0
 8005812:	d001      	beq.n	8005818 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8005814:	f000 fe10 	bl	8006438 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8005818:	7bbb      	ldrb	r3, [r7, #14]
 800581a:	3b01      	subs	r3, #1
 800581c:	b2db      	uxtb	r3, r3
 800581e:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8005820:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8005824:	2b00      	cmp	r3, #0
 8005826:	dce9      	bgt.n	80057fc <prvUnlockQueue+0x60>
 8005828:	e000      	b.n	800582c <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800582a:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	22ff      	movs	r2, #255	@ 0xff
 8005830:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 8005834:	f001 fc8a 	bl	800714c <vPortExitCritical>
}
 8005838:	bf00      	nop
 800583a:	3710      	adds	r7, #16
 800583c:	46bd      	mov	sp, r7
 800583e:	bd80      	pop	{r7, pc}

08005840 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8005840:	b580      	push	{r7, lr}
 8005842:	b084      	sub	sp, #16
 8005844:	af00      	add	r7, sp, #0
 8005846:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005848:	f001 fc4e 	bl	80070e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005850:	2b00      	cmp	r3, #0
 8005852:	d102      	bne.n	800585a <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8005854:	2301      	movs	r3, #1
 8005856:	60fb      	str	r3, [r7, #12]
 8005858:	e001      	b.n	800585e <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800585a:	2300      	movs	r3, #0
 800585c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800585e:	f001 fc75 	bl	800714c <vPortExitCritical>

	return xReturn;
 8005862:	68fb      	ldr	r3, [r7, #12]
}
 8005864:	4618      	mov	r0, r3
 8005866:	3710      	adds	r7, #16
 8005868:	46bd      	mov	sp, r7
 800586a:	bd80      	pop	{r7, pc}

0800586c <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800586c:	b580      	push	{r7, lr}
 800586e:	b084      	sub	sp, #16
 8005870:	af00      	add	r7, sp, #0
 8005872:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8005874:	f001 fc38 	bl	80070e8 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005880:	429a      	cmp	r2, r3
 8005882:	d102      	bne.n	800588a <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8005884:	2301      	movs	r3, #1
 8005886:	60fb      	str	r3, [r7, #12]
 8005888:	e001      	b.n	800588e <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800588a:	2300      	movs	r3, #0
 800588c:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800588e:	f001 fc5d 	bl	800714c <vPortExitCritical>

	return xReturn;
 8005892:	68fb      	ldr	r3, [r7, #12]
}
 8005894:	4618      	mov	r0, r3
 8005896:	3710      	adds	r7, #16
 8005898:	46bd      	mov	sp, r7
 800589a:	bd80      	pop	{r7, pc}

0800589c <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800589c:	b480      	push	{r7}
 800589e:	b085      	sub	sp, #20
 80058a0:	af00      	add	r7, sp, #0
 80058a2:	6078      	str	r0, [r7, #4]
 80058a4:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058a6:	2300      	movs	r3, #0
 80058a8:	60fb      	str	r3, [r7, #12]
 80058aa:	e014      	b.n	80058d6 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 80058ac:	4a0f      	ldr	r2, [pc, #60]	@ (80058ec <vQueueAddToRegistry+0x50>)
 80058ae:	68fb      	ldr	r3, [r7, #12]
 80058b0:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d10b      	bne.n	80058d0 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 80058b8:	490c      	ldr	r1, [pc, #48]	@ (80058ec <vQueueAddToRegistry+0x50>)
 80058ba:	68fb      	ldr	r3, [r7, #12]
 80058bc:	683a      	ldr	r2, [r7, #0]
 80058be:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 80058c2:	4a0a      	ldr	r2, [pc, #40]	@ (80058ec <vQueueAddToRegistry+0x50>)
 80058c4:	68fb      	ldr	r3, [r7, #12]
 80058c6:	00db      	lsls	r3, r3, #3
 80058c8:	4413      	add	r3, r2
 80058ca:	687a      	ldr	r2, [r7, #4]
 80058cc:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 80058ce:	e006      	b.n	80058de <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80058d0:	68fb      	ldr	r3, [r7, #12]
 80058d2:	3301      	adds	r3, #1
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	68fb      	ldr	r3, [r7, #12]
 80058d8:	2b07      	cmp	r3, #7
 80058da:	d9e7      	bls.n	80058ac <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 80058dc:	bf00      	nop
 80058de:	bf00      	nop
 80058e0:	3714      	adds	r7, #20
 80058e2:	46bd      	mov	sp, r7
 80058e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e8:	4770      	bx	lr
 80058ea:	bf00      	nop
 80058ec:	200008f0 	.word	0x200008f0

080058f0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b086      	sub	sp, #24
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80058fc:	68fb      	ldr	r3, [r7, #12]
 80058fe:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8005900:	f001 fbf2 	bl	80070e8 <vPortEnterCritical>
 8005904:	697b      	ldr	r3, [r7, #20]
 8005906:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800590a:	b25b      	sxtb	r3, r3
 800590c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005910:	d103      	bne.n	800591a <vQueueWaitForMessageRestricted+0x2a>
 8005912:	697b      	ldr	r3, [r7, #20]
 8005914:	2200      	movs	r2, #0
 8005916:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800591a:	697b      	ldr	r3, [r7, #20]
 800591c:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005920:	b25b      	sxtb	r3, r3
 8005922:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005926:	d103      	bne.n	8005930 <vQueueWaitForMessageRestricted+0x40>
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2200      	movs	r2, #0
 800592c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005930:	f001 fc0c 	bl	800714c <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8005934:	697b      	ldr	r3, [r7, #20]
 8005936:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005938:	2b00      	cmp	r3, #0
 800593a:	d106      	bne.n	800594a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800593c:	697b      	ldr	r3, [r7, #20]
 800593e:	3324      	adds	r3, #36	@ 0x24
 8005940:	687a      	ldr	r2, [r7, #4]
 8005942:	68b9      	ldr	r1, [r7, #8]
 8005944:	4618      	mov	r0, r3
 8005946:	f000 fc6d 	bl	8006224 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800594a:	6978      	ldr	r0, [r7, #20]
 800594c:	f7ff ff26 	bl	800579c <prvUnlockQueue>
	}
 8005950:	bf00      	nop
 8005952:	3718      	adds	r7, #24
 8005954:	46bd      	mov	sp, r7
 8005956:	bd80      	pop	{r7, pc}

08005958 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8005958:	b580      	push	{r7, lr}
 800595a:	b08e      	sub	sp, #56	@ 0x38
 800595c:	af04      	add	r7, sp, #16
 800595e:	60f8      	str	r0, [r7, #12]
 8005960:	60b9      	str	r1, [r7, #8]
 8005962:	607a      	str	r2, [r7, #4]
 8005964:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8005966:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005968:	2b00      	cmp	r3, #0
 800596a:	d10b      	bne.n	8005984 <xTaskCreateStatic+0x2c>
	__asm volatile
 800596c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005970:	f383 8811 	msr	BASEPRI, r3
 8005974:	f3bf 8f6f 	isb	sy
 8005978:	f3bf 8f4f 	dsb	sy
 800597c:	623b      	str	r3, [r7, #32]
}
 800597e:	bf00      	nop
 8005980:	bf00      	nop
 8005982:	e7fd      	b.n	8005980 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8005984:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005986:	2b00      	cmp	r3, #0
 8005988:	d10b      	bne.n	80059a2 <xTaskCreateStatic+0x4a>
	__asm volatile
 800598a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800598e:	f383 8811 	msr	BASEPRI, r3
 8005992:	f3bf 8f6f 	isb	sy
 8005996:	f3bf 8f4f 	dsb	sy
 800599a:	61fb      	str	r3, [r7, #28]
}
 800599c:	bf00      	nop
 800599e:	bf00      	nop
 80059a0:	e7fd      	b.n	800599e <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80059a2:	23a8      	movs	r3, #168	@ 0xa8
 80059a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80059a6:	693b      	ldr	r3, [r7, #16]
 80059a8:	2ba8      	cmp	r3, #168	@ 0xa8
 80059aa:	d00b      	beq.n	80059c4 <xTaskCreateStatic+0x6c>
	__asm volatile
 80059ac:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80059b0:	f383 8811 	msr	BASEPRI, r3
 80059b4:	f3bf 8f6f 	isb	sy
 80059b8:	f3bf 8f4f 	dsb	sy
 80059bc:	61bb      	str	r3, [r7, #24]
}
 80059be:	bf00      	nop
 80059c0:	bf00      	nop
 80059c2:	e7fd      	b.n	80059c0 <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80059c4:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80059c6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d01e      	beq.n	8005a0a <xTaskCreateStatic+0xb2>
 80059cc:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80059ce:	2b00      	cmp	r3, #0
 80059d0:	d01b      	beq.n	8005a0a <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80059d2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80059d4:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80059d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059d8:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80059da:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80059dc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059de:	2202      	movs	r2, #2
 80059e0:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80059e4:	2300      	movs	r3, #0
 80059e6:	9303      	str	r3, [sp, #12]
 80059e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80059ea:	9302      	str	r3, [sp, #8]
 80059ec:	f107 0314 	add.w	r3, r7, #20
 80059f0:	9301      	str	r3, [sp, #4]
 80059f2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80059f4:	9300      	str	r3, [sp, #0]
 80059f6:	683b      	ldr	r3, [r7, #0]
 80059f8:	687a      	ldr	r2, [r7, #4]
 80059fa:	68b9      	ldr	r1, [r7, #8]
 80059fc:	68f8      	ldr	r0, [r7, #12]
 80059fe:	f000 f851 	bl	8005aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a02:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 8005a04:	f000 f8f6 	bl	8005bf4 <prvAddNewTaskToReadyList>
 8005a08:	e001      	b.n	8005a0e <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 8005a0a:	2300      	movs	r3, #0
 8005a0c:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8005a0e:	697b      	ldr	r3, [r7, #20]
	}
 8005a10:	4618      	mov	r0, r3
 8005a12:	3728      	adds	r7, #40	@ 0x28
 8005a14:	46bd      	mov	sp, r7
 8005a16:	bd80      	pop	{r7, pc}

08005a18 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8005a18:	b580      	push	{r7, lr}
 8005a1a:	b08c      	sub	sp, #48	@ 0x30
 8005a1c:	af04      	add	r7, sp, #16
 8005a1e:	60f8      	str	r0, [r7, #12]
 8005a20:	60b9      	str	r1, [r7, #8]
 8005a22:	603b      	str	r3, [r7, #0]
 8005a24:	4613      	mov	r3, r2
 8005a26:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8005a28:	88fb      	ldrh	r3, [r7, #6]
 8005a2a:	009b      	lsls	r3, r3, #2
 8005a2c:	4618      	mov	r0, r3
 8005a2e:	f001 fc7d 	bl	800732c <pvPortMalloc>
 8005a32:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8005a34:	697b      	ldr	r3, [r7, #20]
 8005a36:	2b00      	cmp	r3, #0
 8005a38:	d00e      	beq.n	8005a58 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8005a3a:	20a8      	movs	r0, #168	@ 0xa8
 8005a3c:	f001 fc76 	bl	800732c <pvPortMalloc>
 8005a40:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8005a42:	69fb      	ldr	r3, [r7, #28]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d003      	beq.n	8005a50 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8005a48:	69fb      	ldr	r3, [r7, #28]
 8005a4a:	697a      	ldr	r2, [r7, #20]
 8005a4c:	631a      	str	r2, [r3, #48]	@ 0x30
 8005a4e:	e005      	b.n	8005a5c <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8005a50:	6978      	ldr	r0, [r7, #20]
 8005a52:	f001 fd39 	bl	80074c8 <vPortFree>
 8005a56:	e001      	b.n	8005a5c <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8005a58:	2300      	movs	r3, #0
 8005a5a:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8005a5c:	69fb      	ldr	r3, [r7, #28]
 8005a5e:	2b00      	cmp	r3, #0
 8005a60:	d017      	beq.n	8005a92 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8005a62:	69fb      	ldr	r3, [r7, #28]
 8005a64:	2200      	movs	r2, #0
 8005a66:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8005a6a:	88fa      	ldrh	r2, [r7, #6]
 8005a6c:	2300      	movs	r3, #0
 8005a6e:	9303      	str	r3, [sp, #12]
 8005a70:	69fb      	ldr	r3, [r7, #28]
 8005a72:	9302      	str	r3, [sp, #8]
 8005a74:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005a76:	9301      	str	r3, [sp, #4]
 8005a78:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005a7a:	9300      	str	r3, [sp, #0]
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	68b9      	ldr	r1, [r7, #8]
 8005a80:	68f8      	ldr	r0, [r7, #12]
 8005a82:	f000 f80f 	bl	8005aa4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8005a86:	69f8      	ldr	r0, [r7, #28]
 8005a88:	f000 f8b4 	bl	8005bf4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8005a8c:	2301      	movs	r3, #1
 8005a8e:	61bb      	str	r3, [r7, #24]
 8005a90:	e002      	b.n	8005a98 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8005a92:	f04f 33ff 	mov.w	r3, #4294967295
 8005a96:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8005a98:	69bb      	ldr	r3, [r7, #24]
	}
 8005a9a:	4618      	mov	r0, r3
 8005a9c:	3720      	adds	r7, #32
 8005a9e:	46bd      	mov	sp, r7
 8005aa0:	bd80      	pop	{r7, pc}
	...

08005aa4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8005aa4:	b580      	push	{r7, lr}
 8005aa6:	b088      	sub	sp, #32
 8005aa8:	af00      	add	r7, sp, #0
 8005aaa:	60f8      	str	r0, [r7, #12]
 8005aac:	60b9      	str	r1, [r7, #8]
 8005aae:	607a      	str	r2, [r7, #4]
 8005ab0:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 8005ab2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ab4:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	009b      	lsls	r3, r3, #2
 8005aba:	461a      	mov	r2, r3
 8005abc:	21a5      	movs	r1, #165	@ 0xa5
 8005abe:	f002 f83d 	bl	8007b3c <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8005ac2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ac4:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8005acc:	3b01      	subs	r3, #1
 8005ace:	009b      	lsls	r3, r3, #2
 8005ad0:	4413      	add	r3, r2
 8005ad2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8005ad4:	69bb      	ldr	r3, [r7, #24]
 8005ad6:	f023 0307 	bic.w	r3, r3, #7
 8005ada:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8005adc:	69bb      	ldr	r3, [r7, #24]
 8005ade:	f003 0307 	and.w	r3, r3, #7
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d00b      	beq.n	8005afe <prvInitialiseNewTask+0x5a>
	__asm volatile
 8005ae6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005aea:	f383 8811 	msr	BASEPRI, r3
 8005aee:	f3bf 8f6f 	isb	sy
 8005af2:	f3bf 8f4f 	dsb	sy
 8005af6:	617b      	str	r3, [r7, #20]
}
 8005af8:	bf00      	nop
 8005afa:	bf00      	nop
 8005afc:	e7fd      	b.n	8005afa <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8005afe:	68bb      	ldr	r3, [r7, #8]
 8005b00:	2b00      	cmp	r3, #0
 8005b02:	d01f      	beq.n	8005b44 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b04:	2300      	movs	r3, #0
 8005b06:	61fb      	str	r3, [r7, #28]
 8005b08:	e012      	b.n	8005b30 <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8005b0a:	68ba      	ldr	r2, [r7, #8]
 8005b0c:	69fb      	ldr	r3, [r7, #28]
 8005b0e:	4413      	add	r3, r2
 8005b10:	7819      	ldrb	r1, [r3, #0]
 8005b12:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b14:	69fb      	ldr	r3, [r7, #28]
 8005b16:	4413      	add	r3, r2
 8005b18:	3334      	adds	r3, #52	@ 0x34
 8005b1a:	460a      	mov	r2, r1
 8005b1c:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8005b1e:	68ba      	ldr	r2, [r7, #8]
 8005b20:	69fb      	ldr	r3, [r7, #28]
 8005b22:	4413      	add	r3, r2
 8005b24:	781b      	ldrb	r3, [r3, #0]
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d006      	beq.n	8005b38 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8005b2a:	69fb      	ldr	r3, [r7, #28]
 8005b2c:	3301      	adds	r3, #1
 8005b2e:	61fb      	str	r3, [r7, #28]
 8005b30:	69fb      	ldr	r3, [r7, #28]
 8005b32:	2b0f      	cmp	r3, #15
 8005b34:	d9e9      	bls.n	8005b0a <prvInitialiseNewTask+0x66>
 8005b36:	e000      	b.n	8005b3a <prvInitialiseNewTask+0x96>
			{
				break;
 8005b38:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8005b3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8005b42:	e003      	b.n	8005b4c <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8005b44:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b46:	2200      	movs	r2, #0
 8005b48:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8005b4c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b4e:	2b37      	cmp	r3, #55	@ 0x37
 8005b50:	d901      	bls.n	8005b56 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8005b52:	2337      	movs	r3, #55	@ 0x37
 8005b54:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8005b56:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b58:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b5a:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8005b5c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b5e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8005b60:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8005b62:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b64:	2200      	movs	r2, #0
 8005b66:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8005b68:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b6a:	3304      	adds	r3, #4
 8005b6c:	4618      	mov	r0, r3
 8005b6e:	f7ff f8a7 	bl	8004cc0 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8005b72:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b74:	3318      	adds	r3, #24
 8005b76:	4618      	mov	r0, r3
 8005b78:	f7ff f8a2 	bl	8004cc0 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8005b7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b7e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b80:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005b82:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b84:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8005b88:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8a:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8005b8c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b8e:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005b90:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8005b92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b94:	2200      	movs	r2, #0
 8005b96:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8005b9a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8005ba2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba4:	3354      	adds	r3, #84	@ 0x54
 8005ba6:	224c      	movs	r2, #76	@ 0x4c
 8005ba8:	2100      	movs	r1, #0
 8005baa:	4618      	mov	r0, r3
 8005bac:	f001 ffc6 	bl	8007b3c <memset>
 8005bb0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb2:	4a0d      	ldr	r2, [pc, #52]	@ (8005be8 <prvInitialiseNewTask+0x144>)
 8005bb4:	659a      	str	r2, [r3, #88]	@ 0x58
 8005bb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bb8:	4a0c      	ldr	r2, [pc, #48]	@ (8005bec <prvInitialiseNewTask+0x148>)
 8005bba:	65da      	str	r2, [r3, #92]	@ 0x5c
 8005bbc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bbe:	4a0c      	ldr	r2, [pc, #48]	@ (8005bf0 <prvInitialiseNewTask+0x14c>)
 8005bc0:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8005bc2:	683a      	ldr	r2, [r7, #0]
 8005bc4:	68f9      	ldr	r1, [r7, #12]
 8005bc6:	69b8      	ldr	r0, [r7, #24]
 8005bc8:	f001 f95a 	bl	8006e80 <pxPortInitialiseStack>
 8005bcc:	4602      	mov	r2, r0
 8005bce:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005bd0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8005bd2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d002      	beq.n	8005bde <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8005bd8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005bda:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005bdc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005bde:	bf00      	nop
 8005be0:	3720      	adds	r7, #32
 8005be2:	46bd      	mov	sp, r7
 8005be4:	bd80      	pop	{r7, pc}
 8005be6:	bf00      	nop
 8005be8:	20004b84 	.word	0x20004b84
 8005bec:	20004bec 	.word	0x20004bec
 8005bf0:	20004c54 	.word	0x20004c54

08005bf4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8005bf4:	b580      	push	{r7, lr}
 8005bf6:	b082      	sub	sp, #8
 8005bf8:	af00      	add	r7, sp, #0
 8005bfa:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8005bfc:	f001 fa74 	bl	80070e8 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8005c00:	4b2d      	ldr	r3, [pc, #180]	@ (8005cb8 <prvAddNewTaskToReadyList+0xc4>)
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	3301      	adds	r3, #1
 8005c06:	4a2c      	ldr	r2, [pc, #176]	@ (8005cb8 <prvAddNewTaskToReadyList+0xc4>)
 8005c08:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8005c0a:	4b2c      	ldr	r3, [pc, #176]	@ (8005cbc <prvAddNewTaskToReadyList+0xc8>)
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	2b00      	cmp	r3, #0
 8005c10:	d109      	bne.n	8005c26 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8005c12:	4a2a      	ldr	r2, [pc, #168]	@ (8005cbc <prvAddNewTaskToReadyList+0xc8>)
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8005c18:	4b27      	ldr	r3, [pc, #156]	@ (8005cb8 <prvAddNewTaskToReadyList+0xc4>)
 8005c1a:	681b      	ldr	r3, [r3, #0]
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	d110      	bne.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8005c20:	f000 fc2e 	bl	8006480 <prvInitialiseTaskLists>
 8005c24:	e00d      	b.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8005c26:	4b26      	ldr	r3, [pc, #152]	@ (8005cc0 <prvAddNewTaskToReadyList+0xcc>)
 8005c28:	681b      	ldr	r3, [r3, #0]
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d109      	bne.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8005c2e:	4b23      	ldr	r3, [pc, #140]	@ (8005cbc <prvAddNewTaskToReadyList+0xc8>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c38:	429a      	cmp	r2, r3
 8005c3a:	d802      	bhi.n	8005c42 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8005c3c:	4a1f      	ldr	r2, [pc, #124]	@ (8005cbc <prvAddNewTaskToReadyList+0xc8>)
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8005c42:	4b20      	ldr	r3, [pc, #128]	@ (8005cc4 <prvAddNewTaskToReadyList+0xd0>)
 8005c44:	681b      	ldr	r3, [r3, #0]
 8005c46:	3301      	adds	r3, #1
 8005c48:	4a1e      	ldr	r2, [pc, #120]	@ (8005cc4 <prvAddNewTaskToReadyList+0xd0>)
 8005c4a:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8005c4c:	4b1d      	ldr	r3, [pc, #116]	@ (8005cc4 <prvAddNewTaskToReadyList+0xd0>)
 8005c4e:	681a      	ldr	r2, [r3, #0]
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8005c54:	687b      	ldr	r3, [r7, #4]
 8005c56:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c58:	4b1b      	ldr	r3, [pc, #108]	@ (8005cc8 <prvAddNewTaskToReadyList+0xd4>)
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	429a      	cmp	r2, r3
 8005c5e:	d903      	bls.n	8005c68 <prvAddNewTaskToReadyList+0x74>
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c64:	4a18      	ldr	r2, [pc, #96]	@ (8005cc8 <prvAddNewTaskToReadyList+0xd4>)
 8005c66:	6013      	str	r3, [r2, #0]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c6c:	4613      	mov	r3, r2
 8005c6e:	009b      	lsls	r3, r3, #2
 8005c70:	4413      	add	r3, r2
 8005c72:	009b      	lsls	r3, r3, #2
 8005c74:	4a15      	ldr	r2, [pc, #84]	@ (8005ccc <prvAddNewTaskToReadyList+0xd8>)
 8005c76:	441a      	add	r2, r3
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	3304      	adds	r3, #4
 8005c7c:	4619      	mov	r1, r3
 8005c7e:	4610      	mov	r0, r2
 8005c80:	f7ff f82b 	bl	8004cda <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8005c84:	f001 fa62 	bl	800714c <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8005c88:	4b0d      	ldr	r3, [pc, #52]	@ (8005cc0 <prvAddNewTaskToReadyList+0xcc>)
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d00e      	beq.n	8005cae <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8005c90:	4b0a      	ldr	r3, [pc, #40]	@ (8005cbc <prvAddNewTaskToReadyList+0xc8>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005c9a:	429a      	cmp	r2, r3
 8005c9c:	d207      	bcs.n	8005cae <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8005c9e:	4b0c      	ldr	r3, [pc, #48]	@ (8005cd0 <prvAddNewTaskToReadyList+0xdc>)
 8005ca0:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005ca4:	601a      	str	r2, [r3, #0]
 8005ca6:	f3bf 8f4f 	dsb	sy
 8005caa:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8005cae:	bf00      	nop
 8005cb0:	3708      	adds	r7, #8
 8005cb2:	46bd      	mov	sp, r7
 8005cb4:	bd80      	pop	{r7, pc}
 8005cb6:	bf00      	nop
 8005cb8:	20000e04 	.word	0x20000e04
 8005cbc:	20000930 	.word	0x20000930
 8005cc0:	20000e10 	.word	0x20000e10
 8005cc4:	20000e20 	.word	0x20000e20
 8005cc8:	20000e0c 	.word	0x20000e0c
 8005ccc:	20000934 	.word	0x20000934
 8005cd0:	e000ed04 	.word	0xe000ed04

08005cd4 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8005cd4:	b580      	push	{r7, lr}
 8005cd6:	b084      	sub	sp, #16
 8005cd8:	af00      	add	r7, sp, #0
 8005cda:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8005cdc:	2300      	movs	r3, #0
 8005cde:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	2b00      	cmp	r3, #0
 8005ce4:	d018      	beq.n	8005d18 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8005ce6:	4b14      	ldr	r3, [pc, #80]	@ (8005d38 <vTaskDelay+0x64>)
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	2b00      	cmp	r3, #0
 8005cec:	d00b      	beq.n	8005d06 <vTaskDelay+0x32>
	__asm volatile
 8005cee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cf2:	f383 8811 	msr	BASEPRI, r3
 8005cf6:	f3bf 8f6f 	isb	sy
 8005cfa:	f3bf 8f4f 	dsb	sy
 8005cfe:	60bb      	str	r3, [r7, #8]
}
 8005d00:	bf00      	nop
 8005d02:	bf00      	nop
 8005d04:	e7fd      	b.n	8005d02 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8005d06:	f000 f88b 	bl	8005e20 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8005d0a:	2100      	movs	r1, #0
 8005d0c:	6878      	ldr	r0, [r7, #4]
 8005d0e:	f000 fd09 	bl	8006724 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8005d12:	f000 f893 	bl	8005e3c <xTaskResumeAll>
 8005d16:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8005d18:	68fb      	ldr	r3, [r7, #12]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d107      	bne.n	8005d2e <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 8005d1e:	4b07      	ldr	r3, [pc, #28]	@ (8005d3c <vTaskDelay+0x68>)
 8005d20:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005d24:	601a      	str	r2, [r3, #0]
 8005d26:	f3bf 8f4f 	dsb	sy
 8005d2a:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8005d2e:	bf00      	nop
 8005d30:	3710      	adds	r7, #16
 8005d32:	46bd      	mov	sp, r7
 8005d34:	bd80      	pop	{r7, pc}
 8005d36:	bf00      	nop
 8005d38:	20000e2c 	.word	0x20000e2c
 8005d3c:	e000ed04 	.word	0xe000ed04

08005d40 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b08a      	sub	sp, #40	@ 0x28
 8005d44:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8005d46:	2300      	movs	r3, #0
 8005d48:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8005d4a:	2300      	movs	r3, #0
 8005d4c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8005d4e:	463a      	mov	r2, r7
 8005d50:	1d39      	adds	r1, r7, #4
 8005d52:	f107 0308 	add.w	r3, r7, #8
 8005d56:	4618      	mov	r0, r3
 8005d58:	f7fe ff5e 	bl	8004c18 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8005d5c:	6839      	ldr	r1, [r7, #0]
 8005d5e:	687b      	ldr	r3, [r7, #4]
 8005d60:	68ba      	ldr	r2, [r7, #8]
 8005d62:	9202      	str	r2, [sp, #8]
 8005d64:	9301      	str	r3, [sp, #4]
 8005d66:	2300      	movs	r3, #0
 8005d68:	9300      	str	r3, [sp, #0]
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	460a      	mov	r2, r1
 8005d6e:	4924      	ldr	r1, [pc, #144]	@ (8005e00 <vTaskStartScheduler+0xc0>)
 8005d70:	4824      	ldr	r0, [pc, #144]	@ (8005e04 <vTaskStartScheduler+0xc4>)
 8005d72:	f7ff fdf1 	bl	8005958 <xTaskCreateStatic>
 8005d76:	4603      	mov	r3, r0
 8005d78:	4a23      	ldr	r2, [pc, #140]	@ (8005e08 <vTaskStartScheduler+0xc8>)
 8005d7a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8005d7c:	4b22      	ldr	r3, [pc, #136]	@ (8005e08 <vTaskStartScheduler+0xc8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d002      	beq.n	8005d8a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8005d84:	2301      	movs	r3, #1
 8005d86:	617b      	str	r3, [r7, #20]
 8005d88:	e001      	b.n	8005d8e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8005d8a:	2300      	movs	r3, #0
 8005d8c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8005d8e:	697b      	ldr	r3, [r7, #20]
 8005d90:	2b01      	cmp	r3, #1
 8005d92:	d102      	bne.n	8005d9a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8005d94:	f000 fd1a 	bl	80067cc <xTimerCreateTimerTask>
 8005d98:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8005d9a:	697b      	ldr	r3, [r7, #20]
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d11b      	bne.n	8005dd8 <vTaskStartScheduler+0x98>
	__asm volatile
 8005da0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005da4:	f383 8811 	msr	BASEPRI, r3
 8005da8:	f3bf 8f6f 	isb	sy
 8005dac:	f3bf 8f4f 	dsb	sy
 8005db0:	613b      	str	r3, [r7, #16]
}
 8005db2:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8005db4:	4b15      	ldr	r3, [pc, #84]	@ (8005e0c <vTaskStartScheduler+0xcc>)
 8005db6:	681b      	ldr	r3, [r3, #0]
 8005db8:	3354      	adds	r3, #84	@ 0x54
 8005dba:	4a15      	ldr	r2, [pc, #84]	@ (8005e10 <vTaskStartScheduler+0xd0>)
 8005dbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8005dbe:	4b15      	ldr	r3, [pc, #84]	@ (8005e14 <vTaskStartScheduler+0xd4>)
 8005dc0:	f04f 32ff 	mov.w	r2, #4294967295
 8005dc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8005dc6:	4b14      	ldr	r3, [pc, #80]	@ (8005e18 <vTaskStartScheduler+0xd8>)
 8005dc8:	2201      	movs	r2, #1
 8005dca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8005dcc:	4b13      	ldr	r3, [pc, #76]	@ (8005e1c <vTaskStartScheduler+0xdc>)
 8005dce:	2200      	movs	r2, #0
 8005dd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8005dd2:	f001 f8e5 	bl	8006fa0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8005dd6:	e00f      	b.n	8005df8 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8005dd8:	697b      	ldr	r3, [r7, #20]
 8005dda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005dde:	d10b      	bne.n	8005df8 <vTaskStartScheduler+0xb8>
	__asm volatile
 8005de0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005de4:	f383 8811 	msr	BASEPRI, r3
 8005de8:	f3bf 8f6f 	isb	sy
 8005dec:	f3bf 8f4f 	dsb	sy
 8005df0:	60fb      	str	r3, [r7, #12]
}
 8005df2:	bf00      	nop
 8005df4:	bf00      	nop
 8005df6:	e7fd      	b.n	8005df4 <vTaskStartScheduler+0xb4>
}
 8005df8:	bf00      	nop
 8005dfa:	3718      	adds	r7, #24
 8005dfc:	46bd      	mov	sp, r7
 8005dfe:	bd80      	pop	{r7, pc}
 8005e00:	08009ed4 	.word	0x08009ed4
 8005e04:	08006451 	.word	0x08006451
 8005e08:	20000e28 	.word	0x20000e28
 8005e0c:	20000930 	.word	0x20000930
 8005e10:	2000001c 	.word	0x2000001c
 8005e14:	20000e24 	.word	0x20000e24
 8005e18:	20000e10 	.word	0x20000e10
 8005e1c:	20000e08 	.word	0x20000e08

08005e20 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8005e20:	b480      	push	{r7}
 8005e22:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8005e24:	4b04      	ldr	r3, [pc, #16]	@ (8005e38 <vTaskSuspendAll+0x18>)
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	3301      	adds	r3, #1
 8005e2a:	4a03      	ldr	r2, [pc, #12]	@ (8005e38 <vTaskSuspendAll+0x18>)
 8005e2c:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8005e2e:	bf00      	nop
 8005e30:	46bd      	mov	sp, r7
 8005e32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e36:	4770      	bx	lr
 8005e38:	20000e2c 	.word	0x20000e2c

08005e3c <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8005e3c:	b580      	push	{r7, lr}
 8005e3e:	b084      	sub	sp, #16
 8005e40:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8005e42:	2300      	movs	r3, #0
 8005e44:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8005e46:	2300      	movs	r3, #0
 8005e48:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8005e4a:	4b42      	ldr	r3, [pc, #264]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d10b      	bne.n	8005e6a <xTaskResumeAll+0x2e>
	__asm volatile
 8005e52:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e56:	f383 8811 	msr	BASEPRI, r3
 8005e5a:	f3bf 8f6f 	isb	sy
 8005e5e:	f3bf 8f4f 	dsb	sy
 8005e62:	603b      	str	r3, [r7, #0]
}
 8005e64:	bf00      	nop
 8005e66:	bf00      	nop
 8005e68:	e7fd      	b.n	8005e66 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8005e6a:	f001 f93d 	bl	80070e8 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8005e6e:	4b39      	ldr	r3, [pc, #228]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	3b01      	subs	r3, #1
 8005e74:	4a37      	ldr	r2, [pc, #220]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e76:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005e78:	4b36      	ldr	r3, [pc, #216]	@ (8005f54 <xTaskResumeAll+0x118>)
 8005e7a:	681b      	ldr	r3, [r3, #0]
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d162      	bne.n	8005f46 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8005e80:	4b35      	ldr	r3, [pc, #212]	@ (8005f58 <xTaskResumeAll+0x11c>)
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	2b00      	cmp	r3, #0
 8005e86:	d05e      	beq.n	8005f46 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005e88:	e02f      	b.n	8005eea <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8005e8a:	4b34      	ldr	r3, [pc, #208]	@ (8005f5c <xTaskResumeAll+0x120>)
 8005e8c:	68db      	ldr	r3, [r3, #12]
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8005e92:	68fb      	ldr	r3, [r7, #12]
 8005e94:	3318      	adds	r3, #24
 8005e96:	4618      	mov	r0, r3
 8005e98:	f7fe ff7c 	bl	8004d94 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8005e9c:	68fb      	ldr	r3, [r7, #12]
 8005e9e:	3304      	adds	r3, #4
 8005ea0:	4618      	mov	r0, r3
 8005ea2:	f7fe ff77 	bl	8004d94 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8005ea6:	68fb      	ldr	r3, [r7, #12]
 8005ea8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eaa:	4b2d      	ldr	r3, [pc, #180]	@ (8005f60 <xTaskResumeAll+0x124>)
 8005eac:	681b      	ldr	r3, [r3, #0]
 8005eae:	429a      	cmp	r2, r3
 8005eb0:	d903      	bls.n	8005eba <xTaskResumeAll+0x7e>
 8005eb2:	68fb      	ldr	r3, [r7, #12]
 8005eb4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005eb6:	4a2a      	ldr	r2, [pc, #168]	@ (8005f60 <xTaskResumeAll+0x124>)
 8005eb8:	6013      	str	r3, [r2, #0]
 8005eba:	68fb      	ldr	r3, [r7, #12]
 8005ebc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005ebe:	4613      	mov	r3, r2
 8005ec0:	009b      	lsls	r3, r3, #2
 8005ec2:	4413      	add	r3, r2
 8005ec4:	009b      	lsls	r3, r3, #2
 8005ec6:	4a27      	ldr	r2, [pc, #156]	@ (8005f64 <xTaskResumeAll+0x128>)
 8005ec8:	441a      	add	r2, r3
 8005eca:	68fb      	ldr	r3, [r7, #12]
 8005ecc:	3304      	adds	r3, #4
 8005ece:	4619      	mov	r1, r3
 8005ed0:	4610      	mov	r0, r2
 8005ed2:	f7fe ff02 	bl	8004cda <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8005ed6:	68fb      	ldr	r3, [r7, #12]
 8005ed8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8005eda:	4b23      	ldr	r3, [pc, #140]	@ (8005f68 <xTaskResumeAll+0x12c>)
 8005edc:	681b      	ldr	r3, [r3, #0]
 8005ede:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005ee0:	429a      	cmp	r2, r3
 8005ee2:	d302      	bcc.n	8005eea <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8005ee4:	4b21      	ldr	r3, [pc, #132]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005ee6:	2201      	movs	r2, #1
 8005ee8:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8005eea:	4b1c      	ldr	r3, [pc, #112]	@ (8005f5c <xTaskResumeAll+0x120>)
 8005eec:	681b      	ldr	r3, [r3, #0]
 8005eee:	2b00      	cmp	r3, #0
 8005ef0:	d1cb      	bne.n	8005e8a <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8005ef2:	68fb      	ldr	r3, [r7, #12]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d001      	beq.n	8005efc <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8005ef8:	f000 fb66 	bl	80065c8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8005efc:	4b1c      	ldr	r3, [pc, #112]	@ (8005f70 <xTaskResumeAll+0x134>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	d010      	beq.n	8005f2a <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8005f08:	f000 f846 	bl	8005f98 <xTaskIncrementTick>
 8005f0c:	4603      	mov	r3, r0
 8005f0e:	2b00      	cmp	r3, #0
 8005f10:	d002      	beq.n	8005f18 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8005f12:	4b16      	ldr	r3, [pc, #88]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005f14:	2201      	movs	r2, #1
 8005f16:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	3b01      	subs	r3, #1
 8005f1c:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8005f1e:	687b      	ldr	r3, [r7, #4]
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d1f1      	bne.n	8005f08 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8005f24:	4b12      	ldr	r3, [pc, #72]	@ (8005f70 <xTaskResumeAll+0x134>)
 8005f26:	2200      	movs	r2, #0
 8005f28:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8005f2a:	4b10      	ldr	r3, [pc, #64]	@ (8005f6c <xTaskResumeAll+0x130>)
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d009      	beq.n	8005f46 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8005f32:	2301      	movs	r3, #1
 8005f34:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8005f36:	4b0f      	ldr	r3, [pc, #60]	@ (8005f74 <xTaskResumeAll+0x138>)
 8005f38:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3c:	601a      	str	r2, [r3, #0]
 8005f3e:	f3bf 8f4f 	dsb	sy
 8005f42:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8005f46:	f001 f901 	bl	800714c <vPortExitCritical>

	return xAlreadyYielded;
 8005f4a:	68bb      	ldr	r3, [r7, #8]
}
 8005f4c:	4618      	mov	r0, r3
 8005f4e:	3710      	adds	r7, #16
 8005f50:	46bd      	mov	sp, r7
 8005f52:	bd80      	pop	{r7, pc}
 8005f54:	20000e2c 	.word	0x20000e2c
 8005f58:	20000e04 	.word	0x20000e04
 8005f5c:	20000dc4 	.word	0x20000dc4
 8005f60:	20000e0c 	.word	0x20000e0c
 8005f64:	20000934 	.word	0x20000934
 8005f68:	20000930 	.word	0x20000930
 8005f6c:	20000e18 	.word	0x20000e18
 8005f70:	20000e14 	.word	0x20000e14
 8005f74:	e000ed04 	.word	0xe000ed04

08005f78 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8005f78:	b480      	push	{r7}
 8005f7a:	b083      	sub	sp, #12
 8005f7c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8005f7e:	4b05      	ldr	r3, [pc, #20]	@ (8005f94 <xTaskGetTickCount+0x1c>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8005f84:	687b      	ldr	r3, [r7, #4]
}
 8005f86:	4618      	mov	r0, r3
 8005f88:	370c      	adds	r7, #12
 8005f8a:	46bd      	mov	sp, r7
 8005f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f90:	4770      	bx	lr
 8005f92:	bf00      	nop
 8005f94:	20000e08 	.word	0x20000e08

08005f98 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8005f98:	b580      	push	{r7, lr}
 8005f9a:	b086      	sub	sp, #24
 8005f9c:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8005f9e:	2300      	movs	r3, #0
 8005fa0:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8005fa2:	4b4f      	ldr	r3, [pc, #316]	@ (80060e0 <xTaskIncrementTick+0x148>)
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2b00      	cmp	r3, #0
 8005fa8:	f040 8090 	bne.w	80060cc <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8005fac:	4b4d      	ldr	r3, [pc, #308]	@ (80060e4 <xTaskIncrementTick+0x14c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	3301      	adds	r3, #1
 8005fb2:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8005fb4:	4a4b      	ldr	r2, [pc, #300]	@ (80060e4 <xTaskIncrementTick+0x14c>)
 8005fb6:	693b      	ldr	r3, [r7, #16]
 8005fb8:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8005fba:	693b      	ldr	r3, [r7, #16]
 8005fbc:	2b00      	cmp	r3, #0
 8005fbe:	d121      	bne.n	8006004 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8005fc0:	4b49      	ldr	r3, [pc, #292]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	681b      	ldr	r3, [r3, #0]
 8005fc6:	2b00      	cmp	r3, #0
 8005fc8:	d00b      	beq.n	8005fe2 <xTaskIncrementTick+0x4a>
	__asm volatile
 8005fca:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005fce:	f383 8811 	msr	BASEPRI, r3
 8005fd2:	f3bf 8f6f 	isb	sy
 8005fd6:	f3bf 8f4f 	dsb	sy
 8005fda:	603b      	str	r3, [r7, #0]
}
 8005fdc:	bf00      	nop
 8005fde:	bf00      	nop
 8005fe0:	e7fd      	b.n	8005fde <xTaskIncrementTick+0x46>
 8005fe2:	4b41      	ldr	r3, [pc, #260]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	60fb      	str	r3, [r7, #12]
 8005fe8:	4b40      	ldr	r3, [pc, #256]	@ (80060ec <xTaskIncrementTick+0x154>)
 8005fea:	681b      	ldr	r3, [r3, #0]
 8005fec:	4a3e      	ldr	r2, [pc, #248]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8005fee:	6013      	str	r3, [r2, #0]
 8005ff0:	4a3e      	ldr	r2, [pc, #248]	@ (80060ec <xTaskIncrementTick+0x154>)
 8005ff2:	68fb      	ldr	r3, [r7, #12]
 8005ff4:	6013      	str	r3, [r2, #0]
 8005ff6:	4b3e      	ldr	r3, [pc, #248]	@ (80060f0 <xTaskIncrementTick+0x158>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	3301      	adds	r3, #1
 8005ffc:	4a3c      	ldr	r2, [pc, #240]	@ (80060f0 <xTaskIncrementTick+0x158>)
 8005ffe:	6013      	str	r3, [r2, #0]
 8006000:	f000 fae2 	bl	80065c8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006004:	4b3b      	ldr	r3, [pc, #236]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	693a      	ldr	r2, [r7, #16]
 800600a:	429a      	cmp	r2, r3
 800600c:	d349      	bcc.n	80060a2 <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800600e:	4b36      	ldr	r3, [pc, #216]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	2b00      	cmp	r3, #0
 8006016:	d104      	bne.n	8006022 <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006018:	4b36      	ldr	r3, [pc, #216]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 800601a:	f04f 32ff 	mov.w	r2, #4294967295
 800601e:	601a      	str	r2, [r3, #0]
					break;
 8006020:	e03f      	b.n	80060a2 <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006022:	4b31      	ldr	r3, [pc, #196]	@ (80060e8 <xTaskIncrementTick+0x150>)
 8006024:	681b      	ldr	r3, [r3, #0]
 8006026:	68db      	ldr	r3, [r3, #12]
 8006028:	68db      	ldr	r3, [r3, #12]
 800602a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800602c:	68bb      	ldr	r3, [r7, #8]
 800602e:	685b      	ldr	r3, [r3, #4]
 8006030:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006032:	693a      	ldr	r2, [r7, #16]
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	429a      	cmp	r2, r3
 8006038:	d203      	bcs.n	8006042 <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800603a:	4a2e      	ldr	r2, [pc, #184]	@ (80060f4 <xTaskIncrementTick+0x15c>)
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006040:	e02f      	b.n	80060a2 <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006042:	68bb      	ldr	r3, [r7, #8]
 8006044:	3304      	adds	r3, #4
 8006046:	4618      	mov	r0, r3
 8006048:	f7fe fea4 	bl	8004d94 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800604c:	68bb      	ldr	r3, [r7, #8]
 800604e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006050:	2b00      	cmp	r3, #0
 8006052:	d004      	beq.n	800605e <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006054:	68bb      	ldr	r3, [r7, #8]
 8006056:	3318      	adds	r3, #24
 8006058:	4618      	mov	r0, r3
 800605a:	f7fe fe9b 	bl	8004d94 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800605e:	68bb      	ldr	r3, [r7, #8]
 8006060:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006062:	4b25      	ldr	r3, [pc, #148]	@ (80060f8 <xTaskIncrementTick+0x160>)
 8006064:	681b      	ldr	r3, [r3, #0]
 8006066:	429a      	cmp	r2, r3
 8006068:	d903      	bls.n	8006072 <xTaskIncrementTick+0xda>
 800606a:	68bb      	ldr	r3, [r7, #8]
 800606c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800606e:	4a22      	ldr	r2, [pc, #136]	@ (80060f8 <xTaskIncrementTick+0x160>)
 8006070:	6013      	str	r3, [r2, #0]
 8006072:	68bb      	ldr	r3, [r7, #8]
 8006074:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006076:	4613      	mov	r3, r2
 8006078:	009b      	lsls	r3, r3, #2
 800607a:	4413      	add	r3, r2
 800607c:	009b      	lsls	r3, r3, #2
 800607e:	4a1f      	ldr	r2, [pc, #124]	@ (80060fc <xTaskIncrementTick+0x164>)
 8006080:	441a      	add	r2, r3
 8006082:	68bb      	ldr	r3, [r7, #8]
 8006084:	3304      	adds	r3, #4
 8006086:	4619      	mov	r1, r3
 8006088:	4610      	mov	r0, r2
 800608a:	f7fe fe26 	bl	8004cda <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800608e:	68bb      	ldr	r3, [r7, #8]
 8006090:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006092:	4b1b      	ldr	r3, [pc, #108]	@ (8006100 <xTaskIncrementTick+0x168>)
 8006094:	681b      	ldr	r3, [r3, #0]
 8006096:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006098:	429a      	cmp	r2, r3
 800609a:	d3b8      	bcc.n	800600e <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 800609c:	2301      	movs	r3, #1
 800609e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80060a0:	e7b5      	b.n	800600e <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80060a2:	4b17      	ldr	r3, [pc, #92]	@ (8006100 <xTaskIncrementTick+0x168>)
 80060a4:	681b      	ldr	r3, [r3, #0]
 80060a6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80060a8:	4914      	ldr	r1, [pc, #80]	@ (80060fc <xTaskIncrementTick+0x164>)
 80060aa:	4613      	mov	r3, r2
 80060ac:	009b      	lsls	r3, r3, #2
 80060ae:	4413      	add	r3, r2
 80060b0:	009b      	lsls	r3, r3, #2
 80060b2:	440b      	add	r3, r1
 80060b4:	681b      	ldr	r3, [r3, #0]
 80060b6:	2b01      	cmp	r3, #1
 80060b8:	d901      	bls.n	80060be <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 80060ba:	2301      	movs	r3, #1
 80060bc:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 80060be:	4b11      	ldr	r3, [pc, #68]	@ (8006104 <xTaskIncrementTick+0x16c>)
 80060c0:	681b      	ldr	r3, [r3, #0]
 80060c2:	2b00      	cmp	r3, #0
 80060c4:	d007      	beq.n	80060d6 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 80060c6:	2301      	movs	r3, #1
 80060c8:	617b      	str	r3, [r7, #20]
 80060ca:	e004      	b.n	80060d6 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 80060cc:	4b0e      	ldr	r3, [pc, #56]	@ (8006108 <xTaskIncrementTick+0x170>)
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	3301      	adds	r3, #1
 80060d2:	4a0d      	ldr	r2, [pc, #52]	@ (8006108 <xTaskIncrementTick+0x170>)
 80060d4:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 80060d6:	697b      	ldr	r3, [r7, #20]
}
 80060d8:	4618      	mov	r0, r3
 80060da:	3718      	adds	r7, #24
 80060dc:	46bd      	mov	sp, r7
 80060de:	bd80      	pop	{r7, pc}
 80060e0:	20000e2c 	.word	0x20000e2c
 80060e4:	20000e08 	.word	0x20000e08
 80060e8:	20000dbc 	.word	0x20000dbc
 80060ec:	20000dc0 	.word	0x20000dc0
 80060f0:	20000e1c 	.word	0x20000e1c
 80060f4:	20000e24 	.word	0x20000e24
 80060f8:	20000e0c 	.word	0x20000e0c
 80060fc:	20000934 	.word	0x20000934
 8006100:	20000930 	.word	0x20000930
 8006104:	20000e18 	.word	0x20000e18
 8006108:	20000e14 	.word	0x20000e14

0800610c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800610c:	b480      	push	{r7}
 800610e:	b085      	sub	sp, #20
 8006110:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006112:	4b2b      	ldr	r3, [pc, #172]	@ (80061c0 <vTaskSwitchContext+0xb4>)
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	2b00      	cmp	r3, #0
 8006118:	d003      	beq.n	8006122 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800611a:	4b2a      	ldr	r3, [pc, #168]	@ (80061c4 <vTaskSwitchContext+0xb8>)
 800611c:	2201      	movs	r2, #1
 800611e:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006120:	e047      	b.n	80061b2 <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006122:	4b28      	ldr	r3, [pc, #160]	@ (80061c4 <vTaskSwitchContext+0xb8>)
 8006124:	2200      	movs	r2, #0
 8006126:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006128:	4b27      	ldr	r3, [pc, #156]	@ (80061c8 <vTaskSwitchContext+0xbc>)
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	60fb      	str	r3, [r7, #12]
 800612e:	e011      	b.n	8006154 <vTaskSwitchContext+0x48>
 8006130:	68fb      	ldr	r3, [r7, #12]
 8006132:	2b00      	cmp	r3, #0
 8006134:	d10b      	bne.n	800614e <vTaskSwitchContext+0x42>
	__asm volatile
 8006136:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800613a:	f383 8811 	msr	BASEPRI, r3
 800613e:	f3bf 8f6f 	isb	sy
 8006142:	f3bf 8f4f 	dsb	sy
 8006146:	607b      	str	r3, [r7, #4]
}
 8006148:	bf00      	nop
 800614a:	bf00      	nop
 800614c:	e7fd      	b.n	800614a <vTaskSwitchContext+0x3e>
 800614e:	68fb      	ldr	r3, [r7, #12]
 8006150:	3b01      	subs	r3, #1
 8006152:	60fb      	str	r3, [r7, #12]
 8006154:	491d      	ldr	r1, [pc, #116]	@ (80061cc <vTaskSwitchContext+0xc0>)
 8006156:	68fa      	ldr	r2, [r7, #12]
 8006158:	4613      	mov	r3, r2
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	4413      	add	r3, r2
 800615e:	009b      	lsls	r3, r3, #2
 8006160:	440b      	add	r3, r1
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	2b00      	cmp	r3, #0
 8006166:	d0e3      	beq.n	8006130 <vTaskSwitchContext+0x24>
 8006168:	68fa      	ldr	r2, [r7, #12]
 800616a:	4613      	mov	r3, r2
 800616c:	009b      	lsls	r3, r3, #2
 800616e:	4413      	add	r3, r2
 8006170:	009b      	lsls	r3, r3, #2
 8006172:	4a16      	ldr	r2, [pc, #88]	@ (80061cc <vTaskSwitchContext+0xc0>)
 8006174:	4413      	add	r3, r2
 8006176:	60bb      	str	r3, [r7, #8]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	685b      	ldr	r3, [r3, #4]
 800617c:	685a      	ldr	r2, [r3, #4]
 800617e:	68bb      	ldr	r3, [r7, #8]
 8006180:	605a      	str	r2, [r3, #4]
 8006182:	68bb      	ldr	r3, [r7, #8]
 8006184:	685a      	ldr	r2, [r3, #4]
 8006186:	68bb      	ldr	r3, [r7, #8]
 8006188:	3308      	adds	r3, #8
 800618a:	429a      	cmp	r2, r3
 800618c:	d104      	bne.n	8006198 <vTaskSwitchContext+0x8c>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	685b      	ldr	r3, [r3, #4]
 8006192:	685a      	ldr	r2, [r3, #4]
 8006194:	68bb      	ldr	r3, [r7, #8]
 8006196:	605a      	str	r2, [r3, #4]
 8006198:	68bb      	ldr	r3, [r7, #8]
 800619a:	685b      	ldr	r3, [r3, #4]
 800619c:	68db      	ldr	r3, [r3, #12]
 800619e:	4a0c      	ldr	r2, [pc, #48]	@ (80061d0 <vTaskSwitchContext+0xc4>)
 80061a0:	6013      	str	r3, [r2, #0]
 80061a2:	4a09      	ldr	r2, [pc, #36]	@ (80061c8 <vTaskSwitchContext+0xbc>)
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80061a8:	4b09      	ldr	r3, [pc, #36]	@ (80061d0 <vTaskSwitchContext+0xc4>)
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	3354      	adds	r3, #84	@ 0x54
 80061ae:	4a09      	ldr	r2, [pc, #36]	@ (80061d4 <vTaskSwitchContext+0xc8>)
 80061b0:	6013      	str	r3, [r2, #0]
}
 80061b2:	bf00      	nop
 80061b4:	3714      	adds	r7, #20
 80061b6:	46bd      	mov	sp, r7
 80061b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061bc:	4770      	bx	lr
 80061be:	bf00      	nop
 80061c0:	20000e2c 	.word	0x20000e2c
 80061c4:	20000e18 	.word	0x20000e18
 80061c8:	20000e0c 	.word	0x20000e0c
 80061cc:	20000934 	.word	0x20000934
 80061d0:	20000930 	.word	0x20000930
 80061d4:	2000001c 	.word	0x2000001c

080061d8 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80061d8:	b580      	push	{r7, lr}
 80061da:	b084      	sub	sp, #16
 80061dc:	af00      	add	r7, sp, #0
 80061de:	6078      	str	r0, [r7, #4]
 80061e0:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d10b      	bne.n	8006200 <vTaskPlaceOnEventList+0x28>
	__asm volatile
 80061e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061ec:	f383 8811 	msr	BASEPRI, r3
 80061f0:	f3bf 8f6f 	isb	sy
 80061f4:	f3bf 8f4f 	dsb	sy
 80061f8:	60fb      	str	r3, [r7, #12]
}
 80061fa:	bf00      	nop
 80061fc:	bf00      	nop
 80061fe:	e7fd      	b.n	80061fc <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006200:	4b07      	ldr	r3, [pc, #28]	@ (8006220 <vTaskPlaceOnEventList+0x48>)
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	3318      	adds	r3, #24
 8006206:	4619      	mov	r1, r3
 8006208:	6878      	ldr	r0, [r7, #4]
 800620a:	f7fe fd8a 	bl	8004d22 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800620e:	2101      	movs	r1, #1
 8006210:	6838      	ldr	r0, [r7, #0]
 8006212:	f000 fa87 	bl	8006724 <prvAddCurrentTaskToDelayedList>
}
 8006216:	bf00      	nop
 8006218:	3710      	adds	r7, #16
 800621a:	46bd      	mov	sp, r7
 800621c:	bd80      	pop	{r7, pc}
 800621e:	bf00      	nop
 8006220:	20000930 	.word	0x20000930

08006224 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006224:	b580      	push	{r7, lr}
 8006226:	b086      	sub	sp, #24
 8006228:	af00      	add	r7, sp, #0
 800622a:	60f8      	str	r0, [r7, #12]
 800622c:	60b9      	str	r1, [r7, #8]
 800622e:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d10b      	bne.n	800624e <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006236:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800623a:	f383 8811 	msr	BASEPRI, r3
 800623e:	f3bf 8f6f 	isb	sy
 8006242:	f3bf 8f4f 	dsb	sy
 8006246:	617b      	str	r3, [r7, #20]
}
 8006248:	bf00      	nop
 800624a:	bf00      	nop
 800624c:	e7fd      	b.n	800624a <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800624e:	4b0a      	ldr	r3, [pc, #40]	@ (8006278 <vTaskPlaceOnEventListRestricted+0x54>)
 8006250:	681b      	ldr	r3, [r3, #0]
 8006252:	3318      	adds	r3, #24
 8006254:	4619      	mov	r1, r3
 8006256:	68f8      	ldr	r0, [r7, #12]
 8006258:	f7fe fd3f 	bl	8004cda <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	2b00      	cmp	r3, #0
 8006260:	d002      	beq.n	8006268 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006262:	f04f 33ff 	mov.w	r3, #4294967295
 8006266:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006268:	6879      	ldr	r1, [r7, #4]
 800626a:	68b8      	ldr	r0, [r7, #8]
 800626c:	f000 fa5a 	bl	8006724 <prvAddCurrentTaskToDelayedList>
	}
 8006270:	bf00      	nop
 8006272:	3718      	adds	r7, #24
 8006274:	46bd      	mov	sp, r7
 8006276:	bd80      	pop	{r7, pc}
 8006278:	20000930 	.word	0x20000930

0800627c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800627c:	b580      	push	{r7, lr}
 800627e:	b086      	sub	sp, #24
 8006280:	af00      	add	r7, sp, #0
 8006282:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	68db      	ldr	r3, [r3, #12]
 8006288:	68db      	ldr	r3, [r3, #12]
 800628a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800628c:	693b      	ldr	r3, [r7, #16]
 800628e:	2b00      	cmp	r3, #0
 8006290:	d10b      	bne.n	80062aa <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006292:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006296:	f383 8811 	msr	BASEPRI, r3
 800629a:	f3bf 8f6f 	isb	sy
 800629e:	f3bf 8f4f 	dsb	sy
 80062a2:	60fb      	str	r3, [r7, #12]
}
 80062a4:	bf00      	nop
 80062a6:	bf00      	nop
 80062a8:	e7fd      	b.n	80062a6 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 80062aa:	693b      	ldr	r3, [r7, #16]
 80062ac:	3318      	adds	r3, #24
 80062ae:	4618      	mov	r0, r3
 80062b0:	f7fe fd70 	bl	8004d94 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80062b4:	4b1d      	ldr	r3, [pc, #116]	@ (800632c <xTaskRemoveFromEventList+0xb0>)
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d11d      	bne.n	80062f8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 80062bc:	693b      	ldr	r3, [r7, #16]
 80062be:	3304      	adds	r3, #4
 80062c0:	4618      	mov	r0, r3
 80062c2:	f7fe fd67 	bl	8004d94 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 80062c6:	693b      	ldr	r3, [r7, #16]
 80062c8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062ca:	4b19      	ldr	r3, [pc, #100]	@ (8006330 <xTaskRemoveFromEventList+0xb4>)
 80062cc:	681b      	ldr	r3, [r3, #0]
 80062ce:	429a      	cmp	r2, r3
 80062d0:	d903      	bls.n	80062da <xTaskRemoveFromEventList+0x5e>
 80062d2:	693b      	ldr	r3, [r7, #16]
 80062d4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80062d6:	4a16      	ldr	r2, [pc, #88]	@ (8006330 <xTaskRemoveFromEventList+0xb4>)
 80062d8:	6013      	str	r3, [r2, #0]
 80062da:	693b      	ldr	r3, [r7, #16]
 80062dc:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80062de:	4613      	mov	r3, r2
 80062e0:	009b      	lsls	r3, r3, #2
 80062e2:	4413      	add	r3, r2
 80062e4:	009b      	lsls	r3, r3, #2
 80062e6:	4a13      	ldr	r2, [pc, #76]	@ (8006334 <xTaskRemoveFromEventList+0xb8>)
 80062e8:	441a      	add	r2, r3
 80062ea:	693b      	ldr	r3, [r7, #16]
 80062ec:	3304      	adds	r3, #4
 80062ee:	4619      	mov	r1, r3
 80062f0:	4610      	mov	r0, r2
 80062f2:	f7fe fcf2 	bl	8004cda <vListInsertEnd>
 80062f6:	e005      	b.n	8006304 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80062f8:	693b      	ldr	r3, [r7, #16]
 80062fa:	3318      	adds	r3, #24
 80062fc:	4619      	mov	r1, r3
 80062fe:	480e      	ldr	r0, [pc, #56]	@ (8006338 <xTaskRemoveFromEventList+0xbc>)
 8006300:	f7fe fceb 	bl	8004cda <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006304:	693b      	ldr	r3, [r7, #16]
 8006306:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006308:	4b0c      	ldr	r3, [pc, #48]	@ (800633c <xTaskRemoveFromEventList+0xc0>)
 800630a:	681b      	ldr	r3, [r3, #0]
 800630c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800630e:	429a      	cmp	r2, r3
 8006310:	d905      	bls.n	800631e <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006312:	2301      	movs	r3, #1
 8006314:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006316:	4b0a      	ldr	r3, [pc, #40]	@ (8006340 <xTaskRemoveFromEventList+0xc4>)
 8006318:	2201      	movs	r2, #1
 800631a:	601a      	str	r2, [r3, #0]
 800631c:	e001      	b.n	8006322 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 800631e:	2300      	movs	r3, #0
 8006320:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006322:	697b      	ldr	r3, [r7, #20]
}
 8006324:	4618      	mov	r0, r3
 8006326:	3718      	adds	r7, #24
 8006328:	46bd      	mov	sp, r7
 800632a:	bd80      	pop	{r7, pc}
 800632c:	20000e2c 	.word	0x20000e2c
 8006330:	20000e0c 	.word	0x20000e0c
 8006334:	20000934 	.word	0x20000934
 8006338:	20000dc4 	.word	0x20000dc4
 800633c:	20000930 	.word	0x20000930
 8006340:	20000e18 	.word	0x20000e18

08006344 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8006344:	b480      	push	{r7}
 8006346:	b083      	sub	sp, #12
 8006348:	af00      	add	r7, sp, #0
 800634a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800634c:	4b06      	ldr	r3, [pc, #24]	@ (8006368 <vTaskInternalSetTimeOutState+0x24>)
 800634e:	681a      	ldr	r2, [r3, #0]
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8006354:	4b05      	ldr	r3, [pc, #20]	@ (800636c <vTaskInternalSetTimeOutState+0x28>)
 8006356:	681a      	ldr	r2, [r3, #0]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	605a      	str	r2, [r3, #4]
}
 800635c:	bf00      	nop
 800635e:	370c      	adds	r7, #12
 8006360:	46bd      	mov	sp, r7
 8006362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006366:	4770      	bx	lr
 8006368:	20000e1c 	.word	0x20000e1c
 800636c:	20000e08 	.word	0x20000e08

08006370 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8006370:	b580      	push	{r7, lr}
 8006372:	b088      	sub	sp, #32
 8006374:	af00      	add	r7, sp, #0
 8006376:	6078      	str	r0, [r7, #4]
 8006378:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	2b00      	cmp	r3, #0
 800637e:	d10b      	bne.n	8006398 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 8006380:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006384:	f383 8811 	msr	BASEPRI, r3
 8006388:	f3bf 8f6f 	isb	sy
 800638c:	f3bf 8f4f 	dsb	sy
 8006390:	613b      	str	r3, [r7, #16]
}
 8006392:	bf00      	nop
 8006394:	bf00      	nop
 8006396:	e7fd      	b.n	8006394 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8006398:	683b      	ldr	r3, [r7, #0]
 800639a:	2b00      	cmp	r3, #0
 800639c:	d10b      	bne.n	80063b6 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800639e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80063a2:	f383 8811 	msr	BASEPRI, r3
 80063a6:	f3bf 8f6f 	isb	sy
 80063aa:	f3bf 8f4f 	dsb	sy
 80063ae:	60fb      	str	r3, [r7, #12]
}
 80063b0:	bf00      	nop
 80063b2:	bf00      	nop
 80063b4:	e7fd      	b.n	80063b2 <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 80063b6:	f000 fe97 	bl	80070e8 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80063ba:	4b1d      	ldr	r3, [pc, #116]	@ (8006430 <xTaskCheckForTimeOut+0xc0>)
 80063bc:	681b      	ldr	r3, [r3, #0]
 80063be:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80063c0:	687b      	ldr	r3, [r7, #4]
 80063c2:	685b      	ldr	r3, [r3, #4]
 80063c4:	69ba      	ldr	r2, [r7, #24]
 80063c6:	1ad3      	subs	r3, r2, r3
 80063c8:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80063ca:	683b      	ldr	r3, [r7, #0]
 80063cc:	681b      	ldr	r3, [r3, #0]
 80063ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80063d2:	d102      	bne.n	80063da <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80063d4:	2300      	movs	r3, #0
 80063d6:	61fb      	str	r3, [r7, #28]
 80063d8:	e023      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80063da:	687b      	ldr	r3, [r7, #4]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	4b15      	ldr	r3, [pc, #84]	@ (8006434 <xTaskCheckForTimeOut+0xc4>)
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	429a      	cmp	r2, r3
 80063e4:	d007      	beq.n	80063f6 <xTaskCheckForTimeOut+0x86>
 80063e6:	687b      	ldr	r3, [r7, #4]
 80063e8:	685b      	ldr	r3, [r3, #4]
 80063ea:	69ba      	ldr	r2, [r7, #24]
 80063ec:	429a      	cmp	r2, r3
 80063ee:	d302      	bcc.n	80063f6 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80063f0:	2301      	movs	r3, #1
 80063f2:	61fb      	str	r3, [r7, #28]
 80063f4:	e015      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80063f6:	683b      	ldr	r3, [r7, #0]
 80063f8:	681b      	ldr	r3, [r3, #0]
 80063fa:	697a      	ldr	r2, [r7, #20]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d20b      	bcs.n	8006418 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8006400:	683b      	ldr	r3, [r7, #0]
 8006402:	681a      	ldr	r2, [r3, #0]
 8006404:	697b      	ldr	r3, [r7, #20]
 8006406:	1ad2      	subs	r2, r2, r3
 8006408:	683b      	ldr	r3, [r7, #0]
 800640a:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800640c:	6878      	ldr	r0, [r7, #4]
 800640e:	f7ff ff99 	bl	8006344 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8006412:	2300      	movs	r3, #0
 8006414:	61fb      	str	r3, [r7, #28]
 8006416:	e004      	b.n	8006422 <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	2200      	movs	r2, #0
 800641c:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800641e:	2301      	movs	r3, #1
 8006420:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8006422:	f000 fe93 	bl	800714c <vPortExitCritical>

	return xReturn;
 8006426:	69fb      	ldr	r3, [r7, #28]
}
 8006428:	4618      	mov	r0, r3
 800642a:	3720      	adds	r7, #32
 800642c:	46bd      	mov	sp, r7
 800642e:	bd80      	pop	{r7, pc}
 8006430:	20000e08 	.word	0x20000e08
 8006434:	20000e1c 	.word	0x20000e1c

08006438 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8006438:	b480      	push	{r7}
 800643a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800643c:	4b03      	ldr	r3, [pc, #12]	@ (800644c <vTaskMissedYield+0x14>)
 800643e:	2201      	movs	r2, #1
 8006440:	601a      	str	r2, [r3, #0]
}
 8006442:	bf00      	nop
 8006444:	46bd      	mov	sp, r7
 8006446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800644a:	4770      	bx	lr
 800644c:	20000e18 	.word	0x20000e18

08006450 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8006450:	b580      	push	{r7, lr}
 8006452:	b082      	sub	sp, #8
 8006454:	af00      	add	r7, sp, #0
 8006456:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8006458:	f000 f852 	bl	8006500 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800645c:	4b06      	ldr	r3, [pc, #24]	@ (8006478 <prvIdleTask+0x28>)
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	2b01      	cmp	r3, #1
 8006462:	d9f9      	bls.n	8006458 <prvIdleTask+0x8>
			{
				taskYIELD();
 8006464:	4b05      	ldr	r3, [pc, #20]	@ (800647c <prvIdleTask+0x2c>)
 8006466:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 800646a:	601a      	str	r2, [r3, #0]
 800646c:	f3bf 8f4f 	dsb	sy
 8006470:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8006474:	e7f0      	b.n	8006458 <prvIdleTask+0x8>
 8006476:	bf00      	nop
 8006478:	20000934 	.word	0x20000934
 800647c:	e000ed04 	.word	0xe000ed04

08006480 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8006480:	b580      	push	{r7, lr}
 8006482:	b082      	sub	sp, #8
 8006484:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8006486:	2300      	movs	r3, #0
 8006488:	607b      	str	r3, [r7, #4]
 800648a:	e00c      	b.n	80064a6 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800648c:	687a      	ldr	r2, [r7, #4]
 800648e:	4613      	mov	r3, r2
 8006490:	009b      	lsls	r3, r3, #2
 8006492:	4413      	add	r3, r2
 8006494:	009b      	lsls	r3, r3, #2
 8006496:	4a12      	ldr	r2, [pc, #72]	@ (80064e0 <prvInitialiseTaskLists+0x60>)
 8006498:	4413      	add	r3, r2
 800649a:	4618      	mov	r0, r3
 800649c:	f7fe fbf0 	bl	8004c80 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	3301      	adds	r3, #1
 80064a4:	607b      	str	r3, [r7, #4]
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2b37      	cmp	r3, #55	@ 0x37
 80064aa:	d9ef      	bls.n	800648c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80064ac:	480d      	ldr	r0, [pc, #52]	@ (80064e4 <prvInitialiseTaskLists+0x64>)
 80064ae:	f7fe fbe7 	bl	8004c80 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80064b2:	480d      	ldr	r0, [pc, #52]	@ (80064e8 <prvInitialiseTaskLists+0x68>)
 80064b4:	f7fe fbe4 	bl	8004c80 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80064b8:	480c      	ldr	r0, [pc, #48]	@ (80064ec <prvInitialiseTaskLists+0x6c>)
 80064ba:	f7fe fbe1 	bl	8004c80 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80064be:	480c      	ldr	r0, [pc, #48]	@ (80064f0 <prvInitialiseTaskLists+0x70>)
 80064c0:	f7fe fbde 	bl	8004c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80064c4:	480b      	ldr	r0, [pc, #44]	@ (80064f4 <prvInitialiseTaskLists+0x74>)
 80064c6:	f7fe fbdb 	bl	8004c80 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80064ca:	4b0b      	ldr	r3, [pc, #44]	@ (80064f8 <prvInitialiseTaskLists+0x78>)
 80064cc:	4a05      	ldr	r2, [pc, #20]	@ (80064e4 <prvInitialiseTaskLists+0x64>)
 80064ce:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80064d0:	4b0a      	ldr	r3, [pc, #40]	@ (80064fc <prvInitialiseTaskLists+0x7c>)
 80064d2:	4a05      	ldr	r2, [pc, #20]	@ (80064e8 <prvInitialiseTaskLists+0x68>)
 80064d4:	601a      	str	r2, [r3, #0]
}
 80064d6:	bf00      	nop
 80064d8:	3708      	adds	r7, #8
 80064da:	46bd      	mov	sp, r7
 80064dc:	bd80      	pop	{r7, pc}
 80064de:	bf00      	nop
 80064e0:	20000934 	.word	0x20000934
 80064e4:	20000d94 	.word	0x20000d94
 80064e8:	20000da8 	.word	0x20000da8
 80064ec:	20000dc4 	.word	0x20000dc4
 80064f0:	20000dd8 	.word	0x20000dd8
 80064f4:	20000df0 	.word	0x20000df0
 80064f8:	20000dbc 	.word	0x20000dbc
 80064fc:	20000dc0 	.word	0x20000dc0

08006500 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8006500:	b580      	push	{r7, lr}
 8006502:	b082      	sub	sp, #8
 8006504:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8006506:	e019      	b.n	800653c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8006508:	f000 fdee 	bl	80070e8 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800650c:	4b10      	ldr	r3, [pc, #64]	@ (8006550 <prvCheckTasksWaitingTermination+0x50>)
 800650e:	68db      	ldr	r3, [r3, #12]
 8006510:	68db      	ldr	r3, [r3, #12]
 8006512:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	3304      	adds	r3, #4
 8006518:	4618      	mov	r0, r3
 800651a:	f7fe fc3b 	bl	8004d94 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800651e:	4b0d      	ldr	r3, [pc, #52]	@ (8006554 <prvCheckTasksWaitingTermination+0x54>)
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	3b01      	subs	r3, #1
 8006524:	4a0b      	ldr	r2, [pc, #44]	@ (8006554 <prvCheckTasksWaitingTermination+0x54>)
 8006526:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8006528:	4b0b      	ldr	r3, [pc, #44]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 800652a:	681b      	ldr	r3, [r3, #0]
 800652c:	3b01      	subs	r3, #1
 800652e:	4a0a      	ldr	r2, [pc, #40]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 8006530:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8006532:	f000 fe0b 	bl	800714c <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8006536:	6878      	ldr	r0, [r7, #4]
 8006538:	f000 f810 	bl	800655c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800653c:	4b06      	ldr	r3, [pc, #24]	@ (8006558 <prvCheckTasksWaitingTermination+0x58>)
 800653e:	681b      	ldr	r3, [r3, #0]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d1e1      	bne.n	8006508 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8006544:	bf00      	nop
 8006546:	bf00      	nop
 8006548:	3708      	adds	r7, #8
 800654a:	46bd      	mov	sp, r7
 800654c:	bd80      	pop	{r7, pc}
 800654e:	bf00      	nop
 8006550:	20000dd8 	.word	0x20000dd8
 8006554:	20000e04 	.word	0x20000e04
 8006558:	20000dec 	.word	0x20000dec

0800655c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800655c:	b580      	push	{r7, lr}
 800655e:	b084      	sub	sp, #16
 8006560:	af00      	add	r7, sp, #0
 8006562:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	3354      	adds	r3, #84	@ 0x54
 8006568:	4618      	mov	r0, r3
 800656a:	f001 faff 	bl	8007b6c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006574:	2b00      	cmp	r3, #0
 8006576:	d108      	bne.n	800658a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800657c:	4618      	mov	r0, r3
 800657e:	f000 ffa3 	bl	80074c8 <vPortFree>
				vPortFree( pxTCB );
 8006582:	6878      	ldr	r0, [r7, #4]
 8006584:	f000 ffa0 	bl	80074c8 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8006588:	e019      	b.n	80065be <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8006590:	2b01      	cmp	r3, #1
 8006592:	d103      	bne.n	800659c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8006594:	6878      	ldr	r0, [r7, #4]
 8006596:	f000 ff97 	bl	80074c8 <vPortFree>
	}
 800659a:	e010      	b.n	80065be <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 80065a2:	2b02      	cmp	r3, #2
 80065a4:	d00b      	beq.n	80065be <prvDeleteTCB+0x62>
	__asm volatile
 80065a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80065aa:	f383 8811 	msr	BASEPRI, r3
 80065ae:	f3bf 8f6f 	isb	sy
 80065b2:	f3bf 8f4f 	dsb	sy
 80065b6:	60fb      	str	r3, [r7, #12]
}
 80065b8:	bf00      	nop
 80065ba:	bf00      	nop
 80065bc:	e7fd      	b.n	80065ba <prvDeleteTCB+0x5e>
	}
 80065be:	bf00      	nop
 80065c0:	3710      	adds	r7, #16
 80065c2:	46bd      	mov	sp, r7
 80065c4:	bd80      	pop	{r7, pc}
	...

080065c8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80065c8:	b480      	push	{r7}
 80065ca:	b083      	sub	sp, #12
 80065cc:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80065ce:	4b0c      	ldr	r3, [pc, #48]	@ (8006600 <prvResetNextTaskUnblockTime+0x38>)
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	681b      	ldr	r3, [r3, #0]
 80065d4:	2b00      	cmp	r3, #0
 80065d6:	d104      	bne.n	80065e2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80065d8:	4b0a      	ldr	r3, [pc, #40]	@ (8006604 <prvResetNextTaskUnblockTime+0x3c>)
 80065da:	f04f 32ff 	mov.w	r2, #4294967295
 80065de:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80065e0:	e008      	b.n	80065f4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80065e2:	4b07      	ldr	r3, [pc, #28]	@ (8006600 <prvResetNextTaskUnblockTime+0x38>)
 80065e4:	681b      	ldr	r3, [r3, #0]
 80065e6:	68db      	ldr	r3, [r3, #12]
 80065e8:	68db      	ldr	r3, [r3, #12]
 80065ea:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	685b      	ldr	r3, [r3, #4]
 80065f0:	4a04      	ldr	r2, [pc, #16]	@ (8006604 <prvResetNextTaskUnblockTime+0x3c>)
 80065f2:	6013      	str	r3, [r2, #0]
}
 80065f4:	bf00      	nop
 80065f6:	370c      	adds	r7, #12
 80065f8:	46bd      	mov	sp, r7
 80065fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065fe:	4770      	bx	lr
 8006600:	20000dbc 	.word	0x20000dbc
 8006604:	20000e24 	.word	0x20000e24

08006608 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8006608:	b480      	push	{r7}
 800660a:	b083      	sub	sp, #12
 800660c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800660e:	4b0b      	ldr	r3, [pc, #44]	@ (800663c <xTaskGetSchedulerState+0x34>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	2b00      	cmp	r3, #0
 8006614:	d102      	bne.n	800661c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8006616:	2301      	movs	r3, #1
 8006618:	607b      	str	r3, [r7, #4]
 800661a:	e008      	b.n	800662e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800661c:	4b08      	ldr	r3, [pc, #32]	@ (8006640 <xTaskGetSchedulerState+0x38>)
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	2b00      	cmp	r3, #0
 8006622:	d102      	bne.n	800662a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8006624:	2302      	movs	r3, #2
 8006626:	607b      	str	r3, [r7, #4]
 8006628:	e001      	b.n	800662e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800662a:	2300      	movs	r3, #0
 800662c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800662e:	687b      	ldr	r3, [r7, #4]
	}
 8006630:	4618      	mov	r0, r3
 8006632:	370c      	adds	r7, #12
 8006634:	46bd      	mov	sp, r7
 8006636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663a:	4770      	bx	lr
 800663c:	20000e10 	.word	0x20000e10
 8006640:	20000e2c 	.word	0x20000e2c

08006644 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8006644:	b580      	push	{r7, lr}
 8006646:	b086      	sub	sp, #24
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8006650:	2300      	movs	r3, #0
 8006652:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8006654:	687b      	ldr	r3, [r7, #4]
 8006656:	2b00      	cmp	r3, #0
 8006658:	d058      	beq.n	800670c <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800665a:	4b2f      	ldr	r3, [pc, #188]	@ (8006718 <xTaskPriorityDisinherit+0xd4>)
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	693a      	ldr	r2, [r7, #16]
 8006660:	429a      	cmp	r2, r3
 8006662:	d00b      	beq.n	800667c <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8006664:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006668:	f383 8811 	msr	BASEPRI, r3
 800666c:	f3bf 8f6f 	isb	sy
 8006670:	f3bf 8f4f 	dsb	sy
 8006674:	60fb      	str	r3, [r7, #12]
}
 8006676:	bf00      	nop
 8006678:	bf00      	nop
 800667a:	e7fd      	b.n	8006678 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800667c:	693b      	ldr	r3, [r7, #16]
 800667e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8006680:	2b00      	cmp	r3, #0
 8006682:	d10b      	bne.n	800669c <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8006684:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006688:	f383 8811 	msr	BASEPRI, r3
 800668c:	f3bf 8f6f 	isb	sy
 8006690:	f3bf 8f4f 	dsb	sy
 8006694:	60bb      	str	r3, [r7, #8]
}
 8006696:	bf00      	nop
 8006698:	bf00      	nop
 800669a:	e7fd      	b.n	8006698 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 800669c:	693b      	ldr	r3, [r7, #16]
 800669e:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066a0:	1e5a      	subs	r2, r3, #1
 80066a2:	693b      	ldr	r3, [r7, #16]
 80066a4:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80066a6:	693b      	ldr	r3, [r7, #16]
 80066a8:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066aa:	693b      	ldr	r3, [r7, #16]
 80066ac:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80066ae:	429a      	cmp	r2, r3
 80066b0:	d02c      	beq.n	800670c <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80066b2:	693b      	ldr	r3, [r7, #16]
 80066b4:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	d128      	bne.n	800670c <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80066ba:	693b      	ldr	r3, [r7, #16]
 80066bc:	3304      	adds	r3, #4
 80066be:	4618      	mov	r0, r3
 80066c0:	f7fe fb68 	bl	8004d94 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80066c4:	693b      	ldr	r3, [r7, #16]
 80066c6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80066c8:	693b      	ldr	r3, [r7, #16]
 80066ca:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80066cc:	693b      	ldr	r3, [r7, #16]
 80066ce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066d0:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 80066d4:	693b      	ldr	r3, [r7, #16]
 80066d6:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80066d8:	693b      	ldr	r3, [r7, #16]
 80066da:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066dc:	4b0f      	ldr	r3, [pc, #60]	@ (800671c <xTaskPriorityDisinherit+0xd8>)
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	429a      	cmp	r2, r3
 80066e2:	d903      	bls.n	80066ec <xTaskPriorityDisinherit+0xa8>
 80066e4:	693b      	ldr	r3, [r7, #16]
 80066e6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80066e8:	4a0c      	ldr	r2, [pc, #48]	@ (800671c <xTaskPriorityDisinherit+0xd8>)
 80066ea:	6013      	str	r3, [r2, #0]
 80066ec:	693b      	ldr	r3, [r7, #16]
 80066ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80066f0:	4613      	mov	r3, r2
 80066f2:	009b      	lsls	r3, r3, #2
 80066f4:	4413      	add	r3, r2
 80066f6:	009b      	lsls	r3, r3, #2
 80066f8:	4a09      	ldr	r2, [pc, #36]	@ (8006720 <xTaskPriorityDisinherit+0xdc>)
 80066fa:	441a      	add	r2, r3
 80066fc:	693b      	ldr	r3, [r7, #16]
 80066fe:	3304      	adds	r3, #4
 8006700:	4619      	mov	r1, r3
 8006702:	4610      	mov	r0, r2
 8006704:	f7fe fae9 	bl	8004cda <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8006708:	2301      	movs	r3, #1
 800670a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800670c:	697b      	ldr	r3, [r7, #20]
	}
 800670e:	4618      	mov	r0, r3
 8006710:	3718      	adds	r7, #24
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
 8006716:	bf00      	nop
 8006718:	20000930 	.word	0x20000930
 800671c:	20000e0c 	.word	0x20000e0c
 8006720:	20000934 	.word	0x20000934

08006724 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8006724:	b580      	push	{r7, lr}
 8006726:	b084      	sub	sp, #16
 8006728:	af00      	add	r7, sp, #0
 800672a:	6078      	str	r0, [r7, #4]
 800672c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800672e:	4b21      	ldr	r3, [pc, #132]	@ (80067b4 <prvAddCurrentTaskToDelayedList+0x90>)
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8006734:	4b20      	ldr	r3, [pc, #128]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	3304      	adds	r3, #4
 800673a:	4618      	mov	r0, r3
 800673c:	f7fe fb2a 	bl	8004d94 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8006740:	687b      	ldr	r3, [r7, #4]
 8006742:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006746:	d10a      	bne.n	800675e <prvAddCurrentTaskToDelayedList+0x3a>
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d007      	beq.n	800675e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800674e:	4b1a      	ldr	r3, [pc, #104]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	3304      	adds	r3, #4
 8006754:	4619      	mov	r1, r3
 8006756:	4819      	ldr	r0, [pc, #100]	@ (80067bc <prvAddCurrentTaskToDelayedList+0x98>)
 8006758:	f7fe fabf 	bl	8004cda <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800675c:	e026      	b.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800675e:	68fa      	ldr	r2, [r7, #12]
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	4413      	add	r3, r2
 8006764:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8006766:	4b14      	ldr	r3, [pc, #80]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006768:	681b      	ldr	r3, [r3, #0]
 800676a:	68ba      	ldr	r2, [r7, #8]
 800676c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800676e:	68ba      	ldr	r2, [r7, #8]
 8006770:	68fb      	ldr	r3, [r7, #12]
 8006772:	429a      	cmp	r2, r3
 8006774:	d209      	bcs.n	800678a <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8006776:	4b12      	ldr	r3, [pc, #72]	@ (80067c0 <prvAddCurrentTaskToDelayedList+0x9c>)
 8006778:	681a      	ldr	r2, [r3, #0]
 800677a:	4b0f      	ldr	r3, [pc, #60]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	3304      	adds	r3, #4
 8006780:	4619      	mov	r1, r3
 8006782:	4610      	mov	r0, r2
 8006784:	f7fe facd 	bl	8004d22 <vListInsert>
}
 8006788:	e010      	b.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800678a:	4b0e      	ldr	r3, [pc, #56]	@ (80067c4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	4b0a      	ldr	r3, [pc, #40]	@ (80067b8 <prvAddCurrentTaskToDelayedList+0x94>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	3304      	adds	r3, #4
 8006794:	4619      	mov	r1, r3
 8006796:	4610      	mov	r0, r2
 8006798:	f7fe fac3 	bl	8004d22 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800679c:	4b0a      	ldr	r3, [pc, #40]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	68ba      	ldr	r2, [r7, #8]
 80067a2:	429a      	cmp	r2, r3
 80067a4:	d202      	bcs.n	80067ac <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80067a6:	4a08      	ldr	r2, [pc, #32]	@ (80067c8 <prvAddCurrentTaskToDelayedList+0xa4>)
 80067a8:	68bb      	ldr	r3, [r7, #8]
 80067aa:	6013      	str	r3, [r2, #0]
}
 80067ac:	bf00      	nop
 80067ae:	3710      	adds	r7, #16
 80067b0:	46bd      	mov	sp, r7
 80067b2:	bd80      	pop	{r7, pc}
 80067b4:	20000e08 	.word	0x20000e08
 80067b8:	20000930 	.word	0x20000930
 80067bc:	20000df0 	.word	0x20000df0
 80067c0:	20000dc0 	.word	0x20000dc0
 80067c4:	20000dbc 	.word	0x20000dbc
 80067c8:	20000e24 	.word	0x20000e24

080067cc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 80067cc:	b580      	push	{r7, lr}
 80067ce:	b08a      	sub	sp, #40	@ 0x28
 80067d0:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 80067d2:	2300      	movs	r3, #0
 80067d4:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 80067d6:	f000 fb13 	bl	8006e00 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 80067da:	4b1d      	ldr	r3, [pc, #116]	@ (8006850 <xTimerCreateTimerTask+0x84>)
 80067dc:	681b      	ldr	r3, [r3, #0]
 80067de:	2b00      	cmp	r3, #0
 80067e0:	d021      	beq.n	8006826 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 80067e2:	2300      	movs	r3, #0
 80067e4:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80067e6:	2300      	movs	r3, #0
 80067e8:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80067ea:	1d3a      	adds	r2, r7, #4
 80067ec:	f107 0108 	add.w	r1, r7, #8
 80067f0:	f107 030c 	add.w	r3, r7, #12
 80067f4:	4618      	mov	r0, r3
 80067f6:	f7fe fa29 	bl	8004c4c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80067fa:	6879      	ldr	r1, [r7, #4]
 80067fc:	68bb      	ldr	r3, [r7, #8]
 80067fe:	68fa      	ldr	r2, [r7, #12]
 8006800:	9202      	str	r2, [sp, #8]
 8006802:	9301      	str	r3, [sp, #4]
 8006804:	2302      	movs	r3, #2
 8006806:	9300      	str	r3, [sp, #0]
 8006808:	2300      	movs	r3, #0
 800680a:	460a      	mov	r2, r1
 800680c:	4911      	ldr	r1, [pc, #68]	@ (8006854 <xTimerCreateTimerTask+0x88>)
 800680e:	4812      	ldr	r0, [pc, #72]	@ (8006858 <xTimerCreateTimerTask+0x8c>)
 8006810:	f7ff f8a2 	bl	8005958 <xTaskCreateStatic>
 8006814:	4603      	mov	r3, r0
 8006816:	4a11      	ldr	r2, [pc, #68]	@ (800685c <xTimerCreateTimerTask+0x90>)
 8006818:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800681a:	4b10      	ldr	r3, [pc, #64]	@ (800685c <xTimerCreateTimerTask+0x90>)
 800681c:	681b      	ldr	r3, [r3, #0]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d001      	beq.n	8006826 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 8006822:	2301      	movs	r3, #1
 8006824:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 8006826:	697b      	ldr	r3, [r7, #20]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d10b      	bne.n	8006844 <xTimerCreateTimerTask+0x78>
	__asm volatile
 800682c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006830:	f383 8811 	msr	BASEPRI, r3
 8006834:	f3bf 8f6f 	isb	sy
 8006838:	f3bf 8f4f 	dsb	sy
 800683c:	613b      	str	r3, [r7, #16]
}
 800683e:	bf00      	nop
 8006840:	bf00      	nop
 8006842:	e7fd      	b.n	8006840 <xTimerCreateTimerTask+0x74>
	return xReturn;
 8006844:	697b      	ldr	r3, [r7, #20]
}
 8006846:	4618      	mov	r0, r3
 8006848:	3718      	adds	r7, #24
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}
 800684e:	bf00      	nop
 8006850:	20000e60 	.word	0x20000e60
 8006854:	08009edc 	.word	0x08009edc
 8006858:	08006999 	.word	0x08006999
 800685c:	20000e64 	.word	0x20000e64

08006860 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8006860:	b580      	push	{r7, lr}
 8006862:	b08a      	sub	sp, #40	@ 0x28
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	60b9      	str	r1, [r7, #8]
 800686a:	607a      	str	r2, [r7, #4]
 800686c:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800686e:	2300      	movs	r3, #0
 8006870:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 8006872:	68fb      	ldr	r3, [r7, #12]
 8006874:	2b00      	cmp	r3, #0
 8006876:	d10b      	bne.n	8006890 <xTimerGenericCommand+0x30>
	__asm volatile
 8006878:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800687c:	f383 8811 	msr	BASEPRI, r3
 8006880:	f3bf 8f6f 	isb	sy
 8006884:	f3bf 8f4f 	dsb	sy
 8006888:	623b      	str	r3, [r7, #32]
}
 800688a:	bf00      	nop
 800688c:	bf00      	nop
 800688e:	e7fd      	b.n	800688c <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 8006890:	4b19      	ldr	r3, [pc, #100]	@ (80068f8 <xTimerGenericCommand+0x98>)
 8006892:	681b      	ldr	r3, [r3, #0]
 8006894:	2b00      	cmp	r3, #0
 8006896:	d02a      	beq.n	80068ee <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8006898:	68bb      	ldr	r3, [r7, #8]
 800689a:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800689c:	687b      	ldr	r3, [r7, #4]
 800689e:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80068a0:	68fb      	ldr	r3, [r7, #12]
 80068a2:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80068a4:	68bb      	ldr	r3, [r7, #8]
 80068a6:	2b05      	cmp	r3, #5
 80068a8:	dc18      	bgt.n	80068dc <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80068aa:	f7ff fead 	bl	8006608 <xTaskGetSchedulerState>
 80068ae:	4603      	mov	r3, r0
 80068b0:	2b02      	cmp	r3, #2
 80068b2:	d109      	bne.n	80068c8 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80068b4:	4b10      	ldr	r3, [pc, #64]	@ (80068f8 <xTimerGenericCommand+0x98>)
 80068b6:	6818      	ldr	r0, [r3, #0]
 80068b8:	f107 0110 	add.w	r1, r7, #16
 80068bc:	2300      	movs	r3, #0
 80068be:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80068c0:	f7fe fbd8 	bl	8005074 <xQueueGenericSend>
 80068c4:	6278      	str	r0, [r7, #36]	@ 0x24
 80068c6:	e012      	b.n	80068ee <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80068c8:	4b0b      	ldr	r3, [pc, #44]	@ (80068f8 <xTimerGenericCommand+0x98>)
 80068ca:	6818      	ldr	r0, [r3, #0]
 80068cc:	f107 0110 	add.w	r1, r7, #16
 80068d0:	2300      	movs	r3, #0
 80068d2:	2200      	movs	r2, #0
 80068d4:	f7fe fbce 	bl	8005074 <xQueueGenericSend>
 80068d8:	6278      	str	r0, [r7, #36]	@ 0x24
 80068da:	e008      	b.n	80068ee <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 80068dc:	4b06      	ldr	r3, [pc, #24]	@ (80068f8 <xTimerGenericCommand+0x98>)
 80068de:	6818      	ldr	r0, [r3, #0]
 80068e0:	f107 0110 	add.w	r1, r7, #16
 80068e4:	2300      	movs	r3, #0
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	f7fe fcc6 	bl	8005278 <xQueueGenericSendFromISR>
 80068ec:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80068ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80068f0:	4618      	mov	r0, r3
 80068f2:	3728      	adds	r7, #40	@ 0x28
 80068f4:	46bd      	mov	sp, r7
 80068f6:	bd80      	pop	{r7, pc}
 80068f8:	20000e60 	.word	0x20000e60

080068fc <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80068fc:	b580      	push	{r7, lr}
 80068fe:	b088      	sub	sp, #32
 8006900:	af02      	add	r7, sp, #8
 8006902:	6078      	str	r0, [r7, #4]
 8006904:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006906:	4b23      	ldr	r3, [pc, #140]	@ (8006994 <prvProcessExpiredTimer+0x98>)
 8006908:	681b      	ldr	r3, [r3, #0]
 800690a:	68db      	ldr	r3, [r3, #12]
 800690c:	68db      	ldr	r3, [r3, #12]
 800690e:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006910:	697b      	ldr	r3, [r7, #20]
 8006912:	3304      	adds	r3, #4
 8006914:	4618      	mov	r0, r3
 8006916:	f7fe fa3d 	bl	8004d94 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800691a:	697b      	ldr	r3, [r7, #20]
 800691c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006920:	f003 0304 	and.w	r3, r3, #4
 8006924:	2b00      	cmp	r3, #0
 8006926:	d023      	beq.n	8006970 <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 8006928:	697b      	ldr	r3, [r7, #20]
 800692a:	699a      	ldr	r2, [r3, #24]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	18d1      	adds	r1, r2, r3
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	683a      	ldr	r2, [r7, #0]
 8006934:	6978      	ldr	r0, [r7, #20]
 8006936:	f000 f8d5 	bl	8006ae4 <prvInsertTimerInActiveList>
 800693a:	4603      	mov	r3, r0
 800693c:	2b00      	cmp	r3, #0
 800693e:	d020      	beq.n	8006982 <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006940:	2300      	movs	r3, #0
 8006942:	9300      	str	r3, [sp, #0]
 8006944:	2300      	movs	r3, #0
 8006946:	687a      	ldr	r2, [r7, #4]
 8006948:	2100      	movs	r1, #0
 800694a:	6978      	ldr	r0, [r7, #20]
 800694c:	f7ff ff88 	bl	8006860 <xTimerGenericCommand>
 8006950:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	2b00      	cmp	r3, #0
 8006956:	d114      	bne.n	8006982 <prvProcessExpiredTimer+0x86>
	__asm volatile
 8006958:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800695c:	f383 8811 	msr	BASEPRI, r3
 8006960:	f3bf 8f6f 	isb	sy
 8006964:	f3bf 8f4f 	dsb	sy
 8006968:	60fb      	str	r3, [r7, #12]
}
 800696a:	bf00      	nop
 800696c:	bf00      	nop
 800696e:	e7fd      	b.n	800696c <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006970:	697b      	ldr	r3, [r7, #20]
 8006972:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006976:	f023 0301 	bic.w	r3, r3, #1
 800697a:	b2da      	uxtb	r2, r3
 800697c:	697b      	ldr	r3, [r7, #20]
 800697e:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	6a1b      	ldr	r3, [r3, #32]
 8006986:	6978      	ldr	r0, [r7, #20]
 8006988:	4798      	blx	r3
}
 800698a:	bf00      	nop
 800698c:	3718      	adds	r7, #24
 800698e:	46bd      	mov	sp, r7
 8006990:	bd80      	pop	{r7, pc}
 8006992:	bf00      	nop
 8006994:	20000e58 	.word	0x20000e58

08006998 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8006998:	b580      	push	{r7, lr}
 800699a:	b084      	sub	sp, #16
 800699c:	af00      	add	r7, sp, #0
 800699e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069a0:	f107 0308 	add.w	r3, r7, #8
 80069a4:	4618      	mov	r0, r3
 80069a6:	f000 f859 	bl	8006a5c <prvGetNextExpireTime>
 80069aa:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80069ac:	68bb      	ldr	r3, [r7, #8]
 80069ae:	4619      	mov	r1, r3
 80069b0:	68f8      	ldr	r0, [r7, #12]
 80069b2:	f000 f805 	bl	80069c0 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80069b6:	f000 f8d7 	bl	8006b68 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80069ba:	bf00      	nop
 80069bc:	e7f0      	b.n	80069a0 <prvTimerTask+0x8>
	...

080069c0 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80069c0:	b580      	push	{r7, lr}
 80069c2:	b084      	sub	sp, #16
 80069c4:	af00      	add	r7, sp, #0
 80069c6:	6078      	str	r0, [r7, #4]
 80069c8:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80069ca:	f7ff fa29 	bl	8005e20 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80069ce:	f107 0308 	add.w	r3, r7, #8
 80069d2:	4618      	mov	r0, r3
 80069d4:	f000 f866 	bl	8006aa4 <prvSampleTimeNow>
 80069d8:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 80069da:	68bb      	ldr	r3, [r7, #8]
 80069dc:	2b00      	cmp	r3, #0
 80069de:	d130      	bne.n	8006a42 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 80069e0:	683b      	ldr	r3, [r7, #0]
 80069e2:	2b00      	cmp	r3, #0
 80069e4:	d10a      	bne.n	80069fc <prvProcessTimerOrBlockTask+0x3c>
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	68fb      	ldr	r3, [r7, #12]
 80069ea:	429a      	cmp	r2, r3
 80069ec:	d806      	bhi.n	80069fc <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80069ee:	f7ff fa25 	bl	8005e3c <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80069f2:	68f9      	ldr	r1, [r7, #12]
 80069f4:	6878      	ldr	r0, [r7, #4]
 80069f6:	f7ff ff81 	bl	80068fc <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80069fa:	e024      	b.n	8006a46 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80069fc:	683b      	ldr	r3, [r7, #0]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	d008      	beq.n	8006a14 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 8006a02:	4b13      	ldr	r3, [pc, #76]	@ (8006a50 <prvProcessTimerOrBlockTask+0x90>)
 8006a04:	681b      	ldr	r3, [r3, #0]
 8006a06:	681b      	ldr	r3, [r3, #0]
 8006a08:	2b00      	cmp	r3, #0
 8006a0a:	d101      	bne.n	8006a10 <prvProcessTimerOrBlockTask+0x50>
 8006a0c:	2301      	movs	r3, #1
 8006a0e:	e000      	b.n	8006a12 <prvProcessTimerOrBlockTask+0x52>
 8006a10:	2300      	movs	r3, #0
 8006a12:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8006a14:	4b0f      	ldr	r3, [pc, #60]	@ (8006a54 <prvProcessTimerOrBlockTask+0x94>)
 8006a16:	6818      	ldr	r0, [r3, #0]
 8006a18:	687a      	ldr	r2, [r7, #4]
 8006a1a:	68fb      	ldr	r3, [r7, #12]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	4619      	mov	r1, r3
 8006a22:	f7fe ff65 	bl	80058f0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8006a26:	f7ff fa09 	bl	8005e3c <xTaskResumeAll>
 8006a2a:	4603      	mov	r3, r0
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d10a      	bne.n	8006a46 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 8006a30:	4b09      	ldr	r3, [pc, #36]	@ (8006a58 <prvProcessTimerOrBlockTask+0x98>)
 8006a32:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006a36:	601a      	str	r2, [r3, #0]
 8006a38:	f3bf 8f4f 	dsb	sy
 8006a3c:	f3bf 8f6f 	isb	sy
}
 8006a40:	e001      	b.n	8006a46 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 8006a42:	f7ff f9fb 	bl	8005e3c <xTaskResumeAll>
}
 8006a46:	bf00      	nop
 8006a48:	3710      	adds	r7, #16
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	bd80      	pop	{r7, pc}
 8006a4e:	bf00      	nop
 8006a50:	20000e5c 	.word	0x20000e5c
 8006a54:	20000e60 	.word	0x20000e60
 8006a58:	e000ed04 	.word	0xe000ed04

08006a5c <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	b085      	sub	sp, #20
 8006a60:	af00      	add	r7, sp, #0
 8006a62:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8006a64:	4b0e      	ldr	r3, [pc, #56]	@ (8006aa0 <prvGetNextExpireTime+0x44>)
 8006a66:	681b      	ldr	r3, [r3, #0]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	2b00      	cmp	r3, #0
 8006a6c:	d101      	bne.n	8006a72 <prvGetNextExpireTime+0x16>
 8006a6e:	2201      	movs	r2, #1
 8006a70:	e000      	b.n	8006a74 <prvGetNextExpireTime+0x18>
 8006a72:	2200      	movs	r2, #0
 8006a74:	687b      	ldr	r3, [r7, #4]
 8006a76:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2b00      	cmp	r3, #0
 8006a7e:	d105      	bne.n	8006a8c <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006a80:	4b07      	ldr	r3, [pc, #28]	@ (8006aa0 <prvGetNextExpireTime+0x44>)
 8006a82:	681b      	ldr	r3, [r3, #0]
 8006a84:	68db      	ldr	r3, [r3, #12]
 8006a86:	681b      	ldr	r3, [r3, #0]
 8006a88:	60fb      	str	r3, [r7, #12]
 8006a8a:	e001      	b.n	8006a90 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8006a8c:	2300      	movs	r3, #0
 8006a8e:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 8006a90:	68fb      	ldr	r3, [r7, #12]
}
 8006a92:	4618      	mov	r0, r3
 8006a94:	3714      	adds	r7, #20
 8006a96:	46bd      	mov	sp, r7
 8006a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a9c:	4770      	bx	lr
 8006a9e:	bf00      	nop
 8006aa0:	20000e58 	.word	0x20000e58

08006aa4 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8006aa4:	b580      	push	{r7, lr}
 8006aa6:	b084      	sub	sp, #16
 8006aa8:	af00      	add	r7, sp, #0
 8006aaa:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8006aac:	f7ff fa64 	bl	8005f78 <xTaskGetTickCount>
 8006ab0:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <prvSampleTimeNow+0x3c>)
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	68fa      	ldr	r2, [r7, #12]
 8006ab8:	429a      	cmp	r2, r3
 8006aba:	d205      	bcs.n	8006ac8 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8006abc:	f000 f93a 	bl	8006d34 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	2201      	movs	r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]
 8006ac6:	e002      	b.n	8006ace <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8006ac8:	687b      	ldr	r3, [r7, #4]
 8006aca:	2200      	movs	r2, #0
 8006acc:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 8006ace:	4a04      	ldr	r2, [pc, #16]	@ (8006ae0 <prvSampleTimeNow+0x3c>)
 8006ad0:	68fb      	ldr	r3, [r7, #12]
 8006ad2:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8006ad4:	68fb      	ldr	r3, [r7, #12]
}
 8006ad6:	4618      	mov	r0, r3
 8006ad8:	3710      	adds	r7, #16
 8006ada:	46bd      	mov	sp, r7
 8006adc:	bd80      	pop	{r7, pc}
 8006ade:	bf00      	nop
 8006ae0:	20000e68 	.word	0x20000e68

08006ae4 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8006ae4:	b580      	push	{r7, lr}
 8006ae6:	b086      	sub	sp, #24
 8006ae8:	af00      	add	r7, sp, #0
 8006aea:	60f8      	str	r0, [r7, #12]
 8006aec:	60b9      	str	r1, [r7, #8]
 8006aee:	607a      	str	r2, [r7, #4]
 8006af0:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8006af2:	2300      	movs	r3, #0
 8006af4:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8006af6:	68fb      	ldr	r3, [r7, #12]
 8006af8:	68ba      	ldr	r2, [r7, #8]
 8006afa:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006afc:	68fb      	ldr	r3, [r7, #12]
 8006afe:	68fa      	ldr	r2, [r7, #12]
 8006b00:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8006b02:	68ba      	ldr	r2, [r7, #8]
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	429a      	cmp	r2, r3
 8006b08:	d812      	bhi.n	8006b30 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006b0a:	687a      	ldr	r2, [r7, #4]
 8006b0c:	683b      	ldr	r3, [r7, #0]
 8006b0e:	1ad2      	subs	r2, r2, r3
 8006b10:	68fb      	ldr	r3, [r7, #12]
 8006b12:	699b      	ldr	r3, [r3, #24]
 8006b14:	429a      	cmp	r2, r3
 8006b16:	d302      	bcc.n	8006b1e <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8006b18:	2301      	movs	r3, #1
 8006b1a:	617b      	str	r3, [r7, #20]
 8006b1c:	e01b      	b.n	8006b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8006b1e:	4b10      	ldr	r3, [pc, #64]	@ (8006b60 <prvInsertTimerInActiveList+0x7c>)
 8006b20:	681a      	ldr	r2, [r3, #0]
 8006b22:	68fb      	ldr	r3, [r7, #12]
 8006b24:	3304      	adds	r3, #4
 8006b26:	4619      	mov	r1, r3
 8006b28:	4610      	mov	r0, r2
 8006b2a:	f7fe f8fa 	bl	8004d22 <vListInsert>
 8006b2e:	e012      	b.n	8006b56 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8006b30:	687a      	ldr	r2, [r7, #4]
 8006b32:	683b      	ldr	r3, [r7, #0]
 8006b34:	429a      	cmp	r2, r3
 8006b36:	d206      	bcs.n	8006b46 <prvInsertTimerInActiveList+0x62>
 8006b38:	68ba      	ldr	r2, [r7, #8]
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	429a      	cmp	r2, r3
 8006b3e:	d302      	bcc.n	8006b46 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8006b40:	2301      	movs	r3, #1
 8006b42:	617b      	str	r3, [r7, #20]
 8006b44:	e007      	b.n	8006b56 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006b46:	4b07      	ldr	r3, [pc, #28]	@ (8006b64 <prvInsertTimerInActiveList+0x80>)
 8006b48:	681a      	ldr	r2, [r3, #0]
 8006b4a:	68fb      	ldr	r3, [r7, #12]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	4619      	mov	r1, r3
 8006b50:	4610      	mov	r0, r2
 8006b52:	f7fe f8e6 	bl	8004d22 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8006b56:	697b      	ldr	r3, [r7, #20]
}
 8006b58:	4618      	mov	r0, r3
 8006b5a:	3718      	adds	r7, #24
 8006b5c:	46bd      	mov	sp, r7
 8006b5e:	bd80      	pop	{r7, pc}
 8006b60:	20000e5c 	.word	0x20000e5c
 8006b64:	20000e58 	.word	0x20000e58

08006b68 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8006b68:	b580      	push	{r7, lr}
 8006b6a:	b08e      	sub	sp, #56	@ 0x38
 8006b6c:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006b6e:	e0ce      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2b00      	cmp	r3, #0
 8006b74:	da19      	bge.n	8006baa <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8006b76:	1d3b      	adds	r3, r7, #4
 8006b78:	3304      	adds	r3, #4
 8006b7a:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8006b7c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b7e:	2b00      	cmp	r3, #0
 8006b80:	d10b      	bne.n	8006b9a <prvProcessReceivedCommands+0x32>
	__asm volatile
 8006b82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b86:	f383 8811 	msr	BASEPRI, r3
 8006b8a:	f3bf 8f6f 	isb	sy
 8006b8e:	f3bf 8f4f 	dsb	sy
 8006b92:	61fb      	str	r3, [r7, #28]
}
 8006b94:	bf00      	nop
 8006b96:	bf00      	nop
 8006b98:	e7fd      	b.n	8006b96 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8006b9a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006b9c:	681b      	ldr	r3, [r3, #0]
 8006b9e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba0:	6850      	ldr	r0, [r2, #4]
 8006ba2:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8006ba4:	6892      	ldr	r2, [r2, #8]
 8006ba6:	4611      	mov	r1, r2
 8006ba8:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8006baa:	687b      	ldr	r3, [r7, #4]
 8006bac:	2b00      	cmp	r3, #0
 8006bae:	f2c0 80ae 	blt.w	8006d0e <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8006bb2:	68fb      	ldr	r3, [r7, #12]
 8006bb4:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8006bb6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bb8:	695b      	ldr	r3, [r3, #20]
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d004      	beq.n	8006bc8 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006bbe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006bc0:	3304      	adds	r3, #4
 8006bc2:	4618      	mov	r0, r3
 8006bc4:	f7fe f8e6 	bl	8004d94 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8006bc8:	463b      	mov	r3, r7
 8006bca:	4618      	mov	r0, r3
 8006bcc:	f7ff ff6a 	bl	8006aa4 <prvSampleTimeNow>
 8006bd0:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 8006bd2:	687b      	ldr	r3, [r7, #4]
 8006bd4:	2b09      	cmp	r3, #9
 8006bd6:	f200 8097 	bhi.w	8006d08 <prvProcessReceivedCommands+0x1a0>
 8006bda:	a201      	add	r2, pc, #4	@ (adr r2, 8006be0 <prvProcessReceivedCommands+0x78>)
 8006bdc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006be0:	08006c09 	.word	0x08006c09
 8006be4:	08006c09 	.word	0x08006c09
 8006be8:	08006c09 	.word	0x08006c09
 8006bec:	08006c7f 	.word	0x08006c7f
 8006bf0:	08006c93 	.word	0x08006c93
 8006bf4:	08006cdf 	.word	0x08006cdf
 8006bf8:	08006c09 	.word	0x08006c09
 8006bfc:	08006c09 	.word	0x08006c09
 8006c00:	08006c7f 	.word	0x08006c7f
 8006c04:	08006c93 	.word	0x08006c93
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c08:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c0a:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c0e:	f043 0301 	orr.w	r3, r3, #1
 8006c12:	b2da      	uxtb	r2, r3
 8006c14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c16:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8006c1a:	68ba      	ldr	r2, [r7, #8]
 8006c1c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c1e:	699b      	ldr	r3, [r3, #24]
 8006c20:	18d1      	adds	r1, r2, r3
 8006c22:	68bb      	ldr	r3, [r7, #8]
 8006c24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006c26:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c28:	f7ff ff5c 	bl	8006ae4 <prvInsertTimerInActiveList>
 8006c2c:	4603      	mov	r3, r0
 8006c2e:	2b00      	cmp	r3, #0
 8006c30:	d06c      	beq.n	8006d0c <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006c32:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c34:	6a1b      	ldr	r3, [r3, #32]
 8006c36:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c38:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006c3a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c3c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c40:	f003 0304 	and.w	r3, r3, #4
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d061      	beq.n	8006d0c <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8006c48:	68ba      	ldr	r2, [r7, #8]
 8006c4a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c4c:	699b      	ldr	r3, [r3, #24]
 8006c4e:	441a      	add	r2, r3
 8006c50:	2300      	movs	r3, #0
 8006c52:	9300      	str	r3, [sp, #0]
 8006c54:	2300      	movs	r3, #0
 8006c56:	2100      	movs	r1, #0
 8006c58:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006c5a:	f7ff fe01 	bl	8006860 <xTimerGenericCommand>
 8006c5e:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8006c60:	6a3b      	ldr	r3, [r7, #32]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d152      	bne.n	8006d0c <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8006c66:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c6a:	f383 8811 	msr	BASEPRI, r3
 8006c6e:	f3bf 8f6f 	isb	sy
 8006c72:	f3bf 8f4f 	dsb	sy
 8006c76:	61bb      	str	r3, [r7, #24]
}
 8006c78:	bf00      	nop
 8006c7a:	bf00      	nop
 8006c7c:	e7fd      	b.n	8006c7a <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006c7e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c80:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c84:	f023 0301 	bic.w	r3, r3, #1
 8006c88:	b2da      	uxtb	r2, r3
 8006c8a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c8c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006c90:	e03d      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8006c92:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006c94:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006c98:	f043 0301 	orr.w	r3, r3, #1
 8006c9c:	b2da      	uxtb	r2, r3
 8006c9e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca0:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8006ca4:	68ba      	ldr	r2, [r7, #8]
 8006ca6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ca8:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8006caa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cac:	699b      	ldr	r3, [r3, #24]
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	d10b      	bne.n	8006cca <prvProcessReceivedCommands+0x162>
	__asm volatile
 8006cb2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006cb6:	f383 8811 	msr	BASEPRI, r3
 8006cba:	f3bf 8f6f 	isb	sy
 8006cbe:	f3bf 8f4f 	dsb	sy
 8006cc2:	617b      	str	r3, [r7, #20]
}
 8006cc4:	bf00      	nop
 8006cc6:	bf00      	nop
 8006cc8:	e7fd      	b.n	8006cc6 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8006cca:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ccc:	699a      	ldr	r2, [r3, #24]
 8006cce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd0:	18d1      	adds	r1, r2, r3
 8006cd2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006cd4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006cd6:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cd8:	f7ff ff04 	bl	8006ae4 <prvInsertTimerInActiveList>
					break;
 8006cdc:	e017      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8006cde:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006ce0:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006ce4:	f003 0302 	and.w	r3, r3, #2
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d103      	bne.n	8006cf4 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 8006cec:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006cee:	f000 fbeb 	bl	80074c8 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8006cf2:	e00c      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8006cf4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006cf6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006cfa:	f023 0301 	bic.w	r3, r3, #1
 8006cfe:	b2da      	uxtb	r2, r3
 8006d00:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006d02:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 8006d06:	e002      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 8006d08:	bf00      	nop
 8006d0a:	e000      	b.n	8006d0e <prvProcessReceivedCommands+0x1a6>
					break;
 8006d0c:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8006d0e:	4b08      	ldr	r3, [pc, #32]	@ (8006d30 <prvProcessReceivedCommands+0x1c8>)
 8006d10:	681b      	ldr	r3, [r3, #0]
 8006d12:	1d39      	adds	r1, r7, #4
 8006d14:	2200      	movs	r2, #0
 8006d16:	4618      	mov	r0, r3
 8006d18:	f7fe fb4c 	bl	80053b4 <xQueueReceive>
 8006d1c:	4603      	mov	r3, r0
 8006d1e:	2b00      	cmp	r3, #0
 8006d20:	f47f af26 	bne.w	8006b70 <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8006d24:	bf00      	nop
 8006d26:	bf00      	nop
 8006d28:	3730      	adds	r7, #48	@ 0x30
 8006d2a:	46bd      	mov	sp, r7
 8006d2c:	bd80      	pop	{r7, pc}
 8006d2e:	bf00      	nop
 8006d30:	20000e60 	.word	0x20000e60

08006d34 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8006d34:	b580      	push	{r7, lr}
 8006d36:	b088      	sub	sp, #32
 8006d38:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006d3a:	e049      	b.n	8006dd0 <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8006d3c:	4b2e      	ldr	r3, [pc, #184]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006d3e:	681b      	ldr	r3, [r3, #0]
 8006d40:	68db      	ldr	r3, [r3, #12]
 8006d42:	681b      	ldr	r3, [r3, #0]
 8006d44:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006d46:	4b2c      	ldr	r3, [pc, #176]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006d48:	681b      	ldr	r3, [r3, #0]
 8006d4a:	68db      	ldr	r3, [r3, #12]
 8006d4c:	68db      	ldr	r3, [r3, #12]
 8006d4e:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8006d50:	68fb      	ldr	r3, [r7, #12]
 8006d52:	3304      	adds	r3, #4
 8006d54:	4618      	mov	r0, r3
 8006d56:	f7fe f81d 	bl	8004d94 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	6a1b      	ldr	r3, [r3, #32]
 8006d5e:	68f8      	ldr	r0, [r7, #12]
 8006d60:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8006d62:	68fb      	ldr	r3, [r7, #12]
 8006d64:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8006d68:	f003 0304 	and.w	r3, r3, #4
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d02f      	beq.n	8006dd0 <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	699b      	ldr	r3, [r3, #24]
 8006d74:	693a      	ldr	r2, [r7, #16]
 8006d76:	4413      	add	r3, r2
 8006d78:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8006d7a:	68ba      	ldr	r2, [r7, #8]
 8006d7c:	693b      	ldr	r3, [r7, #16]
 8006d7e:	429a      	cmp	r2, r3
 8006d80:	d90e      	bls.n	8006da0 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	68ba      	ldr	r2, [r7, #8]
 8006d86:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	68fa      	ldr	r2, [r7, #12]
 8006d8c:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8006d8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006d90:	681a      	ldr	r2, [r3, #0]
 8006d92:	68fb      	ldr	r3, [r7, #12]
 8006d94:	3304      	adds	r3, #4
 8006d96:	4619      	mov	r1, r3
 8006d98:	4610      	mov	r0, r2
 8006d9a:	f7fd ffc2 	bl	8004d22 <vListInsert>
 8006d9e:	e017      	b.n	8006dd0 <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8006da0:	2300      	movs	r3, #0
 8006da2:	9300      	str	r3, [sp, #0]
 8006da4:	2300      	movs	r3, #0
 8006da6:	693a      	ldr	r2, [r7, #16]
 8006da8:	2100      	movs	r1, #0
 8006daa:	68f8      	ldr	r0, [r7, #12]
 8006dac:	f7ff fd58 	bl	8006860 <xTimerGenericCommand>
 8006db0:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2b00      	cmp	r3, #0
 8006db6:	d10b      	bne.n	8006dd0 <prvSwitchTimerLists+0x9c>
	__asm volatile
 8006db8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006dbc:	f383 8811 	msr	BASEPRI, r3
 8006dc0:	f3bf 8f6f 	isb	sy
 8006dc4:	f3bf 8f4f 	dsb	sy
 8006dc8:	603b      	str	r3, [r7, #0]
}
 8006dca:	bf00      	nop
 8006dcc:	bf00      	nop
 8006dce:	e7fd      	b.n	8006dcc <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8006dd0:	4b09      	ldr	r3, [pc, #36]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006dd2:	681b      	ldr	r3, [r3, #0]
 8006dd4:	681b      	ldr	r3, [r3, #0]
 8006dd6:	2b00      	cmp	r3, #0
 8006dd8:	d1b0      	bne.n	8006d3c <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8006dda:	4b07      	ldr	r3, [pc, #28]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8006de0:	4b06      	ldr	r3, [pc, #24]	@ (8006dfc <prvSwitchTimerLists+0xc8>)
 8006de2:	681b      	ldr	r3, [r3, #0]
 8006de4:	4a04      	ldr	r2, [pc, #16]	@ (8006df8 <prvSwitchTimerLists+0xc4>)
 8006de6:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8006de8:	4a04      	ldr	r2, [pc, #16]	@ (8006dfc <prvSwitchTimerLists+0xc8>)
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	6013      	str	r3, [r2, #0]
}
 8006dee:	bf00      	nop
 8006df0:	3718      	adds	r7, #24
 8006df2:	46bd      	mov	sp, r7
 8006df4:	bd80      	pop	{r7, pc}
 8006df6:	bf00      	nop
 8006df8:	20000e58 	.word	0x20000e58
 8006dfc:	20000e5c 	.word	0x20000e5c

08006e00 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8006e00:	b580      	push	{r7, lr}
 8006e02:	b082      	sub	sp, #8
 8006e04:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8006e06:	f000 f96f 	bl	80070e8 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8006e0a:	4b15      	ldr	r3, [pc, #84]	@ (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	2b00      	cmp	r3, #0
 8006e10:	d120      	bne.n	8006e54 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8006e12:	4814      	ldr	r0, [pc, #80]	@ (8006e64 <prvCheckForValidListAndQueue+0x64>)
 8006e14:	f7fd ff34 	bl	8004c80 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8006e18:	4813      	ldr	r0, [pc, #76]	@ (8006e68 <prvCheckForValidListAndQueue+0x68>)
 8006e1a:	f7fd ff31 	bl	8004c80 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8006e1e:	4b13      	ldr	r3, [pc, #76]	@ (8006e6c <prvCheckForValidListAndQueue+0x6c>)
 8006e20:	4a10      	ldr	r2, [pc, #64]	@ (8006e64 <prvCheckForValidListAndQueue+0x64>)
 8006e22:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8006e24:	4b12      	ldr	r3, [pc, #72]	@ (8006e70 <prvCheckForValidListAndQueue+0x70>)
 8006e26:	4a10      	ldr	r2, [pc, #64]	@ (8006e68 <prvCheckForValidListAndQueue+0x68>)
 8006e28:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8006e2a:	2300      	movs	r3, #0
 8006e2c:	9300      	str	r3, [sp, #0]
 8006e2e:	4b11      	ldr	r3, [pc, #68]	@ (8006e74 <prvCheckForValidListAndQueue+0x74>)
 8006e30:	4a11      	ldr	r2, [pc, #68]	@ (8006e78 <prvCheckForValidListAndQueue+0x78>)
 8006e32:	2110      	movs	r1, #16
 8006e34:	200a      	movs	r0, #10
 8006e36:	f7fe f841 	bl	8004ebc <xQueueGenericCreateStatic>
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	4a08      	ldr	r2, [pc, #32]	@ (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e3e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8006e40:	4b07      	ldr	r3, [pc, #28]	@ (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	d005      	beq.n	8006e54 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8006e48:	4b05      	ldr	r3, [pc, #20]	@ (8006e60 <prvCheckForValidListAndQueue+0x60>)
 8006e4a:	681b      	ldr	r3, [r3, #0]
 8006e4c:	490b      	ldr	r1, [pc, #44]	@ (8006e7c <prvCheckForValidListAndQueue+0x7c>)
 8006e4e:	4618      	mov	r0, r3
 8006e50:	f7fe fd24 	bl	800589c <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006e54:	f000 f97a 	bl	800714c <vPortExitCritical>
}
 8006e58:	bf00      	nop
 8006e5a:	46bd      	mov	sp, r7
 8006e5c:	bd80      	pop	{r7, pc}
 8006e5e:	bf00      	nop
 8006e60:	20000e60 	.word	0x20000e60
 8006e64:	20000e30 	.word	0x20000e30
 8006e68:	20000e44 	.word	0x20000e44
 8006e6c:	20000e58 	.word	0x20000e58
 8006e70:	20000e5c 	.word	0x20000e5c
 8006e74:	20000f0c 	.word	0x20000f0c
 8006e78:	20000e6c 	.word	0x20000e6c
 8006e7c:	08009ee4 	.word	0x08009ee4

08006e80 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8006e80:	b480      	push	{r7}
 8006e82:	b085      	sub	sp, #20
 8006e84:	af00      	add	r7, sp, #0
 8006e86:	60f8      	str	r0, [r7, #12]
 8006e88:	60b9      	str	r1, [r7, #8]
 8006e8a:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8006e8c:	68fb      	ldr	r3, [r7, #12]
 8006e8e:	3b04      	subs	r3, #4
 8006e90:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8006e98:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006e9a:	68fb      	ldr	r3, [r7, #12]
 8006e9c:	3b04      	subs	r3, #4
 8006e9e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f023 0201 	bic.w	r2, r3, #1
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8006eaa:	68fb      	ldr	r3, [r7, #12]
 8006eac:	3b04      	subs	r3, #4
 8006eae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8006eb0:	4a0c      	ldr	r2, [pc, #48]	@ (8006ee4 <pxPortInitialiseStack+0x64>)
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8006eb6:	68fb      	ldr	r3, [r7, #12]
 8006eb8:	3b14      	subs	r3, #20
 8006eba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8006ebc:	687a      	ldr	r2, [r7, #4]
 8006ebe:	68fb      	ldr	r3, [r7, #12]
 8006ec0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	3b04      	subs	r3, #4
 8006ec6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	f06f 0202 	mvn.w	r2, #2
 8006ece:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	3b20      	subs	r3, #32
 8006ed4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8006ed6:	68fb      	ldr	r3, [r7, #12]
}
 8006ed8:	4618      	mov	r0, r3
 8006eda:	3714      	adds	r7, #20
 8006edc:	46bd      	mov	sp, r7
 8006ede:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ee2:	4770      	bx	lr
 8006ee4:	08006ee9 	.word	0x08006ee9

08006ee8 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8006ee8:	b480      	push	{r7}
 8006eea:	b085      	sub	sp, #20
 8006eec:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8006eee:	2300      	movs	r3, #0
 8006ef0:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8006ef2:	4b13      	ldr	r3, [pc, #76]	@ (8006f40 <prvTaskExitError+0x58>)
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006efa:	d00b      	beq.n	8006f14 <prvTaskExitError+0x2c>
	__asm volatile
 8006efc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f00:	f383 8811 	msr	BASEPRI, r3
 8006f04:	f3bf 8f6f 	isb	sy
 8006f08:	f3bf 8f4f 	dsb	sy
 8006f0c:	60fb      	str	r3, [r7, #12]
}
 8006f0e:	bf00      	nop
 8006f10:	bf00      	nop
 8006f12:	e7fd      	b.n	8006f10 <prvTaskExitError+0x28>
	__asm volatile
 8006f14:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f18:	f383 8811 	msr	BASEPRI, r3
 8006f1c:	f3bf 8f6f 	isb	sy
 8006f20:	f3bf 8f4f 	dsb	sy
 8006f24:	60bb      	str	r3, [r7, #8]
}
 8006f26:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8006f28:	bf00      	nop
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2b00      	cmp	r3, #0
 8006f2e:	d0fc      	beq.n	8006f2a <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8006f30:	bf00      	nop
 8006f32:	bf00      	nop
 8006f34:	3714      	adds	r7, #20
 8006f36:	46bd      	mov	sp, r7
 8006f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3c:	4770      	bx	lr
 8006f3e:	bf00      	nop
 8006f40:	2000000c 	.word	0x2000000c
	...

08006f50 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8006f50:	4b07      	ldr	r3, [pc, #28]	@ (8006f70 <pxCurrentTCBConst2>)
 8006f52:	6819      	ldr	r1, [r3, #0]
 8006f54:	6808      	ldr	r0, [r1, #0]
 8006f56:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f5a:	f380 8809 	msr	PSP, r0
 8006f5e:	f3bf 8f6f 	isb	sy
 8006f62:	f04f 0000 	mov.w	r0, #0
 8006f66:	f380 8811 	msr	BASEPRI, r0
 8006f6a:	4770      	bx	lr
 8006f6c:	f3af 8000 	nop.w

08006f70 <pxCurrentTCBConst2>:
 8006f70:	20000930 	.word	0x20000930
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8006f74:	bf00      	nop
 8006f76:	bf00      	nop

08006f78 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8006f78:	4808      	ldr	r0, [pc, #32]	@ (8006f9c <prvPortStartFirstTask+0x24>)
 8006f7a:	6800      	ldr	r0, [r0, #0]
 8006f7c:	6800      	ldr	r0, [r0, #0]
 8006f7e:	f380 8808 	msr	MSP, r0
 8006f82:	f04f 0000 	mov.w	r0, #0
 8006f86:	f380 8814 	msr	CONTROL, r0
 8006f8a:	b662      	cpsie	i
 8006f8c:	b661      	cpsie	f
 8006f8e:	f3bf 8f4f 	dsb	sy
 8006f92:	f3bf 8f6f 	isb	sy
 8006f96:	df00      	svc	0
 8006f98:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8006f9a:	bf00      	nop
 8006f9c:	e000ed08 	.word	0xe000ed08

08006fa0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8006fa0:	b580      	push	{r7, lr}
 8006fa2:	b086      	sub	sp, #24
 8006fa4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8006fa6:	4b47      	ldr	r3, [pc, #284]	@ (80070c4 <xPortStartScheduler+0x124>)
 8006fa8:	681b      	ldr	r3, [r3, #0]
 8006faa:	4a47      	ldr	r2, [pc, #284]	@ (80070c8 <xPortStartScheduler+0x128>)
 8006fac:	4293      	cmp	r3, r2
 8006fae:	d10b      	bne.n	8006fc8 <xPortStartScheduler+0x28>
	__asm volatile
 8006fb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fb4:	f383 8811 	msr	BASEPRI, r3
 8006fb8:	f3bf 8f6f 	isb	sy
 8006fbc:	f3bf 8f4f 	dsb	sy
 8006fc0:	60fb      	str	r3, [r7, #12]
}
 8006fc2:	bf00      	nop
 8006fc4:	bf00      	nop
 8006fc6:	e7fd      	b.n	8006fc4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8006fc8:	4b3e      	ldr	r3, [pc, #248]	@ (80070c4 <xPortStartScheduler+0x124>)
 8006fca:	681b      	ldr	r3, [r3, #0]
 8006fcc:	4a3f      	ldr	r2, [pc, #252]	@ (80070cc <xPortStartScheduler+0x12c>)
 8006fce:	4293      	cmp	r3, r2
 8006fd0:	d10b      	bne.n	8006fea <xPortStartScheduler+0x4a>
	__asm volatile
 8006fd2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006fd6:	f383 8811 	msr	BASEPRI, r3
 8006fda:	f3bf 8f6f 	isb	sy
 8006fde:	f3bf 8f4f 	dsb	sy
 8006fe2:	613b      	str	r3, [r7, #16]
}
 8006fe4:	bf00      	nop
 8006fe6:	bf00      	nop
 8006fe8:	e7fd      	b.n	8006fe6 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8006fea:	4b39      	ldr	r3, [pc, #228]	@ (80070d0 <xPortStartScheduler+0x130>)
 8006fec:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8006fee:	697b      	ldr	r3, [r7, #20]
 8006ff0:	781b      	ldrb	r3, [r3, #0]
 8006ff2:	b2db      	uxtb	r3, r3
 8006ff4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8006ff6:	697b      	ldr	r3, [r7, #20]
 8006ff8:	22ff      	movs	r2, #255	@ 0xff
 8006ffa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8006ffc:	697b      	ldr	r3, [r7, #20]
 8006ffe:	781b      	ldrb	r3, [r3, #0]
 8007000:	b2db      	uxtb	r3, r3
 8007002:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007004:	78fb      	ldrb	r3, [r7, #3]
 8007006:	b2db      	uxtb	r3, r3
 8007008:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 800700c:	b2da      	uxtb	r2, r3
 800700e:	4b31      	ldr	r3, [pc, #196]	@ (80070d4 <xPortStartScheduler+0x134>)
 8007010:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007012:	4b31      	ldr	r3, [pc, #196]	@ (80070d8 <xPortStartScheduler+0x138>)
 8007014:	2207      	movs	r2, #7
 8007016:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007018:	e009      	b.n	800702e <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 800701a:	4b2f      	ldr	r3, [pc, #188]	@ (80070d8 <xPortStartScheduler+0x138>)
 800701c:	681b      	ldr	r3, [r3, #0]
 800701e:	3b01      	subs	r3, #1
 8007020:	4a2d      	ldr	r2, [pc, #180]	@ (80070d8 <xPortStartScheduler+0x138>)
 8007022:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007024:	78fb      	ldrb	r3, [r7, #3]
 8007026:	b2db      	uxtb	r3, r3
 8007028:	005b      	lsls	r3, r3, #1
 800702a:	b2db      	uxtb	r3, r3
 800702c:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800702e:	78fb      	ldrb	r3, [r7, #3]
 8007030:	b2db      	uxtb	r3, r3
 8007032:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007036:	2b80      	cmp	r3, #128	@ 0x80
 8007038:	d0ef      	beq.n	800701a <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800703a:	4b27      	ldr	r3, [pc, #156]	@ (80070d8 <xPortStartScheduler+0x138>)
 800703c:	681b      	ldr	r3, [r3, #0]
 800703e:	f1c3 0307 	rsb	r3, r3, #7
 8007042:	2b04      	cmp	r3, #4
 8007044:	d00b      	beq.n	800705e <xPortStartScheduler+0xbe>
	__asm volatile
 8007046:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800704a:	f383 8811 	msr	BASEPRI, r3
 800704e:	f3bf 8f6f 	isb	sy
 8007052:	f3bf 8f4f 	dsb	sy
 8007056:	60bb      	str	r3, [r7, #8]
}
 8007058:	bf00      	nop
 800705a:	bf00      	nop
 800705c:	e7fd      	b.n	800705a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800705e:	4b1e      	ldr	r3, [pc, #120]	@ (80070d8 <xPortStartScheduler+0x138>)
 8007060:	681b      	ldr	r3, [r3, #0]
 8007062:	021b      	lsls	r3, r3, #8
 8007064:	4a1c      	ldr	r2, [pc, #112]	@ (80070d8 <xPortStartScheduler+0x138>)
 8007066:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007068:	4b1b      	ldr	r3, [pc, #108]	@ (80070d8 <xPortStartScheduler+0x138>)
 800706a:	681b      	ldr	r3, [r3, #0]
 800706c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007070:	4a19      	ldr	r2, [pc, #100]	@ (80070d8 <xPortStartScheduler+0x138>)
 8007072:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	b2da      	uxtb	r2, r3
 8007078:	697b      	ldr	r3, [r7, #20]
 800707a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800707c:	4b17      	ldr	r3, [pc, #92]	@ (80070dc <xPortStartScheduler+0x13c>)
 800707e:	681b      	ldr	r3, [r3, #0]
 8007080:	4a16      	ldr	r2, [pc, #88]	@ (80070dc <xPortStartScheduler+0x13c>)
 8007082:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007086:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007088:	4b14      	ldr	r3, [pc, #80]	@ (80070dc <xPortStartScheduler+0x13c>)
 800708a:	681b      	ldr	r3, [r3, #0]
 800708c:	4a13      	ldr	r2, [pc, #76]	@ (80070dc <xPortStartScheduler+0x13c>)
 800708e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007092:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007094:	f000 f8da 	bl	800724c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007098:	4b11      	ldr	r3, [pc, #68]	@ (80070e0 <xPortStartScheduler+0x140>)
 800709a:	2200      	movs	r2, #0
 800709c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800709e:	f000 f8f9 	bl	8007294 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 80070a2:	4b10      	ldr	r3, [pc, #64]	@ (80070e4 <xPortStartScheduler+0x144>)
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	4a0f      	ldr	r2, [pc, #60]	@ (80070e4 <xPortStartScheduler+0x144>)
 80070a8:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 80070ac:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 80070ae:	f7ff ff63 	bl	8006f78 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 80070b2:	f7ff f82b 	bl	800610c <vTaskSwitchContext>
	prvTaskExitError();
 80070b6:	f7ff ff17 	bl	8006ee8 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 80070ba:	2300      	movs	r3, #0
}
 80070bc:	4618      	mov	r0, r3
 80070be:	3718      	adds	r7, #24
 80070c0:	46bd      	mov	sp, r7
 80070c2:	bd80      	pop	{r7, pc}
 80070c4:	e000ed00 	.word	0xe000ed00
 80070c8:	410fc271 	.word	0x410fc271
 80070cc:	410fc270 	.word	0x410fc270
 80070d0:	e000e400 	.word	0xe000e400
 80070d4:	20000f5c 	.word	0x20000f5c
 80070d8:	20000f60 	.word	0x20000f60
 80070dc:	e000ed20 	.word	0xe000ed20
 80070e0:	2000000c 	.word	0x2000000c
 80070e4:	e000ef34 	.word	0xe000ef34

080070e8 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 80070e8:	b480      	push	{r7}
 80070ea:	b083      	sub	sp, #12
 80070ec:	af00      	add	r7, sp, #0
	__asm volatile
 80070ee:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80070f2:	f383 8811 	msr	BASEPRI, r3
 80070f6:	f3bf 8f6f 	isb	sy
 80070fa:	f3bf 8f4f 	dsb	sy
 80070fe:	607b      	str	r3, [r7, #4]
}
 8007100:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007102:	4b10      	ldr	r3, [pc, #64]	@ (8007144 <vPortEnterCritical+0x5c>)
 8007104:	681b      	ldr	r3, [r3, #0]
 8007106:	3301      	adds	r3, #1
 8007108:	4a0e      	ldr	r2, [pc, #56]	@ (8007144 <vPortEnterCritical+0x5c>)
 800710a:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800710c:	4b0d      	ldr	r3, [pc, #52]	@ (8007144 <vPortEnterCritical+0x5c>)
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	2b01      	cmp	r3, #1
 8007112:	d110      	bne.n	8007136 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007114:	4b0c      	ldr	r3, [pc, #48]	@ (8007148 <vPortEnterCritical+0x60>)
 8007116:	681b      	ldr	r3, [r3, #0]
 8007118:	b2db      	uxtb	r3, r3
 800711a:	2b00      	cmp	r3, #0
 800711c:	d00b      	beq.n	8007136 <vPortEnterCritical+0x4e>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	603b      	str	r3, [r7, #0]
}
 8007130:	bf00      	nop
 8007132:	bf00      	nop
 8007134:	e7fd      	b.n	8007132 <vPortEnterCritical+0x4a>
	}
}
 8007136:	bf00      	nop
 8007138:	370c      	adds	r7, #12
 800713a:	46bd      	mov	sp, r7
 800713c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007140:	4770      	bx	lr
 8007142:	bf00      	nop
 8007144:	2000000c 	.word	0x2000000c
 8007148:	e000ed04 	.word	0xe000ed04

0800714c <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800714c:	b480      	push	{r7}
 800714e:	b083      	sub	sp, #12
 8007150:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007152:	4b12      	ldr	r3, [pc, #72]	@ (800719c <vPortExitCritical+0x50>)
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	2b00      	cmp	r3, #0
 8007158:	d10b      	bne.n	8007172 <vPortExitCritical+0x26>
	__asm volatile
 800715a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800715e:	f383 8811 	msr	BASEPRI, r3
 8007162:	f3bf 8f6f 	isb	sy
 8007166:	f3bf 8f4f 	dsb	sy
 800716a:	607b      	str	r3, [r7, #4]
}
 800716c:	bf00      	nop
 800716e:	bf00      	nop
 8007170:	e7fd      	b.n	800716e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007172:	4b0a      	ldr	r3, [pc, #40]	@ (800719c <vPortExitCritical+0x50>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	3b01      	subs	r3, #1
 8007178:	4a08      	ldr	r2, [pc, #32]	@ (800719c <vPortExitCritical+0x50>)
 800717a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800717c:	4b07      	ldr	r3, [pc, #28]	@ (800719c <vPortExitCritical+0x50>)
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	2b00      	cmp	r3, #0
 8007182:	d105      	bne.n	8007190 <vPortExitCritical+0x44>
 8007184:	2300      	movs	r3, #0
 8007186:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007188:	683b      	ldr	r3, [r7, #0]
 800718a:	f383 8811 	msr	BASEPRI, r3
}
 800718e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007190:	bf00      	nop
 8007192:	370c      	adds	r7, #12
 8007194:	46bd      	mov	sp, r7
 8007196:	f85d 7b04 	ldr.w	r7, [sp], #4
 800719a:	4770      	bx	lr
 800719c:	2000000c 	.word	0x2000000c

080071a0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80071a0:	f3ef 8009 	mrs	r0, PSP
 80071a4:	f3bf 8f6f 	isb	sy
 80071a8:	4b15      	ldr	r3, [pc, #84]	@ (8007200 <pxCurrentTCBConst>)
 80071aa:	681a      	ldr	r2, [r3, #0]
 80071ac:	f01e 0f10 	tst.w	lr, #16
 80071b0:	bf08      	it	eq
 80071b2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80071b6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071ba:	6010      	str	r0, [r2, #0]
 80071bc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80071c0:	f04f 0050 	mov.w	r0, #80	@ 0x50
 80071c4:	f380 8811 	msr	BASEPRI, r0
 80071c8:	f3bf 8f4f 	dsb	sy
 80071cc:	f3bf 8f6f 	isb	sy
 80071d0:	f7fe ff9c 	bl	800610c <vTaskSwitchContext>
 80071d4:	f04f 0000 	mov.w	r0, #0
 80071d8:	f380 8811 	msr	BASEPRI, r0
 80071dc:	bc09      	pop	{r0, r3}
 80071de:	6819      	ldr	r1, [r3, #0]
 80071e0:	6808      	ldr	r0, [r1, #0]
 80071e2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071e6:	f01e 0f10 	tst.w	lr, #16
 80071ea:	bf08      	it	eq
 80071ec:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 80071f0:	f380 8809 	msr	PSP, r0
 80071f4:	f3bf 8f6f 	isb	sy
 80071f8:	4770      	bx	lr
 80071fa:	bf00      	nop
 80071fc:	f3af 8000 	nop.w

08007200 <pxCurrentTCBConst>:
 8007200:	20000930 	.word	0x20000930
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007204:	bf00      	nop
 8007206:	bf00      	nop

08007208 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b082      	sub	sp, #8
 800720c:	af00      	add	r7, sp, #0
	__asm volatile
 800720e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007212:	f383 8811 	msr	BASEPRI, r3
 8007216:	f3bf 8f6f 	isb	sy
 800721a:	f3bf 8f4f 	dsb	sy
 800721e:	607b      	str	r3, [r7, #4]
}
 8007220:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007222:	f7fe feb9 	bl	8005f98 <xTaskIncrementTick>
 8007226:	4603      	mov	r3, r0
 8007228:	2b00      	cmp	r3, #0
 800722a:	d003      	beq.n	8007234 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800722c:	4b06      	ldr	r3, [pc, #24]	@ (8007248 <xPortSysTickHandler+0x40>)
 800722e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007232:	601a      	str	r2, [r3, #0]
 8007234:	2300      	movs	r3, #0
 8007236:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007238:	683b      	ldr	r3, [r7, #0]
 800723a:	f383 8811 	msr	BASEPRI, r3
}
 800723e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007240:	bf00      	nop
 8007242:	3708      	adds	r7, #8
 8007244:	46bd      	mov	sp, r7
 8007246:	bd80      	pop	{r7, pc}
 8007248:	e000ed04 	.word	0xe000ed04

0800724c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800724c:	b480      	push	{r7}
 800724e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007250:	4b0b      	ldr	r3, [pc, #44]	@ (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007252:	2200      	movs	r2, #0
 8007254:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007256:	4b0b      	ldr	r3, [pc, #44]	@ (8007284 <vPortSetupTimerInterrupt+0x38>)
 8007258:	2200      	movs	r2, #0
 800725a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800725c:	4b0a      	ldr	r3, [pc, #40]	@ (8007288 <vPortSetupTimerInterrupt+0x3c>)
 800725e:	681b      	ldr	r3, [r3, #0]
 8007260:	4a0a      	ldr	r2, [pc, #40]	@ (800728c <vPortSetupTimerInterrupt+0x40>)
 8007262:	fba2 2303 	umull	r2, r3, r2, r3
 8007266:	099b      	lsrs	r3, r3, #6
 8007268:	4a09      	ldr	r2, [pc, #36]	@ (8007290 <vPortSetupTimerInterrupt+0x44>)
 800726a:	3b01      	subs	r3, #1
 800726c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800726e:	4b04      	ldr	r3, [pc, #16]	@ (8007280 <vPortSetupTimerInterrupt+0x34>)
 8007270:	2207      	movs	r2, #7
 8007272:	601a      	str	r2, [r3, #0]
}
 8007274:	bf00      	nop
 8007276:	46bd      	mov	sp, r7
 8007278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727c:	4770      	bx	lr
 800727e:	bf00      	nop
 8007280:	e000e010 	.word	0xe000e010
 8007284:	e000e018 	.word	0xe000e018
 8007288:	20000000 	.word	0x20000000
 800728c:	10624dd3 	.word	0x10624dd3
 8007290:	e000e014 	.word	0xe000e014

08007294 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007294:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 80072a4 <vPortEnableVFP+0x10>
 8007298:	6801      	ldr	r1, [r0, #0]
 800729a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800729e:	6001      	str	r1, [r0, #0]
 80072a0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80072a2:	bf00      	nop
 80072a4:	e000ed88 	.word	0xe000ed88

080072a8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80072a8:	b480      	push	{r7}
 80072aa:	b085      	sub	sp, #20
 80072ac:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80072ae:	f3ef 8305 	mrs	r3, IPSR
 80072b2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80072b4:	68fb      	ldr	r3, [r7, #12]
 80072b6:	2b0f      	cmp	r3, #15
 80072b8:	d915      	bls.n	80072e6 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80072ba:	4a18      	ldr	r2, [pc, #96]	@ (800731c <vPortValidateInterruptPriority+0x74>)
 80072bc:	68fb      	ldr	r3, [r7, #12]
 80072be:	4413      	add	r3, r2
 80072c0:	781b      	ldrb	r3, [r3, #0]
 80072c2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80072c4:	4b16      	ldr	r3, [pc, #88]	@ (8007320 <vPortValidateInterruptPriority+0x78>)
 80072c6:	781b      	ldrb	r3, [r3, #0]
 80072c8:	7afa      	ldrb	r2, [r7, #11]
 80072ca:	429a      	cmp	r2, r3
 80072cc:	d20b      	bcs.n	80072e6 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 80072ce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072d2:	f383 8811 	msr	BASEPRI, r3
 80072d6:	f3bf 8f6f 	isb	sy
 80072da:	f3bf 8f4f 	dsb	sy
 80072de:	607b      	str	r3, [r7, #4]
}
 80072e0:	bf00      	nop
 80072e2:	bf00      	nop
 80072e4:	e7fd      	b.n	80072e2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80072e6:	4b0f      	ldr	r3, [pc, #60]	@ (8007324 <vPortValidateInterruptPriority+0x7c>)
 80072e8:	681b      	ldr	r3, [r3, #0]
 80072ea:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 80072ee:	4b0e      	ldr	r3, [pc, #56]	@ (8007328 <vPortValidateInterruptPriority+0x80>)
 80072f0:	681b      	ldr	r3, [r3, #0]
 80072f2:	429a      	cmp	r2, r3
 80072f4:	d90b      	bls.n	800730e <vPortValidateInterruptPriority+0x66>
	__asm volatile
 80072f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80072fa:	f383 8811 	msr	BASEPRI, r3
 80072fe:	f3bf 8f6f 	isb	sy
 8007302:	f3bf 8f4f 	dsb	sy
 8007306:	603b      	str	r3, [r7, #0]
}
 8007308:	bf00      	nop
 800730a:	bf00      	nop
 800730c:	e7fd      	b.n	800730a <vPortValidateInterruptPriority+0x62>
	}
 800730e:	bf00      	nop
 8007310:	3714      	adds	r7, #20
 8007312:	46bd      	mov	sp, r7
 8007314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007318:	4770      	bx	lr
 800731a:	bf00      	nop
 800731c:	e000e3f0 	.word	0xe000e3f0
 8007320:	20000f5c 	.word	0x20000f5c
 8007324:	e000ed0c 	.word	0xe000ed0c
 8007328:	20000f60 	.word	0x20000f60

0800732c <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800732c:	b580      	push	{r7, lr}
 800732e:	b08a      	sub	sp, #40	@ 0x28
 8007330:	af00      	add	r7, sp, #0
 8007332:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007334:	2300      	movs	r3, #0
 8007336:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007338:	f7fe fd72 	bl	8005e20 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800733c:	4b5c      	ldr	r3, [pc, #368]	@ (80074b0 <pvPortMalloc+0x184>)
 800733e:	681b      	ldr	r3, [r3, #0]
 8007340:	2b00      	cmp	r3, #0
 8007342:	d101      	bne.n	8007348 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007344:	f000 f924 	bl	8007590 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007348:	4b5a      	ldr	r3, [pc, #360]	@ (80074b4 <pvPortMalloc+0x188>)
 800734a:	681a      	ldr	r2, [r3, #0]
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	4013      	ands	r3, r2
 8007350:	2b00      	cmp	r3, #0
 8007352:	f040 8095 	bne.w	8007480 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	2b00      	cmp	r3, #0
 800735a:	d01e      	beq.n	800739a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800735c:	2208      	movs	r2, #8
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	4413      	add	r3, r2
 8007362:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	f003 0307 	and.w	r3, r3, #7
 800736a:	2b00      	cmp	r3, #0
 800736c:	d015      	beq.n	800739a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	f023 0307 	bic.w	r3, r3, #7
 8007374:	3308      	adds	r3, #8
 8007376:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	f003 0307 	and.w	r3, r3, #7
 800737e:	2b00      	cmp	r3, #0
 8007380:	d00b      	beq.n	800739a <pvPortMalloc+0x6e>
	__asm volatile
 8007382:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007386:	f383 8811 	msr	BASEPRI, r3
 800738a:	f3bf 8f6f 	isb	sy
 800738e:	f3bf 8f4f 	dsb	sy
 8007392:	617b      	str	r3, [r7, #20]
}
 8007394:	bf00      	nop
 8007396:	bf00      	nop
 8007398:	e7fd      	b.n	8007396 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	2b00      	cmp	r3, #0
 800739e:	d06f      	beq.n	8007480 <pvPortMalloc+0x154>
 80073a0:	4b45      	ldr	r3, [pc, #276]	@ (80074b8 <pvPortMalloc+0x18c>)
 80073a2:	681b      	ldr	r3, [r3, #0]
 80073a4:	687a      	ldr	r2, [r7, #4]
 80073a6:	429a      	cmp	r2, r3
 80073a8:	d86a      	bhi.n	8007480 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80073aa:	4b44      	ldr	r3, [pc, #272]	@ (80074bc <pvPortMalloc+0x190>)
 80073ac:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80073ae:	4b43      	ldr	r3, [pc, #268]	@ (80074bc <pvPortMalloc+0x190>)
 80073b0:	681b      	ldr	r3, [r3, #0]
 80073b2:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073b4:	e004      	b.n	80073c0 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 80073b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073b8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80073ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80073c0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073c2:	685b      	ldr	r3, [r3, #4]
 80073c4:	687a      	ldr	r2, [r7, #4]
 80073c6:	429a      	cmp	r2, r3
 80073c8:	d903      	bls.n	80073d2 <pvPortMalloc+0xa6>
 80073ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073cc:	681b      	ldr	r3, [r3, #0]
 80073ce:	2b00      	cmp	r3, #0
 80073d0:	d1f1      	bne.n	80073b6 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80073d2:	4b37      	ldr	r3, [pc, #220]	@ (80074b0 <pvPortMalloc+0x184>)
 80073d4:	681b      	ldr	r3, [r3, #0]
 80073d6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80073d8:	429a      	cmp	r2, r3
 80073da:	d051      	beq.n	8007480 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80073dc:	6a3b      	ldr	r3, [r7, #32]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	2208      	movs	r2, #8
 80073e2:	4413      	add	r3, r2
 80073e4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80073e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073e8:	681a      	ldr	r2, [r3, #0]
 80073ea:	6a3b      	ldr	r3, [r7, #32]
 80073ec:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80073ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80073f0:	685a      	ldr	r2, [r3, #4]
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	1ad2      	subs	r2, r2, r3
 80073f6:	2308      	movs	r3, #8
 80073f8:	005b      	lsls	r3, r3, #1
 80073fa:	429a      	cmp	r2, r3
 80073fc:	d920      	bls.n	8007440 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80073fe:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007400:	687b      	ldr	r3, [r7, #4]
 8007402:	4413      	add	r3, r2
 8007404:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8007406:	69bb      	ldr	r3, [r7, #24]
 8007408:	f003 0307 	and.w	r3, r3, #7
 800740c:	2b00      	cmp	r3, #0
 800740e:	d00b      	beq.n	8007428 <pvPortMalloc+0xfc>
	__asm volatile
 8007410:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007414:	f383 8811 	msr	BASEPRI, r3
 8007418:	f3bf 8f6f 	isb	sy
 800741c:	f3bf 8f4f 	dsb	sy
 8007420:	613b      	str	r3, [r7, #16]
}
 8007422:	bf00      	nop
 8007424:	bf00      	nop
 8007426:	e7fd      	b.n	8007424 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8007428:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800742a:	685a      	ldr	r2, [r3, #4]
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	1ad2      	subs	r2, r2, r3
 8007430:	69bb      	ldr	r3, [r7, #24]
 8007432:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8007434:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007436:	687a      	ldr	r2, [r7, #4]
 8007438:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800743a:	69b8      	ldr	r0, [r7, #24]
 800743c:	f000 f90a 	bl	8007654 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8007440:	4b1d      	ldr	r3, [pc, #116]	@ (80074b8 <pvPortMalloc+0x18c>)
 8007442:	681a      	ldr	r2, [r3, #0]
 8007444:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007446:	685b      	ldr	r3, [r3, #4]
 8007448:	1ad3      	subs	r3, r2, r3
 800744a:	4a1b      	ldr	r2, [pc, #108]	@ (80074b8 <pvPortMalloc+0x18c>)
 800744c:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800744e:	4b1a      	ldr	r3, [pc, #104]	@ (80074b8 <pvPortMalloc+0x18c>)
 8007450:	681a      	ldr	r2, [r3, #0]
 8007452:	4b1b      	ldr	r3, [pc, #108]	@ (80074c0 <pvPortMalloc+0x194>)
 8007454:	681b      	ldr	r3, [r3, #0]
 8007456:	429a      	cmp	r2, r3
 8007458:	d203      	bcs.n	8007462 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800745a:	4b17      	ldr	r3, [pc, #92]	@ (80074b8 <pvPortMalloc+0x18c>)
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	4a18      	ldr	r2, [pc, #96]	@ (80074c0 <pvPortMalloc+0x194>)
 8007460:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8007462:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007464:	685a      	ldr	r2, [r3, #4]
 8007466:	4b13      	ldr	r3, [pc, #76]	@ (80074b4 <pvPortMalloc+0x188>)
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	431a      	orrs	r2, r3
 800746c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800746e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8007470:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007472:	2200      	movs	r2, #0
 8007474:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8007476:	4b13      	ldr	r3, [pc, #76]	@ (80074c4 <pvPortMalloc+0x198>)
 8007478:	681b      	ldr	r3, [r3, #0]
 800747a:	3301      	adds	r3, #1
 800747c:	4a11      	ldr	r2, [pc, #68]	@ (80074c4 <pvPortMalloc+0x198>)
 800747e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8007480:	f7fe fcdc 	bl	8005e3c <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8007484:	69fb      	ldr	r3, [r7, #28]
 8007486:	f003 0307 	and.w	r3, r3, #7
 800748a:	2b00      	cmp	r3, #0
 800748c:	d00b      	beq.n	80074a6 <pvPortMalloc+0x17a>
	__asm volatile
 800748e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007492:	f383 8811 	msr	BASEPRI, r3
 8007496:	f3bf 8f6f 	isb	sy
 800749a:	f3bf 8f4f 	dsb	sy
 800749e:	60fb      	str	r3, [r7, #12]
}
 80074a0:	bf00      	nop
 80074a2:	bf00      	nop
 80074a4:	e7fd      	b.n	80074a2 <pvPortMalloc+0x176>
	return pvReturn;
 80074a6:	69fb      	ldr	r3, [r7, #28]
}
 80074a8:	4618      	mov	r0, r3
 80074aa:	3728      	adds	r7, #40	@ 0x28
 80074ac:	46bd      	mov	sp, r7
 80074ae:	bd80      	pop	{r7, pc}
 80074b0:	20004b6c 	.word	0x20004b6c
 80074b4:	20004b80 	.word	0x20004b80
 80074b8:	20004b70 	.word	0x20004b70
 80074bc:	20004b64 	.word	0x20004b64
 80074c0:	20004b74 	.word	0x20004b74
 80074c4:	20004b78 	.word	0x20004b78

080074c8 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80074c8:	b580      	push	{r7, lr}
 80074ca:	b086      	sub	sp, #24
 80074cc:	af00      	add	r7, sp, #0
 80074ce:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80074d0:	687b      	ldr	r3, [r7, #4]
 80074d2:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	2b00      	cmp	r3, #0
 80074d8:	d04f      	beq.n	800757a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80074da:	2308      	movs	r3, #8
 80074dc:	425b      	negs	r3, r3
 80074de:	697a      	ldr	r2, [r7, #20]
 80074e0:	4413      	add	r3, r2
 80074e2:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80074e4:	697b      	ldr	r3, [r7, #20]
 80074e6:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80074e8:	693b      	ldr	r3, [r7, #16]
 80074ea:	685a      	ldr	r2, [r3, #4]
 80074ec:	4b25      	ldr	r3, [pc, #148]	@ (8007584 <vPortFree+0xbc>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	4013      	ands	r3, r2
 80074f2:	2b00      	cmp	r3, #0
 80074f4:	d10b      	bne.n	800750e <vPortFree+0x46>
	__asm volatile
 80074f6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074fa:	f383 8811 	msr	BASEPRI, r3
 80074fe:	f3bf 8f6f 	isb	sy
 8007502:	f3bf 8f4f 	dsb	sy
 8007506:	60fb      	str	r3, [r7, #12]
}
 8007508:	bf00      	nop
 800750a:	bf00      	nop
 800750c:	e7fd      	b.n	800750a <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800750e:	693b      	ldr	r3, [r7, #16]
 8007510:	681b      	ldr	r3, [r3, #0]
 8007512:	2b00      	cmp	r3, #0
 8007514:	d00b      	beq.n	800752e <vPortFree+0x66>
	__asm volatile
 8007516:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800751a:	f383 8811 	msr	BASEPRI, r3
 800751e:	f3bf 8f6f 	isb	sy
 8007522:	f3bf 8f4f 	dsb	sy
 8007526:	60bb      	str	r3, [r7, #8]
}
 8007528:	bf00      	nop
 800752a:	bf00      	nop
 800752c:	e7fd      	b.n	800752a <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800752e:	693b      	ldr	r3, [r7, #16]
 8007530:	685a      	ldr	r2, [r3, #4]
 8007532:	4b14      	ldr	r3, [pc, #80]	@ (8007584 <vPortFree+0xbc>)
 8007534:	681b      	ldr	r3, [r3, #0]
 8007536:	4013      	ands	r3, r2
 8007538:	2b00      	cmp	r3, #0
 800753a:	d01e      	beq.n	800757a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800753c:	693b      	ldr	r3, [r7, #16]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2b00      	cmp	r3, #0
 8007542:	d11a      	bne.n	800757a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8007544:	693b      	ldr	r3, [r7, #16]
 8007546:	685a      	ldr	r2, [r3, #4]
 8007548:	4b0e      	ldr	r3, [pc, #56]	@ (8007584 <vPortFree+0xbc>)
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	43db      	mvns	r3, r3
 800754e:	401a      	ands	r2, r3
 8007550:	693b      	ldr	r3, [r7, #16]
 8007552:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8007554:	f7fe fc64 	bl	8005e20 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8007558:	693b      	ldr	r3, [r7, #16]
 800755a:	685a      	ldr	r2, [r3, #4]
 800755c:	4b0a      	ldr	r3, [pc, #40]	@ (8007588 <vPortFree+0xc0>)
 800755e:	681b      	ldr	r3, [r3, #0]
 8007560:	4413      	add	r3, r2
 8007562:	4a09      	ldr	r2, [pc, #36]	@ (8007588 <vPortFree+0xc0>)
 8007564:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8007566:	6938      	ldr	r0, [r7, #16]
 8007568:	f000 f874 	bl	8007654 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800756c:	4b07      	ldr	r3, [pc, #28]	@ (800758c <vPortFree+0xc4>)
 800756e:	681b      	ldr	r3, [r3, #0]
 8007570:	3301      	adds	r3, #1
 8007572:	4a06      	ldr	r2, [pc, #24]	@ (800758c <vPortFree+0xc4>)
 8007574:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8007576:	f7fe fc61 	bl	8005e3c <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800757a:	bf00      	nop
 800757c:	3718      	adds	r7, #24
 800757e:	46bd      	mov	sp, r7
 8007580:	bd80      	pop	{r7, pc}
 8007582:	bf00      	nop
 8007584:	20004b80 	.word	0x20004b80
 8007588:	20004b70 	.word	0x20004b70
 800758c:	20004b7c 	.word	0x20004b7c

08007590 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8007590:	b480      	push	{r7}
 8007592:	b085      	sub	sp, #20
 8007594:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8007596:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800759a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800759c:	4b27      	ldr	r3, [pc, #156]	@ (800763c <prvHeapInit+0xac>)
 800759e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80075a0:	68fb      	ldr	r3, [r7, #12]
 80075a2:	f003 0307 	and.w	r3, r3, #7
 80075a6:	2b00      	cmp	r3, #0
 80075a8:	d00c      	beq.n	80075c4 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80075aa:	68fb      	ldr	r3, [r7, #12]
 80075ac:	3307      	adds	r3, #7
 80075ae:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075b0:	68fb      	ldr	r3, [r7, #12]
 80075b2:	f023 0307 	bic.w	r3, r3, #7
 80075b6:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80075b8:	68ba      	ldr	r2, [r7, #8]
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	1ad3      	subs	r3, r2, r3
 80075be:	4a1f      	ldr	r2, [pc, #124]	@ (800763c <prvHeapInit+0xac>)
 80075c0:	4413      	add	r3, r2
 80075c2:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80075c4:	68fb      	ldr	r3, [r7, #12]
 80075c6:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80075c8:	4a1d      	ldr	r2, [pc, #116]	@ (8007640 <prvHeapInit+0xb0>)
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80075ce:	4b1c      	ldr	r3, [pc, #112]	@ (8007640 <prvHeapInit+0xb0>)
 80075d0:	2200      	movs	r2, #0
 80075d2:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	68ba      	ldr	r2, [r7, #8]
 80075d8:	4413      	add	r3, r2
 80075da:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80075dc:	2208      	movs	r2, #8
 80075de:	68fb      	ldr	r3, [r7, #12]
 80075e0:	1a9b      	subs	r3, r3, r2
 80075e2:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80075e4:	68fb      	ldr	r3, [r7, #12]
 80075e6:	f023 0307 	bic.w	r3, r3, #7
 80075ea:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80075ec:	68fb      	ldr	r3, [r7, #12]
 80075ee:	4a15      	ldr	r2, [pc, #84]	@ (8007644 <prvHeapInit+0xb4>)
 80075f0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80075f2:	4b14      	ldr	r3, [pc, #80]	@ (8007644 <prvHeapInit+0xb4>)
 80075f4:	681b      	ldr	r3, [r3, #0]
 80075f6:	2200      	movs	r2, #0
 80075f8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80075fa:	4b12      	ldr	r3, [pc, #72]	@ (8007644 <prvHeapInit+0xb4>)
 80075fc:	681b      	ldr	r3, [r3, #0]
 80075fe:	2200      	movs	r2, #0
 8007600:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8007606:	683b      	ldr	r3, [r7, #0]
 8007608:	68fa      	ldr	r2, [r7, #12]
 800760a:	1ad2      	subs	r2, r2, r3
 800760c:	683b      	ldr	r3, [r7, #0]
 800760e:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8007610:	4b0c      	ldr	r3, [pc, #48]	@ (8007644 <prvHeapInit+0xb4>)
 8007612:	681a      	ldr	r2, [r3, #0]
 8007614:	683b      	ldr	r3, [r7, #0]
 8007616:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007618:	683b      	ldr	r3, [r7, #0]
 800761a:	685b      	ldr	r3, [r3, #4]
 800761c:	4a0a      	ldr	r2, [pc, #40]	@ (8007648 <prvHeapInit+0xb8>)
 800761e:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8007620:	683b      	ldr	r3, [r7, #0]
 8007622:	685b      	ldr	r3, [r3, #4]
 8007624:	4a09      	ldr	r2, [pc, #36]	@ (800764c <prvHeapInit+0xbc>)
 8007626:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 8007628:	4b09      	ldr	r3, [pc, #36]	@ (8007650 <prvHeapInit+0xc0>)
 800762a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800762e:	601a      	str	r2, [r3, #0]
}
 8007630:	bf00      	nop
 8007632:	3714      	adds	r7, #20
 8007634:	46bd      	mov	sp, r7
 8007636:	f85d 7b04 	ldr.w	r7, [sp], #4
 800763a:	4770      	bx	lr
 800763c:	20000f64 	.word	0x20000f64
 8007640:	20004b64 	.word	0x20004b64
 8007644:	20004b6c 	.word	0x20004b6c
 8007648:	20004b74 	.word	0x20004b74
 800764c:	20004b70 	.word	0x20004b70
 8007650:	20004b80 	.word	0x20004b80

08007654 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8007654:	b480      	push	{r7}
 8007656:	b085      	sub	sp, #20
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800765c:	4b28      	ldr	r3, [pc, #160]	@ (8007700 <prvInsertBlockIntoFreeList+0xac>)
 800765e:	60fb      	str	r3, [r7, #12]
 8007660:	e002      	b.n	8007668 <prvInsertBlockIntoFreeList+0x14>
 8007662:	68fb      	ldr	r3, [r7, #12]
 8007664:	681b      	ldr	r3, [r3, #0]
 8007666:	60fb      	str	r3, [r7, #12]
 8007668:	68fb      	ldr	r3, [r7, #12]
 800766a:	681b      	ldr	r3, [r3, #0]
 800766c:	687a      	ldr	r2, [r7, #4]
 800766e:	429a      	cmp	r2, r3
 8007670:	d8f7      	bhi.n	8007662 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8007672:	68fb      	ldr	r3, [r7, #12]
 8007674:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	685b      	ldr	r3, [r3, #4]
 800767a:	68ba      	ldr	r2, [r7, #8]
 800767c:	4413      	add	r3, r2
 800767e:	687a      	ldr	r2, [r7, #4]
 8007680:	429a      	cmp	r2, r3
 8007682:	d108      	bne.n	8007696 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8007684:	68fb      	ldr	r3, [r7, #12]
 8007686:	685a      	ldr	r2, [r3, #4]
 8007688:	687b      	ldr	r3, [r7, #4]
 800768a:	685b      	ldr	r3, [r3, #4]
 800768c:	441a      	add	r2, r3
 800768e:	68fb      	ldr	r3, [r7, #12]
 8007690:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8007692:	68fb      	ldr	r3, [r7, #12]
 8007694:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8007696:	687b      	ldr	r3, [r7, #4]
 8007698:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	685b      	ldr	r3, [r3, #4]
 800769e:	68ba      	ldr	r2, [r7, #8]
 80076a0:	441a      	add	r2, r3
 80076a2:	68fb      	ldr	r3, [r7, #12]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d118      	bne.n	80076dc <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	681a      	ldr	r2, [r3, #0]
 80076ae:	4b15      	ldr	r3, [pc, #84]	@ (8007704 <prvInsertBlockIntoFreeList+0xb0>)
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	429a      	cmp	r2, r3
 80076b4:	d00d      	beq.n	80076d2 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80076b6:	687b      	ldr	r3, [r7, #4]
 80076b8:	685a      	ldr	r2, [r3, #4]
 80076ba:	68fb      	ldr	r3, [r7, #12]
 80076bc:	681b      	ldr	r3, [r3, #0]
 80076be:	685b      	ldr	r3, [r3, #4]
 80076c0:	441a      	add	r2, r3
 80076c2:	687b      	ldr	r3, [r7, #4]
 80076c4:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	681b      	ldr	r3, [r3, #0]
 80076ca:	681a      	ldr	r2, [r3, #0]
 80076cc:	687b      	ldr	r3, [r7, #4]
 80076ce:	601a      	str	r2, [r3, #0]
 80076d0:	e008      	b.n	80076e4 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80076d2:	4b0c      	ldr	r3, [pc, #48]	@ (8007704 <prvInsertBlockIntoFreeList+0xb0>)
 80076d4:	681a      	ldr	r2, [r3, #0]
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	601a      	str	r2, [r3, #0]
 80076da:	e003      	b.n	80076e4 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80076dc:	68fb      	ldr	r3, [r7, #12]
 80076de:	681a      	ldr	r2, [r3, #0]
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80076e4:	68fa      	ldr	r2, [r7, #12]
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	429a      	cmp	r2, r3
 80076ea:	d002      	beq.n	80076f2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80076ec:	68fb      	ldr	r3, [r7, #12]
 80076ee:	687a      	ldr	r2, [r7, #4]
 80076f0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80076f2:	bf00      	nop
 80076f4:	3714      	adds	r7, #20
 80076f6:	46bd      	mov	sp, r7
 80076f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076fc:	4770      	bx	lr
 80076fe:	bf00      	nop
 8007700:	20004b64 	.word	0x20004b64
 8007704:	20004b6c 	.word	0x20004b6c

08007708 <std>:
 8007708:	2300      	movs	r3, #0
 800770a:	b510      	push	{r4, lr}
 800770c:	4604      	mov	r4, r0
 800770e:	e9c0 3300 	strd	r3, r3, [r0]
 8007712:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007716:	6083      	str	r3, [r0, #8]
 8007718:	8181      	strh	r1, [r0, #12]
 800771a:	6643      	str	r3, [r0, #100]	@ 0x64
 800771c:	81c2      	strh	r2, [r0, #14]
 800771e:	6183      	str	r3, [r0, #24]
 8007720:	4619      	mov	r1, r3
 8007722:	2208      	movs	r2, #8
 8007724:	305c      	adds	r0, #92	@ 0x5c
 8007726:	f000 fa09 	bl	8007b3c <memset>
 800772a:	4b0d      	ldr	r3, [pc, #52]	@ (8007760 <std+0x58>)
 800772c:	6263      	str	r3, [r4, #36]	@ 0x24
 800772e:	4b0d      	ldr	r3, [pc, #52]	@ (8007764 <std+0x5c>)
 8007730:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007732:	4b0d      	ldr	r3, [pc, #52]	@ (8007768 <std+0x60>)
 8007734:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007736:	4b0d      	ldr	r3, [pc, #52]	@ (800776c <std+0x64>)
 8007738:	6323      	str	r3, [r4, #48]	@ 0x30
 800773a:	4b0d      	ldr	r3, [pc, #52]	@ (8007770 <std+0x68>)
 800773c:	6224      	str	r4, [r4, #32]
 800773e:	429c      	cmp	r4, r3
 8007740:	d006      	beq.n	8007750 <std+0x48>
 8007742:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007746:	4294      	cmp	r4, r2
 8007748:	d002      	beq.n	8007750 <std+0x48>
 800774a:	33d0      	adds	r3, #208	@ 0xd0
 800774c:	429c      	cmp	r4, r3
 800774e:	d105      	bne.n	800775c <std+0x54>
 8007750:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007754:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007758:	f000 bac6 	b.w	8007ce8 <__retarget_lock_init_recursive>
 800775c:	bd10      	pop	{r4, pc}
 800775e:	bf00      	nop
 8007760:	0800796d 	.word	0x0800796d
 8007764:	0800798f 	.word	0x0800798f
 8007768:	080079c7 	.word	0x080079c7
 800776c:	080079eb 	.word	0x080079eb
 8007770:	20004b84 	.word	0x20004b84

08007774 <stdio_exit_handler>:
 8007774:	4a02      	ldr	r2, [pc, #8]	@ (8007780 <stdio_exit_handler+0xc>)
 8007776:	4903      	ldr	r1, [pc, #12]	@ (8007784 <stdio_exit_handler+0x10>)
 8007778:	4803      	ldr	r0, [pc, #12]	@ (8007788 <stdio_exit_handler+0x14>)
 800777a:	f000 b869 	b.w	8007850 <_fwalk_sglue>
 800777e:	bf00      	nop
 8007780:	20000010 	.word	0x20000010
 8007784:	080085a1 	.word	0x080085a1
 8007788:	20000020 	.word	0x20000020

0800778c <cleanup_stdio>:
 800778c:	6841      	ldr	r1, [r0, #4]
 800778e:	4b0c      	ldr	r3, [pc, #48]	@ (80077c0 <cleanup_stdio+0x34>)
 8007790:	4299      	cmp	r1, r3
 8007792:	b510      	push	{r4, lr}
 8007794:	4604      	mov	r4, r0
 8007796:	d001      	beq.n	800779c <cleanup_stdio+0x10>
 8007798:	f000 ff02 	bl	80085a0 <_fflush_r>
 800779c:	68a1      	ldr	r1, [r4, #8]
 800779e:	4b09      	ldr	r3, [pc, #36]	@ (80077c4 <cleanup_stdio+0x38>)
 80077a0:	4299      	cmp	r1, r3
 80077a2:	d002      	beq.n	80077aa <cleanup_stdio+0x1e>
 80077a4:	4620      	mov	r0, r4
 80077a6:	f000 fefb 	bl	80085a0 <_fflush_r>
 80077aa:	68e1      	ldr	r1, [r4, #12]
 80077ac:	4b06      	ldr	r3, [pc, #24]	@ (80077c8 <cleanup_stdio+0x3c>)
 80077ae:	4299      	cmp	r1, r3
 80077b0:	d004      	beq.n	80077bc <cleanup_stdio+0x30>
 80077b2:	4620      	mov	r0, r4
 80077b4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077b8:	f000 bef2 	b.w	80085a0 <_fflush_r>
 80077bc:	bd10      	pop	{r4, pc}
 80077be:	bf00      	nop
 80077c0:	20004b84 	.word	0x20004b84
 80077c4:	20004bec 	.word	0x20004bec
 80077c8:	20004c54 	.word	0x20004c54

080077cc <global_stdio_init.part.0>:
 80077cc:	b510      	push	{r4, lr}
 80077ce:	4b0b      	ldr	r3, [pc, #44]	@ (80077fc <global_stdio_init.part.0+0x30>)
 80077d0:	4c0b      	ldr	r4, [pc, #44]	@ (8007800 <global_stdio_init.part.0+0x34>)
 80077d2:	4a0c      	ldr	r2, [pc, #48]	@ (8007804 <global_stdio_init.part.0+0x38>)
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	4620      	mov	r0, r4
 80077d8:	2200      	movs	r2, #0
 80077da:	2104      	movs	r1, #4
 80077dc:	f7ff ff94 	bl	8007708 <std>
 80077e0:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80077e4:	2201      	movs	r2, #1
 80077e6:	2109      	movs	r1, #9
 80077e8:	f7ff ff8e 	bl	8007708 <std>
 80077ec:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80077f0:	2202      	movs	r2, #2
 80077f2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80077f6:	2112      	movs	r1, #18
 80077f8:	f7ff bf86 	b.w	8007708 <std>
 80077fc:	20004cbc 	.word	0x20004cbc
 8007800:	20004b84 	.word	0x20004b84
 8007804:	08007775 	.word	0x08007775

08007808 <__sfp_lock_acquire>:
 8007808:	4801      	ldr	r0, [pc, #4]	@ (8007810 <__sfp_lock_acquire+0x8>)
 800780a:	f000 ba6e 	b.w	8007cea <__retarget_lock_acquire_recursive>
 800780e:	bf00      	nop
 8007810:	20004cc5 	.word	0x20004cc5

08007814 <__sfp_lock_release>:
 8007814:	4801      	ldr	r0, [pc, #4]	@ (800781c <__sfp_lock_release+0x8>)
 8007816:	f000 ba69 	b.w	8007cec <__retarget_lock_release_recursive>
 800781a:	bf00      	nop
 800781c:	20004cc5 	.word	0x20004cc5

08007820 <__sinit>:
 8007820:	b510      	push	{r4, lr}
 8007822:	4604      	mov	r4, r0
 8007824:	f7ff fff0 	bl	8007808 <__sfp_lock_acquire>
 8007828:	6a23      	ldr	r3, [r4, #32]
 800782a:	b11b      	cbz	r3, 8007834 <__sinit+0x14>
 800782c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007830:	f7ff bff0 	b.w	8007814 <__sfp_lock_release>
 8007834:	4b04      	ldr	r3, [pc, #16]	@ (8007848 <__sinit+0x28>)
 8007836:	6223      	str	r3, [r4, #32]
 8007838:	4b04      	ldr	r3, [pc, #16]	@ (800784c <__sinit+0x2c>)
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	2b00      	cmp	r3, #0
 800783e:	d1f5      	bne.n	800782c <__sinit+0xc>
 8007840:	f7ff ffc4 	bl	80077cc <global_stdio_init.part.0>
 8007844:	e7f2      	b.n	800782c <__sinit+0xc>
 8007846:	bf00      	nop
 8007848:	0800778d 	.word	0x0800778d
 800784c:	20004cbc 	.word	0x20004cbc

08007850 <_fwalk_sglue>:
 8007850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007854:	4607      	mov	r7, r0
 8007856:	4688      	mov	r8, r1
 8007858:	4614      	mov	r4, r2
 800785a:	2600      	movs	r6, #0
 800785c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007860:	f1b9 0901 	subs.w	r9, r9, #1
 8007864:	d505      	bpl.n	8007872 <_fwalk_sglue+0x22>
 8007866:	6824      	ldr	r4, [r4, #0]
 8007868:	2c00      	cmp	r4, #0
 800786a:	d1f7      	bne.n	800785c <_fwalk_sglue+0xc>
 800786c:	4630      	mov	r0, r6
 800786e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007872:	89ab      	ldrh	r3, [r5, #12]
 8007874:	2b01      	cmp	r3, #1
 8007876:	d907      	bls.n	8007888 <_fwalk_sglue+0x38>
 8007878:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800787c:	3301      	adds	r3, #1
 800787e:	d003      	beq.n	8007888 <_fwalk_sglue+0x38>
 8007880:	4629      	mov	r1, r5
 8007882:	4638      	mov	r0, r7
 8007884:	47c0      	blx	r8
 8007886:	4306      	orrs	r6, r0
 8007888:	3568      	adds	r5, #104	@ 0x68
 800788a:	e7e9      	b.n	8007860 <_fwalk_sglue+0x10>

0800788c <iprintf>:
 800788c:	b40f      	push	{r0, r1, r2, r3}
 800788e:	b507      	push	{r0, r1, r2, lr}
 8007890:	4906      	ldr	r1, [pc, #24]	@ (80078ac <iprintf+0x20>)
 8007892:	ab04      	add	r3, sp, #16
 8007894:	6808      	ldr	r0, [r1, #0]
 8007896:	f853 2b04 	ldr.w	r2, [r3], #4
 800789a:	6881      	ldr	r1, [r0, #8]
 800789c:	9301      	str	r3, [sp, #4]
 800789e:	f000 fb57 	bl	8007f50 <_vfiprintf_r>
 80078a2:	b003      	add	sp, #12
 80078a4:	f85d eb04 	ldr.w	lr, [sp], #4
 80078a8:	b004      	add	sp, #16
 80078aa:	4770      	bx	lr
 80078ac:	2000001c 	.word	0x2000001c

080078b0 <_puts_r>:
 80078b0:	6a03      	ldr	r3, [r0, #32]
 80078b2:	b570      	push	{r4, r5, r6, lr}
 80078b4:	6884      	ldr	r4, [r0, #8]
 80078b6:	4605      	mov	r5, r0
 80078b8:	460e      	mov	r6, r1
 80078ba:	b90b      	cbnz	r3, 80078c0 <_puts_r+0x10>
 80078bc:	f7ff ffb0 	bl	8007820 <__sinit>
 80078c0:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078c2:	07db      	lsls	r3, r3, #31
 80078c4:	d405      	bmi.n	80078d2 <_puts_r+0x22>
 80078c6:	89a3      	ldrh	r3, [r4, #12]
 80078c8:	0598      	lsls	r0, r3, #22
 80078ca:	d402      	bmi.n	80078d2 <_puts_r+0x22>
 80078cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078ce:	f000 fa0c 	bl	8007cea <__retarget_lock_acquire_recursive>
 80078d2:	89a3      	ldrh	r3, [r4, #12]
 80078d4:	0719      	lsls	r1, r3, #28
 80078d6:	d502      	bpl.n	80078de <_puts_r+0x2e>
 80078d8:	6923      	ldr	r3, [r4, #16]
 80078da:	2b00      	cmp	r3, #0
 80078dc:	d135      	bne.n	800794a <_puts_r+0x9a>
 80078de:	4621      	mov	r1, r4
 80078e0:	4628      	mov	r0, r5
 80078e2:	f000 f8c5 	bl	8007a70 <__swsetup_r>
 80078e6:	b380      	cbz	r0, 800794a <_puts_r+0x9a>
 80078e8:	f04f 35ff 	mov.w	r5, #4294967295
 80078ec:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80078ee:	07da      	lsls	r2, r3, #31
 80078f0:	d405      	bmi.n	80078fe <_puts_r+0x4e>
 80078f2:	89a3      	ldrh	r3, [r4, #12]
 80078f4:	059b      	lsls	r3, r3, #22
 80078f6:	d402      	bmi.n	80078fe <_puts_r+0x4e>
 80078f8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80078fa:	f000 f9f7 	bl	8007cec <__retarget_lock_release_recursive>
 80078fe:	4628      	mov	r0, r5
 8007900:	bd70      	pop	{r4, r5, r6, pc}
 8007902:	2b00      	cmp	r3, #0
 8007904:	da04      	bge.n	8007910 <_puts_r+0x60>
 8007906:	69a2      	ldr	r2, [r4, #24]
 8007908:	429a      	cmp	r2, r3
 800790a:	dc17      	bgt.n	800793c <_puts_r+0x8c>
 800790c:	290a      	cmp	r1, #10
 800790e:	d015      	beq.n	800793c <_puts_r+0x8c>
 8007910:	6823      	ldr	r3, [r4, #0]
 8007912:	1c5a      	adds	r2, r3, #1
 8007914:	6022      	str	r2, [r4, #0]
 8007916:	7019      	strb	r1, [r3, #0]
 8007918:	68a3      	ldr	r3, [r4, #8]
 800791a:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 800791e:	3b01      	subs	r3, #1
 8007920:	60a3      	str	r3, [r4, #8]
 8007922:	2900      	cmp	r1, #0
 8007924:	d1ed      	bne.n	8007902 <_puts_r+0x52>
 8007926:	2b00      	cmp	r3, #0
 8007928:	da11      	bge.n	800794e <_puts_r+0x9e>
 800792a:	4622      	mov	r2, r4
 800792c:	210a      	movs	r1, #10
 800792e:	4628      	mov	r0, r5
 8007930:	f000 f85f 	bl	80079f2 <__swbuf_r>
 8007934:	3001      	adds	r0, #1
 8007936:	d0d7      	beq.n	80078e8 <_puts_r+0x38>
 8007938:	250a      	movs	r5, #10
 800793a:	e7d7      	b.n	80078ec <_puts_r+0x3c>
 800793c:	4622      	mov	r2, r4
 800793e:	4628      	mov	r0, r5
 8007940:	f000 f857 	bl	80079f2 <__swbuf_r>
 8007944:	3001      	adds	r0, #1
 8007946:	d1e7      	bne.n	8007918 <_puts_r+0x68>
 8007948:	e7ce      	b.n	80078e8 <_puts_r+0x38>
 800794a:	3e01      	subs	r6, #1
 800794c:	e7e4      	b.n	8007918 <_puts_r+0x68>
 800794e:	6823      	ldr	r3, [r4, #0]
 8007950:	1c5a      	adds	r2, r3, #1
 8007952:	6022      	str	r2, [r4, #0]
 8007954:	220a      	movs	r2, #10
 8007956:	701a      	strb	r2, [r3, #0]
 8007958:	e7ee      	b.n	8007938 <_puts_r+0x88>
	...

0800795c <puts>:
 800795c:	4b02      	ldr	r3, [pc, #8]	@ (8007968 <puts+0xc>)
 800795e:	4601      	mov	r1, r0
 8007960:	6818      	ldr	r0, [r3, #0]
 8007962:	f7ff bfa5 	b.w	80078b0 <_puts_r>
 8007966:	bf00      	nop
 8007968:	2000001c 	.word	0x2000001c

0800796c <__sread>:
 800796c:	b510      	push	{r4, lr}
 800796e:	460c      	mov	r4, r1
 8007970:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007974:	f000 f96a 	bl	8007c4c <_read_r>
 8007978:	2800      	cmp	r0, #0
 800797a:	bfab      	itete	ge
 800797c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800797e:	89a3      	ldrhlt	r3, [r4, #12]
 8007980:	181b      	addge	r3, r3, r0
 8007982:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007986:	bfac      	ite	ge
 8007988:	6563      	strge	r3, [r4, #84]	@ 0x54
 800798a:	81a3      	strhlt	r3, [r4, #12]
 800798c:	bd10      	pop	{r4, pc}

0800798e <__swrite>:
 800798e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007992:	461f      	mov	r7, r3
 8007994:	898b      	ldrh	r3, [r1, #12]
 8007996:	05db      	lsls	r3, r3, #23
 8007998:	4605      	mov	r5, r0
 800799a:	460c      	mov	r4, r1
 800799c:	4616      	mov	r6, r2
 800799e:	d505      	bpl.n	80079ac <__swrite+0x1e>
 80079a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079a4:	2302      	movs	r3, #2
 80079a6:	2200      	movs	r2, #0
 80079a8:	f000 f93e 	bl	8007c28 <_lseek_r>
 80079ac:	89a3      	ldrh	r3, [r4, #12]
 80079ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80079b2:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80079b6:	81a3      	strh	r3, [r4, #12]
 80079b8:	4632      	mov	r2, r6
 80079ba:	463b      	mov	r3, r7
 80079bc:	4628      	mov	r0, r5
 80079be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80079c2:	f000 b955 	b.w	8007c70 <_write_r>

080079c6 <__sseek>:
 80079c6:	b510      	push	{r4, lr}
 80079c8:	460c      	mov	r4, r1
 80079ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ce:	f000 f92b 	bl	8007c28 <_lseek_r>
 80079d2:	1c43      	adds	r3, r0, #1
 80079d4:	89a3      	ldrh	r3, [r4, #12]
 80079d6:	bf15      	itete	ne
 80079d8:	6560      	strne	r0, [r4, #84]	@ 0x54
 80079da:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80079de:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80079e2:	81a3      	strheq	r3, [r4, #12]
 80079e4:	bf18      	it	ne
 80079e6:	81a3      	strhne	r3, [r4, #12]
 80079e8:	bd10      	pop	{r4, pc}

080079ea <__sclose>:
 80079ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80079ee:	f000 b8ad 	b.w	8007b4c <_close_r>

080079f2 <__swbuf_r>:
 80079f2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80079f4:	460e      	mov	r6, r1
 80079f6:	4614      	mov	r4, r2
 80079f8:	4605      	mov	r5, r0
 80079fa:	b118      	cbz	r0, 8007a04 <__swbuf_r+0x12>
 80079fc:	6a03      	ldr	r3, [r0, #32]
 80079fe:	b90b      	cbnz	r3, 8007a04 <__swbuf_r+0x12>
 8007a00:	f7ff ff0e 	bl	8007820 <__sinit>
 8007a04:	69a3      	ldr	r3, [r4, #24]
 8007a06:	60a3      	str	r3, [r4, #8]
 8007a08:	89a3      	ldrh	r3, [r4, #12]
 8007a0a:	071a      	lsls	r2, r3, #28
 8007a0c:	d501      	bpl.n	8007a12 <__swbuf_r+0x20>
 8007a0e:	6923      	ldr	r3, [r4, #16]
 8007a10:	b943      	cbnz	r3, 8007a24 <__swbuf_r+0x32>
 8007a12:	4621      	mov	r1, r4
 8007a14:	4628      	mov	r0, r5
 8007a16:	f000 f82b 	bl	8007a70 <__swsetup_r>
 8007a1a:	b118      	cbz	r0, 8007a24 <__swbuf_r+0x32>
 8007a1c:	f04f 37ff 	mov.w	r7, #4294967295
 8007a20:	4638      	mov	r0, r7
 8007a22:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007a24:	6823      	ldr	r3, [r4, #0]
 8007a26:	6922      	ldr	r2, [r4, #16]
 8007a28:	1a98      	subs	r0, r3, r2
 8007a2a:	6963      	ldr	r3, [r4, #20]
 8007a2c:	b2f6      	uxtb	r6, r6
 8007a2e:	4283      	cmp	r3, r0
 8007a30:	4637      	mov	r7, r6
 8007a32:	dc05      	bgt.n	8007a40 <__swbuf_r+0x4e>
 8007a34:	4621      	mov	r1, r4
 8007a36:	4628      	mov	r0, r5
 8007a38:	f000 fdb2 	bl	80085a0 <_fflush_r>
 8007a3c:	2800      	cmp	r0, #0
 8007a3e:	d1ed      	bne.n	8007a1c <__swbuf_r+0x2a>
 8007a40:	68a3      	ldr	r3, [r4, #8]
 8007a42:	3b01      	subs	r3, #1
 8007a44:	60a3      	str	r3, [r4, #8]
 8007a46:	6823      	ldr	r3, [r4, #0]
 8007a48:	1c5a      	adds	r2, r3, #1
 8007a4a:	6022      	str	r2, [r4, #0]
 8007a4c:	701e      	strb	r6, [r3, #0]
 8007a4e:	6962      	ldr	r2, [r4, #20]
 8007a50:	1c43      	adds	r3, r0, #1
 8007a52:	429a      	cmp	r2, r3
 8007a54:	d004      	beq.n	8007a60 <__swbuf_r+0x6e>
 8007a56:	89a3      	ldrh	r3, [r4, #12]
 8007a58:	07db      	lsls	r3, r3, #31
 8007a5a:	d5e1      	bpl.n	8007a20 <__swbuf_r+0x2e>
 8007a5c:	2e0a      	cmp	r6, #10
 8007a5e:	d1df      	bne.n	8007a20 <__swbuf_r+0x2e>
 8007a60:	4621      	mov	r1, r4
 8007a62:	4628      	mov	r0, r5
 8007a64:	f000 fd9c 	bl	80085a0 <_fflush_r>
 8007a68:	2800      	cmp	r0, #0
 8007a6a:	d0d9      	beq.n	8007a20 <__swbuf_r+0x2e>
 8007a6c:	e7d6      	b.n	8007a1c <__swbuf_r+0x2a>
	...

08007a70 <__swsetup_r>:
 8007a70:	b538      	push	{r3, r4, r5, lr}
 8007a72:	4b29      	ldr	r3, [pc, #164]	@ (8007b18 <__swsetup_r+0xa8>)
 8007a74:	4605      	mov	r5, r0
 8007a76:	6818      	ldr	r0, [r3, #0]
 8007a78:	460c      	mov	r4, r1
 8007a7a:	b118      	cbz	r0, 8007a84 <__swsetup_r+0x14>
 8007a7c:	6a03      	ldr	r3, [r0, #32]
 8007a7e:	b90b      	cbnz	r3, 8007a84 <__swsetup_r+0x14>
 8007a80:	f7ff fece 	bl	8007820 <__sinit>
 8007a84:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007a88:	0719      	lsls	r1, r3, #28
 8007a8a:	d422      	bmi.n	8007ad2 <__swsetup_r+0x62>
 8007a8c:	06da      	lsls	r2, r3, #27
 8007a8e:	d407      	bmi.n	8007aa0 <__swsetup_r+0x30>
 8007a90:	2209      	movs	r2, #9
 8007a92:	602a      	str	r2, [r5, #0]
 8007a94:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007a98:	81a3      	strh	r3, [r4, #12]
 8007a9a:	f04f 30ff 	mov.w	r0, #4294967295
 8007a9e:	e033      	b.n	8007b08 <__swsetup_r+0x98>
 8007aa0:	0758      	lsls	r0, r3, #29
 8007aa2:	d512      	bpl.n	8007aca <__swsetup_r+0x5a>
 8007aa4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007aa6:	b141      	cbz	r1, 8007aba <__swsetup_r+0x4a>
 8007aa8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007aac:	4299      	cmp	r1, r3
 8007aae:	d002      	beq.n	8007ab6 <__swsetup_r+0x46>
 8007ab0:	4628      	mov	r0, r5
 8007ab2:	f000 f92b 	bl	8007d0c <_free_r>
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	6363      	str	r3, [r4, #52]	@ 0x34
 8007aba:	89a3      	ldrh	r3, [r4, #12]
 8007abc:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007ac0:	81a3      	strh	r3, [r4, #12]
 8007ac2:	2300      	movs	r3, #0
 8007ac4:	6063      	str	r3, [r4, #4]
 8007ac6:	6923      	ldr	r3, [r4, #16]
 8007ac8:	6023      	str	r3, [r4, #0]
 8007aca:	89a3      	ldrh	r3, [r4, #12]
 8007acc:	f043 0308 	orr.w	r3, r3, #8
 8007ad0:	81a3      	strh	r3, [r4, #12]
 8007ad2:	6923      	ldr	r3, [r4, #16]
 8007ad4:	b94b      	cbnz	r3, 8007aea <__swsetup_r+0x7a>
 8007ad6:	89a3      	ldrh	r3, [r4, #12]
 8007ad8:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007adc:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007ae0:	d003      	beq.n	8007aea <__swsetup_r+0x7a>
 8007ae2:	4621      	mov	r1, r4
 8007ae4:	4628      	mov	r0, r5
 8007ae6:	f000 fda9 	bl	800863c <__smakebuf_r>
 8007aea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007aee:	f013 0201 	ands.w	r2, r3, #1
 8007af2:	d00a      	beq.n	8007b0a <__swsetup_r+0x9a>
 8007af4:	2200      	movs	r2, #0
 8007af6:	60a2      	str	r2, [r4, #8]
 8007af8:	6962      	ldr	r2, [r4, #20]
 8007afa:	4252      	negs	r2, r2
 8007afc:	61a2      	str	r2, [r4, #24]
 8007afe:	6922      	ldr	r2, [r4, #16]
 8007b00:	b942      	cbnz	r2, 8007b14 <__swsetup_r+0xa4>
 8007b02:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007b06:	d1c5      	bne.n	8007a94 <__swsetup_r+0x24>
 8007b08:	bd38      	pop	{r3, r4, r5, pc}
 8007b0a:	0799      	lsls	r1, r3, #30
 8007b0c:	bf58      	it	pl
 8007b0e:	6962      	ldrpl	r2, [r4, #20]
 8007b10:	60a2      	str	r2, [r4, #8]
 8007b12:	e7f4      	b.n	8007afe <__swsetup_r+0x8e>
 8007b14:	2000      	movs	r0, #0
 8007b16:	e7f7      	b.n	8007b08 <__swsetup_r+0x98>
 8007b18:	2000001c 	.word	0x2000001c

08007b1c <memcmp>:
 8007b1c:	b510      	push	{r4, lr}
 8007b1e:	3901      	subs	r1, #1
 8007b20:	4402      	add	r2, r0
 8007b22:	4290      	cmp	r0, r2
 8007b24:	d101      	bne.n	8007b2a <memcmp+0xe>
 8007b26:	2000      	movs	r0, #0
 8007b28:	e005      	b.n	8007b36 <memcmp+0x1a>
 8007b2a:	7803      	ldrb	r3, [r0, #0]
 8007b2c:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8007b30:	42a3      	cmp	r3, r4
 8007b32:	d001      	beq.n	8007b38 <memcmp+0x1c>
 8007b34:	1b18      	subs	r0, r3, r4
 8007b36:	bd10      	pop	{r4, pc}
 8007b38:	3001      	adds	r0, #1
 8007b3a:	e7f2      	b.n	8007b22 <memcmp+0x6>

08007b3c <memset>:
 8007b3c:	4402      	add	r2, r0
 8007b3e:	4603      	mov	r3, r0
 8007b40:	4293      	cmp	r3, r2
 8007b42:	d100      	bne.n	8007b46 <memset+0xa>
 8007b44:	4770      	bx	lr
 8007b46:	f803 1b01 	strb.w	r1, [r3], #1
 8007b4a:	e7f9      	b.n	8007b40 <memset+0x4>

08007b4c <_close_r>:
 8007b4c:	b538      	push	{r3, r4, r5, lr}
 8007b4e:	4d06      	ldr	r5, [pc, #24]	@ (8007b68 <_close_r+0x1c>)
 8007b50:	2300      	movs	r3, #0
 8007b52:	4604      	mov	r4, r0
 8007b54:	4608      	mov	r0, r1
 8007b56:	602b      	str	r3, [r5, #0]
 8007b58:	f7fa fbfd 	bl	8002356 <_close>
 8007b5c:	1c43      	adds	r3, r0, #1
 8007b5e:	d102      	bne.n	8007b66 <_close_r+0x1a>
 8007b60:	682b      	ldr	r3, [r5, #0]
 8007b62:	b103      	cbz	r3, 8007b66 <_close_r+0x1a>
 8007b64:	6023      	str	r3, [r4, #0]
 8007b66:	bd38      	pop	{r3, r4, r5, pc}
 8007b68:	20004cc0 	.word	0x20004cc0

08007b6c <_reclaim_reent>:
 8007b6c:	4b2d      	ldr	r3, [pc, #180]	@ (8007c24 <_reclaim_reent+0xb8>)
 8007b6e:	681b      	ldr	r3, [r3, #0]
 8007b70:	4283      	cmp	r3, r0
 8007b72:	b570      	push	{r4, r5, r6, lr}
 8007b74:	4604      	mov	r4, r0
 8007b76:	d053      	beq.n	8007c20 <_reclaim_reent+0xb4>
 8007b78:	69c3      	ldr	r3, [r0, #28]
 8007b7a:	b31b      	cbz	r3, 8007bc4 <_reclaim_reent+0x58>
 8007b7c:	68db      	ldr	r3, [r3, #12]
 8007b7e:	b163      	cbz	r3, 8007b9a <_reclaim_reent+0x2e>
 8007b80:	2500      	movs	r5, #0
 8007b82:	69e3      	ldr	r3, [r4, #28]
 8007b84:	68db      	ldr	r3, [r3, #12]
 8007b86:	5959      	ldr	r1, [r3, r5]
 8007b88:	b9b1      	cbnz	r1, 8007bb8 <_reclaim_reent+0x4c>
 8007b8a:	3504      	adds	r5, #4
 8007b8c:	2d80      	cmp	r5, #128	@ 0x80
 8007b8e:	d1f8      	bne.n	8007b82 <_reclaim_reent+0x16>
 8007b90:	69e3      	ldr	r3, [r4, #28]
 8007b92:	4620      	mov	r0, r4
 8007b94:	68d9      	ldr	r1, [r3, #12]
 8007b96:	f000 f8b9 	bl	8007d0c <_free_r>
 8007b9a:	69e3      	ldr	r3, [r4, #28]
 8007b9c:	6819      	ldr	r1, [r3, #0]
 8007b9e:	b111      	cbz	r1, 8007ba6 <_reclaim_reent+0x3a>
 8007ba0:	4620      	mov	r0, r4
 8007ba2:	f000 f8b3 	bl	8007d0c <_free_r>
 8007ba6:	69e3      	ldr	r3, [r4, #28]
 8007ba8:	689d      	ldr	r5, [r3, #8]
 8007baa:	b15d      	cbz	r5, 8007bc4 <_reclaim_reent+0x58>
 8007bac:	4629      	mov	r1, r5
 8007bae:	4620      	mov	r0, r4
 8007bb0:	682d      	ldr	r5, [r5, #0]
 8007bb2:	f000 f8ab 	bl	8007d0c <_free_r>
 8007bb6:	e7f8      	b.n	8007baa <_reclaim_reent+0x3e>
 8007bb8:	680e      	ldr	r6, [r1, #0]
 8007bba:	4620      	mov	r0, r4
 8007bbc:	f000 f8a6 	bl	8007d0c <_free_r>
 8007bc0:	4631      	mov	r1, r6
 8007bc2:	e7e1      	b.n	8007b88 <_reclaim_reent+0x1c>
 8007bc4:	6961      	ldr	r1, [r4, #20]
 8007bc6:	b111      	cbz	r1, 8007bce <_reclaim_reent+0x62>
 8007bc8:	4620      	mov	r0, r4
 8007bca:	f000 f89f 	bl	8007d0c <_free_r>
 8007bce:	69e1      	ldr	r1, [r4, #28]
 8007bd0:	b111      	cbz	r1, 8007bd8 <_reclaim_reent+0x6c>
 8007bd2:	4620      	mov	r0, r4
 8007bd4:	f000 f89a 	bl	8007d0c <_free_r>
 8007bd8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 8007bda:	b111      	cbz	r1, 8007be2 <_reclaim_reent+0x76>
 8007bdc:	4620      	mov	r0, r4
 8007bde:	f000 f895 	bl	8007d0c <_free_r>
 8007be2:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007be4:	b111      	cbz	r1, 8007bec <_reclaim_reent+0x80>
 8007be6:	4620      	mov	r0, r4
 8007be8:	f000 f890 	bl	8007d0c <_free_r>
 8007bec:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 8007bee:	b111      	cbz	r1, 8007bf6 <_reclaim_reent+0x8a>
 8007bf0:	4620      	mov	r0, r4
 8007bf2:	f000 f88b 	bl	8007d0c <_free_r>
 8007bf6:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8007bf8:	b111      	cbz	r1, 8007c00 <_reclaim_reent+0x94>
 8007bfa:	4620      	mov	r0, r4
 8007bfc:	f000 f886 	bl	8007d0c <_free_r>
 8007c00:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8007c02:	b111      	cbz	r1, 8007c0a <_reclaim_reent+0x9e>
 8007c04:	4620      	mov	r0, r4
 8007c06:	f000 f881 	bl	8007d0c <_free_r>
 8007c0a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 8007c0c:	b111      	cbz	r1, 8007c14 <_reclaim_reent+0xa8>
 8007c0e:	4620      	mov	r0, r4
 8007c10:	f000 f87c 	bl	8007d0c <_free_r>
 8007c14:	6a23      	ldr	r3, [r4, #32]
 8007c16:	b11b      	cbz	r3, 8007c20 <_reclaim_reent+0xb4>
 8007c18:	4620      	mov	r0, r4
 8007c1a:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8007c1e:	4718      	bx	r3
 8007c20:	bd70      	pop	{r4, r5, r6, pc}
 8007c22:	bf00      	nop
 8007c24:	2000001c 	.word	0x2000001c

08007c28 <_lseek_r>:
 8007c28:	b538      	push	{r3, r4, r5, lr}
 8007c2a:	4d07      	ldr	r5, [pc, #28]	@ (8007c48 <_lseek_r+0x20>)
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	4608      	mov	r0, r1
 8007c30:	4611      	mov	r1, r2
 8007c32:	2200      	movs	r2, #0
 8007c34:	602a      	str	r2, [r5, #0]
 8007c36:	461a      	mov	r2, r3
 8007c38:	f7fa fbb4 	bl	80023a4 <_lseek>
 8007c3c:	1c43      	adds	r3, r0, #1
 8007c3e:	d102      	bne.n	8007c46 <_lseek_r+0x1e>
 8007c40:	682b      	ldr	r3, [r5, #0]
 8007c42:	b103      	cbz	r3, 8007c46 <_lseek_r+0x1e>
 8007c44:	6023      	str	r3, [r4, #0]
 8007c46:	bd38      	pop	{r3, r4, r5, pc}
 8007c48:	20004cc0 	.word	0x20004cc0

08007c4c <_read_r>:
 8007c4c:	b538      	push	{r3, r4, r5, lr}
 8007c4e:	4d07      	ldr	r5, [pc, #28]	@ (8007c6c <_read_r+0x20>)
 8007c50:	4604      	mov	r4, r0
 8007c52:	4608      	mov	r0, r1
 8007c54:	4611      	mov	r1, r2
 8007c56:	2200      	movs	r2, #0
 8007c58:	602a      	str	r2, [r5, #0]
 8007c5a:	461a      	mov	r2, r3
 8007c5c:	f7fa fb5e 	bl	800231c <_read>
 8007c60:	1c43      	adds	r3, r0, #1
 8007c62:	d102      	bne.n	8007c6a <_read_r+0x1e>
 8007c64:	682b      	ldr	r3, [r5, #0]
 8007c66:	b103      	cbz	r3, 8007c6a <_read_r+0x1e>
 8007c68:	6023      	str	r3, [r4, #0]
 8007c6a:	bd38      	pop	{r3, r4, r5, pc}
 8007c6c:	20004cc0 	.word	0x20004cc0

08007c70 <_write_r>:
 8007c70:	b538      	push	{r3, r4, r5, lr}
 8007c72:	4d07      	ldr	r5, [pc, #28]	@ (8007c90 <_write_r+0x20>)
 8007c74:	4604      	mov	r4, r0
 8007c76:	4608      	mov	r0, r1
 8007c78:	4611      	mov	r1, r2
 8007c7a:	2200      	movs	r2, #0
 8007c7c:	602a      	str	r2, [r5, #0]
 8007c7e:	461a      	mov	r2, r3
 8007c80:	f7f9 f9b8 	bl	8000ff4 <_write>
 8007c84:	1c43      	adds	r3, r0, #1
 8007c86:	d102      	bne.n	8007c8e <_write_r+0x1e>
 8007c88:	682b      	ldr	r3, [r5, #0]
 8007c8a:	b103      	cbz	r3, 8007c8e <_write_r+0x1e>
 8007c8c:	6023      	str	r3, [r4, #0]
 8007c8e:	bd38      	pop	{r3, r4, r5, pc}
 8007c90:	20004cc0 	.word	0x20004cc0

08007c94 <__errno>:
 8007c94:	4b01      	ldr	r3, [pc, #4]	@ (8007c9c <__errno+0x8>)
 8007c96:	6818      	ldr	r0, [r3, #0]
 8007c98:	4770      	bx	lr
 8007c9a:	bf00      	nop
 8007c9c:	2000001c 	.word	0x2000001c

08007ca0 <__libc_init_array>:
 8007ca0:	b570      	push	{r4, r5, r6, lr}
 8007ca2:	4d0d      	ldr	r5, [pc, #52]	@ (8007cd8 <__libc_init_array+0x38>)
 8007ca4:	4c0d      	ldr	r4, [pc, #52]	@ (8007cdc <__libc_init_array+0x3c>)
 8007ca6:	1b64      	subs	r4, r4, r5
 8007ca8:	10a4      	asrs	r4, r4, #2
 8007caa:	2600      	movs	r6, #0
 8007cac:	42a6      	cmp	r6, r4
 8007cae:	d109      	bne.n	8007cc4 <__libc_init_array+0x24>
 8007cb0:	4d0b      	ldr	r5, [pc, #44]	@ (8007ce0 <__libc_init_array+0x40>)
 8007cb2:	4c0c      	ldr	r4, [pc, #48]	@ (8007ce4 <__libc_init_array+0x44>)
 8007cb4:	f000 fd30 	bl	8008718 <_init>
 8007cb8:	1b64      	subs	r4, r4, r5
 8007cba:	10a4      	asrs	r4, r4, #2
 8007cbc:	2600      	movs	r6, #0
 8007cbe:	42a6      	cmp	r6, r4
 8007cc0:	d105      	bne.n	8007cce <__libc_init_array+0x2e>
 8007cc2:	bd70      	pop	{r4, r5, r6, pc}
 8007cc4:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cc8:	4798      	blx	r3
 8007cca:	3601      	adds	r6, #1
 8007ccc:	e7ee      	b.n	8007cac <__libc_init_array+0xc>
 8007cce:	f855 3b04 	ldr.w	r3, [r5], #4
 8007cd2:	4798      	blx	r3
 8007cd4:	3601      	adds	r6, #1
 8007cd6:	e7f2      	b.n	8007cbe <__libc_init_array+0x1e>
 8007cd8:	08009fd0 	.word	0x08009fd0
 8007cdc:	08009fd0 	.word	0x08009fd0
 8007ce0:	08009fd0 	.word	0x08009fd0
 8007ce4:	08009fd4 	.word	0x08009fd4

08007ce8 <__retarget_lock_init_recursive>:
 8007ce8:	4770      	bx	lr

08007cea <__retarget_lock_acquire_recursive>:
 8007cea:	4770      	bx	lr

08007cec <__retarget_lock_release_recursive>:
 8007cec:	4770      	bx	lr

08007cee <memcpy>:
 8007cee:	440a      	add	r2, r1
 8007cf0:	4291      	cmp	r1, r2
 8007cf2:	f100 33ff 	add.w	r3, r0, #4294967295
 8007cf6:	d100      	bne.n	8007cfa <memcpy+0xc>
 8007cf8:	4770      	bx	lr
 8007cfa:	b510      	push	{r4, lr}
 8007cfc:	f811 4b01 	ldrb.w	r4, [r1], #1
 8007d00:	f803 4f01 	strb.w	r4, [r3, #1]!
 8007d04:	4291      	cmp	r1, r2
 8007d06:	d1f9      	bne.n	8007cfc <memcpy+0xe>
 8007d08:	bd10      	pop	{r4, pc}
	...

08007d0c <_free_r>:
 8007d0c:	b538      	push	{r3, r4, r5, lr}
 8007d0e:	4605      	mov	r5, r0
 8007d10:	2900      	cmp	r1, #0
 8007d12:	d041      	beq.n	8007d98 <_free_r+0x8c>
 8007d14:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007d18:	1f0c      	subs	r4, r1, #4
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	bfb8      	it	lt
 8007d1e:	18e4      	addlt	r4, r4, r3
 8007d20:	f000 f8e0 	bl	8007ee4 <__malloc_lock>
 8007d24:	4a1d      	ldr	r2, [pc, #116]	@ (8007d9c <_free_r+0x90>)
 8007d26:	6813      	ldr	r3, [r2, #0]
 8007d28:	b933      	cbnz	r3, 8007d38 <_free_r+0x2c>
 8007d2a:	6063      	str	r3, [r4, #4]
 8007d2c:	6014      	str	r4, [r2, #0]
 8007d2e:	4628      	mov	r0, r5
 8007d30:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007d34:	f000 b8dc 	b.w	8007ef0 <__malloc_unlock>
 8007d38:	42a3      	cmp	r3, r4
 8007d3a:	d908      	bls.n	8007d4e <_free_r+0x42>
 8007d3c:	6820      	ldr	r0, [r4, #0]
 8007d3e:	1821      	adds	r1, r4, r0
 8007d40:	428b      	cmp	r3, r1
 8007d42:	bf01      	itttt	eq
 8007d44:	6819      	ldreq	r1, [r3, #0]
 8007d46:	685b      	ldreq	r3, [r3, #4]
 8007d48:	1809      	addeq	r1, r1, r0
 8007d4a:	6021      	streq	r1, [r4, #0]
 8007d4c:	e7ed      	b.n	8007d2a <_free_r+0x1e>
 8007d4e:	461a      	mov	r2, r3
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	b10b      	cbz	r3, 8007d58 <_free_r+0x4c>
 8007d54:	42a3      	cmp	r3, r4
 8007d56:	d9fa      	bls.n	8007d4e <_free_r+0x42>
 8007d58:	6811      	ldr	r1, [r2, #0]
 8007d5a:	1850      	adds	r0, r2, r1
 8007d5c:	42a0      	cmp	r0, r4
 8007d5e:	d10b      	bne.n	8007d78 <_free_r+0x6c>
 8007d60:	6820      	ldr	r0, [r4, #0]
 8007d62:	4401      	add	r1, r0
 8007d64:	1850      	adds	r0, r2, r1
 8007d66:	4283      	cmp	r3, r0
 8007d68:	6011      	str	r1, [r2, #0]
 8007d6a:	d1e0      	bne.n	8007d2e <_free_r+0x22>
 8007d6c:	6818      	ldr	r0, [r3, #0]
 8007d6e:	685b      	ldr	r3, [r3, #4]
 8007d70:	6053      	str	r3, [r2, #4]
 8007d72:	4408      	add	r0, r1
 8007d74:	6010      	str	r0, [r2, #0]
 8007d76:	e7da      	b.n	8007d2e <_free_r+0x22>
 8007d78:	d902      	bls.n	8007d80 <_free_r+0x74>
 8007d7a:	230c      	movs	r3, #12
 8007d7c:	602b      	str	r3, [r5, #0]
 8007d7e:	e7d6      	b.n	8007d2e <_free_r+0x22>
 8007d80:	6820      	ldr	r0, [r4, #0]
 8007d82:	1821      	adds	r1, r4, r0
 8007d84:	428b      	cmp	r3, r1
 8007d86:	bf04      	itt	eq
 8007d88:	6819      	ldreq	r1, [r3, #0]
 8007d8a:	685b      	ldreq	r3, [r3, #4]
 8007d8c:	6063      	str	r3, [r4, #4]
 8007d8e:	bf04      	itt	eq
 8007d90:	1809      	addeq	r1, r1, r0
 8007d92:	6021      	streq	r1, [r4, #0]
 8007d94:	6054      	str	r4, [r2, #4]
 8007d96:	e7ca      	b.n	8007d2e <_free_r+0x22>
 8007d98:	bd38      	pop	{r3, r4, r5, pc}
 8007d9a:	bf00      	nop
 8007d9c:	20004ccc 	.word	0x20004ccc

08007da0 <sbrk_aligned>:
 8007da0:	b570      	push	{r4, r5, r6, lr}
 8007da2:	4e0f      	ldr	r6, [pc, #60]	@ (8007de0 <sbrk_aligned+0x40>)
 8007da4:	460c      	mov	r4, r1
 8007da6:	6831      	ldr	r1, [r6, #0]
 8007da8:	4605      	mov	r5, r0
 8007daa:	b911      	cbnz	r1, 8007db2 <sbrk_aligned+0x12>
 8007dac:	f000 fca4 	bl	80086f8 <_sbrk_r>
 8007db0:	6030      	str	r0, [r6, #0]
 8007db2:	4621      	mov	r1, r4
 8007db4:	4628      	mov	r0, r5
 8007db6:	f000 fc9f 	bl	80086f8 <_sbrk_r>
 8007dba:	1c43      	adds	r3, r0, #1
 8007dbc:	d103      	bne.n	8007dc6 <sbrk_aligned+0x26>
 8007dbe:	f04f 34ff 	mov.w	r4, #4294967295
 8007dc2:	4620      	mov	r0, r4
 8007dc4:	bd70      	pop	{r4, r5, r6, pc}
 8007dc6:	1cc4      	adds	r4, r0, #3
 8007dc8:	f024 0403 	bic.w	r4, r4, #3
 8007dcc:	42a0      	cmp	r0, r4
 8007dce:	d0f8      	beq.n	8007dc2 <sbrk_aligned+0x22>
 8007dd0:	1a21      	subs	r1, r4, r0
 8007dd2:	4628      	mov	r0, r5
 8007dd4:	f000 fc90 	bl	80086f8 <_sbrk_r>
 8007dd8:	3001      	adds	r0, #1
 8007dda:	d1f2      	bne.n	8007dc2 <sbrk_aligned+0x22>
 8007ddc:	e7ef      	b.n	8007dbe <sbrk_aligned+0x1e>
 8007dde:	bf00      	nop
 8007de0:	20004cc8 	.word	0x20004cc8

08007de4 <_malloc_r>:
 8007de4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007de8:	1ccd      	adds	r5, r1, #3
 8007dea:	f025 0503 	bic.w	r5, r5, #3
 8007dee:	3508      	adds	r5, #8
 8007df0:	2d0c      	cmp	r5, #12
 8007df2:	bf38      	it	cc
 8007df4:	250c      	movcc	r5, #12
 8007df6:	2d00      	cmp	r5, #0
 8007df8:	4606      	mov	r6, r0
 8007dfa:	db01      	blt.n	8007e00 <_malloc_r+0x1c>
 8007dfc:	42a9      	cmp	r1, r5
 8007dfe:	d904      	bls.n	8007e0a <_malloc_r+0x26>
 8007e00:	230c      	movs	r3, #12
 8007e02:	6033      	str	r3, [r6, #0]
 8007e04:	2000      	movs	r0, #0
 8007e06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007e0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007ee0 <_malloc_r+0xfc>
 8007e0e:	f000 f869 	bl	8007ee4 <__malloc_lock>
 8007e12:	f8d8 3000 	ldr.w	r3, [r8]
 8007e16:	461c      	mov	r4, r3
 8007e18:	bb44      	cbnz	r4, 8007e6c <_malloc_r+0x88>
 8007e1a:	4629      	mov	r1, r5
 8007e1c:	4630      	mov	r0, r6
 8007e1e:	f7ff ffbf 	bl	8007da0 <sbrk_aligned>
 8007e22:	1c43      	adds	r3, r0, #1
 8007e24:	4604      	mov	r4, r0
 8007e26:	d158      	bne.n	8007eda <_malloc_r+0xf6>
 8007e28:	f8d8 4000 	ldr.w	r4, [r8]
 8007e2c:	4627      	mov	r7, r4
 8007e2e:	2f00      	cmp	r7, #0
 8007e30:	d143      	bne.n	8007eba <_malloc_r+0xd6>
 8007e32:	2c00      	cmp	r4, #0
 8007e34:	d04b      	beq.n	8007ece <_malloc_r+0xea>
 8007e36:	6823      	ldr	r3, [r4, #0]
 8007e38:	4639      	mov	r1, r7
 8007e3a:	4630      	mov	r0, r6
 8007e3c:	eb04 0903 	add.w	r9, r4, r3
 8007e40:	f000 fc5a 	bl	80086f8 <_sbrk_r>
 8007e44:	4581      	cmp	r9, r0
 8007e46:	d142      	bne.n	8007ece <_malloc_r+0xea>
 8007e48:	6821      	ldr	r1, [r4, #0]
 8007e4a:	1a6d      	subs	r5, r5, r1
 8007e4c:	4629      	mov	r1, r5
 8007e4e:	4630      	mov	r0, r6
 8007e50:	f7ff ffa6 	bl	8007da0 <sbrk_aligned>
 8007e54:	3001      	adds	r0, #1
 8007e56:	d03a      	beq.n	8007ece <_malloc_r+0xea>
 8007e58:	6823      	ldr	r3, [r4, #0]
 8007e5a:	442b      	add	r3, r5
 8007e5c:	6023      	str	r3, [r4, #0]
 8007e5e:	f8d8 3000 	ldr.w	r3, [r8]
 8007e62:	685a      	ldr	r2, [r3, #4]
 8007e64:	bb62      	cbnz	r2, 8007ec0 <_malloc_r+0xdc>
 8007e66:	f8c8 7000 	str.w	r7, [r8]
 8007e6a:	e00f      	b.n	8007e8c <_malloc_r+0xa8>
 8007e6c:	6822      	ldr	r2, [r4, #0]
 8007e6e:	1b52      	subs	r2, r2, r5
 8007e70:	d420      	bmi.n	8007eb4 <_malloc_r+0xd0>
 8007e72:	2a0b      	cmp	r2, #11
 8007e74:	d917      	bls.n	8007ea6 <_malloc_r+0xc2>
 8007e76:	1961      	adds	r1, r4, r5
 8007e78:	42a3      	cmp	r3, r4
 8007e7a:	6025      	str	r5, [r4, #0]
 8007e7c:	bf18      	it	ne
 8007e7e:	6059      	strne	r1, [r3, #4]
 8007e80:	6863      	ldr	r3, [r4, #4]
 8007e82:	bf08      	it	eq
 8007e84:	f8c8 1000 	streq.w	r1, [r8]
 8007e88:	5162      	str	r2, [r4, r5]
 8007e8a:	604b      	str	r3, [r1, #4]
 8007e8c:	4630      	mov	r0, r6
 8007e8e:	f000 f82f 	bl	8007ef0 <__malloc_unlock>
 8007e92:	f104 000b 	add.w	r0, r4, #11
 8007e96:	1d23      	adds	r3, r4, #4
 8007e98:	f020 0007 	bic.w	r0, r0, #7
 8007e9c:	1ac2      	subs	r2, r0, r3
 8007e9e:	bf1c      	itt	ne
 8007ea0:	1a1b      	subne	r3, r3, r0
 8007ea2:	50a3      	strne	r3, [r4, r2]
 8007ea4:	e7af      	b.n	8007e06 <_malloc_r+0x22>
 8007ea6:	6862      	ldr	r2, [r4, #4]
 8007ea8:	42a3      	cmp	r3, r4
 8007eaa:	bf0c      	ite	eq
 8007eac:	f8c8 2000 	streq.w	r2, [r8]
 8007eb0:	605a      	strne	r2, [r3, #4]
 8007eb2:	e7eb      	b.n	8007e8c <_malloc_r+0xa8>
 8007eb4:	4623      	mov	r3, r4
 8007eb6:	6864      	ldr	r4, [r4, #4]
 8007eb8:	e7ae      	b.n	8007e18 <_malloc_r+0x34>
 8007eba:	463c      	mov	r4, r7
 8007ebc:	687f      	ldr	r7, [r7, #4]
 8007ebe:	e7b6      	b.n	8007e2e <_malloc_r+0x4a>
 8007ec0:	461a      	mov	r2, r3
 8007ec2:	685b      	ldr	r3, [r3, #4]
 8007ec4:	42a3      	cmp	r3, r4
 8007ec6:	d1fb      	bne.n	8007ec0 <_malloc_r+0xdc>
 8007ec8:	2300      	movs	r3, #0
 8007eca:	6053      	str	r3, [r2, #4]
 8007ecc:	e7de      	b.n	8007e8c <_malloc_r+0xa8>
 8007ece:	230c      	movs	r3, #12
 8007ed0:	6033      	str	r3, [r6, #0]
 8007ed2:	4630      	mov	r0, r6
 8007ed4:	f000 f80c 	bl	8007ef0 <__malloc_unlock>
 8007ed8:	e794      	b.n	8007e04 <_malloc_r+0x20>
 8007eda:	6005      	str	r5, [r0, #0]
 8007edc:	e7d6      	b.n	8007e8c <_malloc_r+0xa8>
 8007ede:	bf00      	nop
 8007ee0:	20004ccc 	.word	0x20004ccc

08007ee4 <__malloc_lock>:
 8007ee4:	4801      	ldr	r0, [pc, #4]	@ (8007eec <__malloc_lock+0x8>)
 8007ee6:	f7ff bf00 	b.w	8007cea <__retarget_lock_acquire_recursive>
 8007eea:	bf00      	nop
 8007eec:	20004cc4 	.word	0x20004cc4

08007ef0 <__malloc_unlock>:
 8007ef0:	4801      	ldr	r0, [pc, #4]	@ (8007ef8 <__malloc_unlock+0x8>)
 8007ef2:	f7ff befb 	b.w	8007cec <__retarget_lock_release_recursive>
 8007ef6:	bf00      	nop
 8007ef8:	20004cc4 	.word	0x20004cc4

08007efc <__sfputc_r>:
 8007efc:	6893      	ldr	r3, [r2, #8]
 8007efe:	3b01      	subs	r3, #1
 8007f00:	2b00      	cmp	r3, #0
 8007f02:	b410      	push	{r4}
 8007f04:	6093      	str	r3, [r2, #8]
 8007f06:	da08      	bge.n	8007f1a <__sfputc_r+0x1e>
 8007f08:	6994      	ldr	r4, [r2, #24]
 8007f0a:	42a3      	cmp	r3, r4
 8007f0c:	db01      	blt.n	8007f12 <__sfputc_r+0x16>
 8007f0e:	290a      	cmp	r1, #10
 8007f10:	d103      	bne.n	8007f1a <__sfputc_r+0x1e>
 8007f12:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f16:	f7ff bd6c 	b.w	80079f2 <__swbuf_r>
 8007f1a:	6813      	ldr	r3, [r2, #0]
 8007f1c:	1c58      	adds	r0, r3, #1
 8007f1e:	6010      	str	r0, [r2, #0]
 8007f20:	7019      	strb	r1, [r3, #0]
 8007f22:	4608      	mov	r0, r1
 8007f24:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007f28:	4770      	bx	lr

08007f2a <__sfputs_r>:
 8007f2a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007f2c:	4606      	mov	r6, r0
 8007f2e:	460f      	mov	r7, r1
 8007f30:	4614      	mov	r4, r2
 8007f32:	18d5      	adds	r5, r2, r3
 8007f34:	42ac      	cmp	r4, r5
 8007f36:	d101      	bne.n	8007f3c <__sfputs_r+0x12>
 8007f38:	2000      	movs	r0, #0
 8007f3a:	e007      	b.n	8007f4c <__sfputs_r+0x22>
 8007f3c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f40:	463a      	mov	r2, r7
 8007f42:	4630      	mov	r0, r6
 8007f44:	f7ff ffda 	bl	8007efc <__sfputc_r>
 8007f48:	1c43      	adds	r3, r0, #1
 8007f4a:	d1f3      	bne.n	8007f34 <__sfputs_r+0xa>
 8007f4c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007f50 <_vfiprintf_r>:
 8007f50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f54:	460d      	mov	r5, r1
 8007f56:	b09d      	sub	sp, #116	@ 0x74
 8007f58:	4614      	mov	r4, r2
 8007f5a:	4698      	mov	r8, r3
 8007f5c:	4606      	mov	r6, r0
 8007f5e:	b118      	cbz	r0, 8007f68 <_vfiprintf_r+0x18>
 8007f60:	6a03      	ldr	r3, [r0, #32]
 8007f62:	b90b      	cbnz	r3, 8007f68 <_vfiprintf_r+0x18>
 8007f64:	f7ff fc5c 	bl	8007820 <__sinit>
 8007f68:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f6a:	07d9      	lsls	r1, r3, #31
 8007f6c:	d405      	bmi.n	8007f7a <_vfiprintf_r+0x2a>
 8007f6e:	89ab      	ldrh	r3, [r5, #12]
 8007f70:	059a      	lsls	r2, r3, #22
 8007f72:	d402      	bmi.n	8007f7a <_vfiprintf_r+0x2a>
 8007f74:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007f76:	f7ff feb8 	bl	8007cea <__retarget_lock_acquire_recursive>
 8007f7a:	89ab      	ldrh	r3, [r5, #12]
 8007f7c:	071b      	lsls	r3, r3, #28
 8007f7e:	d501      	bpl.n	8007f84 <_vfiprintf_r+0x34>
 8007f80:	692b      	ldr	r3, [r5, #16]
 8007f82:	b99b      	cbnz	r3, 8007fac <_vfiprintf_r+0x5c>
 8007f84:	4629      	mov	r1, r5
 8007f86:	4630      	mov	r0, r6
 8007f88:	f7ff fd72 	bl	8007a70 <__swsetup_r>
 8007f8c:	b170      	cbz	r0, 8007fac <_vfiprintf_r+0x5c>
 8007f8e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007f90:	07dc      	lsls	r4, r3, #31
 8007f92:	d504      	bpl.n	8007f9e <_vfiprintf_r+0x4e>
 8007f94:	f04f 30ff 	mov.w	r0, #4294967295
 8007f98:	b01d      	add	sp, #116	@ 0x74
 8007f9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007f9e:	89ab      	ldrh	r3, [r5, #12]
 8007fa0:	0598      	lsls	r0, r3, #22
 8007fa2:	d4f7      	bmi.n	8007f94 <_vfiprintf_r+0x44>
 8007fa4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fa6:	f7ff fea1 	bl	8007cec <__retarget_lock_release_recursive>
 8007faa:	e7f3      	b.n	8007f94 <_vfiprintf_r+0x44>
 8007fac:	2300      	movs	r3, #0
 8007fae:	9309      	str	r3, [sp, #36]	@ 0x24
 8007fb0:	2320      	movs	r3, #32
 8007fb2:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007fb6:	f8cd 800c 	str.w	r8, [sp, #12]
 8007fba:	2330      	movs	r3, #48	@ 0x30
 8007fbc:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800816c <_vfiprintf_r+0x21c>
 8007fc0:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007fc4:	f04f 0901 	mov.w	r9, #1
 8007fc8:	4623      	mov	r3, r4
 8007fca:	469a      	mov	sl, r3
 8007fcc:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007fd0:	b10a      	cbz	r2, 8007fd6 <_vfiprintf_r+0x86>
 8007fd2:	2a25      	cmp	r2, #37	@ 0x25
 8007fd4:	d1f9      	bne.n	8007fca <_vfiprintf_r+0x7a>
 8007fd6:	ebba 0b04 	subs.w	fp, sl, r4
 8007fda:	d00b      	beq.n	8007ff4 <_vfiprintf_r+0xa4>
 8007fdc:	465b      	mov	r3, fp
 8007fde:	4622      	mov	r2, r4
 8007fe0:	4629      	mov	r1, r5
 8007fe2:	4630      	mov	r0, r6
 8007fe4:	f7ff ffa1 	bl	8007f2a <__sfputs_r>
 8007fe8:	3001      	adds	r0, #1
 8007fea:	f000 80a7 	beq.w	800813c <_vfiprintf_r+0x1ec>
 8007fee:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007ff0:	445a      	add	r2, fp
 8007ff2:	9209      	str	r2, [sp, #36]	@ 0x24
 8007ff4:	f89a 3000 	ldrb.w	r3, [sl]
 8007ff8:	2b00      	cmp	r3, #0
 8007ffa:	f000 809f 	beq.w	800813c <_vfiprintf_r+0x1ec>
 8007ffe:	2300      	movs	r3, #0
 8008000:	f04f 32ff 	mov.w	r2, #4294967295
 8008004:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008008:	f10a 0a01 	add.w	sl, sl, #1
 800800c:	9304      	str	r3, [sp, #16]
 800800e:	9307      	str	r3, [sp, #28]
 8008010:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008014:	931a      	str	r3, [sp, #104]	@ 0x68
 8008016:	4654      	mov	r4, sl
 8008018:	2205      	movs	r2, #5
 800801a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800801e:	4853      	ldr	r0, [pc, #332]	@ (800816c <_vfiprintf_r+0x21c>)
 8008020:	f7f8 f8d6 	bl	80001d0 <memchr>
 8008024:	9a04      	ldr	r2, [sp, #16]
 8008026:	b9d8      	cbnz	r0, 8008060 <_vfiprintf_r+0x110>
 8008028:	06d1      	lsls	r1, r2, #27
 800802a:	bf44      	itt	mi
 800802c:	2320      	movmi	r3, #32
 800802e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008032:	0713      	lsls	r3, r2, #28
 8008034:	bf44      	itt	mi
 8008036:	232b      	movmi	r3, #43	@ 0x2b
 8008038:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800803c:	f89a 3000 	ldrb.w	r3, [sl]
 8008040:	2b2a      	cmp	r3, #42	@ 0x2a
 8008042:	d015      	beq.n	8008070 <_vfiprintf_r+0x120>
 8008044:	9a07      	ldr	r2, [sp, #28]
 8008046:	4654      	mov	r4, sl
 8008048:	2000      	movs	r0, #0
 800804a:	f04f 0c0a 	mov.w	ip, #10
 800804e:	4621      	mov	r1, r4
 8008050:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008054:	3b30      	subs	r3, #48	@ 0x30
 8008056:	2b09      	cmp	r3, #9
 8008058:	d94b      	bls.n	80080f2 <_vfiprintf_r+0x1a2>
 800805a:	b1b0      	cbz	r0, 800808a <_vfiprintf_r+0x13a>
 800805c:	9207      	str	r2, [sp, #28]
 800805e:	e014      	b.n	800808a <_vfiprintf_r+0x13a>
 8008060:	eba0 0308 	sub.w	r3, r0, r8
 8008064:	fa09 f303 	lsl.w	r3, r9, r3
 8008068:	4313      	orrs	r3, r2
 800806a:	9304      	str	r3, [sp, #16]
 800806c:	46a2      	mov	sl, r4
 800806e:	e7d2      	b.n	8008016 <_vfiprintf_r+0xc6>
 8008070:	9b03      	ldr	r3, [sp, #12]
 8008072:	1d19      	adds	r1, r3, #4
 8008074:	681b      	ldr	r3, [r3, #0]
 8008076:	9103      	str	r1, [sp, #12]
 8008078:	2b00      	cmp	r3, #0
 800807a:	bfbb      	ittet	lt
 800807c:	425b      	neglt	r3, r3
 800807e:	f042 0202 	orrlt.w	r2, r2, #2
 8008082:	9307      	strge	r3, [sp, #28]
 8008084:	9307      	strlt	r3, [sp, #28]
 8008086:	bfb8      	it	lt
 8008088:	9204      	strlt	r2, [sp, #16]
 800808a:	7823      	ldrb	r3, [r4, #0]
 800808c:	2b2e      	cmp	r3, #46	@ 0x2e
 800808e:	d10a      	bne.n	80080a6 <_vfiprintf_r+0x156>
 8008090:	7863      	ldrb	r3, [r4, #1]
 8008092:	2b2a      	cmp	r3, #42	@ 0x2a
 8008094:	d132      	bne.n	80080fc <_vfiprintf_r+0x1ac>
 8008096:	9b03      	ldr	r3, [sp, #12]
 8008098:	1d1a      	adds	r2, r3, #4
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	9203      	str	r2, [sp, #12]
 800809e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80080a2:	3402      	adds	r4, #2
 80080a4:	9305      	str	r3, [sp, #20]
 80080a6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800817c <_vfiprintf_r+0x22c>
 80080aa:	7821      	ldrb	r1, [r4, #0]
 80080ac:	2203      	movs	r2, #3
 80080ae:	4650      	mov	r0, sl
 80080b0:	f7f8 f88e 	bl	80001d0 <memchr>
 80080b4:	b138      	cbz	r0, 80080c6 <_vfiprintf_r+0x176>
 80080b6:	9b04      	ldr	r3, [sp, #16]
 80080b8:	eba0 000a 	sub.w	r0, r0, sl
 80080bc:	2240      	movs	r2, #64	@ 0x40
 80080be:	4082      	lsls	r2, r0
 80080c0:	4313      	orrs	r3, r2
 80080c2:	3401      	adds	r4, #1
 80080c4:	9304      	str	r3, [sp, #16]
 80080c6:	f814 1b01 	ldrb.w	r1, [r4], #1
 80080ca:	4829      	ldr	r0, [pc, #164]	@ (8008170 <_vfiprintf_r+0x220>)
 80080cc:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 80080d0:	2206      	movs	r2, #6
 80080d2:	f7f8 f87d 	bl	80001d0 <memchr>
 80080d6:	2800      	cmp	r0, #0
 80080d8:	d03f      	beq.n	800815a <_vfiprintf_r+0x20a>
 80080da:	4b26      	ldr	r3, [pc, #152]	@ (8008174 <_vfiprintf_r+0x224>)
 80080dc:	bb1b      	cbnz	r3, 8008126 <_vfiprintf_r+0x1d6>
 80080de:	9b03      	ldr	r3, [sp, #12]
 80080e0:	3307      	adds	r3, #7
 80080e2:	f023 0307 	bic.w	r3, r3, #7
 80080e6:	3308      	adds	r3, #8
 80080e8:	9303      	str	r3, [sp, #12]
 80080ea:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80080ec:	443b      	add	r3, r7
 80080ee:	9309      	str	r3, [sp, #36]	@ 0x24
 80080f0:	e76a      	b.n	8007fc8 <_vfiprintf_r+0x78>
 80080f2:	fb0c 3202 	mla	r2, ip, r2, r3
 80080f6:	460c      	mov	r4, r1
 80080f8:	2001      	movs	r0, #1
 80080fa:	e7a8      	b.n	800804e <_vfiprintf_r+0xfe>
 80080fc:	2300      	movs	r3, #0
 80080fe:	3401      	adds	r4, #1
 8008100:	9305      	str	r3, [sp, #20]
 8008102:	4619      	mov	r1, r3
 8008104:	f04f 0c0a 	mov.w	ip, #10
 8008108:	4620      	mov	r0, r4
 800810a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800810e:	3a30      	subs	r2, #48	@ 0x30
 8008110:	2a09      	cmp	r2, #9
 8008112:	d903      	bls.n	800811c <_vfiprintf_r+0x1cc>
 8008114:	2b00      	cmp	r3, #0
 8008116:	d0c6      	beq.n	80080a6 <_vfiprintf_r+0x156>
 8008118:	9105      	str	r1, [sp, #20]
 800811a:	e7c4      	b.n	80080a6 <_vfiprintf_r+0x156>
 800811c:	fb0c 2101 	mla	r1, ip, r1, r2
 8008120:	4604      	mov	r4, r0
 8008122:	2301      	movs	r3, #1
 8008124:	e7f0      	b.n	8008108 <_vfiprintf_r+0x1b8>
 8008126:	ab03      	add	r3, sp, #12
 8008128:	9300      	str	r3, [sp, #0]
 800812a:	462a      	mov	r2, r5
 800812c:	4b12      	ldr	r3, [pc, #72]	@ (8008178 <_vfiprintf_r+0x228>)
 800812e:	a904      	add	r1, sp, #16
 8008130:	4630      	mov	r0, r6
 8008132:	f3af 8000 	nop.w
 8008136:	4607      	mov	r7, r0
 8008138:	1c78      	adds	r0, r7, #1
 800813a:	d1d6      	bne.n	80080ea <_vfiprintf_r+0x19a>
 800813c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800813e:	07d9      	lsls	r1, r3, #31
 8008140:	d405      	bmi.n	800814e <_vfiprintf_r+0x1fe>
 8008142:	89ab      	ldrh	r3, [r5, #12]
 8008144:	059a      	lsls	r2, r3, #22
 8008146:	d402      	bmi.n	800814e <_vfiprintf_r+0x1fe>
 8008148:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800814a:	f7ff fdcf 	bl	8007cec <__retarget_lock_release_recursive>
 800814e:	89ab      	ldrh	r3, [r5, #12]
 8008150:	065b      	lsls	r3, r3, #25
 8008152:	f53f af1f 	bmi.w	8007f94 <_vfiprintf_r+0x44>
 8008156:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008158:	e71e      	b.n	8007f98 <_vfiprintf_r+0x48>
 800815a:	ab03      	add	r3, sp, #12
 800815c:	9300      	str	r3, [sp, #0]
 800815e:	462a      	mov	r2, r5
 8008160:	4b05      	ldr	r3, [pc, #20]	@ (8008178 <_vfiprintf_r+0x228>)
 8008162:	a904      	add	r1, sp, #16
 8008164:	4630      	mov	r0, r6
 8008166:	f000 f879 	bl	800825c <_printf_i>
 800816a:	e7e4      	b.n	8008136 <_vfiprintf_r+0x1e6>
 800816c:	08009f94 	.word	0x08009f94
 8008170:	08009f9e 	.word	0x08009f9e
 8008174:	00000000 	.word	0x00000000
 8008178:	08007f2b 	.word	0x08007f2b
 800817c:	08009f9a 	.word	0x08009f9a

08008180 <_printf_common>:
 8008180:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008184:	4616      	mov	r6, r2
 8008186:	4698      	mov	r8, r3
 8008188:	688a      	ldr	r2, [r1, #8]
 800818a:	690b      	ldr	r3, [r1, #16]
 800818c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008190:	4293      	cmp	r3, r2
 8008192:	bfb8      	it	lt
 8008194:	4613      	movlt	r3, r2
 8008196:	6033      	str	r3, [r6, #0]
 8008198:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 800819c:	4607      	mov	r7, r0
 800819e:	460c      	mov	r4, r1
 80081a0:	b10a      	cbz	r2, 80081a6 <_printf_common+0x26>
 80081a2:	3301      	adds	r3, #1
 80081a4:	6033      	str	r3, [r6, #0]
 80081a6:	6823      	ldr	r3, [r4, #0]
 80081a8:	0699      	lsls	r1, r3, #26
 80081aa:	bf42      	ittt	mi
 80081ac:	6833      	ldrmi	r3, [r6, #0]
 80081ae:	3302      	addmi	r3, #2
 80081b0:	6033      	strmi	r3, [r6, #0]
 80081b2:	6825      	ldr	r5, [r4, #0]
 80081b4:	f015 0506 	ands.w	r5, r5, #6
 80081b8:	d106      	bne.n	80081c8 <_printf_common+0x48>
 80081ba:	f104 0a19 	add.w	sl, r4, #25
 80081be:	68e3      	ldr	r3, [r4, #12]
 80081c0:	6832      	ldr	r2, [r6, #0]
 80081c2:	1a9b      	subs	r3, r3, r2
 80081c4:	42ab      	cmp	r3, r5
 80081c6:	dc26      	bgt.n	8008216 <_printf_common+0x96>
 80081c8:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80081cc:	6822      	ldr	r2, [r4, #0]
 80081ce:	3b00      	subs	r3, #0
 80081d0:	bf18      	it	ne
 80081d2:	2301      	movne	r3, #1
 80081d4:	0692      	lsls	r2, r2, #26
 80081d6:	d42b      	bmi.n	8008230 <_printf_common+0xb0>
 80081d8:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80081dc:	4641      	mov	r1, r8
 80081de:	4638      	mov	r0, r7
 80081e0:	47c8      	blx	r9
 80081e2:	3001      	adds	r0, #1
 80081e4:	d01e      	beq.n	8008224 <_printf_common+0xa4>
 80081e6:	6823      	ldr	r3, [r4, #0]
 80081e8:	6922      	ldr	r2, [r4, #16]
 80081ea:	f003 0306 	and.w	r3, r3, #6
 80081ee:	2b04      	cmp	r3, #4
 80081f0:	bf02      	ittt	eq
 80081f2:	68e5      	ldreq	r5, [r4, #12]
 80081f4:	6833      	ldreq	r3, [r6, #0]
 80081f6:	1aed      	subeq	r5, r5, r3
 80081f8:	68a3      	ldr	r3, [r4, #8]
 80081fa:	bf0c      	ite	eq
 80081fc:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008200:	2500      	movne	r5, #0
 8008202:	4293      	cmp	r3, r2
 8008204:	bfc4      	itt	gt
 8008206:	1a9b      	subgt	r3, r3, r2
 8008208:	18ed      	addgt	r5, r5, r3
 800820a:	2600      	movs	r6, #0
 800820c:	341a      	adds	r4, #26
 800820e:	42b5      	cmp	r5, r6
 8008210:	d11a      	bne.n	8008248 <_printf_common+0xc8>
 8008212:	2000      	movs	r0, #0
 8008214:	e008      	b.n	8008228 <_printf_common+0xa8>
 8008216:	2301      	movs	r3, #1
 8008218:	4652      	mov	r2, sl
 800821a:	4641      	mov	r1, r8
 800821c:	4638      	mov	r0, r7
 800821e:	47c8      	blx	r9
 8008220:	3001      	adds	r0, #1
 8008222:	d103      	bne.n	800822c <_printf_common+0xac>
 8008224:	f04f 30ff 	mov.w	r0, #4294967295
 8008228:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800822c:	3501      	adds	r5, #1
 800822e:	e7c6      	b.n	80081be <_printf_common+0x3e>
 8008230:	18e1      	adds	r1, r4, r3
 8008232:	1c5a      	adds	r2, r3, #1
 8008234:	2030      	movs	r0, #48	@ 0x30
 8008236:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800823a:	4422      	add	r2, r4
 800823c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008240:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008244:	3302      	adds	r3, #2
 8008246:	e7c7      	b.n	80081d8 <_printf_common+0x58>
 8008248:	2301      	movs	r3, #1
 800824a:	4622      	mov	r2, r4
 800824c:	4641      	mov	r1, r8
 800824e:	4638      	mov	r0, r7
 8008250:	47c8      	blx	r9
 8008252:	3001      	adds	r0, #1
 8008254:	d0e6      	beq.n	8008224 <_printf_common+0xa4>
 8008256:	3601      	adds	r6, #1
 8008258:	e7d9      	b.n	800820e <_printf_common+0x8e>
	...

0800825c <_printf_i>:
 800825c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008260:	7e0f      	ldrb	r7, [r1, #24]
 8008262:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008264:	2f78      	cmp	r7, #120	@ 0x78
 8008266:	4691      	mov	r9, r2
 8008268:	4680      	mov	r8, r0
 800826a:	460c      	mov	r4, r1
 800826c:	469a      	mov	sl, r3
 800826e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008272:	d807      	bhi.n	8008284 <_printf_i+0x28>
 8008274:	2f62      	cmp	r7, #98	@ 0x62
 8008276:	d80a      	bhi.n	800828e <_printf_i+0x32>
 8008278:	2f00      	cmp	r7, #0
 800827a:	f000 80d1 	beq.w	8008420 <_printf_i+0x1c4>
 800827e:	2f58      	cmp	r7, #88	@ 0x58
 8008280:	f000 80b8 	beq.w	80083f4 <_printf_i+0x198>
 8008284:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008288:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800828c:	e03a      	b.n	8008304 <_printf_i+0xa8>
 800828e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008292:	2b15      	cmp	r3, #21
 8008294:	d8f6      	bhi.n	8008284 <_printf_i+0x28>
 8008296:	a101      	add	r1, pc, #4	@ (adr r1, 800829c <_printf_i+0x40>)
 8008298:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800829c:	080082f5 	.word	0x080082f5
 80082a0:	08008309 	.word	0x08008309
 80082a4:	08008285 	.word	0x08008285
 80082a8:	08008285 	.word	0x08008285
 80082ac:	08008285 	.word	0x08008285
 80082b0:	08008285 	.word	0x08008285
 80082b4:	08008309 	.word	0x08008309
 80082b8:	08008285 	.word	0x08008285
 80082bc:	08008285 	.word	0x08008285
 80082c0:	08008285 	.word	0x08008285
 80082c4:	08008285 	.word	0x08008285
 80082c8:	08008407 	.word	0x08008407
 80082cc:	08008333 	.word	0x08008333
 80082d0:	080083c1 	.word	0x080083c1
 80082d4:	08008285 	.word	0x08008285
 80082d8:	08008285 	.word	0x08008285
 80082dc:	08008429 	.word	0x08008429
 80082e0:	08008285 	.word	0x08008285
 80082e4:	08008333 	.word	0x08008333
 80082e8:	08008285 	.word	0x08008285
 80082ec:	08008285 	.word	0x08008285
 80082f0:	080083c9 	.word	0x080083c9
 80082f4:	6833      	ldr	r3, [r6, #0]
 80082f6:	1d1a      	adds	r2, r3, #4
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	6032      	str	r2, [r6, #0]
 80082fc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008300:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008304:	2301      	movs	r3, #1
 8008306:	e09c      	b.n	8008442 <_printf_i+0x1e6>
 8008308:	6833      	ldr	r3, [r6, #0]
 800830a:	6820      	ldr	r0, [r4, #0]
 800830c:	1d19      	adds	r1, r3, #4
 800830e:	6031      	str	r1, [r6, #0]
 8008310:	0606      	lsls	r6, r0, #24
 8008312:	d501      	bpl.n	8008318 <_printf_i+0xbc>
 8008314:	681d      	ldr	r5, [r3, #0]
 8008316:	e003      	b.n	8008320 <_printf_i+0xc4>
 8008318:	0645      	lsls	r5, r0, #25
 800831a:	d5fb      	bpl.n	8008314 <_printf_i+0xb8>
 800831c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008320:	2d00      	cmp	r5, #0
 8008322:	da03      	bge.n	800832c <_printf_i+0xd0>
 8008324:	232d      	movs	r3, #45	@ 0x2d
 8008326:	426d      	negs	r5, r5
 8008328:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800832c:	4858      	ldr	r0, [pc, #352]	@ (8008490 <_printf_i+0x234>)
 800832e:	230a      	movs	r3, #10
 8008330:	e011      	b.n	8008356 <_printf_i+0xfa>
 8008332:	6821      	ldr	r1, [r4, #0]
 8008334:	6833      	ldr	r3, [r6, #0]
 8008336:	0608      	lsls	r0, r1, #24
 8008338:	f853 5b04 	ldr.w	r5, [r3], #4
 800833c:	d402      	bmi.n	8008344 <_printf_i+0xe8>
 800833e:	0649      	lsls	r1, r1, #25
 8008340:	bf48      	it	mi
 8008342:	b2ad      	uxthmi	r5, r5
 8008344:	2f6f      	cmp	r7, #111	@ 0x6f
 8008346:	4852      	ldr	r0, [pc, #328]	@ (8008490 <_printf_i+0x234>)
 8008348:	6033      	str	r3, [r6, #0]
 800834a:	bf14      	ite	ne
 800834c:	230a      	movne	r3, #10
 800834e:	2308      	moveq	r3, #8
 8008350:	2100      	movs	r1, #0
 8008352:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008356:	6866      	ldr	r6, [r4, #4]
 8008358:	60a6      	str	r6, [r4, #8]
 800835a:	2e00      	cmp	r6, #0
 800835c:	db05      	blt.n	800836a <_printf_i+0x10e>
 800835e:	6821      	ldr	r1, [r4, #0]
 8008360:	432e      	orrs	r6, r5
 8008362:	f021 0104 	bic.w	r1, r1, #4
 8008366:	6021      	str	r1, [r4, #0]
 8008368:	d04b      	beq.n	8008402 <_printf_i+0x1a6>
 800836a:	4616      	mov	r6, r2
 800836c:	fbb5 f1f3 	udiv	r1, r5, r3
 8008370:	fb03 5711 	mls	r7, r3, r1, r5
 8008374:	5dc7      	ldrb	r7, [r0, r7]
 8008376:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800837a:	462f      	mov	r7, r5
 800837c:	42bb      	cmp	r3, r7
 800837e:	460d      	mov	r5, r1
 8008380:	d9f4      	bls.n	800836c <_printf_i+0x110>
 8008382:	2b08      	cmp	r3, #8
 8008384:	d10b      	bne.n	800839e <_printf_i+0x142>
 8008386:	6823      	ldr	r3, [r4, #0]
 8008388:	07df      	lsls	r7, r3, #31
 800838a:	d508      	bpl.n	800839e <_printf_i+0x142>
 800838c:	6923      	ldr	r3, [r4, #16]
 800838e:	6861      	ldr	r1, [r4, #4]
 8008390:	4299      	cmp	r1, r3
 8008392:	bfde      	ittt	le
 8008394:	2330      	movle	r3, #48	@ 0x30
 8008396:	f806 3c01 	strble.w	r3, [r6, #-1]
 800839a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800839e:	1b92      	subs	r2, r2, r6
 80083a0:	6122      	str	r2, [r4, #16]
 80083a2:	f8cd a000 	str.w	sl, [sp]
 80083a6:	464b      	mov	r3, r9
 80083a8:	aa03      	add	r2, sp, #12
 80083aa:	4621      	mov	r1, r4
 80083ac:	4640      	mov	r0, r8
 80083ae:	f7ff fee7 	bl	8008180 <_printf_common>
 80083b2:	3001      	adds	r0, #1
 80083b4:	d14a      	bne.n	800844c <_printf_i+0x1f0>
 80083b6:	f04f 30ff 	mov.w	r0, #4294967295
 80083ba:	b004      	add	sp, #16
 80083bc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80083c0:	6823      	ldr	r3, [r4, #0]
 80083c2:	f043 0320 	orr.w	r3, r3, #32
 80083c6:	6023      	str	r3, [r4, #0]
 80083c8:	4832      	ldr	r0, [pc, #200]	@ (8008494 <_printf_i+0x238>)
 80083ca:	2778      	movs	r7, #120	@ 0x78
 80083cc:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80083d0:	6823      	ldr	r3, [r4, #0]
 80083d2:	6831      	ldr	r1, [r6, #0]
 80083d4:	061f      	lsls	r7, r3, #24
 80083d6:	f851 5b04 	ldr.w	r5, [r1], #4
 80083da:	d402      	bmi.n	80083e2 <_printf_i+0x186>
 80083dc:	065f      	lsls	r7, r3, #25
 80083de:	bf48      	it	mi
 80083e0:	b2ad      	uxthmi	r5, r5
 80083e2:	6031      	str	r1, [r6, #0]
 80083e4:	07d9      	lsls	r1, r3, #31
 80083e6:	bf44      	itt	mi
 80083e8:	f043 0320 	orrmi.w	r3, r3, #32
 80083ec:	6023      	strmi	r3, [r4, #0]
 80083ee:	b11d      	cbz	r5, 80083f8 <_printf_i+0x19c>
 80083f0:	2310      	movs	r3, #16
 80083f2:	e7ad      	b.n	8008350 <_printf_i+0xf4>
 80083f4:	4826      	ldr	r0, [pc, #152]	@ (8008490 <_printf_i+0x234>)
 80083f6:	e7e9      	b.n	80083cc <_printf_i+0x170>
 80083f8:	6823      	ldr	r3, [r4, #0]
 80083fa:	f023 0320 	bic.w	r3, r3, #32
 80083fe:	6023      	str	r3, [r4, #0]
 8008400:	e7f6      	b.n	80083f0 <_printf_i+0x194>
 8008402:	4616      	mov	r6, r2
 8008404:	e7bd      	b.n	8008382 <_printf_i+0x126>
 8008406:	6833      	ldr	r3, [r6, #0]
 8008408:	6825      	ldr	r5, [r4, #0]
 800840a:	6961      	ldr	r1, [r4, #20]
 800840c:	1d18      	adds	r0, r3, #4
 800840e:	6030      	str	r0, [r6, #0]
 8008410:	062e      	lsls	r6, r5, #24
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	d501      	bpl.n	800841a <_printf_i+0x1be>
 8008416:	6019      	str	r1, [r3, #0]
 8008418:	e002      	b.n	8008420 <_printf_i+0x1c4>
 800841a:	0668      	lsls	r0, r5, #25
 800841c:	d5fb      	bpl.n	8008416 <_printf_i+0x1ba>
 800841e:	8019      	strh	r1, [r3, #0]
 8008420:	2300      	movs	r3, #0
 8008422:	6123      	str	r3, [r4, #16]
 8008424:	4616      	mov	r6, r2
 8008426:	e7bc      	b.n	80083a2 <_printf_i+0x146>
 8008428:	6833      	ldr	r3, [r6, #0]
 800842a:	1d1a      	adds	r2, r3, #4
 800842c:	6032      	str	r2, [r6, #0]
 800842e:	681e      	ldr	r6, [r3, #0]
 8008430:	6862      	ldr	r2, [r4, #4]
 8008432:	2100      	movs	r1, #0
 8008434:	4630      	mov	r0, r6
 8008436:	f7f7 fecb 	bl	80001d0 <memchr>
 800843a:	b108      	cbz	r0, 8008440 <_printf_i+0x1e4>
 800843c:	1b80      	subs	r0, r0, r6
 800843e:	6060      	str	r0, [r4, #4]
 8008440:	6863      	ldr	r3, [r4, #4]
 8008442:	6123      	str	r3, [r4, #16]
 8008444:	2300      	movs	r3, #0
 8008446:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800844a:	e7aa      	b.n	80083a2 <_printf_i+0x146>
 800844c:	6923      	ldr	r3, [r4, #16]
 800844e:	4632      	mov	r2, r6
 8008450:	4649      	mov	r1, r9
 8008452:	4640      	mov	r0, r8
 8008454:	47d0      	blx	sl
 8008456:	3001      	adds	r0, #1
 8008458:	d0ad      	beq.n	80083b6 <_printf_i+0x15a>
 800845a:	6823      	ldr	r3, [r4, #0]
 800845c:	079b      	lsls	r3, r3, #30
 800845e:	d413      	bmi.n	8008488 <_printf_i+0x22c>
 8008460:	68e0      	ldr	r0, [r4, #12]
 8008462:	9b03      	ldr	r3, [sp, #12]
 8008464:	4298      	cmp	r0, r3
 8008466:	bfb8      	it	lt
 8008468:	4618      	movlt	r0, r3
 800846a:	e7a6      	b.n	80083ba <_printf_i+0x15e>
 800846c:	2301      	movs	r3, #1
 800846e:	4632      	mov	r2, r6
 8008470:	4649      	mov	r1, r9
 8008472:	4640      	mov	r0, r8
 8008474:	47d0      	blx	sl
 8008476:	3001      	adds	r0, #1
 8008478:	d09d      	beq.n	80083b6 <_printf_i+0x15a>
 800847a:	3501      	adds	r5, #1
 800847c:	68e3      	ldr	r3, [r4, #12]
 800847e:	9903      	ldr	r1, [sp, #12]
 8008480:	1a5b      	subs	r3, r3, r1
 8008482:	42ab      	cmp	r3, r5
 8008484:	dcf2      	bgt.n	800846c <_printf_i+0x210>
 8008486:	e7eb      	b.n	8008460 <_printf_i+0x204>
 8008488:	2500      	movs	r5, #0
 800848a:	f104 0619 	add.w	r6, r4, #25
 800848e:	e7f5      	b.n	800847c <_printf_i+0x220>
 8008490:	08009fa5 	.word	0x08009fa5
 8008494:	08009fb6 	.word	0x08009fb6

08008498 <__sflush_r>:
 8008498:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800849c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80084a0:	0716      	lsls	r6, r2, #28
 80084a2:	4605      	mov	r5, r0
 80084a4:	460c      	mov	r4, r1
 80084a6:	d454      	bmi.n	8008552 <__sflush_r+0xba>
 80084a8:	684b      	ldr	r3, [r1, #4]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	dc02      	bgt.n	80084b4 <__sflush_r+0x1c>
 80084ae:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80084b0:	2b00      	cmp	r3, #0
 80084b2:	dd48      	ble.n	8008546 <__sflush_r+0xae>
 80084b4:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084b6:	2e00      	cmp	r6, #0
 80084b8:	d045      	beq.n	8008546 <__sflush_r+0xae>
 80084ba:	2300      	movs	r3, #0
 80084bc:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 80084c0:	682f      	ldr	r7, [r5, #0]
 80084c2:	6a21      	ldr	r1, [r4, #32]
 80084c4:	602b      	str	r3, [r5, #0]
 80084c6:	d030      	beq.n	800852a <__sflush_r+0x92>
 80084c8:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 80084ca:	89a3      	ldrh	r3, [r4, #12]
 80084cc:	0759      	lsls	r1, r3, #29
 80084ce:	d505      	bpl.n	80084dc <__sflush_r+0x44>
 80084d0:	6863      	ldr	r3, [r4, #4]
 80084d2:	1ad2      	subs	r2, r2, r3
 80084d4:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 80084d6:	b10b      	cbz	r3, 80084dc <__sflush_r+0x44>
 80084d8:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 80084da:	1ad2      	subs	r2, r2, r3
 80084dc:	2300      	movs	r3, #0
 80084de:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 80084e0:	6a21      	ldr	r1, [r4, #32]
 80084e2:	4628      	mov	r0, r5
 80084e4:	47b0      	blx	r6
 80084e6:	1c43      	adds	r3, r0, #1
 80084e8:	89a3      	ldrh	r3, [r4, #12]
 80084ea:	d106      	bne.n	80084fa <__sflush_r+0x62>
 80084ec:	6829      	ldr	r1, [r5, #0]
 80084ee:	291d      	cmp	r1, #29
 80084f0:	d82b      	bhi.n	800854a <__sflush_r+0xb2>
 80084f2:	4a2a      	ldr	r2, [pc, #168]	@ (800859c <__sflush_r+0x104>)
 80084f4:	40ca      	lsrs	r2, r1
 80084f6:	07d6      	lsls	r6, r2, #31
 80084f8:	d527      	bpl.n	800854a <__sflush_r+0xb2>
 80084fa:	2200      	movs	r2, #0
 80084fc:	6062      	str	r2, [r4, #4]
 80084fe:	04d9      	lsls	r1, r3, #19
 8008500:	6922      	ldr	r2, [r4, #16]
 8008502:	6022      	str	r2, [r4, #0]
 8008504:	d504      	bpl.n	8008510 <__sflush_r+0x78>
 8008506:	1c42      	adds	r2, r0, #1
 8008508:	d101      	bne.n	800850e <__sflush_r+0x76>
 800850a:	682b      	ldr	r3, [r5, #0]
 800850c:	b903      	cbnz	r3, 8008510 <__sflush_r+0x78>
 800850e:	6560      	str	r0, [r4, #84]	@ 0x54
 8008510:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008512:	602f      	str	r7, [r5, #0]
 8008514:	b1b9      	cbz	r1, 8008546 <__sflush_r+0xae>
 8008516:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800851a:	4299      	cmp	r1, r3
 800851c:	d002      	beq.n	8008524 <__sflush_r+0x8c>
 800851e:	4628      	mov	r0, r5
 8008520:	f7ff fbf4 	bl	8007d0c <_free_r>
 8008524:	2300      	movs	r3, #0
 8008526:	6363      	str	r3, [r4, #52]	@ 0x34
 8008528:	e00d      	b.n	8008546 <__sflush_r+0xae>
 800852a:	2301      	movs	r3, #1
 800852c:	4628      	mov	r0, r5
 800852e:	47b0      	blx	r6
 8008530:	4602      	mov	r2, r0
 8008532:	1c50      	adds	r0, r2, #1
 8008534:	d1c9      	bne.n	80084ca <__sflush_r+0x32>
 8008536:	682b      	ldr	r3, [r5, #0]
 8008538:	2b00      	cmp	r3, #0
 800853a:	d0c6      	beq.n	80084ca <__sflush_r+0x32>
 800853c:	2b1d      	cmp	r3, #29
 800853e:	d001      	beq.n	8008544 <__sflush_r+0xac>
 8008540:	2b16      	cmp	r3, #22
 8008542:	d11e      	bne.n	8008582 <__sflush_r+0xea>
 8008544:	602f      	str	r7, [r5, #0]
 8008546:	2000      	movs	r0, #0
 8008548:	e022      	b.n	8008590 <__sflush_r+0xf8>
 800854a:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800854e:	b21b      	sxth	r3, r3
 8008550:	e01b      	b.n	800858a <__sflush_r+0xf2>
 8008552:	690f      	ldr	r7, [r1, #16]
 8008554:	2f00      	cmp	r7, #0
 8008556:	d0f6      	beq.n	8008546 <__sflush_r+0xae>
 8008558:	0793      	lsls	r3, r2, #30
 800855a:	680e      	ldr	r6, [r1, #0]
 800855c:	bf08      	it	eq
 800855e:	694b      	ldreq	r3, [r1, #20]
 8008560:	600f      	str	r7, [r1, #0]
 8008562:	bf18      	it	ne
 8008564:	2300      	movne	r3, #0
 8008566:	eba6 0807 	sub.w	r8, r6, r7
 800856a:	608b      	str	r3, [r1, #8]
 800856c:	f1b8 0f00 	cmp.w	r8, #0
 8008570:	dde9      	ble.n	8008546 <__sflush_r+0xae>
 8008572:	6a21      	ldr	r1, [r4, #32]
 8008574:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8008576:	4643      	mov	r3, r8
 8008578:	463a      	mov	r2, r7
 800857a:	4628      	mov	r0, r5
 800857c:	47b0      	blx	r6
 800857e:	2800      	cmp	r0, #0
 8008580:	dc08      	bgt.n	8008594 <__sflush_r+0xfc>
 8008582:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008586:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800858a:	81a3      	strh	r3, [r4, #12]
 800858c:	f04f 30ff 	mov.w	r0, #4294967295
 8008590:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008594:	4407      	add	r7, r0
 8008596:	eba8 0800 	sub.w	r8, r8, r0
 800859a:	e7e7      	b.n	800856c <__sflush_r+0xd4>
 800859c:	20400001 	.word	0x20400001

080085a0 <_fflush_r>:
 80085a0:	b538      	push	{r3, r4, r5, lr}
 80085a2:	690b      	ldr	r3, [r1, #16]
 80085a4:	4605      	mov	r5, r0
 80085a6:	460c      	mov	r4, r1
 80085a8:	b913      	cbnz	r3, 80085b0 <_fflush_r+0x10>
 80085aa:	2500      	movs	r5, #0
 80085ac:	4628      	mov	r0, r5
 80085ae:	bd38      	pop	{r3, r4, r5, pc}
 80085b0:	b118      	cbz	r0, 80085ba <_fflush_r+0x1a>
 80085b2:	6a03      	ldr	r3, [r0, #32]
 80085b4:	b90b      	cbnz	r3, 80085ba <_fflush_r+0x1a>
 80085b6:	f7ff f933 	bl	8007820 <__sinit>
 80085ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80085be:	2b00      	cmp	r3, #0
 80085c0:	d0f3      	beq.n	80085aa <_fflush_r+0xa>
 80085c2:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 80085c4:	07d0      	lsls	r0, r2, #31
 80085c6:	d404      	bmi.n	80085d2 <_fflush_r+0x32>
 80085c8:	0599      	lsls	r1, r3, #22
 80085ca:	d402      	bmi.n	80085d2 <_fflush_r+0x32>
 80085cc:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ce:	f7ff fb8c 	bl	8007cea <__retarget_lock_acquire_recursive>
 80085d2:	4628      	mov	r0, r5
 80085d4:	4621      	mov	r1, r4
 80085d6:	f7ff ff5f 	bl	8008498 <__sflush_r>
 80085da:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80085dc:	07da      	lsls	r2, r3, #31
 80085de:	4605      	mov	r5, r0
 80085e0:	d4e4      	bmi.n	80085ac <_fflush_r+0xc>
 80085e2:	89a3      	ldrh	r3, [r4, #12]
 80085e4:	059b      	lsls	r3, r3, #22
 80085e6:	d4e1      	bmi.n	80085ac <_fflush_r+0xc>
 80085e8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085ea:	f7ff fb7f 	bl	8007cec <__retarget_lock_release_recursive>
 80085ee:	e7dd      	b.n	80085ac <_fflush_r+0xc>

080085f0 <__swhatbuf_r>:
 80085f0:	b570      	push	{r4, r5, r6, lr}
 80085f2:	460c      	mov	r4, r1
 80085f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80085f8:	2900      	cmp	r1, #0
 80085fa:	b096      	sub	sp, #88	@ 0x58
 80085fc:	4615      	mov	r5, r2
 80085fe:	461e      	mov	r6, r3
 8008600:	da0d      	bge.n	800861e <__swhatbuf_r+0x2e>
 8008602:	89a3      	ldrh	r3, [r4, #12]
 8008604:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008608:	f04f 0100 	mov.w	r1, #0
 800860c:	bf14      	ite	ne
 800860e:	2340      	movne	r3, #64	@ 0x40
 8008610:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008614:	2000      	movs	r0, #0
 8008616:	6031      	str	r1, [r6, #0]
 8008618:	602b      	str	r3, [r5, #0]
 800861a:	b016      	add	sp, #88	@ 0x58
 800861c:	bd70      	pop	{r4, r5, r6, pc}
 800861e:	466a      	mov	r2, sp
 8008620:	f000 f848 	bl	80086b4 <_fstat_r>
 8008624:	2800      	cmp	r0, #0
 8008626:	dbec      	blt.n	8008602 <__swhatbuf_r+0x12>
 8008628:	9901      	ldr	r1, [sp, #4]
 800862a:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800862e:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008632:	4259      	negs	r1, r3
 8008634:	4159      	adcs	r1, r3
 8008636:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800863a:	e7eb      	b.n	8008614 <__swhatbuf_r+0x24>

0800863c <__smakebuf_r>:
 800863c:	898b      	ldrh	r3, [r1, #12]
 800863e:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008640:	079d      	lsls	r5, r3, #30
 8008642:	4606      	mov	r6, r0
 8008644:	460c      	mov	r4, r1
 8008646:	d507      	bpl.n	8008658 <__smakebuf_r+0x1c>
 8008648:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800864c:	6023      	str	r3, [r4, #0]
 800864e:	6123      	str	r3, [r4, #16]
 8008650:	2301      	movs	r3, #1
 8008652:	6163      	str	r3, [r4, #20]
 8008654:	b003      	add	sp, #12
 8008656:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008658:	ab01      	add	r3, sp, #4
 800865a:	466a      	mov	r2, sp
 800865c:	f7ff ffc8 	bl	80085f0 <__swhatbuf_r>
 8008660:	9f00      	ldr	r7, [sp, #0]
 8008662:	4605      	mov	r5, r0
 8008664:	4639      	mov	r1, r7
 8008666:	4630      	mov	r0, r6
 8008668:	f7ff fbbc 	bl	8007de4 <_malloc_r>
 800866c:	b948      	cbnz	r0, 8008682 <__smakebuf_r+0x46>
 800866e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008672:	059a      	lsls	r2, r3, #22
 8008674:	d4ee      	bmi.n	8008654 <__smakebuf_r+0x18>
 8008676:	f023 0303 	bic.w	r3, r3, #3
 800867a:	f043 0302 	orr.w	r3, r3, #2
 800867e:	81a3      	strh	r3, [r4, #12]
 8008680:	e7e2      	b.n	8008648 <__smakebuf_r+0xc>
 8008682:	89a3      	ldrh	r3, [r4, #12]
 8008684:	6020      	str	r0, [r4, #0]
 8008686:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800868a:	81a3      	strh	r3, [r4, #12]
 800868c:	9b01      	ldr	r3, [sp, #4]
 800868e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8008692:	b15b      	cbz	r3, 80086ac <__smakebuf_r+0x70>
 8008694:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008698:	4630      	mov	r0, r6
 800869a:	f000 f81d 	bl	80086d8 <_isatty_r>
 800869e:	b128      	cbz	r0, 80086ac <__smakebuf_r+0x70>
 80086a0:	89a3      	ldrh	r3, [r4, #12]
 80086a2:	f023 0303 	bic.w	r3, r3, #3
 80086a6:	f043 0301 	orr.w	r3, r3, #1
 80086aa:	81a3      	strh	r3, [r4, #12]
 80086ac:	89a3      	ldrh	r3, [r4, #12]
 80086ae:	431d      	orrs	r5, r3
 80086b0:	81a5      	strh	r5, [r4, #12]
 80086b2:	e7cf      	b.n	8008654 <__smakebuf_r+0x18>

080086b4 <_fstat_r>:
 80086b4:	b538      	push	{r3, r4, r5, lr}
 80086b6:	4d07      	ldr	r5, [pc, #28]	@ (80086d4 <_fstat_r+0x20>)
 80086b8:	2300      	movs	r3, #0
 80086ba:	4604      	mov	r4, r0
 80086bc:	4608      	mov	r0, r1
 80086be:	4611      	mov	r1, r2
 80086c0:	602b      	str	r3, [r5, #0]
 80086c2:	f7f9 fe54 	bl	800236e <_fstat>
 80086c6:	1c43      	adds	r3, r0, #1
 80086c8:	d102      	bne.n	80086d0 <_fstat_r+0x1c>
 80086ca:	682b      	ldr	r3, [r5, #0]
 80086cc:	b103      	cbz	r3, 80086d0 <_fstat_r+0x1c>
 80086ce:	6023      	str	r3, [r4, #0]
 80086d0:	bd38      	pop	{r3, r4, r5, pc}
 80086d2:	bf00      	nop
 80086d4:	20004cc0 	.word	0x20004cc0

080086d8 <_isatty_r>:
 80086d8:	b538      	push	{r3, r4, r5, lr}
 80086da:	4d06      	ldr	r5, [pc, #24]	@ (80086f4 <_isatty_r+0x1c>)
 80086dc:	2300      	movs	r3, #0
 80086de:	4604      	mov	r4, r0
 80086e0:	4608      	mov	r0, r1
 80086e2:	602b      	str	r3, [r5, #0]
 80086e4:	f7f9 fe53 	bl	800238e <_isatty>
 80086e8:	1c43      	adds	r3, r0, #1
 80086ea:	d102      	bne.n	80086f2 <_isatty_r+0x1a>
 80086ec:	682b      	ldr	r3, [r5, #0]
 80086ee:	b103      	cbz	r3, 80086f2 <_isatty_r+0x1a>
 80086f0:	6023      	str	r3, [r4, #0]
 80086f2:	bd38      	pop	{r3, r4, r5, pc}
 80086f4:	20004cc0 	.word	0x20004cc0

080086f8 <_sbrk_r>:
 80086f8:	b538      	push	{r3, r4, r5, lr}
 80086fa:	4d06      	ldr	r5, [pc, #24]	@ (8008714 <_sbrk_r+0x1c>)
 80086fc:	2300      	movs	r3, #0
 80086fe:	4604      	mov	r4, r0
 8008700:	4608      	mov	r0, r1
 8008702:	602b      	str	r3, [r5, #0]
 8008704:	f7f9 fe5c 	bl	80023c0 <_sbrk>
 8008708:	1c43      	adds	r3, r0, #1
 800870a:	d102      	bne.n	8008712 <_sbrk_r+0x1a>
 800870c:	682b      	ldr	r3, [r5, #0]
 800870e:	b103      	cbz	r3, 8008712 <_sbrk_r+0x1a>
 8008710:	6023      	str	r3, [r4, #0]
 8008712:	bd38      	pop	{r3, r4, r5, pc}
 8008714:	20004cc0 	.word	0x20004cc0

08008718 <_init>:
 8008718:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800871a:	bf00      	nop
 800871c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800871e:	bc08      	pop	{r3}
 8008720:	469e      	mov	lr, r3
 8008722:	4770      	bx	lr

08008724 <_fini>:
 8008724:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008726:	bf00      	nop
 8008728:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800872a:	bc08      	pop	{r3}
 800872c:	469e      	mov	lr, r3
 800872e:	4770      	bx	lr
