
CAN_BOX.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009230  08000190  08000190  00001190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000bf4  080093c0  080093c0  0000a3c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009fb4  08009fb4  0000b06c  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  08009fb4  08009fb4  0000afb4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009fbc  08009fbc  0000b06c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009fbc  08009fbc  0000afbc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08009fc0  08009fc0  0000afc0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000006c  20000000  08009fc4  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000b06c  2**0
                  CONTENTS
 10 .bss          00004dcc  2000006c  2000006c  0000b06c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20004e38  20004e38  0000b06c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000b06c  2**0
                  CONTENTS, READONLY
 13 .debug_info   000203f7  00000000  00000000  0000b09c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004980  00000000  00000000  0002b493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001b40  00000000  00000000  0002fe18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 0000151a  00000000  00000000  00031958  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000259d5  00000000  00000000  00032e72  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001f6db  00000000  00000000  00058847  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000de3fb  00000000  00000000  00077f22  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  0015631d  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000079e0  00000000  00000000  00156360  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 0000004f  00000000  00000000  0015dd40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	@ (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	@ (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	@ (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	2000006c 	.word	0x2000006c
 80001ac:	00000000 	.word	0x00000000
 80001b0:	080093a8 	.word	0x080093a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	@ (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	@ (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	@ (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000070 	.word	0x20000070
 80001cc:	080093a8 	.word	0x080093a8

080001d0 <memchr>:
 80001d0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001d4:	2a10      	cmp	r2, #16
 80001d6:	db2b      	blt.n	8000230 <memchr+0x60>
 80001d8:	f010 0f07 	tst.w	r0, #7
 80001dc:	d008      	beq.n	80001f0 <memchr+0x20>
 80001de:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001e2:	3a01      	subs	r2, #1
 80001e4:	428b      	cmp	r3, r1
 80001e6:	d02d      	beq.n	8000244 <memchr+0x74>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	b342      	cbz	r2, 8000240 <memchr+0x70>
 80001ee:	d1f6      	bne.n	80001de <memchr+0xe>
 80001f0:	b4f0      	push	{r4, r5, r6, r7}
 80001f2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 80001f6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 80001fa:	f022 0407 	bic.w	r4, r2, #7
 80001fe:	f07f 0700 	mvns.w	r7, #0
 8000202:	2300      	movs	r3, #0
 8000204:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000208:	3c08      	subs	r4, #8
 800020a:	ea85 0501 	eor.w	r5, r5, r1
 800020e:	ea86 0601 	eor.w	r6, r6, r1
 8000212:	fa85 f547 	uadd8	r5, r5, r7
 8000216:	faa3 f587 	sel	r5, r3, r7
 800021a:	fa86 f647 	uadd8	r6, r6, r7
 800021e:	faa5 f687 	sel	r6, r5, r7
 8000222:	b98e      	cbnz	r6, 8000248 <memchr+0x78>
 8000224:	d1ee      	bne.n	8000204 <memchr+0x34>
 8000226:	bcf0      	pop	{r4, r5, r6, r7}
 8000228:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800022c:	f002 0207 	and.w	r2, r2, #7
 8000230:	b132      	cbz	r2, 8000240 <memchr+0x70>
 8000232:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000236:	3a01      	subs	r2, #1
 8000238:	ea83 0301 	eor.w	r3, r3, r1
 800023c:	b113      	cbz	r3, 8000244 <memchr+0x74>
 800023e:	d1f8      	bne.n	8000232 <memchr+0x62>
 8000240:	2000      	movs	r0, #0
 8000242:	4770      	bx	lr
 8000244:	3801      	subs	r0, #1
 8000246:	4770      	bx	lr
 8000248:	2d00      	cmp	r5, #0
 800024a:	bf06      	itte	eq
 800024c:	4635      	moveq	r5, r6
 800024e:	3803      	subeq	r0, #3
 8000250:	3807      	subne	r0, #7
 8000252:	f015 0f01 	tst.w	r5, #1
 8000256:	d107      	bne.n	8000268 <memchr+0x98>
 8000258:	3001      	adds	r0, #1
 800025a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800025e:	bf02      	ittt	eq
 8000260:	3001      	addeq	r0, #1
 8000262:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000266:	3001      	addeq	r0, #1
 8000268:	bcf0      	pop	{r4, r5, r6, r7}
 800026a:	3801      	subs	r0, #1
 800026c:	4770      	bx	lr
 800026e:	bf00      	nop

08000270 <__aeabi_uldivmod>:
 8000270:	b953      	cbnz	r3, 8000288 <__aeabi_uldivmod+0x18>
 8000272:	b94a      	cbnz	r2, 8000288 <__aeabi_uldivmod+0x18>
 8000274:	2900      	cmp	r1, #0
 8000276:	bf08      	it	eq
 8000278:	2800      	cmpeq	r0, #0
 800027a:	bf1c      	itt	ne
 800027c:	f04f 31ff 	movne.w	r1, #4294967295
 8000280:	f04f 30ff 	movne.w	r0, #4294967295
 8000284:	f000 b988 	b.w	8000598 <__aeabi_idiv0>
 8000288:	f1ad 0c08 	sub.w	ip, sp, #8
 800028c:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000290:	f000 f806 	bl	80002a0 <__udivmoddi4>
 8000294:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000298:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800029c:	b004      	add	sp, #16
 800029e:	4770      	bx	lr

080002a0 <__udivmoddi4>:
 80002a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002a4:	9d08      	ldr	r5, [sp, #32]
 80002a6:	468e      	mov	lr, r1
 80002a8:	4604      	mov	r4, r0
 80002aa:	4688      	mov	r8, r1
 80002ac:	2b00      	cmp	r3, #0
 80002ae:	d14a      	bne.n	8000346 <__udivmoddi4+0xa6>
 80002b0:	428a      	cmp	r2, r1
 80002b2:	4617      	mov	r7, r2
 80002b4:	d962      	bls.n	800037c <__udivmoddi4+0xdc>
 80002b6:	fab2 f682 	clz	r6, r2
 80002ba:	b14e      	cbz	r6, 80002d0 <__udivmoddi4+0x30>
 80002bc:	f1c6 0320 	rsb	r3, r6, #32
 80002c0:	fa01 f806 	lsl.w	r8, r1, r6
 80002c4:	fa20 f303 	lsr.w	r3, r0, r3
 80002c8:	40b7      	lsls	r7, r6
 80002ca:	ea43 0808 	orr.w	r8, r3, r8
 80002ce:	40b4      	lsls	r4, r6
 80002d0:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002d4:	fa1f fc87 	uxth.w	ip, r7
 80002d8:	fbb8 f1fe 	udiv	r1, r8, lr
 80002dc:	0c23      	lsrs	r3, r4, #16
 80002de:	fb0e 8811 	mls	r8, lr, r1, r8
 80002e2:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80002e6:	fb01 f20c 	mul.w	r2, r1, ip
 80002ea:	429a      	cmp	r2, r3
 80002ec:	d909      	bls.n	8000302 <__udivmoddi4+0x62>
 80002ee:	18fb      	adds	r3, r7, r3
 80002f0:	f101 30ff 	add.w	r0, r1, #4294967295
 80002f4:	f080 80ea 	bcs.w	80004cc <__udivmoddi4+0x22c>
 80002f8:	429a      	cmp	r2, r3
 80002fa:	f240 80e7 	bls.w	80004cc <__udivmoddi4+0x22c>
 80002fe:	3902      	subs	r1, #2
 8000300:	443b      	add	r3, r7
 8000302:	1a9a      	subs	r2, r3, r2
 8000304:	b2a3      	uxth	r3, r4
 8000306:	fbb2 f0fe 	udiv	r0, r2, lr
 800030a:	fb0e 2210 	mls	r2, lr, r0, r2
 800030e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000312:	fb00 fc0c 	mul.w	ip, r0, ip
 8000316:	459c      	cmp	ip, r3
 8000318:	d909      	bls.n	800032e <__udivmoddi4+0x8e>
 800031a:	18fb      	adds	r3, r7, r3
 800031c:	f100 32ff 	add.w	r2, r0, #4294967295
 8000320:	f080 80d6 	bcs.w	80004d0 <__udivmoddi4+0x230>
 8000324:	459c      	cmp	ip, r3
 8000326:	f240 80d3 	bls.w	80004d0 <__udivmoddi4+0x230>
 800032a:	443b      	add	r3, r7
 800032c:	3802      	subs	r0, #2
 800032e:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000332:	eba3 030c 	sub.w	r3, r3, ip
 8000336:	2100      	movs	r1, #0
 8000338:	b11d      	cbz	r5, 8000342 <__udivmoddi4+0xa2>
 800033a:	40f3      	lsrs	r3, r6
 800033c:	2200      	movs	r2, #0
 800033e:	e9c5 3200 	strd	r3, r2, [r5]
 8000342:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000346:	428b      	cmp	r3, r1
 8000348:	d905      	bls.n	8000356 <__udivmoddi4+0xb6>
 800034a:	b10d      	cbz	r5, 8000350 <__udivmoddi4+0xb0>
 800034c:	e9c5 0100 	strd	r0, r1, [r5]
 8000350:	2100      	movs	r1, #0
 8000352:	4608      	mov	r0, r1
 8000354:	e7f5      	b.n	8000342 <__udivmoddi4+0xa2>
 8000356:	fab3 f183 	clz	r1, r3
 800035a:	2900      	cmp	r1, #0
 800035c:	d146      	bne.n	80003ec <__udivmoddi4+0x14c>
 800035e:	4573      	cmp	r3, lr
 8000360:	d302      	bcc.n	8000368 <__udivmoddi4+0xc8>
 8000362:	4282      	cmp	r2, r0
 8000364:	f200 8105 	bhi.w	8000572 <__udivmoddi4+0x2d2>
 8000368:	1a84      	subs	r4, r0, r2
 800036a:	eb6e 0203 	sbc.w	r2, lr, r3
 800036e:	2001      	movs	r0, #1
 8000370:	4690      	mov	r8, r2
 8000372:	2d00      	cmp	r5, #0
 8000374:	d0e5      	beq.n	8000342 <__udivmoddi4+0xa2>
 8000376:	e9c5 4800 	strd	r4, r8, [r5]
 800037a:	e7e2      	b.n	8000342 <__udivmoddi4+0xa2>
 800037c:	2a00      	cmp	r2, #0
 800037e:	f000 8090 	beq.w	80004a2 <__udivmoddi4+0x202>
 8000382:	fab2 f682 	clz	r6, r2
 8000386:	2e00      	cmp	r6, #0
 8000388:	f040 80a4 	bne.w	80004d4 <__udivmoddi4+0x234>
 800038c:	1a8a      	subs	r2, r1, r2
 800038e:	0c03      	lsrs	r3, r0, #16
 8000390:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000394:	b280      	uxth	r0, r0
 8000396:	b2bc      	uxth	r4, r7
 8000398:	2101      	movs	r1, #1
 800039a:	fbb2 fcfe 	udiv	ip, r2, lr
 800039e:	fb0e 221c 	mls	r2, lr, ip, r2
 80003a2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80003a6:	fb04 f20c 	mul.w	r2, r4, ip
 80003aa:	429a      	cmp	r2, r3
 80003ac:	d907      	bls.n	80003be <__udivmoddi4+0x11e>
 80003ae:	18fb      	adds	r3, r7, r3
 80003b0:	f10c 38ff 	add.w	r8, ip, #4294967295
 80003b4:	d202      	bcs.n	80003bc <__udivmoddi4+0x11c>
 80003b6:	429a      	cmp	r2, r3
 80003b8:	f200 80e0 	bhi.w	800057c <__udivmoddi4+0x2dc>
 80003bc:	46c4      	mov	ip, r8
 80003be:	1a9b      	subs	r3, r3, r2
 80003c0:	fbb3 f2fe 	udiv	r2, r3, lr
 80003c4:	fb0e 3312 	mls	r3, lr, r2, r3
 80003c8:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 80003cc:	fb02 f404 	mul.w	r4, r2, r4
 80003d0:	429c      	cmp	r4, r3
 80003d2:	d907      	bls.n	80003e4 <__udivmoddi4+0x144>
 80003d4:	18fb      	adds	r3, r7, r3
 80003d6:	f102 30ff 	add.w	r0, r2, #4294967295
 80003da:	d202      	bcs.n	80003e2 <__udivmoddi4+0x142>
 80003dc:	429c      	cmp	r4, r3
 80003de:	f200 80ca 	bhi.w	8000576 <__udivmoddi4+0x2d6>
 80003e2:	4602      	mov	r2, r0
 80003e4:	1b1b      	subs	r3, r3, r4
 80003e6:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 80003ea:	e7a5      	b.n	8000338 <__udivmoddi4+0x98>
 80003ec:	f1c1 0620 	rsb	r6, r1, #32
 80003f0:	408b      	lsls	r3, r1
 80003f2:	fa22 f706 	lsr.w	r7, r2, r6
 80003f6:	431f      	orrs	r7, r3
 80003f8:	fa0e f401 	lsl.w	r4, lr, r1
 80003fc:	fa20 f306 	lsr.w	r3, r0, r6
 8000400:	fa2e fe06 	lsr.w	lr, lr, r6
 8000404:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000408:	4323      	orrs	r3, r4
 800040a:	fa00 f801 	lsl.w	r8, r0, r1
 800040e:	fa1f fc87 	uxth.w	ip, r7
 8000412:	fbbe f0f9 	udiv	r0, lr, r9
 8000416:	0c1c      	lsrs	r4, r3, #16
 8000418:	fb09 ee10 	mls	lr, r9, r0, lr
 800041c:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000420:	fb00 fe0c 	mul.w	lr, r0, ip
 8000424:	45a6      	cmp	lr, r4
 8000426:	fa02 f201 	lsl.w	r2, r2, r1
 800042a:	d909      	bls.n	8000440 <__udivmoddi4+0x1a0>
 800042c:	193c      	adds	r4, r7, r4
 800042e:	f100 3aff 	add.w	sl, r0, #4294967295
 8000432:	f080 809c 	bcs.w	800056e <__udivmoddi4+0x2ce>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f240 8099 	bls.w	800056e <__udivmoddi4+0x2ce>
 800043c:	3802      	subs	r0, #2
 800043e:	443c      	add	r4, r7
 8000440:	eba4 040e 	sub.w	r4, r4, lr
 8000444:	fa1f fe83 	uxth.w	lr, r3
 8000448:	fbb4 f3f9 	udiv	r3, r4, r9
 800044c:	fb09 4413 	mls	r4, r9, r3, r4
 8000450:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000454:	fb03 fc0c 	mul.w	ip, r3, ip
 8000458:	45a4      	cmp	ip, r4
 800045a:	d908      	bls.n	800046e <__udivmoddi4+0x1ce>
 800045c:	193c      	adds	r4, r7, r4
 800045e:	f103 3eff 	add.w	lr, r3, #4294967295
 8000462:	f080 8082 	bcs.w	800056a <__udivmoddi4+0x2ca>
 8000466:	45a4      	cmp	ip, r4
 8000468:	d97f      	bls.n	800056a <__udivmoddi4+0x2ca>
 800046a:	3b02      	subs	r3, #2
 800046c:	443c      	add	r4, r7
 800046e:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000472:	eba4 040c 	sub.w	r4, r4, ip
 8000476:	fba0 ec02 	umull	lr, ip, r0, r2
 800047a:	4564      	cmp	r4, ip
 800047c:	4673      	mov	r3, lr
 800047e:	46e1      	mov	r9, ip
 8000480:	d362      	bcc.n	8000548 <__udivmoddi4+0x2a8>
 8000482:	d05f      	beq.n	8000544 <__udivmoddi4+0x2a4>
 8000484:	b15d      	cbz	r5, 800049e <__udivmoddi4+0x1fe>
 8000486:	ebb8 0203 	subs.w	r2, r8, r3
 800048a:	eb64 0409 	sbc.w	r4, r4, r9
 800048e:	fa04 f606 	lsl.w	r6, r4, r6
 8000492:	fa22 f301 	lsr.w	r3, r2, r1
 8000496:	431e      	orrs	r6, r3
 8000498:	40cc      	lsrs	r4, r1
 800049a:	e9c5 6400 	strd	r6, r4, [r5]
 800049e:	2100      	movs	r1, #0
 80004a0:	e74f      	b.n	8000342 <__udivmoddi4+0xa2>
 80004a2:	fbb1 fcf2 	udiv	ip, r1, r2
 80004a6:	0c01      	lsrs	r1, r0, #16
 80004a8:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 80004ac:	b280      	uxth	r0, r0
 80004ae:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 80004b2:	463b      	mov	r3, r7
 80004b4:	4638      	mov	r0, r7
 80004b6:	463c      	mov	r4, r7
 80004b8:	46b8      	mov	r8, r7
 80004ba:	46be      	mov	lr, r7
 80004bc:	2620      	movs	r6, #32
 80004be:	fbb1 f1f7 	udiv	r1, r1, r7
 80004c2:	eba2 0208 	sub.w	r2, r2, r8
 80004c6:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 80004ca:	e766      	b.n	800039a <__udivmoddi4+0xfa>
 80004cc:	4601      	mov	r1, r0
 80004ce:	e718      	b.n	8000302 <__udivmoddi4+0x62>
 80004d0:	4610      	mov	r0, r2
 80004d2:	e72c      	b.n	800032e <__udivmoddi4+0x8e>
 80004d4:	f1c6 0220 	rsb	r2, r6, #32
 80004d8:	fa2e f302 	lsr.w	r3, lr, r2
 80004dc:	40b7      	lsls	r7, r6
 80004de:	40b1      	lsls	r1, r6
 80004e0:	fa20 f202 	lsr.w	r2, r0, r2
 80004e4:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80004e8:	430a      	orrs	r2, r1
 80004ea:	fbb3 f8fe 	udiv	r8, r3, lr
 80004ee:	b2bc      	uxth	r4, r7
 80004f0:	fb0e 3318 	mls	r3, lr, r8, r3
 80004f4:	0c11      	lsrs	r1, r2, #16
 80004f6:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80004fa:	fb08 f904 	mul.w	r9, r8, r4
 80004fe:	40b0      	lsls	r0, r6
 8000500:	4589      	cmp	r9, r1
 8000502:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000506:	b280      	uxth	r0, r0
 8000508:	d93e      	bls.n	8000588 <__udivmoddi4+0x2e8>
 800050a:	1879      	adds	r1, r7, r1
 800050c:	f108 3cff 	add.w	ip, r8, #4294967295
 8000510:	d201      	bcs.n	8000516 <__udivmoddi4+0x276>
 8000512:	4589      	cmp	r9, r1
 8000514:	d81f      	bhi.n	8000556 <__udivmoddi4+0x2b6>
 8000516:	eba1 0109 	sub.w	r1, r1, r9
 800051a:	fbb1 f9fe 	udiv	r9, r1, lr
 800051e:	fb09 f804 	mul.w	r8, r9, r4
 8000522:	fb0e 1119 	mls	r1, lr, r9, r1
 8000526:	b292      	uxth	r2, r2
 8000528:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 800052c:	4542      	cmp	r2, r8
 800052e:	d229      	bcs.n	8000584 <__udivmoddi4+0x2e4>
 8000530:	18ba      	adds	r2, r7, r2
 8000532:	f109 31ff 	add.w	r1, r9, #4294967295
 8000536:	d2c4      	bcs.n	80004c2 <__udivmoddi4+0x222>
 8000538:	4542      	cmp	r2, r8
 800053a:	d2c2      	bcs.n	80004c2 <__udivmoddi4+0x222>
 800053c:	f1a9 0102 	sub.w	r1, r9, #2
 8000540:	443a      	add	r2, r7
 8000542:	e7be      	b.n	80004c2 <__udivmoddi4+0x222>
 8000544:	45f0      	cmp	r8, lr
 8000546:	d29d      	bcs.n	8000484 <__udivmoddi4+0x1e4>
 8000548:	ebbe 0302 	subs.w	r3, lr, r2
 800054c:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000550:	3801      	subs	r0, #1
 8000552:	46e1      	mov	r9, ip
 8000554:	e796      	b.n	8000484 <__udivmoddi4+0x1e4>
 8000556:	eba7 0909 	sub.w	r9, r7, r9
 800055a:	4449      	add	r1, r9
 800055c:	f1a8 0c02 	sub.w	ip, r8, #2
 8000560:	fbb1 f9fe 	udiv	r9, r1, lr
 8000564:	fb09 f804 	mul.w	r8, r9, r4
 8000568:	e7db      	b.n	8000522 <__udivmoddi4+0x282>
 800056a:	4673      	mov	r3, lr
 800056c:	e77f      	b.n	800046e <__udivmoddi4+0x1ce>
 800056e:	4650      	mov	r0, sl
 8000570:	e766      	b.n	8000440 <__udivmoddi4+0x1a0>
 8000572:	4608      	mov	r0, r1
 8000574:	e6fd      	b.n	8000372 <__udivmoddi4+0xd2>
 8000576:	443b      	add	r3, r7
 8000578:	3a02      	subs	r2, #2
 800057a:	e733      	b.n	80003e4 <__udivmoddi4+0x144>
 800057c:	f1ac 0c02 	sub.w	ip, ip, #2
 8000580:	443b      	add	r3, r7
 8000582:	e71c      	b.n	80003be <__udivmoddi4+0x11e>
 8000584:	4649      	mov	r1, r9
 8000586:	e79c      	b.n	80004c2 <__udivmoddi4+0x222>
 8000588:	eba1 0109 	sub.w	r1, r1, r9
 800058c:	46c4      	mov	ip, r8
 800058e:	fbb1 f9fe 	udiv	r9, r1, lr
 8000592:	fb09 f804 	mul.w	r8, r9, r4
 8000596:	e7c4      	b.n	8000522 <__udivmoddi4+0x282>

08000598 <__aeabi_idiv0>:
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop

0800059c <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;  // 新增CAN2句柄定义

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 800059c:	b580      	push	{r7, lr}
 800059e:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80005a0:	4b17      	ldr	r3, [pc, #92]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a2:	4a18      	ldr	r2, [pc, #96]	@ (8000604 <MX_CAN1_Init+0x68>)
 80005a4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 6;  // 修改为6，实现500Kbps波特率
 80005a6:	4b16      	ldr	r3, [pc, #88]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005a8:	2206      	movs	r2, #6
 80005aa:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80005ac:	4b14      	ldr	r3, [pc, #80]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ae:	2200      	movs	r2, #0
 80005b0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80005b2:	4b13      	ldr	r3, [pc, #76]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005b4:	2200      	movs	r2, #0
 80005b6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_10TQ;  // 时间段1：10个时间量子，采样点78.6%
 80005b8:	4b11      	ldr	r3, [pc, #68]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ba:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 80005be:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_3TQ;   // 时间段2：3个时间量子，与CAN2保持一致
 80005c0:	4b0f      	ldr	r3, [pc, #60]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005c2:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 80005c6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80005c8:	4b0d      	ldr	r3, [pc, #52]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ca:	2200      	movs	r2, #0
 80005cc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80005ce:	4b0c      	ldr	r3, [pc, #48]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d0:	2200      	movs	r2, #0
 80005d2:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 80005d4:	4b0a      	ldr	r3, [pc, #40]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005d6:	2200      	movs	r2, #0
 80005d8:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 80005da:	4b09      	ldr	r3, [pc, #36]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005dc:	2200      	movs	r2, #0
 80005de:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 80005e0:	4b07      	ldr	r3, [pc, #28]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e2:	2200      	movs	r2, #0
 80005e4:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 80005e6:	4b06      	ldr	r3, [pc, #24]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 80005ec:	4804      	ldr	r0, [pc, #16]	@ (8000600 <MX_CAN1_Init+0x64>)
 80005ee:	f001 fd9d 	bl	800212c <HAL_CAN_Init>
 80005f2:	4603      	mov	r3, r0
 80005f4:	2b00      	cmp	r3, #0
 80005f6:	d001      	beq.n	80005fc <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 80005f8:	f001 f9a2 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 80005fc:	bf00      	nop
 80005fe:	bd80      	pop	{r7, pc}
 8000600:	20000088 	.word	0x20000088
 8000604:	40006400 	.word	0x40006400

08000608 <MX_CAN2_Init>:

/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000608:	b580      	push	{r7, lr}
 800060a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800060c:	4b18      	ldr	r3, [pc, #96]	@ (8000670 <MX_CAN2_Init+0x68>)
 800060e:	4a19      	ldr	r2, [pc, #100]	@ (8000674 <MX_CAN2_Init+0x6c>)
 8000610:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 6;  // 波特率预分频器，实现500Kbps
 8000612:	4b17      	ldr	r3, [pc, #92]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000614:	2206      	movs	r2, #6
 8000616:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_SILENT;  // 静默监听模式，只接收不发送任何信号
 8000618:	4b15      	ldr	r3, [pc, #84]	@ (8000670 <MX_CAN2_Init+0x68>)
 800061a:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 800061e:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 8000620:	4b13      	ldr	r3, [pc, #76]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000622:	2200      	movs	r2, #0
 8000624:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_10TQ;  // 时间段1：10个时间量子，采样点78.6%
 8000626:	4b12      	ldr	r3, [pc, #72]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000628:	f44f 2210 	mov.w	r2, #589824	@ 0x90000
 800062c:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_3TQ;   // 时间段2：3个时间量子，更标准的配置
 800062e:	4b10      	ldr	r3, [pc, #64]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000630:	f44f 1200 	mov.w	r2, #2097152	@ 0x200000
 8000634:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000636:	4b0e      	ldr	r3, [pc, #56]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000638:	2200      	movs	r2, #0
 800063a:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800063c:	4b0c      	ldr	r3, [pc, #48]	@ (8000670 <MX_CAN2_Init+0x68>)
 800063e:	2200      	movs	r2, #0
 8000640:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000642:	4b0b      	ldr	r3, [pc, #44]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000644:	2200      	movs	r2, #0
 8000646:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000648:	4b09      	ldr	r3, [pc, #36]	@ (8000670 <MX_CAN2_Init+0x68>)
 800064a:	2200      	movs	r2, #0
 800064c:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800064e:	4b08      	ldr	r3, [pc, #32]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000650:	2200      	movs	r2, #0
 8000652:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000654:	4b06      	ldr	r3, [pc, #24]	@ (8000670 <MX_CAN2_Init+0x68>)
 8000656:	2200      	movs	r2, #0
 8000658:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 800065a:	4805      	ldr	r0, [pc, #20]	@ (8000670 <MX_CAN2_Init+0x68>)
 800065c:	f001 fd66 	bl	800212c <HAL_CAN_Init>
 8000660:	4603      	mov	r3, r0
 8000662:	2b00      	cmp	r3, #0
 8000664:	d001      	beq.n	800066a <MX_CAN2_Init+0x62>
  {
    Error_Handler();
 8000666:	f001 f96b 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 800066a:	bf00      	nop
 800066c:	bd80      	pop	{r7, pc}
 800066e:	bf00      	nop
 8000670:	200000b0 	.word	0x200000b0
 8000674:	40006800 	.word	0x40006800

08000678 <__NVIC_GetEnableIRQ>:
  \return             0  Interrupt is not enabled.
  \return             1  Interrupt is enabled.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE uint32_t __NVIC_GetEnableIRQ(IRQn_Type IRQn)
{
 8000678:	b480      	push	{r7}
 800067a:	b083      	sub	sp, #12
 800067c:	af00      	add	r7, sp, #0
 800067e:	4603      	mov	r3, r0
 8000680:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000682:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000686:	2b00      	cmp	r3, #0
 8000688:	db0d      	blt.n	80006a6 <__NVIC_GetEnableIRQ+0x2e>
  {
    return((uint32_t)(((NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] & (1UL << (((uint32_t)IRQn) & 0x1FUL))) != 0UL) ? 1UL : 0UL));
 800068a:	4a0a      	ldr	r2, [pc, #40]	@ (80006b4 <__NVIC_GetEnableIRQ+0x3c>)
 800068c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000690:	095b      	lsrs	r3, r3, #5
 8000692:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
 8000696:	79fb      	ldrb	r3, [r7, #7]
 8000698:	f003 031f 	and.w	r3, r3, #31
 800069c:	fa22 f303 	lsr.w	r3, r2, r3
 80006a0:	f003 0301 	and.w	r3, r3, #1
 80006a4:	e000      	b.n	80006a8 <__NVIC_GetEnableIRQ+0x30>
  }
  else
  {
    return(0U);
 80006a6:	2300      	movs	r3, #0
  }
}
 80006a8:	4618      	mov	r0, r3
 80006aa:	370c      	adds	r7, #12
 80006ac:	46bd      	mov	sp, r7
 80006ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006b2:	4770      	bx	lr
 80006b4:	e000e100 	.word	0xe000e100

080006b8 <CAN2_Demo_Init>:
/**
  * @brief  CAN2演示模块初始化
  * @retval HAL状态
  */
HAL_StatusTypeDef CAN2_Demo_Init(void)
{
 80006b8:	b580      	push	{r7, lr}
 80006ba:	b082      	sub	sp, #8
 80006bc:	af00      	add	r7, sp, #0
    
    // printf("[CAN2-INIT] Starting CAN2 Demo initialization...\r\n");
    
    // 重要：必须先配置CAN1的过滤器，因为CAN2依赖于CAN1
    // CAN2过滤器配置 - 接收所有消息（修复版本）
    can2_filter_config.FilterBank = 14;  // CAN2使用过滤器组14-27
 80006be:	4b4d      	ldr	r3, [pc, #308]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006c0:	220e      	movs	r2, #14
 80006c2:	615a      	str	r2, [r3, #20]
    can2_filter_config.FilterMode = CAN_FILTERMODE_IDMASK;
 80006c4:	4b4b      	ldr	r3, [pc, #300]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006c6:	2200      	movs	r2, #0
 80006c8:	619a      	str	r2, [r3, #24]
    can2_filter_config.FilterScale = CAN_FILTERSCALE_32BIT;
 80006ca:	4b4a      	ldr	r3, [pc, #296]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006cc:	2201      	movs	r2, #1
 80006ce:	61da      	str	r2, [r3, #28]
    can2_filter_config.FilterIdHigh = 0x0000;
 80006d0:	4b48      	ldr	r3, [pc, #288]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006d2:	2200      	movs	r2, #0
 80006d4:	601a      	str	r2, [r3, #0]
    can2_filter_config.FilterIdLow = 0x0000;
 80006d6:	4b47      	ldr	r3, [pc, #284]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006d8:	2200      	movs	r2, #0
 80006da:	605a      	str	r2, [r3, #4]
    can2_filter_config.FilterMaskIdHigh = 0x0000;  // 掩码为0，接收所有ID
 80006dc:	4b45      	ldr	r3, [pc, #276]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006de:	2200      	movs	r2, #0
 80006e0:	609a      	str	r2, [r3, #8]
    can2_filter_config.FilterMaskIdLow = 0x0000;
 80006e2:	4b44      	ldr	r3, [pc, #272]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006e4:	2200      	movs	r2, #0
 80006e6:	60da      	str	r2, [r3, #12]
    can2_filter_config.FilterFIFOAssignment = CAN_RX_FIFO0;
 80006e8:	4b42      	ldr	r3, [pc, #264]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006ea:	2200      	movs	r2, #0
 80006ec:	611a      	str	r2, [r3, #16]
    can2_filter_config.FilterActivation = ENABLE;
 80006ee:	4b41      	ldr	r3, [pc, #260]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006f0:	2201      	movs	r2, #1
 80006f2:	621a      	str	r2, [r3, #32]
    can2_filter_config.SlaveStartFilterBank = 14;  // 关键：CAN2从过滤器组14开始
 80006f4:	4b3f      	ldr	r3, [pc, #252]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006f6:	220e      	movs	r2, #14
 80006f8:	625a      	str	r2, [r3, #36]	@ 0x24
    
    // 临时启用调试信息以验证过滤器配置
    printf("[CAN2-DEBUG] Configuring CAN2 filter - Bank:%d, FIFO:%d\r\n", 
 80006fa:	4b3e      	ldr	r3, [pc, #248]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 80006fc:	695b      	ldr	r3, [r3, #20]
 80006fe:	4a3d      	ldr	r2, [pc, #244]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 8000700:	6912      	ldr	r2, [r2, #16]
 8000702:	4619      	mov	r1, r3
 8000704:	483c      	ldr	r0, [pc, #240]	@ (80007f8 <CAN2_Demo_Init+0x140>)
 8000706:	f007 ff19 	bl	800853c <iprintf>
           can2_filter_config.FilterBank, can2_filter_config.FilterFIFOAssignment);
    
    // 重要：必须使用CAN1句柄来配置CAN2过滤器（STM32硬件特性）
    status = HAL_CAN_ConfigFilter(&hcan1, &can2_filter_config);
 800070a:	493a      	ldr	r1, [pc, #232]	@ (80007f4 <CAN2_Demo_Init+0x13c>)
 800070c:	483b      	ldr	r0, [pc, #236]	@ (80007fc <CAN2_Demo_Init+0x144>)
 800070e:	f001 fe09 	bl	8002324 <HAL_CAN_ConfigFilter>
 8000712:	4603      	mov	r3, r0
 8000714:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8000716:	79fb      	ldrb	r3, [r7, #7]
 8000718:	2b00      	cmp	r3, #0
 800071a:	d006      	beq.n	800072a <CAN2_Demo_Init+0x72>
        printf("[CAN2-ERROR] Filter configuration failed: %d\r\n", status);
 800071c:	79fb      	ldrb	r3, [r7, #7]
 800071e:	4619      	mov	r1, r3
 8000720:	4837      	ldr	r0, [pc, #220]	@ (8000800 <CAN2_Demo_Init+0x148>)
 8000722:	f007 ff0b 	bl	800853c <iprintf>
        return status;
 8000726:	79fb      	ldrb	r3, [r7, #7]
 8000728:	e05f      	b.n	80007ea <CAN2_Demo_Init+0x132>
    }
    printf("[CAN2-DEBUG] Filter configured successfully\r\n");
 800072a:	4836      	ldr	r0, [pc, #216]	@ (8000804 <CAN2_Demo_Init+0x14c>)
 800072c:	f007 ff6e 	bl	800860c <puts>
    
    // 启动CAN2
    status = HAL_CAN_Start(&hcan2);
 8000730:	4835      	ldr	r0, [pc, #212]	@ (8000808 <CAN2_Demo_Init+0x150>)
 8000732:	f001 fed5 	bl	80024e0 <HAL_CAN_Start>
 8000736:	4603      	mov	r3, r0
 8000738:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 800073a:	79fb      	ldrb	r3, [r7, #7]
 800073c:	2b00      	cmp	r3, #0
 800073e:	d006      	beq.n	800074e <CAN2_Demo_Init+0x96>
        printf("[CAN2-ERROR] CAN2 start failed: %d\r\n", status);
 8000740:	79fb      	ldrb	r3, [r7, #7]
 8000742:	4619      	mov	r1, r3
 8000744:	4831      	ldr	r0, [pc, #196]	@ (800080c <CAN2_Demo_Init+0x154>)
 8000746:	f007 fef9 	bl	800853c <iprintf>
        return status;
 800074a:	79fb      	ldrb	r3, [r7, #7]
 800074c:	e04d      	b.n	80007ea <CAN2_Demo_Init+0x132>
    }
    printf("[CAN2-DEBUG] CAN2 started successfully\r\n");
 800074e:	4830      	ldr	r0, [pc, #192]	@ (8000810 <CAN2_Demo_Init+0x158>)
 8000750:	f007 ff5c 	bl	800860c <puts>
    
    // 激活CAN2接收中断
    status = HAL_CAN_ActivateNotification(&hcan2, CAN_IT_RX_FIFO0_MSG_PENDING);
 8000754:	2102      	movs	r1, #2
 8000756:	482c      	ldr	r0, [pc, #176]	@ (8000808 <CAN2_Demo_Init+0x150>)
 8000758:	f002 f8f8 	bl	800294c <HAL_CAN_ActivateNotification>
 800075c:	4603      	mov	r3, r0
 800075e:	71fb      	strb	r3, [r7, #7]
    if (status != HAL_OK) {
 8000760:	79fb      	ldrb	r3, [r7, #7]
 8000762:	2b00      	cmp	r3, #0
 8000764:	d006      	beq.n	8000774 <CAN2_Demo_Init+0xbc>
        printf("[CAN2-ERROR] RX interrupt activation failed: %d\r\n", status);
 8000766:	79fb      	ldrb	r3, [r7, #7]
 8000768:	4619      	mov	r1, r3
 800076a:	482a      	ldr	r0, [pc, #168]	@ (8000814 <CAN2_Demo_Init+0x15c>)
 800076c:	f007 fee6 	bl	800853c <iprintf>
        return status;
 8000770:	79fb      	ldrb	r3, [r7, #7]
 8000772:	e03a      	b.n	80007ea <CAN2_Demo_Init+0x132>
    }
    printf("[CAN2-DEBUG] RX interrupt activated successfully\r\n");
 8000774:	4828      	ldr	r0, [pc, #160]	@ (8000818 <CAN2_Demo_Init+0x160>)
 8000776:	f007 ff49 	bl	800860c <puts>
    
    // 检查NVIC中断是否启用
    if (NVIC_GetEnableIRQ(CAN2_RX0_IRQn)) {
 800077a:	2040      	movs	r0, #64	@ 0x40
 800077c:	f7ff ff7c 	bl	8000678 <__NVIC_GetEnableIRQ>
 8000780:	4603      	mov	r3, r0
 8000782:	2b00      	cmp	r3, #0
 8000784:	d003      	beq.n	800078e <CAN2_Demo_Init+0xd6>
        printf("[CAN2-DEBUG] NVIC CAN2_RX0 interrupt is enabled\r\n");
 8000786:	4825      	ldr	r0, [pc, #148]	@ (800081c <CAN2_Demo_Init+0x164>)
 8000788:	f007 ff40 	bl	800860c <puts>
 800078c:	e002      	b.n	8000794 <CAN2_Demo_Init+0xdc>
    } else {
        printf("[CAN2-ERROR] NVIC CAN2_RX0 interrupt is NOT enabled\r\n");
 800078e:	4824      	ldr	r0, [pc, #144]	@ (8000820 <CAN2_Demo_Init+0x168>)
 8000790:	f007 ff3c 	bl	800860c <puts>
    }
    
    // 检查CAN2寄存器状态
    printf("[CAN2-DEBUG] CAN2->IER = 0x%08lX\r\n", hcan2.Instance->IER);
 8000794:	4b1c      	ldr	r3, [pc, #112]	@ (8000808 <CAN2_Demo_Init+0x150>)
 8000796:	681b      	ldr	r3, [r3, #0]
 8000798:	695b      	ldr	r3, [r3, #20]
 800079a:	4619      	mov	r1, r3
 800079c:	4821      	ldr	r0, [pc, #132]	@ (8000824 <CAN2_Demo_Init+0x16c>)
 800079e:	f007 fecd 	bl	800853c <iprintf>
    printf("[CAN2-DEBUG] CAN2->MSR = 0x%08lX\r\n", hcan2.Instance->MSR);
 80007a2:	4b19      	ldr	r3, [pc, #100]	@ (8000808 <CAN2_Demo_Init+0x150>)
 80007a4:	681b      	ldr	r3, [r3, #0]
 80007a6:	685b      	ldr	r3, [r3, #4]
 80007a8:	4619      	mov	r1, r3
 80007aa:	481f      	ldr	r0, [pc, #124]	@ (8000828 <CAN2_Demo_Init+0x170>)
 80007ac:	f007 fec6 	bl	800853c <iprintf>
    printf("[CAN2-DEBUG] CAN2->ESR = 0x%08lX\r\n", hcan2.Instance->ESR);
 80007b0:	4b15      	ldr	r3, [pc, #84]	@ (8000808 <CAN2_Demo_Init+0x150>)
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	699b      	ldr	r3, [r3, #24]
 80007b6:	4619      	mov	r1, r3
 80007b8:	481c      	ldr	r0, [pc, #112]	@ (800082c <CAN2_Demo_Init+0x174>)
 80007ba:	f007 febf 	bl	800853c <iprintf>
    
    // 初始化统计信息
    memset(&can2_stats, 0, sizeof(can2_stats));
 80007be:	2240      	movs	r2, #64	@ 0x40
 80007c0:	2100      	movs	r1, #0
 80007c2:	481b      	ldr	r0, [pc, #108]	@ (8000830 <CAN2_Demo_Init+0x178>)
 80007c4:	f008 f802 	bl	80087cc <memset>
    can2_stats.initialized = 1;
 80007c8:	4b19      	ldr	r3, [pc, #100]	@ (8000830 <CAN2_Demo_Init+0x178>)
 80007ca:	2201      	movs	r2, #1
 80007cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    //        can2_filter_config.FilterBank, can2_filter_config.FilterFIFOAssignment);
    // printf("[CAN2-INIT] Bitrate: 500Kbps, Sample Point: 78.6%%\r\n");
    // printf("[CAN2-INIT] Prescaler: 6, TimeSeg1: 10TQ, TimeSeg2: 3TQ\r\n");
    
    // 打印CAN2状态信息
    uint32_t can_state = HAL_CAN_GetState(&hcan2);
 80007d0:	480d      	ldr	r0, [pc, #52]	@ (8000808 <CAN2_Demo_Init+0x150>)
 80007d2:	f002 fae8 	bl	8002da6 <HAL_CAN_GetState>
 80007d6:	4603      	mov	r3, r0
 80007d8:	603b      	str	r3, [r7, #0]
    printf("[CAN2-DEBUG] CAN2 State: %lu\r\n", can_state);
 80007da:	6839      	ldr	r1, [r7, #0]
 80007dc:	4815      	ldr	r0, [pc, #84]	@ (8000834 <CAN2_Demo_Init+0x17c>)
 80007de:	f007 fead 	bl	800853c <iprintf>
    printf("[CAN2-DEBUG] Ready to receive CAN1 messages (0x100-0x500)\r\n");
 80007e2:	4815      	ldr	r0, [pc, #84]	@ (8000838 <CAN2_Demo_Init+0x180>)
 80007e4:	f007 ff12 	bl	800860c <puts>
    
    return HAL_OK;
 80007e8:	2300      	movs	r3, #0
}
 80007ea:	4618      	mov	r0, r3
 80007ec:	3708      	adds	r7, #8
 80007ee:	46bd      	mov	sp, r7
 80007f0:	bd80      	pop	{r7, pc}
 80007f2:	bf00      	nop
 80007f4:	20000118 	.word	0x20000118
 80007f8:	080093c0 	.word	0x080093c0
 80007fc:	20000088 	.word	0x20000088
 8000800:	080093fc 	.word	0x080093fc
 8000804:	0800942c 	.word	0x0800942c
 8000808:	200000b0 	.word	0x200000b0
 800080c:	0800945c 	.word	0x0800945c
 8000810:	08009484 	.word	0x08009484
 8000814:	080094ac 	.word	0x080094ac
 8000818:	080094e0 	.word	0x080094e0
 800081c:	08009514 	.word	0x08009514
 8000820:	08009548 	.word	0x08009548
 8000824:	08009580 	.word	0x08009580
 8000828:	080095a4 	.word	0x080095a4
 800082c:	080095c8 	.word	0x080095c8
 8000830:	200000d8 	.word	0x200000d8
 8000834:	080095ec 	.word	0x080095ec
 8000838:	0800960c 	.word	0x0800960c

0800083c <CAN2_Demo_Task>:
  * @brief  CAN2纯监听任务函数 - 只接收不发送
  * @param  argument: 任务参数
  * @retval None
  */
void CAN2_Demo_Task(void *argument)
{
 800083c:	b580      	push	{r7, lr}
 800083e:	b084      	sub	sp, #16
 8000840:	af00      	add	r7, sp, #0
 8000842:	6078      	str	r0, [r7, #4]
    uint32_t current_time;
    
    printf("[CAN2-TASK] CAN2 Silent Listener task started\r\n");
 8000844:	4806      	ldr	r0, [pc, #24]	@ (8000860 <CAN2_Demo_Task+0x24>)
 8000846:	f007 fee1 	bl	800860c <puts>
    printf("[CAN2-TASK] CAN2 configured in SILENT mode - receive only\r\n");
 800084a:	4806      	ldr	r0, [pc, #24]	@ (8000864 <CAN2_Demo_Task+0x28>)
 800084c:	f007 fede 	bl	800860c <puts>
    
    for(;;) {
        current_time = HAL_GetTick();
 8000850:	f001 fc60 	bl	8002114 <HAL_GetTick>
 8000854:	60f8      	str	r0, [r7, #12]
        
        // 静默运行，只在接收到数据时打印
        // 移除所有状态报告和诊断信息，专注于数据接收
        
        // 任务延时
        osDelay(100);  // 100ms
 8000856:	2064      	movs	r0, #100	@ 0x64
 8000858:	f005 f830 	bl	80058bc <osDelay>
    for(;;) {
 800085c:	bf00      	nop
 800085e:	e7f7      	b.n	8000850 <CAN2_Demo_Task+0x14>
 8000860:	08009648 	.word	0x08009648
 8000864:	08009678 	.word	0x08009678

08000868 <CAN2_Demo_ProcessReceivedMessage>:
  * @param  rx_header: 接收头指针
  * @param  rx_data: 接收数据指针
  * @retval None
  */
void CAN2_Demo_ProcessReceivedMessage(CAN_RxHeaderTypeDef *rx_header, uint8_t *rx_data)
{
 8000868:	b580      	push	{r7, lr}
 800086a:	b084      	sub	sp, #16
 800086c:	af00      	add	r7, sp, #0
 800086e:	6078      	str	r0, [r7, #4]
 8000870:	6039      	str	r1, [r7, #0]
    // 更新统计信息
    can2_stats.total_received++;
 8000872:	4b16      	ldr	r3, [pc, #88]	@ (80008cc <CAN2_Demo_ProcessReceivedMessage+0x64>)
 8000874:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8000876:	3301      	adds	r3, #1
 8000878:	4a14      	ldr	r2, [pc, #80]	@ (80008cc <CAN2_Demo_ProcessReceivedMessage+0x64>)
 800087a:	6293      	str	r3, [r2, #40]	@ 0x28
    can2_stats.last_rx_time = HAL_GetTick();
 800087c:	f001 fc4a 	bl	8002114 <HAL_GetTick>
 8000880:	4603      	mov	r3, r0
 8000882:	4a12      	ldr	r2, [pc, #72]	@ (80008cc <CAN2_Demo_ProcessReceivedMessage+0x64>)
 8000884:	6393      	str	r3, [r2, #56]	@ 0x38
    
    // 只打印接收到的CAN数据
    printf("CAN2-RX ID:0x%03lX DLC:%lu Data:", rx_header->StdId, rx_header->DLC);
 8000886:	687b      	ldr	r3, [r7, #4]
 8000888:	6819      	ldr	r1, [r3, #0]
 800088a:	687b      	ldr	r3, [r7, #4]
 800088c:	691b      	ldr	r3, [r3, #16]
 800088e:	461a      	mov	r2, r3
 8000890:	480f      	ldr	r0, [pc, #60]	@ (80008d0 <CAN2_Demo_ProcessReceivedMessage+0x68>)
 8000892:	f007 fe53 	bl	800853c <iprintf>
    for (int i = 0; i < rx_header->DLC; i++) {
 8000896:	2300      	movs	r3, #0
 8000898:	60fb      	str	r3, [r7, #12]
 800089a:	e00a      	b.n	80008b2 <CAN2_Demo_ProcessReceivedMessage+0x4a>
        printf(" %02X", rx_data[i]);
 800089c:	68fb      	ldr	r3, [r7, #12]
 800089e:	683a      	ldr	r2, [r7, #0]
 80008a0:	4413      	add	r3, r2
 80008a2:	781b      	ldrb	r3, [r3, #0]
 80008a4:	4619      	mov	r1, r3
 80008a6:	480b      	ldr	r0, [pc, #44]	@ (80008d4 <CAN2_Demo_ProcessReceivedMessage+0x6c>)
 80008a8:	f007 fe48 	bl	800853c <iprintf>
    for (int i = 0; i < rx_header->DLC; i++) {
 80008ac:	68fb      	ldr	r3, [r7, #12]
 80008ae:	3301      	adds	r3, #1
 80008b0:	60fb      	str	r3, [r7, #12]
 80008b2:	687b      	ldr	r3, [r7, #4]
 80008b4:	691a      	ldr	r2, [r3, #16]
 80008b6:	68fb      	ldr	r3, [r7, #12]
 80008b8:	429a      	cmp	r2, r3
 80008ba:	d8ef      	bhi.n	800089c <CAN2_Demo_ProcessReceivedMessage+0x34>
    }
    printf("\r\n");
 80008bc:	4806      	ldr	r0, [pc, #24]	@ (80008d8 <CAN2_Demo_ProcessReceivedMessage+0x70>)
 80008be:	f007 fea5 	bl	800860c <puts>
}
 80008c2:	bf00      	nop
 80008c4:	3710      	adds	r7, #16
 80008c6:	46bd      	mov	sp, r7
 80008c8:	bd80      	pop	{r7, pc}
 80008ca:	bf00      	nop
 80008cc:	200000d8 	.word	0x200000d8
 80008d0:	080096f0 	.word	0x080096f0
 80008d4:	08009714 	.word	0x08009714
 80008d8:	0800971c 	.word	0x0800971c

080008dc <CAN_SendToWCMCU>:
  * @param  data: 数据指针
  * @param  len: 数据长度
  * @retval HAL状态
  */
HAL_StatusTypeDef CAN_SendToWCMCU(uint32_t id, uint8_t* data, uint8_t len)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b086      	sub	sp, #24
 80008e0:	af00      	add	r7, sp, #0
 80008e2:	60f8      	str	r0, [r7, #12]
 80008e4:	60b9      	str	r1, [r7, #8]
 80008e6:	4613      	mov	r3, r2
 80008e8:	71fb      	strb	r3, [r7, #7]
    HAL_StatusTypeDef status;
    
    // 检查参数
    if (data == NULL || len > 8)
 80008ea:	68bb      	ldr	r3, [r7, #8]
 80008ec:	2b00      	cmp	r3, #0
 80008ee:	d002      	beq.n	80008f6 <CAN_SendToWCMCU+0x1a>
 80008f0:	79fb      	ldrb	r3, [r7, #7]
 80008f2:	2b08      	cmp	r3, #8
 80008f4:	d901      	bls.n	80008fa <CAN_SendToWCMCU+0x1e>
    {
        // CAN_DEBUG_PRINTF("发送参数错误\r\n");
        return HAL_ERROR;
 80008f6:	2301      	movs	r3, #1
 80008f8:	e02d      	b.n	8000956 <CAN_SendToWCMCU+0x7a>
    }
    
    // 配置发送头
    TxHeader.StdId = id;
 80008fa:	4a19      	ldr	r2, [pc, #100]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 80008fc:	68fb      	ldr	r3, [r7, #12]
 80008fe:	6013      	str	r3, [r2, #0]
    TxHeader.ExtId = 0x00;
 8000900:	4b17      	ldr	r3, [pc, #92]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 8000902:	2200      	movs	r2, #0
 8000904:	605a      	str	r2, [r3, #4]
    TxHeader.RTR = CAN_RTR_DATA;
 8000906:	4b16      	ldr	r3, [pc, #88]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 8000908:	2200      	movs	r2, #0
 800090a:	60da      	str	r2, [r3, #12]
    TxHeader.IDE = CAN_ID_STD;
 800090c:	4b14      	ldr	r3, [pc, #80]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 800090e:	2200      	movs	r2, #0
 8000910:	609a      	str	r2, [r3, #8]
    TxHeader.DLC = len;
 8000912:	79fb      	ldrb	r3, [r7, #7]
 8000914:	4a12      	ldr	r2, [pc, #72]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 8000916:	6113      	str	r3, [r2, #16]
    TxHeader.TransmitGlobalTime = DISABLE;
 8000918:	4b11      	ldr	r3, [pc, #68]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 800091a:	2200      	movs	r2, #0
 800091c:	751a      	strb	r2, [r3, #20]
    
    // 复制数据
    memcpy(TxData, data, len);
 800091e:	79fb      	ldrb	r3, [r7, #7]
 8000920:	461a      	mov	r2, r3
 8000922:	68b9      	ldr	r1, [r7, #8]
 8000924:	480f      	ldr	r0, [pc, #60]	@ (8000964 <CAN_SendToWCMCU+0x88>)
 8000926:	f008 f82a 	bl	800897e <memcpy>
    
    // 发送消息
    status = HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800092a:	4b0f      	ldr	r3, [pc, #60]	@ (8000968 <CAN_SendToWCMCU+0x8c>)
 800092c:	4a0d      	ldr	r2, [pc, #52]	@ (8000964 <CAN_SendToWCMCU+0x88>)
 800092e:	490c      	ldr	r1, [pc, #48]	@ (8000960 <CAN_SendToWCMCU+0x84>)
 8000930:	480e      	ldr	r0, [pc, #56]	@ (800096c <CAN_SendToWCMCU+0x90>)
 8000932:	f001 fe19 	bl	8002568 <HAL_CAN_AddTxMessage>
 8000936:	4603      	mov	r3, r0
 8000938:	75fb      	strb	r3, [r7, #23]
    
    if (status == HAL_OK)
 800093a:	7dfb      	ldrb	r3, [r7, #23]
 800093c:	2b00      	cmp	r3, #0
 800093e:	d107      	bne.n	8000950 <CAN_SendToWCMCU+0x74>
        // for (int i = 0; i < len && i < 8; i++) {
        //     printf("%02X ", data[i]);
        // }
        // printf("\r\n");
        
        CAN_UpdateTxStats();
 8000940:	f000 fb2c 	bl	8000f9c <CAN_UpdateTxStats>
        last_send_time = CAN_GET_TIMESTAMP();
 8000944:	f001 fbe6 	bl	8002114 <HAL_GetTick>
 8000948:	4603      	mov	r3, r0
 800094a:	4a09      	ldr	r2, [pc, #36]	@ (8000970 <CAN_SendToWCMCU+0x94>)
 800094c:	6013      	str	r3, [r2, #0]
 800094e:	e001      	b.n	8000954 <CAN_SendToWCMCU+0x78>
    }
    else
    {
        CAN_UpdateErrorStats();
 8000950:	f000 fb40 	bl	8000fd4 <CAN_UpdateErrorStats>
        // CAN_DEBUG_PRINTF("CAN消息发送失败: %d\r\n", status);
    }
    
    return status;
 8000954:	7dfb      	ldrb	r3, [r7, #23]
}
 8000956:	4618      	mov	r0, r3
 8000958:	3718      	adds	r7, #24
 800095a:	46bd      	mov	sp, r7
 800095c:	bd80      	pop	{r7, pc}
 800095e:	bf00      	nop
 8000960:	20000140 	.word	0x20000140
 8000964:	20000174 	.word	0x20000174
 8000968:	20000184 	.word	0x20000184
 800096c:	20000088 	.word	0x20000088
 8000970:	200001b0 	.word	0x200001b0

08000974 <CAN_SendDataResponse>:
  * @param  data: 响应数据
  * @param  len: 数据长度
  * @retval HAL状态
  */
HAL_StatusTypeDef CAN_SendDataResponse(uint8_t* data, uint8_t len)
{
 8000974:	b580      	push	{r7, lr}
 8000976:	b084      	sub	sp, #16
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
 800097c:	460b      	mov	r3, r1
 800097e:	70fb      	strb	r3, [r7, #3]
    uint8_t response_data[CAN_DATA_RESPONSE_LEN];
    
    // 检查长度
    if (len > CAN_DATA_RESPONSE_LEN)
 8000980:	78fb      	ldrb	r3, [r7, #3]
 8000982:	2b08      	cmp	r3, #8
 8000984:	d901      	bls.n	800098a <CAN_SendDataResponse+0x16>
    {
        len = CAN_DATA_RESPONSE_LEN;
 8000986:	2308      	movs	r3, #8
 8000988:	70fb      	strb	r3, [r7, #3]
    }
    
    // 复制数据
    memcpy(response_data, data, len);
 800098a:	78fa      	ldrb	r2, [r7, #3]
 800098c:	f107 0308 	add.w	r3, r7, #8
 8000990:	6879      	ldr	r1, [r7, #4]
 8000992:	4618      	mov	r0, r3
 8000994:	f007 fff3 	bl	800897e <memcpy>
    
    // 如果数据不足8字节，填充0
    if (len < CAN_DATA_RESPONSE_LEN)
 8000998:	78fb      	ldrb	r3, [r7, #3]
 800099a:	2b07      	cmp	r3, #7
 800099c:	d80a      	bhi.n	80009b4 <CAN_SendDataResponse+0x40>
    {
        memset(&response_data[len], 0, CAN_DATA_RESPONSE_LEN - len);
 800099e:	78fb      	ldrb	r3, [r7, #3]
 80009a0:	f107 0208 	add.w	r2, r7, #8
 80009a4:	18d0      	adds	r0, r2, r3
 80009a6:	78fb      	ldrb	r3, [r7, #3]
 80009a8:	f1c3 0308 	rsb	r3, r3, #8
 80009ac:	461a      	mov	r2, r3
 80009ae:	2100      	movs	r1, #0
 80009b0:	f007 ff0c 	bl	80087cc <memset>
    }
    
    can_stats.data_resp_count++;
 80009b4:	4b08      	ldr	r3, [pc, #32]	@ (80009d8 <CAN_SendDataResponse+0x64>)
 80009b6:	695b      	ldr	r3, [r3, #20]
 80009b8:	3301      	adds	r3, #1
 80009ba:	4a07      	ldr	r2, [pc, #28]	@ (80009d8 <CAN_SendDataResponse+0x64>)
 80009bc:	6153      	str	r3, [r2, #20]
    
    return CAN_SendToWCMCU(CAN_DATA_RESPONSE_ID, response_data, CAN_DATA_RESPONSE_LEN);
 80009be:	f107 0308 	add.w	r3, r7, #8
 80009c2:	2208      	movs	r2, #8
 80009c4:	4619      	mov	r1, r3
 80009c6:	f44f 7040 	mov.w	r0, #768	@ 0x300
 80009ca:	f7ff ff87 	bl	80008dc <CAN_SendToWCMCU>
 80009ce:	4603      	mov	r3, r0
}
 80009d0:	4618      	mov	r0, r3
 80009d2:	3710      	adds	r7, #16
 80009d4:	46bd      	mov	sp, r7
 80009d6:	bd80      	pop	{r7, pc}
 80009d8:	20000188 	.word	0x20000188

080009dc <CAN_ProcessReceivedMessage>:
  * @param  header: 接收头
  * @param  data: 接收数据
  * @retval None
  */
void CAN_ProcessReceivedMessage(CAN_RxHeaderTypeDef* header, uint8_t* data)
{
 80009dc:	b580      	push	{r7, lr}
 80009de:	b084      	sub	sp, #16
 80009e0:	af00      	add	r7, sp, #0
 80009e2:	6078      	str	r0, [r7, #4]
 80009e4:	6039      	str	r1, [r7, #0]
    CAN_MessageType_t msg_type;
    
    // 更新接收统计
    CAN_UpdateRxStats();
 80009e6:	f000 fae7 	bl	8000fb8 <CAN_UpdateRxStats>
    can_stats.last_rx_time = CAN_GET_TIMESTAMP();
 80009ea:	f001 fb93 	bl	8002114 <HAL_GetTick>
 80009ee:	4603      	mov	r3, r0
 80009f0:	4a31      	ldr	r2, [pc, #196]	@ (8000ab8 <CAN_ProcessReceivedMessage+0xdc>)
 80009f2:	61d3      	str	r3, [r2, #28]
    
    // 打印接收消息
    CAN_PrintMessage("接收", header->StdId, data, header->DLC);
 80009f4:	687b      	ldr	r3, [r7, #4]
 80009f6:	6819      	ldr	r1, [r3, #0]
 80009f8:	687b      	ldr	r3, [r7, #4]
 80009fa:	691b      	ldr	r3, [r3, #16]
 80009fc:	b2db      	uxtb	r3, r3
 80009fe:	683a      	ldr	r2, [r7, #0]
 8000a00:	482e      	ldr	r0, [pc, #184]	@ (8000abc <CAN_ProcessReceivedMessage+0xe0>)
 8000a02:	f000 fa9f 	bl	8000f44 <CAN_PrintMessage>
    
    // 获取消息类型
    msg_type = CAN_GetMessageType(header->StdId);
 8000a06:	687b      	ldr	r3, [r7, #4]
 8000a08:	681b      	ldr	r3, [r3, #0]
 8000a0a:	4618      	mov	r0, r3
 8000a0c:	f000 f85c 	bl	8000ac8 <CAN_GetMessageType>
 8000a10:	4603      	mov	r3, r0
 8000a12:	73fb      	strb	r3, [r7, #15]
    
    // 根据消息类型处理
    switch(msg_type)
 8000a14:	7bfb      	ldrb	r3, [r7, #15]
 8000a16:	2b05      	cmp	r3, #5
 8000a18:	d83e      	bhi.n	8000a98 <CAN_ProcessReceivedMessage+0xbc>
 8000a1a:	a201      	add	r2, pc, #4	@ (adr r2, 8000a20 <CAN_ProcessReceivedMessage+0x44>)
 8000a1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000a20:	08000a39 	.word	0x08000a39
 8000a24:	08000a49 	.word	0x08000a49
 8000a28:	08000a59 	.word	0x08000a59
 8000a2c:	08000a69 	.word	0x08000a69
 8000a30:	08000a79 	.word	0x08000a79
 8000a34:	08000a89 	.word	0x08000a89
    {
        case CAN_MSG_HEARTBEAT:
            CAN_ProcessHeartbeat(data, header->DLC);
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	691b      	ldr	r3, [r3, #16]
 8000a3c:	b2db      	uxtb	r3, r3
 8000a3e:	4619      	mov	r1, r3
 8000a40:	6838      	ldr	r0, [r7, #0]
 8000a42:	f000 f88d 	bl	8000b60 <CAN_ProcessHeartbeat>
            break;
 8000a46:	e028      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        case CAN_MSG_DATA_REQUEST:
            CAN_ProcessDataRequest(data, header->DLC);
 8000a48:	687b      	ldr	r3, [r7, #4]
 8000a4a:	691b      	ldr	r3, [r3, #16]
 8000a4c:	b2db      	uxtb	r3, r3
 8000a4e:	4619      	mov	r1, r3
 8000a50:	6838      	ldr	r0, [r7, #0]
 8000a52:	f000 f8b7 	bl	8000bc4 <CAN_ProcessDataRequest>
            break;
 8000a56:	e020      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        case CAN_MSG_DATA_RESPONSE:
            CAN_ProcessDataResponse(data, header->DLC);
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	691b      	ldr	r3, [r3, #16]
 8000a5c:	b2db      	uxtb	r3, r3
 8000a5e:	4619      	mov	r1, r3
 8000a60:	6838      	ldr	r0, [r7, #0]
 8000a62:	f000 f91b 	bl	8000c9c <CAN_ProcessDataResponse>
            break;
 8000a66:	e018      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        case CAN_MSG_STATUS:
            CAN_ProcessStatusMessage(data, header->DLC);
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	691b      	ldr	r3, [r3, #16]
 8000a6c:	b2db      	uxtb	r3, r3
 8000a6e:	4619      	mov	r1, r3
 8000a70:	6838      	ldr	r0, [r7, #0]
 8000a72:	f000 f973 	bl	8000d5c <CAN_ProcessStatusMessage>
            break;
 8000a76:	e010      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        case CAN_MSG_CONTROL:
            CAN_ProcessControlCommand(data, header->DLC);
 8000a78:	687b      	ldr	r3, [r7, #4]
 8000a7a:	691b      	ldr	r3, [r3, #16]
 8000a7c:	b2db      	uxtb	r3, r3
 8000a7e:	4619      	mov	r1, r3
 8000a80:	6838      	ldr	r0, [r7, #0]
 8000a82:	f000 f999 	bl	8000db8 <CAN_ProcessControlCommand>
            break;
 8000a86:	e008      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        case CAN_MSG_ERROR:
            CAN_ProcessErrorMessage(data, header->DLC);
 8000a88:	687b      	ldr	r3, [r7, #4]
 8000a8a:	691b      	ldr	r3, [r3, #16]
 8000a8c:	b2db      	uxtb	r3, r3
 8000a8e:	4619      	mov	r1, r3
 8000a90:	6838      	ldr	r0, [r7, #0]
 8000a92:	f000 f9d1 	bl	8000e38 <CAN_ProcessErrorMessage>
            break;
 8000a96:	e000      	b.n	8000a9a <CAN_ProcessReceivedMessage+0xbe>
            
        default:
            // CAN_DEBUG_PRINTF("收到未知消息类型: ID=0x%03X\r\n", (unsigned int)header->StdId);
            break;
 8000a98:	bf00      	nop
    }
    
    // 更新节点状态
    if (msg_type != CAN_MSG_UNKNOWN)
 8000a9a:	7bfb      	ldrb	r3, [r7, #15]
 8000a9c:	2b06      	cmp	r3, #6
 8000a9e:	d007      	beq.n	8000ab0 <CAN_ProcessReceivedMessage+0xd4>
    {
        wcmcu_status = CAN_NODE_ONLINE;
 8000aa0:	4b07      	ldr	r3, [pc, #28]	@ (8000ac0 <CAN_ProcessReceivedMessage+0xe4>)
 8000aa2:	2201      	movs	r2, #1
 8000aa4:	701a      	strb	r2, [r3, #0]
        last_heartbeat_time = CAN_GET_TIMESTAMP();
 8000aa6:	f001 fb35 	bl	8002114 <HAL_GetTick>
 8000aaa:	4603      	mov	r3, r0
 8000aac:	4a05      	ldr	r2, [pc, #20]	@ (8000ac4 <CAN_ProcessReceivedMessage+0xe8>)
 8000aae:	6013      	str	r3, [r2, #0]
    }
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000188 	.word	0x20000188
 8000abc:	08009c50 	.word	0x08009c50
 8000ac0:	200001a8 	.word	0x200001a8
 8000ac4:	200001ac 	.word	0x200001ac

08000ac8 <CAN_GetMessageType>:
  * @brief  获取消息类型
  * @param  id: 消息ID
  * @retval 消息类型
  */
CAN_MessageType_t CAN_GetMessageType(uint32_t id)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	b083      	sub	sp, #12
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
    switch(id)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000ad6:	d038      	beq.n	8000b4a <CAN_GetMessageType+0x82>
 8000ad8:	687b      	ldr	r3, [r7, #4]
 8000ada:	f5b3 6fc0 	cmp.w	r3, #1536	@ 0x600
 8000ade:	d838      	bhi.n	8000b52 <CAN_GetMessageType+0x8a>
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000ae6:	d02e      	beq.n	8000b46 <CAN_GetMessageType+0x7e>
 8000ae8:	687b      	ldr	r3, [r7, #4]
 8000aea:	f5b3 6fa0 	cmp.w	r3, #1280	@ 0x500
 8000aee:	d830      	bhi.n	8000b52 <CAN_GetMessageType+0x8a>
 8000af0:	687b      	ldr	r3, [r7, #4]
 8000af2:	f240 4256 	movw	r2, #1110	@ 0x456
 8000af6:	4293      	cmp	r3, r2
 8000af8:	d029      	beq.n	8000b4e <CAN_GetMessageType+0x86>
 8000afa:	687b      	ldr	r3, [r7, #4]
 8000afc:	f240 4256 	movw	r2, #1110	@ 0x456
 8000b00:	4293      	cmp	r3, r2
 8000b02:	d826      	bhi.n	8000b52 <CAN_GetMessageType+0x8a>
 8000b04:	687b      	ldr	r3, [r7, #4]
 8000b06:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b0a:	d01a      	beq.n	8000b42 <CAN_GetMessageType+0x7a>
 8000b0c:	687b      	ldr	r3, [r7, #4]
 8000b0e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8000b12:	d81e      	bhi.n	8000b52 <CAN_GetMessageType+0x8a>
 8000b14:	687b      	ldr	r3, [r7, #4]
 8000b16:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000b1a:	d010      	beq.n	8000b3e <CAN_GetMessageType+0x76>
 8000b1c:	687b      	ldr	r3, [r7, #4]
 8000b1e:	f5b3 7f40 	cmp.w	r3, #768	@ 0x300
 8000b22:	d816      	bhi.n	8000b52 <CAN_GetMessageType+0x8a>
 8000b24:	687b      	ldr	r3, [r7, #4]
 8000b26:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8000b2a:	d004      	beq.n	8000b36 <CAN_GetMessageType+0x6e>
 8000b2c:	687b      	ldr	r3, [r7, #4]
 8000b2e:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8000b32:	d002      	beq.n	8000b3a <CAN_GetMessageType+0x72>
 8000b34:	e00d      	b.n	8000b52 <CAN_GetMessageType+0x8a>
    {
        case CAN_HEARTBEAT_ID:
            return CAN_MSG_HEARTBEAT;
 8000b36:	2300      	movs	r3, #0
 8000b38:	e00c      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_DATA_REQUEST_ID:
            return CAN_MSG_DATA_REQUEST;
 8000b3a:	2301      	movs	r3, #1
 8000b3c:	e00a      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_DATA_RESPONSE_ID:
            return CAN_MSG_DATA_RESPONSE;
 8000b3e:	2302      	movs	r3, #2
 8000b40:	e008      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_STATUS_ID:
            return CAN_MSG_STATUS;
 8000b42:	2303      	movs	r3, #3
 8000b44:	e006      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_CONTROL_ID:
            return CAN_MSG_CONTROL;
 8000b46:	2304      	movs	r3, #4
 8000b48:	e004      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_ERROR_ID:
            return CAN_MSG_ERROR;
 8000b4a:	2305      	movs	r3, #5
 8000b4c:	e002      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        case CAN_WCMCU_TO_STM32_ID:
            return CAN_MSG_DATA_RESPONSE;  // WCMCU发送的数据当作响应处理
 8000b4e:	2302      	movs	r3, #2
 8000b50:	e000      	b.n	8000b54 <CAN_GetMessageType+0x8c>
        default:
            return CAN_MSG_UNKNOWN;
 8000b52:	2306      	movs	r3, #6
    }
}
 8000b54:	4618      	mov	r0, r3
 8000b56:	370c      	adds	r7, #12
 8000b58:	46bd      	mov	sp, r7
 8000b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b5e:	4770      	bx	lr

08000b60 <CAN_ProcessHeartbeat>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessHeartbeat(uint8_t* data, uint8_t len)
{
 8000b60:	b480      	push	{r7}
 8000b62:	b085      	sub	sp, #20
 8000b64:	af00      	add	r7, sp, #0
 8000b66:	6078      	str	r0, [r7, #4]
 8000b68:	460b      	mov	r3, r1
 8000b6a:	70fb      	strb	r3, [r7, #3]
    if (len >= 4)
 8000b6c:	78fb      	ldrb	r3, [r7, #3]
 8000b6e:	2b03      	cmp	r3, #3
 8000b70:	d920      	bls.n	8000bb4 <CAN_ProcessHeartbeat+0x54>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 8000b72:	687b      	ldr	r3, [r7, #4]
 8000b74:	781b      	ldrb	r3, [r3, #0]
 8000b76:	b21b      	sxth	r3, r3
 8000b78:	021b      	lsls	r3, r3, #8
 8000b7a:	b21a      	sxth	r2, r3
 8000b7c:	687b      	ldr	r3, [r7, #4]
 8000b7e:	3301      	adds	r3, #1
 8000b80:	781b      	ldrb	r3, [r3, #0]
 8000b82:	b21b      	sxth	r3, r3
 8000b84:	4313      	orrs	r3, r2
 8000b86:	b21b      	sxth	r3, r3
 8000b88:	81fb      	strh	r3, [r7, #14]
        uint16_t counter = (data[2] << 8) | data[3];
 8000b8a:	687b      	ldr	r3, [r7, #4]
 8000b8c:	3302      	adds	r3, #2
 8000b8e:	781b      	ldrb	r3, [r3, #0]
 8000b90:	b21b      	sxth	r3, r3
 8000b92:	021b      	lsls	r3, r3, #8
 8000b94:	b21a      	sxth	r2, r3
 8000b96:	687b      	ldr	r3, [r7, #4]
 8000b98:	3303      	adds	r3, #3
 8000b9a:	781b      	ldrb	r3, [r3, #0]
 8000b9c:	b21b      	sxth	r3, r3
 8000b9e:	4313      	orrs	r3, r2
 8000ba0:	b21b      	sxth	r3, r3
 8000ba2:	81bb      	strh	r3, [r7, #12]
        
        if (magic == CAN_HEARTBEAT_MAGIC)
 8000ba4:	89fb      	ldrh	r3, [r7, #14]
 8000ba6:	f64a 2255 	movw	r2, #43605	@ 0xaa55
 8000baa:	4293      	cmp	r3, r2
 8000bac:	d102      	bne.n	8000bb4 <CAN_ProcessHeartbeat+0x54>
        {
            // CAN_DEBUG_PRINTF("收到WCMCU心跳: 计数器=%d\r\n", counter);
            wcmcu_status = CAN_NODE_ONLINE;
 8000bae:	4b04      	ldr	r3, [pc, #16]	@ (8000bc0 <CAN_ProcessHeartbeat+0x60>)
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
        else
        {
            // CAN_DEBUG_PRINTF("心跳消息魔数错误: 0x%04X\r\n", magic);
        }
    }
}
 8000bb4:	bf00      	nop
 8000bb6:	3714      	adds	r7, #20
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bbe:	4770      	bx	lr
 8000bc0:	200001a8 	.word	0x200001a8

08000bc4 <CAN_ProcessDataRequest>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessDataRequest(uint8_t* data, uint8_t len)
{
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	b086      	sub	sp, #24
 8000bc8:	af00      	add	r7, sp, #0
 8000bca:	6078      	str	r0, [r7, #4]
 8000bcc:	460b      	mov	r3, r1
 8000bce:	70fb      	strb	r3, [r7, #3]
    if (len >= 2)
 8000bd0:	78fb      	ldrb	r3, [r7, #3]
 8000bd2:	2b01      	cmp	r3, #1
 8000bd4:	d95a      	bls.n	8000c8c <CAN_ProcessDataRequest+0xc8>
    {
        uint8_t req_type = data[0];
 8000bd6:	687b      	ldr	r3, [r7, #4]
 8000bd8:	781b      	ldrb	r3, [r3, #0]
 8000bda:	75fb      	strb	r3, [r7, #23]
        uint8_t req_param = data[1];
 8000bdc:	687b      	ldr	r3, [r7, #4]
 8000bde:	785b      	ldrb	r3, [r3, #1]
 8000be0:	75bb      	strb	r3, [r7, #22]
        
        // CAN_DEBUG_PRINTF("收到数据请求: 类型=%d, 参数=%d\r\n", req_type, req_param);
        
        // 根据请求类型发送响应
        uint8_t response_data[8];
        switch(req_type)
 8000be2:	7dfb      	ldrb	r3, [r7, #23]
 8000be4:	2b01      	cmp	r3, #1
 8000be6:	d002      	beq.n	8000bee <CAN_ProcessDataRequest+0x2a>
 8000be8:	2b02      	cmp	r3, #2
 8000bea:	d021      	beq.n	8000c30 <CAN_ProcessDataRequest+0x6c>
 8000bec:	e03b      	b.n	8000c66 <CAN_ProcessDataRequest+0xa2>
        {
            case 0x01:  // 请求系统状态
                response_data[0] = 0x01;  // 响应类型
 8000bee:	2301      	movs	r3, #1
 8000bf0:	723b      	strb	r3, [r7, #8]
                response_data[1] = (uint8_t)wcmcu_status;
 8000bf2:	4b28      	ldr	r3, [pc, #160]	@ (8000c94 <CAN_ProcessDataRequest+0xd0>)
 8000bf4:	781b      	ldrb	r3, [r3, #0]
 8000bf6:	727b      	strb	r3, [r7, #9]
                response_data[2] = (can_stats.tx_count >> 8) & 0xFF;
 8000bf8:	4b27      	ldr	r3, [pc, #156]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000bfa:	681b      	ldr	r3, [r3, #0]
 8000bfc:	0a1b      	lsrs	r3, r3, #8
 8000bfe:	b2db      	uxtb	r3, r3
 8000c00:	72bb      	strb	r3, [r7, #10]
                response_data[3] = can_stats.tx_count & 0xFF;
 8000c02:	4b25      	ldr	r3, [pc, #148]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000c04:	681b      	ldr	r3, [r3, #0]
 8000c06:	b2db      	uxtb	r3, r3
 8000c08:	72fb      	strb	r3, [r7, #11]
                response_data[4] = (can_stats.rx_count >> 8) & 0xFF;
 8000c0a:	4b23      	ldr	r3, [pc, #140]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000c0c:	685b      	ldr	r3, [r3, #4]
 8000c0e:	0a1b      	lsrs	r3, r3, #8
 8000c10:	b2db      	uxtb	r3, r3
 8000c12:	733b      	strb	r3, [r7, #12]
                response_data[5] = can_stats.rx_count & 0xFF;
 8000c14:	4b20      	ldr	r3, [pc, #128]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000c16:	685b      	ldr	r3, [r3, #4]
 8000c18:	b2db      	uxtb	r3, r3
 8000c1a:	737b      	strb	r3, [r7, #13]
                response_data[6] = (can_stats.error_count >> 8) & 0xFF;
 8000c1c:	4b1e      	ldr	r3, [pc, #120]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000c1e:	689b      	ldr	r3, [r3, #8]
 8000c20:	0a1b      	lsrs	r3, r3, #8
 8000c22:	b2db      	uxtb	r3, r3
 8000c24:	73bb      	strb	r3, [r7, #14]
                response_data[7] = can_stats.error_count & 0xFF;
 8000c26:	4b1c      	ldr	r3, [pc, #112]	@ (8000c98 <CAN_ProcessDataRequest+0xd4>)
 8000c28:	689b      	ldr	r3, [r3, #8]
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	73fb      	strb	r3, [r7, #15]
                break;
 8000c2e:	e027      	b.n	8000c80 <CAN_ProcessDataRequest+0xbc>
                
            case 0x02:  // 请求时间戳
                {
                    uint32_t timestamp = CAN_GET_TIMESTAMP();
 8000c30:	f001 fa70 	bl	8002114 <HAL_GetTick>
 8000c34:	6138      	str	r0, [r7, #16]
                    response_data[0] = 0x02;  // 响应类型
 8000c36:	2302      	movs	r3, #2
 8000c38:	723b      	strb	r3, [r7, #8]
                    response_data[1] = (timestamp >> 24) & 0xFF;
 8000c3a:	693b      	ldr	r3, [r7, #16]
 8000c3c:	0e1b      	lsrs	r3, r3, #24
 8000c3e:	b2db      	uxtb	r3, r3
 8000c40:	727b      	strb	r3, [r7, #9]
                    response_data[2] = (timestamp >> 16) & 0xFF;
 8000c42:	693b      	ldr	r3, [r7, #16]
 8000c44:	0c1b      	lsrs	r3, r3, #16
 8000c46:	b2db      	uxtb	r3, r3
 8000c48:	72bb      	strb	r3, [r7, #10]
                    response_data[3] = (timestamp >> 8) & 0xFF;
 8000c4a:	693b      	ldr	r3, [r7, #16]
 8000c4c:	0a1b      	lsrs	r3, r3, #8
 8000c4e:	b2db      	uxtb	r3, r3
 8000c50:	72fb      	strb	r3, [r7, #11]
                    response_data[4] = timestamp & 0xFF;
 8000c52:	693b      	ldr	r3, [r7, #16]
 8000c54:	b2db      	uxtb	r3, r3
 8000c56:	733b      	strb	r3, [r7, #12]
                    response_data[5] = 0x00;
 8000c58:	2300      	movs	r3, #0
 8000c5a:	737b      	strb	r3, [r7, #13]
                    response_data[6] = 0x00;
 8000c5c:	2300      	movs	r3, #0
 8000c5e:	73bb      	strb	r3, [r7, #14]
                    response_data[7] = 0x00;
 8000c60:	2300      	movs	r3, #0
 8000c62:	73fb      	strb	r3, [r7, #15]
                }
                break;
 8000c64:	e00c      	b.n	8000c80 <CAN_ProcessDataRequest+0xbc>
                
            default:
                response_data[0] = 0xFF;  // 未知请求
 8000c66:	23ff      	movs	r3, #255	@ 0xff
 8000c68:	723b      	strb	r3, [r7, #8]
                response_data[1] = req_type;
 8000c6a:	7dfb      	ldrb	r3, [r7, #23]
 8000c6c:	727b      	strb	r3, [r7, #9]
                memset(&response_data[2], 0, 6);
 8000c6e:	f107 0308 	add.w	r3, r7, #8
 8000c72:	3302      	adds	r3, #2
 8000c74:	2206      	movs	r2, #6
 8000c76:	2100      	movs	r1, #0
 8000c78:	4618      	mov	r0, r3
 8000c7a:	f007 fda7 	bl	80087cc <memset>
                break;
 8000c7e:	bf00      	nop
        }
        
        CAN_SendDataResponse(response_data, 8);
 8000c80:	f107 0308 	add.w	r3, r7, #8
 8000c84:	2108      	movs	r1, #8
 8000c86:	4618      	mov	r0, r3
 8000c88:	f7ff fe74 	bl	8000974 <CAN_SendDataResponse>
    }
}
 8000c8c:	bf00      	nop
 8000c8e:	3718      	adds	r7, #24
 8000c90:	46bd      	mov	sp, r7
 8000c92:	bd80      	pop	{r7, pc}
 8000c94:	200001a8 	.word	0x200001a8
 8000c98:	20000188 	.word	0x20000188

08000c9c <CAN_ProcessDataResponse>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessDataResponse(uint8_t* data, uint8_t len)
{
 8000c9c:	b480      	push	{r7}
 8000c9e:	b087      	sub	sp, #28
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	6078      	str	r0, [r7, #4]
 8000ca4:	460b      	mov	r3, r1
 8000ca6:	70fb      	strb	r3, [r7, #3]
    //     printf("%02X ", data[i]);
    // }
    // printf("\r\n");
    
    // 解析响应数据
    if (len >= 1)
 8000ca8:	78fb      	ldrb	r3, [r7, #3]
 8000caa:	2b00      	cmp	r3, #0
 8000cac:	d050      	beq.n	8000d50 <CAN_ProcessDataResponse+0xb4>
    {
        uint8_t resp_type = data[0];
 8000cae:	687b      	ldr	r3, [r7, #4]
 8000cb0:	781b      	ldrb	r3, [r3, #0]
 8000cb2:	75fb      	strb	r3, [r7, #23]
        switch(resp_type)
 8000cb4:	7dfb      	ldrb	r3, [r7, #23]
 8000cb6:	2b01      	cmp	r3, #1
 8000cb8:	d002      	beq.n	8000cc0 <CAN_ProcessDataResponse+0x24>
 8000cba:	2b02      	cmp	r3, #2
 8000cbc:	d02e      	beq.n	8000d1c <CAN_ProcessDataResponse+0x80>
                }
                break;
                
            default:
                // CAN_DEBUG_PRINTF("未知响应类型: %d\r\n", resp_type);
                break;
 8000cbe:	e047      	b.n	8000d50 <CAN_ProcessDataResponse+0xb4>
                if (len >= 8)
 8000cc0:	78fb      	ldrb	r3, [r7, #3]
 8000cc2:	2b07      	cmp	r3, #7
 8000cc4:	d941      	bls.n	8000d4a <CAN_ProcessDataResponse+0xae>
                    uint8_t node_status = data[1];
 8000cc6:	687b      	ldr	r3, [r7, #4]
 8000cc8:	785b      	ldrb	r3, [r3, #1]
 8000cca:	73fb      	strb	r3, [r7, #15]
                    uint16_t tx_count = (data[2] << 8) | data[3];
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	3302      	adds	r3, #2
 8000cd0:	781b      	ldrb	r3, [r3, #0]
 8000cd2:	b21b      	sxth	r3, r3
 8000cd4:	021b      	lsls	r3, r3, #8
 8000cd6:	b21a      	sxth	r2, r3
 8000cd8:	687b      	ldr	r3, [r7, #4]
 8000cda:	3303      	adds	r3, #3
 8000cdc:	781b      	ldrb	r3, [r3, #0]
 8000cde:	b21b      	sxth	r3, r3
 8000ce0:	4313      	orrs	r3, r2
 8000ce2:	b21b      	sxth	r3, r3
 8000ce4:	81bb      	strh	r3, [r7, #12]
                    uint16_t rx_count = (data[4] << 8) | data[5];
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	3304      	adds	r3, #4
 8000cea:	781b      	ldrb	r3, [r3, #0]
 8000cec:	b21b      	sxth	r3, r3
 8000cee:	021b      	lsls	r3, r3, #8
 8000cf0:	b21a      	sxth	r2, r3
 8000cf2:	687b      	ldr	r3, [r7, #4]
 8000cf4:	3305      	adds	r3, #5
 8000cf6:	781b      	ldrb	r3, [r3, #0]
 8000cf8:	b21b      	sxth	r3, r3
 8000cfa:	4313      	orrs	r3, r2
 8000cfc:	b21b      	sxth	r3, r3
 8000cfe:	817b      	strh	r3, [r7, #10]
                    uint16_t error_count = (data[6] << 8) | data[7];
 8000d00:	687b      	ldr	r3, [r7, #4]
 8000d02:	3306      	adds	r3, #6
 8000d04:	781b      	ldrb	r3, [r3, #0]
 8000d06:	b21b      	sxth	r3, r3
 8000d08:	021b      	lsls	r3, r3, #8
 8000d0a:	b21a      	sxth	r2, r3
 8000d0c:	687b      	ldr	r3, [r7, #4]
 8000d0e:	3307      	adds	r3, #7
 8000d10:	781b      	ldrb	r3, [r3, #0]
 8000d12:	b21b      	sxth	r3, r3
 8000d14:	4313      	orrs	r3, r2
 8000d16:	b21b      	sxth	r3, r3
 8000d18:	813b      	strh	r3, [r7, #8]
                break;
 8000d1a:	e016      	b.n	8000d4a <CAN_ProcessDataResponse+0xae>
                if (len >= 5)
 8000d1c:	78fb      	ldrb	r3, [r7, #3]
 8000d1e:	2b04      	cmp	r3, #4
 8000d20:	d915      	bls.n	8000d4e <CAN_ProcessDataResponse+0xb2>
                    uint32_t wcmcu_time = (data[1] << 24) | (data[2] << 16) | (data[3] << 8) | data[4];
 8000d22:	687b      	ldr	r3, [r7, #4]
 8000d24:	3301      	adds	r3, #1
 8000d26:	781b      	ldrb	r3, [r3, #0]
 8000d28:	061a      	lsls	r2, r3, #24
 8000d2a:	687b      	ldr	r3, [r7, #4]
 8000d2c:	3302      	adds	r3, #2
 8000d2e:	781b      	ldrb	r3, [r3, #0]
 8000d30:	041b      	lsls	r3, r3, #16
 8000d32:	431a      	orrs	r2, r3
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	3303      	adds	r3, #3
 8000d38:	781b      	ldrb	r3, [r3, #0]
 8000d3a:	021b      	lsls	r3, r3, #8
 8000d3c:	4313      	orrs	r3, r2
 8000d3e:	687a      	ldr	r2, [r7, #4]
 8000d40:	3204      	adds	r2, #4
 8000d42:	7812      	ldrb	r2, [r2, #0]
 8000d44:	4313      	orrs	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
                break;
 8000d48:	e001      	b.n	8000d4e <CAN_ProcessDataResponse+0xb2>
                break;
 8000d4a:	bf00      	nop
 8000d4c:	e000      	b.n	8000d50 <CAN_ProcessDataResponse+0xb4>
                break;
 8000d4e:	bf00      	nop
        }
    }
}
 8000d50:	bf00      	nop
 8000d52:	371c      	adds	r7, #28
 8000d54:	46bd      	mov	sp, r7
 8000d56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d5a:	4770      	bx	lr

08000d5c <CAN_ProcessStatusMessage>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessStatusMessage(uint8_t* data, uint8_t len)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	b085      	sub	sp, #20
 8000d60:	af00      	add	r7, sp, #0
 8000d62:	6078      	str	r0, [r7, #4]
 8000d64:	460b      	mov	r3, r1
 8000d66:	70fb      	strb	r3, [r7, #3]
    if (len >= 6)
 8000d68:	78fb      	ldrb	r3, [r7, #3]
 8000d6a:	2b05      	cmp	r3, #5
 8000d6c:	d91e      	bls.n	8000dac <CAN_ProcessStatusMessage+0x50>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 8000d6e:	687b      	ldr	r3, [r7, #4]
 8000d70:	781b      	ldrb	r3, [r3, #0]
 8000d72:	b21b      	sxth	r3, r3
 8000d74:	021b      	lsls	r3, r3, #8
 8000d76:	b21a      	sxth	r2, r3
 8000d78:	687b      	ldr	r3, [r7, #4]
 8000d7a:	3301      	adds	r3, #1
 8000d7c:	781b      	ldrb	r3, [r3, #0]
 8000d7e:	b21b      	sxth	r3, r3
 8000d80:	4313      	orrs	r3, r2
 8000d82:	b21b      	sxth	r3, r3
 8000d84:	81fb      	strh	r3, [r7, #14]
        uint8_t status = data[2];
 8000d86:	687b      	ldr	r3, [r7, #4]
 8000d88:	789b      	ldrb	r3, [r3, #2]
 8000d8a:	737b      	strb	r3, [r7, #13]
        uint16_t counter = (data[3] << 8) | data[4];
 8000d8c:	687b      	ldr	r3, [r7, #4]
 8000d8e:	3303      	adds	r3, #3
 8000d90:	781b      	ldrb	r3, [r3, #0]
 8000d92:	b21b      	sxth	r3, r3
 8000d94:	021b      	lsls	r3, r3, #8
 8000d96:	b21a      	sxth	r2, r3
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	3304      	adds	r3, #4
 8000d9c:	781b      	ldrb	r3, [r3, #0]
 8000d9e:	b21b      	sxth	r3, r3
 8000da0:	4313      	orrs	r3, r2
 8000da2:	b21b      	sxth	r3, r3
 8000da4:	817b      	strh	r3, [r7, #10]
        uint8_t runtime = data[5];
 8000da6:	687b      	ldr	r3, [r7, #4]
 8000da8:	795b      	ldrb	r3, [r3, #5]
 8000daa:	727b      	strb	r3, [r7, #9]
        {
            // CAN_DEBUG_PRINTF("WCMCU状态: %d, 计数器: %d, 运行时间: %d秒\r\n", 
            //                status, counter, runtime);
        }
    }
}
 8000dac:	bf00      	nop
 8000dae:	3714      	adds	r7, #20
 8000db0:	46bd      	mov	sp, r7
 8000db2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000db6:	4770      	bx	lr

08000db8 <CAN_ProcessControlCommand>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessControlCommand(uint8_t* data, uint8_t len)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	b084      	sub	sp, #16
 8000dbc:	af00      	add	r7, sp, #0
 8000dbe:	6078      	str	r0, [r7, #4]
 8000dc0:	460b      	mov	r3, r1
 8000dc2:	70fb      	strb	r3, [r7, #3]
    if (len >= 4)
 8000dc4:	78fb      	ldrb	r3, [r7, #3]
 8000dc6:	2b03      	cmp	r3, #3
 8000dc8:	d931      	bls.n	8000e2e <CAN_ProcessControlCommand+0x76>
    {
        uint16_t magic = (data[0] << 8) | data[1];
 8000dca:	687b      	ldr	r3, [r7, #4]
 8000dcc:	781b      	ldrb	r3, [r3, #0]
 8000dce:	b21b      	sxth	r3, r3
 8000dd0:	021b      	lsls	r3, r3, #8
 8000dd2:	b21a      	sxth	r2, r3
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	3301      	adds	r3, #1
 8000dd8:	781b      	ldrb	r3, [r3, #0]
 8000dda:	b21b      	sxth	r3, r3
 8000ddc:	4313      	orrs	r3, r2
 8000dde:	b21b      	sxth	r3, r3
 8000de0:	81fb      	strh	r3, [r7, #14]
        uint16_t cmd = (data[2] << 8) | data[3];
 8000de2:	687b      	ldr	r3, [r7, #4]
 8000de4:	3302      	adds	r3, #2
 8000de6:	781b      	ldrb	r3, [r3, #0]
 8000de8:	b21b      	sxth	r3, r3
 8000dea:	021b      	lsls	r3, r3, #8
 8000dec:	b21a      	sxth	r2, r3
 8000dee:	687b      	ldr	r3, [r7, #4]
 8000df0:	3303      	adds	r3, #3
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	b21b      	sxth	r3, r3
 8000df6:	4313      	orrs	r3, r2
 8000df8:	b21b      	sxth	r3, r3
 8000dfa:	81bb      	strh	r3, [r7, #12]
        
        if (magic == CAN_CONTROL_MAGIC)
 8000dfc:	89fb      	ldrh	r3, [r7, #14]
 8000dfe:	f649 22bc 	movw	r2, #39612	@ 0x9abc
 8000e02:	4293      	cmp	r3, r2
 8000e04:	d113      	bne.n	8000e2e <CAN_ProcessControlCommand+0x76>
        {
            // CAN_DEBUG_PRINTF("收到控制指令: 0x%04X\r\n", cmd);
            
            // 处理控制指令
            switch(cmd)
 8000e06:	89bb      	ldrh	r3, [r7, #12]
 8000e08:	2b03      	cmp	r3, #3
 8000e0a:	d00c      	beq.n	8000e26 <CAN_ProcessControlCommand+0x6e>
 8000e0c:	2b03      	cmp	r3, #3
 8000e0e:	dc0d      	bgt.n	8000e2c <CAN_ProcessControlCommand+0x74>
 8000e10:	2b01      	cmp	r3, #1
 8000e12:	d002      	beq.n	8000e1a <CAN_ProcessControlCommand+0x62>
 8000e14:	2b02      	cmp	r3, #2
 8000e16:	d003      	beq.n	8000e20 <CAN_ProcessControlCommand+0x68>
                    CAN_PrintNodeStatus();
                    break;
                    
                default:
                    // CAN_DEBUG_PRINTF("未知控制指令: 0x%04X\r\n", cmd);
                    break;
 8000e18:	e008      	b.n	8000e2c <CAN_ProcessControlCommand+0x74>
                    CAN_ResetStats();
 8000e1a:	f000 f827 	bl	8000e6c <CAN_ResetStats>
                    break;
 8000e1e:	e006      	b.n	8000e2e <CAN_ProcessControlCommand+0x76>
                    CAN_PrintStats();
 8000e20:	f000 f844 	bl	8000eac <CAN_PrintStats>
                    break;
 8000e24:	e003      	b.n	8000e2e <CAN_ProcessControlCommand+0x76>
                    CAN_PrintNodeStatus();
 8000e26:	f000 f855 	bl	8000ed4 <CAN_PrintNodeStatus>
                    break;
 8000e2a:	e000      	b.n	8000e2e <CAN_ProcessControlCommand+0x76>
                    break;
 8000e2c:	bf00      	nop
            }
        }
    }
}
 8000e2e:	bf00      	nop
 8000e30:	3710      	adds	r7, #16
 8000e32:	46bd      	mov	sp, r7
 8000e34:	bd80      	pop	{r7, pc}
	...

08000e38 <CAN_ProcessErrorMessage>:
  * @param  data: 消息数据
  * @param  len: 数据长度
  * @retval None
  */
void CAN_ProcessErrorMessage(uint8_t* data, uint8_t len)
{
 8000e38:	b480      	push	{r7}
 8000e3a:	b085      	sub	sp, #20
 8000e3c:	af00      	add	r7, sp, #0
 8000e3e:	6078      	str	r0, [r7, #4]
 8000e40:	460b      	mov	r3, r1
 8000e42:	70fb      	strb	r3, [r7, #3]
    if (len >= 3)
 8000e44:	78fb      	ldrb	r3, [r7, #3]
 8000e46:	2b02      	cmp	r3, #2
 8000e48:	d908      	bls.n	8000e5c <CAN_ProcessErrorMessage+0x24>
    {
        uint8_t error_code = data[1];
 8000e4a:	687b      	ldr	r3, [r7, #4]
 8000e4c:	785b      	ldrb	r3, [r3, #1]
 8000e4e:	73fb      	strb	r3, [r7, #15]
        uint8_t error_data = data[2];
 8000e50:	687b      	ldr	r3, [r7, #4]
 8000e52:	789b      	ldrb	r3, [r3, #2]
 8000e54:	73bb      	strb	r3, [r7, #14]
        
        // CAN_DEBUG_PRINTF("收到错误消息: 代码=0x%02X, 数据=0x%02X\r\n", 
        //                error_code, error_data);
        
        // 更新节点状态
        wcmcu_status = CAN_NODE_ERROR;
 8000e56:	4b04      	ldr	r3, [pc, #16]	@ (8000e68 <CAN_ProcessErrorMessage+0x30>)
 8000e58:	2202      	movs	r2, #2
 8000e5a:	701a      	strb	r2, [r3, #0]
    }
}
 8000e5c:	bf00      	nop
 8000e5e:	3714      	adds	r7, #20
 8000e60:	46bd      	mov	sp, r7
 8000e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e66:	4770      	bx	lr
 8000e68:	200001a8 	.word	0x200001a8

08000e6c <CAN_ResetStats>:
/**
  * @brief  重置统计信息
  * @retval None
  */
void CAN_ResetStats(void)
{
 8000e6c:	b580      	push	{r7, lr}
 8000e6e:	af00      	add	r7, sp, #0
    memset(&can_stats, 0, sizeof(can_stats));
 8000e70:	2220      	movs	r2, #32
 8000e72:	2100      	movs	r1, #0
 8000e74:	4809      	ldr	r0, [pc, #36]	@ (8000e9c <CAN_ResetStats+0x30>)
 8000e76:	f007 fca9 	bl	80087cc <memset>
    can_stats.start_time = CAN_GET_TIMESTAMP();
 8000e7a:	f001 f94b 	bl	8002114 <HAL_GetTick>
 8000e7e:	4603      	mov	r3, r0
 8000e80:	4a06      	ldr	r2, [pc, #24]	@ (8000e9c <CAN_ResetStats+0x30>)
 8000e82:	6193      	str	r3, [r2, #24]
    
    heartbeat_counter = 0;
 8000e84:	4b06      	ldr	r3, [pc, #24]	@ (8000ea0 <CAN_ResetStats+0x34>)
 8000e86:	2200      	movs	r2, #0
 8000e88:	601a      	str	r2, [r3, #0]
    data_request_counter = 0;
 8000e8a:	4b06      	ldr	r3, [pc, #24]	@ (8000ea4 <CAN_ResetStats+0x38>)
 8000e8c:	2200      	movs	r2, #0
 8000e8e:	601a      	str	r2, [r3, #0]
    status_counter = 0;
 8000e90:	4b05      	ldr	r3, [pc, #20]	@ (8000ea8 <CAN_ResetStats+0x3c>)
 8000e92:	2200      	movs	r2, #0
 8000e94:	601a      	str	r2, [r3, #0]
    
    // CAN_DEBUG_PRINTF("统计信息已重置\r\n");
}
 8000e96:	bf00      	nop
 8000e98:	bd80      	pop	{r7, pc}
 8000e9a:	bf00      	nop
 8000e9c:	20000188 	.word	0x20000188
 8000ea0:	200001b4 	.word	0x200001b4
 8000ea4:	200001b8 	.word	0x200001b8
 8000ea8:	200001bc 	.word	0x200001bc

08000eac <CAN_PrintStats>:
/**
  * @brief  打印统计信息
  * @retval None
  */
void CAN_PrintStats(void)
{
 8000eac:	b580      	push	{r7, lr}
 8000eae:	b082      	sub	sp, #8
 8000eb0:	af00      	add	r7, sp, #0
    uint32_t elapsed = CAN_GET_TIMESTAMP() - can_stats.start_time;
 8000eb2:	f001 f92f 	bl	8002114 <HAL_GetTick>
 8000eb6:	4602      	mov	r2, r0
 8000eb8:	4b05      	ldr	r3, [pc, #20]	@ (8000ed0 <CAN_PrintStats+0x24>)
 8000eba:	699b      	ldr	r3, [r3, #24]
 8000ebc:	1ad3      	subs	r3, r2, r3
 8000ebe:	607b      	str	r3, [r7, #4]
    float success_rate = CAN_GetSuccessRate();
 8000ec0:	f000 f818 	bl	8000ef4 <CAN_GetSuccessRate>
 8000ec4:	ed87 0a00 	vstr	s0, [r7]
    // printf("数据请求: %lu\r\n", can_stats.data_req_count);
    // printf("数据响应: %lu\r\n", can_stats.data_resp_count);
    // printf("通信成功率: %.2f%%\r\n", success_rate);
    // printf("最后接收时间: %lu ms\r\n", can_stats.last_rx_time);
    // printf("========================\r\n\r\n");
}
 8000ec8:	bf00      	nop
 8000eca:	3708      	adds	r7, #8
 8000ecc:	46bd      	mov	sp, r7
 8000ece:	bd80      	pop	{r7, pc}
 8000ed0:	20000188 	.word	0x20000188

08000ed4 <CAN_PrintNodeStatus>:
/**
  * @brief  打印节点状态
  * @retval None
  */
void CAN_PrintNodeStatus(void)
{
 8000ed4:	b490      	push	{r4, r7}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
    const char* status_str[] = {"离线", "在线", "错误", "超时"};
 8000eda:	4b05      	ldr	r3, [pc, #20]	@ (8000ef0 <CAN_PrintNodeStatus+0x1c>)
 8000edc:	463c      	mov	r4, r7
 8000ede:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8000ee0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
    // printf("WCMCU-230状态: %s\r\n", status_str[wcmcu_status]);
    // printf("最后心跳时间: %lu ms\r\n", last_heartbeat_time);
    // printf("最后发送时间: %lu ms\r\n", last_send_time);
    // printf("当前时间: %lu ms\r\n", CAN_GET_TIMESTAMP());
    // printf("==================\r\n\r\n");
}
 8000ee4:	bf00      	nop
 8000ee6:	3710      	adds	r7, #16
 8000ee8:	46bd      	mov	sp, r7
 8000eea:	bc90      	pop	{r4, r7}
 8000eec:	4770      	bx	lr
 8000eee:	bf00      	nop
 8000ef0:	08009c78 	.word	0x08009c78

08000ef4 <CAN_GetSuccessRate>:
/**
  * @brief  获取通信成功率
  * @retval 成功率(百分比)
  */
float CAN_GetSuccessRate(void)
{
 8000ef4:	b480      	push	{r7}
 8000ef6:	af00      	add	r7, sp, #0
    if (can_stats.tx_count == 0)
 8000ef8:	4b0f      	ldr	r3, [pc, #60]	@ (8000f38 <CAN_GetSuccessRate+0x44>)
 8000efa:	681b      	ldr	r3, [r3, #0]
 8000efc:	2b00      	cmp	r3, #0
 8000efe:	d102      	bne.n	8000f06 <CAN_GetSuccessRate+0x12>
    {
        return 0.0f;
 8000f00:	eddf 7a0e 	vldr	s15, [pc, #56]	@ 8000f3c <CAN_GetSuccessRate+0x48>
 8000f04:	e011      	b.n	8000f2a <CAN_GetSuccessRate+0x36>
    }
    
    return (float)can_stats.rx_count / can_stats.tx_count * 100.0f;
 8000f06:	4b0c      	ldr	r3, [pc, #48]	@ (8000f38 <CAN_GetSuccessRate+0x44>)
 8000f08:	685b      	ldr	r3, [r3, #4]
 8000f0a:	ee07 3a90 	vmov	s15, r3
 8000f0e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8000f12:	4b09      	ldr	r3, [pc, #36]	@ (8000f38 <CAN_GetSuccessRate+0x44>)
 8000f14:	681b      	ldr	r3, [r3, #0]
 8000f16:	ee07 3a90 	vmov	s15, r3
 8000f1a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8000f1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8000f22:	ed9f 7a07 	vldr	s14, [pc, #28]	@ 8000f40 <CAN_GetSuccessRate+0x4c>
 8000f26:	ee67 7a87 	vmul.f32	s15, s15, s14
}
 8000f2a:	eeb0 0a67 	vmov.f32	s0, s15
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
 8000f36:	bf00      	nop
 8000f38:	20000188 	.word	0x20000188
 8000f3c:	00000000 	.word	0x00000000
 8000f40:	42c80000 	.word	0x42c80000

08000f44 <CAN_PrintMessage>:
  * @param  data: 数据指针
  * @param  len: 数据长度
  * @retval None
  */
void CAN_PrintMessage(const char* prefix, uint32_t id, uint8_t* data, uint8_t len)
{
 8000f44:	b580      	push	{r7, lr}
 8000f46:	b086      	sub	sp, #24
 8000f48:	af00      	add	r7, sp, #0
 8000f4a:	60f8      	str	r0, [r7, #12]
 8000f4c:	60b9      	str	r1, [r7, #8]
 8000f4e:	607a      	str	r2, [r7, #4]
 8000f50:	70fb      	strb	r3, [r7, #3]
    printf("[%s] ID:0x%03X Len:%d Data:", prefix, (unsigned int)id, len);
 8000f52:	78fb      	ldrb	r3, [r7, #3]
 8000f54:	68ba      	ldr	r2, [r7, #8]
 8000f56:	68f9      	ldr	r1, [r7, #12]
 8000f58:	480d      	ldr	r0, [pc, #52]	@ (8000f90 <CAN_PrintMessage+0x4c>)
 8000f5a:	f007 faef 	bl	800853c <iprintf>
    for(int i = 0; i < len; i++)
 8000f5e:	2300      	movs	r3, #0
 8000f60:	617b      	str	r3, [r7, #20]
 8000f62:	e00a      	b.n	8000f7a <CAN_PrintMessage+0x36>
    {
        printf("%02X ", data[i]);
 8000f64:	697b      	ldr	r3, [r7, #20]
 8000f66:	687a      	ldr	r2, [r7, #4]
 8000f68:	4413      	add	r3, r2
 8000f6a:	781b      	ldrb	r3, [r3, #0]
 8000f6c:	4619      	mov	r1, r3
 8000f6e:	4809      	ldr	r0, [pc, #36]	@ (8000f94 <CAN_PrintMessage+0x50>)
 8000f70:	f007 fae4 	bl	800853c <iprintf>
    for(int i = 0; i < len; i++)
 8000f74:	697b      	ldr	r3, [r7, #20]
 8000f76:	3301      	adds	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
 8000f7a:	78fb      	ldrb	r3, [r7, #3]
 8000f7c:	697a      	ldr	r2, [r7, #20]
 8000f7e:	429a      	cmp	r2, r3
 8000f80:	dbf0      	blt.n	8000f64 <CAN_PrintMessage+0x20>
    }
    printf("\r\n");
 8000f82:	4805      	ldr	r0, [pc, #20]	@ (8000f98 <CAN_PrintMessage+0x54>)
 8000f84:	f007 fb42 	bl	800860c <puts>
}
 8000f88:	bf00      	nop
 8000f8a:	3718      	adds	r7, #24
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	08009c88 	.word	0x08009c88
 8000f94:	08009ca4 	.word	0x08009ca4
 8000f98:	08009cac 	.word	0x08009cac

08000f9c <CAN_UpdateTxStats>:
/**
  * @brief  更新发送统计
  * @retval None
  */
static void CAN_UpdateTxStats(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
    can_stats.tx_count++;
 8000fa0:	4b04      	ldr	r3, [pc, #16]	@ (8000fb4 <CAN_UpdateTxStats+0x18>)
 8000fa2:	681b      	ldr	r3, [r3, #0]
 8000fa4:	3301      	adds	r3, #1
 8000fa6:	4a03      	ldr	r2, [pc, #12]	@ (8000fb4 <CAN_UpdateTxStats+0x18>)
 8000fa8:	6013      	str	r3, [r2, #0]
}
 8000faa:	bf00      	nop
 8000fac:	46bd      	mov	sp, r7
 8000fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb2:	4770      	bx	lr
 8000fb4:	20000188 	.word	0x20000188

08000fb8 <CAN_UpdateRxStats>:
/**
  * @brief  更新接收统计
  * @retval None
  */
static void CAN_UpdateRxStats(void)
{
 8000fb8:	b480      	push	{r7}
 8000fba:	af00      	add	r7, sp, #0
    can_stats.rx_count++;
 8000fbc:	4b04      	ldr	r3, [pc, #16]	@ (8000fd0 <CAN_UpdateRxStats+0x18>)
 8000fbe:	685b      	ldr	r3, [r3, #4]
 8000fc0:	3301      	adds	r3, #1
 8000fc2:	4a03      	ldr	r2, [pc, #12]	@ (8000fd0 <CAN_UpdateRxStats+0x18>)
 8000fc4:	6053      	str	r3, [r2, #4]
}
 8000fc6:	bf00      	nop
 8000fc8:	46bd      	mov	sp, r7
 8000fca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fce:	4770      	bx	lr
 8000fd0:	20000188 	.word	0x20000188

08000fd4 <CAN_UpdateErrorStats>:
/**
  * @brief  更新错误统计
  * @retval None
  */
static void CAN_UpdateErrorStats(void)
{
 8000fd4:	b480      	push	{r7}
 8000fd6:	af00      	add	r7, sp, #0
    can_stats.error_count++;
 8000fd8:	4b04      	ldr	r3, [pc, #16]	@ (8000fec <CAN_UpdateErrorStats+0x18>)
 8000fda:	689b      	ldr	r3, [r3, #8]
 8000fdc:	3301      	adds	r3, #1
 8000fde:	4a03      	ldr	r2, [pc, #12]	@ (8000fec <CAN_UpdateErrorStats+0x18>)
 8000fe0:	6093      	str	r3, [r2, #8]
}
 8000fe2:	bf00      	nop
 8000fe4:	46bd      	mov	sp, r7
 8000fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fea:	4770      	bx	lr
 8000fec:	20000188 	.word	0x20000188

08000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @brief  CAN接收FIFO0消息挂起回调
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8000ff0:	b580      	push	{r7, lr}
 8000ff2:	b084      	sub	sp, #16
 8000ff4:	af00      	add	r7, sp, #0
 8000ff6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
 8000ff8:	687b      	ldr	r3, [r7, #4]
 8000ffa:	681b      	ldr	r3, [r3, #0]
 8000ffc:	4a25      	ldr	r2, [pc, #148]	@ (8001094 <HAL_CAN_RxFifo0MsgPendingCallback+0xa4>)
 8000ffe:	4293      	cmp	r3, r2
 8001000:	d132      	bne.n	8001068 <HAL_CAN_RxFifo0MsgPendingCallback+0x78>
    {
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001002:	4b25      	ldr	r3, [pc, #148]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001004:	4a25      	ldr	r2, [pc, #148]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001006:	2100      	movs	r1, #0
 8001008:	6878      	ldr	r0, [r7, #4]
 800100a:	f001 fb7d 	bl	8002708 <HAL_CAN_GetRxMessage>
 800100e:	4603      	mov	r3, r0
 8001010:	2b00      	cmp	r3, #0
 8001012:	d13b      	bne.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
        {
            // 打印CAN1接收到的消息
            printf("[CAN1-RX] ID:0x%03X, DLC:%d, Data:", (unsigned int)RxHeader.StdId, RxHeader.DLC);
 8001014:	4b21      	ldr	r3, [pc, #132]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001016:	681b      	ldr	r3, [r3, #0]
 8001018:	4a20      	ldr	r2, [pc, #128]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800101a:	6912      	ldr	r2, [r2, #16]
 800101c:	4619      	mov	r1, r3
 800101e:	4820      	ldr	r0, [pc, #128]	@ (80010a0 <HAL_CAN_RxFifo0MsgPendingCallback+0xb0>)
 8001020:	f007 fa8c 	bl	800853c <iprintf>
            for (int i = 0; i < RxHeader.DLC && i < 8; i++) {
 8001024:	2300      	movs	r3, #0
 8001026:	60fb      	str	r3, [r7, #12]
 8001028:	e00a      	b.n	8001040 <HAL_CAN_RxFifo0MsgPendingCallback+0x50>
                printf("%02X ", RxData[i]);
 800102a:	4a1b      	ldr	r2, [pc, #108]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	781b      	ldrb	r3, [r3, #0]
 8001032:	4619      	mov	r1, r3
 8001034:	481b      	ldr	r0, [pc, #108]	@ (80010a4 <HAL_CAN_RxFifo0MsgPendingCallback+0xb4>)
 8001036:	f007 fa81 	bl	800853c <iprintf>
            for (int i = 0; i < RxHeader.DLC && i < 8; i++) {
 800103a:	68fb      	ldr	r3, [r7, #12]
 800103c:	3301      	adds	r3, #1
 800103e:	60fb      	str	r3, [r7, #12]
 8001040:	4b16      	ldr	r3, [pc, #88]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001042:	691a      	ldr	r2, [r3, #16]
 8001044:	68fb      	ldr	r3, [r7, #12]
 8001046:	429a      	cmp	r2, r3
 8001048:	d902      	bls.n	8001050 <HAL_CAN_RxFifo0MsgPendingCallback+0x60>
 800104a:	68fb      	ldr	r3, [r7, #12]
 800104c:	2b07      	cmp	r3, #7
 800104e:	ddec      	ble.n	800102a <HAL_CAN_RxFifo0MsgPendingCallback+0x3a>
            }
            printf("\r\n");
 8001050:	4815      	ldr	r0, [pc, #84]	@ (80010a8 <HAL_CAN_RxFifo0MsgPendingCallback+0xb8>)
 8001052:	f007 fadb 	bl	800860c <puts>
            
            // 处理双节点通信消息
            CAN_ProcessReceivedMessage(&RxHeader, RxData);
 8001056:	4910      	ldr	r1, [pc, #64]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001058:	4810      	ldr	r0, [pc, #64]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 800105a:	f7ff fcbf 	bl	80009dc <CAN_ProcessReceivedMessage>
            
            // 处理循环测试消息
            CAN_LoopTest_ProcessSTM32Message(&RxHeader, RxData);
 800105e:	490e      	ldr	r1, [pc, #56]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001060:	480e      	ldr	r0, [pc, #56]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001062:	f000 f859 	bl	8001118 <CAN_LoopTest_ProcessSTM32Message>
            
            // 环回测试已禁用 - CAN2仅接收
            // CAN2_LoopbackTest_ProcessMessage(&RxHeader, RxData);
        }
    }
}
 8001066:	e011      	b.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
    else if (hcan->Instance == CAN2)
 8001068:	687b      	ldr	r3, [r7, #4]
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	4a0f      	ldr	r2, [pc, #60]	@ (80010ac <HAL_CAN_RxFifo0MsgPendingCallback+0xbc>)
 800106e:	4293      	cmp	r3, r2
 8001070:	d10c      	bne.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
        if (HAL_CAN_GetRxMessage(hcan, CAN_RX_FIFO0, &RxHeader, RxData) == HAL_OK)
 8001072:	4b09      	ldr	r3, [pc, #36]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001074:	4a09      	ldr	r2, [pc, #36]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001076:	2100      	movs	r1, #0
 8001078:	6878      	ldr	r0, [r7, #4]
 800107a:	f001 fb45 	bl	8002708 <HAL_CAN_GetRxMessage>
 800107e:	4603      	mov	r3, r0
 8001080:	2b00      	cmp	r3, #0
 8001082:	d103      	bne.n	800108c <HAL_CAN_RxFifo0MsgPendingCallback+0x9c>
            CAN2_Demo_ProcessReceivedMessage(&RxHeader, RxData);
 8001084:	4904      	ldr	r1, [pc, #16]	@ (8001098 <HAL_CAN_RxFifo0MsgPendingCallback+0xa8>)
 8001086:	4805      	ldr	r0, [pc, #20]	@ (800109c <HAL_CAN_RxFifo0MsgPendingCallback+0xac>)
 8001088:	f7ff fbee 	bl	8000868 <CAN2_Demo_ProcessReceivedMessage>
}
 800108c:	bf00      	nop
 800108e:	3710      	adds	r7, #16
 8001090:	46bd      	mov	sp, r7
 8001092:	bd80      	pop	{r7, pc}
 8001094:	40006400 	.word	0x40006400
 8001098:	2000017c 	.word	0x2000017c
 800109c:	20000158 	.word	0x20000158
 80010a0:	08009cc8 	.word	0x08009cc8
 80010a4:	08009ca4 	.word	0x08009ca4
 80010a8:	08009cac 	.word	0x08009cac
 80010ac:	40006800 	.word	0x40006800

080010b0 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @brief  CAN发送邮箱0完成回调
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010b0:	b480      	push	{r7}
 80010b2:	b083      	sub	sp, #12
 80010b4:	af00      	add	r7, sp, #0
 80010b6:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // 发送完成处理
    }
}
 80010b8:	bf00      	nop
 80010ba:	370c      	adds	r7, #12
 80010bc:	46bd      	mov	sp, r7
 80010be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010c2:	4770      	bx	lr

080010c4 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @brief  CAN发送邮箱1完成回调
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b083      	sub	sp, #12
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // 发送完成处理
    }
}
 80010cc:	bf00      	nop
 80010ce:	370c      	adds	r7, #12
 80010d0:	46bd      	mov	sp, r7
 80010d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010d6:	4770      	bx	lr

080010d8 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @brief  CAN发送邮箱2完成回调
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 80010d8:	b480      	push	{r7}
 80010da:	b083      	sub	sp, #12
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
    {
        // 发送完成处理
    }
}
 80010e0:	bf00      	nop
 80010e2:	370c      	adds	r7, #12
 80010e4:	46bd      	mov	sp, r7
 80010e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ea:	4770      	bx	lr

080010ec <HAL_CAN_ErrorCallback>:
  * @brief  CAN错误回调
  * @param  hcan: CAN句柄指针
  * @retval None
  */
void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 80010ec:	b580      	push	{r7, lr}
 80010ee:	b084      	sub	sp, #16
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	6078      	str	r0, [r7, #4]
    if (hcan->Instance == CAN1)
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	681b      	ldr	r3, [r3, #0]
 80010f8:	4a06      	ldr	r2, [pc, #24]	@ (8001114 <HAL_CAN_ErrorCallback+0x28>)
 80010fa:	4293      	cmp	r3, r2
 80010fc:	d105      	bne.n	800110a <HAL_CAN_ErrorCallback+0x1e>
    {
        uint32_t error_code = HAL_CAN_GetError(hcan);
 80010fe:	6878      	ldr	r0, [r7, #4]
 8001100:	f001 fe79 	bl	8002df6 <HAL_CAN_GetError>
 8001104:	60f8      	str	r0, [r7, #12]
        // CAN_DEBUG_PRINTF("CAN错误: 0x%08lX\r\n", error_code);
        CAN_UpdateErrorStats();
 8001106:	f7ff ff65 	bl	8000fd4 <CAN_UpdateErrorStats>
    }
}
 800110a:	bf00      	nop
 800110c:	3710      	adds	r7, #16
 800110e:	46bd      	mov	sp, r7
 8001110:	bd80      	pop	{r7, pc}
 8001112:	bf00      	nop
 8001114:	40006400 	.word	0x40006400

08001118 <CAN_LoopTest_ProcessSTM32Message>:
  * @param  header: 接收头
  * @param  data: 接收数据
  * @retval None
  */
void CAN_LoopTest_ProcessSTM32Message(CAN_RxHeaderTypeDef* header, uint8_t* data)
{
 8001118:	b580      	push	{r7, lr}
 800111a:	b084      	sub	sp, #16
 800111c:	af00      	add	r7, sp, #0
 800111e:	6078      	str	r0, [r7, #4]
 8001120:	6039      	str	r1, [r7, #0]
    if (header->StdId == LOOP_TEST_ID && waiting_for_response)
 8001122:	687b      	ldr	r3, [r7, #4]
 8001124:	681b      	ldr	r3, [r3, #0]
 8001126:	f240 1223 	movw	r2, #291	@ 0x123
 800112a:	4293      	cmp	r3, r2
 800112c:	d123      	bne.n	8001176 <CAN_LoopTest_ProcessSTM32Message+0x5e>
 800112e:	4b14      	ldr	r3, [pc, #80]	@ (8001180 <CAN_LoopTest_ProcessSTM32Message+0x68>)
 8001130:	781b      	ldrb	r3, [r3, #0]
 8001132:	2b00      	cmp	r3, #0
 8001134:	d01f      	beq.n	8001176 <CAN_LoopTest_ProcessSTM32Message+0x5e>
    {
        uint32_t current_time = HAL_GetTick();
 8001136:	f000 ffed 	bl	8002114 <HAL_GetTick>
 800113a:	60f8      	str	r0, [r7, #12]
        uint32_t loop_time = current_time - last_send_time;
 800113c:	4b11      	ldr	r3, [pc, #68]	@ (8001184 <CAN_LoopTest_ProcessSTM32Message+0x6c>)
 800113e:	681b      	ldr	r3, [r3, #0]
 8001140:	68fa      	ldr	r2, [r7, #12]
 8001142:	1ad3      	subs	r3, r2, r3
 8001144:	60bb      	str	r3, [r7, #8]
        
        waiting_for_response = 0;
 8001146:	4b0e      	ldr	r3, [pc, #56]	@ (8001180 <CAN_LoopTest_ProcessSTM32Message+0x68>)
 8001148:	2200      	movs	r2, #0
 800114a:	701a      	strb	r2, [r3, #0]
        successful_loops++;
 800114c:	4b0e      	ldr	r3, [pc, #56]	@ (8001188 <CAN_LoopTest_ProcessSTM32Message+0x70>)
 800114e:	681b      	ldr	r3, [r3, #0]
 8001150:	3301      	adds	r3, #1
 8001152:	4a0d      	ldr	r2, [pc, #52]	@ (8001188 <CAN_LoopTest_ProcessSTM32Message+0x70>)
 8001154:	6013      	str	r3, [r2, #0]
        last_receive_time = current_time;
 8001156:	4a0d      	ldr	r2, [pc, #52]	@ (800118c <CAN_LoopTest_ProcessSTM32Message+0x74>)
 8001158:	68fb      	ldr	r3, [r7, #12]
 800115a:	6013      	str	r3, [r2, #0]
        
        printf("[LOOP #%lu] STM32 CAN1 <- Message received from MCP2515 (Loop time: %lu ms)\r\n", 
 800115c:	4b0c      	ldr	r3, [pc, #48]	@ (8001190 <CAN_LoopTest_ProcessSTM32Message+0x78>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	68ba      	ldr	r2, [r7, #8]
 8001162:	4619      	mov	r1, r3
 8001164:	480b      	ldr	r0, [pc, #44]	@ (8001194 <CAN_LoopTest_ProcessSTM32Message+0x7c>)
 8001166:	f007 f9e9 	bl	800853c <iprintf>
               total_loops, loop_time);
        printf("[SUCCESS] Loop #%lu completed successfully\r\n", total_loops);
 800116a:	4b09      	ldr	r3, [pc, #36]	@ (8001190 <CAN_LoopTest_ProcessSTM32Message+0x78>)
 800116c:	681b      	ldr	r3, [r3, #0]
 800116e:	4619      	mov	r1, r3
 8001170:	4809      	ldr	r0, [pc, #36]	@ (8001198 <CAN_LoopTest_ProcessSTM32Message+0x80>)
 8001172:	f007 f9e3 	bl	800853c <iprintf>
        // {
        //     printf("%02X ", data[i]);
        // }
        // printf("\r\n\r\n");
    }
}
 8001176:	bf00      	nop
 8001178:	3710      	adds	r7, #16
 800117a:	46bd      	mov	sp, r7
 800117c:	bd80      	pop	{r7, pc}
 800117e:	bf00      	nop
 8001180:	200001c8 	.word	0x200001c8
 8001184:	200001c0 	.word	0x200001c0
 8001188:	200001d0 	.word	0x200001d0
 800118c:	200001c4 	.word	0x200001c4
 8001190:	200001cc 	.word	0x200001cc
 8001194:	08009d30 	.word	0x08009d30
 8001198:	08009d80 	.word	0x08009d80

0800119c <CAN_SimpleDemo_Init>:
  * @brief  CAN简单Demo初始化
  * @param  None
  * @retval HAL_OK: 成功, HAL_ERROR: 失败
  */
HAL_StatusTypeDef CAN_SimpleDemo_Init(void)
{
 800119c:	b580      	push	{r7, lr}
 800119e:	b08a      	sub	sp, #40	@ 0x28
 80011a0:	af00      	add	r7, sp, #0
    // printf("\r\n=== CAN Simple Demo Initialization ===\r\n");
    
    // 配置CAN1过滤器（接受所有消息）
    CAN_FilterTypeDef sFilterConfig;
    sFilterConfig.FilterBank = 0;
 80011a2:	2300      	movs	r3, #0
 80011a4:	617b      	str	r3, [r7, #20]
    sFilterConfig.FilterMode = CAN_FILTERMODE_IDMASK;
 80011a6:	2300      	movs	r3, #0
 80011a8:	61bb      	str	r3, [r7, #24]
    sFilterConfig.FilterScale = CAN_FILTERSCALE_32BIT;
 80011aa:	2301      	movs	r3, #1
 80011ac:	61fb      	str	r3, [r7, #28]
    sFilterConfig.FilterIdHigh = 0x0000;
 80011ae:	2300      	movs	r3, #0
 80011b0:	603b      	str	r3, [r7, #0]
    sFilterConfig.FilterIdLow = 0x0000;
 80011b2:	2300      	movs	r3, #0
 80011b4:	607b      	str	r3, [r7, #4]
    sFilterConfig.FilterMaskIdHigh = 0x0000;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60bb      	str	r3, [r7, #8]
    sFilterConfig.FilterMaskIdLow = 0x0000;
 80011ba:	2300      	movs	r3, #0
 80011bc:	60fb      	str	r3, [r7, #12]
    sFilterConfig.FilterFIFOAssignment = CAN_RX_FIFO0;
 80011be:	2300      	movs	r3, #0
 80011c0:	613b      	str	r3, [r7, #16]
    sFilterConfig.FilterActivation = ENABLE;
 80011c2:	2301      	movs	r3, #1
 80011c4:	623b      	str	r3, [r7, #32]
    sFilterConfig.SlaveStartFilterBank = 14;
 80011c6:	230e      	movs	r3, #14
 80011c8:	627b      	str	r3, [r7, #36]	@ 0x24
    
    if (HAL_CAN_ConfigFilter(&hcan1, &sFilterConfig) != HAL_OK) {
 80011ca:	463b      	mov	r3, r7
 80011cc:	4619      	mov	r1, r3
 80011ce:	481f      	ldr	r0, [pc, #124]	@ (800124c <CAN_SimpleDemo_Init+0xb0>)
 80011d0:	f001 f8a8 	bl	8002324 <HAL_CAN_ConfigFilter>
 80011d4:	4603      	mov	r3, r0
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d001      	beq.n	80011de <CAN_SimpleDemo_Init+0x42>
        // printf("[ERROR] CAN1 filter configuration failed!\r\n");
        return HAL_ERROR;
 80011da:	2301      	movs	r3, #1
 80011dc:	e032      	b.n	8001244 <CAN_SimpleDemo_Init+0xa8>
    }
    
    // 启动CAN1
    if (HAL_CAN_Start(&hcan1) != HAL_OK) {
 80011de:	481b      	ldr	r0, [pc, #108]	@ (800124c <CAN_SimpleDemo_Init+0xb0>)
 80011e0:	f001 f97e 	bl	80024e0 <HAL_CAN_Start>
 80011e4:	4603      	mov	r3, r0
 80011e6:	2b00      	cmp	r3, #0
 80011e8:	d001      	beq.n	80011ee <CAN_SimpleDemo_Init+0x52>
        // printf("[ERROR] CAN1 start failed!\r\n");
        return HAL_ERROR;
 80011ea:	2301      	movs	r3, #1
 80011ec:	e02a      	b.n	8001244 <CAN_SimpleDemo_Init+0xa8>
    }
    
    // 激活CAN1接收中断
    if (HAL_CAN_ActivateNotification(&hcan1, CAN_IT_RX_FIFO0_MSG_PENDING) != HAL_OK) {
 80011ee:	2102      	movs	r1, #2
 80011f0:	4816      	ldr	r0, [pc, #88]	@ (800124c <CAN_SimpleDemo_Init+0xb0>)
 80011f2:	f001 fbab 	bl	800294c <HAL_CAN_ActivateNotification>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <CAN_SimpleDemo_Init+0x64>
        // printf("[ERROR] CAN1 RX interrupt activation failed!\r\n");
        return HAL_ERROR;
 80011fc:	2301      	movs	r3, #1
 80011fe:	e021      	b.n	8001244 <CAN_SimpleDemo_Init+0xa8>
    }
    
    // 初始化计数器和时间戳
    heartbeat_counter = 0;
 8001200:	4b13      	ldr	r3, [pc, #76]	@ (8001250 <CAN_SimpleDemo_Init+0xb4>)
 8001202:	2200      	movs	r2, #0
 8001204:	601a      	str	r2, [r3, #0]
    data_counter = 0;
 8001206:	4b13      	ldr	r3, [pc, #76]	@ (8001254 <CAN_SimpleDemo_Init+0xb8>)
 8001208:	2200      	movs	r2, #0
 800120a:	601a      	str	r2, [r3, #0]
    status_counter = 0;
 800120c:	4b12      	ldr	r3, [pc, #72]	@ (8001258 <CAN_SimpleDemo_Init+0xbc>)
 800120e:	2200      	movs	r2, #0
 8001210:	601a      	str	r2, [r3, #0]
    control_counter = 0;
 8001212:	4b12      	ldr	r3, [pc, #72]	@ (800125c <CAN_SimpleDemo_Init+0xc0>)
 8001214:	2200      	movs	r2, #0
 8001216:	601a      	str	r2, [r3, #0]
    debug_counter = 0;
 8001218:	4b11      	ldr	r3, [pc, #68]	@ (8001260 <CAN_SimpleDemo_Init+0xc4>)
 800121a:	2200      	movs	r2, #0
 800121c:	601a      	str	r2, [r3, #0]
    
    last_heartbeat_time = 0;
 800121e:	4b11      	ldr	r3, [pc, #68]	@ (8001264 <CAN_SimpleDemo_Init+0xc8>)
 8001220:	2200      	movs	r2, #0
 8001222:	601a      	str	r2, [r3, #0]
    last_data_time = 0;
 8001224:	4b10      	ldr	r3, [pc, #64]	@ (8001268 <CAN_SimpleDemo_Init+0xcc>)
 8001226:	2200      	movs	r2, #0
 8001228:	601a      	str	r2, [r3, #0]
    last_status_time = 0;
 800122a:	4b10      	ldr	r3, [pc, #64]	@ (800126c <CAN_SimpleDemo_Init+0xd0>)
 800122c:	2200      	movs	r2, #0
 800122e:	601a      	str	r2, [r3, #0]
    last_control_time = 0;
 8001230:	4b0f      	ldr	r3, [pc, #60]	@ (8001270 <CAN_SimpleDemo_Init+0xd4>)
 8001232:	2200      	movs	r2, #0
 8001234:	601a      	str	r2, [r3, #0]
    last_debug_time = 0;
 8001236:	4b0f      	ldr	r3, [pc, #60]	@ (8001274 <CAN_SimpleDemo_Init+0xd8>)
 8001238:	2200      	movs	r2, #0
 800123a:	601a      	str	r2, [r3, #0]
    
    demo_initialized = 1;
 800123c:	4b0e      	ldr	r3, [pc, #56]	@ (8001278 <CAN_SimpleDemo_Init+0xdc>)
 800123e:	2201      	movs	r2, #1
 8001240:	701a      	strb	r2, [r3, #0]
    // printf("  - Status (0x%03X): %d ms\r\n", CAN_DEMO_STATUS_ID, STATUS_PERIOD_MS);
    // printf("  - Control (0x%03X): %d ms\r\n", CAN_DEMO_CONTROL_ID, CONTROL_PERIOD_MS);
    // printf("  - Debug (0x%03X): %d ms\r\n", CAN_DEMO_DEBUG_ID, DEBUG_PERIOD_MS);
    // printf("=====================================\r\n\r\n");
    
    return HAL_OK;
 8001242:	2300      	movs	r3, #0
}
 8001244:	4618      	mov	r0, r3
 8001246:	3728      	adds	r7, #40	@ 0x28
 8001248:	46bd      	mov	sp, r7
 800124a:	bd80      	pop	{r7, pc}
 800124c:	20000088 	.word	0x20000088
 8001250:	200001d4 	.word	0x200001d4
 8001254:	200001d8 	.word	0x200001d8
 8001258:	200001dc 	.word	0x200001dc
 800125c:	200001e0 	.word	0x200001e0
 8001260:	200001e4 	.word	0x200001e4
 8001264:	200001e8 	.word	0x200001e8
 8001268:	200001ec 	.word	0x200001ec
 800126c:	200001f0 	.word	0x200001f0
 8001270:	200001f4 	.word	0x200001f4
 8001274:	200001f8 	.word	0x200001f8
 8001278:	200001fc 	.word	0x200001fc

0800127c <CAN_SimpleDemo_Task>:
  * @brief  CAN简单Demo主任务
  * @param  argument: 任务参数
  * @retval None
  */
void CAN_SimpleDemo_Task(void *argument)
{
 800127c:	b580      	push	{r7, lr}
 800127e:	b084      	sub	sp, #16
 8001280:	af00      	add	r7, sp, #0
 8001282:	6078      	str	r0, [r7, #4]
    // printf("[TASK] CAN Simple Demo task started\r\n");
    
    // 等待初始化完成
    while (!demo_initialized) {
 8001284:	e002      	b.n	800128c <CAN_SimpleDemo_Task+0x10>
        osDelay(100);
 8001286:	2064      	movs	r0, #100	@ 0x64
 8001288:	f004 fb18 	bl	80058bc <osDelay>
    while (!demo_initialized) {
 800128c:	4b38      	ldr	r3, [pc, #224]	@ (8001370 <CAN_SimpleDemo_Task+0xf4>)
 800128e:	781b      	ldrb	r3, [r3, #0]
 8001290:	2b00      	cmp	r3, #0
 8001292:	d0f8      	beq.n	8001286 <CAN_SimpleDemo_Task+0xa>
    }
    
    // printf("[TASK] Starting CAN message transmission...\r\n");
    
    for (;;) {
        uint32_t current_time = HAL_GetTick();
 8001294:	f000 ff3e 	bl	8002114 <HAL_GetTick>
 8001298:	60f8      	str	r0, [r7, #12]
        
        // 发送心跳消息
        if ((current_time - last_heartbeat_time) >= HEARTBEAT_PERIOD_MS) {
 800129a:	4b36      	ldr	r3, [pc, #216]	@ (8001374 <CAN_SimpleDemo_Task+0xf8>)
 800129c:	681b      	ldr	r3, [r3, #0]
 800129e:	68fa      	ldr	r2, [r7, #12]
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 80012a6:	d30c      	bcc.n	80012c2 <CAN_SimpleDemo_Task+0x46>
            if (CAN_Demo_SendHeartbeat() == HAL_OK) {
 80012a8:	f000 f878 	bl	800139c <CAN_Demo_SendHeartbeat>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d107      	bne.n	80012c2 <CAN_SimpleDemo_Task+0x46>
                heartbeat_counter++;
 80012b2:	4b31      	ldr	r3, [pc, #196]	@ (8001378 <CAN_SimpleDemo_Task+0xfc>)
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	3301      	adds	r3, #1
 80012b8:	4a2f      	ldr	r2, [pc, #188]	@ (8001378 <CAN_SimpleDemo_Task+0xfc>)
 80012ba:	6013      	str	r3, [r2, #0]
                last_heartbeat_time = current_time;
 80012bc:	4a2d      	ldr	r2, [pc, #180]	@ (8001374 <CAN_SimpleDemo_Task+0xf8>)
 80012be:	68fb      	ldr	r3, [r7, #12]
 80012c0:	6013      	str	r3, [r2, #0]
                // printf("[TX] Heartbeat #%lu sent (ID: 0x%03X)\r\n", heartbeat_counter, CAN_DEMO_HEARTBEAT_ID);
            }
        }
        
        // 发送数据消息
        if ((current_time - last_data_time) >= DATA_PERIOD_MS) {
 80012c2:	4b2e      	ldr	r3, [pc, #184]	@ (800137c <CAN_SimpleDemo_Task+0x100>)
 80012c4:	681b      	ldr	r3, [r3, #0]
 80012c6:	68fa      	ldr	r2, [r7, #12]
 80012c8:	1ad3      	subs	r3, r2, r3
 80012ca:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 80012ce:	d30c      	bcc.n	80012ea <CAN_SimpleDemo_Task+0x6e>
            if (CAN_Demo_SendDataMessage() == HAL_OK) {
 80012d0:	f000 f8a4 	bl	800141c <CAN_Demo_SendDataMessage>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d107      	bne.n	80012ea <CAN_SimpleDemo_Task+0x6e>
                data_counter++;
 80012da:	4b29      	ldr	r3, [pc, #164]	@ (8001380 <CAN_SimpleDemo_Task+0x104>)
 80012dc:	681b      	ldr	r3, [r3, #0]
 80012de:	3301      	adds	r3, #1
 80012e0:	4a27      	ldr	r2, [pc, #156]	@ (8001380 <CAN_SimpleDemo_Task+0x104>)
 80012e2:	6013      	str	r3, [r2, #0]
                last_data_time = current_time;
 80012e4:	4a25      	ldr	r2, [pc, #148]	@ (800137c <CAN_SimpleDemo_Task+0x100>)
 80012e6:	68fb      	ldr	r3, [r7, #12]
 80012e8:	6013      	str	r3, [r2, #0]
                // printf("[TX] Data #%lu sent (ID: 0x%03X)\r\n", data_counter, CAN_DEMO_DATA_ID);
            }
        }
        
        // 发送状态消息
        if ((current_time - last_status_time) >= STATUS_PERIOD_MS) {
 80012ea:	4b26      	ldr	r3, [pc, #152]	@ (8001384 <CAN_SimpleDemo_Task+0x108>)
 80012ec:	681b      	ldr	r3, [r3, #0]
 80012ee:	68fa      	ldr	r2, [r7, #12]
 80012f0:	1ad3      	subs	r3, r2, r3
 80012f2:	f640 32b7 	movw	r2, #2999	@ 0xbb7
 80012f6:	4293      	cmp	r3, r2
 80012f8:	d90c      	bls.n	8001314 <CAN_SimpleDemo_Task+0x98>
            if (CAN_Demo_SendStatusMessage() == HAL_OK) {
 80012fa:	f000 f8e5 	bl	80014c8 <CAN_Demo_SendStatusMessage>
 80012fe:	4603      	mov	r3, r0
 8001300:	2b00      	cmp	r3, #0
 8001302:	d107      	bne.n	8001314 <CAN_SimpleDemo_Task+0x98>
                status_counter++;
 8001304:	4b20      	ldr	r3, [pc, #128]	@ (8001388 <CAN_SimpleDemo_Task+0x10c>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	3301      	adds	r3, #1
 800130a:	4a1f      	ldr	r2, [pc, #124]	@ (8001388 <CAN_SimpleDemo_Task+0x10c>)
 800130c:	6013      	str	r3, [r2, #0]
                last_status_time = current_time;
 800130e:	4a1d      	ldr	r2, [pc, #116]	@ (8001384 <CAN_SimpleDemo_Task+0x108>)
 8001310:	68fb      	ldr	r3, [r7, #12]
 8001312:	6013      	str	r3, [r2, #0]
                // printf("[TX] Status #%lu sent (ID: 0x%03X)\r\n", status_counter, CAN_DEMO_STATUS_ID);
            }
        }
        
        // 发送控制消息
        if ((current_time - last_control_time) >= CONTROL_PERIOD_MS) {
 8001314:	4b1d      	ldr	r3, [pc, #116]	@ (800138c <CAN_SimpleDemo_Task+0x110>)
 8001316:	681b      	ldr	r3, [r3, #0]
 8001318:	68fa      	ldr	r2, [r7, #12]
 800131a:	1ad3      	subs	r3, r2, r3
 800131c:	f241 3287 	movw	r2, #4999	@ 0x1387
 8001320:	4293      	cmp	r3, r2
 8001322:	d90c      	bls.n	800133e <CAN_SimpleDemo_Task+0xc2>
            if (CAN_Demo_SendControlMessage() == HAL_OK) {
 8001324:	f000 f910 	bl	8001548 <CAN_Demo_SendControlMessage>
 8001328:	4603      	mov	r3, r0
 800132a:	2b00      	cmp	r3, #0
 800132c:	d107      	bne.n	800133e <CAN_SimpleDemo_Task+0xc2>
                control_counter++;
 800132e:	4b18      	ldr	r3, [pc, #96]	@ (8001390 <CAN_SimpleDemo_Task+0x114>)
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	3301      	adds	r3, #1
 8001334:	4a16      	ldr	r2, [pc, #88]	@ (8001390 <CAN_SimpleDemo_Task+0x114>)
 8001336:	6013      	str	r3, [r2, #0]
                last_control_time = current_time;
 8001338:	4a14      	ldr	r2, [pc, #80]	@ (800138c <CAN_SimpleDemo_Task+0x110>)
 800133a:	68fb      	ldr	r3, [r7, #12]
 800133c:	6013      	str	r3, [r2, #0]
                // printf("[TX] Control #%lu sent (ID: 0x%03X)\r\n", control_counter, CAN_DEMO_CONTROL_ID);
            }
        }
        
        // 发送调试消息
        if ((current_time - last_debug_time) >= DEBUG_PERIOD_MS) {
 800133e:	4b15      	ldr	r3, [pc, #84]	@ (8001394 <CAN_SimpleDemo_Task+0x118>)
 8001340:	681b      	ldr	r3, [r3, #0]
 8001342:	68fa      	ldr	r2, [r7, #12]
 8001344:	1ad3      	subs	r3, r2, r3
 8001346:	f242 720f 	movw	r2, #9999	@ 0x270f
 800134a:	4293      	cmp	r3, r2
 800134c:	d90c      	bls.n	8001368 <CAN_SimpleDemo_Task+0xec>
            if (CAN_Demo_SendDebugMessage() == HAL_OK) {
 800134e:	f000 f93d 	bl	80015cc <CAN_Demo_SendDebugMessage>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d107      	bne.n	8001368 <CAN_SimpleDemo_Task+0xec>
                debug_counter++;
 8001358:	4b0f      	ldr	r3, [pc, #60]	@ (8001398 <CAN_SimpleDemo_Task+0x11c>)
 800135a:	681b      	ldr	r3, [r3, #0]
 800135c:	3301      	adds	r3, #1
 800135e:	4a0e      	ldr	r2, [pc, #56]	@ (8001398 <CAN_SimpleDemo_Task+0x11c>)
 8001360:	6013      	str	r3, [r2, #0]
                last_debug_time = current_time;
 8001362:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <CAN_SimpleDemo_Task+0x118>)
 8001364:	68fb      	ldr	r3, [r7, #12]
 8001366:	6013      	str	r3, [r2, #0]
                // printf("[TX] Debug #%lu sent (ID: 0x%03X)\r\n", debug_counter, CAN_DEMO_DEBUG_ID);
            }
        }
        
        // 任务延时
        osDelay(50);
 8001368:	2032      	movs	r0, #50	@ 0x32
 800136a:	f004 faa7 	bl	80058bc <osDelay>
    for (;;) {
 800136e:	e791      	b.n	8001294 <CAN_SimpleDemo_Task+0x18>
 8001370:	200001fc 	.word	0x200001fc
 8001374:	200001e8 	.word	0x200001e8
 8001378:	200001d4 	.word	0x200001d4
 800137c:	200001ec 	.word	0x200001ec
 8001380:	200001d8 	.word	0x200001d8
 8001384:	200001f0 	.word	0x200001f0
 8001388:	200001dc 	.word	0x200001dc
 800138c:	200001f4 	.word	0x200001f4
 8001390:	200001e0 	.word	0x200001e0
 8001394:	200001f8 	.word	0x200001f8
 8001398:	200001e4 	.word	0x200001e4

0800139c <CAN_Demo_SendHeartbeat>:
/**
  * @brief  发送心跳消息
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_Demo_SendHeartbeat(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b08a      	sub	sp, #40	@ 0x28
 80013a0:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    uint32_t current_time = HAL_GetTick();
 80013a2:	f000 feb7 	bl	8002114 <HAL_GetTick>
 80013a6:	6278      	str	r0, [r7, #36]	@ 0x24
    
    TxHeader.StdId = CAN_DEMO_HEARTBEAT_ID;
 80013a8:	f44f 7380 	mov.w	r3, #256	@ 0x100
 80013ac:	60fb      	str	r3, [r7, #12]
    TxHeader.ExtId = 0x00;
 80013ae:	2300      	movs	r3, #0
 80013b0:	613b      	str	r3, [r7, #16]
    TxHeader.RTR = CAN_RTR_DATA;
 80013b2:	2300      	movs	r3, #0
 80013b4:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 80013b6:	2300      	movs	r3, #0
 80013b8:	617b      	str	r3, [r7, #20]
    TxHeader.DLC = 8;
 80013ba:	2308      	movs	r3, #8
 80013bc:	61fb      	str	r3, [r7, #28]
    TxHeader.TransmitGlobalTime = DISABLE;
 80013be:	2300      	movs	r3, #0
 80013c0:	f887 3020 	strb.w	r3, [r7, #32]
    
    // 心跳消息数据
    TxData[0] = 0xAA;  // 心跳标识
 80013c4:	23aa      	movs	r3, #170	@ 0xaa
 80013c6:	713b      	strb	r3, [r7, #4]
    TxData[1] = 0x55;  // 心跳标识
 80013c8:	2355      	movs	r3, #85	@ 0x55
 80013ca:	717b      	strb	r3, [r7, #5]
    TxData[2] = (uint8_t)(heartbeat_counter >> 8);
 80013cc:	4b11      	ldr	r3, [pc, #68]	@ (8001414 <CAN_Demo_SendHeartbeat+0x78>)
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	0a1b      	lsrs	r3, r3, #8
 80013d2:	b2db      	uxtb	r3, r3
 80013d4:	71bb      	strb	r3, [r7, #6]
    TxData[3] = (uint8_t)heartbeat_counter;
 80013d6:	4b0f      	ldr	r3, [pc, #60]	@ (8001414 <CAN_Demo_SendHeartbeat+0x78>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	b2db      	uxtb	r3, r3
 80013dc:	71fb      	strb	r3, [r7, #7]
    TxData[4] = (uint8_t)(current_time >> 24);
 80013de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e0:	0e1b      	lsrs	r3, r3, #24
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	723b      	strb	r3, [r7, #8]
    TxData[5] = (uint8_t)(current_time >> 16);
 80013e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013e8:	0c1b      	lsrs	r3, r3, #16
 80013ea:	b2db      	uxtb	r3, r3
 80013ec:	727b      	strb	r3, [r7, #9]
    TxData[6] = (uint8_t)(current_time >> 8);
 80013ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f0:	0a1b      	lsrs	r3, r3, #8
 80013f2:	b2db      	uxtb	r3, r3
 80013f4:	72bb      	strb	r3, [r7, #10]
    TxData[7] = (uint8_t)current_time;
 80013f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013f8:	b2db      	uxtb	r3, r3
 80013fa:	72fb      	strb	r3, [r7, #11]
    
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80013fc:	463b      	mov	r3, r7
 80013fe:	1d3a      	adds	r2, r7, #4
 8001400:	f107 010c 	add.w	r1, r7, #12
 8001404:	4804      	ldr	r0, [pc, #16]	@ (8001418 <CAN_Demo_SendHeartbeat+0x7c>)
 8001406:	f001 f8af 	bl	8002568 <HAL_CAN_AddTxMessage>
 800140a:	4603      	mov	r3, r0
}
 800140c:	4618      	mov	r0, r3
 800140e:	3728      	adds	r7, #40	@ 0x28
 8001410:	46bd      	mov	sp, r7
 8001412:	bd80      	pop	{r7, pc}
 8001414:	200001d4 	.word	0x200001d4
 8001418:	20000088 	.word	0x20000088

0800141c <CAN_Demo_SendDataMessage>:
/**
  * @brief  发送数据消息
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_Demo_SendDataMessage(void)
{
 800141c:	b580      	push	{r7, lr}
 800141e:	b08a      	sub	sp, #40	@ 0x28
 8001420:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    
    TxHeader.StdId = CAN_DEMO_DATA_ID;
 8001422:	f44f 7300 	mov.w	r3, #512	@ 0x200
 8001426:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0x00;
 8001428:	2300      	movs	r3, #0
 800142a:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 800142c:	2300      	movs	r3, #0
 800142e:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 8001430:	2300      	movs	r3, #0
 8001432:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001434:	2308      	movs	r3, #8
 8001436:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8001438:	2300      	movs	r3, #0
 800143a:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    // 数据消息（模拟传感器数据）
    TxData[0] = 0xDA;  // 数据标识
 800143e:	23da      	movs	r3, #218	@ 0xda
 8001440:	723b      	strb	r3, [r7, #8]
    TxData[1] = 0x7A;  // 数据标识
 8001442:	237a      	movs	r3, #122	@ 0x7a
 8001444:	727b      	strb	r3, [r7, #9]
    TxData[2] = (uint8_t)(data_counter >> 8);
 8001446:	4b1e      	ldr	r3, [pc, #120]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	0a1b      	lsrs	r3, r3, #8
 800144c:	b2db      	uxtb	r3, r3
 800144e:	72bb      	strb	r3, [r7, #10]
    TxData[3] = (uint8_t)data_counter;
 8001450:	4b1b      	ldr	r3, [pc, #108]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b2db      	uxtb	r3, r3
 8001456:	72fb      	strb	r3, [r7, #11]
    TxData[4] = (uint8_t)((data_counter * 123) & 0xFF);  // 模拟温度
 8001458:	4b19      	ldr	r3, [pc, #100]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	b2db      	uxtb	r3, r3
 800145e:	461a      	mov	r2, r3
 8001460:	0152      	lsls	r2, r2, #5
 8001462:	1ad2      	subs	r2, r2, r3
 8001464:	0092      	lsls	r2, r2, #2
 8001466:	1ad3      	subs	r3, r2, r3
 8001468:	b2db      	uxtb	r3, r3
 800146a:	733b      	strb	r3, [r7, #12]
    TxData[5] = (uint8_t)((data_counter * 456) & 0xFF);  // 模拟湿度
 800146c:	4b14      	ldr	r3, [pc, #80]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 800146e:	681b      	ldr	r3, [r3, #0]
 8001470:	b2db      	uxtb	r3, r3
 8001472:	461a      	mov	r2, r3
 8001474:	00db      	lsls	r3, r3, #3
 8001476:	1ad3      	subs	r3, r2, r3
 8001478:	00db      	lsls	r3, r3, #3
 800147a:	b2db      	uxtb	r3, r3
 800147c:	737b      	strb	r3, [r7, #13]
    TxData[6] = (uint8_t)((data_counter * 789) & 0xFF);  // 模拟压力
 800147e:	4b10      	ldr	r3, [pc, #64]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 8001480:	681b      	ldr	r3, [r3, #0]
 8001482:	b2db      	uxtb	r3, r3
 8001484:	461a      	mov	r2, r3
 8001486:	0052      	lsls	r2, r2, #1
 8001488:	4413      	add	r3, r2
 800148a:	461a      	mov	r2, r3
 800148c:	00d2      	lsls	r2, r2, #3
 800148e:	1ad3      	subs	r3, r2, r3
 8001490:	b2db      	uxtb	r3, r3
 8001492:	73bb      	strb	r3, [r7, #14]
    TxData[7] = (uint8_t)((data_counter * 321) & 0xFF);  // 模拟电压
 8001494:	4b0a      	ldr	r3, [pc, #40]	@ (80014c0 <CAN_Demo_SendDataMessage+0xa4>)
 8001496:	681b      	ldr	r3, [r3, #0]
 8001498:	b2db      	uxtb	r3, r3
 800149a:	461a      	mov	r2, r3
 800149c:	0192      	lsls	r2, r2, #6
 800149e:	4413      	add	r3, r2
 80014a0:	b2db      	uxtb	r3, r3
 80014a2:	73fb      	strb	r3, [r7, #15]
    
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80014a4:	1d3b      	adds	r3, r7, #4
 80014a6:	f107 0208 	add.w	r2, r7, #8
 80014aa:	f107 0110 	add.w	r1, r7, #16
 80014ae:	4805      	ldr	r0, [pc, #20]	@ (80014c4 <CAN_Demo_SendDataMessage+0xa8>)
 80014b0:	f001 f85a 	bl	8002568 <HAL_CAN_AddTxMessage>
 80014b4:	4603      	mov	r3, r0
}
 80014b6:	4618      	mov	r0, r3
 80014b8:	3728      	adds	r7, #40	@ 0x28
 80014ba:	46bd      	mov	sp, r7
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	200001d8 	.word	0x200001d8
 80014c4:	20000088 	.word	0x20000088

080014c8 <CAN_Demo_SendStatusMessage>:
/**
  * @brief  发送状态消息
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_Demo_SendStatusMessage(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	b08a      	sub	sp, #40	@ 0x28
 80014cc:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    
    TxHeader.StdId = CAN_DEMO_STATUS_ID;
 80014ce:	f44f 7340 	mov.w	r3, #768	@ 0x300
 80014d2:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0x00;
 80014d4:	2300      	movs	r3, #0
 80014d6:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 80014d8:	2300      	movs	r3, #0
 80014da:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 80014dc:	2300      	movs	r3, #0
 80014de:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 80014e0:	2308      	movs	r3, #8
 80014e2:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 80014e4:	2300      	movs	r3, #0
 80014e6:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    // 状态消息
    TxData[0] = 0x5A;  // 状态标识
 80014ea:	235a      	movs	r3, #90	@ 0x5a
 80014ec:	723b      	strb	r3, [r7, #8]
    TxData[1] = 0xA5;  // 状态标识
 80014ee:	23a5      	movs	r3, #165	@ 0xa5
 80014f0:	727b      	strb	r3, [r7, #9]
    TxData[2] = (uint8_t)(status_counter >> 8);
 80014f2:	4b11      	ldr	r3, [pc, #68]	@ (8001538 <CAN_Demo_SendStatusMessage+0x70>)
 80014f4:	681b      	ldr	r3, [r3, #0]
 80014f6:	0a1b      	lsrs	r3, r3, #8
 80014f8:	b2db      	uxtb	r3, r3
 80014fa:	72bb      	strb	r3, [r7, #10]
    TxData[3] = (uint8_t)status_counter;
 80014fc:	4b0e      	ldr	r3, [pc, #56]	@ (8001538 <CAN_Demo_SendStatusMessage+0x70>)
 80014fe:	681b      	ldr	r3, [r3, #0]
 8001500:	b2db      	uxtb	r3, r3
 8001502:	72fb      	strb	r3, [r7, #11]
    TxData[4] = 0x01;  // 系统状态：正常
 8001504:	2301      	movs	r3, #1
 8001506:	733b      	strb	r3, [r7, #12]
    TxData[5] = 0x00;  // 错误代码：无错误
 8001508:	2300      	movs	r3, #0
 800150a:	737b      	strb	r3, [r7, #13]
    TxData[6] = (uint8_t)(heartbeat_counter & 0xFF);  // 心跳计数
 800150c:	4b0b      	ldr	r3, [pc, #44]	@ (800153c <CAN_Demo_SendStatusMessage+0x74>)
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	b2db      	uxtb	r3, r3
 8001512:	73bb      	strb	r3, [r7, #14]
    TxData[7] = (uint8_t)(data_counter & 0xFF);       // 数据计数
 8001514:	4b0a      	ldr	r3, [pc, #40]	@ (8001540 <CAN_Demo_SendStatusMessage+0x78>)
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	b2db      	uxtb	r3, r3
 800151a:	73fb      	strb	r3, [r7, #15]
    
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800151c:	1d3b      	adds	r3, r7, #4
 800151e:	f107 0208 	add.w	r2, r7, #8
 8001522:	f107 0110 	add.w	r1, r7, #16
 8001526:	4807      	ldr	r0, [pc, #28]	@ (8001544 <CAN_Demo_SendStatusMessage+0x7c>)
 8001528:	f001 f81e 	bl	8002568 <HAL_CAN_AddTxMessage>
 800152c:	4603      	mov	r3, r0
}
 800152e:	4618      	mov	r0, r3
 8001530:	3728      	adds	r7, #40	@ 0x28
 8001532:	46bd      	mov	sp, r7
 8001534:	bd80      	pop	{r7, pc}
 8001536:	bf00      	nop
 8001538:	200001dc 	.word	0x200001dc
 800153c:	200001d4 	.word	0x200001d4
 8001540:	200001d8 	.word	0x200001d8
 8001544:	20000088 	.word	0x20000088

08001548 <CAN_Demo_SendControlMessage>:
/**
  * @brief  发送控制消息
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_Demo_SendControlMessage(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	b08a      	sub	sp, #40	@ 0x28
 800154c:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    
    TxHeader.StdId = CAN_DEMO_CONTROL_ID;
 800154e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001552:	613b      	str	r3, [r7, #16]
    TxHeader.ExtId = 0x00;
 8001554:	2300      	movs	r3, #0
 8001556:	617b      	str	r3, [r7, #20]
    TxHeader.RTR = CAN_RTR_DATA;
 8001558:	2300      	movs	r3, #0
 800155a:	61fb      	str	r3, [r7, #28]
    TxHeader.IDE = CAN_ID_STD;
 800155c:	2300      	movs	r3, #0
 800155e:	61bb      	str	r3, [r7, #24]
    TxHeader.DLC = 8;
 8001560:	2308      	movs	r3, #8
 8001562:	623b      	str	r3, [r7, #32]
    TxHeader.TransmitGlobalTime = DISABLE;
 8001564:	2300      	movs	r3, #0
 8001566:	f887 3024 	strb.w	r3, [r7, #36]	@ 0x24
    
    // 控制消息
    TxData[0] = 0xC0;  // 控制标识
 800156a:	23c0      	movs	r3, #192	@ 0xc0
 800156c:	723b      	strb	r3, [r7, #8]
    TxData[1] = 0x01;  // 控制标识
 800156e:	2301      	movs	r3, #1
 8001570:	727b      	strb	r3, [r7, #9]
    TxData[2] = (uint8_t)(control_counter >> 8);
 8001572:	4b14      	ldr	r3, [pc, #80]	@ (80015c4 <CAN_Demo_SendControlMessage+0x7c>)
 8001574:	681b      	ldr	r3, [r3, #0]
 8001576:	0a1b      	lsrs	r3, r3, #8
 8001578:	b2db      	uxtb	r3, r3
 800157a:	72bb      	strb	r3, [r7, #10]
    TxData[3] = (uint8_t)control_counter;
 800157c:	4b11      	ldr	r3, [pc, #68]	@ (80015c4 <CAN_Demo_SendControlMessage+0x7c>)
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	b2db      	uxtb	r3, r3
 8001582:	72fb      	strb	r3, [r7, #11]
    TxData[4] = (control_counter % 2) ? 0xFF : 0x00;  // 开关控制
 8001584:	4b0f      	ldr	r3, [pc, #60]	@ (80015c4 <CAN_Demo_SendControlMessage+0x7c>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f003 0301 	and.w	r3, r3, #1
 800158c:	2b00      	cmp	r3, #0
 800158e:	d001      	beq.n	8001594 <CAN_Demo_SendControlMessage+0x4c>
 8001590:	23ff      	movs	r3, #255	@ 0xff
 8001592:	e000      	b.n	8001596 <CAN_Demo_SendControlMessage+0x4e>
 8001594:	2300      	movs	r3, #0
 8001596:	733b      	strb	r3, [r7, #12]
    TxData[5] = (uint8_t)(control_counter % 256);     // PWM值
 8001598:	4b0a      	ldr	r3, [pc, #40]	@ (80015c4 <CAN_Demo_SendControlMessage+0x7c>)
 800159a:	681b      	ldr	r3, [r3, #0]
 800159c:	b2db      	uxtb	r3, r3
 800159e:	737b      	strb	r3, [r7, #13]
    TxData[6] = 0x12;  // 预留
 80015a0:	2312      	movs	r3, #18
 80015a2:	73bb      	strb	r3, [r7, #14]
    TxData[7] = 0x34;  // 预留
 80015a4:	2334      	movs	r3, #52	@ 0x34
 80015a6:	73fb      	strb	r3, [r7, #15]
    
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 80015a8:	1d3b      	adds	r3, r7, #4
 80015aa:	f107 0208 	add.w	r2, r7, #8
 80015ae:	f107 0110 	add.w	r1, r7, #16
 80015b2:	4805      	ldr	r0, [pc, #20]	@ (80015c8 <CAN_Demo_SendControlMessage+0x80>)
 80015b4:	f000 ffd8 	bl	8002568 <HAL_CAN_AddTxMessage>
 80015b8:	4603      	mov	r3, r0
}
 80015ba:	4618      	mov	r0, r3
 80015bc:	3728      	adds	r7, #40	@ 0x28
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	200001e0 	.word	0x200001e0
 80015c8:	20000088 	.word	0x20000088

080015cc <CAN_Demo_SendDebugMessage>:
/**
  * @brief  发送调试消息
  * @retval HAL状态
  */
static HAL_StatusTypeDef CAN_Demo_SendDebugMessage(void)
{
 80015cc:	b580      	push	{r7, lr}
 80015ce:	b08a      	sub	sp, #40	@ 0x28
 80015d0:	af00      	add	r7, sp, #0
    CAN_TxHeaderTypeDef TxHeader;
    uint8_t TxData[8];
    uint32_t TxMailbox;
    uint32_t current_time = HAL_GetTick();
 80015d2:	f000 fd9f 	bl	8002114 <HAL_GetTick>
 80015d6:	6278      	str	r0, [r7, #36]	@ 0x24
    
    TxHeader.StdId = CAN_DEMO_DEBUG_ID;
 80015d8:	f44f 63a0 	mov.w	r3, #1280	@ 0x500
 80015dc:	60fb      	str	r3, [r7, #12]
    TxHeader.ExtId = 0x00;
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
    TxHeader.RTR = CAN_RTR_DATA;
 80015e2:	2300      	movs	r3, #0
 80015e4:	61bb      	str	r3, [r7, #24]
    TxHeader.IDE = CAN_ID_STD;
 80015e6:	2300      	movs	r3, #0
 80015e8:	617b      	str	r3, [r7, #20]
    TxHeader.DLC = 8;
 80015ea:	2308      	movs	r3, #8
 80015ec:	61fb      	str	r3, [r7, #28]
    TxHeader.TransmitGlobalTime = DISABLE;
 80015ee:	2300      	movs	r3, #0
 80015f0:	f887 3020 	strb.w	r3, [r7, #32]
    
    // 调试消息
    TxData[0] = 0xDE;  // 调试标识
 80015f4:	23de      	movs	r3, #222	@ 0xde
 80015f6:	713b      	strb	r3, [r7, #4]
    TxData[1] = 0xBE;  // 调试标识
 80015f8:	23be      	movs	r3, #190	@ 0xbe
 80015fa:	717b      	strb	r3, [r7, #5]
    TxData[2] = (uint8_t)(debug_counter >> 8);
 80015fc:	4b11      	ldr	r3, [pc, #68]	@ (8001644 <CAN_Demo_SendDebugMessage+0x78>)
 80015fe:	681b      	ldr	r3, [r3, #0]
 8001600:	0a1b      	lsrs	r3, r3, #8
 8001602:	b2db      	uxtb	r3, r3
 8001604:	71bb      	strb	r3, [r7, #6]
    TxData[3] = (uint8_t)debug_counter;
 8001606:	4b0f      	ldr	r3, [pc, #60]	@ (8001644 <CAN_Demo_SendDebugMessage+0x78>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	b2db      	uxtb	r3, r3
 800160c:	71fb      	strb	r3, [r7, #7]
    TxData[4] = (uint8_t)(current_time >> 24);
 800160e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001610:	0e1b      	lsrs	r3, r3, #24
 8001612:	b2db      	uxtb	r3, r3
 8001614:	723b      	strb	r3, [r7, #8]
    TxData[5] = (uint8_t)(current_time >> 16);
 8001616:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001618:	0c1b      	lsrs	r3, r3, #16
 800161a:	b2db      	uxtb	r3, r3
 800161c:	727b      	strb	r3, [r7, #9]
    TxData[6] = (uint8_t)(current_time >> 8);
 800161e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001620:	0a1b      	lsrs	r3, r3, #8
 8001622:	b2db      	uxtb	r3, r3
 8001624:	72bb      	strb	r3, [r7, #10]
    TxData[7] = (uint8_t)current_time;
 8001626:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001628:	b2db      	uxtb	r3, r3
 800162a:	72fb      	strb	r3, [r7, #11]
    
    return HAL_CAN_AddTxMessage(&hcan1, &TxHeader, TxData, &TxMailbox);
 800162c:	463b      	mov	r3, r7
 800162e:	1d3a      	adds	r2, r7, #4
 8001630:	f107 010c 	add.w	r1, r7, #12
 8001634:	4804      	ldr	r0, [pc, #16]	@ (8001648 <CAN_Demo_SendDebugMessage+0x7c>)
 8001636:	f000 ff97 	bl	8002568 <HAL_CAN_AddTxMessage>
 800163a:	4603      	mov	r3, r0
 800163c:	4618      	mov	r0, r3
 800163e:	3728      	adds	r7, #40	@ 0x28
 8001640:	46bd      	mov	sp, r7
 8001642:	bd80      	pop	{r7, pc}
 8001644:	200001e4 	.word	0x200001e4
 8001648:	20000088 	.word	0x20000088

0800164c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800164c:	b580      	push	{r7, lr}
 800164e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001650:	f000 fd2a 	bl	80020a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001654:	f000 f854 	bl	8001700 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001658:	f000 f8f2 	bl	8001840 <MX_GPIO_Init>
  MX_SPI1_Init();
 800165c:	f000 f8ba 	bl	80017d4 <MX_SPI1_Init>
  MX_USART2_UART_Init();
 8001660:	f000 fcce 	bl	8002000 <MX_USART2_UART_Init>
  MX_CAN1_Init();
 8001664:	f7fe ff9a 	bl	800059c <MX_CAN1_Init>
  MX_CAN2_Init();
 8001668:	f7fe ffce 	bl	8000608 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  // Initialize CAN1 Simple Demo
  if (CAN_SimpleDemo_Init() == HAL_OK) {
 800166c:	f7ff fd96 	bl	800119c <CAN_SimpleDemo_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <main+0x2e>
    // printf("\r\n=== CAN2 Receiver Mode ===\r\n");
    // printf("CAN1: Initialized (Silent Mode)\r\n");
  } else {
    // printf("\r\nCAN1 initialization failed!\r\n");
    Error_Handler();
 8001676:	f000 f963 	bl	8001940 <Error_Handler>
  }
  
  // Initialize CAN2 Demo (仅接收模式)
  if (CAN2_Demo_Init() == HAL_OK) {
 800167a:	f7ff f81d 	bl	80006b8 <CAN2_Demo_Init>
 800167e:	4603      	mov	r3, r0
 8001680:	2b00      	cmp	r3, #0
 8001682:	d001      	beq.n	8001688 <main+0x3c>
    // printf("CAN2: Initialized (Receive Only Mode)\r\n");
    // printf("CAN2 will display all CAN bus messages\r\n\r\n");
  } else {
    // printf("\r\nCAN2 initialization failed!\r\n");
    Error_Handler();
 8001684:	f000 f95c 	bl	8001940 <Error_Handler>
  }
  */
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8001688:	f004 f83c 	bl	8005704 <osKernelInitialize>
  /* start timers, add new ones, ... */
  /* USER CODE END RTOS_TIMERS */

  /* Create the queue(s) */
  /* creation of myQueue01 */
  myQueue01Handle = osMessageQueueNew (10, 13, &myQueue01_attributes);
 800168c:	4a11      	ldr	r2, [pc, #68]	@ (80016d4 <main+0x88>)
 800168e:	210d      	movs	r1, #13
 8001690:	200a      	movs	r0, #10
 8001692:	f004 f92e 	bl	80058f2 <osMessageQueueNew>
 8001696:	4603      	mov	r3, r0
 8001698:	4a0f      	ldr	r2, [pc, #60]	@ (80016d8 <main+0x8c>)
 800169a:	6013      	str	r3, [r2, #0]
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 800169c:	4a0f      	ldr	r2, [pc, #60]	@ (80016dc <main+0x90>)
 800169e:	2100      	movs	r1, #0
 80016a0:	480f      	ldr	r0, [pc, #60]	@ (80016e0 <main+0x94>)
 80016a2:	f004 f879 	bl	8005798 <osThreadNew>
 80016a6:	4603      	mov	r3, r0
 80016a8:	4a0e      	ldr	r2, [pc, #56]	@ (80016e4 <main+0x98>)
 80016aa:	6013      	str	r3, [r2, #0]

  /* creation of CANSendTask */
  CANSendTaskHandle = osThreadNew(StartCANSendTask, NULL, &CANSendTask_attributes);
 80016ac:	4a0e      	ldr	r2, [pc, #56]	@ (80016e8 <main+0x9c>)
 80016ae:	2100      	movs	r1, #0
 80016b0:	480e      	ldr	r0, [pc, #56]	@ (80016ec <main+0xa0>)
 80016b2:	f004 f871 	bl	8005798 <osThreadNew>
 80016b6:	4603      	mov	r3, r0
 80016b8:	4a0d      	ldr	r2, [pc, #52]	@ (80016f0 <main+0xa4>)
 80016ba:	6013      	str	r3, [r2, #0]

  /* creation of CANReceiveTask */
  CANReceiveTaskHandle = osThreadNew(StartCANReceiveTask, NULL, &CANReceiveTask_attributes);
 80016bc:	4a0d      	ldr	r2, [pc, #52]	@ (80016f4 <main+0xa8>)
 80016be:	2100      	movs	r1, #0
 80016c0:	480d      	ldr	r0, [pc, #52]	@ (80016f8 <main+0xac>)
 80016c2:	f004 f869 	bl	8005798 <osThreadNew>
 80016c6:	4603      	mov	r3, r0
 80016c8:	4a0c      	ldr	r2, [pc, #48]	@ (80016fc <main+0xb0>)
 80016ca:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 80016cc:	f004 f83e 	bl	800574c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 80016d0:	bf00      	nop
 80016d2:	e7fd      	b.n	80016d0 <main+0x84>
 80016d4:	08009f50 	.word	0x08009f50
 80016d8:	20000264 	.word	0x20000264
 80016dc:	08009ee4 	.word	0x08009ee4
 80016e0:	080018d9 	.word	0x080018d9
 80016e4:	20000258 	.word	0x20000258
 80016e8:	08009f08 	.word	0x08009f08
 80016ec:	080018eb 	.word	0x080018eb
 80016f0:	2000025c 	.word	0x2000025c
 80016f4:	08009f2c 	.word	0x08009f2c
 80016f8:	08001903 	.word	0x08001903
 80016fc:	20000260 	.word	0x20000260

08001700 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b094      	sub	sp, #80	@ 0x50
 8001704:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001706:	f107 0320 	add.w	r3, r7, #32
 800170a:	2230      	movs	r2, #48	@ 0x30
 800170c:	2100      	movs	r1, #0
 800170e:	4618      	mov	r0, r3
 8001710:	f007 f85c 	bl	80087cc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001714:	f107 030c 	add.w	r3, r7, #12
 8001718:	2200      	movs	r2, #0
 800171a:	601a      	str	r2, [r3, #0]
 800171c:	605a      	str	r2, [r3, #4]
 800171e:	609a      	str	r2, [r3, #8]
 8001720:	60da      	str	r2, [r3, #12]
 8001722:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001724:	2300      	movs	r3, #0
 8001726:	60bb      	str	r3, [r7, #8]
 8001728:	4b28      	ldr	r3, [pc, #160]	@ (80017cc <SystemClock_Config+0xcc>)
 800172a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800172c:	4a27      	ldr	r2, [pc, #156]	@ (80017cc <SystemClock_Config+0xcc>)
 800172e:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001732:	6413      	str	r3, [r2, #64]	@ 0x40
 8001734:	4b25      	ldr	r3, [pc, #148]	@ (80017cc <SystemClock_Config+0xcc>)
 8001736:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001738:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800173c:	60bb      	str	r3, [r7, #8]
 800173e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001740:	2300      	movs	r3, #0
 8001742:	607b      	str	r3, [r7, #4]
 8001744:	4b22      	ldr	r3, [pc, #136]	@ (80017d0 <SystemClock_Config+0xd0>)
 8001746:	681b      	ldr	r3, [r3, #0]
 8001748:	4a21      	ldr	r2, [pc, #132]	@ (80017d0 <SystemClock_Config+0xd0>)
 800174a:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800174e:	6013      	str	r3, [r2, #0]
 8001750:	4b1f      	ldr	r3, [pc, #124]	@ (80017d0 <SystemClock_Config+0xd0>)
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800175c:	2301      	movs	r3, #1
 800175e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001760:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001766:	2302      	movs	r3, #2
 8001768:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800176a:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 800176e:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001770:	2308      	movs	r3, #8
 8001772:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8001774:	f44f 73a8 	mov.w	r3, #336	@ 0x150
 8001778:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800177a:	2302      	movs	r3, #2
 800177c:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 800177e:	2304      	movs	r3, #4
 8001780:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001782:	f107 0320 	add.w	r3, r7, #32
 8001786:	4618      	mov	r0, r3
 8001788:	f001 fe52 	bl	8003430 <HAL_RCC_OscConfig>
 800178c:	4603      	mov	r3, r0
 800178e:	2b00      	cmp	r3, #0
 8001790:	d001      	beq.n	8001796 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8001792:	f000 f8d5 	bl	8001940 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001796:	230f      	movs	r3, #15
 8001798:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800179a:	2302      	movs	r3, #2
 800179c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800179e:	2300      	movs	r3, #0
 80017a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80017a2:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80017a6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80017a8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80017ac:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80017ae:	f107 030c 	add.w	r3, r7, #12
 80017b2:	2105      	movs	r1, #5
 80017b4:	4618      	mov	r0, r3
 80017b6:	f002 f8b3 	bl	8003920 <HAL_RCC_ClockConfig>
 80017ba:	4603      	mov	r3, r0
 80017bc:	2b00      	cmp	r3, #0
 80017be:	d001      	beq.n	80017c4 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80017c0:	f000 f8be 	bl	8001940 <Error_Handler>
  }
}
 80017c4:	bf00      	nop
 80017c6:	3750      	adds	r7, #80	@ 0x50
 80017c8:	46bd      	mov	sp, r7
 80017ca:	bd80      	pop	{r7, pc}
 80017cc:	40023800 	.word	0x40023800
 80017d0:	40007000 	.word	0x40007000

080017d4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80017d4:	b580      	push	{r7, lr}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80017d8:	4b17      	ldr	r3, [pc, #92]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017da:	4a18      	ldr	r2, [pc, #96]	@ (800183c <MX_SPI1_Init+0x68>)
 80017dc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80017de:	4b16      	ldr	r3, [pc, #88]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017e0:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80017e4:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80017e6:	4b14      	ldr	r3, [pc, #80]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017e8:	2200      	movs	r2, #0
 80017ea:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80017ec:	4b12      	ldr	r3, [pc, #72]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80017f2:	4b11      	ldr	r3, [pc, #68]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017f4:	2200      	movs	r2, #0
 80017f6:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001838 <MX_SPI1_Init+0x64>)
 80017fa:	2200      	movs	r2, #0
 80017fc:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80017fe:	4b0e      	ldr	r3, [pc, #56]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001800:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001804:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_32;
 8001806:	4b0c      	ldr	r3, [pc, #48]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001808:	2220      	movs	r2, #32
 800180a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800180c:	4b0a      	ldr	r3, [pc, #40]	@ (8001838 <MX_SPI1_Init+0x64>)
 800180e:	2200      	movs	r2, #0
 8001810:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001812:	4b09      	ldr	r3, [pc, #36]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001814:	2200      	movs	r2, #0
 8001816:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001818:	4b07      	ldr	r3, [pc, #28]	@ (8001838 <MX_SPI1_Init+0x64>)
 800181a:	2200      	movs	r2, #0
 800181c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800181e:	4b06      	ldr	r3, [pc, #24]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001820:	220a      	movs	r2, #10
 8001822:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001824:	4804      	ldr	r0, [pc, #16]	@ (8001838 <MX_SPI1_Init+0x64>)
 8001826:	f002 facd 	bl	8003dc4 <HAL_SPI_Init>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001830:	f000 f886 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001834:	bf00      	nop
 8001836:	bd80      	pop	{r7, pc}
 8001838:	20000200 	.word	0x20000200
 800183c:	40013000 	.word	0x40013000

08001840 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001840:	b480      	push	{r7}
 8001842:	b085      	sub	sp, #20
 8001844:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001846:	2300      	movs	r3, #0
 8001848:	60fb      	str	r3, [r7, #12]
 800184a:	4b17      	ldr	r3, [pc, #92]	@ (80018a8 <MX_GPIO_Init+0x68>)
 800184c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800184e:	4a16      	ldr	r2, [pc, #88]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001850:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001854:	6313      	str	r3, [r2, #48]	@ 0x30
 8001856:	4b14      	ldr	r3, [pc, #80]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001858:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800185a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800185e:	60fb      	str	r3, [r7, #12]
 8001860:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001862:	2300      	movs	r3, #0
 8001864:	60bb      	str	r3, [r7, #8]
 8001866:	4b10      	ldr	r3, [pc, #64]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001868:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800186a:	4a0f      	ldr	r2, [pc, #60]	@ (80018a8 <MX_GPIO_Init+0x68>)
 800186c:	f043 0301 	orr.w	r3, r3, #1
 8001870:	6313      	str	r3, [r2, #48]	@ 0x30
 8001872:	4b0d      	ldr	r3, [pc, #52]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001874:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001876:	f003 0301 	and.w	r3, r3, #1
 800187a:	60bb      	str	r3, [r7, #8]
 800187c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800187e:	2300      	movs	r3, #0
 8001880:	607b      	str	r3, [r7, #4]
 8001882:	4b09      	ldr	r3, [pc, #36]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001884:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001886:	4a08      	ldr	r2, [pc, #32]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001888:	f043 0302 	orr.w	r3, r3, #2
 800188c:	6313      	str	r3, [r2, #48]	@ 0x30
 800188e:	4b06      	ldr	r3, [pc, #24]	@ (80018a8 <MX_GPIO_Init+0x68>)
 8001890:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001892:	f003 0302 	and.w	r3, r3, #2
 8001896:	607b      	str	r3, [r7, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
  // MCP2515相关GPIO初始化代码已注释 - 硬件已移除
  // Set MCP2515 CS pin to high level (deselected state)
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_SET);
  */
  /* USER CODE END MX_GPIO_Init_2 */
}
 800189a:	bf00      	nop
 800189c:	3714      	adds	r7, #20
 800189e:	46bd      	mov	sp, r7
 80018a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018a4:	4770      	bx	lr
 80018a6:	bf00      	nop
 80018a8:	40023800 	.word	0x40023800

080018ac <_write>:
  * @param  ptr: Data pointer
  * @param  len: Data length
  * @retval Number of bytes sent
  */
int _write(int file, char *ptr, int len)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b084      	sub	sp, #16
 80018b0:	af00      	add	r7, sp, #0
 80018b2:	60f8      	str	r0, [r7, #12]
 80018b4:	60b9      	str	r1, [r7, #8]
 80018b6:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t*)ptr, len, HAL_MAX_DELAY);
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f04f 33ff 	mov.w	r3, #4294967295
 80018c0:	68b9      	ldr	r1, [r7, #8]
 80018c2:	4804      	ldr	r0, [pc, #16]	@ (80018d4 <_write+0x28>)
 80018c4:	f002 ff12 	bl	80046ec <HAL_UART_Transmit>
  return len;
 80018c8:	687b      	ldr	r3, [r7, #4]
}
 80018ca:	4618      	mov	r0, r3
 80018cc:	3710      	adds	r7, #16
 80018ce:	46bd      	mov	sp, r7
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200002b8 	.word	0x200002b8

080018d8 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
    // uint32_t can2_state = HAL_CAN_GetState(&hcan2);
    // printf("CAN2 State: %lu\r\n", can2_state);
    
    // printf("\r\n");
    
    osDelay(10000);  // 10秒延时
 80018e0:	f242 7010 	movw	r0, #10000	@ 0x2710
 80018e4:	f003 ffea 	bl	80058bc <osDelay>
 80018e8:	e7fa      	b.n	80018e0 <StartDefaultTask+0x8>

080018ea <StartCANSendTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANSendTask */
void StartCANSendTask(void *argument)
{
 80018ea:	b580      	push	{r7, lr}
 80018ec:	b082      	sub	sp, #8
 80018ee:	af00      	add	r7, sp, #0
 80018f0:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANSendTask */
  /* CAN1发送任务 - 恢复CAN1发送功能 */
  /* Infinite loop */
  for(;;)
  {
    CAN_SimpleDemo_Task(argument);  // 恢复CAN1发送消息
 80018f2:	6878      	ldr	r0, [r7, #4]
 80018f4:	f7ff fcc2 	bl	800127c <CAN_SimpleDemo_Task>
    osDelay(10);  // 正常延时
 80018f8:	200a      	movs	r0, #10
 80018fa:	f003 ffdf 	bl	80058bc <osDelay>
    CAN_SimpleDemo_Task(argument);  // 恢复CAN1发送消息
 80018fe:	bf00      	nop
 8001900:	e7f7      	b.n	80018f2 <StartCANSendTask+0x8>

08001902 <StartCANReceiveTask>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_StartCANReceiveTask */
void StartCANReceiveTask(void *argument)
{
 8001902:	b580      	push	{r7, lr}
 8001904:	b082      	sub	sp, #8
 8001906:	af00      	add	r7, sp, #0
 8001908:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartCANReceiveTask */
  /* Infinite loop */
  for(;;)
  {
    // 启用CAN2任务以进行状态监控和硬件连接测试
    CAN2_Demo_Task(argument);  // 重新启用 - 用于状态监控和连接测试
 800190a:	6878      	ldr	r0, [r7, #4]
 800190c:	f7fe ff96 	bl	800083c <CAN2_Demo_Task>
    // CAN2_Test_Task();          // 保持禁用 - CAN2仅接收
    
    osDelay(10);  // 减少延时以确保任务正常运行
 8001910:	200a      	movs	r0, #10
 8001912:	f003 ffd3 	bl	80058bc <osDelay>
    CAN2_Demo_Task(argument);  // 重新启用 - 用于状态监控和连接测试
 8001916:	bf00      	nop
 8001918:	e7f7      	b.n	800190a <StartCANReceiveTask+0x8>
	...

0800191c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b082      	sub	sp, #8
 8001920:	af00      	add	r7, sp, #0
 8001922:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1)
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	4a04      	ldr	r2, [pc, #16]	@ (800193c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800192a:	4293      	cmp	r3, r2
 800192c:	d101      	bne.n	8001932 <HAL_TIM_PeriodElapsedCallback+0x16>
  {
    HAL_IncTick();
 800192e:	f000 fbdd 	bl	80020ec <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001932:	bf00      	nop
 8001934:	3708      	adds	r7, #8
 8001936:	46bd      	mov	sp, r7
 8001938:	bd80      	pop	{r7, pc}
 800193a:	bf00      	nop
 800193c:	40010000 	.word	0x40010000

08001940 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001940:	b480      	push	{r7}
 8001942:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001944:	b672      	cpsid	i
}
 8001946:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001948:	bf00      	nop
 800194a:	e7fd      	b.n	8001948 <Error_Handler+0x8>

0800194c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b082      	sub	sp, #8
 8001950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001952:	2300      	movs	r3, #0
 8001954:	607b      	str	r3, [r7, #4]
 8001956:	4b12      	ldr	r3, [pc, #72]	@ (80019a0 <HAL_MspInit+0x54>)
 8001958:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800195a:	4a11      	ldr	r2, [pc, #68]	@ (80019a0 <HAL_MspInit+0x54>)
 800195c:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001960:	6453      	str	r3, [r2, #68]	@ 0x44
 8001962:	4b0f      	ldr	r3, [pc, #60]	@ (80019a0 <HAL_MspInit+0x54>)
 8001964:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001966:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800196a:	607b      	str	r3, [r7, #4]
 800196c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	603b      	str	r3, [r7, #0]
 8001972:	4b0b      	ldr	r3, [pc, #44]	@ (80019a0 <HAL_MspInit+0x54>)
 8001974:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001976:	4a0a      	ldr	r2, [pc, #40]	@ (80019a0 <HAL_MspInit+0x54>)
 8001978:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800197c:	6413      	str	r3, [r2, #64]	@ 0x40
 800197e:	4b08      	ldr	r3, [pc, #32]	@ (80019a0 <HAL_MspInit+0x54>)
 8001980:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001982:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001986:	603b      	str	r3, [r7, #0]
 8001988:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800198a:	2200      	movs	r2, #0
 800198c:	210f      	movs	r1, #15
 800198e:	f06f 0001 	mvn.w	r0, #1
 8001992:	f001 faf5 	bl	8002f80 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001996:	bf00      	nop
 8001998:	3708      	adds	r7, #8
 800199a:	46bd      	mov	sp, r7
 800199c:	bd80      	pop	{r7, pc}
 800199e:	bf00      	nop
 80019a0:	40023800 	.word	0x40023800

080019a4 <HAL_CAN_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hcan: CAN handle pointer
  * @retval None
  */
void HAL_CAN_MspInit(CAN_HandleTypeDef* hcan)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b08c      	sub	sp, #48	@ 0x30
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80019ac:	f107 031c 	add.w	r3, r7, #28
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
  if(hcan->Instance==CAN1)
 80019bc:	687b      	ldr	r3, [r7, #4]
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4a71      	ldr	r2, [pc, #452]	@ (8001b88 <HAL_CAN_MspInit+0x1e4>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d15f      	bne.n	8001a86 <HAL_CAN_MspInit+0xe2>
  {
    /* USER CODE BEGIN CAN1_MspInit 0 */

    /* USER CODE END CAN1_MspInit 0 */
    /* Peripheral clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80019c6:	4b71      	ldr	r3, [pc, #452]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 80019c8:	681b      	ldr	r3, [r3, #0]
 80019ca:	3301      	adds	r3, #1
 80019cc:	4a6f      	ldr	r2, [pc, #444]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 80019ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80019d0:	4b6e      	ldr	r3, [pc, #440]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 80019d2:	681b      	ldr	r3, [r3, #0]
 80019d4:	2b01      	cmp	r3, #1
 80019d6:	d10d      	bne.n	80019f4 <HAL_CAN_MspInit+0x50>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80019d8:	2300      	movs	r3, #0
 80019da:	61bb      	str	r3, [r7, #24]
 80019dc:	4b6c      	ldr	r3, [pc, #432]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 80019de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019e0:	4a6b      	ldr	r2, [pc, #428]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 80019e2:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80019e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80019e8:	4b69      	ldr	r3, [pc, #420]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 80019ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80019ec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019f0:	61bb      	str	r3, [r7, #24]
 80019f2:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
 80019f8:	4b65      	ldr	r3, [pc, #404]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 80019fa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80019fc:	4a64      	ldr	r2, [pc, #400]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 80019fe:	f043 0301 	orr.w	r3, r3, #1
 8001a02:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a04:	4b62      	ldr	r3, [pc, #392]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001a06:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a08:	f003 0301 	and.w	r3, r3, #1
 8001a0c:	617b      	str	r3, [r7, #20]
 8001a0e:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001a10:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8001a14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a16:	2302      	movs	r3, #2
 8001a18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a1a:	2301      	movs	r3, #1
 8001a1c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a22:	2309      	movs	r3, #9
 8001a24:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a26:	f107 031c 	add.w	r3, r7, #28
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	4859      	ldr	r0, [pc, #356]	@ (8001b94 <HAL_CAN_MspInit+0x1f0>)
 8001a2e:	f001 fb63 	bl	80030f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001a32:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001a36:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a38:	2302      	movs	r3, #2
 8001a3a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a3c:	2300      	movs	r3, #0
 8001a3e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a40:	2303      	movs	r3, #3
 8001a42:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8001a44:	2309      	movs	r3, #9
 8001a46:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a48:	f107 031c 	add.w	r3, r7, #28
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4851      	ldr	r0, [pc, #324]	@ (8001b94 <HAL_CAN_MspInit+0x1f0>)
 8001a50:	f001 fb52 	bl	80030f8 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 6, 0);
 8001a54:	2200      	movs	r2, #0
 8001a56:	2106      	movs	r1, #6
 8001a58:	2013      	movs	r0, #19
 8001a5a:	f001 fa91 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8001a5e:	2013      	movs	r0, #19
 8001a60:	f001 faaa 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2105      	movs	r1, #5
 8001a68:	2014      	movs	r0, #20
 8001a6a:	f001 fa89 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8001a6e:	2014      	movs	r0, #20
 8001a70:	f001 faa2 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8001a74:	2200      	movs	r2, #0
 8001a76:	2105      	movs	r1, #5
 8001a78:	2016      	movs	r0, #22
 8001a7a:	f001 fa81 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8001a7e:	2016      	movs	r0, #22
 8001a80:	f001 fa9a 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    /* USER CODE BEGIN CAN2_MspInit 1 */

    /* USER CODE END CAN2_MspInit 1 */
  }

}
 8001a84:	e07c      	b.n	8001b80 <HAL_CAN_MspInit+0x1dc>
  else if(hcan->Instance==CAN2)
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	681b      	ldr	r3, [r3, #0]
 8001a8a:	4a43      	ldr	r2, [pc, #268]	@ (8001b98 <HAL_CAN_MspInit+0x1f4>)
 8001a8c:	4293      	cmp	r3, r2
 8001a8e:	d177      	bne.n	8001b80 <HAL_CAN_MspInit+0x1dc>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8001a90:	2300      	movs	r3, #0
 8001a92:	613b      	str	r3, [r7, #16]
 8001a94:	4b3e      	ldr	r3, [pc, #248]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001a96:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a98:	4a3d      	ldr	r2, [pc, #244]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001a9a:	f043 6380 	orr.w	r3, r3, #67108864	@ 0x4000000
 8001a9e:	6413      	str	r3, [r2, #64]	@ 0x40
 8001aa0:	4b3b      	ldr	r3, [pc, #236]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001aa2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001aa4:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 8001aa8:	613b      	str	r3, [r7, #16]
 8001aaa:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8001aac:	4b37      	ldr	r3, [pc, #220]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 8001aae:	681b      	ldr	r3, [r3, #0]
 8001ab0:	3301      	adds	r3, #1
 8001ab2:	4a36      	ldr	r2, [pc, #216]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 8001ab4:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8001ab6:	4b35      	ldr	r3, [pc, #212]	@ (8001b8c <HAL_CAN_MspInit+0x1e8>)
 8001ab8:	681b      	ldr	r3, [r3, #0]
 8001aba:	2b01      	cmp	r3, #1
 8001abc:	d10d      	bne.n	8001ada <HAL_CAN_MspInit+0x136>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8001abe:	2300      	movs	r3, #0
 8001ac0:	60fb      	str	r3, [r7, #12]
 8001ac2:	4b33      	ldr	r3, [pc, #204]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001ac4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ac6:	4a32      	ldr	r2, [pc, #200]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001ac8:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001acc:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ace:	4b30      	ldr	r3, [pc, #192]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001ad0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ad2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001ad6:	60fb      	str	r3, [r7, #12]
 8001ad8:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ada:	2300      	movs	r3, #0
 8001adc:	60bb      	str	r3, [r7, #8]
 8001ade:	4b2c      	ldr	r3, [pc, #176]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001ae0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae2:	4a2b      	ldr	r2, [pc, #172]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001ae4:	f043 0302 	orr.w	r3, r3, #2
 8001ae8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aea:	4b29      	ldr	r3, [pc, #164]	@ (8001b90 <HAL_CAN_MspInit+0x1ec>)
 8001aec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aee:	f003 0302 	and.w	r3, r3, #2
 8001af2:	60bb      	str	r3, [r7, #8]
 8001af4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8001af6:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001afa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afc:	2302      	movs	r3, #2
 8001afe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;  // CAN RX引脚需要上拉
 8001b00:	2301      	movs	r3, #1
 8001b02:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b04:	2303      	movs	r3, #3
 8001b06:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b08:	2309      	movs	r3, #9
 8001b0a:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0c:	f107 031c 	add.w	r3, r7, #28
 8001b10:	4619      	mov	r1, r3
 8001b12:	4822      	ldr	r0, [pc, #136]	@ (8001b9c <HAL_CAN_MspInit+0x1f8>)
 8001b14:	f001 faf0 	bl	80030f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001b18:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001b1c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b1e:	2302      	movs	r3, #2
 8001b20:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b22:	2300      	movs	r3, #0
 8001b24:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b26:	2303      	movs	r3, #3
 8001b28:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8001b2a:	2309      	movs	r3, #9
 8001b2c:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b2e:	f107 031c 	add.w	r3, r7, #28
 8001b32:	4619      	mov	r1, r3
 8001b34:	4819      	ldr	r0, [pc, #100]	@ (8001b9c <HAL_CAN_MspInit+0x1f8>)
 8001b36:	f001 fadf 	bl	80030f8 <HAL_GPIO_Init>
    printf("[CAN2-MSP] GPIO configured - PB12(RX) with pullup, PB13(TX) no pull\r\n");
 8001b3a:	4819      	ldr	r0, [pc, #100]	@ (8001ba0 <HAL_CAN_MspInit+0x1fc>)
 8001b3c:	f006 fd66 	bl	800860c <puts>
    HAL_NVIC_SetPriority(CAN2_TX_IRQn, 5, 0);
 8001b40:	2200      	movs	r2, #0
 8001b42:	2105      	movs	r1, #5
 8001b44:	203f      	movs	r0, #63	@ 0x3f
 8001b46:	f001 fa1b 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_TX_IRQn);
 8001b4a:	203f      	movs	r0, #63	@ 0x3f
 8001b4c:	f001 fa34 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX0_IRQn, 5, 0);
 8001b50:	2200      	movs	r2, #0
 8001b52:	2105      	movs	r1, #5
 8001b54:	2040      	movs	r0, #64	@ 0x40
 8001b56:	f001 fa13 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX0_IRQn);
 8001b5a:	2040      	movs	r0, #64	@ 0x40
 8001b5c:	f001 fa2c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_RX1_IRQn, 5, 0);
 8001b60:	2200      	movs	r2, #0
 8001b62:	2105      	movs	r1, #5
 8001b64:	2041      	movs	r0, #65	@ 0x41
 8001b66:	f001 fa0b 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_RX1_IRQn);
 8001b6a:	2041      	movs	r0, #65	@ 0x41
 8001b6c:	f001 fa24 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN2_SCE_IRQn, 5, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2105      	movs	r1, #5
 8001b74:	2042      	movs	r0, #66	@ 0x42
 8001b76:	f001 fa03 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN2_SCE_IRQn);
 8001b7a:	2042      	movs	r0, #66	@ 0x42
 8001b7c:	f001 fa1c 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
}
 8001b80:	bf00      	nop
 8001b82:	3730      	adds	r7, #48	@ 0x30
 8001b84:	46bd      	mov	sp, r7
 8001b86:	bd80      	pop	{r7, pc}
 8001b88:	40006400 	.word	0x40006400
 8001b8c:	20000268 	.word	0x20000268
 8001b90:	40023800 	.word	0x40023800
 8001b94:	40020000 	.word	0x40020000
 8001b98:	40006800 	.word	0x40006800
 8001b9c:	40020400 	.word	0x40020400
 8001ba0:	08009e84 	.word	0x08009e84

08001ba4 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ba4:	b580      	push	{r7, lr}
 8001ba6:	b08a      	sub	sp, #40	@ 0x28
 8001ba8:	af00      	add	r7, sp, #0
 8001baa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bac:	f107 0314 	add.w	r3, r7, #20
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	601a      	str	r2, [r3, #0]
 8001bb4:	605a      	str	r2, [r3, #4]
 8001bb6:	609a      	str	r2, [r3, #8]
 8001bb8:	60da      	str	r2, [r3, #12]
 8001bba:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	4a1d      	ldr	r2, [pc, #116]	@ (8001c38 <HAL_SPI_MspInit+0x94>)
 8001bc2:	4293      	cmp	r3, r2
 8001bc4:	d133      	bne.n	8001c2e <HAL_SPI_MspInit+0x8a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001bc6:	2300      	movs	r3, #0
 8001bc8:	613b      	str	r3, [r7, #16]
 8001bca:	4b1c      	ldr	r3, [pc, #112]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bce:	4a1b      	ldr	r2, [pc, #108]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001bd0:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001bd4:	6453      	str	r3, [r2, #68]	@ 0x44
 8001bd6:	4b19      	ldr	r3, [pc, #100]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001bd8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001bda:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001bde:	613b      	str	r3, [r7, #16]
 8001be0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001be2:	2300      	movs	r3, #0
 8001be4:	60fb      	str	r3, [r7, #12]
 8001be6:	4b15      	ldr	r3, [pc, #84]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001be8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bea:	4a14      	ldr	r2, [pc, #80]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001bec:	f043 0302 	orr.w	r3, r3, #2
 8001bf0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001bf2:	4b12      	ldr	r3, [pc, #72]	@ (8001c3c <HAL_SPI_MspInit+0x98>)
 8001bf4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bf6:	f003 0302 	and.w	r3, r3, #2
 8001bfa:	60fb      	str	r3, [r7, #12]
 8001bfc:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 8001bfe:	2338      	movs	r3, #56	@ 0x38
 8001c00:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c02:	2302      	movs	r3, #2
 8001c04:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c06:	2300      	movs	r3, #0
 8001c08:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c0a:	2303      	movs	r3, #3
 8001c0c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001c0e:	2305      	movs	r3, #5
 8001c10:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c12:	f107 0314 	add.w	r3, r7, #20
 8001c16:	4619      	mov	r1, r3
 8001c18:	4809      	ldr	r0, [pc, #36]	@ (8001c40 <HAL_SPI_MspInit+0x9c>)
 8001c1a:	f001 fa6d 	bl	80030f8 <HAL_GPIO_Init>

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 7, 0);
 8001c1e:	2200      	movs	r2, #0
 8001c20:	2107      	movs	r1, #7
 8001c22:	2023      	movs	r0, #35	@ 0x23
 8001c24:	f001 f9ac 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001c28:	2023      	movs	r0, #35	@ 0x23
 8001c2a:	f001 f9c5 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001c2e:	bf00      	nop
 8001c30:	3728      	adds	r7, #40	@ 0x28
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bd80      	pop	{r7, pc}
 8001c36:	bf00      	nop
 8001c38:	40013000 	.word	0x40013000
 8001c3c:	40023800 	.word	0x40023800
 8001c40:	40020400 	.word	0x40020400

08001c44 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08a      	sub	sp, #40	@ 0x28
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001c4c:	f107 0314 	add.w	r3, r7, #20
 8001c50:	2200      	movs	r2, #0
 8001c52:	601a      	str	r2, [r3, #0]
 8001c54:	605a      	str	r2, [r3, #4]
 8001c56:	609a      	str	r2, [r3, #8]
 8001c58:	60da      	str	r2, [r3, #12]
 8001c5a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4a1d      	ldr	r2, [pc, #116]	@ (8001cd8 <HAL_UART_MspInit+0x94>)
 8001c62:	4293      	cmp	r3, r2
 8001c64:	d133      	bne.n	8001cce <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001c66:	2300      	movs	r3, #0
 8001c68:	613b      	str	r3, [r7, #16]
 8001c6a:	4b1c      	ldr	r3, [pc, #112]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c6c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c6e:	4a1b      	ldr	r2, [pc, #108]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c70:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001c74:	6413      	str	r3, [r2, #64]	@ 0x40
 8001c76:	4b19      	ldr	r3, [pc, #100]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001c7a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001c7e:	613b      	str	r3, [r7, #16]
 8001c80:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001c82:	2300      	movs	r3, #0
 8001c84:	60fb      	str	r3, [r7, #12]
 8001c86:	4b15      	ldr	r3, [pc, #84]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c88:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c8a:	4a14      	ldr	r2, [pc, #80]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c8c:	f043 0301 	orr.w	r3, r3, #1
 8001c90:	6313      	str	r3, [r2, #48]	@ 0x30
 8001c92:	4b12      	ldr	r3, [pc, #72]	@ (8001cdc <HAL_UART_MspInit+0x98>)
 8001c94:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001c96:	f003 0301 	and.w	r3, r3, #1
 8001c9a:	60fb      	str	r3, [r7, #12]
 8001c9c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001c9e:	230c      	movs	r3, #12
 8001ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ca2:	2302      	movs	r3, #2
 8001ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca6:	2300      	movs	r3, #0
 8001ca8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001caa:	2303      	movs	r3, #3
 8001cac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8001cae:	2307      	movs	r3, #7
 8001cb0:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001cb2:	f107 0314 	add.w	r3, r7, #20
 8001cb6:	4619      	mov	r1, r3
 8001cb8:	4809      	ldr	r0, [pc, #36]	@ (8001ce0 <HAL_UART_MspInit+0x9c>)
 8001cba:	f001 fa1d 	bl	80030f8 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 8, 0);
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	2108      	movs	r1, #8
 8001cc2:	2026      	movs	r0, #38	@ 0x26
 8001cc4:	f001 f95c 	bl	8002f80 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001cc8:	2026      	movs	r0, #38	@ 0x26
 8001cca:	f001 f975 	bl	8002fb8 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8001cce:	bf00      	nop
 8001cd0:	3728      	adds	r7, #40	@ 0x28
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40004400 	.word	0x40004400
 8001cdc:	40023800 	.word	0x40023800
 8001ce0:	40020000 	.word	0x40020000

08001ce4 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	b08c      	sub	sp, #48	@ 0x30
 8001ce8:	af00      	add	r7, sp, #0
 8001cea:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001cec:	2300      	movs	r3, #0
 8001cee:	62bb      	str	r3, [r7, #40]	@ 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001cf0:	2300      	movs	r3, #0
 8001cf2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t              pFLatency;

  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001cf4:	2300      	movs	r3, #0
 8001cf6:	60bb      	str	r3, [r7, #8]
 8001cf8:	4b2f      	ldr	r3, [pc, #188]	@ (8001db8 <HAL_InitTick+0xd4>)
 8001cfa:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001cfc:	4a2e      	ldr	r2, [pc, #184]	@ (8001db8 <HAL_InitTick+0xd4>)
 8001cfe:	f043 0301 	orr.w	r3, r3, #1
 8001d02:	6453      	str	r3, [r2, #68]	@ 0x44
 8001d04:	4b2c      	ldr	r3, [pc, #176]	@ (8001db8 <HAL_InitTick+0xd4>)
 8001d06:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001d08:	f003 0301 	and.w	r3, r3, #1
 8001d0c:	60bb      	str	r3, [r7, #8]
 8001d0e:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001d10:	f107 020c 	add.w	r2, r7, #12
 8001d14:	f107 0310 	add.w	r3, r7, #16
 8001d18:	4611      	mov	r1, r2
 8001d1a:	4618      	mov	r0, r3
 8001d1c:	f002 f820 	bl	8003d60 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001d20:	f002 f80a 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8001d24:	4603      	mov	r3, r0
 8001d26:	005b      	lsls	r3, r3, #1
 8001d28:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001d2a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001d2c:	4a23      	ldr	r2, [pc, #140]	@ (8001dbc <HAL_InitTick+0xd8>)
 8001d2e:	fba2 2303 	umull	r2, r3, r2, r3
 8001d32:	0c9b      	lsrs	r3, r3, #18
 8001d34:	3b01      	subs	r3, #1
 8001d36:	627b      	str	r3, [r7, #36]	@ 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001d38:	4b21      	ldr	r3, [pc, #132]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d3a:	4a22      	ldr	r2, [pc, #136]	@ (8001dc4 <HAL_InitTick+0xe0>)
 8001d3c:	601a      	str	r2, [r3, #0]
   * Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
   * Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
   * ClockDivision = 0
   * Counter direction = Up
   */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001d3e:	4b20      	ldr	r3, [pc, #128]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d40:	f240 32e7 	movw	r2, #999	@ 0x3e7
 8001d44:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001d46:	4a1e      	ldr	r2, [pc, #120]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001d4c:	4b1c      	ldr	r3, [pc, #112]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d4e:	2200      	movs	r2, #0
 8001d50:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001d52:	4b1b      	ldr	r3, [pc, #108]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d54:	2200      	movs	r2, #0
 8001d56:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001d58:	4b19      	ldr	r3, [pc, #100]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001d5e:	4818      	ldr	r0, [pc, #96]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d60:	f002 f9d8 	bl	8004114 <HAL_TIM_Base_Init>
 8001d64:	4603      	mov	r3, r0
 8001d66:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
  if (status == HAL_OK)
 8001d6a:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d6e:	2b00      	cmp	r3, #0
 8001d70:	d11b      	bne.n	8001daa <HAL_InitTick+0xc6>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001d72:	4813      	ldr	r0, [pc, #76]	@ (8001dc0 <HAL_InitTick+0xdc>)
 8001d74:	f002 fa28 	bl	80041c8 <HAL_TIM_Base_Start_IT>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    if (status == HAL_OK)
 8001d7e:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	d111      	bne.n	8001daa <HAL_InitTick+0xc6>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001d86:	2019      	movs	r0, #25
 8001d88:	f001 f916 	bl	8002fb8 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2b0f      	cmp	r3, #15
 8001d90:	d808      	bhi.n	8001da4 <HAL_InitTick+0xc0>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001d92:	2200      	movs	r2, #0
 8001d94:	6879      	ldr	r1, [r7, #4]
 8001d96:	2019      	movs	r0, #25
 8001d98:	f001 f8f2 	bl	8002f80 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001d9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001dc8 <HAL_InitTick+0xe4>)
 8001d9e:	687b      	ldr	r3, [r7, #4]
 8001da0:	6013      	str	r3, [r2, #0]
 8001da2:	e002      	b.n	8001daa <HAL_InitTick+0xc6>
      }
      else
      {
        status = HAL_ERROR;
 8001da4:	2301      	movs	r3, #1
 8001da6:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001daa:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
}
 8001dae:	4618      	mov	r0, r3
 8001db0:	3730      	adds	r7, #48	@ 0x30
 8001db2:	46bd      	mov	sp, r7
 8001db4:	bd80      	pop	{r7, pc}
 8001db6:	bf00      	nop
 8001db8:	40023800 	.word	0x40023800
 8001dbc:	431bde83 	.word	0x431bde83
 8001dc0:	2000026c 	.word	0x2000026c
 8001dc4:	40010000 	.word	0x40010000
 8001dc8:	20000004 	.word	0x20000004

08001dcc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001dcc:	b480      	push	{r7}
 8001dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001dd0:	bf00      	nop
 8001dd2:	e7fd      	b.n	8001dd0 <NMI_Handler+0x4>

08001dd4 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001dd4:	b480      	push	{r7}
 8001dd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001dd8:	bf00      	nop
 8001dda:	e7fd      	b.n	8001dd8 <HardFault_Handler+0x4>

08001ddc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ddc:	b480      	push	{r7}
 8001dde:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001de0:	bf00      	nop
 8001de2:	e7fd      	b.n	8001de0 <MemManage_Handler+0x4>

08001de4 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001de4:	b480      	push	{r7}
 8001de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001de8:	bf00      	nop
 8001dea:	e7fd      	b.n	8001de8 <BusFault_Handler+0x4>

08001dec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001dec:	b480      	push	{r7}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001df0:	bf00      	nop
 8001df2:	e7fd      	b.n	8001df0 <UsageFault_Handler+0x4>

08001df4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001df4:	b480      	push	{r7}
 8001df6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001df8:	bf00      	nop
 8001dfa:	46bd      	mov	sp, r7
 8001dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e00:	4770      	bx	lr
	...

08001e04 <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 8001e04:	b580      	push	{r7, lr}
 8001e06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e08:	4802      	ldr	r0, [pc, #8]	@ (8001e14 <CAN1_TX_IRQHandler+0x10>)
 8001e0a:	f000 fdc5 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8001e0e:	bf00      	nop
 8001e10:	bd80      	pop	{r7, pc}
 8001e12:	bf00      	nop
 8001e14:	20000088 	.word	0x20000088

08001e18 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e1c:	4802      	ldr	r0, [pc, #8]	@ (8001e28 <CAN1_RX0_IRQHandler+0x10>)
 8001e1e:	f000 fdbb 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 8001e22:	bf00      	nop
 8001e24:	bd80      	pop	{r7, pc}
 8001e26:	bf00      	nop
 8001e28:	20000088 	.word	0x20000088

08001e2c <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8001e2c:	b580      	push	{r7, lr}
 8001e2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8001e30:	4802      	ldr	r0, [pc, #8]	@ (8001e3c <CAN1_SCE_IRQHandler+0x10>)
 8001e32:	f000 fdb1 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8001e36:	bf00      	nop
 8001e38:	bd80      	pop	{r7, pc}
 8001e3a:	bf00      	nop
 8001e3c:	20000088 	.word	0x20000088

08001e40 <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001e40:	b580      	push	{r7, lr}
 8001e42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001e44:	4802      	ldr	r0, [pc, #8]	@ (8001e50 <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001e46:	f002 fa2f 	bl	80042a8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001e4a:	bf00      	nop
 8001e4c:	bd80      	pop	{r7, pc}
 8001e4e:	bf00      	nop
 8001e50:	2000026c 	.word	0x2000026c

08001e54 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e54:	b580      	push	{r7, lr}
 8001e56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e58:	4802      	ldr	r0, [pc, #8]	@ (8001e64 <SPI1_IRQHandler+0x10>)
 8001e5a:	f002 f83d 	bl	8003ed8 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	bd80      	pop	{r7, pc}
 8001e62:	bf00      	nop
 8001e64:	20000200 	.word	0x20000200

08001e68 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e68:	b580      	push	{r7, lr}
 8001e6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e6c:	4802      	ldr	r0, [pc, #8]	@ (8001e78 <USART2_IRQHandler+0x10>)
 8001e6e:	f002 fcc9 	bl	8004804 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e72:	bf00      	nop
 8001e74:	bd80      	pop	{r7, pc}
 8001e76:	bf00      	nop
 8001e78:	200002b8 	.word	0x200002b8

08001e7c <CAN2_TX_IRQHandler>:

/**
  * @brief This function handles CAN2 TX interrupts.
  */
void CAN2_TX_IRQHandler(void)
{
 8001e7c:	b580      	push	{r7, lr}
 8001e7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_TX_IRQn 0 */

  /* USER CODE END CAN2_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e80:	4802      	ldr	r0, [pc, #8]	@ (8001e8c <CAN2_TX_IRQHandler+0x10>)
 8001e82:	f000 fd89 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_TX_IRQn 1 */

  /* USER CODE END CAN2_TX_IRQn 1 */
}
 8001e86:	bf00      	nop
 8001e88:	bd80      	pop	{r7, pc}
 8001e8a:	bf00      	nop
 8001e8c:	200000b0 	.word	0x200000b0

08001e90 <CAN2_RX0_IRQHandler>:

/**
  * @brief This function handles CAN2 RX0 interrupts.
  */
void CAN2_RX0_IRQHandler(void)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX0_IRQn 0 */

  /* USER CODE END CAN2_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001e94:	4802      	ldr	r0, [pc, #8]	@ (8001ea0 <CAN2_RX0_IRQHandler+0x10>)
 8001e96:	f000 fd7f 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX0_IRQn 1 */

  /* USER CODE END CAN2_RX0_IRQn 1 */
}
 8001e9a:	bf00      	nop
 8001e9c:	bd80      	pop	{r7, pc}
 8001e9e:	bf00      	nop
 8001ea0:	200000b0 	.word	0x200000b0

08001ea4 <CAN2_RX1_IRQHandler>:

/**
  * @brief This function handles CAN2 RX1 interrupt.
  */
void CAN2_RX1_IRQHandler(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_RX1_IRQn 0 */

  /* USER CODE END CAN2_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ea8:	4802      	ldr	r0, [pc, #8]	@ (8001eb4 <CAN2_RX1_IRQHandler+0x10>)
 8001eaa:	f000 fd75 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_RX1_IRQn 1 */

  /* USER CODE END CAN2_RX1_IRQn 1 */
}
 8001eae:	bf00      	nop
 8001eb0:	bd80      	pop	{r7, pc}
 8001eb2:	bf00      	nop
 8001eb4:	200000b0 	.word	0x200000b0

08001eb8 <CAN2_SCE_IRQHandler>:

/**
  * @brief This function handles CAN2 SCE interrupt.
  */
void CAN2_SCE_IRQHandler(void)
{
 8001eb8:	b580      	push	{r7, lr}
 8001eba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN2_SCE_IRQn 0 */

  /* USER CODE END CAN2_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan2);
 8001ebc:	4802      	ldr	r0, [pc, #8]	@ (8001ec8 <CAN2_SCE_IRQHandler+0x10>)
 8001ebe:	f000 fd6b 	bl	8002998 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN2_SCE_IRQn 1 */

  /* USER CODE END CAN2_SCE_IRQn 1 */
}
 8001ec2:	bf00      	nop
 8001ec4:	bd80      	pop	{r7, pc}
 8001ec6:	bf00      	nop
 8001ec8:	200000b0 	.word	0x200000b0

08001ecc <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ecc:	b580      	push	{r7, lr}
 8001ece:	b086      	sub	sp, #24
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	60f8      	str	r0, [r7, #12]
 8001ed4:	60b9      	str	r1, [r7, #8]
 8001ed6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed8:	2300      	movs	r3, #0
 8001eda:	617b      	str	r3, [r7, #20]
 8001edc:	e00a      	b.n	8001ef4 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001ede:	f3af 8000 	nop.w
 8001ee2:	4601      	mov	r1, r0
 8001ee4:	68bb      	ldr	r3, [r7, #8]
 8001ee6:	1c5a      	adds	r2, r3, #1
 8001ee8:	60ba      	str	r2, [r7, #8]
 8001eea:	b2ca      	uxtb	r2, r1
 8001eec:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001eee:	697b      	ldr	r3, [r7, #20]
 8001ef0:	3301      	adds	r3, #1
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	697a      	ldr	r2, [r7, #20]
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	429a      	cmp	r2, r3
 8001efa:	dbf0      	blt.n	8001ede <_read+0x12>
  }

  return len;
 8001efc:	687b      	ldr	r3, [r7, #4]
}
 8001efe:	4618      	mov	r0, r3
 8001f00:	3718      	adds	r7, #24
 8001f02:	46bd      	mov	sp, r7
 8001f04:	bd80      	pop	{r7, pc}

08001f06 <_close>:
  }
  return len;
}

int _close(int file)
{
 8001f06:	b480      	push	{r7}
 8001f08:	b083      	sub	sp, #12
 8001f0a:	af00      	add	r7, sp, #0
 8001f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001f0e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	370c      	adds	r7, #12
 8001f16:	46bd      	mov	sp, r7
 8001f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f1c:	4770      	bx	lr

08001f1e <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f1e:	b480      	push	{r7}
 8001f20:	b083      	sub	sp, #12
 8001f22:	af00      	add	r7, sp, #0
 8001f24:	6078      	str	r0, [r7, #4]
 8001f26:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001f28:	683b      	ldr	r3, [r7, #0]
 8001f2a:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001f2e:	605a      	str	r2, [r3, #4]
  return 0;
 8001f30:	2300      	movs	r3, #0
}
 8001f32:	4618      	mov	r0, r3
 8001f34:	370c      	adds	r7, #12
 8001f36:	46bd      	mov	sp, r7
 8001f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f3c:	4770      	bx	lr

08001f3e <_isatty>:

int _isatty(int file)
{
 8001f3e:	b480      	push	{r7}
 8001f40:	b083      	sub	sp, #12
 8001f42:	af00      	add	r7, sp, #0
 8001f44:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8001f46:	2301      	movs	r3, #1
}
 8001f48:	4618      	mov	r0, r3
 8001f4a:	370c      	adds	r7, #12
 8001f4c:	46bd      	mov	sp, r7
 8001f4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f52:	4770      	bx	lr

08001f54 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f54:	b480      	push	{r7}
 8001f56:	b085      	sub	sp, #20
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	60f8      	str	r0, [r7, #12]
 8001f5c:	60b9      	str	r1, [r7, #8]
 8001f5e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8001f60:	2300      	movs	r3, #0
}
 8001f62:	4618      	mov	r0, r3
 8001f64:	3714      	adds	r7, #20
 8001f66:	46bd      	mov	sp, r7
 8001f68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f6c:	4770      	bx	lr
	...

08001f70 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f70:	b580      	push	{r7, lr}
 8001f72:	b086      	sub	sp, #24
 8001f74:	af00      	add	r7, sp, #0
 8001f76:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001f78:	4a14      	ldr	r2, [pc, #80]	@ (8001fcc <_sbrk+0x5c>)
 8001f7a:	4b15      	ldr	r3, [pc, #84]	@ (8001fd0 <_sbrk+0x60>)
 8001f7c:	1ad3      	subs	r3, r2, r3
 8001f7e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001f80:	697b      	ldr	r3, [r7, #20]
 8001f82:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001f84:	4b13      	ldr	r3, [pc, #76]	@ (8001fd4 <_sbrk+0x64>)
 8001f86:	681b      	ldr	r3, [r3, #0]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d102      	bne.n	8001f92 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001f8c:	4b11      	ldr	r3, [pc, #68]	@ (8001fd4 <_sbrk+0x64>)
 8001f8e:	4a12      	ldr	r2, [pc, #72]	@ (8001fd8 <_sbrk+0x68>)
 8001f90:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001f92:	4b10      	ldr	r3, [pc, #64]	@ (8001fd4 <_sbrk+0x64>)
 8001f94:	681a      	ldr	r2, [r3, #0]
 8001f96:	687b      	ldr	r3, [r7, #4]
 8001f98:	4413      	add	r3, r2
 8001f9a:	693a      	ldr	r2, [r7, #16]
 8001f9c:	429a      	cmp	r2, r3
 8001f9e:	d207      	bcs.n	8001fb0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fa0:	f006 fcc0 	bl	8008924 <__errno>
 8001fa4:	4603      	mov	r3, r0
 8001fa6:	220c      	movs	r2, #12
 8001fa8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001faa:	f04f 33ff 	mov.w	r3, #4294967295
 8001fae:	e009      	b.n	8001fc4 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fb0:	4b08      	ldr	r3, [pc, #32]	@ (8001fd4 <_sbrk+0x64>)
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fb6:	4b07      	ldr	r3, [pc, #28]	@ (8001fd4 <_sbrk+0x64>)
 8001fb8:	681a      	ldr	r2, [r3, #0]
 8001fba:	687b      	ldr	r3, [r7, #4]
 8001fbc:	4413      	add	r3, r2
 8001fbe:	4a05      	ldr	r2, [pc, #20]	@ (8001fd4 <_sbrk+0x64>)
 8001fc0:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fc2:	68fb      	ldr	r3, [r7, #12]
}
 8001fc4:	4618      	mov	r0, r3
 8001fc6:	3718      	adds	r7, #24
 8001fc8:	46bd      	mov	sp, r7
 8001fca:	bd80      	pop	{r7, pc}
 8001fcc:	20020000 	.word	0x20020000
 8001fd0:	00000400 	.word	0x00000400
 8001fd4:	200002b4 	.word	0x200002b4
 8001fd8:	20004e38 	.word	0x20004e38

08001fdc <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001fdc:	b480      	push	{r7}
 8001fde:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001fe0:	4b06      	ldr	r3, [pc, #24]	@ (8001ffc <SystemInit+0x20>)
 8001fe2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001fe6:	4a05      	ldr	r2, [pc, #20]	@ (8001ffc <SystemInit+0x20>)
 8001fe8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001fec:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ff0:	bf00      	nop
 8001ff2:	46bd      	mov	sp, r7
 8001ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ff8:	4770      	bx	lr
 8001ffa:	bf00      	nop
 8001ffc:	e000ed00 	.word	0xe000ed00

08002000 <MX_USART2_UART_Init>:

UART_HandleTypeDef huart2;

/* USART2 init function */
void MX_USART2_UART_Init(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002004:	4b11      	ldr	r3, [pc, #68]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002006:	4a12      	ldr	r2, [pc, #72]	@ (8002050 <MX_USART2_UART_Init+0x50>)
 8002008:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800200a:	4b10      	ldr	r3, [pc, #64]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 800200c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8002010:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002012:	4b0e      	ldr	r3, [pc, #56]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002014:	2200      	movs	r2, #0
 8002016:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8002018:	4b0c      	ldr	r3, [pc, #48]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 800201a:	2200      	movs	r2, #0
 800201c:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800201e:	4b0b      	ldr	r3, [pc, #44]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002020:	2200      	movs	r2, #0
 8002022:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002024:	4b09      	ldr	r3, [pc, #36]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002026:	220c      	movs	r2, #12
 8002028:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800202a:	4b08      	ldr	r3, [pc, #32]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 800202c:	2200      	movs	r2, #0
 800202e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002030:	4b06      	ldr	r3, [pc, #24]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002032:	2200      	movs	r2, #0
 8002034:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002036:	4805      	ldr	r0, [pc, #20]	@ (800204c <MX_USART2_UART_Init+0x4c>)
 8002038:	f002 fb08 	bl	800464c <HAL_UART_Init>
 800203c:	4603      	mov	r3, r0
 800203e:	2b00      	cmp	r3, #0
 8002040:	d001      	beq.n	8002046 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8002042:	f7ff fc7d 	bl	8001940 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200002b8 	.word	0x200002b8
 8002050:	40004400 	.word	0x40004400

08002054 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8002054:	f8df d034 	ldr.w	sp, [pc, #52]	@ 800208c <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8002058:	f7ff ffc0 	bl	8001fdc <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800205c:	480c      	ldr	r0, [pc, #48]	@ (8002090 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800205e:	490d      	ldr	r1, [pc, #52]	@ (8002094 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002060:	4a0d      	ldr	r2, [pc, #52]	@ (8002098 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002062:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002064:	e002      	b.n	800206c <LoopCopyDataInit>

08002066 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002066:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002068:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800206a:	3304      	adds	r3, #4

0800206c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800206c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800206e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002070:	d3f9      	bcc.n	8002066 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002072:	4a0a      	ldr	r2, [pc, #40]	@ (800209c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002074:	4c0a      	ldr	r4, [pc, #40]	@ (80020a0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002076:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002078:	e001      	b.n	800207e <LoopFillZerobss>

0800207a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800207a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800207c:	3204      	adds	r2, #4

0800207e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800207e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002080:	d3fb      	bcc.n	800207a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002082:	f006 fc55 	bl	8008930 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002086:	f7ff fae1 	bl	800164c <main>
  bx  lr    
 800208a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800208c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002090:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002094:	2000006c 	.word	0x2000006c
  ldr r2, =_sidata
 8002098:	08009fc4 	.word	0x08009fc4
  ldr r2, =_sbss
 800209c:	2000006c 	.word	0x2000006c
  ldr r4, =_ebss
 80020a0:	20004e38 	.word	0x20004e38

080020a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80020a4:	e7fe      	b.n	80020a4 <ADC_IRQHandler>
	...

080020a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80020a8:	b580      	push	{r7, lr}
 80020aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80020ac:	4b0e      	ldr	r3, [pc, #56]	@ (80020e8 <HAL_Init+0x40>)
 80020ae:	681b      	ldr	r3, [r3, #0]
 80020b0:	4a0d      	ldr	r2, [pc, #52]	@ (80020e8 <HAL_Init+0x40>)
 80020b2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80020b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80020b8:	4b0b      	ldr	r3, [pc, #44]	@ (80020e8 <HAL_Init+0x40>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	4a0a      	ldr	r2, [pc, #40]	@ (80020e8 <HAL_Init+0x40>)
 80020be:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80020c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80020c4:	4b08      	ldr	r3, [pc, #32]	@ (80020e8 <HAL_Init+0x40>)
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	4a07      	ldr	r2, [pc, #28]	@ (80020e8 <HAL_Init+0x40>)
 80020ca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80020ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80020d0:	2003      	movs	r0, #3
 80020d2:	f000 ff4a 	bl	8002f6a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80020d6:	200f      	movs	r0, #15
 80020d8:	f7ff fe04 	bl	8001ce4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80020dc:	f7ff fc36 	bl	800194c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80020e0:	2300      	movs	r3, #0
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	bd80      	pop	{r7, pc}
 80020e6:	bf00      	nop
 80020e8:	40023c00 	.word	0x40023c00

080020ec <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020ec:	b480      	push	{r7}
 80020ee:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020f0:	4b06      	ldr	r3, [pc, #24]	@ (800210c <HAL_IncTick+0x20>)
 80020f2:	781b      	ldrb	r3, [r3, #0]
 80020f4:	461a      	mov	r2, r3
 80020f6:	4b06      	ldr	r3, [pc, #24]	@ (8002110 <HAL_IncTick+0x24>)
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	4413      	add	r3, r2
 80020fc:	4a04      	ldr	r2, [pc, #16]	@ (8002110 <HAL_IncTick+0x24>)
 80020fe:	6013      	str	r3, [r2, #0]
}
 8002100:	bf00      	nop
 8002102:	46bd      	mov	sp, r7
 8002104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002108:	4770      	bx	lr
 800210a:	bf00      	nop
 800210c:	20000008 	.word	0x20000008
 8002110:	20000300 	.word	0x20000300

08002114 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002114:	b480      	push	{r7}
 8002116:	af00      	add	r7, sp, #0
  return uwTick;
 8002118:	4b03      	ldr	r3, [pc, #12]	@ (8002128 <HAL_GetTick+0x14>)
 800211a:	681b      	ldr	r3, [r3, #0]
}
 800211c:	4618      	mov	r0, r3
 800211e:	46bd      	mov	sp, r7
 8002120:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002124:	4770      	bx	lr
 8002126:	bf00      	nop
 8002128:	20000300 	.word	0x20000300

0800212c <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	b084      	sub	sp, #16
 8002130:	af00      	add	r7, sp, #0
 8002132:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	2b00      	cmp	r3, #0
 8002138:	d101      	bne.n	800213e <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 800213a:	2301      	movs	r3, #1
 800213c:	e0ed      	b.n	800231a <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	2b00      	cmp	r3, #0
 8002148:	d102      	bne.n	8002150 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f7ff fc2a 	bl	80019a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8002150:	687b      	ldr	r3, [r7, #4]
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	681a      	ldr	r2, [r3, #0]
 8002156:	687b      	ldr	r3, [r7, #4]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	f042 0201 	orr.w	r2, r2, #1
 800215e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002160:	f7ff ffd8 	bl	8002114 <HAL_GetTick>
 8002164:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8002166:	e012      	b.n	800218e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002168:	f7ff ffd4 	bl	8002114 <HAL_GetTick>
 800216c:	4602      	mov	r2, r0
 800216e:	68fb      	ldr	r3, [r7, #12]
 8002170:	1ad3      	subs	r3, r2, r3
 8002172:	2b0a      	cmp	r3, #10
 8002174:	d90b      	bls.n	800218e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002176:	687b      	ldr	r3, [r7, #4]
 8002178:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800217a:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800217e:	687b      	ldr	r3, [r7, #4]
 8002180:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8002182:	687b      	ldr	r3, [r7, #4]
 8002184:	2205      	movs	r2, #5
 8002186:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 800218a:	2301      	movs	r3, #1
 800218c:	e0c5      	b.n	800231a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	f003 0301 	and.w	r3, r3, #1
 8002198:	2b00      	cmp	r3, #0
 800219a:	d0e5      	beq.n	8002168 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 800219c:	687b      	ldr	r3, [r7, #4]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	681a      	ldr	r2, [r3, #0]
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	f022 0202 	bic.w	r2, r2, #2
 80021aa:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80021ac:	f7ff ffb2 	bl	8002114 <HAL_GetTick>
 80021b0:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021b2:	e012      	b.n	80021da <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 80021b4:	f7ff ffae 	bl	8002114 <HAL_GetTick>
 80021b8:	4602      	mov	r2, r0
 80021ba:	68fb      	ldr	r3, [r7, #12]
 80021bc:	1ad3      	subs	r3, r2, r3
 80021be:	2b0a      	cmp	r3, #10
 80021c0:	d90b      	bls.n	80021da <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80021c6:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 80021ce:	687b      	ldr	r3, [r7, #4]
 80021d0:	2205      	movs	r2, #5
 80021d2:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 80021d6:	2301      	movs	r3, #1
 80021d8:	e09f      	b.n	800231a <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 80021da:	687b      	ldr	r3, [r7, #4]
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	685b      	ldr	r3, [r3, #4]
 80021e0:	f003 0302 	and.w	r3, r3, #2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d1e5      	bne.n	80021b4 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	7e1b      	ldrb	r3, [r3, #24]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d108      	bne.n	8002202 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	681a      	ldr	r2, [r3, #0]
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80021fe:	601a      	str	r2, [r3, #0]
 8002200:	e007      	b.n	8002212 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	681a      	ldr	r2, [r3, #0]
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002210:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	7e5b      	ldrb	r3, [r3, #25]
 8002216:	2b01      	cmp	r3, #1
 8002218:	d108      	bne.n	800222c <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	681a      	ldr	r2, [r3, #0]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002228:	601a      	str	r2, [r3, #0]
 800222a:	e007      	b.n	800223c <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	681b      	ldr	r3, [r3, #0]
 8002230:	681a      	ldr	r2, [r3, #0]
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800223a:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 800223c:	687b      	ldr	r3, [r7, #4]
 800223e:	7e9b      	ldrb	r3, [r3, #26]
 8002240:	2b01      	cmp	r3, #1
 8002242:	d108      	bne.n	8002256 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	681a      	ldr	r2, [r3, #0]
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	f042 0220 	orr.w	r2, r2, #32
 8002252:	601a      	str	r2, [r3, #0]
 8002254:	e007      	b.n	8002266 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	681a      	ldr	r2, [r3, #0]
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	681b      	ldr	r3, [r3, #0]
 8002260:	f022 0220 	bic.w	r2, r2, #32
 8002264:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8002266:	687b      	ldr	r3, [r7, #4]
 8002268:	7edb      	ldrb	r3, [r3, #27]
 800226a:	2b01      	cmp	r3, #1
 800226c:	d108      	bne.n	8002280 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681a      	ldr	r2, [r3, #0]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f022 0210 	bic.w	r2, r2, #16
 800227c:	601a      	str	r2, [r3, #0]
 800227e:	e007      	b.n	8002290 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	681a      	ldr	r2, [r3, #0]
 8002286:	687b      	ldr	r3, [r7, #4]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f042 0210 	orr.w	r2, r2, #16
 800228e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	7f1b      	ldrb	r3, [r3, #28]
 8002294:	2b01      	cmp	r3, #1
 8002296:	d108      	bne.n	80022aa <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	681a      	ldr	r2, [r3, #0]
 800229e:	687b      	ldr	r3, [r7, #4]
 80022a0:	681b      	ldr	r3, [r3, #0]
 80022a2:	f042 0208 	orr.w	r2, r2, #8
 80022a6:	601a      	str	r2, [r3, #0]
 80022a8:	e007      	b.n	80022ba <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 80022aa:	687b      	ldr	r3, [r7, #4]
 80022ac:	681b      	ldr	r3, [r3, #0]
 80022ae:	681a      	ldr	r2, [r3, #0]
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f022 0208 	bic.w	r2, r2, #8
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 80022ba:	687b      	ldr	r3, [r7, #4]
 80022bc:	7f5b      	ldrb	r3, [r3, #29]
 80022be:	2b01      	cmp	r3, #1
 80022c0:	d108      	bne.n	80022d4 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	681a      	ldr	r2, [r3, #0]
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	681b      	ldr	r3, [r3, #0]
 80022cc:	f042 0204 	orr.w	r2, r2, #4
 80022d0:	601a      	str	r2, [r3, #0]
 80022d2:	e007      	b.n	80022e4 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	681b      	ldr	r3, [r3, #0]
 80022d8:	681a      	ldr	r2, [r3, #0]
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f022 0204 	bic.w	r2, r2, #4
 80022e2:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	689a      	ldr	r2, [r3, #8]
 80022e8:	687b      	ldr	r3, [r7, #4]
 80022ea:	68db      	ldr	r3, [r3, #12]
 80022ec:	431a      	orrs	r2, r3
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	691b      	ldr	r3, [r3, #16]
 80022f2:	431a      	orrs	r2, r3
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	695b      	ldr	r3, [r3, #20]
 80022f8:	ea42 0103 	orr.w	r1, r2, r3
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	685b      	ldr	r3, [r3, #4]
 8002300:	1e5a      	subs	r2, r3, #1
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	681b      	ldr	r3, [r3, #0]
 8002306:	430a      	orrs	r2, r1
 8002308:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	2201      	movs	r2, #1
 8002314:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8002318:	2300      	movs	r3, #0
}
 800231a:	4618      	mov	r0, r3
 800231c:	3710      	adds	r7, #16
 800231e:	46bd      	mov	sp, r7
 8002320:	bd80      	pop	{r7, pc}
	...

08002324 <HAL_CAN_ConfigFilter>:
  * @param  sFilterConfig pointer to a CAN_FilterTypeDef structure that
  *         contains the filter configuration information.
  * @retval None
  */
HAL_StatusTypeDef HAL_CAN_ConfigFilter(CAN_HandleTypeDef *hcan, const CAN_FilterTypeDef *sFilterConfig)
{
 8002324:	b480      	push	{r7}
 8002326:	b087      	sub	sp, #28
 8002328:	af00      	add	r7, sp, #0
 800232a:	6078      	str	r0, [r7, #4]
 800232c:	6039      	str	r1, [r7, #0]
  uint32_t filternbrbitpos;
  CAN_TypeDef *can_ip;
  HAL_CAN_StateTypeDef state = hcan->State;
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002334:	75fb      	strb	r3, [r7, #23]

  if ((state == HAL_CAN_STATE_READY) ||
 8002336:	7dfb      	ldrb	r3, [r7, #23]
 8002338:	2b01      	cmp	r3, #1
 800233a:	d003      	beq.n	8002344 <HAL_CAN_ConfigFilter+0x20>
 800233c:	7dfb      	ldrb	r3, [r7, #23]
 800233e:	2b02      	cmp	r3, #2
 8002340:	f040 80be 	bne.w	80024c0 <HAL_CAN_ConfigFilter+0x19c>
      assert_param(IS_CAN_FILTER_BANK_DUAL(sFilterConfig->SlaveStartFilterBank));
    }
#elif defined(CAN2)
    /* CAN1 and CAN2 are dual instances with 28 common filters banks */
    /* Select master instance to access the filter banks */
    can_ip = CAN1;
 8002344:	4b65      	ldr	r3, [pc, #404]	@ (80024dc <HAL_CAN_ConfigFilter+0x1b8>)
 8002346:	613b      	str	r3, [r7, #16]
    /* Check the parameters */
    assert_param(IS_CAN_FILTER_BANK_SINGLE(sFilterConfig->FilterBank));
#endif /* CAN3 */

    /* Initialisation mode for the filter */
    SET_BIT(can_ip->FMR, CAN_FMR_FINIT);
 8002348:	693b      	ldr	r3, [r7, #16]
 800234a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800234e:	f043 0201 	orr.w	r2, r3, #1
 8002352:	693b      	ldr	r3, [r7, #16]
 8002354:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
      SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
    }

#elif defined(CAN2)
    /* Select the start filter number of CAN2 slave instance */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_CAN2SB);
 8002358:	693b      	ldr	r3, [r7, #16]
 800235a:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800235e:	f423 527c 	bic.w	r2, r3, #16128	@ 0x3f00
 8002362:	693b      	ldr	r3, [r7, #16]
 8002364:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
    SET_BIT(can_ip->FMR, sFilterConfig->SlaveStartFilterBank << CAN_FMR_CAN2SB_Pos);
 8002368:	693b      	ldr	r3, [r7, #16]
 800236a:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 800236e:	683b      	ldr	r3, [r7, #0]
 8002370:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002372:	021b      	lsls	r3, r3, #8
 8002374:	431a      	orrs	r2, r3
 8002376:	693b      	ldr	r3, [r7, #16]
 8002378:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

#endif /* CAN3 */
    /* Convert filter number into bit position */
    filternbrbitpos = (uint32_t)1 << (sFilterConfig->FilterBank & 0x1FU);
 800237c:	683b      	ldr	r3, [r7, #0]
 800237e:	695b      	ldr	r3, [r3, #20]
 8002380:	f003 031f 	and.w	r3, r3, #31
 8002384:	2201      	movs	r2, #1
 8002386:	fa02 f303 	lsl.w	r3, r2, r3
 800238a:	60fb      	str	r3, [r7, #12]

    /* Filter Deactivation */
    CLEAR_BIT(can_ip->FA1R, filternbrbitpos);
 800238c:	693b      	ldr	r3, [r7, #16]
 800238e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 8002392:	68fb      	ldr	r3, [r7, #12]
 8002394:	43db      	mvns	r3, r3
 8002396:	401a      	ands	r2, r3
 8002398:	693b      	ldr	r3, [r7, #16]
 800239a:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c

    /* Filter Scale */
    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_16BIT)
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	69db      	ldr	r3, [r3, #28]
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d123      	bne.n	80023ee <HAL_CAN_ConfigFilter+0xca>
    {
      /* 16-bit scale for the filter */
      CLEAR_BIT(can_ip->FS1R, filternbrbitpos);
 80023a6:	693b      	ldr	r3, [r7, #16]
 80023a8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	43db      	mvns	r3, r3
 80023b0:	401a      	ands	r2, r3
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* First 16-bit identifier and First 16-bit mask */
      /* Or First 16-bit identifier and Second 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023b8:	683b      	ldr	r3, [r7, #0]
 80023ba:	68db      	ldr	r3, [r3, #12]
 80023bc:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 80023be:	683b      	ldr	r3, [r7, #0]
 80023c0:	685b      	ldr	r3, [r3, #4]
 80023c2:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023c4:	683a      	ldr	r2, [r7, #0]
 80023c6:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow) << 16U) |
 80023c8:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 80023ca:	693b      	ldr	r3, [r7, #16]
 80023cc:	3248      	adds	r2, #72	@ 0x48
 80023ce:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* Second 16-bit identifier and Second 16-bit mask */
      /* Or Third 16-bit identifier and Fourth 16-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023d2:	683b      	ldr	r3, [r7, #0]
 80023d4:	689b      	ldr	r3, [r3, #8]
 80023d6:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh);
 80023d8:	683b      	ldr	r3, [r7, #0]
 80023da:	681b      	ldr	r3, [r3, #0]
 80023dc:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023de:	683b      	ldr	r3, [r7, #0]
 80023e0:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 80023e2:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 80023e4:	6939      	ldr	r1, [r7, #16]
 80023e6:	3348      	adds	r3, #72	@ 0x48
 80023e8:	00db      	lsls	r3, r3, #3
 80023ea:	440b      	add	r3, r1
 80023ec:	605a      	str	r2, [r3, #4]
    }

    if (sFilterConfig->FilterScale == CAN_FILTERSCALE_32BIT)
 80023ee:	683b      	ldr	r3, [r7, #0]
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	2b01      	cmp	r3, #1
 80023f4:	d122      	bne.n	800243c <HAL_CAN_ConfigFilter+0x118>
    {
      /* 32-bit scale for the filter */
      SET_BIT(can_ip->FS1R, filternbrbitpos);
 80023f6:	693b      	ldr	r3, [r7, #16]
 80023f8:	f8d3 220c 	ldr.w	r2, [r3, #524]	@ 0x20c
 80023fc:	68fb      	ldr	r3, [r7, #12]
 80023fe:	431a      	orrs	r2, r3
 8002400:	693b      	ldr	r3, [r7, #16]
 8002402:	f8c3 220c 	str.w	r2, [r3, #524]	@ 0x20c

      /* 32-bit identifier or First 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002406:	683b      	ldr	r3, [r7, #0]
 8002408:	681b      	ldr	r3, [r3, #0]
 800240a:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdLow);
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	b29b      	uxth	r3, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002412:	683a      	ldr	r2, [r7, #0]
 8002414:	6952      	ldr	r2, [r2, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterIdHigh) << 16U) |
 8002416:	4319      	orrs	r1, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR1 =
 8002418:	693b      	ldr	r3, [r7, #16]
 800241a:	3248      	adds	r2, #72	@ 0x48
 800241c:	f843 1032 	str.w	r1, [r3, r2, lsl #3]

      /* 32-bit mask or Second 32-bit identifier */
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002420:	683b      	ldr	r3, [r7, #0]
 8002422:	689b      	ldr	r3, [r3, #8]
 8002424:	0419      	lsls	r1, r3, #16
        (0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdLow);
 8002426:	683b      	ldr	r3, [r7, #0]
 8002428:	68db      	ldr	r3, [r3, #12]
 800242a:	b29a      	uxth	r2, r3
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 800242c:	683b      	ldr	r3, [r7, #0]
 800242e:	695b      	ldr	r3, [r3, #20]
        ((0x0000FFFFU & (uint32_t)sFilterConfig->FilterMaskIdHigh) << 16U) |
 8002430:	430a      	orrs	r2, r1
      can_ip->sFilterRegister[sFilterConfig->FilterBank].FR2 =
 8002432:	6939      	ldr	r1, [r7, #16]
 8002434:	3348      	adds	r3, #72	@ 0x48
 8002436:	00db      	lsls	r3, r3, #3
 8002438:	440b      	add	r3, r1
 800243a:	605a      	str	r2, [r3, #4]
    }

    /* Filter Mode */
    if (sFilterConfig->FilterMode == CAN_FILTERMODE_IDMASK)
 800243c:	683b      	ldr	r3, [r7, #0]
 800243e:	699b      	ldr	r3, [r3, #24]
 8002440:	2b00      	cmp	r3, #0
 8002442:	d109      	bne.n	8002458 <HAL_CAN_ConfigFilter+0x134>
    {
      /* Id/Mask mode for the filter*/
      CLEAR_BIT(can_ip->FM1R, filternbrbitpos);
 8002444:	693b      	ldr	r3, [r7, #16]
 8002446:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800244a:	68fb      	ldr	r3, [r7, #12]
 800244c:	43db      	mvns	r3, r3
 800244e:	401a      	ands	r2, r3
 8002450:	693b      	ldr	r3, [r7, #16]
 8002452:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 8002456:	e007      	b.n	8002468 <HAL_CAN_ConfigFilter+0x144>
    }
    else /* CAN_FilterInitStruct->CAN_FilterMode == CAN_FilterMode_IdList */
    {
      /* Identifier list mode for the filter*/
      SET_BIT(can_ip->FM1R, filternbrbitpos);
 8002458:	693b      	ldr	r3, [r7, #16]
 800245a:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 800245e:	68fb      	ldr	r3, [r7, #12]
 8002460:	431a      	orrs	r2, r3
 8002462:	693b      	ldr	r3, [r7, #16]
 8002464:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    }

    /* Filter FIFO assignment */
    if (sFilterConfig->FilterFIFOAssignment == CAN_FILTER_FIFO0)
 8002468:	683b      	ldr	r3, [r7, #0]
 800246a:	691b      	ldr	r3, [r3, #16]
 800246c:	2b00      	cmp	r3, #0
 800246e:	d109      	bne.n	8002484 <HAL_CAN_ConfigFilter+0x160>
    {
      /* FIFO 0 assignation for the filter */
      CLEAR_BIT(can_ip->FFA1R, filternbrbitpos);
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	43db      	mvns	r3, r3
 800247a:	401a      	ands	r2, r3
 800247c:	693b      	ldr	r3, [r7, #16]
 800247e:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
 8002482:	e007      	b.n	8002494 <HAL_CAN_ConfigFilter+0x170>
    }
    else
    {
      /* FIFO 1 assignation for the filter */
      SET_BIT(can_ip->FFA1R, filternbrbitpos);
 8002484:	693b      	ldr	r3, [r7, #16]
 8002486:	f8d3 2214 	ldr.w	r2, [r3, #532]	@ 0x214
 800248a:	68fb      	ldr	r3, [r7, #12]
 800248c:	431a      	orrs	r2, r3
 800248e:	693b      	ldr	r3, [r7, #16]
 8002490:	f8c3 2214 	str.w	r2, [r3, #532]	@ 0x214
    }

    /* Filter activation */
    if (sFilterConfig->FilterActivation == CAN_FILTER_ENABLE)
 8002494:	683b      	ldr	r3, [r7, #0]
 8002496:	6a1b      	ldr	r3, [r3, #32]
 8002498:	2b01      	cmp	r3, #1
 800249a:	d107      	bne.n	80024ac <HAL_CAN_ConfigFilter+0x188>
    {
      SET_BIT(can_ip->FA1R, filternbrbitpos);
 800249c:	693b      	ldr	r3, [r7, #16]
 800249e:	f8d3 221c 	ldr.w	r2, [r3, #540]	@ 0x21c
 80024a2:	68fb      	ldr	r3, [r7, #12]
 80024a4:	431a      	orrs	r2, r3
 80024a6:	693b      	ldr	r3, [r7, #16]
 80024a8:	f8c3 221c 	str.w	r2, [r3, #540]	@ 0x21c
    }

    /* Leave the initialisation mode for the filter */
    CLEAR_BIT(can_ip->FMR, CAN_FMR_FINIT);
 80024ac:	693b      	ldr	r3, [r7, #16]
 80024ae:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80024b2:	f023 0201 	bic.w	r2, r3, #1
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

    /* Return function status */
    return HAL_OK;
 80024bc:	2300      	movs	r3, #0
 80024be:	e006      	b.n	80024ce <HAL_CAN_ConfigFilter+0x1aa>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80024c4:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80024cc:	2301      	movs	r3, #1
  }
}
 80024ce:	4618      	mov	r0, r3
 80024d0:	371c      	adds	r7, #28
 80024d2:	46bd      	mov	sp, r7
 80024d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024d8:	4770      	bx	lr
 80024da:	bf00      	nop
 80024dc:	40006400 	.word	0x40006400

080024e0 <HAL_CAN_Start>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Start(CAN_HandleTypeDef *hcan)
{
 80024e0:	b580      	push	{r7, lr}
 80024e2:	b084      	sub	sp, #16
 80024e4:	af00      	add	r7, sp, #0
 80024e6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (hcan->State == HAL_CAN_STATE_READY)
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	f893 3020 	ldrb.w	r3, [r3, #32]
 80024ee:	b2db      	uxtb	r3, r3
 80024f0:	2b01      	cmp	r3, #1
 80024f2:	d12e      	bne.n	8002552 <HAL_CAN_Start+0x72>
  {
    /* Change CAN peripheral state */
    hcan->State = HAL_CAN_STATE_LISTENING;
 80024f4:	687b      	ldr	r3, [r7, #4]
 80024f6:	2202      	movs	r2, #2
 80024f8:	f883 2020 	strb.w	r2, [r3, #32]

    /* Request leave initialisation */
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	681a      	ldr	r2, [r3, #0]
 8002502:	687b      	ldr	r3, [r7, #4]
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f022 0201 	bic.w	r2, r2, #1
 800250a:	601a      	str	r2, [r3, #0]

    /* Get tick */
    tickstart = HAL_GetTick();
 800250c:	f7ff fe02 	bl	8002114 <HAL_GetTick>
 8002510:	60f8      	str	r0, [r7, #12]

    /* Wait the acknowledge */
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 8002512:	e012      	b.n	800253a <HAL_CAN_Start+0x5a>
    {
      /* Check for the Timeout */
      if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8002514:	f7ff fdfe 	bl	8002114 <HAL_GetTick>
 8002518:	4602      	mov	r2, r0
 800251a:	68fb      	ldr	r3, [r7, #12]
 800251c:	1ad3      	subs	r3, r2, r3
 800251e:	2b0a      	cmp	r3, #10
 8002520:	d90b      	bls.n	800253a <HAL_CAN_Start+0x5a>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002526:	f443 3200 	orr.w	r2, r3, #131072	@ 0x20000
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Change CAN state */
        hcan->State = HAL_CAN_STATE_ERROR;
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2205      	movs	r2, #5
 8002532:	f883 2020 	strb.w	r2, [r3, #32]

        return HAL_ERROR;
 8002536:	2301      	movs	r3, #1
 8002538:	e012      	b.n	8002560 <HAL_CAN_Start+0x80>
    while ((hcan->Instance->MSR & CAN_MSR_INAK) != 0U)
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	681b      	ldr	r3, [r3, #0]
 800253e:	685b      	ldr	r3, [r3, #4]
 8002540:	f003 0301 	and.w	r3, r3, #1
 8002544:	2b00      	cmp	r3, #0
 8002546:	d1e5      	bne.n	8002514 <HAL_CAN_Start+0x34>
      }
    }

    /* Reset the CAN ErrorCode */
    hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	2200      	movs	r2, #0
 800254c:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Return function status */
    return HAL_OK;
 800254e:	2300      	movs	r3, #0
 8002550:	e006      	b.n	8002560 <HAL_CAN_Start+0x80>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_READY;
 8002552:	687b      	ldr	r3, [r7, #4]
 8002554:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002556:	f443 2200 	orr.w	r2, r3, #524288	@ 0x80000
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800255e:	2301      	movs	r3, #1
  }
}
 8002560:	4618      	mov	r0, r3
 8002562:	3710      	adds	r7, #16
 8002564:	46bd      	mov	sp, r7
 8002566:	bd80      	pop	{r7, pc}

08002568 <HAL_CAN_AddTxMessage>:
  *         This parameter can be a value of @arg CAN_Tx_Mailboxes.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_AddTxMessage(CAN_HandleTypeDef *hcan, const CAN_TxHeaderTypeDef *pHeader,
                                       const uint8_t aData[], uint32_t *pTxMailbox)
{
 8002568:	b480      	push	{r7}
 800256a:	b089      	sub	sp, #36	@ 0x24
 800256c:	af00      	add	r7, sp, #0
 800256e:	60f8      	str	r0, [r7, #12]
 8002570:	60b9      	str	r1, [r7, #8]
 8002572:	607a      	str	r2, [r7, #4]
 8002574:	603b      	str	r3, [r7, #0]
  uint32_t transmitmailbox;
  HAL_CAN_StateTypeDef state = hcan->State;
 8002576:	68fb      	ldr	r3, [r7, #12]
 8002578:	f893 3020 	ldrb.w	r3, [r3, #32]
 800257c:	77fb      	strb	r3, [r7, #31]
  uint32_t tsr = READ_REG(hcan->Instance->TSR);
 800257e:	68fb      	ldr	r3, [r7, #12]
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	689b      	ldr	r3, [r3, #8]
 8002584:	61bb      	str	r3, [r7, #24]
  {
    assert_param(IS_CAN_EXTID(pHeader->ExtId));
  }
  assert_param(IS_FUNCTIONAL_STATE(pHeader->TransmitGlobalTime));

  if ((state == HAL_CAN_STATE_READY) ||
 8002586:	7ffb      	ldrb	r3, [r7, #31]
 8002588:	2b01      	cmp	r3, #1
 800258a:	d003      	beq.n	8002594 <HAL_CAN_AddTxMessage+0x2c>
 800258c:	7ffb      	ldrb	r3, [r7, #31]
 800258e:	2b02      	cmp	r3, #2
 8002590:	f040 80ad 	bne.w	80026ee <HAL_CAN_AddTxMessage+0x186>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check that all the Tx mailboxes are not full */
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 8002594:	69bb      	ldr	r3, [r7, #24]
 8002596:	f003 6380 	and.w	r3, r3, #67108864	@ 0x4000000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d10a      	bne.n	80025b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME1) != 0U) ||
 800259e:	69bb      	ldr	r3, [r7, #24]
 80025a0:	f003 6300 	and.w	r3, r3, #134217728	@ 0x8000000
    if (((tsr & CAN_TSR_TME0) != 0U) ||
 80025a4:	2b00      	cmp	r3, #0
 80025a6:	d105      	bne.n	80025b4 <HAL_CAN_AddTxMessage+0x4c>
        ((tsr & CAN_TSR_TME2) != 0U))
 80025a8:	69bb      	ldr	r3, [r7, #24]
 80025aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
        ((tsr & CAN_TSR_TME1) != 0U) ||
 80025ae:	2b00      	cmp	r3, #0
 80025b0:	f000 8095 	beq.w	80026de <HAL_CAN_AddTxMessage+0x176>
    {
      /* Select an empty transmit mailbox */
      transmitmailbox = (tsr & CAN_TSR_CODE) >> CAN_TSR_CODE_Pos;
 80025b4:	69bb      	ldr	r3, [r7, #24]
 80025b6:	0e1b      	lsrs	r3, r3, #24
 80025b8:	f003 0303 	and.w	r3, r3, #3
 80025bc:	617b      	str	r3, [r7, #20]

      /* Store the Tx mailbox */
      *pTxMailbox = (uint32_t)1 << transmitmailbox;
 80025be:	2201      	movs	r2, #1
 80025c0:	697b      	ldr	r3, [r7, #20]
 80025c2:	409a      	lsls	r2, r3
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	601a      	str	r2, [r3, #0]

      /* Set up the Id */
      if (pHeader->IDE == CAN_ID_STD)
 80025c8:	68bb      	ldr	r3, [r7, #8]
 80025ca:	689b      	ldr	r3, [r3, #8]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d10d      	bne.n	80025ec <HAL_CAN_AddTxMessage+0x84>
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025d0:	68bb      	ldr	r3, [r7, #8]
 80025d2:	681b      	ldr	r3, [r3, #0]
 80025d4:	055a      	lsls	r2, r3, #21
                                                           pHeader->RTR);
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->StdId << CAN_TI0R_STID_Pos) |
 80025da:	68f9      	ldr	r1, [r7, #12]
 80025dc:	6809      	ldr	r1, [r1, #0]
 80025de:	431a      	orrs	r2, r3
 80025e0:	697b      	ldr	r3, [r7, #20]
 80025e2:	3318      	adds	r3, #24
 80025e4:	011b      	lsls	r3, r3, #4
 80025e6:	440b      	add	r3, r1
 80025e8:	601a      	str	r2, [r3, #0]
 80025ea:	e00f      	b.n	800260c <HAL_CAN_AddTxMessage+0xa4>
      }
      else
      {
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025ec:	68bb      	ldr	r3, [r7, #8]
 80025ee:	685b      	ldr	r3, [r3, #4]
 80025f0:	00da      	lsls	r2, r3, #3
                                                           pHeader->IDE |
 80025f2:	68bb      	ldr	r3, [r7, #8]
 80025f4:	689b      	ldr	r3, [r3, #8]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025f6:	431a      	orrs	r2, r3
                                                           pHeader->RTR);
 80025f8:	68bb      	ldr	r3, [r7, #8]
 80025fa:	68db      	ldr	r3, [r3, #12]
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 80025fc:	68f9      	ldr	r1, [r7, #12]
 80025fe:	6809      	ldr	r1, [r1, #0]
                                                           pHeader->IDE |
 8002600:	431a      	orrs	r2, r3
        hcan->Instance->sTxMailBox[transmitmailbox].TIR = ((pHeader->ExtId << CAN_TI0R_EXID_Pos) |
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	3318      	adds	r3, #24
 8002606:	011b      	lsls	r3, r3, #4
 8002608:	440b      	add	r3, r1
 800260a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the DLC */
      hcan->Instance->sTxMailBox[transmitmailbox].TDTR = (pHeader->DLC);
 800260c:	68fb      	ldr	r3, [r7, #12]
 800260e:	6819      	ldr	r1, [r3, #0]
 8002610:	68bb      	ldr	r3, [r7, #8]
 8002612:	691a      	ldr	r2, [r3, #16]
 8002614:	697b      	ldr	r3, [r7, #20]
 8002616:	3318      	adds	r3, #24
 8002618:	011b      	lsls	r3, r3, #4
 800261a:	440b      	add	r3, r1
 800261c:	3304      	adds	r3, #4
 800261e:	601a      	str	r2, [r3, #0]

      /* Set up the Transmit Global Time mode */
      if (pHeader->TransmitGlobalTime == ENABLE)
 8002620:	68bb      	ldr	r3, [r7, #8]
 8002622:	7d1b      	ldrb	r3, [r3, #20]
 8002624:	2b01      	cmp	r3, #1
 8002626:	d111      	bne.n	800264c <HAL_CAN_AddTxMessage+0xe4>
      {
        SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TDTR, CAN_TDT0R_TGT);
 8002628:	68fb      	ldr	r3, [r7, #12]
 800262a:	681a      	ldr	r2, [r3, #0]
 800262c:	697b      	ldr	r3, [r7, #20]
 800262e:	3318      	adds	r3, #24
 8002630:	011b      	lsls	r3, r3, #4
 8002632:	4413      	add	r3, r2
 8002634:	3304      	adds	r3, #4
 8002636:	681b      	ldr	r3, [r3, #0]
 8002638:	68fa      	ldr	r2, [r7, #12]
 800263a:	6811      	ldr	r1, [r2, #0]
 800263c:	f443 7280 	orr.w	r2, r3, #256	@ 0x100
 8002640:	697b      	ldr	r3, [r7, #20]
 8002642:	3318      	adds	r3, #24
 8002644:	011b      	lsls	r3, r3, #4
 8002646:	440b      	add	r3, r1
 8002648:	3304      	adds	r3, #4
 800264a:	601a      	str	r2, [r3, #0]
      }

      /* Set up the data field */
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDHR,
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	3307      	adds	r3, #7
 8002650:	781b      	ldrb	r3, [r3, #0]
 8002652:	061a      	lsls	r2, r3, #24
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	3306      	adds	r3, #6
 8002658:	781b      	ldrb	r3, [r3, #0]
 800265a:	041b      	lsls	r3, r3, #16
 800265c:	431a      	orrs	r2, r3
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	3305      	adds	r3, #5
 8002662:	781b      	ldrb	r3, [r3, #0]
 8002664:	021b      	lsls	r3, r3, #8
 8002666:	4313      	orrs	r3, r2
 8002668:	687a      	ldr	r2, [r7, #4]
 800266a:	3204      	adds	r2, #4
 800266c:	7812      	ldrb	r2, [r2, #0]
 800266e:	4610      	mov	r0, r2
 8002670:	68fa      	ldr	r2, [r7, #12]
 8002672:	6811      	ldr	r1, [r2, #0]
 8002674:	ea43 0200 	orr.w	r2, r3, r0
 8002678:	697b      	ldr	r3, [r7, #20]
 800267a:	011b      	lsls	r3, r3, #4
 800267c:	440b      	add	r3, r1
 800267e:	f503 73c6 	add.w	r3, r3, #396	@ 0x18c
 8002682:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[7] << CAN_TDH0R_DATA7_Pos) |
                ((uint32_t)aData[6] << CAN_TDH0R_DATA6_Pos) |
                ((uint32_t)aData[5] << CAN_TDH0R_DATA5_Pos) |
                ((uint32_t)aData[4] << CAN_TDH0R_DATA4_Pos));
      WRITE_REG(hcan->Instance->sTxMailBox[transmitmailbox].TDLR,
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	3303      	adds	r3, #3
 8002688:	781b      	ldrb	r3, [r3, #0]
 800268a:	061a      	lsls	r2, r3, #24
 800268c:	687b      	ldr	r3, [r7, #4]
 800268e:	3302      	adds	r3, #2
 8002690:	781b      	ldrb	r3, [r3, #0]
 8002692:	041b      	lsls	r3, r3, #16
 8002694:	431a      	orrs	r2, r3
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	3301      	adds	r3, #1
 800269a:	781b      	ldrb	r3, [r3, #0]
 800269c:	021b      	lsls	r3, r3, #8
 800269e:	4313      	orrs	r3, r2
 80026a0:	687a      	ldr	r2, [r7, #4]
 80026a2:	7812      	ldrb	r2, [r2, #0]
 80026a4:	4610      	mov	r0, r2
 80026a6:	68fa      	ldr	r2, [r7, #12]
 80026a8:	6811      	ldr	r1, [r2, #0]
 80026aa:	ea43 0200 	orr.w	r2, r3, r0
 80026ae:	697b      	ldr	r3, [r7, #20]
 80026b0:	011b      	lsls	r3, r3, #4
 80026b2:	440b      	add	r3, r1
 80026b4:	f503 73c4 	add.w	r3, r3, #392	@ 0x188
 80026b8:	601a      	str	r2, [r3, #0]
                ((uint32_t)aData[2] << CAN_TDL0R_DATA2_Pos) |
                ((uint32_t)aData[1] << CAN_TDL0R_DATA1_Pos) |
                ((uint32_t)aData[0] << CAN_TDL0R_DATA0_Pos));

      /* Request transmission */
      SET_BIT(hcan->Instance->sTxMailBox[transmitmailbox].TIR, CAN_TI0R_TXRQ);
 80026ba:	68fb      	ldr	r3, [r7, #12]
 80026bc:	681a      	ldr	r2, [r3, #0]
 80026be:	697b      	ldr	r3, [r7, #20]
 80026c0:	3318      	adds	r3, #24
 80026c2:	011b      	lsls	r3, r3, #4
 80026c4:	4413      	add	r3, r2
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	68fa      	ldr	r2, [r7, #12]
 80026ca:	6811      	ldr	r1, [r2, #0]
 80026cc:	f043 0201 	orr.w	r2, r3, #1
 80026d0:	697b      	ldr	r3, [r7, #20]
 80026d2:	3318      	adds	r3, #24
 80026d4:	011b      	lsls	r3, r3, #4
 80026d6:	440b      	add	r3, r1
 80026d8:	601a      	str	r2, [r3, #0]

      /* Return function status */
      return HAL_OK;
 80026da:	2300      	movs	r3, #0
 80026dc:	e00e      	b.n	80026fc <HAL_CAN_AddTxMessage+0x194>
    }
    else
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 80026de:	68fb      	ldr	r3, [r7, #12]
 80026e0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026e2:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 80026e6:	68fb      	ldr	r3, [r7, #12]
 80026e8:	625a      	str	r2, [r3, #36]	@ 0x24

      return HAL_ERROR;
 80026ea:	2301      	movs	r3, #1
 80026ec:	e006      	b.n	80026fc <HAL_CAN_AddTxMessage+0x194>
    }
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 80026ee:	68fb      	ldr	r3, [r7, #12]
 80026f0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026f2:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 80026f6:	68fb      	ldr	r3, [r7, #12]
 80026f8:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 80026fa:	2301      	movs	r3, #1
  }
}
 80026fc:	4618      	mov	r0, r3
 80026fe:	3724      	adds	r7, #36	@ 0x24
 8002700:	46bd      	mov	sp, r7
 8002702:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002706:	4770      	bx	lr

08002708 <HAL_CAN_GetRxMessage>:
  * @param  aData array where the payload of the Rx frame will be stored.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_GetRxMessage(CAN_HandleTypeDef *hcan, uint32_t RxFifo,
                                       CAN_RxHeaderTypeDef *pHeader, uint8_t aData[])
{
 8002708:	b480      	push	{r7}
 800270a:	b087      	sub	sp, #28
 800270c:	af00      	add	r7, sp, #0
 800270e:	60f8      	str	r0, [r7, #12]
 8002710:	60b9      	str	r1, [r7, #8]
 8002712:	607a      	str	r2, [r7, #4]
 8002714:	603b      	str	r3, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002716:	68fb      	ldr	r3, [r7, #12]
 8002718:	f893 3020 	ldrb.w	r3, [r3, #32]
 800271c:	75fb      	strb	r3, [r7, #23]

  assert_param(IS_CAN_RX_FIFO(RxFifo));

  if ((state == HAL_CAN_STATE_READY) ||
 800271e:	7dfb      	ldrb	r3, [r7, #23]
 8002720:	2b01      	cmp	r3, #1
 8002722:	d003      	beq.n	800272c <HAL_CAN_GetRxMessage+0x24>
 8002724:	7dfb      	ldrb	r3, [r7, #23]
 8002726:	2b02      	cmp	r3, #2
 8002728:	f040 8103 	bne.w	8002932 <HAL_CAN_GetRxMessage+0x22a>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check the Rx FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 800272c:	68bb      	ldr	r3, [r7, #8]
 800272e:	2b00      	cmp	r3, #0
 8002730:	d10e      	bne.n	8002750 <HAL_CAN_GetRxMessage+0x48>
    {
      /* Check that the Rx FIFO 0 is not empty */
      if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) == 0U)
 8002732:	68fb      	ldr	r3, [r7, #12]
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	68db      	ldr	r3, [r3, #12]
 8002738:	f003 0303 	and.w	r3, r3, #3
 800273c:	2b00      	cmp	r3, #0
 800273e:	d116      	bne.n	800276e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002744:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800274c:	2301      	movs	r3, #1
 800274e:	e0f7      	b.n	8002940 <HAL_CAN_GetRxMessage+0x238>
      }
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Check that the Rx FIFO 1 is not empty */
      if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) == 0U)
 8002750:	68fb      	ldr	r3, [r7, #12]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	691b      	ldr	r3, [r3, #16]
 8002756:	f003 0303 	and.w	r3, r3, #3
 800275a:	2b00      	cmp	r3, #0
 800275c:	d107      	bne.n	800276e <HAL_CAN_GetRxMessage+0x66>
      {
        /* Update error code */
        hcan->ErrorCode |= HAL_CAN_ERROR_PARAM;
 800275e:	68fb      	ldr	r3, [r7, #12]
 8002760:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002762:	f443 1200 	orr.w	r2, r3, #2097152	@ 0x200000
 8002766:	68fb      	ldr	r3, [r7, #12]
 8002768:	625a      	str	r2, [r3, #36]	@ 0x24

        return HAL_ERROR;
 800276a:	2301      	movs	r3, #1
 800276c:	e0e8      	b.n	8002940 <HAL_CAN_GetRxMessage+0x238>
      }
    }

    /* Get the header */
    pHeader->IDE = CAN_RI0R_IDE & hcan->Instance->sFIFOMailBox[RxFifo].RIR;
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	681a      	ldr	r2, [r3, #0]
 8002772:	68bb      	ldr	r3, [r7, #8]
 8002774:	331b      	adds	r3, #27
 8002776:	011b      	lsls	r3, r3, #4
 8002778:	4413      	add	r3, r2
 800277a:	681b      	ldr	r3, [r3, #0]
 800277c:	f003 0204 	and.w	r2, r3, #4
 8002780:	687b      	ldr	r3, [r7, #4]
 8002782:	609a      	str	r2, [r3, #8]
    if (pHeader->IDE == CAN_ID_STD)
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	689b      	ldr	r3, [r3, #8]
 8002788:	2b00      	cmp	r3, #0
 800278a:	d10c      	bne.n	80027a6 <HAL_CAN_GetRxMessage+0x9e>
    {
      pHeader->StdId = (CAN_RI0R_STID & hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_TI0R_STID_Pos;
 800278c:	68fb      	ldr	r3, [r7, #12]
 800278e:	681a      	ldr	r2, [r3, #0]
 8002790:	68bb      	ldr	r3, [r7, #8]
 8002792:	331b      	adds	r3, #27
 8002794:	011b      	lsls	r3, r3, #4
 8002796:	4413      	add	r3, r2
 8002798:	681b      	ldr	r3, [r3, #0]
 800279a:	0d5b      	lsrs	r3, r3, #21
 800279c:	f3c3 020a 	ubfx	r2, r3, #0, #11
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	601a      	str	r2, [r3, #0]
 80027a4:	e00b      	b.n	80027be <HAL_CAN_GetRxMessage+0xb6>
    }
    else
    {
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
                        hcan->Instance->sFIFOMailBox[RxFifo].RIR) >> CAN_RI0R_EXID_Pos;
 80027a6:	68fb      	ldr	r3, [r7, #12]
 80027a8:	681a      	ldr	r2, [r3, #0]
 80027aa:	68bb      	ldr	r3, [r7, #8]
 80027ac:	331b      	adds	r3, #27
 80027ae:	011b      	lsls	r3, r3, #4
 80027b0:	4413      	add	r3, r2
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	08db      	lsrs	r3, r3, #3
 80027b6:	f023 4260 	bic.w	r2, r3, #3758096384	@ 0xe0000000
      pHeader->ExtId = ((CAN_RI0R_EXID | CAN_RI0R_STID) &
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	605a      	str	r2, [r3, #4]
    }
    pHeader->RTR = (CAN_RI0R_RTR & hcan->Instance->sFIFOMailBox[RxFifo].RIR);
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	681a      	ldr	r2, [r3, #0]
 80027c2:	68bb      	ldr	r3, [r7, #8]
 80027c4:	331b      	adds	r3, #27
 80027c6:	011b      	lsls	r3, r3, #4
 80027c8:	4413      	add	r3, r2
 80027ca:	681b      	ldr	r3, [r3, #0]
 80027cc:	f003 0202 	and.w	r2, r3, #2
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	60da      	str	r2, [r3, #12]
    if (((CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos) >= 8U)
 80027d4:	68fb      	ldr	r3, [r7, #12]
 80027d6:	681a      	ldr	r2, [r3, #0]
 80027d8:	68bb      	ldr	r3, [r7, #8]
 80027da:	331b      	adds	r3, #27
 80027dc:	011b      	lsls	r3, r3, #4
 80027de:	4413      	add	r3, r2
 80027e0:	3304      	adds	r3, #4
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	f003 0308 	and.w	r3, r3, #8
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d003      	beq.n	80027f4 <HAL_CAN_GetRxMessage+0xec>
    {
      /* Truncate DLC to 8 if received field is over range */
      pHeader->DLC = 8U;
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	2208      	movs	r2, #8
 80027f0:	611a      	str	r2, [r3, #16]
 80027f2:	e00b      	b.n	800280c <HAL_CAN_GetRxMessage+0x104>
    }
    else
    {
      pHeader->DLC = (CAN_RDT0R_DLC & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_DLC_Pos;
 80027f4:	68fb      	ldr	r3, [r7, #12]
 80027f6:	681a      	ldr	r2, [r3, #0]
 80027f8:	68bb      	ldr	r3, [r7, #8]
 80027fa:	331b      	adds	r3, #27
 80027fc:	011b      	lsls	r3, r3, #4
 80027fe:	4413      	add	r3, r2
 8002800:	3304      	adds	r3, #4
 8002802:	681b      	ldr	r3, [r3, #0]
 8002804:	f003 020f 	and.w	r2, r3, #15
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	611a      	str	r2, [r3, #16]
    }
    pHeader->FilterMatchIndex = (CAN_RDT0R_FMI & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_FMI_Pos;
 800280c:	68fb      	ldr	r3, [r7, #12]
 800280e:	681a      	ldr	r2, [r3, #0]
 8002810:	68bb      	ldr	r3, [r7, #8]
 8002812:	331b      	adds	r3, #27
 8002814:	011b      	lsls	r3, r3, #4
 8002816:	4413      	add	r3, r2
 8002818:	3304      	adds	r3, #4
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	0a1b      	lsrs	r3, r3, #8
 800281e:	b2da      	uxtb	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	619a      	str	r2, [r3, #24]
    pHeader->Timestamp = (CAN_RDT0R_TIME & hcan->Instance->sFIFOMailBox[RxFifo].RDTR) >> CAN_RDT0R_TIME_Pos;
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	681a      	ldr	r2, [r3, #0]
 8002828:	68bb      	ldr	r3, [r7, #8]
 800282a:	331b      	adds	r3, #27
 800282c:	011b      	lsls	r3, r3, #4
 800282e:	4413      	add	r3, r2
 8002830:	3304      	adds	r3, #4
 8002832:	681b      	ldr	r3, [r3, #0]
 8002834:	0c1b      	lsrs	r3, r3, #16
 8002836:	b29a      	uxth	r2, r3
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	615a      	str	r2, [r3, #20]

    /* Get the data */
    aData[0] = (uint8_t)((CAN_RDL0R_DATA0 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA0_Pos);
 800283c:	68fb      	ldr	r3, [r7, #12]
 800283e:	681a      	ldr	r2, [r3, #0]
 8002840:	68bb      	ldr	r3, [r7, #8]
 8002842:	011b      	lsls	r3, r3, #4
 8002844:	4413      	add	r3, r2
 8002846:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800284a:	681b      	ldr	r3, [r3, #0]
 800284c:	b2da      	uxtb	r2, r3
 800284e:	683b      	ldr	r3, [r7, #0]
 8002850:	701a      	strb	r2, [r3, #0]
    aData[1] = (uint8_t)((CAN_RDL0R_DATA1 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA1_Pos);
 8002852:	68fb      	ldr	r3, [r7, #12]
 8002854:	681a      	ldr	r2, [r3, #0]
 8002856:	68bb      	ldr	r3, [r7, #8]
 8002858:	011b      	lsls	r3, r3, #4
 800285a:	4413      	add	r3, r2
 800285c:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002860:	681b      	ldr	r3, [r3, #0]
 8002862:	0a1a      	lsrs	r2, r3, #8
 8002864:	683b      	ldr	r3, [r7, #0]
 8002866:	3301      	adds	r3, #1
 8002868:	b2d2      	uxtb	r2, r2
 800286a:	701a      	strb	r2, [r3, #0]
    aData[2] = (uint8_t)((CAN_RDL0R_DATA2 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA2_Pos);
 800286c:	68fb      	ldr	r3, [r7, #12]
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	68bb      	ldr	r3, [r7, #8]
 8002872:	011b      	lsls	r3, r3, #4
 8002874:	4413      	add	r3, r2
 8002876:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 800287a:	681b      	ldr	r3, [r3, #0]
 800287c:	0c1a      	lsrs	r2, r3, #16
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	3302      	adds	r3, #2
 8002882:	b2d2      	uxtb	r2, r2
 8002884:	701a      	strb	r2, [r3, #0]
    aData[3] = (uint8_t)((CAN_RDL0R_DATA3 & hcan->Instance->sFIFOMailBox[RxFifo].RDLR) >> CAN_RDL0R_DATA3_Pos);
 8002886:	68fb      	ldr	r3, [r7, #12]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	011b      	lsls	r3, r3, #4
 800288e:	4413      	add	r3, r2
 8002890:	f503 73dc 	add.w	r3, r3, #440	@ 0x1b8
 8002894:	681b      	ldr	r3, [r3, #0]
 8002896:	0e1a      	lsrs	r2, r3, #24
 8002898:	683b      	ldr	r3, [r7, #0]
 800289a:	3303      	adds	r3, #3
 800289c:	b2d2      	uxtb	r2, r2
 800289e:	701a      	strb	r2, [r3, #0]
    aData[4] = (uint8_t)((CAN_RDH0R_DATA4 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA4_Pos);
 80028a0:	68fb      	ldr	r3, [r7, #12]
 80028a2:	681a      	ldr	r2, [r3, #0]
 80028a4:	68bb      	ldr	r3, [r7, #8]
 80028a6:	011b      	lsls	r3, r3, #4
 80028a8:	4413      	add	r3, r2
 80028aa:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028ae:	681a      	ldr	r2, [r3, #0]
 80028b0:	683b      	ldr	r3, [r7, #0]
 80028b2:	3304      	adds	r3, #4
 80028b4:	b2d2      	uxtb	r2, r2
 80028b6:	701a      	strb	r2, [r3, #0]
    aData[5] = (uint8_t)((CAN_RDH0R_DATA5 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA5_Pos);
 80028b8:	68fb      	ldr	r3, [r7, #12]
 80028ba:	681a      	ldr	r2, [r3, #0]
 80028bc:	68bb      	ldr	r3, [r7, #8]
 80028be:	011b      	lsls	r3, r3, #4
 80028c0:	4413      	add	r3, r2
 80028c2:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028c6:	681b      	ldr	r3, [r3, #0]
 80028c8:	0a1a      	lsrs	r2, r3, #8
 80028ca:	683b      	ldr	r3, [r7, #0]
 80028cc:	3305      	adds	r3, #5
 80028ce:	b2d2      	uxtb	r2, r2
 80028d0:	701a      	strb	r2, [r3, #0]
    aData[6] = (uint8_t)((CAN_RDH0R_DATA6 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA6_Pos);
 80028d2:	68fb      	ldr	r3, [r7, #12]
 80028d4:	681a      	ldr	r2, [r3, #0]
 80028d6:	68bb      	ldr	r3, [r7, #8]
 80028d8:	011b      	lsls	r3, r3, #4
 80028da:	4413      	add	r3, r2
 80028dc:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	0c1a      	lsrs	r2, r3, #16
 80028e4:	683b      	ldr	r3, [r7, #0]
 80028e6:	3306      	adds	r3, #6
 80028e8:	b2d2      	uxtb	r2, r2
 80028ea:	701a      	strb	r2, [r3, #0]
    aData[7] = (uint8_t)((CAN_RDH0R_DATA7 & hcan->Instance->sFIFOMailBox[RxFifo].RDHR) >> CAN_RDH0R_DATA7_Pos);
 80028ec:	68fb      	ldr	r3, [r7, #12]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68bb      	ldr	r3, [r7, #8]
 80028f2:	011b      	lsls	r3, r3, #4
 80028f4:	4413      	add	r3, r2
 80028f6:	f503 73de 	add.w	r3, r3, #444	@ 0x1bc
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	0e1a      	lsrs	r2, r3, #24
 80028fe:	683b      	ldr	r3, [r7, #0]
 8002900:	3307      	adds	r3, #7
 8002902:	b2d2      	uxtb	r2, r2
 8002904:	701a      	strb	r2, [r3, #0]

    /* Release the FIFO */
    if (RxFifo == CAN_RX_FIFO0) /* Rx element is assigned to Rx FIFO 0 */
 8002906:	68bb      	ldr	r3, [r7, #8]
 8002908:	2b00      	cmp	r3, #0
 800290a:	d108      	bne.n	800291e <HAL_CAN_GetRxMessage+0x216>
    {
      /* Release RX FIFO 0 */
      SET_BIT(hcan->Instance->RF0R, CAN_RF0R_RFOM0);
 800290c:	68fb      	ldr	r3, [r7, #12]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	68da      	ldr	r2, [r3, #12]
 8002912:	68fb      	ldr	r3, [r7, #12]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f042 0220 	orr.w	r2, r2, #32
 800291a:	60da      	str	r2, [r3, #12]
 800291c:	e007      	b.n	800292e <HAL_CAN_GetRxMessage+0x226>
    }
    else /* Rx element is assigned to Rx FIFO 1 */
    {
      /* Release RX FIFO 1 */
      SET_BIT(hcan->Instance->RF1R, CAN_RF1R_RFOM1);
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	681b      	ldr	r3, [r3, #0]
 8002922:	691a      	ldr	r2, [r3, #16]
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f042 0220 	orr.w	r2, r2, #32
 800292c:	611a      	str	r2, [r3, #16]
    }

    /* Return function status */
    return HAL_OK;
 800292e:	2300      	movs	r3, #0
 8002930:	e006      	b.n	8002940 <HAL_CAN_GetRxMessage+0x238>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 8002932:	68fb      	ldr	r3, [r7, #12]
 8002934:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002936:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 800293a:	68fb      	ldr	r3, [r7, #12]
 800293c:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
  }
}
 8002940:	4618      	mov	r0, r3
 8002942:	371c      	adds	r7, #28
 8002944:	46bd      	mov	sp, r7
 8002946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800294a:	4770      	bx	lr

0800294c <HAL_CAN_ActivateNotification>:
  * @param  ActiveITs indicates which interrupts will be enabled.
  *         This parameter can be any combination of @arg CAN_Interrupts.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_ActivateNotification(CAN_HandleTypeDef *hcan, uint32_t ActiveITs)
{
 800294c:	b480      	push	{r7}
 800294e:	b085      	sub	sp, #20
 8002950:	af00      	add	r7, sp, #0
 8002952:	6078      	str	r0, [r7, #4]
 8002954:	6039      	str	r1, [r7, #0]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	f893 3020 	ldrb.w	r3, [r3, #32]
 800295c:	73fb      	strb	r3, [r7, #15]

  /* Check function parameters */
  assert_param(IS_CAN_IT(ActiveITs));

  if ((state == HAL_CAN_STATE_READY) ||
 800295e:	7bfb      	ldrb	r3, [r7, #15]
 8002960:	2b01      	cmp	r3, #1
 8002962:	d002      	beq.n	800296a <HAL_CAN_ActivateNotification+0x1e>
 8002964:	7bfb      	ldrb	r3, [r7, #15]
 8002966:	2b02      	cmp	r3, #2
 8002968:	d109      	bne.n	800297e <HAL_CAN_ActivateNotification+0x32>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Enable the selected interrupts */
    __HAL_CAN_ENABLE_IT(hcan, ActiveITs);
 800296a:	687b      	ldr	r3, [r7, #4]
 800296c:	681b      	ldr	r3, [r3, #0]
 800296e:	6959      	ldr	r1, [r3, #20]
 8002970:	687b      	ldr	r3, [r7, #4]
 8002972:	681b      	ldr	r3, [r3, #0]
 8002974:	683a      	ldr	r2, [r7, #0]
 8002976:	430a      	orrs	r2, r1
 8002978:	615a      	str	r2, [r3, #20]

    /* Return function status */
    return HAL_OK;
 800297a:	2300      	movs	r3, #0
 800297c:	e006      	b.n	800298c <HAL_CAN_ActivateNotification+0x40>
  }
  else
  {
    /* Update error code */
    hcan->ErrorCode |= HAL_CAN_ERROR_NOT_INITIALIZED;
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002982:	f443 2280 	orr.w	r2, r3, #262144	@ 0x40000
 8002986:	687b      	ldr	r3, [r7, #4]
 8002988:	625a      	str	r2, [r3, #36]	@ 0x24

    return HAL_ERROR;
 800298a:	2301      	movs	r3, #1
  }
}
 800298c:	4618      	mov	r0, r3
 800298e:	3714      	adds	r7, #20
 8002990:	46bd      	mov	sp, r7
 8002992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002996:	4770      	bx	lr

08002998 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8002998:	b580      	push	{r7, lr}
 800299a:	b08a      	sub	sp, #40	@ 0x28
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 80029a0:	2300      	movs	r3, #0
 80029a2:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	681b      	ldr	r3, [r3, #0]
 80029a8:	695b      	ldr	r3, [r3, #20]
 80029aa:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	685b      	ldr	r3, [r3, #4]
 80029b2:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 80029b4:	687b      	ldr	r3, [r7, #4]
 80029b6:	681b      	ldr	r3, [r3, #0]
 80029b8:	689b      	ldr	r3, [r3, #8]
 80029ba:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68db      	ldr	r3, [r3, #12]
 80029c2:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	691b      	ldr	r3, [r3, #16]
 80029ca:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	699b      	ldr	r3, [r3, #24]
 80029d2:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 80029d4:	6a3b      	ldr	r3, [r7, #32]
 80029d6:	f003 0301 	and.w	r3, r3, #1
 80029da:	2b00      	cmp	r3, #0
 80029dc:	d07c      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 80029de:	69bb      	ldr	r3, [r7, #24]
 80029e0:	f003 0301 	and.w	r3, r3, #1
 80029e4:	2b00      	cmp	r3, #0
 80029e6:	d023      	beq.n	8002a30 <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	2201      	movs	r2, #1
 80029ee:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 80029f0:	69bb      	ldr	r3, [r7, #24]
 80029f2:	f003 0302 	and.w	r3, r3, #2
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d003      	beq.n	8002a02 <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 80029fa:	6878      	ldr	r0, [r7, #4]
 80029fc:	f7fe fb58 	bl	80010b0 <HAL_CAN_TxMailbox0CompleteCallback>
 8002a00:	e016      	b.n	8002a30 <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8002a02:	69bb      	ldr	r3, [r7, #24]
 8002a04:	f003 0304 	and.w	r3, r3, #4
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d004      	beq.n	8002a16 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8002a0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a0e:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 8002a12:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a14:	e00c      	b.n	8002a30 <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8002a16:	69bb      	ldr	r3, [r7, #24]
 8002a18:	f003 0308 	and.w	r3, r3, #8
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	d004      	beq.n	8002a2a <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8002a20:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a22:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a26:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a28:	e002      	b.n	8002a30 <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8002a2a:	6878      	ldr	r0, [r7, #4]
 8002a2c:	f000 f96b 	bl	8002d06 <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8002a30:	69bb      	ldr	r3, [r7, #24]
 8002a32:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d024      	beq.n	8002a84 <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002a42:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8002a44:	69bb      	ldr	r3, [r7, #24]
 8002a46:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d003      	beq.n	8002a56 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7fe fb38 	bl	80010c4 <HAL_CAN_TxMailbox1CompleteCallback>
 8002a54:	e016      	b.n	8002a84 <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8002a56:	69bb      	ldr	r3, [r7, #24]
 8002a58:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	d004      	beq.n	8002a6a <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8002a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a62:	f443 5300 	orr.w	r3, r3, #8192	@ 0x2000
 8002a66:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a68:	e00c      	b.n	8002a84 <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8002a6a:	69bb      	ldr	r3, [r7, #24]
 8002a6c:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d004      	beq.n	8002a7e <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8002a74:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a76:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002a7a:	627b      	str	r3, [r7, #36]	@ 0x24
 8002a7c:	e002      	b.n	8002a84 <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8002a7e:	6878      	ldr	r0, [r7, #4]
 8002a80:	f000 f94b 	bl	8002d1a <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002a8a:	2b00      	cmp	r3, #0
 8002a8c:	d024      	beq.n	8002ad8 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	f44f 3280 	mov.w	r2, #65536	@ 0x10000
 8002a96:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8002a98:	69bb      	ldr	r3, [r7, #24]
 8002a9a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d003      	beq.n	8002aaa <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8002aa2:	6878      	ldr	r0, [r7, #4]
 8002aa4:	f7fe fb18 	bl	80010d8 <HAL_CAN_TxMailbox2CompleteCallback>
 8002aa8:	e016      	b.n	8002ad8 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8002aaa:	69bb      	ldr	r3, [r7, #24]
 8002aac:	f403 2380 	and.w	r3, r3, #262144	@ 0x40000
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d004      	beq.n	8002abe <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8002ab4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ab6:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8002aba:	627b      	str	r3, [r7, #36]	@ 0x24
 8002abc:	e00c      	b.n	8002ad8 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8002abe:	69bb      	ldr	r3, [r7, #24]
 8002ac0:	f403 2300 	and.w	r3, r3, #524288	@ 0x80000
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	d004      	beq.n	8002ad2 <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8002ac8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aca:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002ace:	627b      	str	r3, [r7, #36]	@ 0x24
 8002ad0:	e002      	b.n	8002ad8 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8002ad2:	6878      	ldr	r0, [r7, #4]
 8002ad4:	f000 f92b 	bl	8002d2e <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8002ad8:	6a3b      	ldr	r3, [r7, #32]
 8002ada:	f003 0308 	and.w	r3, r3, #8
 8002ade:	2b00      	cmp	r3, #0
 8002ae0:	d00c      	beq.n	8002afc <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8002ae2:	697b      	ldr	r3, [r7, #20]
 8002ae4:	f003 0310 	and.w	r3, r3, #16
 8002ae8:	2b00      	cmp	r3, #0
 8002aea:	d007      	beq.n	8002afc <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8002aec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002aee:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8002af2:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8002af4:	687b      	ldr	r3, [r7, #4]
 8002af6:	681b      	ldr	r3, [r3, #0]
 8002af8:	2210      	movs	r2, #16
 8002afa:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8002afc:	6a3b      	ldr	r3, [r7, #32]
 8002afe:	f003 0304 	and.w	r3, r3, #4
 8002b02:	2b00      	cmp	r3, #0
 8002b04:	d00b      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8002b06:	697b      	ldr	r3, [r7, #20]
 8002b08:	f003 0308 	and.w	r3, r3, #8
 8002b0c:	2b00      	cmp	r3, #0
 8002b0e:	d006      	beq.n	8002b1e <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8002b10:	687b      	ldr	r3, [r7, #4]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2208      	movs	r2, #8
 8002b16:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8002b18:	6878      	ldr	r0, [r7, #4]
 8002b1a:	f000 f912 	bl	8002d42 <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8002b1e:	6a3b      	ldr	r3, [r7, #32]
 8002b20:	f003 0302 	and.w	r3, r3, #2
 8002b24:	2b00      	cmp	r3, #0
 8002b26:	d009      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8002b28:	687b      	ldr	r3, [r7, #4]
 8002b2a:	681b      	ldr	r3, [r3, #0]
 8002b2c:	68db      	ldr	r3, [r3, #12]
 8002b2e:	f003 0303 	and.w	r3, r3, #3
 8002b32:	2b00      	cmp	r3, #0
 8002b34:	d002      	beq.n	8002b3c <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8002b36:	6878      	ldr	r0, [r7, #4]
 8002b38:	f7fe fa5a 	bl	8000ff0 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8002b3c:	6a3b      	ldr	r3, [r7, #32]
 8002b3e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d00c      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8002b46:	693b      	ldr	r3, [r7, #16]
 8002b48:	f003 0310 	and.w	r3, r3, #16
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d007      	beq.n	8002b60 <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8002b50:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002b56:	627b      	str	r3, [r7, #36]	@ 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	2210      	movs	r2, #16
 8002b5e:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8002b60:	6a3b      	ldr	r3, [r7, #32]
 8002b62:	f003 0320 	and.w	r3, r3, #32
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	d00b      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8002b6a:	693b      	ldr	r3, [r7, #16]
 8002b6c:	f003 0308 	and.w	r3, r3, #8
 8002b70:	2b00      	cmp	r3, #0
 8002b72:	d006      	beq.n	8002b82 <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8002b74:	687b      	ldr	r3, [r7, #4]
 8002b76:	681b      	ldr	r3, [r3, #0]
 8002b78:	2208      	movs	r2, #8
 8002b7a:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8002b7c:	6878      	ldr	r0, [r7, #4]
 8002b7e:	f000 f8f4 	bl	8002d6a <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8002b82:	6a3b      	ldr	r3, [r7, #32]
 8002b84:	f003 0310 	and.w	r3, r3, #16
 8002b88:	2b00      	cmp	r3, #0
 8002b8a:	d009      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	691b      	ldr	r3, [r3, #16]
 8002b92:	f003 0303 	and.w	r3, r3, #3
 8002b96:	2b00      	cmp	r3, #0
 8002b98:	d002      	beq.n	8002ba0 <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8002b9a:	6878      	ldr	r0, [r7, #4]
 8002b9c:	f000 f8db 	bl	8002d56 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8002ba0:	6a3b      	ldr	r3, [r7, #32]
 8002ba2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ba6:	2b00      	cmp	r3, #0
 8002ba8:	d00b      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8002baa:	69fb      	ldr	r3, [r7, #28]
 8002bac:	f003 0310 	and.w	r3, r3, #16
 8002bb0:	2b00      	cmp	r3, #0
 8002bb2:	d006      	beq.n	8002bc2 <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	2210      	movs	r2, #16
 8002bba:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f000 f8de 	bl	8002d7e <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8002bc2:	6a3b      	ldr	r3, [r7, #32]
 8002bc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002bc8:	2b00      	cmp	r3, #0
 8002bca:	d00b      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8002bcc:	69fb      	ldr	r3, [r7, #28]
 8002bce:	f003 0308 	and.w	r3, r3, #8
 8002bd2:	2b00      	cmp	r3, #0
 8002bd4:	d006      	beq.n	8002be4 <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	2208      	movs	r2, #8
 8002bdc:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8002bde:	6878      	ldr	r0, [r7, #4]
 8002be0:	f000 f8d7 	bl	8002d92 <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 8002be4:	6a3b      	ldr	r3, [r7, #32]
 8002be6:	f403 4300 	and.w	r3, r3, #32768	@ 0x8000
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d07b      	beq.n	8002ce6 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8002bee:	69fb      	ldr	r3, [r7, #28]
 8002bf0:	f003 0304 	and.w	r3, r3, #4
 8002bf4:	2b00      	cmp	r3, #0
 8002bf6:	d072      	beq.n	8002cde <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002bf8:	6a3b      	ldr	r3, [r7, #32]
 8002bfa:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002bfe:	2b00      	cmp	r3, #0
 8002c00:	d008      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8002c08:	2b00      	cmp	r3, #0
 8002c0a:	d003      	beq.n	8002c14 <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8002c0c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c0e:	f043 0301 	orr.w	r3, r3, #1
 8002c12:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c14:	6a3b      	ldr	r3, [r7, #32]
 8002c16:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002c1a:	2b00      	cmp	r3, #0
 8002c1c:	d008      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8002c1e:	68fb      	ldr	r3, [r7, #12]
 8002c20:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 8002c24:	2b00      	cmp	r3, #0
 8002c26:	d003      	beq.n	8002c30 <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8002c28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c2a:	f043 0302 	orr.w	r3, r3, #2
 8002c2e:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c30:	6a3b      	ldr	r3, [r7, #32]
 8002c32:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8002c36:	2b00      	cmp	r3, #0
 8002c38:	d008      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 8002c40:	2b00      	cmp	r3, #0
 8002c42:	d003      	beq.n	8002c4c <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 8002c44:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c46:	f043 0304 	orr.w	r3, r3, #4
 8002c4a:	627b      	str	r3, [r7, #36]	@ 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c4c:	6a3b      	ldr	r3, [r7, #32]
 8002c4e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d043      	beq.n	8002cde <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	f003 0370 	and.w	r3, r3, #112	@ 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8002c5c:	2b00      	cmp	r3, #0
 8002c5e:	d03e      	beq.n	8002cde <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	f003 0370 	and.w	r3, r3, #112	@ 0x70
 8002c66:	2b60      	cmp	r3, #96	@ 0x60
 8002c68:	d02b      	beq.n	8002cc2 <HAL_CAN_IRQHandler+0x32a>
 8002c6a:	2b60      	cmp	r3, #96	@ 0x60
 8002c6c:	d82e      	bhi.n	8002ccc <HAL_CAN_IRQHandler+0x334>
 8002c6e:	2b50      	cmp	r3, #80	@ 0x50
 8002c70:	d022      	beq.n	8002cb8 <HAL_CAN_IRQHandler+0x320>
 8002c72:	2b50      	cmp	r3, #80	@ 0x50
 8002c74:	d82a      	bhi.n	8002ccc <HAL_CAN_IRQHandler+0x334>
 8002c76:	2b40      	cmp	r3, #64	@ 0x40
 8002c78:	d019      	beq.n	8002cae <HAL_CAN_IRQHandler+0x316>
 8002c7a:	2b40      	cmp	r3, #64	@ 0x40
 8002c7c:	d826      	bhi.n	8002ccc <HAL_CAN_IRQHandler+0x334>
 8002c7e:	2b30      	cmp	r3, #48	@ 0x30
 8002c80:	d010      	beq.n	8002ca4 <HAL_CAN_IRQHandler+0x30c>
 8002c82:	2b30      	cmp	r3, #48	@ 0x30
 8002c84:	d822      	bhi.n	8002ccc <HAL_CAN_IRQHandler+0x334>
 8002c86:	2b10      	cmp	r3, #16
 8002c88:	d002      	beq.n	8002c90 <HAL_CAN_IRQHandler+0x2f8>
 8002c8a:	2b20      	cmp	r3, #32
 8002c8c:	d005      	beq.n	8002c9a <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 8002c8e:	e01d      	b.n	8002ccc <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 8002c90:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c92:	f043 0308 	orr.w	r3, r3, #8
 8002c96:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002c98:	e019      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 8002c9a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c9c:	f043 0310 	orr.w	r3, r3, #16
 8002ca0:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002ca2:	e014      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 8002ca4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ca6:	f043 0320 	orr.w	r3, r3, #32
 8002caa:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cac:	e00f      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8002cb4:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cb6:	e00a      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 8002cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cba:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8002cbe:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cc0:	e005      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 8002cc2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002cc8:	627b      	str	r3, [r7, #36]	@ 0x24
            break;
 8002cca:	e000      	b.n	8002cce <HAL_CAN_IRQHandler+0x336>
            break;
 8002ccc:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	681b      	ldr	r3, [r3, #0]
 8002cd2:	699a      	ldr	r2, [r3, #24]
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f022 0270 	bic.w	r2, r2, #112	@ 0x70
 8002cdc:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	2204      	movs	r2, #4
 8002ce4:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8002ce6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce8:	2b00      	cmp	r3, #0
 8002cea:	d008      	beq.n	8002cfe <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8002cf0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cf2:	431a      	orrs	r2, r3
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	625a      	str	r2, [r3, #36]	@ 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8002cf8:	6878      	ldr	r0, [r7, #4]
 8002cfa:	f7fe f9f7 	bl	80010ec <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8002cfe:	bf00      	nop
 8002d00:	3728      	adds	r7, #40	@ 0x28
 8002d02:	46bd      	mov	sp, r7
 8002d04:	bd80      	pop	{r7, pc}

08002d06 <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d06:	b480      	push	{r7}
 8002d08:	b083      	sub	sp, #12
 8002d0a:	af00      	add	r7, sp, #0
 8002d0c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8002d0e:	bf00      	nop
 8002d10:	370c      	adds	r7, #12
 8002d12:	46bd      	mov	sp, r7
 8002d14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d18:	4770      	bx	lr

08002d1a <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d1a:	b480      	push	{r7}
 8002d1c:	b083      	sub	sp, #12
 8002d1e:	af00      	add	r7, sp, #0
 8002d20:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8002d22:	bf00      	nop
 8002d24:	370c      	adds	r7, #12
 8002d26:	46bd      	mov	sp, r7
 8002d28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d2c:	4770      	bx	lr

08002d2e <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 8002d2e:	b480      	push	{r7}
 8002d30:	b083      	sub	sp, #12
 8002d32:	af00      	add	r7, sp, #0
 8002d34:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 8002d36:	bf00      	nop
 8002d38:	370c      	adds	r7, #12
 8002d3a:	46bd      	mov	sp, r7
 8002d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d40:	4770      	bx	lr

08002d42 <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d42:	b480      	push	{r7}
 8002d44:	b083      	sub	sp, #12
 8002d46:	af00      	add	r7, sp, #0
 8002d48:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 8002d4a:	bf00      	nop
 8002d4c:	370c      	adds	r7, #12
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d54:	4770      	bx	lr

08002d56 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 8002d56:	b480      	push	{r7}
 8002d58:	b083      	sub	sp, #12
 8002d5a:	af00      	add	r7, sp, #0
 8002d5c:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 8002d5e:	bf00      	nop
 8002d60:	370c      	adds	r7, #12
 8002d62:	46bd      	mov	sp, r7
 8002d64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d68:	4770      	bx	lr

08002d6a <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 8002d6a:	b480      	push	{r7}
 8002d6c:	b083      	sub	sp, #12
 8002d6e:	af00      	add	r7, sp, #0
 8002d70:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 8002d72:	bf00      	nop
 8002d74:	370c      	adds	r7, #12
 8002d76:	46bd      	mov	sp, r7
 8002d78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d7c:	4770      	bx	lr

08002d7e <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8002d7e:	b480      	push	{r7}
 8002d80:	b083      	sub	sp, #12
 8002d82:	af00      	add	r7, sp, #0
 8002d84:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8002d86:	bf00      	nop
 8002d88:	370c      	adds	r7, #12
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d90:	4770      	bx	lr

08002d92 <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 8002d92:	b480      	push	{r7}
 8002d94:	b083      	sub	sp, #12
 8002d96:	af00      	add	r7, sp, #0
 8002d98:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8002d9a:	bf00      	nop
 8002d9c:	370c      	adds	r7, #12
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002da4:	4770      	bx	lr

08002da6 <HAL_CAN_GetState>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL state
  */
HAL_CAN_StateTypeDef HAL_CAN_GetState(const CAN_HandleTypeDef *hcan)
{
 8002da6:	b480      	push	{r7}
 8002da8:	b085      	sub	sp, #20
 8002daa:	af00      	add	r7, sp, #0
 8002dac:	6078      	str	r0, [r7, #4]
  HAL_CAN_StateTypeDef state = hcan->State;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8002db4:	73fb      	strb	r3, [r7, #15]

  if ((state == HAL_CAN_STATE_READY) ||
 8002db6:	7bfb      	ldrb	r3, [r7, #15]
 8002db8:	2b01      	cmp	r3, #1
 8002dba:	d002      	beq.n	8002dc2 <HAL_CAN_GetState+0x1c>
 8002dbc:	7bfb      	ldrb	r3, [r7, #15]
 8002dbe:	2b02      	cmp	r3, #2
 8002dc0:	d112      	bne.n	8002de8 <HAL_CAN_GetState+0x42>
      (state == HAL_CAN_STATE_LISTENING))
  {
    /* Check sleep mode acknowledge flag */
    if ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8002dc2:	687b      	ldr	r3, [r7, #4]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	685b      	ldr	r3, [r3, #4]
 8002dc8:	f003 0302 	and.w	r3, r3, #2
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d002      	beq.n	8002dd6 <HAL_CAN_GetState+0x30>
    {
      /* Sleep mode is active */
      state = HAL_CAN_STATE_SLEEP_ACTIVE;
 8002dd0:	2304      	movs	r3, #4
 8002dd2:	73fb      	strb	r3, [r7, #15]
 8002dd4:	e008      	b.n	8002de8 <HAL_CAN_GetState+0x42>
    }
    /* Check sleep mode request flag */
    else if ((hcan->Instance->MCR & CAN_MCR_SLEEP) != 0U)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	681b      	ldr	r3, [r3, #0]
 8002ddc:	f003 0302 	and.w	r3, r3, #2
 8002de0:	2b00      	cmp	r3, #0
 8002de2:	d001      	beq.n	8002de8 <HAL_CAN_GetState+0x42>
    {
      /* Sleep mode request is pending */
      state = HAL_CAN_STATE_SLEEP_PENDING;
 8002de4:	2303      	movs	r3, #3
 8002de6:	73fb      	strb	r3, [r7, #15]
      /* Neither sleep mode request nor sleep mode acknowledge */
    }
  }

  /* Return CAN state */
  return state;
 8002de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	3714      	adds	r7, #20
 8002dee:	46bd      	mov	sp, r7
 8002df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df4:	4770      	bx	lr

08002df6 <HAL_CAN_GetError>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval CAN Error Code
  */
uint32_t HAL_CAN_GetError(const CAN_HandleTypeDef *hcan)
{
 8002df6:	b480      	push	{r7}
 8002df8:	b083      	sub	sp, #12
 8002dfa:	af00      	add	r7, sp, #0
 8002dfc:	6078      	str	r0, [r7, #4]
  /* Return CAN error code */
  return hcan->ErrorCode;
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	370c      	adds	r7, #12
 8002e06:	46bd      	mov	sp, r7
 8002e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e0c:	4770      	bx	lr
	...

08002e10 <__NVIC_SetPriorityGrouping>:
{
 8002e10:	b480      	push	{r7}
 8002e12:	b085      	sub	sp, #20
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e18:	687b      	ldr	r3, [r7, #4]
 8002e1a:	f003 0307 	and.w	r3, r3, #7
 8002e1e:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e20:	4b0c      	ldr	r3, [pc, #48]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e22:	68db      	ldr	r3, [r3, #12]
 8002e24:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e26:	68ba      	ldr	r2, [r7, #8]
 8002e28:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002e2c:	4013      	ands	r3, r2
 8002e2e:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e30:	68fb      	ldr	r3, [r7, #12]
 8002e32:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e34:	68bb      	ldr	r3, [r7, #8]
 8002e36:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e38:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002e3c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002e40:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e42:	4a04      	ldr	r2, [pc, #16]	@ (8002e54 <__NVIC_SetPriorityGrouping+0x44>)
 8002e44:	68bb      	ldr	r3, [r7, #8]
 8002e46:	60d3      	str	r3, [r2, #12]
}
 8002e48:	bf00      	nop
 8002e4a:	3714      	adds	r7, #20
 8002e4c:	46bd      	mov	sp, r7
 8002e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e52:	4770      	bx	lr
 8002e54:	e000ed00 	.word	0xe000ed00

08002e58 <__NVIC_GetPriorityGrouping>:
{
 8002e58:	b480      	push	{r7}
 8002e5a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e5c:	4b04      	ldr	r3, [pc, #16]	@ (8002e70 <__NVIC_GetPriorityGrouping+0x18>)
 8002e5e:	68db      	ldr	r3, [r3, #12]
 8002e60:	0a1b      	lsrs	r3, r3, #8
 8002e62:	f003 0307 	and.w	r3, r3, #7
}
 8002e66:	4618      	mov	r0, r3
 8002e68:	46bd      	mov	sp, r7
 8002e6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e6e:	4770      	bx	lr
 8002e70:	e000ed00 	.word	0xe000ed00

08002e74 <__NVIC_EnableIRQ>:
{
 8002e74:	b480      	push	{r7}
 8002e76:	b083      	sub	sp, #12
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	4603      	mov	r3, r0
 8002e7c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e7e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e82:	2b00      	cmp	r3, #0
 8002e84:	db0b      	blt.n	8002e9e <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e86:	79fb      	ldrb	r3, [r7, #7]
 8002e88:	f003 021f 	and.w	r2, r3, #31
 8002e8c:	4907      	ldr	r1, [pc, #28]	@ (8002eac <__NVIC_EnableIRQ+0x38>)
 8002e8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e92:	095b      	lsrs	r3, r3, #5
 8002e94:	2001      	movs	r0, #1
 8002e96:	fa00 f202 	lsl.w	r2, r0, r2
 8002e9a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002e9e:	bf00      	nop
 8002ea0:	370c      	adds	r7, #12
 8002ea2:	46bd      	mov	sp, r7
 8002ea4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea8:	4770      	bx	lr
 8002eaa:	bf00      	nop
 8002eac:	e000e100 	.word	0xe000e100

08002eb0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	b083      	sub	sp, #12
 8002eb4:	af00      	add	r7, sp, #0
 8002eb6:	4603      	mov	r3, r0
 8002eb8:	6039      	str	r1, [r7, #0]
 8002eba:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ebc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	db0a      	blt.n	8002eda <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ec4:	683b      	ldr	r3, [r7, #0]
 8002ec6:	b2da      	uxtb	r2, r3
 8002ec8:	490c      	ldr	r1, [pc, #48]	@ (8002efc <__NVIC_SetPriority+0x4c>)
 8002eca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ece:	0112      	lsls	r2, r2, #4
 8002ed0:	b2d2      	uxtb	r2, r2
 8002ed2:	440b      	add	r3, r1
 8002ed4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002ed8:	e00a      	b.n	8002ef0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002eda:	683b      	ldr	r3, [r7, #0]
 8002edc:	b2da      	uxtb	r2, r3
 8002ede:	4908      	ldr	r1, [pc, #32]	@ (8002f00 <__NVIC_SetPriority+0x50>)
 8002ee0:	79fb      	ldrb	r3, [r7, #7]
 8002ee2:	f003 030f 	and.w	r3, r3, #15
 8002ee6:	3b04      	subs	r3, #4
 8002ee8:	0112      	lsls	r2, r2, #4
 8002eea:	b2d2      	uxtb	r2, r2
 8002eec:	440b      	add	r3, r1
 8002eee:	761a      	strb	r2, [r3, #24]
}
 8002ef0:	bf00      	nop
 8002ef2:	370c      	adds	r7, #12
 8002ef4:	46bd      	mov	sp, r7
 8002ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002efa:	4770      	bx	lr
 8002efc:	e000e100 	.word	0xe000e100
 8002f00:	e000ed00 	.word	0xe000ed00

08002f04 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f04:	b480      	push	{r7}
 8002f06:	b089      	sub	sp, #36	@ 0x24
 8002f08:	af00      	add	r7, sp, #0
 8002f0a:	60f8      	str	r0, [r7, #12]
 8002f0c:	60b9      	str	r1, [r7, #8]
 8002f0e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f10:	68fb      	ldr	r3, [r7, #12]
 8002f12:	f003 0307 	and.w	r3, r3, #7
 8002f16:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f18:	69fb      	ldr	r3, [r7, #28]
 8002f1a:	f1c3 0307 	rsb	r3, r3, #7
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	bf28      	it	cs
 8002f22:	2304      	movcs	r3, #4
 8002f24:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f26:	69fb      	ldr	r3, [r7, #28]
 8002f28:	3304      	adds	r3, #4
 8002f2a:	2b06      	cmp	r3, #6
 8002f2c:	d902      	bls.n	8002f34 <NVIC_EncodePriority+0x30>
 8002f2e:	69fb      	ldr	r3, [r7, #28]
 8002f30:	3b03      	subs	r3, #3
 8002f32:	e000      	b.n	8002f36 <NVIC_EncodePriority+0x32>
 8002f34:	2300      	movs	r3, #0
 8002f36:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f38:	f04f 32ff 	mov.w	r2, #4294967295
 8002f3c:	69bb      	ldr	r3, [r7, #24]
 8002f3e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f42:	43da      	mvns	r2, r3
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	401a      	ands	r2, r3
 8002f48:	697b      	ldr	r3, [r7, #20]
 8002f4a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f4c:	f04f 31ff 	mov.w	r1, #4294967295
 8002f50:	697b      	ldr	r3, [r7, #20]
 8002f52:	fa01 f303 	lsl.w	r3, r1, r3
 8002f56:	43d9      	mvns	r1, r3
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f5c:	4313      	orrs	r3, r2
         );
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3724      	adds	r7, #36	@ 0x24
 8002f62:	46bd      	mov	sp, r7
 8002f64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f68:	4770      	bx	lr

08002f6a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f6a:	b580      	push	{r7, lr}
 8002f6c:	b082      	sub	sp, #8
 8002f6e:	af00      	add	r7, sp, #0
 8002f70:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f72:	6878      	ldr	r0, [r7, #4]
 8002f74:	f7ff ff4c 	bl	8002e10 <__NVIC_SetPriorityGrouping>
}
 8002f78:	bf00      	nop
 8002f7a:	3708      	adds	r7, #8
 8002f7c:	46bd      	mov	sp, r7
 8002f7e:	bd80      	pop	{r7, pc}

08002f80 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f80:	b580      	push	{r7, lr}
 8002f82:	b086      	sub	sp, #24
 8002f84:	af00      	add	r7, sp, #0
 8002f86:	4603      	mov	r3, r0
 8002f88:	60b9      	str	r1, [r7, #8]
 8002f8a:	607a      	str	r2, [r7, #4]
 8002f8c:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f92:	f7ff ff61 	bl	8002e58 <__NVIC_GetPriorityGrouping>
 8002f96:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f98:	687a      	ldr	r2, [r7, #4]
 8002f9a:	68b9      	ldr	r1, [r7, #8]
 8002f9c:	6978      	ldr	r0, [r7, #20]
 8002f9e:	f7ff ffb1 	bl	8002f04 <NVIC_EncodePriority>
 8002fa2:	4602      	mov	r2, r0
 8002fa4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002fa8:	4611      	mov	r1, r2
 8002faa:	4618      	mov	r0, r3
 8002fac:	f7ff ff80 	bl	8002eb0 <__NVIC_SetPriority>
}
 8002fb0:	bf00      	nop
 8002fb2:	3718      	adds	r7, #24
 8002fb4:	46bd      	mov	sp, r7
 8002fb6:	bd80      	pop	{r7, pc}

08002fb8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002fb8:	b580      	push	{r7, lr}
 8002fba:	b082      	sub	sp, #8
 8002fbc:	af00      	add	r7, sp, #0
 8002fbe:	4603      	mov	r3, r0
 8002fc0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002fc2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7ff ff54 	bl	8002e74 <__NVIC_EnableIRQ>
}
 8002fcc:	bf00      	nop
 8002fce:	3708      	adds	r7, #8
 8002fd0:	46bd      	mov	sp, r7
 8002fd2:	bd80      	pop	{r7, pc}

08002fd4 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002fd4:	b580      	push	{r7, lr}
 8002fd6:	b084      	sub	sp, #16
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002fe0:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002fe2:	f7ff f897 	bl	8002114 <HAL_GetTick>
 8002fe6:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002fee:	b2db      	uxtb	r3, r3
 8002ff0:	2b02      	cmp	r3, #2
 8002ff2:	d008      	beq.n	8003006 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002ff4:	687b      	ldr	r3, [r7, #4]
 8002ff6:	2280      	movs	r2, #128	@ 0x80
 8002ff8:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002ffa:	687b      	ldr	r3, [r7, #4]
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8003002:	2301      	movs	r3, #1
 8003004:	e052      	b.n	80030ac <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003006:	687b      	ldr	r3, [r7, #4]
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	681a      	ldr	r2, [r3, #0]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f022 0216 	bic.w	r2, r2, #22
 8003014:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	695a      	ldr	r2, [r3, #20]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8003024:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003026:	687b      	ldr	r3, [r7, #4]
 8003028:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800302a:	2b00      	cmp	r3, #0
 800302c:	d103      	bne.n	8003036 <HAL_DMA_Abort+0x62>
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003032:	2b00      	cmp	r3, #0
 8003034:	d007      	beq.n	8003046 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003036:	687b      	ldr	r3, [r7, #4]
 8003038:	681b      	ldr	r3, [r3, #0]
 800303a:	681a      	ldr	r2, [r3, #0]
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	f022 0208 	bic.w	r2, r2, #8
 8003044:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003046:	687b      	ldr	r3, [r7, #4]
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	681a      	ldr	r2, [r3, #0]
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	681b      	ldr	r3, [r3, #0]
 8003050:	f022 0201 	bic.w	r2, r2, #1
 8003054:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003056:	e013      	b.n	8003080 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003058:	f7ff f85c 	bl	8002114 <HAL_GetTick>
 800305c:	4602      	mov	r2, r0
 800305e:	68bb      	ldr	r3, [r7, #8]
 8003060:	1ad3      	subs	r3, r2, r3
 8003062:	2b05      	cmp	r3, #5
 8003064:	d90c      	bls.n	8003080 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	2220      	movs	r2, #32
 800306a:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2203      	movs	r2, #3
 8003070:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	2200      	movs	r2, #0
 8003078:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 800307c:	2303      	movs	r3, #3
 800307e:	e015      	b.n	80030ac <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	681b      	ldr	r3, [r3, #0]
 8003086:	f003 0301 	and.w	r3, r3, #1
 800308a:	2b00      	cmp	r3, #0
 800308c:	d1e4      	bne.n	8003058 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003092:	223f      	movs	r2, #63	@ 0x3f
 8003094:	409a      	lsls	r2, r3
 8003096:	68fb      	ldr	r3, [r7, #12]
 8003098:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	2201      	movs	r2, #1
 800309e:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2200      	movs	r2, #0
 80030a6:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 80030aa:	2300      	movs	r3, #0
}
 80030ac:	4618      	mov	r0, r3
 80030ae:	3710      	adds	r7, #16
 80030b0:	46bd      	mov	sp, r7
 80030b2:	bd80      	pop	{r7, pc}

080030b4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80030b4:	b480      	push	{r7}
 80030b6:	b083      	sub	sp, #12
 80030b8:	af00      	add	r7, sp, #0
 80030ba:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80030c2:	b2db      	uxtb	r3, r3
 80030c4:	2b02      	cmp	r3, #2
 80030c6:	d004      	beq.n	80030d2 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030c8:	687b      	ldr	r3, [r7, #4]
 80030ca:	2280      	movs	r2, #128	@ 0x80
 80030cc:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80030ce:	2301      	movs	r3, #1
 80030d0:	e00c      	b.n	80030ec <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030d2:	687b      	ldr	r3, [r7, #4]
 80030d4:	2205      	movs	r2, #5
 80030d6:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	681b      	ldr	r3, [r3, #0]
 80030de:	681a      	ldr	r2, [r3, #0]
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	f022 0201 	bic.w	r2, r2, #1
 80030e8:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030ea:	2300      	movs	r3, #0
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	370c      	adds	r7, #12
 80030f0:	46bd      	mov	sp, r7
 80030f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030f6:	4770      	bx	lr

080030f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f8:	b480      	push	{r7}
 80030fa:	b089      	sub	sp, #36	@ 0x24
 80030fc:	af00      	add	r7, sp, #0
 80030fe:	6078      	str	r0, [r7, #4]
 8003100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003106:	2300      	movs	r3, #0
 8003108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800310a:	2300      	movs	r3, #0
 800310c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	e16b      	b.n	80033ec <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003114:	2201      	movs	r2, #1
 8003116:	69fb      	ldr	r3, [r7, #28]
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800311e:	683b      	ldr	r3, [r7, #0]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	697a      	ldr	r2, [r7, #20]
 8003124:	4013      	ands	r3, r2
 8003126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003128:	693a      	ldr	r2, [r7, #16]
 800312a:	697b      	ldr	r3, [r7, #20]
 800312c:	429a      	cmp	r2, r3
 800312e:	f040 815a 	bne.w	80033e6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003132:	683b      	ldr	r3, [r7, #0]
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	f003 0303 	and.w	r3, r3, #3
 800313a:	2b01      	cmp	r3, #1
 800313c:	d005      	beq.n	800314a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800313e:	683b      	ldr	r3, [r7, #0]
 8003140:	685b      	ldr	r3, [r3, #4]
 8003142:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003146:	2b02      	cmp	r3, #2
 8003148:	d130      	bne.n	80031ac <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	689b      	ldr	r3, [r3, #8]
 800314e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003150:	69fb      	ldr	r3, [r7, #28]
 8003152:	005b      	lsls	r3, r3, #1
 8003154:	2203      	movs	r2, #3
 8003156:	fa02 f303 	lsl.w	r3, r2, r3
 800315a:	43db      	mvns	r3, r3
 800315c:	69ba      	ldr	r2, [r7, #24]
 800315e:	4013      	ands	r3, r2
 8003160:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003162:	683b      	ldr	r3, [r7, #0]
 8003164:	68da      	ldr	r2, [r3, #12]
 8003166:	69fb      	ldr	r3, [r7, #28]
 8003168:	005b      	lsls	r3, r3, #1
 800316a:	fa02 f303 	lsl.w	r3, r2, r3
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	4313      	orrs	r3, r2
 8003172:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	69ba      	ldr	r2, [r7, #24]
 8003178:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800317a:	687b      	ldr	r3, [r7, #4]
 800317c:	685b      	ldr	r3, [r3, #4]
 800317e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003180:	2201      	movs	r2, #1
 8003182:	69fb      	ldr	r3, [r7, #28]
 8003184:	fa02 f303 	lsl.w	r3, r2, r3
 8003188:	43db      	mvns	r3, r3
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	4013      	ands	r3, r2
 800318e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003190:	683b      	ldr	r3, [r7, #0]
 8003192:	685b      	ldr	r3, [r3, #4]
 8003194:	091b      	lsrs	r3, r3, #4
 8003196:	f003 0201 	and.w	r2, r3, #1
 800319a:	69fb      	ldr	r3, [r7, #28]
 800319c:	fa02 f303 	lsl.w	r3, r2, r3
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	4313      	orrs	r3, r2
 80031a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	69ba      	ldr	r2, [r7, #24]
 80031aa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031ac:	683b      	ldr	r3, [r7, #0]
 80031ae:	685b      	ldr	r3, [r3, #4]
 80031b0:	f003 0303 	and.w	r3, r3, #3
 80031b4:	2b03      	cmp	r3, #3
 80031b6:	d017      	beq.n	80031e8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b8:	687b      	ldr	r3, [r7, #4]
 80031ba:	68db      	ldr	r3, [r3, #12]
 80031bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031be:	69fb      	ldr	r3, [r7, #28]
 80031c0:	005b      	lsls	r3, r3, #1
 80031c2:	2203      	movs	r2, #3
 80031c4:	fa02 f303 	lsl.w	r3, r2, r3
 80031c8:	43db      	mvns	r3, r3
 80031ca:	69ba      	ldr	r2, [r7, #24]
 80031cc:	4013      	ands	r3, r2
 80031ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031d0:	683b      	ldr	r3, [r7, #0]
 80031d2:	689a      	ldr	r2, [r3, #8]
 80031d4:	69fb      	ldr	r3, [r7, #28]
 80031d6:	005b      	lsls	r3, r3, #1
 80031d8:	fa02 f303 	lsl.w	r3, r2, r3
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	4313      	orrs	r3, r2
 80031e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031e2:	687b      	ldr	r3, [r7, #4]
 80031e4:	69ba      	ldr	r2, [r7, #24]
 80031e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e8:	683b      	ldr	r3, [r7, #0]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	f003 0303 	and.w	r3, r3, #3
 80031f0:	2b02      	cmp	r3, #2
 80031f2:	d123      	bne.n	800323c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031f4:	69fb      	ldr	r3, [r7, #28]
 80031f6:	08da      	lsrs	r2, r3, #3
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	3208      	adds	r2, #8
 80031fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003202:	69fb      	ldr	r3, [r7, #28]
 8003204:	f003 0307 	and.w	r3, r3, #7
 8003208:	009b      	lsls	r3, r3, #2
 800320a:	220f      	movs	r2, #15
 800320c:	fa02 f303 	lsl.w	r3, r2, r3
 8003210:	43db      	mvns	r3, r3
 8003212:	69ba      	ldr	r2, [r7, #24]
 8003214:	4013      	ands	r3, r2
 8003216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003218:	683b      	ldr	r3, [r7, #0]
 800321a:	691a      	ldr	r2, [r3, #16]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	f003 0307 	and.w	r3, r3, #7
 8003222:	009b      	lsls	r3, r3, #2
 8003224:	fa02 f303 	lsl.w	r3, r2, r3
 8003228:	69ba      	ldr	r2, [r7, #24]
 800322a:	4313      	orrs	r3, r2
 800322c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800322e:	69fb      	ldr	r3, [r7, #28]
 8003230:	08da      	lsrs	r2, r3, #3
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	3208      	adds	r2, #8
 8003236:	69b9      	ldr	r1, [r7, #24]
 8003238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	681b      	ldr	r3, [r3, #0]
 8003240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003242:	69fb      	ldr	r3, [r7, #28]
 8003244:	005b      	lsls	r3, r3, #1
 8003246:	2203      	movs	r2, #3
 8003248:	fa02 f303 	lsl.w	r3, r2, r3
 800324c:	43db      	mvns	r3, r3
 800324e:	69ba      	ldr	r2, [r7, #24]
 8003250:	4013      	ands	r3, r2
 8003252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003254:	683b      	ldr	r3, [r7, #0]
 8003256:	685b      	ldr	r3, [r3, #4]
 8003258:	f003 0203 	and.w	r2, r3, #3
 800325c:	69fb      	ldr	r3, [r7, #28]
 800325e:	005b      	lsls	r3, r3, #1
 8003260:	fa02 f303 	lsl.w	r3, r2, r3
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	4313      	orrs	r3, r2
 8003268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	69ba      	ldr	r2, [r7, #24]
 800326e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685b      	ldr	r3, [r3, #4]
 8003274:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003278:	2b00      	cmp	r3, #0
 800327a:	f000 80b4 	beq.w	80033e6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800327e:	2300      	movs	r3, #0
 8003280:	60fb      	str	r3, [r7, #12]
 8003282:	4b60      	ldr	r3, [pc, #384]	@ (8003404 <HAL_GPIO_Init+0x30c>)
 8003284:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003286:	4a5f      	ldr	r2, [pc, #380]	@ (8003404 <HAL_GPIO_Init+0x30c>)
 8003288:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 800328c:	6453      	str	r3, [r2, #68]	@ 0x44
 800328e:	4b5d      	ldr	r3, [pc, #372]	@ (8003404 <HAL_GPIO_Init+0x30c>)
 8003290:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003292:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8003296:	60fb      	str	r3, [r7, #12]
 8003298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800329a:	4a5b      	ldr	r2, [pc, #364]	@ (8003408 <HAL_GPIO_Init+0x310>)
 800329c:	69fb      	ldr	r3, [r7, #28]
 800329e:	089b      	lsrs	r3, r3, #2
 80032a0:	3302      	adds	r3, #2
 80032a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80032a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a8:	69fb      	ldr	r3, [r7, #28]
 80032aa:	f003 0303 	and.w	r3, r3, #3
 80032ae:	009b      	lsls	r3, r3, #2
 80032b0:	220f      	movs	r2, #15
 80032b2:	fa02 f303 	lsl.w	r3, r2, r3
 80032b6:	43db      	mvns	r3, r3
 80032b8:	69ba      	ldr	r2, [r7, #24]
 80032ba:	4013      	ands	r3, r2
 80032bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a52      	ldr	r2, [pc, #328]	@ (800340c <HAL_GPIO_Init+0x314>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d02b      	beq.n	800331e <HAL_GPIO_Init+0x226>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a51      	ldr	r2, [pc, #324]	@ (8003410 <HAL_GPIO_Init+0x318>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d025      	beq.n	800331a <HAL_GPIO_Init+0x222>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a50      	ldr	r2, [pc, #320]	@ (8003414 <HAL_GPIO_Init+0x31c>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d01f      	beq.n	8003316 <HAL_GPIO_Init+0x21e>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a4f      	ldr	r2, [pc, #316]	@ (8003418 <HAL_GPIO_Init+0x320>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d019      	beq.n	8003312 <HAL_GPIO_Init+0x21a>
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	4a4e      	ldr	r2, [pc, #312]	@ (800341c <HAL_GPIO_Init+0x324>)
 80032e2:	4293      	cmp	r3, r2
 80032e4:	d013      	beq.n	800330e <HAL_GPIO_Init+0x216>
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	4a4d      	ldr	r2, [pc, #308]	@ (8003420 <HAL_GPIO_Init+0x328>)
 80032ea:	4293      	cmp	r3, r2
 80032ec:	d00d      	beq.n	800330a <HAL_GPIO_Init+0x212>
 80032ee:	687b      	ldr	r3, [r7, #4]
 80032f0:	4a4c      	ldr	r2, [pc, #304]	@ (8003424 <HAL_GPIO_Init+0x32c>)
 80032f2:	4293      	cmp	r3, r2
 80032f4:	d007      	beq.n	8003306 <HAL_GPIO_Init+0x20e>
 80032f6:	687b      	ldr	r3, [r7, #4]
 80032f8:	4a4b      	ldr	r2, [pc, #300]	@ (8003428 <HAL_GPIO_Init+0x330>)
 80032fa:	4293      	cmp	r3, r2
 80032fc:	d101      	bne.n	8003302 <HAL_GPIO_Init+0x20a>
 80032fe:	2307      	movs	r3, #7
 8003300:	e00e      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003302:	2308      	movs	r3, #8
 8003304:	e00c      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003306:	2306      	movs	r3, #6
 8003308:	e00a      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800330a:	2305      	movs	r3, #5
 800330c:	e008      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800330e:	2304      	movs	r3, #4
 8003310:	e006      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003312:	2303      	movs	r3, #3
 8003314:	e004      	b.n	8003320 <HAL_GPIO_Init+0x228>
 8003316:	2302      	movs	r3, #2
 8003318:	e002      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800331a:	2301      	movs	r3, #1
 800331c:	e000      	b.n	8003320 <HAL_GPIO_Init+0x228>
 800331e:	2300      	movs	r3, #0
 8003320:	69fa      	ldr	r2, [r7, #28]
 8003322:	f002 0203 	and.w	r2, r2, #3
 8003326:	0092      	lsls	r2, r2, #2
 8003328:	4093      	lsls	r3, r2
 800332a:	69ba      	ldr	r2, [r7, #24]
 800332c:	4313      	orrs	r3, r2
 800332e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003330:	4935      	ldr	r1, [pc, #212]	@ (8003408 <HAL_GPIO_Init+0x310>)
 8003332:	69fb      	ldr	r3, [r7, #28]
 8003334:	089b      	lsrs	r3, r3, #2
 8003336:	3302      	adds	r3, #2
 8003338:	69ba      	ldr	r2, [r7, #24]
 800333a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800333e:	4b3b      	ldr	r3, [pc, #236]	@ (800342c <HAL_GPIO_Init+0x334>)
 8003340:	689b      	ldr	r3, [r3, #8]
 8003342:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003344:	693b      	ldr	r3, [r7, #16]
 8003346:	43db      	mvns	r3, r3
 8003348:	69ba      	ldr	r2, [r7, #24]
 800334a:	4013      	ands	r3, r2
 800334c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800334e:	683b      	ldr	r3, [r7, #0]
 8003350:	685b      	ldr	r3, [r3, #4]
 8003352:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d003      	beq.n	8003362 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	693b      	ldr	r3, [r7, #16]
 800335e:	4313      	orrs	r3, r2
 8003360:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003362:	4a32      	ldr	r2, [pc, #200]	@ (800342c <HAL_GPIO_Init+0x334>)
 8003364:	69bb      	ldr	r3, [r7, #24]
 8003366:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003368:	4b30      	ldr	r3, [pc, #192]	@ (800342c <HAL_GPIO_Init+0x334>)
 800336a:	68db      	ldr	r3, [r3, #12]
 800336c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336e:	693b      	ldr	r3, [r7, #16]
 8003370:	43db      	mvns	r3, r3
 8003372:	69ba      	ldr	r2, [r7, #24]
 8003374:	4013      	ands	r3, r2
 8003376:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8003378:	683b      	ldr	r3, [r7, #0]
 800337a:	685b      	ldr	r3, [r3, #4]
 800337c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003380:	2b00      	cmp	r3, #0
 8003382:	d003      	beq.n	800338c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8003384:	69ba      	ldr	r2, [r7, #24]
 8003386:	693b      	ldr	r3, [r7, #16]
 8003388:	4313      	orrs	r3, r2
 800338a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800338c:	4a27      	ldr	r2, [pc, #156]	@ (800342c <HAL_GPIO_Init+0x334>)
 800338e:	69bb      	ldr	r3, [r7, #24]
 8003390:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003392:	4b26      	ldr	r3, [pc, #152]	@ (800342c <HAL_GPIO_Init+0x334>)
 8003394:	685b      	ldr	r3, [r3, #4]
 8003396:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	43db      	mvns	r3, r3
 800339c:	69ba      	ldr	r2, [r7, #24]
 800339e:	4013      	ands	r3, r2
 80033a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80033a2:	683b      	ldr	r3, [r7, #0]
 80033a4:	685b      	ldr	r3, [r3, #4]
 80033a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d003      	beq.n	80033b6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80033ae:	69ba      	ldr	r2, [r7, #24]
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	4313      	orrs	r3, r2
 80033b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80033b6:	4a1d      	ldr	r2, [pc, #116]	@ (800342c <HAL_GPIO_Init+0x334>)
 80033b8:	69bb      	ldr	r3, [r7, #24]
 80033ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80033bc:	4b1b      	ldr	r3, [pc, #108]	@ (800342c <HAL_GPIO_Init+0x334>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	43db      	mvns	r3, r3
 80033c6:	69ba      	ldr	r2, [r7, #24]
 80033c8:	4013      	ands	r3, r2
 80033ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80033cc:	683b      	ldr	r3, [r7, #0]
 80033ce:	685b      	ldr	r3, [r3, #4]
 80033d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80033d4:	2b00      	cmp	r3, #0
 80033d6:	d003      	beq.n	80033e0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80033d8:	69ba      	ldr	r2, [r7, #24]
 80033da:	693b      	ldr	r3, [r7, #16]
 80033dc:	4313      	orrs	r3, r2
 80033de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80033e0:	4a12      	ldr	r2, [pc, #72]	@ (800342c <HAL_GPIO_Init+0x334>)
 80033e2:	69bb      	ldr	r3, [r7, #24]
 80033e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033e6:	69fb      	ldr	r3, [r7, #28]
 80033e8:	3301      	adds	r3, #1
 80033ea:	61fb      	str	r3, [r7, #28]
 80033ec:	69fb      	ldr	r3, [r7, #28]
 80033ee:	2b0f      	cmp	r3, #15
 80033f0:	f67f ae90 	bls.w	8003114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033f4:	bf00      	nop
 80033f6:	bf00      	nop
 80033f8:	3724      	adds	r7, #36	@ 0x24
 80033fa:	46bd      	mov	sp, r7
 80033fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003400:	4770      	bx	lr
 8003402:	bf00      	nop
 8003404:	40023800 	.word	0x40023800
 8003408:	40013800 	.word	0x40013800
 800340c:	40020000 	.word	0x40020000
 8003410:	40020400 	.word	0x40020400
 8003414:	40020800 	.word	0x40020800
 8003418:	40020c00 	.word	0x40020c00
 800341c:	40021000 	.word	0x40021000
 8003420:	40021400 	.word	0x40021400
 8003424:	40021800 	.word	0x40021800
 8003428:	40021c00 	.word	0x40021c00
 800342c:	40013c00 	.word	0x40013c00

08003430 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003430:	b580      	push	{r7, lr}
 8003432:	b086      	sub	sp, #24
 8003434:	af00      	add	r7, sp, #0
 8003436:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	2b00      	cmp	r3, #0
 800343c:	d101      	bne.n	8003442 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800343e:	2301      	movs	r3, #1
 8003440:	e267      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	f003 0301 	and.w	r3, r3, #1
 800344a:	2b00      	cmp	r3, #0
 800344c:	d075      	beq.n	800353a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800344e:	4b88      	ldr	r3, [pc, #544]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	f003 030c 	and.w	r3, r3, #12
 8003456:	2b04      	cmp	r3, #4
 8003458:	d00c      	beq.n	8003474 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800345a:	4b85      	ldr	r3, [pc, #532]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003462:	2b08      	cmp	r3, #8
 8003464:	d112      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003466:	4b82      	ldr	r3, [pc, #520]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003468:	685b      	ldr	r3, [r3, #4]
 800346a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800346e:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003472:	d10b      	bne.n	800348c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003474:	4b7e      	ldr	r3, [pc, #504]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003476:	681b      	ldr	r3, [r3, #0]
 8003478:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800347c:	2b00      	cmp	r3, #0
 800347e:	d05b      	beq.n	8003538 <HAL_RCC_OscConfig+0x108>
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	685b      	ldr	r3, [r3, #4]
 8003484:	2b00      	cmp	r3, #0
 8003486:	d157      	bne.n	8003538 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003488:	2301      	movs	r3, #1
 800348a:	e242      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800348c:	687b      	ldr	r3, [r7, #4]
 800348e:	685b      	ldr	r3, [r3, #4]
 8003490:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003494:	d106      	bne.n	80034a4 <HAL_RCC_OscConfig+0x74>
 8003496:	4b76      	ldr	r3, [pc, #472]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	4a75      	ldr	r2, [pc, #468]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800349c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034a0:	6013      	str	r3, [r2, #0]
 80034a2:	e01d      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	685b      	ldr	r3, [r3, #4]
 80034a8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x98>
 80034ae:	4b70      	ldr	r3, [pc, #448]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	4a6f      	ldr	r2, [pc, #444]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034b4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80034b8:	6013      	str	r3, [r2, #0]
 80034ba:	4b6d      	ldr	r3, [pc, #436]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	4a6c      	ldr	r2, [pc, #432]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80034c4:	6013      	str	r3, [r2, #0]
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0xb0>
 80034c8:	4b69      	ldr	r3, [pc, #420]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	4a68      	ldr	r2, [pc, #416]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034ce:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80034d2:	6013      	str	r3, [r2, #0]
 80034d4:	4b66      	ldr	r3, [pc, #408]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034d6:	681b      	ldr	r3, [r3, #0]
 80034d8:	4a65      	ldr	r2, [pc, #404]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80034da:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80034de:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	685b      	ldr	r3, [r3, #4]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d013      	beq.n	8003510 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034e8:	f7fe fe14 	bl	8002114 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80034ee:	e008      	b.n	8003502 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80034f0:	f7fe fe10 	bl	8002114 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	2b64      	cmp	r3, #100	@ 0x64
 80034fc:	d901      	bls.n	8003502 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80034fe:	2303      	movs	r3, #3
 8003500:	e207      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003502:	4b5b      	ldr	r3, [pc, #364]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800350a:	2b00      	cmp	r3, #0
 800350c:	d0f0      	beq.n	80034f0 <HAL_RCC_OscConfig+0xc0>
 800350e:	e014      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003510:	f7fe fe00 	bl	8002114 <HAL_GetTick>
 8003514:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003516:	e008      	b.n	800352a <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003518:	f7fe fdfc 	bl	8002114 <HAL_GetTick>
 800351c:	4602      	mov	r2, r0
 800351e:	693b      	ldr	r3, [r7, #16]
 8003520:	1ad3      	subs	r3, r2, r3
 8003522:	2b64      	cmp	r3, #100	@ 0x64
 8003524:	d901      	bls.n	800352a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8003526:	2303      	movs	r3, #3
 8003528:	e1f3      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800352a:	4b51      	ldr	r3, [pc, #324]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800352c:	681b      	ldr	r3, [r3, #0]
 800352e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003532:	2b00      	cmp	r3, #0
 8003534:	d1f0      	bne.n	8003518 <HAL_RCC_OscConfig+0xe8>
 8003536:	e000      	b.n	800353a <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003538:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	681b      	ldr	r3, [r3, #0]
 800353e:	f003 0302 	and.w	r3, r3, #2
 8003542:	2b00      	cmp	r3, #0
 8003544:	d063      	beq.n	800360e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8003546:	4b4a      	ldr	r3, [pc, #296]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003548:	689b      	ldr	r3, [r3, #8]
 800354a:	f003 030c 	and.w	r3, r3, #12
 800354e:	2b00      	cmp	r3, #0
 8003550:	d00b      	beq.n	800356a <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003552:	4b47      	ldr	r3, [pc, #284]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003554:	689b      	ldr	r3, [r3, #8]
 8003556:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800355a:	2b08      	cmp	r3, #8
 800355c:	d11c      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800355e:	4b44      	ldr	r3, [pc, #272]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003566:	2b00      	cmp	r3, #0
 8003568:	d116      	bne.n	8003598 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800356a:	4b41      	ldr	r3, [pc, #260]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 800356c:	681b      	ldr	r3, [r3, #0]
 800356e:	f003 0302 	and.w	r3, r3, #2
 8003572:	2b00      	cmp	r3, #0
 8003574:	d005      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	68db      	ldr	r3, [r3, #12]
 800357a:	2b01      	cmp	r3, #1
 800357c:	d001      	beq.n	8003582 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800357e:	2301      	movs	r3, #1
 8003580:	e1c7      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003582:	4b3b      	ldr	r3, [pc, #236]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003584:	681b      	ldr	r3, [r3, #0]
 8003586:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800358a:	687b      	ldr	r3, [r7, #4]
 800358c:	691b      	ldr	r3, [r3, #16]
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	4937      	ldr	r1, [pc, #220]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003592:	4313      	orrs	r3, r2
 8003594:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003596:	e03a      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	68db      	ldr	r3, [r3, #12]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d020      	beq.n	80035e2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80035a0:	4b34      	ldr	r3, [pc, #208]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035a2:	2201      	movs	r2, #1
 80035a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a6:	f7fe fdb5 	bl	8002114 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035ae:	f7fe fdb1 	bl	8002114 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b02      	cmp	r3, #2
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e1a8      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035c0:	4b2b      	ldr	r3, [pc, #172]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f003 0302 	and.w	r3, r3, #2
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80035cc:	4b28      	ldr	r3, [pc, #160]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	691b      	ldr	r3, [r3, #16]
 80035d8:	00db      	lsls	r3, r3, #3
 80035da:	4925      	ldr	r1, [pc, #148]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 80035dc:	4313      	orrs	r3, r2
 80035de:	600b      	str	r3, [r1, #0]
 80035e0:	e015      	b.n	800360e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80035e2:	4b24      	ldr	r3, [pc, #144]	@ (8003674 <HAL_RCC_OscConfig+0x244>)
 80035e4:	2200      	movs	r2, #0
 80035e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035e8:	f7fe fd94 	bl	8002114 <HAL_GetTick>
 80035ec:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80035f0:	f7fe fd90 	bl	8002114 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	693b      	ldr	r3, [r7, #16]
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e187      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003602:	4b1b      	ldr	r3, [pc, #108]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d1f0      	bne.n	80035f0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800360e:	687b      	ldr	r3, [r7, #4]
 8003610:	681b      	ldr	r3, [r3, #0]
 8003612:	f003 0308 	and.w	r3, r3, #8
 8003616:	2b00      	cmp	r3, #0
 8003618:	d036      	beq.n	8003688 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	695b      	ldr	r3, [r3, #20]
 800361e:	2b00      	cmp	r3, #0
 8003620:	d016      	beq.n	8003650 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003622:	4b15      	ldr	r3, [pc, #84]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003624:	2201      	movs	r2, #1
 8003626:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003628:	f7fe fd74 	bl	8002114 <HAL_GetTick>
 800362c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800362e:	e008      	b.n	8003642 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003630:	f7fe fd70 	bl	8002114 <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	693b      	ldr	r3, [r7, #16]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	2b02      	cmp	r3, #2
 800363c:	d901      	bls.n	8003642 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800363e:	2303      	movs	r3, #3
 8003640:	e167      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003642:	4b0b      	ldr	r3, [pc, #44]	@ (8003670 <HAL_RCC_OscConfig+0x240>)
 8003644:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003646:	f003 0302 	and.w	r3, r3, #2
 800364a:	2b00      	cmp	r3, #0
 800364c:	d0f0      	beq.n	8003630 <HAL_RCC_OscConfig+0x200>
 800364e:	e01b      	b.n	8003688 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003650:	4b09      	ldr	r3, [pc, #36]	@ (8003678 <HAL_RCC_OscConfig+0x248>)
 8003652:	2200      	movs	r2, #0
 8003654:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003656:	f7fe fd5d 	bl	8002114 <HAL_GetTick>
 800365a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800365c:	e00e      	b.n	800367c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800365e:	f7fe fd59 	bl	8002114 <HAL_GetTick>
 8003662:	4602      	mov	r2, r0
 8003664:	693b      	ldr	r3, [r7, #16]
 8003666:	1ad3      	subs	r3, r2, r3
 8003668:	2b02      	cmp	r3, #2
 800366a:	d907      	bls.n	800367c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800366c:	2303      	movs	r3, #3
 800366e:	e150      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 8003670:	40023800 	.word	0x40023800
 8003674:	42470000 	.word	0x42470000
 8003678:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800367c:	4b88      	ldr	r3, [pc, #544]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800367e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8003680:	f003 0302 	and.w	r3, r3, #2
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1ea      	bne.n	800365e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	681b      	ldr	r3, [r3, #0]
 800368c:	f003 0304 	and.w	r3, r3, #4
 8003690:	2b00      	cmp	r3, #0
 8003692:	f000 8097 	beq.w	80037c4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003696:	2300      	movs	r3, #0
 8003698:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800369a:	4b81      	ldr	r3, [pc, #516]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800369c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800369e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d10f      	bne.n	80036c6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80036a6:	2300      	movs	r3, #0
 80036a8:	60bb      	str	r3, [r7, #8]
 80036aa:	4b7d      	ldr	r3, [pc, #500]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ae:	4a7c      	ldr	r2, [pc, #496]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80036b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80036b6:	4b7a      	ldr	r3, [pc, #488]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80036b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80036ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80036be:	60bb      	str	r3, [r7, #8]
 80036c0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80036c2:	2301      	movs	r3, #1
 80036c4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036c6:	4b77      	ldr	r3, [pc, #476]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036ce:	2b00      	cmp	r3, #0
 80036d0:	d118      	bne.n	8003704 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80036d2:	4b74      	ldr	r3, [pc, #464]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d4:	681b      	ldr	r3, [r3, #0]
 80036d6:	4a73      	ldr	r2, [pc, #460]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036d8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80036dc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80036de:	f7fe fd19 	bl	8002114 <HAL_GetTick>
 80036e2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036e4:	e008      	b.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e6:	f7fe fd15 	bl	8002114 <HAL_GetTick>
 80036ea:	4602      	mov	r2, r0
 80036ec:	693b      	ldr	r3, [r7, #16]
 80036ee:	1ad3      	subs	r3, r2, r3
 80036f0:	2b02      	cmp	r3, #2
 80036f2:	d901      	bls.n	80036f8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80036f4:	2303      	movs	r3, #3
 80036f6:	e10c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80036f8:	4b6a      	ldr	r3, [pc, #424]	@ (80038a4 <HAL_RCC_OscConfig+0x474>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003700:	2b00      	cmp	r3, #0
 8003702:	d0f0      	beq.n	80036e6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	689b      	ldr	r3, [r3, #8]
 8003708:	2b01      	cmp	r3, #1
 800370a:	d106      	bne.n	800371a <HAL_RCC_OscConfig+0x2ea>
 800370c:	4b64      	ldr	r3, [pc, #400]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800370e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003710:	4a63      	ldr	r2, [pc, #396]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003712:	f043 0301 	orr.w	r3, r3, #1
 8003716:	6713      	str	r3, [r2, #112]	@ 0x70
 8003718:	e01c      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800371a:	687b      	ldr	r3, [r7, #4]
 800371c:	689b      	ldr	r3, [r3, #8]
 800371e:	2b05      	cmp	r3, #5
 8003720:	d10c      	bne.n	800373c <HAL_RCC_OscConfig+0x30c>
 8003722:	4b5f      	ldr	r3, [pc, #380]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003724:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003726:	4a5e      	ldr	r2, [pc, #376]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003728:	f043 0304 	orr.w	r3, r3, #4
 800372c:	6713      	str	r3, [r2, #112]	@ 0x70
 800372e:	4b5c      	ldr	r3, [pc, #368]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003730:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003732:	4a5b      	ldr	r2, [pc, #364]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003734:	f043 0301 	orr.w	r3, r3, #1
 8003738:	6713      	str	r3, [r2, #112]	@ 0x70
 800373a:	e00b      	b.n	8003754 <HAL_RCC_OscConfig+0x324>
 800373c:	4b58      	ldr	r3, [pc, #352]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8003740:	4a57      	ldr	r2, [pc, #348]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003742:	f023 0301 	bic.w	r3, r3, #1
 8003746:	6713      	str	r3, [r2, #112]	@ 0x70
 8003748:	4b55      	ldr	r3, [pc, #340]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800374c:	4a54      	ldr	r2, [pc, #336]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800374e:	f023 0304 	bic.w	r3, r3, #4
 8003752:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003754:	687b      	ldr	r3, [r7, #4]
 8003756:	689b      	ldr	r3, [r3, #8]
 8003758:	2b00      	cmp	r3, #0
 800375a:	d015      	beq.n	8003788 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800375c:	f7fe fcda 	bl	8002114 <HAL_GetTick>
 8003760:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003762:	e00a      	b.n	800377a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003764:	f7fe fcd6 	bl	8002114 <HAL_GetTick>
 8003768:	4602      	mov	r2, r0
 800376a:	693b      	ldr	r3, [r7, #16]
 800376c:	1ad3      	subs	r3, r2, r3
 800376e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003772:	4293      	cmp	r3, r2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e0cb      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800377a:	4b49      	ldr	r3, [pc, #292]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800377c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d0ee      	beq.n	8003764 <HAL_RCC_OscConfig+0x334>
 8003786:	e014      	b.n	80037b2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003788:	f7fe fcc4 	bl	8002114 <HAL_GetTick>
 800378c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800378e:	e00a      	b.n	80037a6 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003790:	f7fe fcc0 	bl	8002114 <HAL_GetTick>
 8003794:	4602      	mov	r2, r0
 8003796:	693b      	ldr	r3, [r7, #16]
 8003798:	1ad3      	subs	r3, r2, r3
 800379a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800379e:	4293      	cmp	r3, r2
 80037a0:	d901      	bls.n	80037a6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80037a2:	2303      	movs	r3, #3
 80037a4:	e0b5      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80037a6:	4b3e      	ldr	r3, [pc, #248]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037a8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80037aa:	f003 0302 	and.w	r3, r3, #2
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d1ee      	bne.n	8003790 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80037b2:	7dfb      	ldrb	r3, [r7, #23]
 80037b4:	2b01      	cmp	r3, #1
 80037b6:	d105      	bne.n	80037c4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80037b8:	4b39      	ldr	r3, [pc, #228]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037ba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80037bc:	4a38      	ldr	r2, [pc, #224]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037be:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80037c2:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	699b      	ldr	r3, [r3, #24]
 80037c8:	2b00      	cmp	r3, #0
 80037ca:	f000 80a1 	beq.w	8003910 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80037ce:	4b34      	ldr	r3, [pc, #208]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 80037d0:	689b      	ldr	r3, [r3, #8]
 80037d2:	f003 030c 	and.w	r3, r3, #12
 80037d6:	2b08      	cmp	r3, #8
 80037d8:	d05c      	beq.n	8003894 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	699b      	ldr	r3, [r3, #24]
 80037de:	2b02      	cmp	r3, #2
 80037e0:	d141      	bne.n	8003866 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037e2:	4b31      	ldr	r3, [pc, #196]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 80037e4:	2200      	movs	r2, #0
 80037e6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037e8:	f7fe fc94 	bl	8002114 <HAL_GetTick>
 80037ec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80037ee:	e008      	b.n	8003802 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037f0:	f7fe fc90 	bl	8002114 <HAL_GetTick>
 80037f4:	4602      	mov	r2, r0
 80037f6:	693b      	ldr	r3, [r7, #16]
 80037f8:	1ad3      	subs	r3, r2, r3
 80037fa:	2b02      	cmp	r3, #2
 80037fc:	d901      	bls.n	8003802 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80037fe:	2303      	movs	r3, #3
 8003800:	e087      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003802:	4b27      	ldr	r3, [pc, #156]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800380a:	2b00      	cmp	r3, #0
 800380c:	d1f0      	bne.n	80037f0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	69da      	ldr	r2, [r3, #28]
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	6a1b      	ldr	r3, [r3, #32]
 8003816:	431a      	orrs	r2, r3
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381c:	019b      	lsls	r3, r3, #6
 800381e:	431a      	orrs	r2, r3
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003824:	085b      	lsrs	r3, r3, #1
 8003826:	3b01      	subs	r3, #1
 8003828:	041b      	lsls	r3, r3, #16
 800382a:	431a      	orrs	r2, r3
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003830:	061b      	lsls	r3, r3, #24
 8003832:	491b      	ldr	r1, [pc, #108]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003834:	4313      	orrs	r3, r2
 8003836:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003838:	4b1b      	ldr	r3, [pc, #108]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 800383a:	2201      	movs	r2, #1
 800383c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800383e:	f7fe fc69 	bl	8002114 <HAL_GetTick>
 8003842:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003844:	e008      	b.n	8003858 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003846:	f7fe fc65 	bl	8002114 <HAL_GetTick>
 800384a:	4602      	mov	r2, r0
 800384c:	693b      	ldr	r3, [r7, #16]
 800384e:	1ad3      	subs	r3, r2, r3
 8003850:	2b02      	cmp	r3, #2
 8003852:	d901      	bls.n	8003858 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8003854:	2303      	movs	r3, #3
 8003856:	e05c      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003858:	4b11      	ldr	r3, [pc, #68]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003860:	2b00      	cmp	r3, #0
 8003862:	d0f0      	beq.n	8003846 <HAL_RCC_OscConfig+0x416>
 8003864:	e054      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003866:	4b10      	ldr	r3, [pc, #64]	@ (80038a8 <HAL_RCC_OscConfig+0x478>)
 8003868:	2200      	movs	r2, #0
 800386a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800386c:	f7fe fc52 	bl	8002114 <HAL_GetTick>
 8003870:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003872:	e008      	b.n	8003886 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003874:	f7fe fc4e 	bl	8002114 <HAL_GetTick>
 8003878:	4602      	mov	r2, r0
 800387a:	693b      	ldr	r3, [r7, #16]
 800387c:	1ad3      	subs	r3, r2, r3
 800387e:	2b02      	cmp	r3, #2
 8003880:	d901      	bls.n	8003886 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8003882:	2303      	movs	r3, #3
 8003884:	e045      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003886:	4b06      	ldr	r3, [pc, #24]	@ (80038a0 <HAL_RCC_OscConfig+0x470>)
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800388e:	2b00      	cmp	r3, #0
 8003890:	d1f0      	bne.n	8003874 <HAL_RCC_OscConfig+0x444>
 8003892:	e03d      	b.n	8003910 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	699b      	ldr	r3, [r3, #24]
 8003898:	2b01      	cmp	r3, #1
 800389a:	d107      	bne.n	80038ac <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800389c:	2301      	movs	r3, #1
 800389e:	e038      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
 80038a0:	40023800 	.word	0x40023800
 80038a4:	40007000 	.word	0x40007000
 80038a8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80038ac:	4b1b      	ldr	r3, [pc, #108]	@ (800391c <HAL_RCC_OscConfig+0x4ec>)
 80038ae:	685b      	ldr	r3, [r3, #4]
 80038b0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	699b      	ldr	r3, [r3, #24]
 80038b6:	2b01      	cmp	r3, #1
 80038b8:	d028      	beq.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038ba:	68fb      	ldr	r3, [r7, #12]
 80038bc:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80038c4:	429a      	cmp	r2, r3
 80038c6:	d121      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038c8:	68fb      	ldr	r3, [r7, #12]
 80038ca:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80038d2:	429a      	cmp	r2, r3
 80038d4:	d11a      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038d6:	68fa      	ldr	r2, [r7, #12]
 80038d8:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80038dc:	4013      	ands	r3, r2
 80038de:	687a      	ldr	r2, [r7, #4]
 80038e0:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80038e2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80038e4:	4293      	cmp	r3, r2
 80038e6:	d111      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80038e8:	68fb      	ldr	r3, [r7, #12]
 80038ea:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80038f2:	085b      	lsrs	r3, r3, #1
 80038f4:	3b01      	subs	r3, #1
 80038f6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d107      	bne.n	800390c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003906:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003908:	429a      	cmp	r2, r3
 800390a:	d001      	beq.n	8003910 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 800390c:	2301      	movs	r3, #1
 800390e:	e000      	b.n	8003912 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8003910:	2300      	movs	r3, #0
}
 8003912:	4618      	mov	r0, r3
 8003914:	3718      	adds	r7, #24
 8003916:	46bd      	mov	sp, r7
 8003918:	bd80      	pop	{r7, pc}
 800391a:	bf00      	nop
 800391c:	40023800 	.word	0x40023800

08003920 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003920:	b580      	push	{r7, lr}
 8003922:	b084      	sub	sp, #16
 8003924:	af00      	add	r7, sp, #0
 8003926:	6078      	str	r0, [r7, #4]
 8003928:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800392a:	687b      	ldr	r3, [r7, #4]
 800392c:	2b00      	cmp	r3, #0
 800392e:	d101      	bne.n	8003934 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003930:	2301      	movs	r3, #1
 8003932:	e0cc      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003934:	4b68      	ldr	r3, [pc, #416]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	f003 0307 	and.w	r3, r3, #7
 800393c:	683a      	ldr	r2, [r7, #0]
 800393e:	429a      	cmp	r2, r3
 8003940:	d90c      	bls.n	800395c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003942:	4b65      	ldr	r3, [pc, #404]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	b2d2      	uxtb	r2, r2
 8003948:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800394a:	4b63      	ldr	r3, [pc, #396]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f003 0307 	and.w	r3, r3, #7
 8003952:	683a      	ldr	r2, [r7, #0]
 8003954:	429a      	cmp	r2, r3
 8003956:	d001      	beq.n	800395c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003958:	2301      	movs	r3, #1
 800395a:	e0b8      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f003 0302 	and.w	r3, r3, #2
 8003964:	2b00      	cmp	r3, #0
 8003966:	d020      	beq.n	80039aa <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	681b      	ldr	r3, [r3, #0]
 800396c:	f003 0304 	and.w	r3, r3, #4
 8003970:	2b00      	cmp	r3, #0
 8003972:	d005      	beq.n	8003980 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003974:	4b59      	ldr	r3, [pc, #356]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003976:	689b      	ldr	r3, [r3, #8]
 8003978:	4a58      	ldr	r2, [pc, #352]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800397a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800397e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	681b      	ldr	r3, [r3, #0]
 8003984:	f003 0308 	and.w	r3, r3, #8
 8003988:	2b00      	cmp	r3, #0
 800398a:	d005      	beq.n	8003998 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800398c:	4b53      	ldr	r3, [pc, #332]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800398e:	689b      	ldr	r3, [r3, #8]
 8003990:	4a52      	ldr	r2, [pc, #328]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003992:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8003996:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003998:	4b50      	ldr	r3, [pc, #320]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	689b      	ldr	r3, [r3, #8]
 80039a4:	494d      	ldr	r1, [pc, #308]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f003 0301 	and.w	r3, r3, #1
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d044      	beq.n	8003a40 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	685b      	ldr	r3, [r3, #4]
 80039ba:	2b01      	cmp	r3, #1
 80039bc:	d107      	bne.n	80039ce <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80039be:	4b47      	ldr	r3, [pc, #284]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d119      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e07f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	685b      	ldr	r3, [r3, #4]
 80039d2:	2b02      	cmp	r3, #2
 80039d4:	d003      	beq.n	80039de <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80039da:	2b03      	cmp	r3, #3
 80039dc:	d107      	bne.n	80039ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80039de:	4b3f      	ldr	r3, [pc, #252]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80039e6:	2b00      	cmp	r3, #0
 80039e8:	d109      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039ea:	2301      	movs	r3, #1
 80039ec:	e06f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80039ee:	4b3b      	ldr	r3, [pc, #236]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 80039f0:	681b      	ldr	r3, [r3, #0]
 80039f2:	f003 0302 	and.w	r3, r3, #2
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d101      	bne.n	80039fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80039fa:	2301      	movs	r3, #1
 80039fc:	e067      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80039fe:	4b37      	ldr	r3, [pc, #220]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a00:	689b      	ldr	r3, [r3, #8]
 8003a02:	f023 0203 	bic.w	r2, r3, #3
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	685b      	ldr	r3, [r3, #4]
 8003a0a:	4934      	ldr	r1, [pc, #208]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a0c:	4313      	orrs	r3, r2
 8003a0e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003a10:	f7fe fb80 	bl	8002114 <HAL_GetTick>
 8003a14:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a16:	e00a      	b.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003a18:	f7fe fb7c 	bl	8002114 <HAL_GetTick>
 8003a1c:	4602      	mov	r2, r0
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	1ad3      	subs	r3, r2, r3
 8003a22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003a26:	4293      	cmp	r3, r2
 8003a28:	d901      	bls.n	8003a2e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003a2a:	2303      	movs	r3, #3
 8003a2c:	e04f      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003a2e:	4b2b      	ldr	r3, [pc, #172]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a30:	689b      	ldr	r3, [r3, #8]
 8003a32:	f003 020c 	and.w	r2, r3, #12
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	685b      	ldr	r3, [r3, #4]
 8003a3a:	009b      	lsls	r3, r3, #2
 8003a3c:	429a      	cmp	r2, r3
 8003a3e:	d1eb      	bne.n	8003a18 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003a40:	4b25      	ldr	r3, [pc, #148]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	f003 0307 	and.w	r3, r3, #7
 8003a48:	683a      	ldr	r2, [r7, #0]
 8003a4a:	429a      	cmp	r2, r3
 8003a4c:	d20c      	bcs.n	8003a68 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a4e:	4b22      	ldr	r3, [pc, #136]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a50:	683a      	ldr	r2, [r7, #0]
 8003a52:	b2d2      	uxtb	r2, r2
 8003a54:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a56:	4b20      	ldr	r3, [pc, #128]	@ (8003ad8 <HAL_RCC_ClockConfig+0x1b8>)
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f003 0307 	and.w	r3, r3, #7
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	429a      	cmp	r2, r3
 8003a62:	d001      	beq.n	8003a68 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8003a64:	2301      	movs	r3, #1
 8003a66:	e032      	b.n	8003ace <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	f003 0304 	and.w	r3, r3, #4
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d008      	beq.n	8003a86 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003a74:	4b19      	ldr	r3, [pc, #100]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a76:	689b      	ldr	r3, [r3, #8]
 8003a78:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	68db      	ldr	r3, [r3, #12]
 8003a80:	4916      	ldr	r1, [pc, #88]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a82:	4313      	orrs	r3, r2
 8003a84:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 0308 	and.w	r3, r3, #8
 8003a8e:	2b00      	cmp	r3, #0
 8003a90:	d009      	beq.n	8003aa6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8003a92:	4b12      	ldr	r3, [pc, #72]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003a94:	689b      	ldr	r3, [r3, #8]
 8003a96:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	691b      	ldr	r3, [r3, #16]
 8003a9e:	00db      	lsls	r3, r3, #3
 8003aa0:	490e      	ldr	r1, [pc, #56]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aa2:	4313      	orrs	r3, r2
 8003aa4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003aa6:	f000 f821 	bl	8003aec <HAL_RCC_GetSysClockFreq>
 8003aaa:	4602      	mov	r2, r0
 8003aac:	4b0b      	ldr	r3, [pc, #44]	@ (8003adc <HAL_RCC_ClockConfig+0x1bc>)
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	091b      	lsrs	r3, r3, #4
 8003ab2:	f003 030f 	and.w	r3, r3, #15
 8003ab6:	490a      	ldr	r1, [pc, #40]	@ (8003ae0 <HAL_RCC_ClockConfig+0x1c0>)
 8003ab8:	5ccb      	ldrb	r3, [r1, r3]
 8003aba:	fa22 f303 	lsr.w	r3, r2, r3
 8003abe:	4a09      	ldr	r2, [pc, #36]	@ (8003ae4 <HAL_RCC_ClockConfig+0x1c4>)
 8003ac0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8003ac2:	4b09      	ldr	r3, [pc, #36]	@ (8003ae8 <HAL_RCC_ClockConfig+0x1c8>)
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fe f90c 	bl	8001ce4 <HAL_InitTick>

  return HAL_OK;
 8003acc:	2300      	movs	r3, #0
}
 8003ace:	4618      	mov	r0, r3
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	40023c00 	.word	0x40023c00
 8003adc:	40023800 	.word	0x40023800
 8003ae0:	08009f68 	.word	0x08009f68
 8003ae4:	20000000 	.word	0x20000000
 8003ae8:	20000004 	.word	0x20000004

08003aec <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003aec:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8003af0:	b094      	sub	sp, #80	@ 0x50
 8003af2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8003af4:	2300      	movs	r3, #0
 8003af6:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8003af8:	2300      	movs	r3, #0
 8003afa:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8003b00:	2300      	movs	r3, #0
 8003b02:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003b04:	4b79      	ldr	r3, [pc, #484]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f003 030c 	and.w	r3, r3, #12
 8003b0c:	2b08      	cmp	r3, #8
 8003b0e:	d00d      	beq.n	8003b2c <HAL_RCC_GetSysClockFreq+0x40>
 8003b10:	2b08      	cmp	r3, #8
 8003b12:	f200 80e1 	bhi.w	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d002      	beq.n	8003b20 <HAL_RCC_GetSysClockFreq+0x34>
 8003b1a:	2b04      	cmp	r3, #4
 8003b1c:	d003      	beq.n	8003b26 <HAL_RCC_GetSysClockFreq+0x3a>
 8003b1e:	e0db      	b.n	8003cd8 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003b20:	4b73      	ldr	r3, [pc, #460]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003b22:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b24:	e0db      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8003b26:	4b73      	ldr	r3, [pc, #460]	@ (8003cf4 <HAL_RCC_GetSysClockFreq+0x208>)
 8003b28:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003b2a:	e0d8      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003b2c:	4b6f      	ldr	r3, [pc, #444]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b2e:	685b      	ldr	r3, [r3, #4]
 8003b30:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8003b34:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8003b36:	4b6d      	ldr	r3, [pc, #436]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b38:	685b      	ldr	r3, [r3, #4]
 8003b3a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003b3e:	2b00      	cmp	r3, #0
 8003b40:	d063      	beq.n	8003c0a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003b42:	4b6a      	ldr	r3, [pc, #424]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	099b      	lsrs	r3, r3, #6
 8003b48:	2200      	movs	r2, #0
 8003b4a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8003b4c:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8003b4e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b50:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003b54:	633b      	str	r3, [r7, #48]	@ 0x30
 8003b56:	2300      	movs	r3, #0
 8003b58:	637b      	str	r3, [r7, #52]	@ 0x34
 8003b5a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8003b5e:	4622      	mov	r2, r4
 8003b60:	462b      	mov	r3, r5
 8003b62:	f04f 0000 	mov.w	r0, #0
 8003b66:	f04f 0100 	mov.w	r1, #0
 8003b6a:	0159      	lsls	r1, r3, #5
 8003b6c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003b70:	0150      	lsls	r0, r2, #5
 8003b72:	4602      	mov	r2, r0
 8003b74:	460b      	mov	r3, r1
 8003b76:	4621      	mov	r1, r4
 8003b78:	1a51      	subs	r1, r2, r1
 8003b7a:	6139      	str	r1, [r7, #16]
 8003b7c:	4629      	mov	r1, r5
 8003b7e:	eb63 0301 	sbc.w	r3, r3, r1
 8003b82:	617b      	str	r3, [r7, #20]
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	f04f 0300 	mov.w	r3, #0
 8003b8c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8003b90:	4659      	mov	r1, fp
 8003b92:	018b      	lsls	r3, r1, #6
 8003b94:	4651      	mov	r1, sl
 8003b96:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8003b9a:	4651      	mov	r1, sl
 8003b9c:	018a      	lsls	r2, r1, #6
 8003b9e:	4651      	mov	r1, sl
 8003ba0:	ebb2 0801 	subs.w	r8, r2, r1
 8003ba4:	4659      	mov	r1, fp
 8003ba6:	eb63 0901 	sbc.w	r9, r3, r1
 8003baa:	f04f 0200 	mov.w	r2, #0
 8003bae:	f04f 0300 	mov.w	r3, #0
 8003bb2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8003bb6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8003bba:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8003bbe:	4690      	mov	r8, r2
 8003bc0:	4699      	mov	r9, r3
 8003bc2:	4623      	mov	r3, r4
 8003bc4:	eb18 0303 	adds.w	r3, r8, r3
 8003bc8:	60bb      	str	r3, [r7, #8]
 8003bca:	462b      	mov	r3, r5
 8003bcc:	eb49 0303 	adc.w	r3, r9, r3
 8003bd0:	60fb      	str	r3, [r7, #12]
 8003bd2:	f04f 0200 	mov.w	r2, #0
 8003bd6:	f04f 0300 	mov.w	r3, #0
 8003bda:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8003bde:	4629      	mov	r1, r5
 8003be0:	024b      	lsls	r3, r1, #9
 8003be2:	4621      	mov	r1, r4
 8003be4:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8003be8:	4621      	mov	r1, r4
 8003bea:	024a      	lsls	r2, r1, #9
 8003bec:	4610      	mov	r0, r2
 8003bee:	4619      	mov	r1, r3
 8003bf0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003bf2:	2200      	movs	r2, #0
 8003bf4:	62bb      	str	r3, [r7, #40]	@ 0x28
 8003bf6:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8003bf8:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8003bfc:	f7fc fb38 	bl	8000270 <__aeabi_uldivmod>
 8003c00:	4602      	mov	r2, r0
 8003c02:	460b      	mov	r3, r1
 8003c04:	4613      	mov	r3, r2
 8003c06:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8003c08:	e058      	b.n	8003cbc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003c0a:	4b38      	ldr	r3, [pc, #224]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003c0c:	685b      	ldr	r3, [r3, #4]
 8003c0e:	099b      	lsrs	r3, r3, #6
 8003c10:	2200      	movs	r2, #0
 8003c12:	4618      	mov	r0, r3
 8003c14:	4611      	mov	r1, r2
 8003c16:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8003c1a:	623b      	str	r3, [r7, #32]
 8003c1c:	2300      	movs	r3, #0
 8003c1e:	627b      	str	r3, [r7, #36]	@ 0x24
 8003c20:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8003c24:	4642      	mov	r2, r8
 8003c26:	464b      	mov	r3, r9
 8003c28:	f04f 0000 	mov.w	r0, #0
 8003c2c:	f04f 0100 	mov.w	r1, #0
 8003c30:	0159      	lsls	r1, r3, #5
 8003c32:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003c36:	0150      	lsls	r0, r2, #5
 8003c38:	4602      	mov	r2, r0
 8003c3a:	460b      	mov	r3, r1
 8003c3c:	4641      	mov	r1, r8
 8003c3e:	ebb2 0a01 	subs.w	sl, r2, r1
 8003c42:	4649      	mov	r1, r9
 8003c44:	eb63 0b01 	sbc.w	fp, r3, r1
 8003c48:	f04f 0200 	mov.w	r2, #0
 8003c4c:	f04f 0300 	mov.w	r3, #0
 8003c50:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8003c54:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8003c58:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8003c5c:	ebb2 040a 	subs.w	r4, r2, sl
 8003c60:	eb63 050b 	sbc.w	r5, r3, fp
 8003c64:	f04f 0200 	mov.w	r2, #0
 8003c68:	f04f 0300 	mov.w	r3, #0
 8003c6c:	00eb      	lsls	r3, r5, #3
 8003c6e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003c72:	00e2      	lsls	r2, r4, #3
 8003c74:	4614      	mov	r4, r2
 8003c76:	461d      	mov	r5, r3
 8003c78:	4643      	mov	r3, r8
 8003c7a:	18e3      	adds	r3, r4, r3
 8003c7c:	603b      	str	r3, [r7, #0]
 8003c7e:	464b      	mov	r3, r9
 8003c80:	eb45 0303 	adc.w	r3, r5, r3
 8003c84:	607b      	str	r3, [r7, #4]
 8003c86:	f04f 0200 	mov.w	r2, #0
 8003c8a:	f04f 0300 	mov.w	r3, #0
 8003c8e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8003c92:	4629      	mov	r1, r5
 8003c94:	028b      	lsls	r3, r1, #10
 8003c96:	4621      	mov	r1, r4
 8003c98:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8003c9c:	4621      	mov	r1, r4
 8003c9e:	028a      	lsls	r2, r1, #10
 8003ca0:	4610      	mov	r0, r2
 8003ca2:	4619      	mov	r1, r3
 8003ca4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	61bb      	str	r3, [r7, #24]
 8003caa:	61fa      	str	r2, [r7, #28]
 8003cac:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8003cb0:	f7fc fade 	bl	8000270 <__aeabi_uldivmod>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4613      	mov	r3, r2
 8003cba:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8003cbc:	4b0b      	ldr	r3, [pc, #44]	@ (8003cec <HAL_RCC_GetSysClockFreq+0x200>)
 8003cbe:	685b      	ldr	r3, [r3, #4]
 8003cc0:	0c1b      	lsrs	r3, r3, #16
 8003cc2:	f003 0303 	and.w	r3, r3, #3
 8003cc6:	3301      	adds	r3, #1
 8003cc8:	005b      	lsls	r3, r3, #1
 8003cca:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8003ccc:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8003cce:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8003cd0:	fbb2 f3f3 	udiv	r3, r2, r3
 8003cd4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cd6:	e002      	b.n	8003cde <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003cd8:	4b05      	ldr	r3, [pc, #20]	@ (8003cf0 <HAL_RCC_GetSysClockFreq+0x204>)
 8003cda:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8003cdc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003cde:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	3750      	adds	r7, #80	@ 0x50
 8003ce4:	46bd      	mov	sp, r7
 8003ce6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003cea:	bf00      	nop
 8003cec:	40023800 	.word	0x40023800
 8003cf0:	00f42400 	.word	0x00f42400
 8003cf4:	007a1200 	.word	0x007a1200

08003cf8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003cf8:	b480      	push	{r7}
 8003cfa:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003cfc:	4b03      	ldr	r3, [pc, #12]	@ (8003d0c <HAL_RCC_GetHCLKFreq+0x14>)
 8003cfe:	681b      	ldr	r3, [r3, #0]
}
 8003d00:	4618      	mov	r0, r3
 8003d02:	46bd      	mov	sp, r7
 8003d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d08:	4770      	bx	lr
 8003d0a:	bf00      	nop
 8003d0c:	20000000 	.word	0x20000000

08003d10 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003d10:	b580      	push	{r7, lr}
 8003d12:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8003d14:	f7ff fff0 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	4b05      	ldr	r3, [pc, #20]	@ (8003d30 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003d1c:	689b      	ldr	r3, [r3, #8]
 8003d1e:	0a9b      	lsrs	r3, r3, #10
 8003d20:	f003 0307 	and.w	r3, r3, #7
 8003d24:	4903      	ldr	r1, [pc, #12]	@ (8003d34 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003d26:	5ccb      	ldrb	r3, [r1, r3]
 8003d28:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d2c:	4618      	mov	r0, r3
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	08009f78 	.word	0x08009f78

08003d38 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8003d3c:	f7ff ffdc 	bl	8003cf8 <HAL_RCC_GetHCLKFreq>
 8003d40:	4602      	mov	r2, r0
 8003d42:	4b05      	ldr	r3, [pc, #20]	@ (8003d58 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003d44:	689b      	ldr	r3, [r3, #8]
 8003d46:	0b5b      	lsrs	r3, r3, #13
 8003d48:	f003 0307 	and.w	r3, r3, #7
 8003d4c:	4903      	ldr	r1, [pc, #12]	@ (8003d5c <HAL_RCC_GetPCLK2Freq+0x24>)
 8003d4e:	5ccb      	ldrb	r3, [r1, r3]
 8003d50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003d54:	4618      	mov	r0, r3
 8003d56:	bd80      	pop	{r7, pc}
 8003d58:	40023800 	.word	0x40023800
 8003d5c:	08009f78 	.word	0x08009f78

08003d60 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003d60:	b480      	push	{r7}
 8003d62:	b083      	sub	sp, #12
 8003d64:	af00      	add	r7, sp, #0
 8003d66:	6078      	str	r0, [r7, #4]
 8003d68:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	220f      	movs	r2, #15
 8003d6e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003d70:	4b12      	ldr	r3, [pc, #72]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d72:	689b      	ldr	r3, [r3, #8]
 8003d74:	f003 0203 	and.w	r2, r3, #3
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003d7c:	4b0f      	ldr	r3, [pc, #60]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d7e:	689b      	ldr	r3, [r3, #8]
 8003d80:	f003 02f0 	and.w	r2, r3, #240	@ 0xf0
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003d88:	4b0c      	ldr	r3, [pc, #48]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d8a:	689b      	ldr	r3, [r3, #8]
 8003d8c:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003d94:	4b09      	ldr	r3, [pc, #36]	@ (8003dbc <HAL_RCC_GetClockConfig+0x5c>)
 8003d96:	689b      	ldr	r3, [r3, #8]
 8003d98:	08db      	lsrs	r3, r3, #3
 8003d9a:	f403 52e0 	and.w	r2, r3, #7168	@ 0x1c00
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003da2:	4b07      	ldr	r3, [pc, #28]	@ (8003dc0 <HAL_RCC_GetClockConfig+0x60>)
 8003da4:	681b      	ldr	r3, [r3, #0]
 8003da6:	f003 0207 	and.w	r2, r3, #7
 8003daa:	683b      	ldr	r3, [r7, #0]
 8003dac:	601a      	str	r2, [r3, #0]
}
 8003dae:	bf00      	nop
 8003db0:	370c      	adds	r7, #12
 8003db2:	46bd      	mov	sp, r7
 8003db4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003db8:	4770      	bx	lr
 8003dba:	bf00      	nop
 8003dbc:	40023800 	.word	0x40023800
 8003dc0:	40023c00 	.word	0x40023c00

08003dc4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003dc4:	b580      	push	{r7, lr}
 8003dc6:	b082      	sub	sp, #8
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	2b00      	cmp	r3, #0
 8003dd0:	d101      	bne.n	8003dd6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003dd2:	2301      	movs	r3, #1
 8003dd4:	e07b      	b.n	8003ece <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dda:	2b00      	cmp	r3, #0
 8003ddc:	d108      	bne.n	8003df0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	685b      	ldr	r3, [r3, #4]
 8003de2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003de6:	d009      	beq.n	8003dfc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003de8:	687b      	ldr	r3, [r7, #4]
 8003dea:	2200      	movs	r2, #0
 8003dec:	61da      	str	r2, [r3, #28]
 8003dee:	e005      	b.n	8003dfc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	2200      	movs	r2, #0
 8003df4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	2200      	movs	r2, #0
 8003dfa:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2200      	movs	r2, #0
 8003e00:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d106      	bne.n	8003e1c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003e16:	6878      	ldr	r0, [r7, #4]
 8003e18:	f7fd fec4 	bl	8001ba4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2202      	movs	r2, #2
 8003e20:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	681a      	ldr	r2, [r3, #0]
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003e32:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	685b      	ldr	r3, [r3, #4]
 8003e38:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	689b      	ldr	r3, [r3, #8]
 8003e40:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003e44:	431a      	orrs	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	68db      	ldr	r3, [r3, #12]
 8003e4a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003e4e:	431a      	orrs	r2, r3
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	691b      	ldr	r3, [r3, #16]
 8003e54:	f003 0302 	and.w	r3, r3, #2
 8003e58:	431a      	orrs	r2, r3
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	695b      	ldr	r3, [r3, #20]
 8003e5e:	f003 0301 	and.w	r3, r3, #1
 8003e62:	431a      	orrs	r2, r3
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	699b      	ldr	r3, [r3, #24]
 8003e68:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003e6c:	431a      	orrs	r2, r3
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	69db      	ldr	r3, [r3, #28]
 8003e72:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003e76:	431a      	orrs	r2, r3
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	6a1b      	ldr	r3, [r3, #32]
 8003e7c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003e80:	ea42 0103 	orr.w	r1, r2, r3
 8003e84:	687b      	ldr	r3, [r7, #4]
 8003e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003e88:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	430a      	orrs	r2, r1
 8003e92:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	699b      	ldr	r3, [r3, #24]
 8003e98:	0c1b      	lsrs	r3, r3, #16
 8003e9a:	f003 0104 	and.w	r1, r3, #4
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea2:	f003 0210 	and.w	r2, r3, #16
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	430a      	orrs	r2, r1
 8003eac:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	681b      	ldr	r3, [r3, #0]
 8003eb2:	69da      	ldr	r2, [r3, #28]
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ebc:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	2200      	movs	r2, #0
 8003ec2:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	2201      	movs	r2, #1
 8003ec8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3708      	adds	r7, #8
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}
	...

08003ed8 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 8003ed8:	b580      	push	{r7, lr}
 8003eda:	b088      	sub	sp, #32
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 8003ee0:	687b      	ldr	r3, [r7, #4]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	685b      	ldr	r3, [r3, #4]
 8003ee6:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	689b      	ldr	r3, [r3, #8]
 8003eee:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003ef0:	69bb      	ldr	r3, [r7, #24]
 8003ef2:	099b      	lsrs	r3, r3, #6
 8003ef4:	f003 0301 	and.w	r3, r3, #1
 8003ef8:	2b00      	cmp	r3, #0
 8003efa:	d10f      	bne.n	8003f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003efc:	69bb      	ldr	r3, [r7, #24]
 8003efe:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 8003f02:	2b00      	cmp	r3, #0
 8003f04:	d00a      	beq.n	8003f1c <HAL_SPI_IRQHandler+0x44>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 8003f06:	69fb      	ldr	r3, [r7, #28]
 8003f08:	099b      	lsrs	r3, r3, #6
 8003f0a:	f003 0301 	and.w	r3, r3, #1
 8003f0e:	2b00      	cmp	r3, #0
 8003f10:	d004      	beq.n	8003f1c <HAL_SPI_IRQHandler+0x44>
  {
    hspi->RxISR(hspi);
 8003f12:	687b      	ldr	r3, [r7, #4]
 8003f14:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	4798      	blx	r3
    return;
 8003f1a:	e0d7      	b.n	80040cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 8003f1c:	69bb      	ldr	r3, [r7, #24]
 8003f1e:	085b      	lsrs	r3, r3, #1
 8003f20:	f003 0301 	and.w	r3, r3, #1
 8003f24:	2b00      	cmp	r3, #0
 8003f26:	d00a      	beq.n	8003f3e <HAL_SPI_IRQHandler+0x66>
 8003f28:	69fb      	ldr	r3, [r7, #28]
 8003f2a:	09db      	lsrs	r3, r3, #7
 8003f2c:	f003 0301 	and.w	r3, r3, #1
 8003f30:	2b00      	cmp	r3, #0
 8003f32:	d004      	beq.n	8003f3e <HAL_SPI_IRQHandler+0x66>
  {
    hspi->TxISR(hspi);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8003f38:	6878      	ldr	r0, [r7, #4]
 8003f3a:	4798      	blx	r3
    return;
 8003f3c:	e0c6      	b.n	80040cc <HAL_SPI_IRQHandler+0x1f4>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f3e:	69bb      	ldr	r3, [r7, #24]
 8003f40:	095b      	lsrs	r3, r3, #5
 8003f42:	f003 0301 	and.w	r3, r3, #1
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d10c      	bne.n	8003f64 <HAL_SPI_IRQHandler+0x8c>
 8003f4a:	69bb      	ldr	r3, [r7, #24]
 8003f4c:	099b      	lsrs	r3, r3, #6
 8003f4e:	f003 0301 	and.w	r3, r3, #1
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d106      	bne.n	8003f64 <HAL_SPI_IRQHandler+0x8c>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 8003f56:	69bb      	ldr	r3, [r7, #24]
 8003f58:	0a1b      	lsrs	r3, r3, #8
 8003f5a:	f003 0301 	and.w	r3, r3, #1
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	f000 80b4 	beq.w	80040cc <HAL_SPI_IRQHandler+0x1f4>
 8003f64:	69fb      	ldr	r3, [r7, #28]
 8003f66:	095b      	lsrs	r3, r3, #5
 8003f68:	f003 0301 	and.w	r3, r3, #1
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	f000 80ad 	beq.w	80040cc <HAL_SPI_IRQHandler+0x1f4>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 8003f72:	69bb      	ldr	r3, [r7, #24]
 8003f74:	099b      	lsrs	r3, r3, #6
 8003f76:	f003 0301 	and.w	r3, r3, #1
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d023      	beq.n	8003fc6 <HAL_SPI_IRQHandler+0xee>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003f84:	b2db      	uxtb	r3, r3
 8003f86:	2b03      	cmp	r3, #3
 8003f88:	d011      	beq.n	8003fae <HAL_SPI_IRQHandler+0xd6>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003f8e:	f043 0204 	orr.w	r2, r3, #4
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	655a      	str	r2, [r3, #84]	@ 0x54
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003f96:	2300      	movs	r3, #0
 8003f98:	617b      	str	r3, [r7, #20]
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	68db      	ldr	r3, [r3, #12]
 8003fa0:	617b      	str	r3, [r7, #20]
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	689b      	ldr	r3, [r3, #8]
 8003fa8:	617b      	str	r3, [r7, #20]
 8003faa:	697b      	ldr	r3, [r7, #20]
 8003fac:	e00b      	b.n	8003fc6 <HAL_SPI_IRQHandler+0xee>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003fae:	2300      	movs	r3, #0
 8003fb0:	613b      	str	r3, [r7, #16]
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	68db      	ldr	r3, [r3, #12]
 8003fb8:	613b      	str	r3, [r7, #16]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	613b      	str	r3, [r7, #16]
 8003fc2:	693b      	ldr	r3, [r7, #16]
        return;
 8003fc4:	e082      	b.n	80040cc <HAL_SPI_IRQHandler+0x1f4>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 8003fc6:	69bb      	ldr	r3, [r7, #24]
 8003fc8:	095b      	lsrs	r3, r3, #5
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d014      	beq.n	8003ffc <HAL_SPI_IRQHandler+0x124>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003fd6:	f043 0201 	orr.w	r2, r3, #1
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 8003fde:	2300      	movs	r3, #0
 8003fe0:	60fb      	str	r3, [r7, #12]
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	689b      	ldr	r3, [r3, #8]
 8003fe8:	60fb      	str	r3, [r7, #12]
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	681a      	ldr	r2, [r3, #0]
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003ff8:	601a      	str	r2, [r3, #0]
 8003ffa:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 8003ffc:	69bb      	ldr	r3, [r7, #24]
 8003ffe:	0a1b      	lsrs	r3, r3, #8
 8004000:	f003 0301 	and.w	r3, r3, #1
 8004004:	2b00      	cmp	r3, #0
 8004006:	d00c      	beq.n	8004022 <HAL_SPI_IRQHandler+0x14a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800400c:	f043 0208 	orr.w	r2, r3, #8
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	655a      	str	r2, [r3, #84]	@ 0x54
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 8004014:	2300      	movs	r3, #0
 8004016:	60bb      	str	r3, [r7, #8]
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	689b      	ldr	r3, [r3, #8]
 800401e:	60bb      	str	r3, [r7, #8]
 8004020:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8004026:	2b00      	cmp	r3, #0
 8004028:	d04f      	beq.n	80040ca <HAL_SPI_IRQHandler+0x1f2>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	685a      	ldr	r2, [r3, #4]
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 8004038:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2201      	movs	r2, #1
 800403e:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 8004042:	69fb      	ldr	r3, [r7, #28]
 8004044:	f003 0302 	and.w	r3, r3, #2
 8004048:	2b00      	cmp	r3, #0
 800404a:	d104      	bne.n	8004056 <HAL_SPI_IRQHandler+0x17e>
 800404c:	69fb      	ldr	r3, [r7, #28]
 800404e:	f003 0301 	and.w	r3, r3, #1
 8004052:	2b00      	cmp	r3, #0
 8004054:	d034      	beq.n	80040c0 <HAL_SPI_IRQHandler+0x1e8>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	685a      	ldr	r2, [r3, #4]
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f022 0203 	bic.w	r2, r2, #3
 8004064:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800406a:	2b00      	cmp	r3, #0
 800406c:	d011      	beq.n	8004092 <HAL_SPI_IRQHandler+0x1ba>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8004072:	4a18      	ldr	r2, [pc, #96]	@ (80040d4 <HAL_SPI_IRQHandler+0x1fc>)
 8004074:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800407a:	4618      	mov	r0, r3
 800407c:	f7ff f81a 	bl	80030b4 <HAL_DMA_Abort_IT>
 8004080:	4603      	mov	r3, r0
 8004082:	2b00      	cmp	r3, #0
 8004084:	d005      	beq.n	8004092 <HAL_SPI_IRQHandler+0x1ba>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800408a:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	655a      	str	r2, [r3, #84]	@ 0x54
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8004096:	2b00      	cmp	r3, #0
 8004098:	d016      	beq.n	80040c8 <HAL_SPI_IRQHandler+0x1f0>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800409e:	4a0d      	ldr	r2, [pc, #52]	@ (80040d4 <HAL_SPI_IRQHandler+0x1fc>)
 80040a0:	651a      	str	r2, [r3, #80]	@ 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80040a6:	4618      	mov	r0, r3
 80040a8:	f7ff f804 	bl	80030b4 <HAL_DMA_Abort_IT>
 80040ac:	4603      	mov	r3, r0
 80040ae:	2b00      	cmp	r3, #0
 80040b0:	d00a      	beq.n	80040c8 <HAL_SPI_IRQHandler+0x1f0>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80040b6:	f043 0240 	orr.w	r2, r3, #64	@ 0x40
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	655a      	str	r2, [r3, #84]	@ 0x54
        if (hspi->hdmatx != NULL)
 80040be:	e003      	b.n	80040c8 <HAL_SPI_IRQHandler+0x1f0>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 80040c0:	6878      	ldr	r0, [r7, #4]
 80040c2:	f000 f809 	bl	80040d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 80040c6:	e000      	b.n	80040ca <HAL_SPI_IRQHandler+0x1f2>
        if (hspi->hdmatx != NULL)
 80040c8:	bf00      	nop
    return;
 80040ca:	bf00      	nop
  }
}
 80040cc:	3720      	adds	r7, #32
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bd80      	pop	{r7, pc}
 80040d2:	bf00      	nop
 80040d4:	080040ed 	.word	0x080040ed

080040d8 <HAL_SPI_ErrorCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_ErrorCallback(SPI_HandleTypeDef *hspi)
{
 80040d8:	b480      	push	{r7}
 80040da:	b083      	sub	sp, #12
 80040dc:	af00      	add	r7, sp, #0
 80040de:	6078      	str	r0, [r7, #4]
            the HAL_SPI_ErrorCallback should be implemented in the user file
   */
  /* NOTE : The ErrorCode parameter in the hspi handle is updated by the SPI processes
            and user can use HAL_SPI_GetError() API to check the latest error occurred
   */
}
 80040e0:	bf00      	nop
 80040e2:	370c      	adds	r7, #12
 80040e4:	46bd      	mov	sp, r7
 80040e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80040ea:	4770      	bx	lr

080040ec <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80040ec:	b580      	push	{r7, lr}
 80040ee:	b084      	sub	sp, #16
 80040f0:	af00      	add	r7, sp, #0
 80040f2:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80040f8:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2200      	movs	r2, #0
 80040fe:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->TxXferCount = 0U;
 8004100:	68fb      	ldr	r3, [r7, #12]
 8004102:	2200      	movs	r2, #0
 8004104:	86da      	strh	r2, [r3, #54]	@ 0x36

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 8004106:	68f8      	ldr	r0, [r7, #12]
 8004108:	f7ff ffe6 	bl	80040d8 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800410c:	bf00      	nop
 800410e:	3710      	adds	r7, #16
 8004110:	46bd      	mov	sp, r7
 8004112:	bd80      	pop	{r7, pc}

08004114 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8004114:	b580      	push	{r7, lr}
 8004116:	b082      	sub	sp, #8
 8004118:	af00      	add	r7, sp, #0
 800411a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	2b00      	cmp	r3, #0
 8004120:	d101      	bne.n	8004126 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8004122:	2301      	movs	r3, #1
 8004124:	e041      	b.n	80041aa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800412c:	b2db      	uxtb	r3, r3
 800412e:	2b00      	cmp	r3, #0
 8004130:	d106      	bne.n	8004140 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800413a:	6878      	ldr	r0, [r7, #4]
 800413c:	f000 f839 	bl	80041b2 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004140:	687b      	ldr	r3, [r7, #4]
 8004142:	2202      	movs	r2, #2
 8004144:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	3304      	adds	r3, #4
 8004150:	4619      	mov	r1, r3
 8004152:	4610      	mov	r0, r2
 8004154:	f000 f9c0 	bl	80044d8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8004158:	687b      	ldr	r3, [r7, #4]
 800415a:	2201      	movs	r2, #1
 800415c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	2201      	movs	r2, #1
 8004164:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2201      	movs	r2, #1
 800416c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	2201      	movs	r2, #1
 8004174:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8004178:	687b      	ldr	r3, [r7, #4]
 800417a:	2201      	movs	r2, #1
 800417c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	2201      	movs	r2, #1
 8004184:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	2201      	movs	r2, #1
 800418c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	2201      	movs	r2, #1
 8004194:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	2201      	movs	r2, #1
 800419c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	2201      	movs	r2, #1
 80041a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80041a8:	2300      	movs	r3, #0
}
 80041aa:	4618      	mov	r0, r3
 80041ac:	3708      	adds	r7, #8
 80041ae:	46bd      	mov	sp, r7
 80041b0:	bd80      	pop	{r7, pc}

080041b2 <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 80041b2:	b480      	push	{r7}
 80041b4:	b083      	sub	sp, #12
 80041b6:	af00      	add	r7, sp, #0
 80041b8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 80041ba:	bf00      	nop
 80041bc:	370c      	adds	r7, #12
 80041be:	46bd      	mov	sp, r7
 80041c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c4:	4770      	bx	lr
	...

080041c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80041c8:	b480      	push	{r7}
 80041ca:	b085      	sub	sp, #20
 80041cc:	af00      	add	r7, sp, #0
 80041ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80041d6:	b2db      	uxtb	r3, r3
 80041d8:	2b01      	cmp	r3, #1
 80041da:	d001      	beq.n	80041e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80041dc:	2301      	movs	r3, #1
 80041de:	e04e      	b.n	800427e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2202      	movs	r2, #2
 80041e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	68da      	ldr	r2, [r3, #12]
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f042 0201 	orr.w	r2, r2, #1
 80041f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	4a23      	ldr	r2, [pc, #140]	@ (800428c <HAL_TIM_Base_Start_IT+0xc4>)
 80041fe:	4293      	cmp	r3, r2
 8004200:	d022      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	681b      	ldr	r3, [r3, #0]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800420a:	d01d      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	4a1f      	ldr	r2, [pc, #124]	@ (8004290 <HAL_TIM_Base_Start_IT+0xc8>)
 8004212:	4293      	cmp	r3, r2
 8004214:	d018      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	4a1e      	ldr	r2, [pc, #120]	@ (8004294 <HAL_TIM_Base_Start_IT+0xcc>)
 800421c:	4293      	cmp	r3, r2
 800421e:	d013      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	4a1c      	ldr	r2, [pc, #112]	@ (8004298 <HAL_TIM_Base_Start_IT+0xd0>)
 8004226:	4293      	cmp	r3, r2
 8004228:	d00e      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	4a1b      	ldr	r2, [pc, #108]	@ (800429c <HAL_TIM_Base_Start_IT+0xd4>)
 8004230:	4293      	cmp	r3, r2
 8004232:	d009      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 8004234:	687b      	ldr	r3, [r7, #4]
 8004236:	681b      	ldr	r3, [r3, #0]
 8004238:	4a19      	ldr	r2, [pc, #100]	@ (80042a0 <HAL_TIM_Base_Start_IT+0xd8>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d004      	beq.n	8004248 <HAL_TIM_Base_Start_IT+0x80>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	4a18      	ldr	r2, [pc, #96]	@ (80042a4 <HAL_TIM_Base_Start_IT+0xdc>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d111      	bne.n	800426c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	689b      	ldr	r3, [r3, #8]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8004254:	68fb      	ldr	r3, [r7, #12]
 8004256:	2b06      	cmp	r3, #6
 8004258:	d010      	beq.n	800427c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	681a      	ldr	r2, [r3, #0]
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f042 0201 	orr.w	r2, r2, #1
 8004268:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800426a:	e007      	b.n	800427c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	681a      	ldr	r2, [r3, #0]
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	f042 0201 	orr.w	r2, r2, #1
 800427a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800427c:	2300      	movs	r3, #0
}
 800427e:	4618      	mov	r0, r3
 8004280:	3714      	adds	r7, #20
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr
 800428a:	bf00      	nop
 800428c:	40010000 	.word	0x40010000
 8004290:	40000400 	.word	0x40000400
 8004294:	40000800 	.word	0x40000800
 8004298:	40000c00 	.word	0x40000c00
 800429c:	40010400 	.word	0x40010400
 80042a0:	40014000 	.word	0x40014000
 80042a4:	40001800 	.word	0x40001800

080042a8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	68db      	ldr	r3, [r3, #12]
 80042b6:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	691b      	ldr	r3, [r3, #16]
 80042be:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 80042c0:	68bb      	ldr	r3, [r7, #8]
 80042c2:	f003 0302 	and.w	r3, r3, #2
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d020      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 80042ca:	68fb      	ldr	r3, [r7, #12]
 80042cc:	f003 0302 	and.w	r3, r3, #2
 80042d0:	2b00      	cmp	r3, #0
 80042d2:	d01b      	beq.n	800430c <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	f06f 0202 	mvn.w	r2, #2
 80042dc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	2201      	movs	r2, #1
 80042e2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	681b      	ldr	r3, [r3, #0]
 80042e8:	699b      	ldr	r3, [r3, #24]
 80042ea:	f003 0303 	and.w	r3, r3, #3
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d003      	beq.n	80042fa <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80042f2:	6878      	ldr	r0, [r7, #4]
 80042f4:	f000 f8d2 	bl	800449c <HAL_TIM_IC_CaptureCallback>
 80042f8:	e005      	b.n	8004306 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80042fa:	6878      	ldr	r0, [r7, #4]
 80042fc:	f000 f8c4 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004300:	6878      	ldr	r0, [r7, #4]
 8004302:	f000 f8d5 	bl	80044b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	2200      	movs	r2, #0
 800430a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f003 0304 	and.w	r3, r3, #4
 8004312:	2b00      	cmp	r3, #0
 8004314:	d020      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	f003 0304 	and.w	r3, r3, #4
 800431c:	2b00      	cmp	r3, #0
 800431e:	d01b      	beq.n	8004358 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f06f 0204 	mvn.w	r2, #4
 8004328:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2202      	movs	r2, #2
 800432e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	699b      	ldr	r3, [r3, #24]
 8004336:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800433a:	2b00      	cmp	r3, #0
 800433c:	d003      	beq.n	8004346 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	f000 f8ac 	bl	800449c <HAL_TIM_IC_CaptureCallback>
 8004344:	e005      	b.n	8004352 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f89e 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800434c:	6878      	ldr	r0, [r7, #4]
 800434e:	f000 f8af 	bl	80044b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2200      	movs	r2, #0
 8004356:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 8004358:	68bb      	ldr	r3, [r7, #8]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d020      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8004362:	68fb      	ldr	r3, [r7, #12]
 8004364:	f003 0308 	and.w	r3, r3, #8
 8004368:	2b00      	cmp	r3, #0
 800436a:	d01b      	beq.n	80043a4 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f06f 0208 	mvn.w	r2, #8
 8004374:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	2204      	movs	r2, #4
 800437a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	69db      	ldr	r3, [r3, #28]
 8004382:	f003 0303 	and.w	r3, r3, #3
 8004386:	2b00      	cmp	r3, #0
 8004388:	d003      	beq.n	8004392 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800438a:	6878      	ldr	r0, [r7, #4]
 800438c:	f000 f886 	bl	800449c <HAL_TIM_IC_CaptureCallback>
 8004390:	e005      	b.n	800439e <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004392:	6878      	ldr	r0, [r7, #4]
 8004394:	f000 f878 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	f000 f889 	bl	80044b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	2200      	movs	r2, #0
 80043a2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 80043a4:	68bb      	ldr	r3, [r7, #8]
 80043a6:	f003 0310 	and.w	r3, r3, #16
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d020      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	f003 0310 	and.w	r3, r3, #16
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d01b      	beq.n	80043f0 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	f06f 0210 	mvn.w	r2, #16
 80043c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	2208      	movs	r2, #8
 80043c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	69db      	ldr	r3, [r3, #28]
 80043ce:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d003      	beq.n	80043de <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80043d6:	6878      	ldr	r0, [r7, #4]
 80043d8:	f000 f860 	bl	800449c <HAL_TIM_IC_CaptureCallback>
 80043dc:	e005      	b.n	80043ea <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80043de:	6878      	ldr	r0, [r7, #4]
 80043e0:	f000 f852 	bl	8004488 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80043e4:	6878      	ldr	r0, [r7, #4]
 80043e6:	f000 f863 	bl	80044b0 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	2200      	movs	r2, #0
 80043ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80043f0:	68bb      	ldr	r3, [r7, #8]
 80043f2:	f003 0301 	and.w	r3, r3, #1
 80043f6:	2b00      	cmp	r3, #0
 80043f8:	d00c      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	f003 0301 	and.w	r3, r3, #1
 8004400:	2b00      	cmp	r3, #0
 8004402:	d007      	beq.n	8004414 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f06f 0201 	mvn.w	r2, #1
 800440c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f7fd fa84 	bl	800191c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 8004414:	68bb      	ldr	r3, [r7, #8]
 8004416:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800441a:	2b00      	cmp	r3, #0
 800441c:	d00c      	beq.n	8004438 <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800441e:	68fb      	ldr	r3, [r7, #12]
 8004420:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004424:	2b00      	cmp	r3, #0
 8004426:	d007      	beq.n	8004438 <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004432:	6878      	ldr	r0, [r7, #4]
 8004434:	f000 f900 	bl	8004638 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 8004438:	68bb      	ldr	r3, [r7, #8]
 800443a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800443e:	2b00      	cmp	r3, #0
 8004440:	d00c      	beq.n	800445c <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8004442:	68fb      	ldr	r3, [r7, #12]
 8004444:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004454:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004456:	6878      	ldr	r0, [r7, #4]
 8004458:	f000 f834 	bl	80044c4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800445c:	68bb      	ldr	r3, [r7, #8]
 800445e:	f003 0320 	and.w	r3, r3, #32
 8004462:	2b00      	cmp	r3, #0
 8004464:	d00c      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	f003 0320 	and.w	r3, r3, #32
 800446c:	2b00      	cmp	r3, #0
 800446e:	d007      	beq.n	8004480 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	f06f 0220 	mvn.w	r2, #32
 8004478:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800447a:	6878      	ldr	r0, [r7, #4]
 800447c:	f000 f8d2 	bl	8004624 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004480:	bf00      	nop
 8004482:	3710      	adds	r7, #16
 8004484:	46bd      	mov	sp, r7
 8004486:	bd80      	pop	{r7, pc}

08004488 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004488:	b480      	push	{r7}
 800448a:	b083      	sub	sp, #12
 800448c:	af00      	add	r7, sp, #0
 800448e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004490:	bf00      	nop
 8004492:	370c      	adds	r7, #12
 8004494:	46bd      	mov	sp, r7
 8004496:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449a:	4770      	bx	lr

0800449c <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800449c:	b480      	push	{r7}
 800449e:	b083      	sub	sp, #12
 80044a0:	af00      	add	r7, sp, #0
 80044a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80044a4:	bf00      	nop
 80044a6:	370c      	adds	r7, #12
 80044a8:	46bd      	mov	sp, r7
 80044aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ae:	4770      	bx	lr

080044b0 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b083      	sub	sp, #12
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80044b8:	bf00      	nop
 80044ba:	370c      	adds	r7, #12
 80044bc:	46bd      	mov	sp, r7
 80044be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044c2:	4770      	bx	lr

080044c4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80044c4:	b480      	push	{r7}
 80044c6:	b083      	sub	sp, #12
 80044c8:	af00      	add	r7, sp, #0
 80044ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044cc:	bf00      	nop
 80044ce:	370c      	adds	r7, #12
 80044d0:	46bd      	mov	sp, r7
 80044d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044d6:	4770      	bx	lr

080044d8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044d8:	b480      	push	{r7}
 80044da:	b085      	sub	sp, #20
 80044dc:	af00      	add	r7, sp, #0
 80044de:	6078      	str	r0, [r7, #4]
 80044e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a43      	ldr	r2, [pc, #268]	@ (80045f8 <TIM_Base_SetConfig+0x120>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d013      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f6:	d00f      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 80044f8:	687b      	ldr	r3, [r7, #4]
 80044fa:	4a40      	ldr	r2, [pc, #256]	@ (80045fc <TIM_Base_SetConfig+0x124>)
 80044fc:	4293      	cmp	r3, r2
 80044fe:	d00b      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	4a3f      	ldr	r2, [pc, #252]	@ (8004600 <TIM_Base_SetConfig+0x128>)
 8004504:	4293      	cmp	r3, r2
 8004506:	d007      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a3e      	ldr	r2, [pc, #248]	@ (8004604 <TIM_Base_SetConfig+0x12c>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d003      	beq.n	8004518 <TIM_Base_SetConfig+0x40>
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	4a3d      	ldr	r2, [pc, #244]	@ (8004608 <TIM_Base_SetConfig+0x130>)
 8004514:	4293      	cmp	r3, r2
 8004516:	d108      	bne.n	800452a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800451e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	685b      	ldr	r3, [r3, #4]
 8004524:	68fa      	ldr	r2, [r7, #12]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a32      	ldr	r2, [pc, #200]	@ (80045f8 <TIM_Base_SetConfig+0x120>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d02b      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004538:	d027      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a2f      	ldr	r2, [pc, #188]	@ (80045fc <TIM_Base_SetConfig+0x124>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d023      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a2e      	ldr	r2, [pc, #184]	@ (8004600 <TIM_Base_SetConfig+0x128>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d01f      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a2d      	ldr	r2, [pc, #180]	@ (8004604 <TIM_Base_SetConfig+0x12c>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d01b      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a2c      	ldr	r2, [pc, #176]	@ (8004608 <TIM_Base_SetConfig+0x130>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d017      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a2b      	ldr	r2, [pc, #172]	@ (800460c <TIM_Base_SetConfig+0x134>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d013      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	4a2a      	ldr	r2, [pc, #168]	@ (8004610 <TIM_Base_SetConfig+0x138>)
 8004566:	4293      	cmp	r3, r2
 8004568:	d00f      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	4a29      	ldr	r2, [pc, #164]	@ (8004614 <TIM_Base_SetConfig+0x13c>)
 800456e:	4293      	cmp	r3, r2
 8004570:	d00b      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	4a28      	ldr	r2, [pc, #160]	@ (8004618 <TIM_Base_SetConfig+0x140>)
 8004576:	4293      	cmp	r3, r2
 8004578:	d007      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	4a27      	ldr	r2, [pc, #156]	@ (800461c <TIM_Base_SetConfig+0x144>)
 800457e:	4293      	cmp	r3, r2
 8004580:	d003      	beq.n	800458a <TIM_Base_SetConfig+0xb2>
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a26      	ldr	r2, [pc, #152]	@ (8004620 <TIM_Base_SetConfig+0x148>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d108      	bne.n	800459c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800458a:	68fb      	ldr	r3, [r7, #12]
 800458c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004590:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004592:	683b      	ldr	r3, [r7, #0]
 8004594:	68db      	ldr	r3, [r3, #12]
 8004596:	68fa      	ldr	r2, [r7, #12]
 8004598:	4313      	orrs	r3, r2
 800459a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80045a2:	683b      	ldr	r3, [r7, #0]
 80045a4:	695b      	ldr	r3, [r3, #20]
 80045a6:	4313      	orrs	r3, r2
 80045a8:	60fb      	str	r3, [r7, #12]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	689a      	ldr	r2, [r3, #8]
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80045b2:	683b      	ldr	r3, [r7, #0]
 80045b4:	681a      	ldr	r2, [r3, #0]
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	4a0e      	ldr	r2, [pc, #56]	@ (80045f8 <TIM_Base_SetConfig+0x120>)
 80045be:	4293      	cmp	r3, r2
 80045c0:	d003      	beq.n	80045ca <TIM_Base_SetConfig+0xf2>
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	4a10      	ldr	r2, [pc, #64]	@ (8004608 <TIM_Base_SetConfig+0x130>)
 80045c6:	4293      	cmp	r3, r2
 80045c8:	d103      	bne.n	80045d2 <TIM_Base_SetConfig+0xfa>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	691a      	ldr	r2, [r3, #16]
 80045ce:	687b      	ldr	r3, [r7, #4]
 80045d0:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Disable Update Event (UEV) with Update Generation (UG)
     by changing Update Request Source (URS) to avoid Update flag (UIF) */
  SET_BIT(TIMx->CR1, TIM_CR1_URS);
 80045d2:	687b      	ldr	r3, [r7, #4]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	f043 0204 	orr.w	r2, r3, #4
 80045da:	687b      	ldr	r3, [r7, #4]
 80045dc:	601a      	str	r2, [r3, #0]

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	2201      	movs	r2, #1
 80045e2:	615a      	str	r2, [r3, #20]

  TIMx->CR1 = tmpcr1;
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	68fa      	ldr	r2, [r7, #12]
 80045e8:	601a      	str	r2, [r3, #0]
}
 80045ea:	bf00      	nop
 80045ec:	3714      	adds	r7, #20
 80045ee:	46bd      	mov	sp, r7
 80045f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f4:	4770      	bx	lr
 80045f6:	bf00      	nop
 80045f8:	40010000 	.word	0x40010000
 80045fc:	40000400 	.word	0x40000400
 8004600:	40000800 	.word	0x40000800
 8004604:	40000c00 	.word	0x40000c00
 8004608:	40010400 	.word	0x40010400
 800460c:	40014000 	.word	0x40014000
 8004610:	40014400 	.word	0x40014400
 8004614:	40014800 	.word	0x40014800
 8004618:	40001800 	.word	0x40001800
 800461c:	40001c00 	.word	0x40001c00
 8004620:	40002000 	.word	0x40002000

08004624 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004624:	b480      	push	{r7}
 8004626:	b083      	sub	sp, #12
 8004628:	af00      	add	r7, sp, #0
 800462a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800462c:	bf00      	nop
 800462e:	370c      	adds	r7, #12
 8004630:	46bd      	mov	sp, r7
 8004632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004636:	4770      	bx	lr

08004638 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004640:	bf00      	nop
 8004642:	370c      	adds	r7, #12
 8004644:	46bd      	mov	sp, r7
 8004646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800464a:	4770      	bx	lr

0800464c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	2b00      	cmp	r3, #0
 8004658:	d101      	bne.n	800465e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800465a:	2301      	movs	r3, #1
 800465c:	e042      	b.n	80046e4 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004664:	b2db      	uxtb	r3, r3
 8004666:	2b00      	cmp	r3, #0
 8004668:	d106      	bne.n	8004678 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	2200      	movs	r2, #0
 800466e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004672:	6878      	ldr	r0, [r7, #4]
 8004674:	f7fd fae6 	bl	8001c44 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	2224      	movs	r2, #36	@ 0x24
 800467c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	68da      	ldr	r2, [r3, #12]
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	681b      	ldr	r3, [r3, #0]
 800468a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800468e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8004690:	6878      	ldr	r0, [r7, #4]
 8004692:	f000 fd7f 	bl	8005194 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	681b      	ldr	r3, [r3, #0]
 800469a:	691a      	ldr	r2, [r3, #16]
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80046a4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80046a6:	687b      	ldr	r3, [r7, #4]
 80046a8:	681b      	ldr	r3, [r3, #0]
 80046aa:	695a      	ldr	r2, [r3, #20]
 80046ac:	687b      	ldr	r3, [r7, #4]
 80046ae:	681b      	ldr	r3, [r3, #0]
 80046b0:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80046b4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	68da      	ldr	r2, [r3, #12]
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	681b      	ldr	r3, [r3, #0]
 80046c0:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80046c4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80046c6:	687b      	ldr	r3, [r7, #4]
 80046c8:	2200      	movs	r2, #0
 80046ca:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	2220      	movs	r2, #32
 80046d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	2220      	movs	r2, #32
 80046d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	2200      	movs	r2, #0
 80046e0:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80046e2:	2300      	movs	r3, #0
}
 80046e4:	4618      	mov	r0, r3
 80046e6:	3708      	adds	r7, #8
 80046e8:	46bd      	mov	sp, r7
 80046ea:	bd80      	pop	{r7, pc}

080046ec <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80046ec:	b580      	push	{r7, lr}
 80046ee:	b08a      	sub	sp, #40	@ 0x28
 80046f0:	af02      	add	r7, sp, #8
 80046f2:	60f8      	str	r0, [r7, #12]
 80046f4:	60b9      	str	r1, [r7, #8]
 80046f6:	603b      	str	r3, [r7, #0]
 80046f8:	4613      	mov	r3, r2
 80046fa:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80046fc:	2300      	movs	r3, #0
 80046fe:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004706:	b2db      	uxtb	r3, r3
 8004708:	2b20      	cmp	r3, #32
 800470a:	d175      	bne.n	80047f8 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b00      	cmp	r3, #0
 8004710:	d002      	beq.n	8004718 <HAL_UART_Transmit+0x2c>
 8004712:	88fb      	ldrh	r3, [r7, #6]
 8004714:	2b00      	cmp	r3, #0
 8004716:	d101      	bne.n	800471c <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004718:	2301      	movs	r3, #1
 800471a:	e06e      	b.n	80047fa <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2221      	movs	r2, #33	@ 0x21
 8004726:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800472a:	f7fd fcf3 	bl	8002114 <HAL_GetTick>
 800472e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004730:	68fb      	ldr	r3, [r7, #12]
 8004732:	88fa      	ldrh	r2, [r7, #6]
 8004734:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	88fa      	ldrh	r2, [r7, #6]
 800473a:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	689b      	ldr	r3, [r3, #8]
 8004740:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004744:	d108      	bne.n	8004758 <HAL_UART_Transmit+0x6c>
 8004746:	68fb      	ldr	r3, [r7, #12]
 8004748:	691b      	ldr	r3, [r3, #16]
 800474a:	2b00      	cmp	r3, #0
 800474c:	d104      	bne.n	8004758 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 800474e:	2300      	movs	r3, #0
 8004750:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8004752:	68bb      	ldr	r3, [r7, #8]
 8004754:	61bb      	str	r3, [r7, #24]
 8004756:	e003      	b.n	8004760 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004758:	68bb      	ldr	r3, [r7, #8]
 800475a:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 800475c:	2300      	movs	r3, #0
 800475e:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004760:	e02e      	b.n	80047c0 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	2200      	movs	r2, #0
 800476a:	2180      	movs	r1, #128	@ 0x80
 800476c:	68f8      	ldr	r0, [r7, #12]
 800476e:	f000 fb1d 	bl	8004dac <UART_WaitOnFlagUntilTimeout>
 8004772:	4603      	mov	r3, r0
 8004774:	2b00      	cmp	r3, #0
 8004776:	d005      	beq.n	8004784 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	2220      	movs	r2, #32
 800477c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004780:	2303      	movs	r3, #3
 8004782:	e03a      	b.n	80047fa <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8004784:	69fb      	ldr	r3, [r7, #28]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10b      	bne.n	80047a2 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800478a:	69bb      	ldr	r3, [r7, #24]
 800478c:	881b      	ldrh	r3, [r3, #0]
 800478e:	461a      	mov	r2, r3
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004798:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 800479a:	69bb      	ldr	r3, [r7, #24]
 800479c:	3302      	adds	r3, #2
 800479e:	61bb      	str	r3, [r7, #24]
 80047a0:	e007      	b.n	80047b2 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80047a2:	69fb      	ldr	r3, [r7, #28]
 80047a4:	781a      	ldrb	r2, [r3, #0]
 80047a6:	68fb      	ldr	r3, [r7, #12]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80047ac:	69fb      	ldr	r3, [r7, #28]
 80047ae:	3301      	adds	r3, #1
 80047b0:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047b6:	b29b      	uxth	r3, r3
 80047b8:	3b01      	subs	r3, #1
 80047ba:	b29a      	uxth	r2, r3
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80047c0:	68fb      	ldr	r3, [r7, #12]
 80047c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80047c4:	b29b      	uxth	r3, r3
 80047c6:	2b00      	cmp	r3, #0
 80047c8:	d1cb      	bne.n	8004762 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80047ca:	683b      	ldr	r3, [r7, #0]
 80047cc:	9300      	str	r3, [sp, #0]
 80047ce:	697b      	ldr	r3, [r7, #20]
 80047d0:	2200      	movs	r2, #0
 80047d2:	2140      	movs	r1, #64	@ 0x40
 80047d4:	68f8      	ldr	r0, [r7, #12]
 80047d6:	f000 fae9 	bl	8004dac <UART_WaitOnFlagUntilTimeout>
 80047da:	4603      	mov	r3, r0
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d005      	beq.n	80047ec <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2220      	movs	r2, #32
 80047e4:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 80047e8:	2303      	movs	r3, #3
 80047ea:	e006      	b.n	80047fa <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2220      	movs	r2, #32
 80047f0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80047f4:	2300      	movs	r3, #0
 80047f6:	e000      	b.n	80047fa <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80047f8:	2302      	movs	r3, #2
  }
}
 80047fa:	4618      	mov	r0, r3
 80047fc:	3720      	adds	r7, #32
 80047fe:	46bd      	mov	sp, r7
 8004800:	bd80      	pop	{r7, pc}
	...

08004804 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b0ba      	sub	sp, #232	@ 0xe8
 8004808:	af00      	add	r7, sp, #0
 800480a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800480c:	687b      	ldr	r3, [r7, #4]
 800480e:	681b      	ldr	r3, [r3, #0]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	681b      	ldr	r3, [r3, #0]
 800481a:	68db      	ldr	r3, [r3, #12]
 800481c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	681b      	ldr	r3, [r3, #0]
 8004824:	695b      	ldr	r3, [r3, #20]
 8004826:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800482a:	2300      	movs	r3, #0
 800482c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004830:	2300      	movs	r3, #0
 8004832:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004836:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800483a:	f003 030f 	and.w	r3, r3, #15
 800483e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004842:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004846:	2b00      	cmp	r3, #0
 8004848:	d10f      	bne.n	800486a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800484a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800484e:	f003 0320 	and.w	r3, r3, #32
 8004852:	2b00      	cmp	r3, #0
 8004854:	d009      	beq.n	800486a <HAL_UART_IRQHandler+0x66>
 8004856:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800485a:	f003 0320 	and.w	r3, r3, #32
 800485e:	2b00      	cmp	r3, #0
 8004860:	d003      	beq.n	800486a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004862:	6878      	ldr	r0, [r7, #4]
 8004864:	f000 fbd7 	bl	8005016 <UART_Receive_IT>
      return;
 8004868:	e273      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800486a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800486e:	2b00      	cmp	r3, #0
 8004870:	f000 80de 	beq.w	8004a30 <HAL_UART_IRQHandler+0x22c>
 8004874:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d106      	bne.n	800488e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004880:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004884:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004888:	2b00      	cmp	r3, #0
 800488a:	f000 80d1 	beq.w	8004a30 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800488e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004892:	f003 0301 	and.w	r3, r3, #1
 8004896:	2b00      	cmp	r3, #0
 8004898:	d00b      	beq.n	80048b2 <HAL_UART_IRQHandler+0xae>
 800489a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800489e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d005      	beq.n	80048b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048aa:	f043 0201 	orr.w	r2, r3, #1
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048b6:	f003 0304 	and.w	r3, r3, #4
 80048ba:	2b00      	cmp	r3, #0
 80048bc:	d00b      	beq.n	80048d6 <HAL_UART_IRQHandler+0xd2>
 80048be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048c2:	f003 0301 	and.w	r3, r3, #1
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048ce:	f043 0202 	orr.w	r2, r3, #2
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80048d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048da:	f003 0302 	and.w	r3, r3, #2
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00b      	beq.n	80048fa <HAL_UART_IRQHandler+0xf6>
 80048e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80048e6:	f003 0301 	and.w	r3, r3, #1
 80048ea:	2b00      	cmp	r3, #0
 80048ec:	d005      	beq.n	80048fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80048ee:	687b      	ldr	r3, [r7, #4]
 80048f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80048f2:	f043 0204 	orr.w	r2, r3, #4
 80048f6:	687b      	ldr	r3, [r7, #4]
 80048f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80048fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80048fe:	f003 0308 	and.w	r3, r3, #8
 8004902:	2b00      	cmp	r3, #0
 8004904:	d011      	beq.n	800492a <HAL_UART_IRQHandler+0x126>
 8004906:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800490a:	f003 0320 	and.w	r3, r3, #32
 800490e:	2b00      	cmp	r3, #0
 8004910:	d105      	bne.n	800491e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004916:	f003 0301 	and.w	r3, r3, #1
 800491a:	2b00      	cmp	r3, #0
 800491c:	d005      	beq.n	800492a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800491e:	687b      	ldr	r3, [r7, #4]
 8004920:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004922:	f043 0208 	orr.w	r2, r3, #8
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800492e:	2b00      	cmp	r3, #0
 8004930:	f000 820a 	beq.w	8004d48 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004934:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004938:	f003 0320 	and.w	r3, r3, #32
 800493c:	2b00      	cmp	r3, #0
 800493e:	d008      	beq.n	8004952 <HAL_UART_IRQHandler+0x14e>
 8004940:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004944:	f003 0320 	and.w	r3, r3, #32
 8004948:	2b00      	cmp	r3, #0
 800494a:	d002      	beq.n	8004952 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800494c:	6878      	ldr	r0, [r7, #4]
 800494e:	f000 fb62 	bl	8005016 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	681b      	ldr	r3, [r3, #0]
 8004956:	695b      	ldr	r3, [r3, #20]
 8004958:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800495c:	2b40      	cmp	r3, #64	@ 0x40
 800495e:	bf0c      	ite	eq
 8004960:	2301      	moveq	r3, #1
 8004962:	2300      	movne	r3, #0
 8004964:	b2db      	uxtb	r3, r3
 8004966:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800496a:	687b      	ldr	r3, [r7, #4]
 800496c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800496e:	f003 0308 	and.w	r3, r3, #8
 8004972:	2b00      	cmp	r3, #0
 8004974:	d103      	bne.n	800497e <HAL_UART_IRQHandler+0x17a>
 8004976:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800497a:	2b00      	cmp	r3, #0
 800497c:	d04f      	beq.n	8004a1e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800497e:	6878      	ldr	r0, [r7, #4]
 8004980:	f000 fa6d 	bl	8004e5e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	695b      	ldr	r3, [r3, #20]
 800498a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800498e:	2b40      	cmp	r3, #64	@ 0x40
 8004990:	d141      	bne.n	8004a16 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	3314      	adds	r3, #20
 8004998:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800499c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80049a0:	e853 3f00 	ldrex	r3, [r3]
 80049a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80049a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80049ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80049b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	681b      	ldr	r3, [r3, #0]
 80049b8:	3314      	adds	r3, #20
 80049ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80049be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80049c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80049c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80049ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80049ce:	e841 2300 	strex	r3, r2, [r1]
 80049d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80049d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80049da:	2b00      	cmp	r3, #0
 80049dc:	d1d9      	bne.n	8004992 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049e2:	2b00      	cmp	r3, #0
 80049e4:	d013      	beq.n	8004a0e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80049e6:	687b      	ldr	r3, [r7, #4]
 80049e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049ea:	4a8a      	ldr	r2, [pc, #552]	@ (8004c14 <HAL_UART_IRQHandler+0x410>)
 80049ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fe fb5e 	bl	80030b4 <HAL_DMA_Abort_IT>
 80049f8:	4603      	mov	r3, r0
 80049fa:	2b00      	cmp	r3, #0
 80049fc:	d016      	beq.n	8004a2c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80049fe:	687b      	ldr	r3, [r7, #4]
 8004a00:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a02:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004a04:	687a      	ldr	r2, [r7, #4]
 8004a06:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004a08:	4610      	mov	r0, r2
 8004a0a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a0c:	e00e      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004a0e:	6878      	ldr	r0, [r7, #4]
 8004a10:	f000 f9b6 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a14:	e00a      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004a16:	6878      	ldr	r0, [r7, #4]
 8004a18:	f000 f9b2 	bl	8004d80 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a1c:	e006      	b.n	8004a2c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004a1e:	6878      	ldr	r0, [r7, #4]
 8004a20:	f000 f9ae 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2200      	movs	r2, #0
 8004a28:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004a2a:	e18d      	b.n	8004d48 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a2c:	bf00      	nop
    return;
 8004a2e:	e18b      	b.n	8004d48 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004a34:	2b01      	cmp	r3, #1
 8004a36:	f040 8167 	bne.w	8004d08 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004a3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a3e:	f003 0310 	and.w	r3, r3, #16
 8004a42:	2b00      	cmp	r3, #0
 8004a44:	f000 8160 	beq.w	8004d08 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8004a48:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004a4c:	f003 0310 	and.w	r3, r3, #16
 8004a50:	2b00      	cmp	r3, #0
 8004a52:	f000 8159 	beq.w	8004d08 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004a56:	2300      	movs	r3, #0
 8004a58:	60bb      	str	r3, [r7, #8]
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	681b      	ldr	r3, [r3, #0]
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	60bb      	str	r3, [r7, #8]
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	681b      	ldr	r3, [r3, #0]
 8004a66:	685b      	ldr	r3, [r3, #4]
 8004a68:	60bb      	str	r3, [r7, #8]
 8004a6a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	695b      	ldr	r3, [r3, #20]
 8004a72:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004a76:	2b40      	cmp	r3, #64	@ 0x40
 8004a78:	f040 80ce 	bne.w	8004c18 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	685b      	ldr	r3, [r3, #4]
 8004a84:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004a88:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	f000 80a9 	beq.w	8004be4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004a96:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004a9a:	429a      	cmp	r2, r3
 8004a9c:	f080 80a2 	bcs.w	8004be4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004aa6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004aac:	69db      	ldr	r3, [r3, #28]
 8004aae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ab2:	f000 8088 	beq.w	8004bc6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	330c      	adds	r3, #12
 8004abc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ac0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004ac4:	e853 3f00 	ldrex	r3, [r3]
 8004ac8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004acc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004ad0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004ad4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	330c      	adds	r3, #12
 8004ade:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004ae2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004ae6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004aea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004aee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004af2:	e841 2300 	strex	r3, r2, [r1]
 8004af6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004afa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004afe:	2b00      	cmp	r3, #0
 8004b00:	d1d9      	bne.n	8004ab6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	3314      	adds	r3, #20
 8004b08:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b0a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004b0c:	e853 3f00 	ldrex	r3, [r3]
 8004b10:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004b12:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004b14:	f023 0301 	bic.w	r3, r3, #1
 8004b18:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	3314      	adds	r3, #20
 8004b22:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004b26:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004b2a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b2c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004b2e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004b32:	e841 2300 	strex	r3, r2, [r1]
 8004b36:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004b38:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004b3a:	2b00      	cmp	r3, #0
 8004b3c:	d1e1      	bne.n	8004b02 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	681b      	ldr	r3, [r3, #0]
 8004b42:	3314      	adds	r3, #20
 8004b44:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004b48:	e853 3f00 	ldrex	r3, [r3]
 8004b4c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004b4e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004b50:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004b54:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	3314      	adds	r3, #20
 8004b5e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004b62:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004b64:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004b66:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004b68:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004b6a:	e841 2300 	strex	r3, r2, [r1]
 8004b6e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004b70:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d1e3      	bne.n	8004b3e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004b76:	687b      	ldr	r3, [r7, #4]
 8004b78:	2220      	movs	r2, #32
 8004b7a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2200      	movs	r2, #0
 8004b82:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	330c      	adds	r3, #12
 8004b8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004b8c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004b8e:	e853 3f00 	ldrex	r3, [r3]
 8004b92:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004b94:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004b96:	f023 0310 	bic.w	r3, r3, #16
 8004b9a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	330c      	adds	r3, #12
 8004ba4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004ba8:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004baa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004bac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004bae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004bb0:	e841 2300 	strex	r3, r2, [r1]
 8004bb4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004bb6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004bb8:	2b00      	cmp	r3, #0
 8004bba:	d1e3      	bne.n	8004b84 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004bbc:	687b      	ldr	r3, [r7, #4]
 8004bbe:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bc0:	4618      	mov	r0, r3
 8004bc2:	f7fe fa07 	bl	8002fd4 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	2202      	movs	r2, #2
 8004bca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004bcc:	687b      	ldr	r3, [r7, #4]
 8004bce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004bd4:	b29b      	uxth	r3, r3
 8004bd6:	1ad3      	subs	r3, r2, r3
 8004bd8:	b29b      	uxth	r3, r3
 8004bda:	4619      	mov	r1, r3
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	f000 f8d9 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 8004be2:	e0b3      	b.n	8004d4c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004be8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004bec:	429a      	cmp	r2, r3
 8004bee:	f040 80ad 	bne.w	8004d4c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004bf6:	69db      	ldr	r3, [r3, #28]
 8004bf8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004bfc:	f040 80a6 	bne.w	8004d4c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	2202      	movs	r2, #2
 8004c04:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8004c06:	687b      	ldr	r3, [r7, #4]
 8004c08:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004c0a:	4619      	mov	r1, r3
 8004c0c:	6878      	ldr	r0, [r7, #4]
 8004c0e:	f000 f8c1 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
      return;
 8004c12:	e09b      	b.n	8004d4c <HAL_UART_IRQHandler+0x548>
 8004c14:	08004f25 	.word	0x08004f25
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c20:	b29b      	uxth	r3, r3
 8004c22:	1ad3      	subs	r3, r2, r3
 8004c24:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004c2c:	b29b      	uxth	r3, r3
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	f000 808e 	beq.w	8004d50 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 8004c34:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	f000 8089 	beq.w	8004d50 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	330c      	adds	r3, #12
 8004c44:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004c48:	e853 3f00 	ldrex	r3, [r3]
 8004c4c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004c4e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004c50:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004c54:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004c58:	687b      	ldr	r3, [r7, #4]
 8004c5a:	681b      	ldr	r3, [r3, #0]
 8004c5c:	330c      	adds	r3, #12
 8004c5e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004c62:	647a      	str	r2, [r7, #68]	@ 0x44
 8004c64:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c66:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004c68:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004c6a:	e841 2300 	strex	r3, r2, [r1]
 8004c6e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004c70:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004c72:	2b00      	cmp	r3, #0
 8004c74:	d1e3      	bne.n	8004c3e <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	3314      	adds	r3, #20
 8004c7c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004c7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c80:	e853 3f00 	ldrex	r3, [r3]
 8004c84:	623b      	str	r3, [r7, #32]
   return(result);
 8004c86:	6a3b      	ldr	r3, [r7, #32]
 8004c88:	f023 0301 	bic.w	r3, r3, #1
 8004c8c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	3314      	adds	r3, #20
 8004c96:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004c9a:	633a      	str	r2, [r7, #48]	@ 0x30
 8004c9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c9e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ca0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ca2:	e841 2300 	strex	r3, r2, [r1]
 8004ca6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ca8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d1e3      	bne.n	8004c76 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2220      	movs	r2, #32
 8004cb2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	2200      	movs	r2, #0
 8004cba:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	330c      	adds	r3, #12
 8004cc2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004cc4:	693b      	ldr	r3, [r7, #16]
 8004cc6:	e853 3f00 	ldrex	r3, [r3]
 8004cca:	60fb      	str	r3, [r7, #12]
   return(result);
 8004ccc:	68fb      	ldr	r3, [r7, #12]
 8004cce:	f023 0310 	bic.w	r3, r3, #16
 8004cd2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	681b      	ldr	r3, [r3, #0]
 8004cda:	330c      	adds	r3, #12
 8004cdc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004ce0:	61fa      	str	r2, [r7, #28]
 8004ce2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ce4:	69b9      	ldr	r1, [r7, #24]
 8004ce6:	69fa      	ldr	r2, [r7, #28]
 8004ce8:	e841 2300 	strex	r3, r2, [r1]
 8004cec:	617b      	str	r3, [r7, #20]
   return(result);
 8004cee:	697b      	ldr	r3, [r7, #20]
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d1e3      	bne.n	8004cbc <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004cf4:	687b      	ldr	r3, [r7, #4]
 8004cf6:	2202      	movs	r2, #2
 8004cf8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004cfa:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004cfe:	4619      	mov	r1, r3
 8004d00:	6878      	ldr	r0, [r7, #4]
 8004d02:	f000 f847 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004d06:	e023      	b.n	8004d50 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004d08:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d0c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d10:	2b00      	cmp	r3, #0
 8004d12:	d009      	beq.n	8004d28 <HAL_UART_IRQHandler+0x524>
 8004d14:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d18:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004d1c:	2b00      	cmp	r3, #0
 8004d1e:	d003      	beq.n	8004d28 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8004d20:	6878      	ldr	r0, [r7, #4]
 8004d22:	f000 f910 	bl	8004f46 <UART_Transmit_IT>
    return;
 8004d26:	e014      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004d28:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004d2c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	d00e      	beq.n	8004d52 <HAL_UART_IRQHandler+0x54e>
 8004d34:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004d3c:	2b00      	cmp	r3, #0
 8004d3e:	d008      	beq.n	8004d52 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8004d40:	6878      	ldr	r0, [r7, #4]
 8004d42:	f000 f950 	bl	8004fe6 <UART_EndTransmit_IT>
    return;
 8004d46:	e004      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
    return;
 8004d48:	bf00      	nop
 8004d4a:	e002      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d4c:	bf00      	nop
 8004d4e:	e000      	b.n	8004d52 <HAL_UART_IRQHandler+0x54e>
      return;
 8004d50:	bf00      	nop
  }
}
 8004d52:	37e8      	adds	r7, #232	@ 0xe8
 8004d54:	46bd      	mov	sp, r7
 8004d56:	bd80      	pop	{r7, pc}

08004d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d58:	b480      	push	{r7}
 8004d5a:	b083      	sub	sp, #12
 8004d5c:	af00      	add	r7, sp, #0
 8004d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004d60:	bf00      	nop
 8004d62:	370c      	adds	r7, #12
 8004d64:	46bd      	mov	sp, r7
 8004d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d6a:	4770      	bx	lr

08004d6c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8004d6c:	b480      	push	{r7}
 8004d6e:	b083      	sub	sp, #12
 8004d70:	af00      	add	r7, sp, #0
 8004d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8004d74:	bf00      	nop
 8004d76:	370c      	adds	r7, #12
 8004d78:	46bd      	mov	sp, r7
 8004d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d7e:	4770      	bx	lr

08004d80 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004d80:	b480      	push	{r7}
 8004d82:	b083      	sub	sp, #12
 8004d84:	af00      	add	r7, sp, #0
 8004d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004d88:	bf00      	nop
 8004d8a:	370c      	adds	r7, #12
 8004d8c:	46bd      	mov	sp, r7
 8004d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d92:	4770      	bx	lr

08004d94 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004d94:	b480      	push	{r7}
 8004d96:	b083      	sub	sp, #12
 8004d98:	af00      	add	r7, sp, #0
 8004d9a:	6078      	str	r0, [r7, #4]
 8004d9c:	460b      	mov	r3, r1
 8004d9e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004da0:	bf00      	nop
 8004da2:	370c      	adds	r7, #12
 8004da4:	46bd      	mov	sp, r7
 8004da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004daa:	4770      	bx	lr

08004dac <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004dac:	b580      	push	{r7, lr}
 8004dae:	b086      	sub	sp, #24
 8004db0:	af00      	add	r7, sp, #0
 8004db2:	60f8      	str	r0, [r7, #12]
 8004db4:	60b9      	str	r1, [r7, #8]
 8004db6:	603b      	str	r3, [r7, #0]
 8004db8:	4613      	mov	r3, r2
 8004dba:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004dbc:	e03b      	b.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004dbe:	6a3b      	ldr	r3, [r7, #32]
 8004dc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004dc4:	d037      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004dc6:	f7fd f9a5 	bl	8002114 <HAL_GetTick>
 8004dca:	4602      	mov	r2, r0
 8004dcc:	683b      	ldr	r3, [r7, #0]
 8004dce:	1ad3      	subs	r3, r2, r3
 8004dd0:	6a3a      	ldr	r2, [r7, #32]
 8004dd2:	429a      	cmp	r2, r3
 8004dd4:	d302      	bcc.n	8004ddc <UART_WaitOnFlagUntilTimeout+0x30>
 8004dd6:	6a3b      	ldr	r3, [r7, #32]
 8004dd8:	2b00      	cmp	r3, #0
 8004dda:	d101      	bne.n	8004de0 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ddc:	2303      	movs	r3, #3
 8004dde:	e03a      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004de0:	68fb      	ldr	r3, [r7, #12]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	68db      	ldr	r3, [r3, #12]
 8004de6:	f003 0304 	and.w	r3, r3, #4
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d023      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004dee:	68bb      	ldr	r3, [r7, #8]
 8004df0:	2b80      	cmp	r3, #128	@ 0x80
 8004df2:	d020      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	2b40      	cmp	r3, #64	@ 0x40
 8004df8:	d01d      	beq.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8004dfa:	68fb      	ldr	r3, [r7, #12]
 8004dfc:	681b      	ldr	r3, [r3, #0]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	f003 0308 	and.w	r3, r3, #8
 8004e04:	2b08      	cmp	r3, #8
 8004e06:	d116      	bne.n	8004e36 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8004e08:	2300      	movs	r3, #0
 8004e0a:	617b      	str	r3, [r7, #20]
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	617b      	str	r3, [r7, #20]
 8004e14:	68fb      	ldr	r3, [r7, #12]
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	685b      	ldr	r3, [r3, #4]
 8004e1a:	617b      	str	r3, [r7, #20]
 8004e1c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8004e1e:	68f8      	ldr	r0, [r7, #12]
 8004e20:	f000 f81d 	bl	8004e5e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2208      	movs	r2, #8
 8004e28:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004e2a:	68fb      	ldr	r3, [r7, #12]
 8004e2c:	2200      	movs	r2, #0
 8004e2e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8004e32:	2301      	movs	r3, #1
 8004e34:	e00f      	b.n	8004e56 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	681b      	ldr	r3, [r3, #0]
 8004e3a:	681a      	ldr	r2, [r3, #0]
 8004e3c:	68bb      	ldr	r3, [r7, #8]
 8004e3e:	4013      	ands	r3, r2
 8004e40:	68ba      	ldr	r2, [r7, #8]
 8004e42:	429a      	cmp	r2, r3
 8004e44:	bf0c      	ite	eq
 8004e46:	2301      	moveq	r3, #1
 8004e48:	2300      	movne	r3, #0
 8004e4a:	b2db      	uxtb	r3, r3
 8004e4c:	461a      	mov	r2, r3
 8004e4e:	79fb      	ldrb	r3, [r7, #7]
 8004e50:	429a      	cmp	r2, r3
 8004e52:	d0b4      	beq.n	8004dbe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004e54:	2300      	movs	r3, #0
}
 8004e56:	4618      	mov	r0, r3
 8004e58:	3718      	adds	r7, #24
 8004e5a:	46bd      	mov	sp, r7
 8004e5c:	bd80      	pop	{r7, pc}

08004e5e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8004e5e:	b480      	push	{r7}
 8004e60:	b095      	sub	sp, #84	@ 0x54
 8004e62:	af00      	add	r7, sp, #0
 8004e64:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	330c      	adds	r3, #12
 8004e6c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e6e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e70:	e853 3f00 	ldrex	r3, [r3]
 8004e74:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8004e76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8004e78:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e7c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	330c      	adds	r3, #12
 8004e84:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8004e86:	643a      	str	r2, [r7, #64]	@ 0x40
 8004e88:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e8a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8004e8c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8004e8e:	e841 2300 	strex	r3, r2, [r1]
 8004e92:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8004e94:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e96:	2b00      	cmp	r3, #0
 8004e98:	d1e5      	bne.n	8004e66 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	3314      	adds	r3, #20
 8004ea0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ea2:	6a3b      	ldr	r3, [r7, #32]
 8004ea4:	e853 3f00 	ldrex	r3, [r3]
 8004ea8:	61fb      	str	r3, [r7, #28]
   return(result);
 8004eaa:	69fb      	ldr	r3, [r7, #28]
 8004eac:	f023 0301 	bic.w	r3, r3, #1
 8004eb0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	3314      	adds	r3, #20
 8004eb8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8004eba:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8004ebc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ebe:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004ec0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8004ec2:	e841 2300 	strex	r3, r2, [r1]
 8004ec6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8004ec8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1e5      	bne.n	8004e9a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004ece:	687b      	ldr	r3, [r7, #4]
 8004ed0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004ed2:	2b01      	cmp	r3, #1
 8004ed4:	d119      	bne.n	8004f0a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004ed6:	687b      	ldr	r3, [r7, #4]
 8004ed8:	681b      	ldr	r3, [r3, #0]
 8004eda:	330c      	adds	r3, #12
 8004edc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ede:	68fb      	ldr	r3, [r7, #12]
 8004ee0:	e853 3f00 	ldrex	r3, [r3]
 8004ee4:	60bb      	str	r3, [r7, #8]
   return(result);
 8004ee6:	68bb      	ldr	r3, [r7, #8]
 8004ee8:	f023 0310 	bic.w	r3, r3, #16
 8004eec:	647b      	str	r3, [r7, #68]	@ 0x44
 8004eee:	687b      	ldr	r3, [r7, #4]
 8004ef0:	681b      	ldr	r3, [r3, #0]
 8004ef2:	330c      	adds	r3, #12
 8004ef4:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004ef6:	61ba      	str	r2, [r7, #24]
 8004ef8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004efa:	6979      	ldr	r1, [r7, #20]
 8004efc:	69ba      	ldr	r2, [r7, #24]
 8004efe:	e841 2300 	strex	r3, r2, [r1]
 8004f02:	613b      	str	r3, [r7, #16]
   return(result);
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d1e5      	bne.n	8004ed6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	2220      	movs	r2, #32
 8004f0e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	2200      	movs	r2, #0
 8004f16:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8004f18:	bf00      	nop
 8004f1a:	3754      	adds	r7, #84	@ 0x54
 8004f1c:	46bd      	mov	sp, r7
 8004f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f22:	4770      	bx	lr

08004f24 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8004f24:	b580      	push	{r7, lr}
 8004f26:	b084      	sub	sp, #16
 8004f28:	af00      	add	r7, sp, #0
 8004f2a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8004f2c:	687b      	ldr	r3, [r7, #4]
 8004f2e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8004f30:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8004f32:	68fb      	ldr	r3, [r7, #12]
 8004f34:	2200      	movs	r2, #0
 8004f36:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8004f38:	68f8      	ldr	r0, [r7, #12]
 8004f3a:	f7ff ff21 	bl	8004d80 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8004f3e:	bf00      	nop
 8004f40:	3710      	adds	r7, #16
 8004f42:	46bd      	mov	sp, r7
 8004f44:	bd80      	pop	{r7, pc}

08004f46 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8004f46:	b480      	push	{r7}
 8004f48:	b085      	sub	sp, #20
 8004f4a:	af00      	add	r7, sp, #0
 8004f4c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8004f54:	b2db      	uxtb	r3, r3
 8004f56:	2b21      	cmp	r3, #33	@ 0x21
 8004f58:	d13e      	bne.n	8004fd8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004f5a:	687b      	ldr	r3, [r7, #4]
 8004f5c:	689b      	ldr	r3, [r3, #8]
 8004f5e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004f62:	d114      	bne.n	8004f8e <UART_Transmit_IT+0x48>
 8004f64:	687b      	ldr	r3, [r7, #4]
 8004f66:	691b      	ldr	r3, [r3, #16]
 8004f68:	2b00      	cmp	r3, #0
 8004f6a:	d110      	bne.n	8004f8e <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	6a1b      	ldr	r3, [r3, #32]
 8004f70:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	881b      	ldrh	r3, [r3, #0]
 8004f76:	461a      	mov	r2, r3
 8004f78:	687b      	ldr	r3, [r7, #4]
 8004f7a:	681b      	ldr	r3, [r3, #0]
 8004f7c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8004f80:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	6a1b      	ldr	r3, [r3, #32]
 8004f86:	1c9a      	adds	r2, r3, #2
 8004f88:	687b      	ldr	r3, [r7, #4]
 8004f8a:	621a      	str	r2, [r3, #32]
 8004f8c:	e008      	b.n	8004fa0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	6a1b      	ldr	r3, [r3, #32]
 8004f92:	1c59      	adds	r1, r3, #1
 8004f94:	687a      	ldr	r2, [r7, #4]
 8004f96:	6211      	str	r1, [r2, #32]
 8004f98:	781a      	ldrb	r2, [r3, #0]
 8004f9a:	687b      	ldr	r3, [r7, #4]
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8004fa0:	687b      	ldr	r3, [r7, #4]
 8004fa2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8004fa4:	b29b      	uxth	r3, r3
 8004fa6:	3b01      	subs	r3, #1
 8004fa8:	b29b      	uxth	r3, r3
 8004faa:	687a      	ldr	r2, [r7, #4]
 8004fac:	4619      	mov	r1, r3
 8004fae:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d10f      	bne.n	8004fd4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8004fb4:	687b      	ldr	r3, [r7, #4]
 8004fb6:	681b      	ldr	r3, [r3, #0]
 8004fb8:	68da      	ldr	r2, [r3, #12]
 8004fba:	687b      	ldr	r3, [r7, #4]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8004fc2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	681b      	ldr	r3, [r3, #0]
 8004fc8:	68da      	ldr	r2, [r3, #12]
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	681b      	ldr	r3, [r3, #0]
 8004fce:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8004fd2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	e000      	b.n	8004fda <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8004fd8:	2302      	movs	r3, #2
  }
}
 8004fda:	4618      	mov	r0, r3
 8004fdc:	3714      	adds	r7, #20
 8004fde:	46bd      	mov	sp, r7
 8004fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fe4:	4770      	bx	lr

08004fe6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8004fe6:	b580      	push	{r7, lr}
 8004fe8:	b082      	sub	sp, #8
 8004fea:	af00      	add	r7, sp, #0
 8004fec:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	68da      	ldr	r2, [r3, #12]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8004ffc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	2220      	movs	r2, #32
 8005002:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005006:	6878      	ldr	r0, [r7, #4]
 8005008:	f7ff fea6 	bl	8004d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800500c:	2300      	movs	r3, #0
}
 800500e:	4618      	mov	r0, r3
 8005010:	3708      	adds	r7, #8
 8005012:	46bd      	mov	sp, r7
 8005014:	bd80      	pop	{r7, pc}

08005016 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005016:	b580      	push	{r7, lr}
 8005018:	b08c      	sub	sp, #48	@ 0x30
 800501a:	af00      	add	r7, sp, #0
 800501c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800501e:	2300      	movs	r3, #0
 8005020:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005022:	2300      	movs	r3, #0
 8005024:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800502c:	b2db      	uxtb	r3, r3
 800502e:	2b22      	cmp	r3, #34	@ 0x22
 8005030:	f040 80aa 	bne.w	8005188 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	689b      	ldr	r3, [r3, #8]
 8005038:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800503c:	d115      	bne.n	800506a <UART_Receive_IT+0x54>
 800503e:	687b      	ldr	r3, [r7, #4]
 8005040:	691b      	ldr	r3, [r3, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d111      	bne.n	800506a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800504a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	685b      	ldr	r3, [r3, #4]
 8005052:	b29b      	uxth	r3, r3
 8005054:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005058:	b29a      	uxth	r2, r3
 800505a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800505c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800505e:	687b      	ldr	r3, [r7, #4]
 8005060:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005062:	1c9a      	adds	r2, r3, #2
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	629a      	str	r2, [r3, #40]	@ 0x28
 8005068:	e024      	b.n	80050b4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800506e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005070:	687b      	ldr	r3, [r7, #4]
 8005072:	689b      	ldr	r3, [r3, #8]
 8005074:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005078:	d007      	beq.n	800508a <UART_Receive_IT+0x74>
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	2b00      	cmp	r3, #0
 8005080:	d10a      	bne.n	8005098 <UART_Receive_IT+0x82>
 8005082:	687b      	ldr	r3, [r7, #4]
 8005084:	691b      	ldr	r3, [r3, #16]
 8005086:	2b00      	cmp	r3, #0
 8005088:	d106      	bne.n	8005098 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	681b      	ldr	r3, [r3, #0]
 800508e:	685b      	ldr	r3, [r3, #4]
 8005090:	b2da      	uxtb	r2, r3
 8005092:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005094:	701a      	strb	r2, [r3, #0]
 8005096:	e008      	b.n	80050aa <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	b2db      	uxtb	r3, r3
 80050a0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80050a4:	b2da      	uxtb	r2, r3
 80050a6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80050a8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80050ae:	1c5a      	adds	r2, r3, #1
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80050b8:	b29b      	uxth	r3, r3
 80050ba:	3b01      	subs	r3, #1
 80050bc:	b29b      	uxth	r3, r3
 80050be:	687a      	ldr	r2, [r7, #4]
 80050c0:	4619      	mov	r1, r3
 80050c2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80050c4:	2b00      	cmp	r3, #0
 80050c6:	d15d      	bne.n	8005184 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80050c8:	687b      	ldr	r3, [r7, #4]
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	68da      	ldr	r2, [r3, #12]
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	f022 0220 	bic.w	r2, r2, #32
 80050d6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	68da      	ldr	r2, [r3, #12]
 80050de:	687b      	ldr	r3, [r7, #4]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80050e6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80050e8:	687b      	ldr	r3, [r7, #4]
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	695a      	ldr	r2, [r3, #20]
 80050ee:	687b      	ldr	r3, [r7, #4]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	f022 0201 	bic.w	r2, r2, #1
 80050f6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	2220      	movs	r2, #32
 80050fc:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	2200      	movs	r2, #0
 8005104:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800510a:	2b01      	cmp	r3, #1
 800510c:	d135      	bne.n	800517a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	2200      	movs	r2, #0
 8005112:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005114:	687b      	ldr	r3, [r7, #4]
 8005116:	681b      	ldr	r3, [r3, #0]
 8005118:	330c      	adds	r3, #12
 800511a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800511c:	697b      	ldr	r3, [r7, #20]
 800511e:	e853 3f00 	ldrex	r3, [r3]
 8005122:	613b      	str	r3, [r7, #16]
   return(result);
 8005124:	693b      	ldr	r3, [r7, #16]
 8005126:	f023 0310 	bic.w	r3, r3, #16
 800512a:	627b      	str	r3, [r7, #36]	@ 0x24
 800512c:	687b      	ldr	r3, [r7, #4]
 800512e:	681b      	ldr	r3, [r3, #0]
 8005130:	330c      	adds	r3, #12
 8005132:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005134:	623a      	str	r2, [r7, #32]
 8005136:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005138:	69f9      	ldr	r1, [r7, #28]
 800513a:	6a3a      	ldr	r2, [r7, #32]
 800513c:	e841 2300 	strex	r3, r2, [r1]
 8005140:	61bb      	str	r3, [r7, #24]
   return(result);
 8005142:	69bb      	ldr	r3, [r7, #24]
 8005144:	2b00      	cmp	r3, #0
 8005146:	d1e5      	bne.n	8005114 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f003 0310 	and.w	r3, r3, #16
 8005152:	2b10      	cmp	r3, #16
 8005154:	d10a      	bne.n	800516c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005156:	2300      	movs	r3, #0
 8005158:	60fb      	str	r3, [r7, #12]
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	681b      	ldr	r3, [r3, #0]
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	685b      	ldr	r3, [r3, #4]
 8005168:	60fb      	str	r3, [r7, #12]
 800516a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005170:	4619      	mov	r1, r3
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f7ff fe0e 	bl	8004d94 <HAL_UARTEx_RxEventCallback>
 8005178:	e002      	b.n	8005180 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800517a:	6878      	ldr	r0, [r7, #4]
 800517c:	f7ff fdf6 	bl	8004d6c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005180:	2300      	movs	r3, #0
 8005182:	e002      	b.n	800518a <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005184:	2300      	movs	r3, #0
 8005186:	e000      	b.n	800518a <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005188:	2302      	movs	r3, #2
  }
}
 800518a:	4618      	mov	r0, r3
 800518c:	3730      	adds	r7, #48	@ 0x30
 800518e:	46bd      	mov	sp, r7
 8005190:	bd80      	pop	{r7, pc}
	...

08005194 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005194:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005198:	b0c0      	sub	sp, #256	@ 0x100
 800519a:	af00      	add	r7, sp, #0
 800519c:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80051a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	691b      	ldr	r3, [r3, #16]
 80051a8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80051ac:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b0:	68d9      	ldr	r1, [r3, #12]
 80051b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051b6:	681a      	ldr	r2, [r3, #0]
 80051b8:	ea40 0301 	orr.w	r3, r0, r1
 80051bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80051be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c2:	689a      	ldr	r2, [r3, #8]
 80051c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051c8:	691b      	ldr	r3, [r3, #16]
 80051ca:	431a      	orrs	r2, r3
 80051cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d0:	695b      	ldr	r3, [r3, #20]
 80051d2:	431a      	orrs	r2, r3
 80051d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051d8:	69db      	ldr	r3, [r3, #28]
 80051da:	4313      	orrs	r3, r2
 80051dc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80051e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051e4:	681b      	ldr	r3, [r3, #0]
 80051e6:	68db      	ldr	r3, [r3, #12]
 80051e8:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80051ec:	f021 010c 	bic.w	r1, r1, #12
 80051f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80051f4:	681a      	ldr	r2, [r3, #0]
 80051f6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80051fa:	430b      	orrs	r3, r1
 80051fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80051fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005202:	681b      	ldr	r3, [r3, #0]
 8005204:	695b      	ldr	r3, [r3, #20]
 8005206:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800520a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800520e:	6999      	ldr	r1, [r3, #24]
 8005210:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005214:	681a      	ldr	r2, [r3, #0]
 8005216:	ea40 0301 	orr.w	r3, r0, r1
 800521a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800521c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005220:	681a      	ldr	r2, [r3, #0]
 8005222:	4b8f      	ldr	r3, [pc, #572]	@ (8005460 <UART_SetConfig+0x2cc>)
 8005224:	429a      	cmp	r2, r3
 8005226:	d005      	beq.n	8005234 <UART_SetConfig+0xa0>
 8005228:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800522c:	681a      	ldr	r2, [r3, #0]
 800522e:	4b8d      	ldr	r3, [pc, #564]	@ (8005464 <UART_SetConfig+0x2d0>)
 8005230:	429a      	cmp	r2, r3
 8005232:	d104      	bne.n	800523e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005234:	f7fe fd80 	bl	8003d38 <HAL_RCC_GetPCLK2Freq>
 8005238:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800523c:	e003      	b.n	8005246 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800523e:	f7fe fd67 	bl	8003d10 <HAL_RCC_GetPCLK1Freq>
 8005242:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005246:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800524a:	69db      	ldr	r3, [r3, #28]
 800524c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005250:	f040 810c 	bne.w	800546c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005254:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005258:	2200      	movs	r2, #0
 800525a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800525e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005262:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005266:	4622      	mov	r2, r4
 8005268:	462b      	mov	r3, r5
 800526a:	1891      	adds	r1, r2, r2
 800526c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800526e:	415b      	adcs	r3, r3
 8005270:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005272:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005276:	4621      	mov	r1, r4
 8005278:	eb12 0801 	adds.w	r8, r2, r1
 800527c:	4629      	mov	r1, r5
 800527e:	eb43 0901 	adc.w	r9, r3, r1
 8005282:	f04f 0200 	mov.w	r2, #0
 8005286:	f04f 0300 	mov.w	r3, #0
 800528a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800528e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005292:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005296:	4690      	mov	r8, r2
 8005298:	4699      	mov	r9, r3
 800529a:	4623      	mov	r3, r4
 800529c:	eb18 0303 	adds.w	r3, r8, r3
 80052a0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80052a4:	462b      	mov	r3, r5
 80052a6:	eb49 0303 	adc.w	r3, r9, r3
 80052aa:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80052ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2200      	movs	r2, #0
 80052b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80052ba:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80052be:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80052c2:	460b      	mov	r3, r1
 80052c4:	18db      	adds	r3, r3, r3
 80052c6:	653b      	str	r3, [r7, #80]	@ 0x50
 80052c8:	4613      	mov	r3, r2
 80052ca:	eb42 0303 	adc.w	r3, r2, r3
 80052ce:	657b      	str	r3, [r7, #84]	@ 0x54
 80052d0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80052d4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80052d8:	f7fa ffca 	bl	8000270 <__aeabi_uldivmod>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	4b61      	ldr	r3, [pc, #388]	@ (8005468 <UART_SetConfig+0x2d4>)
 80052e2:	fba3 2302 	umull	r2, r3, r3, r2
 80052e6:	095b      	lsrs	r3, r3, #5
 80052e8:	011c      	lsls	r4, r3, #4
 80052ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80052ee:	2200      	movs	r2, #0
 80052f0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80052f4:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80052f8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80052fc:	4642      	mov	r2, r8
 80052fe:	464b      	mov	r3, r9
 8005300:	1891      	adds	r1, r2, r2
 8005302:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005304:	415b      	adcs	r3, r3
 8005306:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005308:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 800530c:	4641      	mov	r1, r8
 800530e:	eb12 0a01 	adds.w	sl, r2, r1
 8005312:	4649      	mov	r1, r9
 8005314:	eb43 0b01 	adc.w	fp, r3, r1
 8005318:	f04f 0200 	mov.w	r2, #0
 800531c:	f04f 0300 	mov.w	r3, #0
 8005320:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005324:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005328:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800532c:	4692      	mov	sl, r2
 800532e:	469b      	mov	fp, r3
 8005330:	4643      	mov	r3, r8
 8005332:	eb1a 0303 	adds.w	r3, sl, r3
 8005336:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800533a:	464b      	mov	r3, r9
 800533c:	eb4b 0303 	adc.w	r3, fp, r3
 8005340:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005348:	685b      	ldr	r3, [r3, #4]
 800534a:	2200      	movs	r2, #0
 800534c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005350:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005354:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005358:	460b      	mov	r3, r1
 800535a:	18db      	adds	r3, r3, r3
 800535c:	643b      	str	r3, [r7, #64]	@ 0x40
 800535e:	4613      	mov	r3, r2
 8005360:	eb42 0303 	adc.w	r3, r2, r3
 8005364:	647b      	str	r3, [r7, #68]	@ 0x44
 8005366:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800536a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 800536e:	f7fa ff7f 	bl	8000270 <__aeabi_uldivmod>
 8005372:	4602      	mov	r2, r0
 8005374:	460b      	mov	r3, r1
 8005376:	4611      	mov	r1, r2
 8005378:	4b3b      	ldr	r3, [pc, #236]	@ (8005468 <UART_SetConfig+0x2d4>)
 800537a:	fba3 2301 	umull	r2, r3, r3, r1
 800537e:	095b      	lsrs	r3, r3, #5
 8005380:	2264      	movs	r2, #100	@ 0x64
 8005382:	fb02 f303 	mul.w	r3, r2, r3
 8005386:	1acb      	subs	r3, r1, r3
 8005388:	00db      	lsls	r3, r3, #3
 800538a:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 800538e:	4b36      	ldr	r3, [pc, #216]	@ (8005468 <UART_SetConfig+0x2d4>)
 8005390:	fba3 2302 	umull	r2, r3, r3, r2
 8005394:	095b      	lsrs	r3, r3, #5
 8005396:	005b      	lsls	r3, r3, #1
 8005398:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 800539c:	441c      	add	r4, r3
 800539e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80053a2:	2200      	movs	r2, #0
 80053a4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80053a8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80053ac:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80053b0:	4642      	mov	r2, r8
 80053b2:	464b      	mov	r3, r9
 80053b4:	1891      	adds	r1, r2, r2
 80053b6:	63b9      	str	r1, [r7, #56]	@ 0x38
 80053b8:	415b      	adcs	r3, r3
 80053ba:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80053bc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80053c0:	4641      	mov	r1, r8
 80053c2:	1851      	adds	r1, r2, r1
 80053c4:	6339      	str	r1, [r7, #48]	@ 0x30
 80053c6:	4649      	mov	r1, r9
 80053c8:	414b      	adcs	r3, r1
 80053ca:	637b      	str	r3, [r7, #52]	@ 0x34
 80053cc:	f04f 0200 	mov.w	r2, #0
 80053d0:	f04f 0300 	mov.w	r3, #0
 80053d4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 80053d8:	4659      	mov	r1, fp
 80053da:	00cb      	lsls	r3, r1, #3
 80053dc:	4651      	mov	r1, sl
 80053de:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80053e2:	4651      	mov	r1, sl
 80053e4:	00ca      	lsls	r2, r1, #3
 80053e6:	4610      	mov	r0, r2
 80053e8:	4619      	mov	r1, r3
 80053ea:	4603      	mov	r3, r0
 80053ec:	4642      	mov	r2, r8
 80053ee:	189b      	adds	r3, r3, r2
 80053f0:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80053f4:	464b      	mov	r3, r9
 80053f6:	460a      	mov	r2, r1
 80053f8:	eb42 0303 	adc.w	r3, r2, r3
 80053fc:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005400:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005404:	685b      	ldr	r3, [r3, #4]
 8005406:	2200      	movs	r2, #0
 8005408:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 800540c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005410:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005414:	460b      	mov	r3, r1
 8005416:	18db      	adds	r3, r3, r3
 8005418:	62bb      	str	r3, [r7, #40]	@ 0x28
 800541a:	4613      	mov	r3, r2
 800541c:	eb42 0303 	adc.w	r3, r2, r3
 8005420:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005422:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005426:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800542a:	f7fa ff21 	bl	8000270 <__aeabi_uldivmod>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	4b0d      	ldr	r3, [pc, #52]	@ (8005468 <UART_SetConfig+0x2d4>)
 8005434:	fba3 1302 	umull	r1, r3, r3, r2
 8005438:	095b      	lsrs	r3, r3, #5
 800543a:	2164      	movs	r1, #100	@ 0x64
 800543c:	fb01 f303 	mul.w	r3, r1, r3
 8005440:	1ad3      	subs	r3, r2, r3
 8005442:	00db      	lsls	r3, r3, #3
 8005444:	3332      	adds	r3, #50	@ 0x32
 8005446:	4a08      	ldr	r2, [pc, #32]	@ (8005468 <UART_SetConfig+0x2d4>)
 8005448:	fba2 2303 	umull	r2, r3, r2, r3
 800544c:	095b      	lsrs	r3, r3, #5
 800544e:	f003 0207 	and.w	r2, r3, #7
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005456:	681b      	ldr	r3, [r3, #0]
 8005458:	4422      	add	r2, r4
 800545a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800545c:	e106      	b.n	800566c <UART_SetConfig+0x4d8>
 800545e:	bf00      	nop
 8005460:	40011000 	.word	0x40011000
 8005464:	40011400 	.word	0x40011400
 8005468:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800546c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005470:	2200      	movs	r2, #0
 8005472:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005476:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800547a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 800547e:	4642      	mov	r2, r8
 8005480:	464b      	mov	r3, r9
 8005482:	1891      	adds	r1, r2, r2
 8005484:	6239      	str	r1, [r7, #32]
 8005486:	415b      	adcs	r3, r3
 8005488:	627b      	str	r3, [r7, #36]	@ 0x24
 800548a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800548e:	4641      	mov	r1, r8
 8005490:	1854      	adds	r4, r2, r1
 8005492:	4649      	mov	r1, r9
 8005494:	eb43 0501 	adc.w	r5, r3, r1
 8005498:	f04f 0200 	mov.w	r2, #0
 800549c:	f04f 0300 	mov.w	r3, #0
 80054a0:	00eb      	lsls	r3, r5, #3
 80054a2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80054a6:	00e2      	lsls	r2, r4, #3
 80054a8:	4614      	mov	r4, r2
 80054aa:	461d      	mov	r5, r3
 80054ac:	4643      	mov	r3, r8
 80054ae:	18e3      	adds	r3, r4, r3
 80054b0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80054b4:	464b      	mov	r3, r9
 80054b6:	eb45 0303 	adc.w	r3, r5, r3
 80054ba:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80054be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c2:	685b      	ldr	r3, [r3, #4]
 80054c4:	2200      	movs	r2, #0
 80054c6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80054ca:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80054ce:	f04f 0200 	mov.w	r2, #0
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 80054da:	4629      	mov	r1, r5
 80054dc:	008b      	lsls	r3, r1, #2
 80054de:	4621      	mov	r1, r4
 80054e0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80054e4:	4621      	mov	r1, r4
 80054e6:	008a      	lsls	r2, r1, #2
 80054e8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 80054ec:	f7fa fec0 	bl	8000270 <__aeabi_uldivmod>
 80054f0:	4602      	mov	r2, r0
 80054f2:	460b      	mov	r3, r1
 80054f4:	4b60      	ldr	r3, [pc, #384]	@ (8005678 <UART_SetConfig+0x4e4>)
 80054f6:	fba3 2302 	umull	r2, r3, r3, r2
 80054fa:	095b      	lsrs	r3, r3, #5
 80054fc:	011c      	lsls	r4, r3, #4
 80054fe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005502:	2200      	movs	r2, #0
 8005504:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005508:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 800550c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005510:	4642      	mov	r2, r8
 8005512:	464b      	mov	r3, r9
 8005514:	1891      	adds	r1, r2, r2
 8005516:	61b9      	str	r1, [r7, #24]
 8005518:	415b      	adcs	r3, r3
 800551a:	61fb      	str	r3, [r7, #28]
 800551c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005520:	4641      	mov	r1, r8
 8005522:	1851      	adds	r1, r2, r1
 8005524:	6139      	str	r1, [r7, #16]
 8005526:	4649      	mov	r1, r9
 8005528:	414b      	adcs	r3, r1
 800552a:	617b      	str	r3, [r7, #20]
 800552c:	f04f 0200 	mov.w	r2, #0
 8005530:	f04f 0300 	mov.w	r3, #0
 8005534:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005538:	4659      	mov	r1, fp
 800553a:	00cb      	lsls	r3, r1, #3
 800553c:	4651      	mov	r1, sl
 800553e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005542:	4651      	mov	r1, sl
 8005544:	00ca      	lsls	r2, r1, #3
 8005546:	4610      	mov	r0, r2
 8005548:	4619      	mov	r1, r3
 800554a:	4603      	mov	r3, r0
 800554c:	4642      	mov	r2, r8
 800554e:	189b      	adds	r3, r3, r2
 8005550:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8005554:	464b      	mov	r3, r9
 8005556:	460a      	mov	r2, r1
 8005558:	eb42 0303 	adc.w	r3, r2, r3
 800555c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8005560:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005564:	685b      	ldr	r3, [r3, #4]
 8005566:	2200      	movs	r2, #0
 8005568:	67bb      	str	r3, [r7, #120]	@ 0x78
 800556a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 800556c:	f04f 0200 	mov.w	r2, #0
 8005570:	f04f 0300 	mov.w	r3, #0
 8005574:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8005578:	4649      	mov	r1, r9
 800557a:	008b      	lsls	r3, r1, #2
 800557c:	4641      	mov	r1, r8
 800557e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005582:	4641      	mov	r1, r8
 8005584:	008a      	lsls	r2, r1, #2
 8005586:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800558a:	f7fa fe71 	bl	8000270 <__aeabi_uldivmod>
 800558e:	4602      	mov	r2, r0
 8005590:	460b      	mov	r3, r1
 8005592:	4611      	mov	r1, r2
 8005594:	4b38      	ldr	r3, [pc, #224]	@ (8005678 <UART_SetConfig+0x4e4>)
 8005596:	fba3 2301 	umull	r2, r3, r3, r1
 800559a:	095b      	lsrs	r3, r3, #5
 800559c:	2264      	movs	r2, #100	@ 0x64
 800559e:	fb02 f303 	mul.w	r3, r2, r3
 80055a2:	1acb      	subs	r3, r1, r3
 80055a4:	011b      	lsls	r3, r3, #4
 80055a6:	3332      	adds	r3, #50	@ 0x32
 80055a8:	4a33      	ldr	r2, [pc, #204]	@ (8005678 <UART_SetConfig+0x4e4>)
 80055aa:	fba2 2303 	umull	r2, r3, r2, r3
 80055ae:	095b      	lsrs	r3, r3, #5
 80055b0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80055b4:	441c      	add	r4, r3
 80055b6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80055ba:	2200      	movs	r2, #0
 80055bc:	673b      	str	r3, [r7, #112]	@ 0x70
 80055be:	677a      	str	r2, [r7, #116]	@ 0x74
 80055c0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80055c4:	4642      	mov	r2, r8
 80055c6:	464b      	mov	r3, r9
 80055c8:	1891      	adds	r1, r2, r2
 80055ca:	60b9      	str	r1, [r7, #8]
 80055cc:	415b      	adcs	r3, r3
 80055ce:	60fb      	str	r3, [r7, #12]
 80055d0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80055d4:	4641      	mov	r1, r8
 80055d6:	1851      	adds	r1, r2, r1
 80055d8:	6039      	str	r1, [r7, #0]
 80055da:	4649      	mov	r1, r9
 80055dc:	414b      	adcs	r3, r1
 80055de:	607b      	str	r3, [r7, #4]
 80055e0:	f04f 0200 	mov.w	r2, #0
 80055e4:	f04f 0300 	mov.w	r3, #0
 80055e8:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80055ec:	4659      	mov	r1, fp
 80055ee:	00cb      	lsls	r3, r1, #3
 80055f0:	4651      	mov	r1, sl
 80055f2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80055f6:	4651      	mov	r1, sl
 80055f8:	00ca      	lsls	r2, r1, #3
 80055fa:	4610      	mov	r0, r2
 80055fc:	4619      	mov	r1, r3
 80055fe:	4603      	mov	r3, r0
 8005600:	4642      	mov	r2, r8
 8005602:	189b      	adds	r3, r3, r2
 8005604:	66bb      	str	r3, [r7, #104]	@ 0x68
 8005606:	464b      	mov	r3, r9
 8005608:	460a      	mov	r2, r1
 800560a:	eb42 0303 	adc.w	r3, r2, r3
 800560e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8005610:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005614:	685b      	ldr	r3, [r3, #4]
 8005616:	2200      	movs	r2, #0
 8005618:	663b      	str	r3, [r7, #96]	@ 0x60
 800561a:	667a      	str	r2, [r7, #100]	@ 0x64
 800561c:	f04f 0200 	mov.w	r2, #0
 8005620:	f04f 0300 	mov.w	r3, #0
 8005624:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8005628:	4649      	mov	r1, r9
 800562a:	008b      	lsls	r3, r1, #2
 800562c:	4641      	mov	r1, r8
 800562e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005632:	4641      	mov	r1, r8
 8005634:	008a      	lsls	r2, r1, #2
 8005636:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800563a:	f7fa fe19 	bl	8000270 <__aeabi_uldivmod>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4b0d      	ldr	r3, [pc, #52]	@ (8005678 <UART_SetConfig+0x4e4>)
 8005644:	fba3 1302 	umull	r1, r3, r3, r2
 8005648:	095b      	lsrs	r3, r3, #5
 800564a:	2164      	movs	r1, #100	@ 0x64
 800564c:	fb01 f303 	mul.w	r3, r1, r3
 8005650:	1ad3      	subs	r3, r2, r3
 8005652:	011b      	lsls	r3, r3, #4
 8005654:	3332      	adds	r3, #50	@ 0x32
 8005656:	4a08      	ldr	r2, [pc, #32]	@ (8005678 <UART_SetConfig+0x4e4>)
 8005658:	fba2 2303 	umull	r2, r3, r2, r3
 800565c:	095b      	lsrs	r3, r3, #5
 800565e:	f003 020f 	and.w	r2, r3, #15
 8005662:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	4422      	add	r2, r4
 800566a:	609a      	str	r2, [r3, #8]
}
 800566c:	bf00      	nop
 800566e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005672:	46bd      	mov	sp, r7
 8005674:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005678:	51eb851f 	.word	0x51eb851f

0800567c <__NVIC_SetPriority>:
{
 800567c:	b480      	push	{r7}
 800567e:	b083      	sub	sp, #12
 8005680:	af00      	add	r7, sp, #0
 8005682:	4603      	mov	r3, r0
 8005684:	6039      	str	r1, [r7, #0]
 8005686:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005688:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800568c:	2b00      	cmp	r3, #0
 800568e:	db0a      	blt.n	80056a6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005690:	683b      	ldr	r3, [r7, #0]
 8005692:	b2da      	uxtb	r2, r3
 8005694:	490c      	ldr	r1, [pc, #48]	@ (80056c8 <__NVIC_SetPriority+0x4c>)
 8005696:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800569a:	0112      	lsls	r2, r2, #4
 800569c:	b2d2      	uxtb	r2, r2
 800569e:	440b      	add	r3, r1
 80056a0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80056a4:	e00a      	b.n	80056bc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80056a6:	683b      	ldr	r3, [r7, #0]
 80056a8:	b2da      	uxtb	r2, r3
 80056aa:	4908      	ldr	r1, [pc, #32]	@ (80056cc <__NVIC_SetPriority+0x50>)
 80056ac:	79fb      	ldrb	r3, [r7, #7]
 80056ae:	f003 030f 	and.w	r3, r3, #15
 80056b2:	3b04      	subs	r3, #4
 80056b4:	0112      	lsls	r2, r2, #4
 80056b6:	b2d2      	uxtb	r2, r2
 80056b8:	440b      	add	r3, r1
 80056ba:	761a      	strb	r2, [r3, #24]
}
 80056bc:	bf00      	nop
 80056be:	370c      	adds	r7, #12
 80056c0:	46bd      	mov	sp, r7
 80056c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056c6:	4770      	bx	lr
 80056c8:	e000e100 	.word	0xe000e100
 80056cc:	e000ed00 	.word	0xe000ed00

080056d0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80056d0:	b580      	push	{r7, lr}
 80056d2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80056d4:	4b05      	ldr	r3, [pc, #20]	@ (80056ec <SysTick_Handler+0x1c>)
 80056d6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80056d8:	f001 fdf4 	bl	80072c4 <xTaskGetSchedulerState>
 80056dc:	4603      	mov	r3, r0
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d001      	beq.n	80056e6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80056e2:	f002 fbe9 	bl	8007eb8 <xPortSysTickHandler>
  }
}
 80056e6:	bf00      	nop
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	e000e010 	.word	0xe000e010

080056f0 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 80056f0:	b580      	push	{r7, lr}
 80056f2:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80056f4:	2100      	movs	r1, #0
 80056f6:	f06f 0004 	mvn.w	r0, #4
 80056fa:	f7ff ffbf 	bl	800567c <__NVIC_SetPriority>
#endif
}
 80056fe:	bf00      	nop
 8005700:	bd80      	pop	{r7, pc}
	...

08005704 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8005704:	b480      	push	{r7}
 8005706:	b083      	sub	sp, #12
 8005708:	af00      	add	r7, sp, #0
 */
__STATIC_FORCEINLINE uint32_t __get_IPSR(void)
{
  uint32_t result;

  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800570a:	f3ef 8305 	mrs	r3, IPSR
 800570e:	603b      	str	r3, [r7, #0]
  return(result);
 8005710:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005712:	2b00      	cmp	r3, #0
 8005714:	d003      	beq.n	800571e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8005716:	f06f 0305 	mvn.w	r3, #5
 800571a:	607b      	str	r3, [r7, #4]
 800571c:	e00c      	b.n	8005738 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 800571e:	4b0a      	ldr	r3, [pc, #40]	@ (8005748 <osKernelInitialize+0x44>)
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d105      	bne.n	8005732 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8005726:	4b08      	ldr	r3, [pc, #32]	@ (8005748 <osKernelInitialize+0x44>)
 8005728:	2201      	movs	r2, #1
 800572a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800572c:	2300      	movs	r3, #0
 800572e:	607b      	str	r3, [r7, #4]
 8005730:	e002      	b.n	8005738 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8005732:	f04f 33ff 	mov.w	r3, #4294967295
 8005736:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005738:	687b      	ldr	r3, [r7, #4]
}
 800573a:	4618      	mov	r0, r3
 800573c:	370c      	adds	r7, #12
 800573e:	46bd      	mov	sp, r7
 8005740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005744:	4770      	bx	lr
 8005746:	bf00      	nop
 8005748:	20000304 	.word	0x20000304

0800574c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800574c:	b580      	push	{r7, lr}
 800574e:	b082      	sub	sp, #8
 8005750:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005752:	f3ef 8305 	mrs	r3, IPSR
 8005756:	603b      	str	r3, [r7, #0]
  return(result);
 8005758:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 800575a:	2b00      	cmp	r3, #0
 800575c:	d003      	beq.n	8005766 <osKernelStart+0x1a>
    stat = osErrorISR;
 800575e:	f06f 0305 	mvn.w	r3, #5
 8005762:	607b      	str	r3, [r7, #4]
 8005764:	e010      	b.n	8005788 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005766:	4b0b      	ldr	r3, [pc, #44]	@ (8005794 <osKernelStart+0x48>)
 8005768:	681b      	ldr	r3, [r3, #0]
 800576a:	2b01      	cmp	r3, #1
 800576c:	d109      	bne.n	8005782 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800576e:	f7ff ffbf 	bl	80056f0 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8005772:	4b08      	ldr	r3, [pc, #32]	@ (8005794 <osKernelStart+0x48>)
 8005774:	2202      	movs	r2, #2
 8005776:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005778:	f001 f940 	bl	80069fc <vTaskStartScheduler>
      stat = osOK;
 800577c:	2300      	movs	r3, #0
 800577e:	607b      	str	r3, [r7, #4]
 8005780:	e002      	b.n	8005788 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8005782:	f04f 33ff 	mov.w	r3, #4294967295
 8005786:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005788:	687b      	ldr	r3, [r7, #4]
}
 800578a:	4618      	mov	r0, r3
 800578c:	3708      	adds	r7, #8
 800578e:	46bd      	mov	sp, r7
 8005790:	bd80      	pop	{r7, pc}
 8005792:	bf00      	nop
 8005794:	20000304 	.word	0x20000304

08005798 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8005798:	b580      	push	{r7, lr}
 800579a:	b08e      	sub	sp, #56	@ 0x38
 800579c:	af04      	add	r7, sp, #16
 800579e:	60f8      	str	r0, [r7, #12]
 80057a0:	60b9      	str	r1, [r7, #8]
 80057a2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 80057a4:	2300      	movs	r3, #0
 80057a6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80057a8:	f3ef 8305 	mrs	r3, IPSR
 80057ac:	617b      	str	r3, [r7, #20]
  return(result);
 80057ae:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	d17e      	bne.n	80058b2 <osThreadNew+0x11a>
 80057b4:	68fb      	ldr	r3, [r7, #12]
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d07b      	beq.n	80058b2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 80057ba:	2380      	movs	r3, #128	@ 0x80
 80057bc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 80057be:	2318      	movs	r3, #24
 80057c0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 80057c2:	2300      	movs	r3, #0
 80057c4:	627b      	str	r3, [r7, #36]	@ 0x24
    mem  = -1;
 80057c6:	f04f 33ff 	mov.w	r3, #4294967295
 80057ca:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2b00      	cmp	r3, #0
 80057d0:	d045      	beq.n	800585e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 80057d2:	687b      	ldr	r3, [r7, #4]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	d002      	beq.n	80057e0 <osThreadNew+0x48>
        name = attr->name;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	627b      	str	r3, [r7, #36]	@ 0x24
      }
      if (attr->priority != osPriorityNone) {
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	699b      	ldr	r3, [r3, #24]
 80057e4:	2b00      	cmp	r3, #0
 80057e6:	d002      	beq.n	80057ee <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	699b      	ldr	r3, [r3, #24]
 80057ec:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80057ee:	69fb      	ldr	r3, [r7, #28]
 80057f0:	2b00      	cmp	r3, #0
 80057f2:	d008      	beq.n	8005806 <osThreadNew+0x6e>
 80057f4:	69fb      	ldr	r3, [r7, #28]
 80057f6:	2b38      	cmp	r3, #56	@ 0x38
 80057f8:	d805      	bhi.n	8005806 <osThreadNew+0x6e>
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	685b      	ldr	r3, [r3, #4]
 80057fe:	f003 0301 	and.w	r3, r3, #1
 8005802:	2b00      	cmp	r3, #0
 8005804:	d001      	beq.n	800580a <osThreadNew+0x72>
        return (NULL);
 8005806:	2300      	movs	r3, #0
 8005808:	e054      	b.n	80058b4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	695b      	ldr	r3, [r3, #20]
 800580e:	2b00      	cmp	r3, #0
 8005810:	d003      	beq.n	800581a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	089b      	lsrs	r3, r3, #2
 8005818:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	689b      	ldr	r3, [r3, #8]
 800581e:	2b00      	cmp	r3, #0
 8005820:	d00e      	beq.n	8005840 <osThreadNew+0xa8>
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	68db      	ldr	r3, [r3, #12]
 8005826:	2ba7      	cmp	r3, #167	@ 0xa7
 8005828:	d90a      	bls.n	8005840 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800582a:	687b      	ldr	r3, [r7, #4]
 800582c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800582e:	2b00      	cmp	r3, #0
 8005830:	d006      	beq.n	8005840 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	695b      	ldr	r3, [r3, #20]
 8005836:	2b00      	cmp	r3, #0
 8005838:	d002      	beq.n	8005840 <osThreadNew+0xa8>
        mem = 1;
 800583a:	2301      	movs	r3, #1
 800583c:	61bb      	str	r3, [r7, #24]
 800583e:	e010      	b.n	8005862 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	689b      	ldr	r3, [r3, #8]
 8005844:	2b00      	cmp	r3, #0
 8005846:	d10c      	bne.n	8005862 <osThreadNew+0xca>
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	68db      	ldr	r3, [r3, #12]
 800584c:	2b00      	cmp	r3, #0
 800584e:	d108      	bne.n	8005862 <osThreadNew+0xca>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	691b      	ldr	r3, [r3, #16]
 8005854:	2b00      	cmp	r3, #0
 8005856:	d104      	bne.n	8005862 <osThreadNew+0xca>
          mem = 0;
 8005858:	2300      	movs	r3, #0
 800585a:	61bb      	str	r3, [r7, #24]
 800585c:	e001      	b.n	8005862 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 800585e:	2300      	movs	r3, #0
 8005860:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005862:	69bb      	ldr	r3, [r7, #24]
 8005864:	2b01      	cmp	r3, #1
 8005866:	d110      	bne.n	800588a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005870:	9202      	str	r2, [sp, #8]
 8005872:	9301      	str	r3, [sp, #4]
 8005874:	69fb      	ldr	r3, [r7, #28]
 8005876:	9300      	str	r3, [sp, #0]
 8005878:	68bb      	ldr	r3, [r7, #8]
 800587a:	6a3a      	ldr	r2, [r7, #32]
 800587c:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 800587e:	68f8      	ldr	r0, [r7, #12]
 8005880:	f000 fec8 	bl	8006614 <xTaskCreateStatic>
 8005884:	4603      	mov	r3, r0
 8005886:	613b      	str	r3, [r7, #16]
 8005888:	e013      	b.n	80058b2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 800588a:	69bb      	ldr	r3, [r7, #24]
 800588c:	2b00      	cmp	r3, #0
 800588e:	d110      	bne.n	80058b2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005890:	6a3b      	ldr	r3, [r7, #32]
 8005892:	b29a      	uxth	r2, r3
 8005894:	f107 0310 	add.w	r3, r7, #16
 8005898:	9301      	str	r3, [sp, #4]
 800589a:	69fb      	ldr	r3, [r7, #28]
 800589c:	9300      	str	r3, [sp, #0]
 800589e:	68bb      	ldr	r3, [r7, #8]
 80058a0:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 80058a2:	68f8      	ldr	r0, [r7, #12]
 80058a4:	f000 ff16 	bl	80066d4 <xTaskCreate>
 80058a8:	4603      	mov	r3, r0
 80058aa:	2b01      	cmp	r3, #1
 80058ac:	d001      	beq.n	80058b2 <osThreadNew+0x11a>
            hTask = NULL;
 80058ae:	2300      	movs	r3, #0
 80058b0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 80058b2:	693b      	ldr	r3, [r7, #16]
}
 80058b4:	4618      	mov	r0, r3
 80058b6:	3728      	adds	r7, #40	@ 0x28
 80058b8:	46bd      	mov	sp, r7
 80058ba:	bd80      	pop	{r7, pc}

080058bc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 80058bc:	b580      	push	{r7, lr}
 80058be:	b084      	sub	sp, #16
 80058c0:	af00      	add	r7, sp, #0
 80058c2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058c4:	f3ef 8305 	mrs	r3, IPSR
 80058c8:	60bb      	str	r3, [r7, #8]
  return(result);
 80058ca:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d003      	beq.n	80058d8 <osDelay+0x1c>
    stat = osErrorISR;
 80058d0:	f06f 0305 	mvn.w	r3, #5
 80058d4:	60fb      	str	r3, [r7, #12]
 80058d6:	e007      	b.n	80058e8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	2b00      	cmp	r3, #0
 80058e0:	d002      	beq.n	80058e8 <osDelay+0x2c>
      vTaskDelay(ticks);
 80058e2:	6878      	ldr	r0, [r7, #4]
 80058e4:	f001 f854 	bl	8006990 <vTaskDelay>
    }
  }

  return (stat);
 80058e8:	68fb      	ldr	r3, [r7, #12]
}
 80058ea:	4618      	mov	r0, r3
 80058ec:	3710      	adds	r7, #16
 80058ee:	46bd      	mov	sp, r7
 80058f0:	bd80      	pop	{r7, pc}

080058f2 <osMessageQueueNew>:
  return (stat);
}

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 80058f2:	b580      	push	{r7, lr}
 80058f4:	b08a      	sub	sp, #40	@ 0x28
 80058f6:	af02      	add	r7, sp, #8
 80058f8:	60f8      	str	r0, [r7, #12]
 80058fa:	60b9      	str	r1, [r7, #8]
 80058fc:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 80058fe:	2300      	movs	r3, #0
 8005900:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005902:	f3ef 8305 	mrs	r3, IPSR
 8005906:	613b      	str	r3, [r7, #16]
  return(result);
 8005908:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 800590a:	2b00      	cmp	r3, #0
 800590c:	d15f      	bne.n	80059ce <osMessageQueueNew+0xdc>
 800590e:	68fb      	ldr	r3, [r7, #12]
 8005910:	2b00      	cmp	r3, #0
 8005912:	d05c      	beq.n	80059ce <osMessageQueueNew+0xdc>
 8005914:	68bb      	ldr	r3, [r7, #8]
 8005916:	2b00      	cmp	r3, #0
 8005918:	d059      	beq.n	80059ce <osMessageQueueNew+0xdc>
    mem = -1;
 800591a:	f04f 33ff 	mov.w	r3, #4294967295
 800591e:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2b00      	cmp	r3, #0
 8005924:	d029      	beq.n	800597a <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005926:	687b      	ldr	r3, [r7, #4]
 8005928:	689b      	ldr	r3, [r3, #8]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d012      	beq.n	8005954 <osMessageQueueNew+0x62>
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	68db      	ldr	r3, [r3, #12]
 8005932:	2b4f      	cmp	r3, #79	@ 0x4f
 8005934:	d90e      	bls.n	8005954 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 800593a:	2b00      	cmp	r3, #0
 800593c:	d00a      	beq.n	8005954 <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	695a      	ldr	r2, [r3, #20]
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	68b9      	ldr	r1, [r7, #8]
 8005946:	fb01 f303 	mul.w	r3, r1, r3
 800594a:	429a      	cmp	r2, r3
 800594c:	d302      	bcc.n	8005954 <osMessageQueueNew+0x62>
        mem = 1;
 800594e:	2301      	movs	r3, #1
 8005950:	61bb      	str	r3, [r7, #24]
 8005952:	e014      	b.n	800597e <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	689b      	ldr	r3, [r3, #8]
 8005958:	2b00      	cmp	r3, #0
 800595a:	d110      	bne.n	800597e <osMessageQueueNew+0x8c>
 800595c:	687b      	ldr	r3, [r7, #4]
 800595e:	68db      	ldr	r3, [r3, #12]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d10c      	bne.n	800597e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005968:	2b00      	cmp	r3, #0
 800596a:	d108      	bne.n	800597e <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	695b      	ldr	r3, [r3, #20]
 8005970:	2b00      	cmp	r3, #0
 8005972:	d104      	bne.n	800597e <osMessageQueueNew+0x8c>
          mem = 0;
 8005974:	2300      	movs	r3, #0
 8005976:	61bb      	str	r3, [r7, #24]
 8005978:	e001      	b.n	800597e <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 800597a:	2300      	movs	r3, #0
 800597c:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 800597e:	69bb      	ldr	r3, [r7, #24]
 8005980:	2b01      	cmp	r3, #1
 8005982:	d10b      	bne.n	800599c <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	691a      	ldr	r2, [r3, #16]
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	689b      	ldr	r3, [r3, #8]
 800598c:	2100      	movs	r1, #0
 800598e:	9100      	str	r1, [sp, #0]
 8005990:	68b9      	ldr	r1, [r7, #8]
 8005992:	68f8      	ldr	r0, [r7, #12]
 8005994:	f000 f972 	bl	8005c7c <xQueueGenericCreateStatic>
 8005998:	61f8      	str	r0, [r7, #28]
 800599a:	e008      	b.n	80059ae <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 800599c:	69bb      	ldr	r3, [r7, #24]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d105      	bne.n	80059ae <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 80059a2:	2200      	movs	r2, #0
 80059a4:	68b9      	ldr	r1, [r7, #8]
 80059a6:	68f8      	ldr	r0, [r7, #12]
 80059a8:	f000 f9e5 	bl	8005d76 <xQueueGenericCreate>
 80059ac:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 80059ae:	69fb      	ldr	r3, [r7, #28]
 80059b0:	2b00      	cmp	r3, #0
 80059b2:	d00c      	beq.n	80059ce <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2b00      	cmp	r3, #0
 80059b8:	d003      	beq.n	80059c2 <osMessageQueueNew+0xd0>
        name = attr->name;
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	681b      	ldr	r3, [r3, #0]
 80059be:	617b      	str	r3, [r7, #20]
 80059c0:	e001      	b.n	80059c6 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 80059c2:	2300      	movs	r3, #0
 80059c4:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 80059c6:	6979      	ldr	r1, [r7, #20]
 80059c8:	69f8      	ldr	r0, [r7, #28]
 80059ca:	f000 fdc5 	bl	8006558 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 80059ce:	69fb      	ldr	r3, [r7, #28]
}
 80059d0:	4618      	mov	r0, r3
 80059d2:	3720      	adds	r7, #32
 80059d4:	46bd      	mov	sp, r7
 80059d6:	bd80      	pop	{r7, pc}

080059d8 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	60f8      	str	r0, [r7, #12]
 80059e0:	60b9      	str	r1, [r7, #8]
 80059e2:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 80059e4:	68fb      	ldr	r3, [r7, #12]
 80059e6:	4a07      	ldr	r2, [pc, #28]	@ (8005a04 <vApplicationGetIdleTaskMemory+0x2c>)
 80059e8:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 80059ea:	68bb      	ldr	r3, [r7, #8]
 80059ec:	4a06      	ldr	r2, [pc, #24]	@ (8005a08 <vApplicationGetIdleTaskMemory+0x30>)
 80059ee:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2280      	movs	r2, #128	@ 0x80
 80059f4:	601a      	str	r2, [r3, #0]
}
 80059f6:	bf00      	nop
 80059f8:	3714      	adds	r7, #20
 80059fa:	46bd      	mov	sp, r7
 80059fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a00:	4770      	bx	lr
 8005a02:	bf00      	nop
 8005a04:	20000308 	.word	0x20000308
 8005a08:	200003b0 	.word	0x200003b0

08005a0c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	60f8      	str	r0, [r7, #12]
 8005a14:	60b9      	str	r1, [r7, #8]
 8005a16:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8005a18:	68fb      	ldr	r3, [r7, #12]
 8005a1a:	4a07      	ldr	r2, [pc, #28]	@ (8005a38 <vApplicationGetTimerTaskMemory+0x2c>)
 8005a1c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8005a1e:	68bb      	ldr	r3, [r7, #8]
 8005a20:	4a06      	ldr	r2, [pc, #24]	@ (8005a3c <vApplicationGetTimerTaskMemory+0x30>)
 8005a22:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8005a2a:	601a      	str	r2, [r3, #0]
}
 8005a2c:	bf00      	nop
 8005a2e:	3714      	adds	r7, #20
 8005a30:	46bd      	mov	sp, r7
 8005a32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a36:	4770      	bx	lr
 8005a38:	200005b0 	.word	0x200005b0
 8005a3c:	20000658 	.word	0x20000658

08005a40 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8005a40:	b480      	push	{r7}
 8005a42:	b083      	sub	sp, #12
 8005a44:	af00      	add	r7, sp, #0
 8005a46:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	f103 0208 	add.w	r2, r3, #8
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	f04f 32ff 	mov.w	r2, #4294967295
 8005a58:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	f103 0208 	add.w	r2, r3, #8
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	f103 0208 	add.w	r2, r3, #8
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	2200      	movs	r2, #0
 8005a72:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	2200      	movs	r2, #0
 8005a8c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8005a8e:	bf00      	nop
 8005a90:	370c      	adds	r7, #12
 8005a92:	46bd      	mov	sp, r7
 8005a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a98:	4770      	bx	lr

08005a9a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005a9a:	b480      	push	{r7}
 8005a9c:	b085      	sub	sp, #20
 8005a9e:	af00      	add	r7, sp, #0
 8005aa0:	6078      	str	r0, [r7, #4]
 8005aa2:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	685b      	ldr	r3, [r3, #4]
 8005aa8:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8005aaa:	683b      	ldr	r3, [r7, #0]
 8005aac:	68fa      	ldr	r2, [r7, #12]
 8005aae:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8005ab0:	68fb      	ldr	r3, [r7, #12]
 8005ab2:	689a      	ldr	r2, [r3, #8]
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8005ab8:	68fb      	ldr	r3, [r7, #12]
 8005aba:	689b      	ldr	r3, [r3, #8]
 8005abc:	683a      	ldr	r2, [r7, #0]
 8005abe:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8005ac0:	68fb      	ldr	r3, [r7, #12]
 8005ac2:	683a      	ldr	r2, [r7, #0]
 8005ac4:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8005ac6:	683b      	ldr	r3, [r7, #0]
 8005ac8:	687a      	ldr	r2, [r7, #4]
 8005aca:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	1c5a      	adds	r2, r3, #1
 8005ad2:	687b      	ldr	r3, [r7, #4]
 8005ad4:	601a      	str	r2, [r3, #0]
}
 8005ad6:	bf00      	nop
 8005ad8:	3714      	adds	r7, #20
 8005ada:	46bd      	mov	sp, r7
 8005adc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ae0:	4770      	bx	lr

08005ae2 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8005ae2:	b480      	push	{r7}
 8005ae4:	b085      	sub	sp, #20
 8005ae6:	af00      	add	r7, sp, #0
 8005ae8:	6078      	str	r0, [r7, #4]
 8005aea:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8005aec:	683b      	ldr	r3, [r7, #0]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8005af2:	68bb      	ldr	r3, [r7, #8]
 8005af4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005af8:	d103      	bne.n	8005b02 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	691b      	ldr	r3, [r3, #16]
 8005afe:	60fb      	str	r3, [r7, #12]
 8005b00:	e00c      	b.n	8005b1c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	3308      	adds	r3, #8
 8005b06:	60fb      	str	r3, [r7, #12]
 8005b08:	e002      	b.n	8005b10 <vListInsert+0x2e>
 8005b0a:	68fb      	ldr	r3, [r7, #12]
 8005b0c:	685b      	ldr	r3, [r3, #4]
 8005b0e:	60fb      	str	r3, [r7, #12]
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	685b      	ldr	r3, [r3, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	68ba      	ldr	r2, [r7, #8]
 8005b18:	429a      	cmp	r2, r3
 8005b1a:	d2f6      	bcs.n	8005b0a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8005b1c:	68fb      	ldr	r3, [r7, #12]
 8005b1e:	685a      	ldr	r2, [r3, #4]
 8005b20:	683b      	ldr	r3, [r7, #0]
 8005b22:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8005b24:	683b      	ldr	r3, [r7, #0]
 8005b26:	685b      	ldr	r3, [r3, #4]
 8005b28:	683a      	ldr	r2, [r7, #0]
 8005b2a:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8005b2c:	683b      	ldr	r3, [r7, #0]
 8005b2e:	68fa      	ldr	r2, [r7, #12]
 8005b30:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8005b32:	68fb      	ldr	r3, [r7, #12]
 8005b34:	683a      	ldr	r2, [r7, #0]
 8005b36:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8005b38:	683b      	ldr	r3, [r7, #0]
 8005b3a:	687a      	ldr	r2, [r7, #4]
 8005b3c:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	1c5a      	adds	r2, r3, #1
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	601a      	str	r2, [r3, #0]
}
 8005b48:	bf00      	nop
 8005b4a:	3714      	adds	r7, #20
 8005b4c:	46bd      	mov	sp, r7
 8005b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b52:	4770      	bx	lr

08005b54 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8005b54:	b480      	push	{r7}
 8005b56:	b085      	sub	sp, #20
 8005b58:	af00      	add	r7, sp, #0
 8005b5a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	691b      	ldr	r3, [r3, #16]
 8005b60:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	685b      	ldr	r3, [r3, #4]
 8005b66:	687a      	ldr	r2, [r7, #4]
 8005b68:	6892      	ldr	r2, [r2, #8]
 8005b6a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	689b      	ldr	r3, [r3, #8]
 8005b70:	687a      	ldr	r2, [r7, #4]
 8005b72:	6852      	ldr	r2, [r2, #4]
 8005b74:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	685b      	ldr	r3, [r3, #4]
 8005b7a:	687a      	ldr	r2, [r7, #4]
 8005b7c:	429a      	cmp	r2, r3
 8005b7e:	d103      	bne.n	8005b88 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	689a      	ldr	r2, [r3, #8]
 8005b84:	68fb      	ldr	r3, [r7, #12]
 8005b86:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	2200      	movs	r2, #0
 8005b8c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8005b8e:	68fb      	ldr	r3, [r7, #12]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	1e5a      	subs	r2, r3, #1
 8005b94:	68fb      	ldr	r3, [r7, #12]
 8005b96:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8005b98:	68fb      	ldr	r3, [r7, #12]
 8005b9a:	681b      	ldr	r3, [r3, #0]
}
 8005b9c:	4618      	mov	r0, r3
 8005b9e:	3714      	adds	r7, #20
 8005ba0:	46bd      	mov	sp, r7
 8005ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ba6:	4770      	bx	lr

08005ba8 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8005ba8:	b580      	push	{r7, lr}
 8005baa:	b084      	sub	sp, #16
 8005bac:	af00      	add	r7, sp, #0
 8005bae:	6078      	str	r0, [r7, #4]
 8005bb0:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8005bb6:	68fb      	ldr	r3, [r7, #12]
 8005bb8:	2b00      	cmp	r3, #0
 8005bba:	d10b      	bne.n	8005bd4 <xQueueGenericReset+0x2c>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8005bbc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005bc0:	f383 8811 	msr	BASEPRI, r3
 8005bc4:	f3bf 8f6f 	isb	sy
 8005bc8:	f3bf 8f4f 	dsb	sy
 8005bcc:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8005bce:	bf00      	nop
 8005bd0:	bf00      	nop
 8005bd2:	e7fd      	b.n	8005bd0 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8005bd4:	f002 f8e0 	bl	8007d98 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bd8:	68fb      	ldr	r3, [r7, #12]
 8005bda:	681a      	ldr	r2, [r3, #0]
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005be0:	68f9      	ldr	r1, [r7, #12]
 8005be2:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005be4:	fb01 f303 	mul.w	r3, r1, r3
 8005be8:	441a      	add	r2, r3
 8005bea:	68fb      	ldr	r3, [r7, #12]
 8005bec:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8005bee:	68fb      	ldr	r3, [r7, #12]
 8005bf0:	2200      	movs	r2, #0
 8005bf2:	639a      	str	r2, [r3, #56]	@ 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8005bf4:	68fb      	ldr	r3, [r7, #12]
 8005bf6:	681a      	ldr	r2, [r3, #0]
 8005bf8:	68fb      	ldr	r3, [r7, #12]
 8005bfa:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	681a      	ldr	r2, [r3, #0]
 8005c00:	68fb      	ldr	r3, [r7, #12]
 8005c02:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005c04:	3b01      	subs	r3, #1
 8005c06:	68f9      	ldr	r1, [r7, #12]
 8005c08:	6c09      	ldr	r1, [r1, #64]	@ 0x40
 8005c0a:	fb01 f303 	mul.w	r3, r1, r3
 8005c0e:	441a      	add	r2, r3
 8005c10:	68fb      	ldr	r3, [r7, #12]
 8005c12:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8005c14:	68fb      	ldr	r3, [r7, #12]
 8005c16:	22ff      	movs	r2, #255	@ 0xff
 8005c18:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8005c1c:	68fb      	ldr	r3, [r7, #12]
 8005c1e:	22ff      	movs	r2, #255	@ 0xff
 8005c20:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

		if( xNewQueue == pdFALSE )
 8005c24:	683b      	ldr	r3, [r7, #0]
 8005c26:	2b00      	cmp	r3, #0
 8005c28:	d114      	bne.n	8005c54 <xQueueGenericReset+0xac>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8005c2a:	68fb      	ldr	r3, [r7, #12]
 8005c2c:	691b      	ldr	r3, [r3, #16]
 8005c2e:	2b00      	cmp	r3, #0
 8005c30:	d01a      	beq.n	8005c68 <xQueueGenericReset+0xc0>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8005c32:	68fb      	ldr	r3, [r7, #12]
 8005c34:	3310      	adds	r3, #16
 8005c36:	4618      	mov	r0, r3
 8005c38:	f001 f97e 	bl	8006f38 <xTaskRemoveFromEventList>
 8005c3c:	4603      	mov	r3, r0
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d012      	beq.n	8005c68 <xQueueGenericReset+0xc0>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8005c42:	4b0d      	ldr	r3, [pc, #52]	@ (8005c78 <xQueueGenericReset+0xd0>)
 8005c44:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005c48:	601a      	str	r2, [r3, #0]
 8005c4a:	f3bf 8f4f 	dsb	sy
 8005c4e:	f3bf 8f6f 	isb	sy
 8005c52:	e009      	b.n	8005c68 <xQueueGenericReset+0xc0>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8005c54:	68fb      	ldr	r3, [r7, #12]
 8005c56:	3310      	adds	r3, #16
 8005c58:	4618      	mov	r0, r3
 8005c5a:	f7ff fef1 	bl	8005a40 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8005c5e:	68fb      	ldr	r3, [r7, #12]
 8005c60:	3324      	adds	r3, #36	@ 0x24
 8005c62:	4618      	mov	r0, r3
 8005c64:	f7ff feec 	bl	8005a40 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8005c68:	f002 f8c8 	bl	8007dfc <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8005c6c:	2301      	movs	r3, #1
}
 8005c6e:	4618      	mov	r0, r3
 8005c70:	3710      	adds	r7, #16
 8005c72:	46bd      	mov	sp, r7
 8005c74:	bd80      	pop	{r7, pc}
 8005c76:	bf00      	nop
 8005c78:	e000ed04 	.word	0xe000ed04

08005c7c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8005c7c:	b580      	push	{r7, lr}
 8005c7e:	b08e      	sub	sp, #56	@ 0x38
 8005c80:	af02      	add	r7, sp, #8
 8005c82:	60f8      	str	r0, [r7, #12]
 8005c84:	60b9      	str	r1, [r7, #8]
 8005c86:	607a      	str	r2, [r7, #4]
 8005c88:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005c8a:	68fb      	ldr	r3, [r7, #12]
 8005c8c:	2b00      	cmp	r3, #0
 8005c8e:	d10b      	bne.n	8005ca8 <xQueueGenericCreateStatic+0x2c>
	__asm volatile
 8005c90:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005c94:	f383 8811 	msr	BASEPRI, r3
 8005c98:	f3bf 8f6f 	isb	sy
 8005c9c:	f3bf 8f4f 	dsb	sy
 8005ca0:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005ca2:	bf00      	nop
 8005ca4:	bf00      	nop
 8005ca6:	e7fd      	b.n	8005ca4 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8005ca8:	683b      	ldr	r3, [r7, #0]
 8005caa:	2b00      	cmp	r3, #0
 8005cac:	d10b      	bne.n	8005cc6 <xQueueGenericCreateStatic+0x4a>
	__asm volatile
 8005cae:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005cb2:	f383 8811 	msr	BASEPRI, r3
 8005cb6:	f3bf 8f6f 	isb	sy
 8005cba:	f3bf 8f4f 	dsb	sy
 8005cbe:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005cc0:	bf00      	nop
 8005cc2:	bf00      	nop
 8005cc4:	e7fd      	b.n	8005cc2 <xQueueGenericCreateStatic+0x46>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	d002      	beq.n	8005cd2 <xQueueGenericCreateStatic+0x56>
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	2b00      	cmp	r3, #0
 8005cd0:	d001      	beq.n	8005cd6 <xQueueGenericCreateStatic+0x5a>
 8005cd2:	2301      	movs	r3, #1
 8005cd4:	e000      	b.n	8005cd8 <xQueueGenericCreateStatic+0x5c>
 8005cd6:	2300      	movs	r3, #0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d10b      	bne.n	8005cf4 <xQueueGenericCreateStatic+0x78>
	__asm volatile
 8005cdc:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ce0:	f383 8811 	msr	BASEPRI, r3
 8005ce4:	f3bf 8f6f 	isb	sy
 8005ce8:	f3bf 8f4f 	dsb	sy
 8005cec:	623b      	str	r3, [r7, #32]
}
 8005cee:	bf00      	nop
 8005cf0:	bf00      	nop
 8005cf2:	e7fd      	b.n	8005cf0 <xQueueGenericCreateStatic+0x74>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	2b00      	cmp	r3, #0
 8005cf8:	d102      	bne.n	8005d00 <xQueueGenericCreateStatic+0x84>
 8005cfa:	68bb      	ldr	r3, [r7, #8]
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d101      	bne.n	8005d04 <xQueueGenericCreateStatic+0x88>
 8005d00:	2301      	movs	r3, #1
 8005d02:	e000      	b.n	8005d06 <xQueueGenericCreateStatic+0x8a>
 8005d04:	2300      	movs	r3, #0
 8005d06:	2b00      	cmp	r3, #0
 8005d08:	d10b      	bne.n	8005d22 <xQueueGenericCreateStatic+0xa6>
	__asm volatile
 8005d0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d0e:	f383 8811 	msr	BASEPRI, r3
 8005d12:	f3bf 8f6f 	isb	sy
 8005d16:	f3bf 8f4f 	dsb	sy
 8005d1a:	61fb      	str	r3, [r7, #28]
}
 8005d1c:	bf00      	nop
 8005d1e:	bf00      	nop
 8005d20:	e7fd      	b.n	8005d1e <xQueueGenericCreateStatic+0xa2>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8005d22:	2350      	movs	r3, #80	@ 0x50
 8005d24:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8005d26:	697b      	ldr	r3, [r7, #20]
 8005d28:	2b50      	cmp	r3, #80	@ 0x50
 8005d2a:	d00b      	beq.n	8005d44 <xQueueGenericCreateStatic+0xc8>
	__asm volatile
 8005d2c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d30:	f383 8811 	msr	BASEPRI, r3
 8005d34:	f3bf 8f6f 	isb	sy
 8005d38:	f3bf 8f4f 	dsb	sy
 8005d3c:	61bb      	str	r3, [r7, #24]
}
 8005d3e:	bf00      	nop
 8005d40:	bf00      	nop
 8005d42:	e7fd      	b.n	8005d40 <xQueueGenericCreateStatic+0xc4>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8005d44:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8005d46:	683b      	ldr	r3, [r7, #0]
 8005d48:	62fb      	str	r3, [r7, #44]	@ 0x2c

		if( pxNewQueue != NULL )
 8005d4a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d4c:	2b00      	cmp	r3, #0
 8005d4e:	d00d      	beq.n	8005d6c <xQueueGenericCreateStatic+0xf0>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8005d50:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d52:	2201      	movs	r2, #1
 8005d54:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005d58:	f897 2038 	ldrb.w	r2, [r7, #56]	@ 0x38
 8005d5c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005d5e:	9300      	str	r3, [sp, #0]
 8005d60:	4613      	mov	r3, r2
 8005d62:	687a      	ldr	r2, [r7, #4]
 8005d64:	68b9      	ldr	r1, [r7, #8]
 8005d66:	68f8      	ldr	r0, [r7, #12]
 8005d68:	f000 f840 	bl	8005dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005d6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
	}
 8005d6e:	4618      	mov	r0, r3
 8005d70:	3730      	adds	r7, #48	@ 0x30
 8005d72:	46bd      	mov	sp, r7
 8005d74:	bd80      	pop	{r7, pc}

08005d76 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 8005d76:	b580      	push	{r7, lr}
 8005d78:	b08a      	sub	sp, #40	@ 0x28
 8005d7a:	af02      	add	r7, sp, #8
 8005d7c:	60f8      	str	r0, [r7, #12]
 8005d7e:	60b9      	str	r1, [r7, #8]
 8005d80:	4613      	mov	r3, r2
 8005d82:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d10b      	bne.n	8005da2 <xQueueGenericCreate+0x2c>
	__asm volatile
 8005d8a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005d8e:	f383 8811 	msr	BASEPRI, r3
 8005d92:	f3bf 8f6f 	isb	sy
 8005d96:	f3bf 8f4f 	dsb	sy
 8005d9a:	613b      	str	r3, [r7, #16]
}
 8005d9c:	bf00      	nop
 8005d9e:	bf00      	nop
 8005da0:	e7fd      	b.n	8005d9e <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8005da2:	68fb      	ldr	r3, [r7, #12]
 8005da4:	68ba      	ldr	r2, [r7, #8]
 8005da6:	fb02 f303 	mul.w	r3, r2, r3
 8005daa:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 8005dac:	69fb      	ldr	r3, [r7, #28]
 8005dae:	3350      	adds	r3, #80	@ 0x50
 8005db0:	4618      	mov	r0, r3
 8005db2:	f002 f913 	bl	8007fdc <pvPortMalloc>
 8005db6:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8005db8:	69bb      	ldr	r3, [r7, #24]
 8005dba:	2b00      	cmp	r3, #0
 8005dbc:	d011      	beq.n	8005de2 <xQueueGenericCreate+0x6c>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 8005dbe:	69bb      	ldr	r3, [r7, #24]
 8005dc0:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8005dc2:	697b      	ldr	r3, [r7, #20]
 8005dc4:	3350      	adds	r3, #80	@ 0x50
 8005dc6:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8005dc8:	69bb      	ldr	r3, [r7, #24]
 8005dca:	2200      	movs	r2, #0
 8005dcc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8005dd0:	79fa      	ldrb	r2, [r7, #7]
 8005dd2:	69bb      	ldr	r3, [r7, #24]
 8005dd4:	9300      	str	r3, [sp, #0]
 8005dd6:	4613      	mov	r3, r2
 8005dd8:	697a      	ldr	r2, [r7, #20]
 8005dda:	68b9      	ldr	r1, [r7, #8]
 8005ddc:	68f8      	ldr	r0, [r7, #12]
 8005dde:	f000 f805 	bl	8005dec <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8005de2:	69bb      	ldr	r3, [r7, #24]
	}
 8005de4:	4618      	mov	r0, r3
 8005de6:	3720      	adds	r7, #32
 8005de8:	46bd      	mov	sp, r7
 8005dea:	bd80      	pop	{r7, pc}

08005dec <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8005dec:	b580      	push	{r7, lr}
 8005dee:	b084      	sub	sp, #16
 8005df0:	af00      	add	r7, sp, #0
 8005df2:	60f8      	str	r0, [r7, #12]
 8005df4:	60b9      	str	r1, [r7, #8]
 8005df6:	607a      	str	r2, [r7, #4]
 8005df8:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8005dfa:	68bb      	ldr	r3, [r7, #8]
 8005dfc:	2b00      	cmp	r3, #0
 8005dfe:	d103      	bne.n	8005e08 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	69ba      	ldr	r2, [r7, #24]
 8005e04:	601a      	str	r2, [r3, #0]
 8005e06:	e002      	b.n	8005e0e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8005e08:	69bb      	ldr	r3, [r7, #24]
 8005e0a:	687a      	ldr	r2, [r7, #4]
 8005e0c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8005e0e:	69bb      	ldr	r3, [r7, #24]
 8005e10:	68fa      	ldr	r2, [r7, #12]
 8005e12:	63da      	str	r2, [r3, #60]	@ 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8005e14:	69bb      	ldr	r3, [r7, #24]
 8005e16:	68ba      	ldr	r2, [r7, #8]
 8005e18:	641a      	str	r2, [r3, #64]	@ 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8005e1a:	2101      	movs	r1, #1
 8005e1c:	69b8      	ldr	r0, [r7, #24]
 8005e1e:	f7ff fec3 	bl	8005ba8 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8005e22:	69bb      	ldr	r3, [r7, #24]
 8005e24:	78fa      	ldrb	r2, [r7, #3]
 8005e26:	f883 204c 	strb.w	r2, [r3, #76]	@ 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8005e2a:	bf00      	nop
 8005e2c:	3710      	adds	r7, #16
 8005e2e:	46bd      	mov	sp, r7
 8005e30:	bd80      	pop	{r7, pc}
	...

08005e34 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8005e34:	b580      	push	{r7, lr}
 8005e36:	b08e      	sub	sp, #56	@ 0x38
 8005e38:	af00      	add	r7, sp, #0
 8005e3a:	60f8      	str	r0, [r7, #12]
 8005e3c:	60b9      	str	r1, [r7, #8]
 8005e3e:	607a      	str	r2, [r7, #4]
 8005e40:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8005e42:	2300      	movs	r3, #0
 8005e44:	637b      	str	r3, [r7, #52]	@ 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8005e46:	68fb      	ldr	r3, [r7, #12]
 8005e48:	633b      	str	r3, [r7, #48]	@ 0x30

	configASSERT( pxQueue );
 8005e4a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e4c:	2b00      	cmp	r3, #0
 8005e4e:	d10b      	bne.n	8005e68 <xQueueGenericSend+0x34>
	__asm volatile
 8005e50:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e54:	f383 8811 	msr	BASEPRI, r3
 8005e58:	f3bf 8f6f 	isb	sy
 8005e5c:	f3bf 8f4f 	dsb	sy
 8005e60:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8005e62:	bf00      	nop
 8005e64:	bf00      	nop
 8005e66:	e7fd      	b.n	8005e64 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8005e68:	68bb      	ldr	r3, [r7, #8]
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d103      	bne.n	8005e76 <xQueueGenericSend+0x42>
 8005e6e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005e70:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005e72:	2b00      	cmp	r3, #0
 8005e74:	d101      	bne.n	8005e7a <xQueueGenericSend+0x46>
 8005e76:	2301      	movs	r3, #1
 8005e78:	e000      	b.n	8005e7c <xQueueGenericSend+0x48>
 8005e7a:	2300      	movs	r3, #0
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d10b      	bne.n	8005e98 <xQueueGenericSend+0x64>
	__asm volatile
 8005e80:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005e84:	f383 8811 	msr	BASEPRI, r3
 8005e88:	f3bf 8f6f 	isb	sy
 8005e8c:	f3bf 8f4f 	dsb	sy
 8005e90:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8005e92:	bf00      	nop
 8005e94:	bf00      	nop
 8005e96:	e7fd      	b.n	8005e94 <xQueueGenericSend+0x60>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8005e98:	683b      	ldr	r3, [r7, #0]
 8005e9a:	2b02      	cmp	r3, #2
 8005e9c:	d103      	bne.n	8005ea6 <xQueueGenericSend+0x72>
 8005e9e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ea0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d101      	bne.n	8005eaa <xQueueGenericSend+0x76>
 8005ea6:	2301      	movs	r3, #1
 8005ea8:	e000      	b.n	8005eac <xQueueGenericSend+0x78>
 8005eaa:	2300      	movs	r3, #0
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d10b      	bne.n	8005ec8 <xQueueGenericSend+0x94>
	__asm volatile
 8005eb0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005eb4:	f383 8811 	msr	BASEPRI, r3
 8005eb8:	f3bf 8f6f 	isb	sy
 8005ebc:	f3bf 8f4f 	dsb	sy
 8005ec0:	623b      	str	r3, [r7, #32]
}
 8005ec2:	bf00      	nop
 8005ec4:	bf00      	nop
 8005ec6:	e7fd      	b.n	8005ec4 <xQueueGenericSend+0x90>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8005ec8:	f001 f9fc 	bl	80072c4 <xTaskGetSchedulerState>
 8005ecc:	4603      	mov	r3, r0
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d102      	bne.n	8005ed8 <xQueueGenericSend+0xa4>
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d101      	bne.n	8005edc <xQueueGenericSend+0xa8>
 8005ed8:	2301      	movs	r3, #1
 8005eda:	e000      	b.n	8005ede <xQueueGenericSend+0xaa>
 8005edc:	2300      	movs	r3, #0
 8005ede:	2b00      	cmp	r3, #0
 8005ee0:	d10b      	bne.n	8005efa <xQueueGenericSend+0xc6>
	__asm volatile
 8005ee2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8005ee6:	f383 8811 	msr	BASEPRI, r3
 8005eea:	f3bf 8f6f 	isb	sy
 8005eee:	f3bf 8f4f 	dsb	sy
 8005ef2:	61fb      	str	r3, [r7, #28]
}
 8005ef4:	bf00      	nop
 8005ef6:	bf00      	nop
 8005ef8:	e7fd      	b.n	8005ef6 <xQueueGenericSend+0xc2>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8005efa:	f001 ff4d 	bl	8007d98 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8005efe:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f00:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8005f02:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f04:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005f06:	429a      	cmp	r2, r3
 8005f08:	d302      	bcc.n	8005f10 <xQueueGenericSend+0xdc>
 8005f0a:	683b      	ldr	r3, [r7, #0]
 8005f0c:	2b02      	cmp	r3, #2
 8005f0e:	d129      	bne.n	8005f64 <xQueueGenericSend+0x130>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8005f10:	683a      	ldr	r2, [r7, #0]
 8005f12:	68b9      	ldr	r1, [r7, #8]
 8005f14:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005f16:	f000 fa0f 	bl	8006338 <prvCopyDataToQueue>
 8005f1a:	62f8      	str	r0, [r7, #44]	@ 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8005f1c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d010      	beq.n	8005f46 <xQueueGenericSend+0x112>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8005f24:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f26:	3324      	adds	r3, #36	@ 0x24
 8005f28:	4618      	mov	r0, r3
 8005f2a:	f001 f805 	bl	8006f38 <xTaskRemoveFromEventList>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d013      	beq.n	8005f5c <xQueueGenericSend+0x128>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 8005f34:	4b3f      	ldr	r3, [pc, #252]	@ (8006034 <xQueueGenericSend+0x200>)
 8005f36:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f3a:	601a      	str	r2, [r3, #0]
 8005f3c:	f3bf 8f4f 	dsb	sy
 8005f40:	f3bf 8f6f 	isb	sy
 8005f44:	e00a      	b.n	8005f5c <xQueueGenericSend+0x128>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 8005f46:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	d007      	beq.n	8005f5c <xQueueGenericSend+0x128>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 8005f4c:	4b39      	ldr	r3, [pc, #228]	@ (8006034 <xQueueGenericSend+0x200>)
 8005f4e:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8005f52:	601a      	str	r2, [r3, #0]
 8005f54:	f3bf 8f4f 	dsb	sy
 8005f58:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8005f5c:	f001 ff4e 	bl	8007dfc <vPortExitCritical>
				return pdPASS;
 8005f60:	2301      	movs	r3, #1
 8005f62:	e063      	b.n	800602c <xQueueGenericSend+0x1f8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	2b00      	cmp	r3, #0
 8005f68:	d103      	bne.n	8005f72 <xQueueGenericSend+0x13e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8005f6a:	f001 ff47 	bl	8007dfc <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8005f6e:	2300      	movs	r3, #0
 8005f70:	e05c      	b.n	800602c <xQueueGenericSend+0x1f8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8005f72:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005f74:	2b00      	cmp	r3, #0
 8005f76:	d106      	bne.n	8005f86 <xQueueGenericSend+0x152>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8005f78:	f107 0314 	add.w	r3, r7, #20
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f001 f83f 	bl	8007000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8005f82:	2301      	movs	r3, #1
 8005f84:	637b      	str	r3, [r7, #52]	@ 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8005f86:	f001 ff39 	bl	8007dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8005f8a:	f000 fda7 	bl	8006adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8005f8e:	f001 ff03 	bl	8007d98 <vPortEnterCritical>
 8005f92:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005f94:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 8005f98:	b25b      	sxtb	r3, r3
 8005f9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005f9e:	d103      	bne.n	8005fa8 <xQueueGenericSend+0x174>
 8005fa0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fa2:	2200      	movs	r2, #0
 8005fa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8005fa8:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005faa:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8005fae:	b25b      	sxtb	r3, r3
 8005fb0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005fb4:	d103      	bne.n	8005fbe <xQueueGenericSend+0x18a>
 8005fb6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fb8:	2200      	movs	r2, #0
 8005fba:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 8005fbe:	f001 ff1d 	bl	8007dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8005fc2:	1d3a      	adds	r2, r7, #4
 8005fc4:	f107 0314 	add.w	r3, r7, #20
 8005fc8:	4611      	mov	r1, r2
 8005fca:	4618      	mov	r0, r3
 8005fcc:	f001 f82e 	bl	800702c <xTaskCheckForTimeOut>
 8005fd0:	4603      	mov	r3, r0
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d124      	bne.n	8006020 <xQueueGenericSend+0x1ec>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8005fd6:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005fd8:	f000 faa6 	bl	8006528 <prvIsQueueFull>
 8005fdc:	4603      	mov	r3, r0
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d018      	beq.n	8006014 <xQueueGenericSend+0x1e0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8005fe2:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005fe4:	3310      	adds	r3, #16
 8005fe6:	687a      	ldr	r2, [r7, #4]
 8005fe8:	4611      	mov	r1, r2
 8005fea:	4618      	mov	r0, r3
 8005fec:	f000 ff52 	bl	8006e94 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8005ff0:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8005ff2:	f000 fa31 	bl	8006458 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8005ff6:	f000 fd7f 	bl	8006af8 <xTaskResumeAll>
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	f47f af7c 	bne.w	8005efa <xQueueGenericSend+0xc6>
				{
					portYIELD_WITHIN_API();
 8006002:	4b0c      	ldr	r3, [pc, #48]	@ (8006034 <xQueueGenericSend+0x200>)
 8006004:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006008:	601a      	str	r2, [r3, #0]
 800600a:	f3bf 8f4f 	dsb	sy
 800600e:	f3bf 8f6f 	isb	sy
 8006012:	e772      	b.n	8005efa <xQueueGenericSend+0xc6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006014:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006016:	f000 fa1f 	bl	8006458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800601a:	f000 fd6d 	bl	8006af8 <xTaskResumeAll>
 800601e:	e76c      	b.n	8005efa <xQueueGenericSend+0xc6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006020:	6b38      	ldr	r0, [r7, #48]	@ 0x30
 8006022:	f000 fa19 	bl	8006458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006026:	f000 fd67 	bl	8006af8 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800602a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800602c:	4618      	mov	r0, r3
 800602e:	3738      	adds	r7, #56	@ 0x38
 8006030:	46bd      	mov	sp, r7
 8006032:	bd80      	pop	{r7, pc}
 8006034:	e000ed04 	.word	0xe000ed04

08006038 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006038:	b580      	push	{r7, lr}
 800603a:	b090      	sub	sp, #64	@ 0x40
 800603c:	af00      	add	r7, sp, #0
 800603e:	60f8      	str	r0, [r7, #12]
 8006040:	60b9      	str	r1, [r7, #8]
 8006042:	607a      	str	r2, [r7, #4]
 8006044:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006046:	68fb      	ldr	r3, [r7, #12]
 8006048:	63bb      	str	r3, [r7, #56]	@ 0x38

	configASSERT( pxQueue );
 800604a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800604c:	2b00      	cmp	r3, #0
 800604e:	d10b      	bne.n	8006068 <xQueueGenericSendFromISR+0x30>
	__asm volatile
 8006050:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006054:	f383 8811 	msr	BASEPRI, r3
 8006058:	f3bf 8f6f 	isb	sy
 800605c:	f3bf 8f4f 	dsb	sy
 8006060:	62bb      	str	r3, [r7, #40]	@ 0x28
}
 8006062:	bf00      	nop
 8006064:	bf00      	nop
 8006066:	e7fd      	b.n	8006064 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006068:	68bb      	ldr	r3, [r7, #8]
 800606a:	2b00      	cmp	r3, #0
 800606c:	d103      	bne.n	8006076 <xQueueGenericSendFromISR+0x3e>
 800606e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006070:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006072:	2b00      	cmp	r3, #0
 8006074:	d101      	bne.n	800607a <xQueueGenericSendFromISR+0x42>
 8006076:	2301      	movs	r3, #1
 8006078:	e000      	b.n	800607c <xQueueGenericSendFromISR+0x44>
 800607a:	2300      	movs	r3, #0
 800607c:	2b00      	cmp	r3, #0
 800607e:	d10b      	bne.n	8006098 <xQueueGenericSendFromISR+0x60>
	__asm volatile
 8006080:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006084:	f383 8811 	msr	BASEPRI, r3
 8006088:	f3bf 8f6f 	isb	sy
 800608c:	f3bf 8f4f 	dsb	sy
 8006090:	627b      	str	r3, [r7, #36]	@ 0x24
}
 8006092:	bf00      	nop
 8006094:	bf00      	nop
 8006096:	e7fd      	b.n	8006094 <xQueueGenericSendFromISR+0x5c>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006098:	683b      	ldr	r3, [r7, #0]
 800609a:	2b02      	cmp	r3, #2
 800609c:	d103      	bne.n	80060a6 <xQueueGenericSendFromISR+0x6e>
 800609e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	2b01      	cmp	r3, #1
 80060a4:	d101      	bne.n	80060aa <xQueueGenericSendFromISR+0x72>
 80060a6:	2301      	movs	r3, #1
 80060a8:	e000      	b.n	80060ac <xQueueGenericSendFromISR+0x74>
 80060aa:	2300      	movs	r3, #0
 80060ac:	2b00      	cmp	r3, #0
 80060ae:	d10b      	bne.n	80060c8 <xQueueGenericSendFromISR+0x90>
	__asm volatile
 80060b0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060b4:	f383 8811 	msr	BASEPRI, r3
 80060b8:	f3bf 8f6f 	isb	sy
 80060bc:	f3bf 8f4f 	dsb	sy
 80060c0:	623b      	str	r3, [r7, #32]
}
 80060c2:	bf00      	nop
 80060c4:	bf00      	nop
 80060c6:	e7fd      	b.n	80060c4 <xQueueGenericSendFromISR+0x8c>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 80060c8:	f001 ff46 	bl	8007f58 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 80060cc:	f3ef 8211 	mrs	r2, BASEPRI
 80060d0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80060d4:	f383 8811 	msr	BASEPRI, r3
 80060d8:	f3bf 8f6f 	isb	sy
 80060dc:	f3bf 8f4f 	dsb	sy
 80060e0:	61fa      	str	r2, [r7, #28]
 80060e2:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 80060e4:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 80060e6:	637b      	str	r3, [r7, #52]	@ 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80060e8:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ea:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80060ec:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060ee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d302      	bcc.n	80060fa <xQueueGenericSendFromISR+0xc2>
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	2b02      	cmp	r3, #2
 80060f8:	d12f      	bne.n	800615a <xQueueGenericSendFromISR+0x122>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 80060fa:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80060fc:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 8006100:	f887 3033 	strb.w	r3, [r7, #51]	@ 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006104:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006106:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006108:	62fb      	str	r3, [r7, #44]	@ 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800610a:	683a      	ldr	r2, [r7, #0]
 800610c:	68b9      	ldr	r1, [r7, #8]
 800610e:	6bb8      	ldr	r0, [r7, #56]	@ 0x38
 8006110:	f000 f912 	bl	8006338 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006114:	f997 3033 	ldrsb.w	r3, [r7, #51]	@ 0x33
 8006118:	f1b3 3fff 	cmp.w	r3, #4294967295
 800611c:	d112      	bne.n	8006144 <xQueueGenericSendFromISR+0x10c>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800611e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006120:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006122:	2b00      	cmp	r3, #0
 8006124:	d016      	beq.n	8006154 <xQueueGenericSendFromISR+0x11c>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006126:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006128:	3324      	adds	r3, #36	@ 0x24
 800612a:	4618      	mov	r0, r3
 800612c:	f000 ff04 	bl	8006f38 <xTaskRemoveFromEventList>
 8006130:	4603      	mov	r3, r0
 8006132:	2b00      	cmp	r3, #0
 8006134:	d00e      	beq.n	8006154 <xQueueGenericSendFromISR+0x11c>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006136:	687b      	ldr	r3, [r7, #4]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d00b      	beq.n	8006154 <xQueueGenericSendFromISR+0x11c>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	2201      	movs	r2, #1
 8006140:	601a      	str	r2, [r3, #0]
 8006142:	e007      	b.n	8006154 <xQueueGenericSendFromISR+0x11c>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006144:	f897 3033 	ldrb.w	r3, [r7, #51]	@ 0x33
 8006148:	3301      	adds	r3, #1
 800614a:	b2db      	uxtb	r3, r3
 800614c:	b25a      	sxtb	r2, r3
 800614e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006150:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
			}

			xReturn = pdPASS;
 8006154:	2301      	movs	r3, #1
 8006156:	63fb      	str	r3, [r7, #60]	@ 0x3c
		{
 8006158:	e001      	b.n	800615e <xQueueGenericSendFromISR+0x126>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800615a:	2300      	movs	r3, #0
 800615c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800615e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006160:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006162:	697b      	ldr	r3, [r7, #20]
 8006164:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006168:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800616a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
}
 800616c:	4618      	mov	r0, r3
 800616e:	3740      	adds	r7, #64	@ 0x40
 8006170:	46bd      	mov	sp, r7
 8006172:	bd80      	pop	{r7, pc}

08006174 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006174:	b580      	push	{r7, lr}
 8006176:	b08c      	sub	sp, #48	@ 0x30
 8006178:	af00      	add	r7, sp, #0
 800617a:	60f8      	str	r0, [r7, #12]
 800617c:	60b9      	str	r1, [r7, #8]
 800617e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006180:	2300      	movs	r3, #0
 8006182:	62fb      	str	r3, [r7, #44]	@ 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	62bb      	str	r3, [r7, #40]	@ 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006188:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800618a:	2b00      	cmp	r3, #0
 800618c:	d10b      	bne.n	80061a6 <xQueueReceive+0x32>
	__asm volatile
 800618e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006192:	f383 8811 	msr	BASEPRI, r3
 8006196:	f3bf 8f6f 	isb	sy
 800619a:	f3bf 8f4f 	dsb	sy
 800619e:	623b      	str	r3, [r7, #32]
}
 80061a0:	bf00      	nop
 80061a2:	bf00      	nop
 80061a4:	e7fd      	b.n	80061a2 <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 80061a6:	68bb      	ldr	r3, [r7, #8]
 80061a8:	2b00      	cmp	r3, #0
 80061aa:	d103      	bne.n	80061b4 <xQueueReceive+0x40>
 80061ac:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80061ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80061b0:	2b00      	cmp	r3, #0
 80061b2:	d101      	bne.n	80061b8 <xQueueReceive+0x44>
 80061b4:	2301      	movs	r3, #1
 80061b6:	e000      	b.n	80061ba <xQueueReceive+0x46>
 80061b8:	2300      	movs	r3, #0
 80061ba:	2b00      	cmp	r3, #0
 80061bc:	d10b      	bne.n	80061d6 <xQueueReceive+0x62>
	__asm volatile
 80061be:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061c2:	f383 8811 	msr	BASEPRI, r3
 80061c6:	f3bf 8f6f 	isb	sy
 80061ca:	f3bf 8f4f 	dsb	sy
 80061ce:	61fb      	str	r3, [r7, #28]
}
 80061d0:	bf00      	nop
 80061d2:	bf00      	nop
 80061d4:	e7fd      	b.n	80061d2 <xQueueReceive+0x5e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 80061d6:	f001 f875 	bl	80072c4 <xTaskGetSchedulerState>
 80061da:	4603      	mov	r3, r0
 80061dc:	2b00      	cmp	r3, #0
 80061de:	d102      	bne.n	80061e6 <xQueueReceive+0x72>
 80061e0:	687b      	ldr	r3, [r7, #4]
 80061e2:	2b00      	cmp	r3, #0
 80061e4:	d101      	bne.n	80061ea <xQueueReceive+0x76>
 80061e6:	2301      	movs	r3, #1
 80061e8:	e000      	b.n	80061ec <xQueueReceive+0x78>
 80061ea:	2300      	movs	r3, #0
 80061ec:	2b00      	cmp	r3, #0
 80061ee:	d10b      	bne.n	8006208 <xQueueReceive+0x94>
	__asm volatile
 80061f0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80061f4:	f383 8811 	msr	BASEPRI, r3
 80061f8:	f3bf 8f6f 	isb	sy
 80061fc:	f3bf 8f4f 	dsb	sy
 8006200:	61bb      	str	r3, [r7, #24]
}
 8006202:	bf00      	nop
 8006204:	bf00      	nop
 8006206:	e7fd      	b.n	8006204 <xQueueReceive+0x90>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006208:	f001 fdc6 	bl	8007d98 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800620c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800620e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006210:	627b      	str	r3, [r7, #36]	@ 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006212:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006214:	2b00      	cmp	r3, #0
 8006216:	d01f      	beq.n	8006258 <xQueueReceive+0xe4>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006218:	68b9      	ldr	r1, [r7, #8]
 800621a:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800621c:	f000 f8f6 	bl	800640c <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006220:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006222:	1e5a      	subs	r2, r3, #1
 8006224:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006226:	639a      	str	r2, [r3, #56]	@ 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006228:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800622a:	691b      	ldr	r3, [r3, #16]
 800622c:	2b00      	cmp	r3, #0
 800622e:	d00f      	beq.n	8006250 <xQueueReceive+0xdc>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006230:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006232:	3310      	adds	r3, #16
 8006234:	4618      	mov	r0, r3
 8006236:	f000 fe7f 	bl	8006f38 <xTaskRemoveFromEventList>
 800623a:	4603      	mov	r3, r0
 800623c:	2b00      	cmp	r3, #0
 800623e:	d007      	beq.n	8006250 <xQueueReceive+0xdc>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006240:	4b3c      	ldr	r3, [pc, #240]	@ (8006334 <xQueueReceive+0x1c0>)
 8006242:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006246:	601a      	str	r2, [r3, #0]
 8006248:	f3bf 8f4f 	dsb	sy
 800624c:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006250:	f001 fdd4 	bl	8007dfc <vPortExitCritical>
				return pdPASS;
 8006254:	2301      	movs	r3, #1
 8006256:	e069      	b.n	800632c <xQueueReceive+0x1b8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006258:	687b      	ldr	r3, [r7, #4]
 800625a:	2b00      	cmp	r3, #0
 800625c:	d103      	bne.n	8006266 <xQueueReceive+0xf2>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800625e:	f001 fdcd 	bl	8007dfc <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006262:	2300      	movs	r3, #0
 8006264:	e062      	b.n	800632c <xQueueReceive+0x1b8>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006266:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006268:	2b00      	cmp	r3, #0
 800626a:	d106      	bne.n	800627a <xQueueReceive+0x106>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800626c:	f107 0310 	add.w	r3, r7, #16
 8006270:	4618      	mov	r0, r3
 8006272:	f000 fec5 	bl	8007000 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006276:	2301      	movs	r3, #1
 8006278:	62fb      	str	r3, [r7, #44]	@ 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800627a:	f001 fdbf 	bl	8007dfc <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800627e:	f000 fc2d 	bl	8006adc <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006282:	f001 fd89 	bl	8007d98 <vPortEnterCritical>
 8006286:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006288:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 800628c:	b25b      	sxtb	r3, r3
 800628e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006292:	d103      	bne.n	800629c <xQueueReceive+0x128>
 8006294:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006296:	2200      	movs	r2, #0
 8006298:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800629c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800629e:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80062a2:	b25b      	sxtb	r3, r3
 80062a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a8:	d103      	bne.n	80062b2 <xQueueReceive+0x13e>
 80062aa:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062ac:	2200      	movs	r2, #0
 80062ae:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80062b2:	f001 fda3 	bl	8007dfc <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 80062b6:	1d3a      	adds	r2, r7, #4
 80062b8:	f107 0310 	add.w	r3, r7, #16
 80062bc:	4611      	mov	r1, r2
 80062be:	4618      	mov	r0, r3
 80062c0:	f000 feb4 	bl	800702c <xTaskCheckForTimeOut>
 80062c4:	4603      	mov	r3, r0
 80062c6:	2b00      	cmp	r3, #0
 80062c8:	d123      	bne.n	8006312 <xQueueReceive+0x19e>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80062ca:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062cc:	f000 f916 	bl	80064fc <prvIsQueueEmpty>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d017      	beq.n	8006306 <xQueueReceive+0x192>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 80062d6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80062d8:	3324      	adds	r3, #36	@ 0x24
 80062da:	687a      	ldr	r2, [r7, #4]
 80062dc:	4611      	mov	r1, r2
 80062de:	4618      	mov	r0, r3
 80062e0:	f000 fdd8 	bl	8006e94 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 80062e4:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80062e6:	f000 f8b7 	bl	8006458 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 80062ea:	f000 fc05 	bl	8006af8 <xTaskResumeAll>
 80062ee:	4603      	mov	r3, r0
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d189      	bne.n	8006208 <xQueueReceive+0x94>
				{
					portYIELD_WITHIN_API();
 80062f4:	4b0f      	ldr	r3, [pc, #60]	@ (8006334 <xQueueReceive+0x1c0>)
 80062f6:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80062fa:	601a      	str	r2, [r3, #0]
 80062fc:	f3bf 8f4f 	dsb	sy
 8006300:	f3bf 8f6f 	isb	sy
 8006304:	e780      	b.n	8006208 <xQueueReceive+0x94>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006306:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006308:	f000 f8a6 	bl	8006458 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800630c:	f000 fbf4 	bl	8006af8 <xTaskResumeAll>
 8006310:	e77a      	b.n	8006208 <xQueueReceive+0x94>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006312:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8006314:	f000 f8a0 	bl	8006458 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006318:	f000 fbee 	bl	8006af8 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800631c:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800631e:	f000 f8ed 	bl	80064fc <prvIsQueueEmpty>
 8006322:	4603      	mov	r3, r0
 8006324:	2b00      	cmp	r3, #0
 8006326:	f43f af6f 	beq.w	8006208 <xQueueReceive+0x94>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800632a:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800632c:	4618      	mov	r0, r3
 800632e:	3730      	adds	r7, #48	@ 0x30
 8006330:	46bd      	mov	sp, r7
 8006332:	bd80      	pop	{r7, pc}
 8006334:	e000ed04 	.word	0xe000ed04

08006338 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8006338:	b580      	push	{r7, lr}
 800633a:	b086      	sub	sp, #24
 800633c:	af00      	add	r7, sp, #0
 800633e:	60f8      	str	r0, [r7, #12]
 8006340:	60b9      	str	r1, [r7, #8]
 8006342:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8006344:	2300      	movs	r3, #0
 8006346:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006348:	68fb      	ldr	r3, [r7, #12]
 800634a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800634c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800634e:	68fb      	ldr	r3, [r7, #12]
 8006350:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006352:	2b00      	cmp	r3, #0
 8006354:	d10d      	bne.n	8006372 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006356:	68fb      	ldr	r3, [r7, #12]
 8006358:	681b      	ldr	r3, [r3, #0]
 800635a:	2b00      	cmp	r3, #0
 800635c:	d14d      	bne.n	80063fa <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	689b      	ldr	r3, [r3, #8]
 8006362:	4618      	mov	r0, r3
 8006364:	f000 ffcc 	bl	8007300 <xTaskPriorityDisinherit>
 8006368:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800636a:	68fb      	ldr	r3, [r7, #12]
 800636c:	2200      	movs	r2, #0
 800636e:	609a      	str	r2, [r3, #8]
 8006370:	e043      	b.n	80063fa <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2b00      	cmp	r3, #0
 8006376:	d119      	bne.n	80063ac <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006378:	68fb      	ldr	r3, [r7, #12]
 800637a:	6858      	ldr	r0, [r3, #4]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006380:	461a      	mov	r2, r3
 8006382:	68b9      	ldr	r1, [r7, #8]
 8006384:	f002 fafb 	bl	800897e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	685a      	ldr	r2, [r3, #4]
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006390:	441a      	add	r2, r3
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8006396:	68fb      	ldr	r3, [r7, #12]
 8006398:	685a      	ldr	r2, [r3, #4]
 800639a:	68fb      	ldr	r3, [r7, #12]
 800639c:	689b      	ldr	r3, [r3, #8]
 800639e:	429a      	cmp	r2, r3
 80063a0:	d32b      	bcc.n	80063fa <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	681a      	ldr	r2, [r3, #0]
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	605a      	str	r2, [r3, #4]
 80063aa:	e026      	b.n	80063fa <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80063ac:	68fb      	ldr	r3, [r7, #12]
 80063ae:	68d8      	ldr	r0, [r3, #12]
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063b4:	461a      	mov	r2, r3
 80063b6:	68b9      	ldr	r1, [r7, #8]
 80063b8:	f002 fae1 	bl	800897e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80063bc:	68fb      	ldr	r3, [r7, #12]
 80063be:	68da      	ldr	r2, [r3, #12]
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063c4:	425b      	negs	r3, r3
 80063c6:	441a      	add	r2, r3
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80063cc:	68fb      	ldr	r3, [r7, #12]
 80063ce:	68da      	ldr	r2, [r3, #12]
 80063d0:	68fb      	ldr	r3, [r7, #12]
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	429a      	cmp	r2, r3
 80063d6:	d207      	bcs.n	80063e8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80063d8:	68fb      	ldr	r3, [r7, #12]
 80063da:	689a      	ldr	r2, [r3, #8]
 80063dc:	68fb      	ldr	r3, [r7, #12]
 80063de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80063e0:	425b      	negs	r3, r3
 80063e2:	441a      	add	r2, r3
 80063e4:	68fb      	ldr	r3, [r7, #12]
 80063e6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2b02      	cmp	r3, #2
 80063ec:	d105      	bne.n	80063fa <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80063ee:	693b      	ldr	r3, [r7, #16]
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d002      	beq.n	80063fa <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80063f4:	693b      	ldr	r3, [r7, #16]
 80063f6:	3b01      	subs	r3, #1
 80063f8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80063fa:	693b      	ldr	r3, [r7, #16]
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	639a      	str	r2, [r3, #56]	@ 0x38

	return xReturn;
 8006402:	697b      	ldr	r3, [r7, #20]
}
 8006404:	4618      	mov	r0, r3
 8006406:	3718      	adds	r7, #24
 8006408:	46bd      	mov	sp, r7
 800640a:	bd80      	pop	{r7, pc}

0800640c <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800640c:	b580      	push	{r7, lr}
 800640e:	b082      	sub	sp, #8
 8006410:	af00      	add	r7, sp, #0
 8006412:	6078      	str	r0, [r7, #4]
 8006414:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8006416:	687b      	ldr	r3, [r7, #4]
 8006418:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800641a:	2b00      	cmp	r3, #0
 800641c:	d018      	beq.n	8006450 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	68da      	ldr	r2, [r3, #12]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006426:	441a      	add	r2, r3
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	68da      	ldr	r2, [r3, #12]
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	689b      	ldr	r3, [r3, #8]
 8006434:	429a      	cmp	r2, r3
 8006436:	d303      	bcc.n	8006440 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681a      	ldr	r2, [r3, #0]
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	68d9      	ldr	r1, [r3, #12]
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8006448:	461a      	mov	r2, r3
 800644a:	6838      	ldr	r0, [r7, #0]
 800644c:	f002 fa97 	bl	800897e <memcpy>
	}
}
 8006450:	bf00      	nop
 8006452:	3708      	adds	r7, #8
 8006454:	46bd      	mov	sp, r7
 8006456:	bd80      	pop	{r7, pc}

08006458 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b084      	sub	sp, #16
 800645c:	af00      	add	r7, sp, #0
 800645e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 8006460:	f001 fc9a 	bl	8007d98 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 800646a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800646c:	e011      	b.n	8006492 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8006472:	2b00      	cmp	r3, #0
 8006474:	d012      	beq.n	800649c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	3324      	adds	r3, #36	@ 0x24
 800647a:	4618      	mov	r0, r3
 800647c:	f000 fd5c 	bl	8006f38 <xTaskRemoveFromEventList>
 8006480:	4603      	mov	r3, r0
 8006482:	2b00      	cmp	r3, #0
 8006484:	d001      	beq.n	800648a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8006486:	f000 fe35 	bl	80070f4 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800648a:	7bfb      	ldrb	r3, [r7, #15]
 800648c:	3b01      	subs	r3, #1
 800648e:	b2db      	uxtb	r3, r3
 8006490:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8006492:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006496:	2b00      	cmp	r3, #0
 8006498:	dce9      	bgt.n	800646e <prvUnlockQueue+0x16>
 800649a:	e000      	b.n	800649e <prvUnlockQueue+0x46>
					break;
 800649c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	22ff      	movs	r2, #255	@ 0xff
 80064a2:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
	}
	taskEXIT_CRITICAL();
 80064a6:	f001 fca9 	bl	8007dfc <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80064aa:	f001 fc75 	bl	8007d98 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80064b4:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064b6:	e011      	b.n	80064dc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	691b      	ldr	r3, [r3, #16]
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	3310      	adds	r3, #16
 80064c4:	4618      	mov	r0, r3
 80064c6:	f000 fd37 	bl	8006f38 <xTaskRemoveFromEventList>
 80064ca:	4603      	mov	r3, r0
 80064cc:	2b00      	cmp	r3, #0
 80064ce:	d001      	beq.n	80064d4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80064d0:	f000 fe10 	bl	80070f4 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80064d4:	7bbb      	ldrb	r3, [r7, #14]
 80064d6:	3b01      	subs	r3, #1
 80064d8:	b2db      	uxtb	r3, r3
 80064da:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80064dc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	dce9      	bgt.n	80064b8 <prvUnlockQueue+0x60>
 80064e4:	e000      	b.n	80064e8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80064e6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	22ff      	movs	r2, #255	@ 0xff
 80064ec:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
	}
	taskEXIT_CRITICAL();
 80064f0:	f001 fc84 	bl	8007dfc <vPortExitCritical>
}
 80064f4:	bf00      	nop
 80064f6:	3710      	adds	r7, #16
 80064f8:	46bd      	mov	sp, r7
 80064fa:	bd80      	pop	{r7, pc}

080064fc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80064fc:	b580      	push	{r7, lr}
 80064fe:	b084      	sub	sp, #16
 8006500:	af00      	add	r7, sp, #0
 8006502:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006504:	f001 fc48 	bl	8007d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8006508:	687b      	ldr	r3, [r7, #4]
 800650a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800650c:	2b00      	cmp	r3, #0
 800650e:	d102      	bne.n	8006516 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 8006510:	2301      	movs	r3, #1
 8006512:	60fb      	str	r3, [r7, #12]
 8006514:	e001      	b.n	800651a <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8006516:	2300      	movs	r3, #0
 8006518:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800651a:	f001 fc6f 	bl	8007dfc <vPortExitCritical>

	return xReturn;
 800651e:	68fb      	ldr	r3, [r7, #12]
}
 8006520:	4618      	mov	r0, r3
 8006522:	3710      	adds	r7, #16
 8006524:	46bd      	mov	sp, r7
 8006526:	bd80      	pop	{r7, pc}

08006528 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8006528:	b580      	push	{r7, lr}
 800652a:	b084      	sub	sp, #16
 800652c:	af00      	add	r7, sp, #0
 800652e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8006530:	f001 fc32 	bl	8007d98 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800653c:	429a      	cmp	r2, r3
 800653e:	d102      	bne.n	8006546 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 8006540:	2301      	movs	r3, #1
 8006542:	60fb      	str	r3, [r7, #12]
 8006544:	e001      	b.n	800654a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8006546:	2300      	movs	r3, #0
 8006548:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800654a:	f001 fc57 	bl	8007dfc <vPortExitCritical>

	return xReturn;
 800654e:	68fb      	ldr	r3, [r7, #12]
}
 8006550:	4618      	mov	r0, r3
 8006552:	3710      	adds	r7, #16
 8006554:	46bd      	mov	sp, r7
 8006556:	bd80      	pop	{r7, pc}

08006558 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8006558:	b480      	push	{r7}
 800655a:	b085      	sub	sp, #20
 800655c:	af00      	add	r7, sp, #0
 800655e:	6078      	str	r0, [r7, #4]
 8006560:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8006562:	2300      	movs	r3, #0
 8006564:	60fb      	str	r3, [r7, #12]
 8006566:	e014      	b.n	8006592 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8006568:	4a0f      	ldr	r2, [pc, #60]	@ (80065a8 <vQueueAddToRegistry+0x50>)
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8006570:	2b00      	cmp	r3, #0
 8006572:	d10b      	bne.n	800658c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8006574:	490c      	ldr	r1, [pc, #48]	@ (80065a8 <vQueueAddToRegistry+0x50>)
 8006576:	68fb      	ldr	r3, [r7, #12]
 8006578:	683a      	ldr	r2, [r7, #0]
 800657a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800657e:	4a0a      	ldr	r2, [pc, #40]	@ (80065a8 <vQueueAddToRegistry+0x50>)
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	00db      	lsls	r3, r3, #3
 8006584:	4413      	add	r3, r2
 8006586:	687a      	ldr	r2, [r7, #4]
 8006588:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800658a:	e006      	b.n	800659a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800658c:	68fb      	ldr	r3, [r7, #12]
 800658e:	3301      	adds	r3, #1
 8006590:	60fb      	str	r3, [r7, #12]
 8006592:	68fb      	ldr	r3, [r7, #12]
 8006594:	2b07      	cmp	r3, #7
 8006596:	d9e7      	bls.n	8006568 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8006598:	bf00      	nop
 800659a:	bf00      	nop
 800659c:	3714      	adds	r7, #20
 800659e:	46bd      	mov	sp, r7
 80065a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065a4:	4770      	bx	lr
 80065a6:	bf00      	nop
 80065a8:	20000a58 	.word	0x20000a58

080065ac <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80065ac:	b580      	push	{r7, lr}
 80065ae:	b086      	sub	sp, #24
 80065b0:	af00      	add	r7, sp, #0
 80065b2:	60f8      	str	r0, [r7, #12]
 80065b4:	60b9      	str	r1, [r7, #8]
 80065b6:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80065b8:	68fb      	ldr	r3, [r7, #12]
 80065ba:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80065bc:	f001 fbec 	bl	8007d98 <vPortEnterCritical>
 80065c0:	697b      	ldr	r3, [r7, #20]
 80065c2:	f893 3044 	ldrb.w	r3, [r3, #68]	@ 0x44
 80065c6:	b25b      	sxtb	r3, r3
 80065c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065cc:	d103      	bne.n	80065d6 <vQueueWaitForMessageRestricted+0x2a>
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	2200      	movs	r2, #0
 80065d2:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80065d6:	697b      	ldr	r3, [r7, #20]
 80065d8:	f893 3045 	ldrb.w	r3, [r3, #69]	@ 0x45
 80065dc:	b25b      	sxtb	r3, r3
 80065de:	f1b3 3fff 	cmp.w	r3, #4294967295
 80065e2:	d103      	bne.n	80065ec <vQueueWaitForMessageRestricted+0x40>
 80065e4:	697b      	ldr	r3, [r7, #20]
 80065e6:	2200      	movs	r2, #0
 80065e8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45
 80065ec:	f001 fc06 	bl	8007dfc <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 80065f0:	697b      	ldr	r3, [r7, #20]
 80065f2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80065f4:	2b00      	cmp	r3, #0
 80065f6:	d106      	bne.n	8006606 <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	3324      	adds	r3, #36	@ 0x24
 80065fc:	687a      	ldr	r2, [r7, #4]
 80065fe:	68b9      	ldr	r1, [r7, #8]
 8006600:	4618      	mov	r0, r3
 8006602:	f000 fc6d 	bl	8006ee0 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 8006606:	6978      	ldr	r0, [r7, #20]
 8006608:	f7ff ff26 	bl	8006458 <prvUnlockQueue>
	}
 800660c:	bf00      	nop
 800660e:	3718      	adds	r7, #24
 8006610:	46bd      	mov	sp, r7
 8006612:	bd80      	pop	{r7, pc}

08006614 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8006614:	b580      	push	{r7, lr}
 8006616:	b08e      	sub	sp, #56	@ 0x38
 8006618:	af04      	add	r7, sp, #16
 800661a:	60f8      	str	r0, [r7, #12]
 800661c:	60b9      	str	r1, [r7, #8]
 800661e:	607a      	str	r2, [r7, #4]
 8006620:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8006622:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006624:	2b00      	cmp	r3, #0
 8006626:	d10b      	bne.n	8006640 <xTaskCreateStatic+0x2c>
	__asm volatile
 8006628:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800662c:	f383 8811 	msr	BASEPRI, r3
 8006630:	f3bf 8f6f 	isb	sy
 8006634:	f3bf 8f4f 	dsb	sy
 8006638:	623b      	str	r3, [r7, #32]
}
 800663a:	bf00      	nop
 800663c:	bf00      	nop
 800663e:	e7fd      	b.n	800663c <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8006640:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <xTaskCreateStatic+0x4a>
	__asm volatile
 8006646:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800664a:	f383 8811 	msr	BASEPRI, r3
 800664e:	f3bf 8f6f 	isb	sy
 8006652:	f3bf 8f4f 	dsb	sy
 8006656:	61fb      	str	r3, [r7, #28]
}
 8006658:	bf00      	nop
 800665a:	bf00      	nop
 800665c:	e7fd      	b.n	800665a <xTaskCreateStatic+0x46>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800665e:	23a8      	movs	r3, #168	@ 0xa8
 8006660:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8006662:	693b      	ldr	r3, [r7, #16]
 8006664:	2ba8      	cmp	r3, #168	@ 0xa8
 8006666:	d00b      	beq.n	8006680 <xTaskCreateStatic+0x6c>
	__asm volatile
 8006668:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800666c:	f383 8811 	msr	BASEPRI, r3
 8006670:	f3bf 8f6f 	isb	sy
 8006674:	f3bf 8f4f 	dsb	sy
 8006678:	61bb      	str	r3, [r7, #24]
}
 800667a:	bf00      	nop
 800667c:	bf00      	nop
 800667e:	e7fd      	b.n	800667c <xTaskCreateStatic+0x68>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8006680:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8006682:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006684:	2b00      	cmp	r3, #0
 8006686:	d01e      	beq.n	80066c6 <xTaskCreateStatic+0xb2>
 8006688:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800668a:	2b00      	cmp	r3, #0
 800668c:	d01b      	beq.n	80066c6 <xTaskCreateStatic+0xb2>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800668e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006690:	627b      	str	r3, [r7, #36]	@ 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8006692:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006694:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8006696:	631a      	str	r2, [r3, #48]	@ 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 8006698:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800669a:	2202      	movs	r2, #2
 800669c:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80066a0:	2300      	movs	r3, #0
 80066a2:	9303      	str	r3, [sp, #12]
 80066a4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80066a6:	9302      	str	r3, [sp, #8]
 80066a8:	f107 0314 	add.w	r3, r7, #20
 80066ac:	9301      	str	r3, [sp, #4]
 80066ae:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066b0:	9300      	str	r3, [sp, #0]
 80066b2:	683b      	ldr	r3, [r7, #0]
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	68b9      	ldr	r1, [r7, #8]
 80066b8:	68f8      	ldr	r0, [r7, #12]
 80066ba:	f000 f851 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80066be:	6a78      	ldr	r0, [r7, #36]	@ 0x24
 80066c0:	f000 f8f6 	bl	80068b0 <prvAddNewTaskToReadyList>
 80066c4:	e001      	b.n	80066ca <xTaskCreateStatic+0xb6>
		}
		else
		{
			xReturn = NULL;
 80066c6:	2300      	movs	r3, #0
 80066c8:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80066ca:	697b      	ldr	r3, [r7, #20]
	}
 80066cc:	4618      	mov	r0, r3
 80066ce:	3728      	adds	r7, #40	@ 0x28
 80066d0:	46bd      	mov	sp, r7
 80066d2:	bd80      	pop	{r7, pc}

080066d4 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b08c      	sub	sp, #48	@ 0x30
 80066d8:	af04      	add	r7, sp, #16
 80066da:	60f8      	str	r0, [r7, #12]
 80066dc:	60b9      	str	r1, [r7, #8]
 80066de:	603b      	str	r3, [r7, #0]
 80066e0:	4613      	mov	r3, r2
 80066e2:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80066e4:	88fb      	ldrh	r3, [r7, #6]
 80066e6:	009b      	lsls	r3, r3, #2
 80066e8:	4618      	mov	r0, r3
 80066ea:	f001 fc77 	bl	8007fdc <pvPortMalloc>
 80066ee:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80066f0:	697b      	ldr	r3, [r7, #20]
 80066f2:	2b00      	cmp	r3, #0
 80066f4:	d00e      	beq.n	8006714 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 80066f6:	20a8      	movs	r0, #168	@ 0xa8
 80066f8:	f001 fc70 	bl	8007fdc <pvPortMalloc>
 80066fc:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 80066fe:	69fb      	ldr	r3, [r7, #28]
 8006700:	2b00      	cmp	r3, #0
 8006702:	d003      	beq.n	800670c <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8006704:	69fb      	ldr	r3, [r7, #28]
 8006706:	697a      	ldr	r2, [r7, #20]
 8006708:	631a      	str	r2, [r3, #48]	@ 0x30
 800670a:	e005      	b.n	8006718 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800670c:	6978      	ldr	r0, [r7, #20]
 800670e:	f001 fd33 	bl	8008178 <vPortFree>
 8006712:	e001      	b.n	8006718 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8006714:	2300      	movs	r3, #0
 8006716:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8006718:	69fb      	ldr	r3, [r7, #28]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d017      	beq.n	800674e <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800671e:	69fb      	ldr	r3, [r7, #28]
 8006720:	2200      	movs	r2, #0
 8006722:	f883 20a5 	strb.w	r2, [r3, #165]	@ 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8006726:	88fa      	ldrh	r2, [r7, #6]
 8006728:	2300      	movs	r3, #0
 800672a:	9303      	str	r3, [sp, #12]
 800672c:	69fb      	ldr	r3, [r7, #28]
 800672e:	9302      	str	r3, [sp, #8]
 8006730:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006732:	9301      	str	r3, [sp, #4]
 8006734:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006736:	9300      	str	r3, [sp, #0]
 8006738:	683b      	ldr	r3, [r7, #0]
 800673a:	68b9      	ldr	r1, [r7, #8]
 800673c:	68f8      	ldr	r0, [r7, #12]
 800673e:	f000 f80f 	bl	8006760 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8006742:	69f8      	ldr	r0, [r7, #28]
 8006744:	f000 f8b4 	bl	80068b0 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8006748:	2301      	movs	r3, #1
 800674a:	61bb      	str	r3, [r7, #24]
 800674c:	e002      	b.n	8006754 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800674e:	f04f 33ff 	mov.w	r3, #4294967295
 8006752:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8006754:	69bb      	ldr	r3, [r7, #24]
	}
 8006756:	4618      	mov	r0, r3
 8006758:	3720      	adds	r7, #32
 800675a:	46bd      	mov	sp, r7
 800675c:	bd80      	pop	{r7, pc}
	...

08006760 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8006760:	b580      	push	{r7, lr}
 8006762:	b088      	sub	sp, #32
 8006764:	af00      	add	r7, sp, #0
 8006766:	60f8      	str	r0, [r7, #12]
 8006768:	60b9      	str	r1, [r7, #8]
 800676a:	607a      	str	r2, [r7, #4]
 800676c:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800676e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006770:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	009b      	lsls	r3, r3, #2
 8006776:	461a      	mov	r2, r3
 8006778:	21a5      	movs	r1, #165	@ 0xa5
 800677a:	f002 f827 	bl	80087cc <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800677e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006780:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	f103 4380 	add.w	r3, r3, #1073741824	@ 0x40000000
 8006788:	3b01      	subs	r3, #1
 800678a:	009b      	lsls	r3, r3, #2
 800678c:	4413      	add	r3, r2
 800678e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8006790:	69bb      	ldr	r3, [r7, #24]
 8006792:	f023 0307 	bic.w	r3, r3, #7
 8006796:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8006798:	69bb      	ldr	r3, [r7, #24]
 800679a:	f003 0307 	and.w	r3, r3, #7
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d00b      	beq.n	80067ba <prvInitialiseNewTask+0x5a>
	__asm volatile
 80067a2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80067a6:	f383 8811 	msr	BASEPRI, r3
 80067aa:	f3bf 8f6f 	isb	sy
 80067ae:	f3bf 8f4f 	dsb	sy
 80067b2:	617b      	str	r3, [r7, #20]
}
 80067b4:	bf00      	nop
 80067b6:	bf00      	nop
 80067b8:	e7fd      	b.n	80067b6 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80067ba:	68bb      	ldr	r3, [r7, #8]
 80067bc:	2b00      	cmp	r3, #0
 80067be:	d01f      	beq.n	8006800 <prvInitialiseNewTask+0xa0>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067c0:	2300      	movs	r3, #0
 80067c2:	61fb      	str	r3, [r7, #28]
 80067c4:	e012      	b.n	80067ec <prvInitialiseNewTask+0x8c>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80067c6:	68ba      	ldr	r2, [r7, #8]
 80067c8:	69fb      	ldr	r3, [r7, #28]
 80067ca:	4413      	add	r3, r2
 80067cc:	7819      	ldrb	r1, [r3, #0]
 80067ce:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80067d0:	69fb      	ldr	r3, [r7, #28]
 80067d2:	4413      	add	r3, r2
 80067d4:	3334      	adds	r3, #52	@ 0x34
 80067d6:	460a      	mov	r2, r1
 80067d8:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80067da:	68ba      	ldr	r2, [r7, #8]
 80067dc:	69fb      	ldr	r3, [r7, #28]
 80067de:	4413      	add	r3, r2
 80067e0:	781b      	ldrb	r3, [r3, #0]
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d006      	beq.n	80067f4 <prvInitialiseNewTask+0x94>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80067e6:	69fb      	ldr	r3, [r7, #28]
 80067e8:	3301      	adds	r3, #1
 80067ea:	61fb      	str	r3, [r7, #28]
 80067ec:	69fb      	ldr	r3, [r7, #28]
 80067ee:	2b0f      	cmp	r3, #15
 80067f0:	d9e9      	bls.n	80067c6 <prvInitialiseNewTask+0x66>
 80067f2:	e000      	b.n	80067f6 <prvInitialiseNewTask+0x96>
			{
				break;
 80067f4:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 80067f6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80067f8:	2200      	movs	r2, #0
 80067fa:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80067fe:	e003      	b.n	8006808 <prvInitialiseNewTask+0xa8>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8006800:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006802:	2200      	movs	r2, #0
 8006804:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8006808:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800680a:	2b37      	cmp	r3, #55	@ 0x37
 800680c:	d901      	bls.n	8006812 <prvInitialiseNewTask+0xb2>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800680e:	2337      	movs	r3, #55	@ 0x37
 8006810:	62bb      	str	r3, [r7, #40]	@ 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8006812:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006814:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8006816:	62da      	str	r2, [r3, #44]	@ 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8006818:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800681a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800681c:	64da      	str	r2, [r3, #76]	@ 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800681e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006820:	2200      	movs	r2, #0
 8006822:	651a      	str	r2, [r3, #80]	@ 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 8006824:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006826:	3304      	adds	r3, #4
 8006828:	4618      	mov	r0, r3
 800682a:	f7ff f929 	bl	8005a80 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800682e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006830:	3318      	adds	r3, #24
 8006832:	4618      	mov	r0, r3
 8006834:	f7ff f924 	bl	8005a80 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8006838:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800683a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800683c:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800683e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8006840:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8006844:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006846:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8006848:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800684a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800684c:	625a      	str	r2, [r3, #36]	@ 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800684e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006850:	2200      	movs	r2, #0
 8006852:	f8c3 20a0 	str.w	r2, [r3, #160]	@ 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8006856:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006858:	2200      	movs	r2, #0
 800685a:	f883 20a4 	strb.w	r2, [r3, #164]	@ 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 800685e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006860:	3354      	adds	r3, #84	@ 0x54
 8006862:	224c      	movs	r2, #76	@ 0x4c
 8006864:	2100      	movs	r1, #0
 8006866:	4618      	mov	r0, r3
 8006868:	f001 ffb0 	bl	80087cc <memset>
 800686c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800686e:	4a0d      	ldr	r2, [pc, #52]	@ (80068a4 <prvInitialiseNewTask+0x144>)
 8006870:	659a      	str	r2, [r3, #88]	@ 0x58
 8006872:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006874:	4a0c      	ldr	r2, [pc, #48]	@ (80068a8 <prvInitialiseNewTask+0x148>)
 8006876:	65da      	str	r2, [r3, #92]	@ 0x5c
 8006878:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800687a:	4a0c      	ldr	r2, [pc, #48]	@ (80068ac <prvInitialiseNewTask+0x14c>)
 800687c:	661a      	str	r2, [r3, #96]	@ 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800687e:	683a      	ldr	r2, [r7, #0]
 8006880:	68f9      	ldr	r1, [r7, #12]
 8006882:	69b8      	ldr	r0, [r7, #24]
 8006884:	f001 f95a 	bl	8007b3c <pxPortInitialiseStack>
 8006888:	4602      	mov	r2, r0
 800688a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800688c:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800688e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006890:	2b00      	cmp	r3, #0
 8006892:	d002      	beq.n	800689a <prvInitialiseNewTask+0x13a>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8006894:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8006896:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006898:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800689a:	bf00      	nop
 800689c:	3720      	adds	r7, #32
 800689e:	46bd      	mov	sp, r7
 80068a0:	bd80      	pop	{r7, pc}
 80068a2:	bf00      	nop
 80068a4:	20004cec 	.word	0x20004cec
 80068a8:	20004d54 	.word	0x20004d54
 80068ac:	20004dbc 	.word	0x20004dbc

080068b0 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80068b0:	b580      	push	{r7, lr}
 80068b2:	b082      	sub	sp, #8
 80068b4:	af00      	add	r7, sp, #0
 80068b6:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80068b8:	f001 fa6e 	bl	8007d98 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80068bc:	4b2d      	ldr	r3, [pc, #180]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068be:	681b      	ldr	r3, [r3, #0]
 80068c0:	3301      	adds	r3, #1
 80068c2:	4a2c      	ldr	r2, [pc, #176]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068c4:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80068c6:	4b2c      	ldr	r3, [pc, #176]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d109      	bne.n	80068e2 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80068ce:	4a2a      	ldr	r2, [pc, #168]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80068d4:	4b27      	ldr	r3, [pc, #156]	@ (8006974 <prvAddNewTaskToReadyList+0xc4>)
 80068d6:	681b      	ldr	r3, [r3, #0]
 80068d8:	2b01      	cmp	r3, #1
 80068da:	d110      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80068dc:	f000 fc2e 	bl	800713c <prvInitialiseTaskLists>
 80068e0:	e00d      	b.n	80068fe <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80068e2:	4b26      	ldr	r3, [pc, #152]	@ (800697c <prvAddNewTaskToReadyList+0xcc>)
 80068e4:	681b      	ldr	r3, [r3, #0]
 80068e6:	2b00      	cmp	r3, #0
 80068e8:	d109      	bne.n	80068fe <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80068ea:	4b23      	ldr	r3, [pc, #140]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068ec:	681b      	ldr	r3, [r3, #0]
 80068ee:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80068f0:	687b      	ldr	r3, [r7, #4]
 80068f2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80068f4:	429a      	cmp	r2, r3
 80068f6:	d802      	bhi.n	80068fe <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 80068f8:	4a1f      	ldr	r2, [pc, #124]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 80068fe:	4b20      	ldr	r3, [pc, #128]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 8006900:	681b      	ldr	r3, [r3, #0]
 8006902:	3301      	adds	r3, #1
 8006904:	4a1e      	ldr	r2, [pc, #120]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 8006906:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8006908:	4b1d      	ldr	r3, [pc, #116]	@ (8006980 <prvAddNewTaskToReadyList+0xd0>)
 800690a:	681a      	ldr	r2, [r3, #0]
 800690c:	687b      	ldr	r3, [r7, #4]
 800690e:	645a      	str	r2, [r3, #68]	@ 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006914:	4b1b      	ldr	r3, [pc, #108]	@ (8006984 <prvAddNewTaskToReadyList+0xd4>)
 8006916:	681b      	ldr	r3, [r3, #0]
 8006918:	429a      	cmp	r2, r3
 800691a:	d903      	bls.n	8006924 <prvAddNewTaskToReadyList+0x74>
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006920:	4a18      	ldr	r2, [pc, #96]	@ (8006984 <prvAddNewTaskToReadyList+0xd4>)
 8006922:	6013      	str	r3, [r2, #0]
 8006924:	687b      	ldr	r3, [r7, #4]
 8006926:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006928:	4613      	mov	r3, r2
 800692a:	009b      	lsls	r3, r3, #2
 800692c:	4413      	add	r3, r2
 800692e:	009b      	lsls	r3, r3, #2
 8006930:	4a15      	ldr	r2, [pc, #84]	@ (8006988 <prvAddNewTaskToReadyList+0xd8>)
 8006932:	441a      	add	r2, r3
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	3304      	adds	r3, #4
 8006938:	4619      	mov	r1, r3
 800693a:	4610      	mov	r0, r2
 800693c:	f7ff f8ad 	bl	8005a9a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8006940:	f001 fa5c 	bl	8007dfc <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8006944:	4b0d      	ldr	r3, [pc, #52]	@ (800697c <prvAddNewTaskToReadyList+0xcc>)
 8006946:	681b      	ldr	r3, [r3, #0]
 8006948:	2b00      	cmp	r3, #0
 800694a:	d00e      	beq.n	800696a <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800694c:	4b0a      	ldr	r3, [pc, #40]	@ (8006978 <prvAddNewTaskToReadyList+0xc8>)
 800694e:	681b      	ldr	r3, [r3, #0]
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006956:	429a      	cmp	r2, r3
 8006958:	d207      	bcs.n	800696a <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800695a:	4b0c      	ldr	r3, [pc, #48]	@ (800698c <prvAddNewTaskToReadyList+0xdc>)
 800695c:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006960:	601a      	str	r2, [r3, #0]
 8006962:	f3bf 8f4f 	dsb	sy
 8006966:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800696a:	bf00      	nop
 800696c:	3708      	adds	r7, #8
 800696e:	46bd      	mov	sp, r7
 8006970:	bd80      	pop	{r7, pc}
 8006972:	bf00      	nop
 8006974:	20000f6c 	.word	0x20000f6c
 8006978:	20000a98 	.word	0x20000a98
 800697c:	20000f78 	.word	0x20000f78
 8006980:	20000f88 	.word	0x20000f88
 8006984:	20000f74 	.word	0x20000f74
 8006988:	20000a9c 	.word	0x20000a9c
 800698c:	e000ed04 	.word	0xe000ed04

08006990 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8006990:	b580      	push	{r7, lr}
 8006992:	b084      	sub	sp, #16
 8006994:	af00      	add	r7, sp, #0
 8006996:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8006998:	2300      	movs	r3, #0
 800699a:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	2b00      	cmp	r3, #0
 80069a0:	d018      	beq.n	80069d4 <vTaskDelay+0x44>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80069a2:	4b14      	ldr	r3, [pc, #80]	@ (80069f4 <vTaskDelay+0x64>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d00b      	beq.n	80069c2 <vTaskDelay+0x32>
	__asm volatile
 80069aa:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80069ae:	f383 8811 	msr	BASEPRI, r3
 80069b2:	f3bf 8f6f 	isb	sy
 80069b6:	f3bf 8f4f 	dsb	sy
 80069ba:	60bb      	str	r3, [r7, #8]
}
 80069bc:	bf00      	nop
 80069be:	bf00      	nop
 80069c0:	e7fd      	b.n	80069be <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80069c2:	f000 f88b 	bl	8006adc <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80069c6:	2100      	movs	r1, #0
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f000 fd09 	bl	80073e0 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80069ce:	f000 f893 	bl	8006af8 <xTaskResumeAll>
 80069d2:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	d107      	bne.n	80069ea <vTaskDelay+0x5a>
		{
			portYIELD_WITHIN_API();
 80069da:	4b07      	ldr	r3, [pc, #28]	@ (80069f8 <vTaskDelay+0x68>)
 80069dc:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80069e0:	601a      	str	r2, [r3, #0]
 80069e2:	f3bf 8f4f 	dsb	sy
 80069e6:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80069ea:	bf00      	nop
 80069ec:	3710      	adds	r7, #16
 80069ee:	46bd      	mov	sp, r7
 80069f0:	bd80      	pop	{r7, pc}
 80069f2:	bf00      	nop
 80069f4:	20000f94 	.word	0x20000f94
 80069f8:	e000ed04 	.word	0xe000ed04

080069fc <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 80069fc:	b580      	push	{r7, lr}
 80069fe:	b08a      	sub	sp, #40	@ 0x28
 8006a00:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8006a02:	2300      	movs	r3, #0
 8006a04:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8006a06:	2300      	movs	r3, #0
 8006a08:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8006a0a:	463a      	mov	r2, r7
 8006a0c:	1d39      	adds	r1, r7, #4
 8006a0e:	f107 0308 	add.w	r3, r7, #8
 8006a12:	4618      	mov	r0, r3
 8006a14:	f7fe ffe0 	bl	80059d8 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8006a18:	6839      	ldr	r1, [r7, #0]
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	68ba      	ldr	r2, [r7, #8]
 8006a1e:	9202      	str	r2, [sp, #8]
 8006a20:	9301      	str	r3, [sp, #4]
 8006a22:	2300      	movs	r3, #0
 8006a24:	9300      	str	r3, [sp, #0]
 8006a26:	2300      	movs	r3, #0
 8006a28:	460a      	mov	r2, r1
 8006a2a:	4924      	ldr	r1, [pc, #144]	@ (8006abc <vTaskStartScheduler+0xc0>)
 8006a2c:	4824      	ldr	r0, [pc, #144]	@ (8006ac0 <vTaskStartScheduler+0xc4>)
 8006a2e:	f7ff fdf1 	bl	8006614 <xTaskCreateStatic>
 8006a32:	4603      	mov	r3, r0
 8006a34:	4a23      	ldr	r2, [pc, #140]	@ (8006ac4 <vTaskStartScheduler+0xc8>)
 8006a36:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8006a38:	4b22      	ldr	r3, [pc, #136]	@ (8006ac4 <vTaskStartScheduler+0xc8>)
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d002      	beq.n	8006a46 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8006a40:	2301      	movs	r3, #1
 8006a42:	617b      	str	r3, [r7, #20]
 8006a44:	e001      	b.n	8006a4a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8006a46:	2300      	movs	r3, #0
 8006a48:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8006a4a:	697b      	ldr	r3, [r7, #20]
 8006a4c:	2b01      	cmp	r3, #1
 8006a4e:	d102      	bne.n	8006a56 <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8006a50:	f000 fd1a 	bl	8007488 <xTimerCreateTimerTask>
 8006a54:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	2b01      	cmp	r3, #1
 8006a5a:	d11b      	bne.n	8006a94 <vTaskStartScheduler+0x98>
	__asm volatile
 8006a5c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006a60:	f383 8811 	msr	BASEPRI, r3
 8006a64:	f3bf 8f6f 	isb	sy
 8006a68:	f3bf 8f4f 	dsb	sy
 8006a6c:	613b      	str	r3, [r7, #16]
}
 8006a6e:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006a70:	4b15      	ldr	r3, [pc, #84]	@ (8006ac8 <vTaskStartScheduler+0xcc>)
 8006a72:	681b      	ldr	r3, [r3, #0]
 8006a74:	3354      	adds	r3, #84	@ 0x54
 8006a76:	4a15      	ldr	r2, [pc, #84]	@ (8006acc <vTaskStartScheduler+0xd0>)
 8006a78:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8006a7a:	4b15      	ldr	r3, [pc, #84]	@ (8006ad0 <vTaskStartScheduler+0xd4>)
 8006a7c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a80:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8006a82:	4b14      	ldr	r3, [pc, #80]	@ (8006ad4 <vTaskStartScheduler+0xd8>)
 8006a84:	2201      	movs	r2, #1
 8006a86:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8006a88:	4b13      	ldr	r3, [pc, #76]	@ (8006ad8 <vTaskStartScheduler+0xdc>)
 8006a8a:	2200      	movs	r2, #0
 8006a8c:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8006a8e:	f001 f8df 	bl	8007c50 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8006a92:	e00f      	b.n	8006ab4 <vTaskStartScheduler+0xb8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8006a94:	697b      	ldr	r3, [r7, #20]
 8006a96:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a9a:	d10b      	bne.n	8006ab4 <vTaskStartScheduler+0xb8>
	__asm volatile
 8006a9c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006aa0:	f383 8811 	msr	BASEPRI, r3
 8006aa4:	f3bf 8f6f 	isb	sy
 8006aa8:	f3bf 8f4f 	dsb	sy
 8006aac:	60fb      	str	r3, [r7, #12]
}
 8006aae:	bf00      	nop
 8006ab0:	bf00      	nop
 8006ab2:	e7fd      	b.n	8006ab0 <vTaskStartScheduler+0xb4>
}
 8006ab4:	bf00      	nop
 8006ab6:	3718      	adds	r7, #24
 8006ab8:	46bd      	mov	sp, r7
 8006aba:	bd80      	pop	{r7, pc}
 8006abc:	08009ecc 	.word	0x08009ecc
 8006ac0:	0800710d 	.word	0x0800710d
 8006ac4:	20000f90 	.word	0x20000f90
 8006ac8:	20000a98 	.word	0x20000a98
 8006acc:	2000001c 	.word	0x2000001c
 8006ad0:	20000f8c 	.word	0x20000f8c
 8006ad4:	20000f78 	.word	0x20000f78
 8006ad8:	20000f70 	.word	0x20000f70

08006adc <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8006adc:	b480      	push	{r7}
 8006ade:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8006ae0:	4b04      	ldr	r3, [pc, #16]	@ (8006af4 <vTaskSuspendAll+0x18>)
 8006ae2:	681b      	ldr	r3, [r3, #0]
 8006ae4:	3301      	adds	r3, #1
 8006ae6:	4a03      	ldr	r2, [pc, #12]	@ (8006af4 <vTaskSuspendAll+0x18>)
 8006ae8:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8006aea:	bf00      	nop
 8006aec:	46bd      	mov	sp, r7
 8006aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af2:	4770      	bx	lr
 8006af4:	20000f94 	.word	0x20000f94

08006af8 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8006af8:	b580      	push	{r7, lr}
 8006afa:	b084      	sub	sp, #16
 8006afc:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8006afe:	2300      	movs	r3, #0
 8006b00:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8006b02:	2300      	movs	r3, #0
 8006b04:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8006b06:	4b42      	ldr	r3, [pc, #264]	@ (8006c10 <xTaskResumeAll+0x118>)
 8006b08:	681b      	ldr	r3, [r3, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d10b      	bne.n	8006b26 <xTaskResumeAll+0x2e>
	__asm volatile
 8006b0e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006b12:	f383 8811 	msr	BASEPRI, r3
 8006b16:	f3bf 8f6f 	isb	sy
 8006b1a:	f3bf 8f4f 	dsb	sy
 8006b1e:	603b      	str	r3, [r7, #0]
}
 8006b20:	bf00      	nop
 8006b22:	bf00      	nop
 8006b24:	e7fd      	b.n	8006b22 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8006b26:	f001 f937 	bl	8007d98 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8006b2a:	4b39      	ldr	r3, [pc, #228]	@ (8006c10 <xTaskResumeAll+0x118>)
 8006b2c:	681b      	ldr	r3, [r3, #0]
 8006b2e:	3b01      	subs	r3, #1
 8006b30:	4a37      	ldr	r2, [pc, #220]	@ (8006c10 <xTaskResumeAll+0x118>)
 8006b32:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006b34:	4b36      	ldr	r3, [pc, #216]	@ (8006c10 <xTaskResumeAll+0x118>)
 8006b36:	681b      	ldr	r3, [r3, #0]
 8006b38:	2b00      	cmp	r3, #0
 8006b3a:	d162      	bne.n	8006c02 <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8006b3c:	4b35      	ldr	r3, [pc, #212]	@ (8006c14 <xTaskResumeAll+0x11c>)
 8006b3e:	681b      	ldr	r3, [r3, #0]
 8006b40:	2b00      	cmp	r3, #0
 8006b42:	d05e      	beq.n	8006c02 <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006b44:	e02f      	b.n	8006ba6 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006b46:	4b34      	ldr	r3, [pc, #208]	@ (8006c18 <xTaskResumeAll+0x120>)
 8006b48:	68db      	ldr	r3, [r3, #12]
 8006b4a:	68db      	ldr	r3, [r3, #12]
 8006b4c:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	3318      	adds	r3, #24
 8006b52:	4618      	mov	r0, r3
 8006b54:	f7fe fffe 	bl	8005b54 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006b58:	68fb      	ldr	r3, [r7, #12]
 8006b5a:	3304      	adds	r3, #4
 8006b5c:	4618      	mov	r0, r3
 8006b5e:	f7fe fff9 	bl	8005b54 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8006b62:	68fb      	ldr	r3, [r7, #12]
 8006b64:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b66:	4b2d      	ldr	r3, [pc, #180]	@ (8006c1c <xTaskResumeAll+0x124>)
 8006b68:	681b      	ldr	r3, [r3, #0]
 8006b6a:	429a      	cmp	r2, r3
 8006b6c:	d903      	bls.n	8006b76 <xTaskResumeAll+0x7e>
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b72:	4a2a      	ldr	r2, [pc, #168]	@ (8006c1c <xTaskResumeAll+0x124>)
 8006b74:	6013      	str	r3, [r2, #0]
 8006b76:	68fb      	ldr	r3, [r7, #12]
 8006b78:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b7a:	4613      	mov	r3, r2
 8006b7c:	009b      	lsls	r3, r3, #2
 8006b7e:	4413      	add	r3, r2
 8006b80:	009b      	lsls	r3, r3, #2
 8006b82:	4a27      	ldr	r2, [pc, #156]	@ (8006c20 <xTaskResumeAll+0x128>)
 8006b84:	441a      	add	r2, r3
 8006b86:	68fb      	ldr	r3, [r7, #12]
 8006b88:	3304      	adds	r3, #4
 8006b8a:	4619      	mov	r1, r3
 8006b8c:	4610      	mov	r0, r2
 8006b8e:	f7fe ff84 	bl	8005a9a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006b92:	68fb      	ldr	r3, [r7, #12]
 8006b94:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006b96:	4b23      	ldr	r3, [pc, #140]	@ (8006c24 <xTaskResumeAll+0x12c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006b9c:	429a      	cmp	r2, r3
 8006b9e:	d302      	bcc.n	8006ba6 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8006ba0:	4b21      	ldr	r3, [pc, #132]	@ (8006c28 <xTaskResumeAll+0x130>)
 8006ba2:	2201      	movs	r2, #1
 8006ba4:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8006ba6:	4b1c      	ldr	r3, [pc, #112]	@ (8006c18 <xTaskResumeAll+0x120>)
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	2b00      	cmp	r3, #0
 8006bac:	d1cb      	bne.n	8006b46 <xTaskResumeAll+0x4e>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8006bae:	68fb      	ldr	r3, [r7, #12]
 8006bb0:	2b00      	cmp	r3, #0
 8006bb2:	d001      	beq.n	8006bb8 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8006bb4:	f000 fb66 	bl	8007284 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8006bb8:	4b1c      	ldr	r3, [pc, #112]	@ (8006c2c <xTaskResumeAll+0x134>)
 8006bba:	681b      	ldr	r3, [r3, #0]
 8006bbc:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d010      	beq.n	8006be6 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8006bc4:	f000 f846 	bl	8006c54 <xTaskIncrementTick>
 8006bc8:	4603      	mov	r3, r0
 8006bca:	2b00      	cmp	r3, #0
 8006bcc:	d002      	beq.n	8006bd4 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8006bce:	4b16      	ldr	r3, [pc, #88]	@ (8006c28 <xTaskResumeAll+0x130>)
 8006bd0:	2201      	movs	r2, #1
 8006bd2:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8006bda:	687b      	ldr	r3, [r7, #4]
 8006bdc:	2b00      	cmp	r3, #0
 8006bde:	d1f1      	bne.n	8006bc4 <xTaskResumeAll+0xcc>

						xPendedTicks = 0;
 8006be0:	4b12      	ldr	r3, [pc, #72]	@ (8006c2c <xTaskResumeAll+0x134>)
 8006be2:	2200      	movs	r2, #0
 8006be4:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8006be6:	4b10      	ldr	r3, [pc, #64]	@ (8006c28 <xTaskResumeAll+0x130>)
 8006be8:	681b      	ldr	r3, [r3, #0]
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8006bee:	2301      	movs	r3, #1
 8006bf0:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8006bf2:	4b0f      	ldr	r3, [pc, #60]	@ (8006c30 <xTaskResumeAll+0x138>)
 8006bf4:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8006bf8:	601a      	str	r2, [r3, #0]
 8006bfa:	f3bf 8f4f 	dsb	sy
 8006bfe:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8006c02:	f001 f8fb 	bl	8007dfc <vPortExitCritical>

	return xAlreadyYielded;
 8006c06:	68bb      	ldr	r3, [r7, #8]
}
 8006c08:	4618      	mov	r0, r3
 8006c0a:	3710      	adds	r7, #16
 8006c0c:	46bd      	mov	sp, r7
 8006c0e:	bd80      	pop	{r7, pc}
 8006c10:	20000f94 	.word	0x20000f94
 8006c14:	20000f6c 	.word	0x20000f6c
 8006c18:	20000f2c 	.word	0x20000f2c
 8006c1c:	20000f74 	.word	0x20000f74
 8006c20:	20000a9c 	.word	0x20000a9c
 8006c24:	20000a98 	.word	0x20000a98
 8006c28:	20000f80 	.word	0x20000f80
 8006c2c:	20000f7c 	.word	0x20000f7c
 8006c30:	e000ed04 	.word	0xe000ed04

08006c34 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8006c3a:	4b05      	ldr	r3, [pc, #20]	@ (8006c50 <xTaskGetTickCount+0x1c>)
 8006c3c:	681b      	ldr	r3, [r3, #0]
 8006c3e:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8006c40:	687b      	ldr	r3, [r7, #4]
}
 8006c42:	4618      	mov	r0, r3
 8006c44:	370c      	adds	r7, #12
 8006c46:	46bd      	mov	sp, r7
 8006c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c4c:	4770      	bx	lr
 8006c4e:	bf00      	nop
 8006c50:	20000f70 	.word	0x20000f70

08006c54 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	b086      	sub	sp, #24
 8006c58:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8006c5a:	2300      	movs	r3, #0
 8006c5c:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006c5e:	4b4f      	ldr	r3, [pc, #316]	@ (8006d9c <xTaskIncrementTick+0x148>)
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	f040 8090 	bne.w	8006d88 <xTaskIncrementTick+0x134>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8006c68:	4b4d      	ldr	r3, [pc, #308]	@ (8006da0 <xTaskIncrementTick+0x14c>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	3301      	adds	r3, #1
 8006c6e:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8006c70:	4a4b      	ldr	r2, [pc, #300]	@ (8006da0 <xTaskIncrementTick+0x14c>)
 8006c72:	693b      	ldr	r3, [r7, #16]
 8006c74:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8006c76:	693b      	ldr	r3, [r7, #16]
 8006c78:	2b00      	cmp	r3, #0
 8006c7a:	d121      	bne.n	8006cc0 <xTaskIncrementTick+0x6c>
		{
			taskSWITCH_DELAYED_LISTS();
 8006c7c:	4b49      	ldr	r3, [pc, #292]	@ (8006da4 <xTaskIncrementTick+0x150>)
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	681b      	ldr	r3, [r3, #0]
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d00b      	beq.n	8006c9e <xTaskIncrementTick+0x4a>
	__asm volatile
 8006c86:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006c8a:	f383 8811 	msr	BASEPRI, r3
 8006c8e:	f3bf 8f6f 	isb	sy
 8006c92:	f3bf 8f4f 	dsb	sy
 8006c96:	603b      	str	r3, [r7, #0]
}
 8006c98:	bf00      	nop
 8006c9a:	bf00      	nop
 8006c9c:	e7fd      	b.n	8006c9a <xTaskIncrementTick+0x46>
 8006c9e:	4b41      	ldr	r3, [pc, #260]	@ (8006da4 <xTaskIncrementTick+0x150>)
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	60fb      	str	r3, [r7, #12]
 8006ca4:	4b40      	ldr	r3, [pc, #256]	@ (8006da8 <xTaskIncrementTick+0x154>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a3e      	ldr	r2, [pc, #248]	@ (8006da4 <xTaskIncrementTick+0x150>)
 8006caa:	6013      	str	r3, [r2, #0]
 8006cac:	4a3e      	ldr	r2, [pc, #248]	@ (8006da8 <xTaskIncrementTick+0x154>)
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	6013      	str	r3, [r2, #0]
 8006cb2:	4b3e      	ldr	r3, [pc, #248]	@ (8006dac <xTaskIncrementTick+0x158>)
 8006cb4:	681b      	ldr	r3, [r3, #0]
 8006cb6:	3301      	adds	r3, #1
 8006cb8:	4a3c      	ldr	r2, [pc, #240]	@ (8006dac <xTaskIncrementTick+0x158>)
 8006cba:	6013      	str	r3, [r2, #0]
 8006cbc:	f000 fae2 	bl	8007284 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8006cc0:	4b3b      	ldr	r3, [pc, #236]	@ (8006db0 <xTaskIncrementTick+0x15c>)
 8006cc2:	681b      	ldr	r3, [r3, #0]
 8006cc4:	693a      	ldr	r2, [r7, #16]
 8006cc6:	429a      	cmp	r2, r3
 8006cc8:	d349      	bcc.n	8006d5e <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006cca:	4b36      	ldr	r3, [pc, #216]	@ (8006da4 <xTaskIncrementTick+0x150>)
 8006ccc:	681b      	ldr	r3, [r3, #0]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	2b00      	cmp	r3, #0
 8006cd2:	d104      	bne.n	8006cde <xTaskIncrementTick+0x8a>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006cd4:	4b36      	ldr	r3, [pc, #216]	@ (8006db0 <xTaskIncrementTick+0x15c>)
 8006cd6:	f04f 32ff 	mov.w	r2, #4294967295
 8006cda:	601a      	str	r2, [r3, #0]
					break;
 8006cdc:	e03f      	b.n	8006d5e <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006cde:	4b31      	ldr	r3, [pc, #196]	@ (8006da4 <xTaskIncrementTick+0x150>)
 8006ce0:	681b      	ldr	r3, [r3, #0]
 8006ce2:	68db      	ldr	r3, [r3, #12]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	685b      	ldr	r3, [r3, #4]
 8006cec:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8006cee:	693a      	ldr	r2, [r7, #16]
 8006cf0:	687b      	ldr	r3, [r7, #4]
 8006cf2:	429a      	cmp	r2, r3
 8006cf4:	d203      	bcs.n	8006cfe <xTaskIncrementTick+0xaa>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8006cf6:	4a2e      	ldr	r2, [pc, #184]	@ (8006db0 <xTaskIncrementTick+0x15c>)
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8006cfc:	e02f      	b.n	8006d5e <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8006cfe:	68bb      	ldr	r3, [r7, #8]
 8006d00:	3304      	adds	r3, #4
 8006d02:	4618      	mov	r0, r3
 8006d04:	f7fe ff26 	bl	8005b54 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8006d08:	68bb      	ldr	r3, [r7, #8]
 8006d0a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006d0c:	2b00      	cmp	r3, #0
 8006d0e:	d004      	beq.n	8006d1a <xTaskIncrementTick+0xc6>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8006d10:	68bb      	ldr	r3, [r7, #8]
 8006d12:	3318      	adds	r3, #24
 8006d14:	4618      	mov	r0, r3
 8006d16:	f7fe ff1d 	bl	8005b54 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8006d1a:	68bb      	ldr	r3, [r7, #8]
 8006d1c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d1e:	4b25      	ldr	r3, [pc, #148]	@ (8006db4 <xTaskIncrementTick+0x160>)
 8006d20:	681b      	ldr	r3, [r3, #0]
 8006d22:	429a      	cmp	r2, r3
 8006d24:	d903      	bls.n	8006d2e <xTaskIncrementTick+0xda>
 8006d26:	68bb      	ldr	r3, [r7, #8]
 8006d28:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d2a:	4a22      	ldr	r2, [pc, #136]	@ (8006db4 <xTaskIncrementTick+0x160>)
 8006d2c:	6013      	str	r3, [r2, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d32:	4613      	mov	r3, r2
 8006d34:	009b      	lsls	r3, r3, #2
 8006d36:	4413      	add	r3, r2
 8006d38:	009b      	lsls	r3, r3, #2
 8006d3a:	4a1f      	ldr	r2, [pc, #124]	@ (8006db8 <xTaskIncrementTick+0x164>)
 8006d3c:	441a      	add	r2, r3
 8006d3e:	68bb      	ldr	r3, [r7, #8]
 8006d40:	3304      	adds	r3, #4
 8006d42:	4619      	mov	r1, r3
 8006d44:	4610      	mov	r0, r2
 8006d46:	f7fe fea8 	bl	8005a9a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8006d4a:	68bb      	ldr	r3, [r7, #8]
 8006d4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d4e:	4b1b      	ldr	r3, [pc, #108]	@ (8006dbc <xTaskIncrementTick+0x168>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d54:	429a      	cmp	r2, r3
 8006d56:	d3b8      	bcc.n	8006cca <xTaskIncrementTick+0x76>
						{
							xSwitchRequired = pdTRUE;
 8006d58:	2301      	movs	r3, #1
 8006d5a:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8006d5c:	e7b5      	b.n	8006cca <xTaskIncrementTick+0x76>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8006d5e:	4b17      	ldr	r3, [pc, #92]	@ (8006dbc <xTaskIncrementTick+0x168>)
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d64:	4914      	ldr	r1, [pc, #80]	@ (8006db8 <xTaskIncrementTick+0x164>)
 8006d66:	4613      	mov	r3, r2
 8006d68:	009b      	lsls	r3, r3, #2
 8006d6a:	4413      	add	r3, r2
 8006d6c:	009b      	lsls	r3, r3, #2
 8006d6e:	440b      	add	r3, r1
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	2b01      	cmp	r3, #1
 8006d74:	d901      	bls.n	8006d7a <xTaskIncrementTick+0x126>
			{
				xSwitchRequired = pdTRUE;
 8006d76:	2301      	movs	r3, #1
 8006d78:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8006d7a:	4b11      	ldr	r3, [pc, #68]	@ (8006dc0 <xTaskIncrementTick+0x16c>)
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	2b00      	cmp	r3, #0
 8006d80:	d007      	beq.n	8006d92 <xTaskIncrementTick+0x13e>
			{
				xSwitchRequired = pdTRUE;
 8006d82:	2301      	movs	r3, #1
 8006d84:	617b      	str	r3, [r7, #20]
 8006d86:	e004      	b.n	8006d92 <xTaskIncrementTick+0x13e>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8006d88:	4b0e      	ldr	r3, [pc, #56]	@ (8006dc4 <xTaskIncrementTick+0x170>)
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3301      	adds	r3, #1
 8006d8e:	4a0d      	ldr	r2, [pc, #52]	@ (8006dc4 <xTaskIncrementTick+0x170>)
 8006d90:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8006d92:	697b      	ldr	r3, [r7, #20]
}
 8006d94:	4618      	mov	r0, r3
 8006d96:	3718      	adds	r7, #24
 8006d98:	46bd      	mov	sp, r7
 8006d9a:	bd80      	pop	{r7, pc}
 8006d9c:	20000f94 	.word	0x20000f94
 8006da0:	20000f70 	.word	0x20000f70
 8006da4:	20000f24 	.word	0x20000f24
 8006da8:	20000f28 	.word	0x20000f28
 8006dac:	20000f84 	.word	0x20000f84
 8006db0:	20000f8c 	.word	0x20000f8c
 8006db4:	20000f74 	.word	0x20000f74
 8006db8:	20000a9c 	.word	0x20000a9c
 8006dbc:	20000a98 	.word	0x20000a98
 8006dc0:	20000f80 	.word	0x20000f80
 8006dc4:	20000f7c 	.word	0x20000f7c

08006dc8 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8006dc8:	b480      	push	{r7}
 8006dca:	b085      	sub	sp, #20
 8006dcc:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8006dce:	4b2b      	ldr	r3, [pc, #172]	@ (8006e7c <vTaskSwitchContext+0xb4>)
 8006dd0:	681b      	ldr	r3, [r3, #0]
 8006dd2:	2b00      	cmp	r3, #0
 8006dd4:	d003      	beq.n	8006dde <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8006dd6:	4b2a      	ldr	r3, [pc, #168]	@ (8006e80 <vTaskSwitchContext+0xb8>)
 8006dd8:	2201      	movs	r2, #1
 8006dda:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8006ddc:	e047      	b.n	8006e6e <vTaskSwitchContext+0xa6>
		xYieldPending = pdFALSE;
 8006dde:	4b28      	ldr	r3, [pc, #160]	@ (8006e80 <vTaskSwitchContext+0xb8>)
 8006de0:	2200      	movs	r2, #0
 8006de2:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006de4:	4b27      	ldr	r3, [pc, #156]	@ (8006e84 <vTaskSwitchContext+0xbc>)
 8006de6:	681b      	ldr	r3, [r3, #0]
 8006de8:	60fb      	str	r3, [r7, #12]
 8006dea:	e011      	b.n	8006e10 <vTaskSwitchContext+0x48>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2b00      	cmp	r3, #0
 8006df0:	d10b      	bne.n	8006e0a <vTaskSwitchContext+0x42>
	__asm volatile
 8006df2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006df6:	f383 8811 	msr	BASEPRI, r3
 8006dfa:	f3bf 8f6f 	isb	sy
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	607b      	str	r3, [r7, #4]
}
 8006e04:	bf00      	nop
 8006e06:	bf00      	nop
 8006e08:	e7fd      	b.n	8006e06 <vTaskSwitchContext+0x3e>
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	3b01      	subs	r3, #1
 8006e0e:	60fb      	str	r3, [r7, #12]
 8006e10:	491d      	ldr	r1, [pc, #116]	@ (8006e88 <vTaskSwitchContext+0xc0>)
 8006e12:	68fa      	ldr	r2, [r7, #12]
 8006e14:	4613      	mov	r3, r2
 8006e16:	009b      	lsls	r3, r3, #2
 8006e18:	4413      	add	r3, r2
 8006e1a:	009b      	lsls	r3, r3, #2
 8006e1c:	440b      	add	r3, r1
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	2b00      	cmp	r3, #0
 8006e22:	d0e3      	beq.n	8006dec <vTaskSwitchContext+0x24>
 8006e24:	68fa      	ldr	r2, [r7, #12]
 8006e26:	4613      	mov	r3, r2
 8006e28:	009b      	lsls	r3, r3, #2
 8006e2a:	4413      	add	r3, r2
 8006e2c:	009b      	lsls	r3, r3, #2
 8006e2e:	4a16      	ldr	r2, [pc, #88]	@ (8006e88 <vTaskSwitchContext+0xc0>)
 8006e30:	4413      	add	r3, r2
 8006e32:	60bb      	str	r3, [r7, #8]
 8006e34:	68bb      	ldr	r3, [r7, #8]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	685a      	ldr	r2, [r3, #4]
 8006e3a:	68bb      	ldr	r3, [r7, #8]
 8006e3c:	605a      	str	r2, [r3, #4]
 8006e3e:	68bb      	ldr	r3, [r7, #8]
 8006e40:	685a      	ldr	r2, [r3, #4]
 8006e42:	68bb      	ldr	r3, [r7, #8]
 8006e44:	3308      	adds	r3, #8
 8006e46:	429a      	cmp	r2, r3
 8006e48:	d104      	bne.n	8006e54 <vTaskSwitchContext+0x8c>
 8006e4a:	68bb      	ldr	r3, [r7, #8]
 8006e4c:	685b      	ldr	r3, [r3, #4]
 8006e4e:	685a      	ldr	r2, [r3, #4]
 8006e50:	68bb      	ldr	r3, [r7, #8]
 8006e52:	605a      	str	r2, [r3, #4]
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	685b      	ldr	r3, [r3, #4]
 8006e58:	68db      	ldr	r3, [r3, #12]
 8006e5a:	4a0c      	ldr	r2, [pc, #48]	@ (8006e8c <vTaskSwitchContext+0xc4>)
 8006e5c:	6013      	str	r3, [r2, #0]
 8006e5e:	4a09      	ldr	r2, [pc, #36]	@ (8006e84 <vTaskSwitchContext+0xbc>)
 8006e60:	68fb      	ldr	r3, [r7, #12]
 8006e62:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8006e64:	4b09      	ldr	r3, [pc, #36]	@ (8006e8c <vTaskSwitchContext+0xc4>)
 8006e66:	681b      	ldr	r3, [r3, #0]
 8006e68:	3354      	adds	r3, #84	@ 0x54
 8006e6a:	4a09      	ldr	r2, [pc, #36]	@ (8006e90 <vTaskSwitchContext+0xc8>)
 8006e6c:	6013      	str	r3, [r2, #0]
}
 8006e6e:	bf00      	nop
 8006e70:	3714      	adds	r7, #20
 8006e72:	46bd      	mov	sp, r7
 8006e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e78:	4770      	bx	lr
 8006e7a:	bf00      	nop
 8006e7c:	20000f94 	.word	0x20000f94
 8006e80:	20000f80 	.word	0x20000f80
 8006e84:	20000f74 	.word	0x20000f74
 8006e88:	20000a9c 	.word	0x20000a9c
 8006e8c:	20000a98 	.word	0x20000a98
 8006e90:	2000001c 	.word	0x2000001c

08006e94 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8006e94:	b580      	push	{r7, lr}
 8006e96:	b084      	sub	sp, #16
 8006e98:	af00      	add	r7, sp, #0
 8006e9a:	6078      	str	r0, [r7, #4]
 8006e9c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d10b      	bne.n	8006ebc <vTaskPlaceOnEventList+0x28>
	__asm volatile
 8006ea4:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ea8:	f383 8811 	msr	BASEPRI, r3
 8006eac:	f3bf 8f6f 	isb	sy
 8006eb0:	f3bf 8f4f 	dsb	sy
 8006eb4:	60fb      	str	r3, [r7, #12]
}
 8006eb6:	bf00      	nop
 8006eb8:	bf00      	nop
 8006eba:	e7fd      	b.n	8006eb8 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006ebc:	4b07      	ldr	r3, [pc, #28]	@ (8006edc <vTaskPlaceOnEventList+0x48>)
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	3318      	adds	r3, #24
 8006ec2:	4619      	mov	r1, r3
 8006ec4:	6878      	ldr	r0, [r7, #4]
 8006ec6:	f7fe fe0c 	bl	8005ae2 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8006eca:	2101      	movs	r1, #1
 8006ecc:	6838      	ldr	r0, [r7, #0]
 8006ece:	f000 fa87 	bl	80073e0 <prvAddCurrentTaskToDelayedList>
}
 8006ed2:	bf00      	nop
 8006ed4:	3710      	adds	r7, #16
 8006ed6:	46bd      	mov	sp, r7
 8006ed8:	bd80      	pop	{r7, pc}
 8006eda:	bf00      	nop
 8006edc:	20000a98 	.word	0x20000a98

08006ee0 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8006ee0:	b580      	push	{r7, lr}
 8006ee2:	b086      	sub	sp, #24
 8006ee4:	af00      	add	r7, sp, #0
 8006ee6:	60f8      	str	r0, [r7, #12]
 8006ee8:	60b9      	str	r1, [r7, #8]
 8006eea:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	d10b      	bne.n	8006f0a <vTaskPlaceOnEventListRestricted+0x2a>
	__asm volatile
 8006ef2:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006ef6:	f383 8811 	msr	BASEPRI, r3
 8006efa:	f3bf 8f6f 	isb	sy
 8006efe:	f3bf 8f4f 	dsb	sy
 8006f02:	617b      	str	r3, [r7, #20]
}
 8006f04:	bf00      	nop
 8006f06:	bf00      	nop
 8006f08:	e7fd      	b.n	8006f06 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8006f0a:	4b0a      	ldr	r3, [pc, #40]	@ (8006f34 <vTaskPlaceOnEventListRestricted+0x54>)
 8006f0c:	681b      	ldr	r3, [r3, #0]
 8006f0e:	3318      	adds	r3, #24
 8006f10:	4619      	mov	r1, r3
 8006f12:	68f8      	ldr	r0, [r7, #12]
 8006f14:	f7fe fdc1 	bl	8005a9a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8006f18:	687b      	ldr	r3, [r7, #4]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d002      	beq.n	8006f24 <vTaskPlaceOnEventListRestricted+0x44>
		{
			xTicksToWait = portMAX_DELAY;
 8006f1e:	f04f 33ff 	mov.w	r3, #4294967295
 8006f22:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8006f24:	6879      	ldr	r1, [r7, #4]
 8006f26:	68b8      	ldr	r0, [r7, #8]
 8006f28:	f000 fa5a 	bl	80073e0 <prvAddCurrentTaskToDelayedList>
	}
 8006f2c:	bf00      	nop
 8006f2e:	3718      	adds	r7, #24
 8006f30:	46bd      	mov	sp, r7
 8006f32:	bd80      	pop	{r7, pc}
 8006f34:	20000a98 	.word	0x20000a98

08006f38 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8006f38:	b580      	push	{r7, lr}
 8006f3a:	b086      	sub	sp, #24
 8006f3c:	af00      	add	r7, sp, #0
 8006f3e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8006f40:	687b      	ldr	r3, [r7, #4]
 8006f42:	68db      	ldr	r3, [r3, #12]
 8006f44:	68db      	ldr	r3, [r3, #12]
 8006f46:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8006f48:	693b      	ldr	r3, [r7, #16]
 8006f4a:	2b00      	cmp	r3, #0
 8006f4c:	d10b      	bne.n	8006f66 <xTaskRemoveFromEventList+0x2e>
	__asm volatile
 8006f4e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8006f52:	f383 8811 	msr	BASEPRI, r3
 8006f56:	f3bf 8f6f 	isb	sy
 8006f5a:	f3bf 8f4f 	dsb	sy
 8006f5e:	60fb      	str	r3, [r7, #12]
}
 8006f60:	bf00      	nop
 8006f62:	bf00      	nop
 8006f64:	e7fd      	b.n	8006f62 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	3318      	adds	r3, #24
 8006f6a:	4618      	mov	r0, r3
 8006f6c:	f7fe fdf2 	bl	8005b54 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8006f70:	4b1d      	ldr	r3, [pc, #116]	@ (8006fe8 <xTaskRemoveFromEventList+0xb0>)
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2b00      	cmp	r3, #0
 8006f76:	d11d      	bne.n	8006fb4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	3304      	adds	r3, #4
 8006f7c:	4618      	mov	r0, r3
 8006f7e:	f7fe fde9 	bl	8005b54 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8006f82:	693b      	ldr	r3, [r7, #16]
 8006f84:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f86:	4b19      	ldr	r3, [pc, #100]	@ (8006fec <xTaskRemoveFromEventList+0xb4>)
 8006f88:	681b      	ldr	r3, [r3, #0]
 8006f8a:	429a      	cmp	r2, r3
 8006f8c:	d903      	bls.n	8006f96 <xTaskRemoveFromEventList+0x5e>
 8006f8e:	693b      	ldr	r3, [r7, #16]
 8006f90:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f92:	4a16      	ldr	r2, [pc, #88]	@ (8006fec <xTaskRemoveFromEventList+0xb4>)
 8006f94:	6013      	str	r3, [r2, #0]
 8006f96:	693b      	ldr	r3, [r7, #16]
 8006f98:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f9a:	4613      	mov	r3, r2
 8006f9c:	009b      	lsls	r3, r3, #2
 8006f9e:	4413      	add	r3, r2
 8006fa0:	009b      	lsls	r3, r3, #2
 8006fa2:	4a13      	ldr	r2, [pc, #76]	@ (8006ff0 <xTaskRemoveFromEventList+0xb8>)
 8006fa4:	441a      	add	r2, r3
 8006fa6:	693b      	ldr	r3, [r7, #16]
 8006fa8:	3304      	adds	r3, #4
 8006faa:	4619      	mov	r1, r3
 8006fac:	4610      	mov	r0, r2
 8006fae:	f7fe fd74 	bl	8005a9a <vListInsertEnd>
 8006fb2:	e005      	b.n	8006fc0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 8006fb4:	693b      	ldr	r3, [r7, #16]
 8006fb6:	3318      	adds	r3, #24
 8006fb8:	4619      	mov	r1, r3
 8006fba:	480e      	ldr	r0, [pc, #56]	@ (8006ff4 <xTaskRemoveFromEventList+0xbc>)
 8006fbc:	f7fe fd6d 	bl	8005a9a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 8006fc0:	693b      	ldr	r3, [r7, #16]
 8006fc2:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006fc4:	4b0c      	ldr	r3, [pc, #48]	@ (8006ff8 <xTaskRemoveFromEventList+0xc0>)
 8006fc6:	681b      	ldr	r3, [r3, #0]
 8006fc8:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006fca:	429a      	cmp	r2, r3
 8006fcc:	d905      	bls.n	8006fda <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8006fce:	2301      	movs	r3, #1
 8006fd0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 8006fd2:	4b0a      	ldr	r3, [pc, #40]	@ (8006ffc <xTaskRemoveFromEventList+0xc4>)
 8006fd4:	2201      	movs	r2, #1
 8006fd6:	601a      	str	r2, [r3, #0]
 8006fd8:	e001      	b.n	8006fde <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 8006fda:	2300      	movs	r3, #0
 8006fdc:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8006fde:	697b      	ldr	r3, [r7, #20]
}
 8006fe0:	4618      	mov	r0, r3
 8006fe2:	3718      	adds	r7, #24
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	bd80      	pop	{r7, pc}
 8006fe8:	20000f94 	.word	0x20000f94
 8006fec:	20000f74 	.word	0x20000f74
 8006ff0:	20000a9c 	.word	0x20000a9c
 8006ff4:	20000f2c 	.word	0x20000f2c
 8006ff8:	20000a98 	.word	0x20000a98
 8006ffc:	20000f80 	.word	0x20000f80

08007000 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8007000:	b480      	push	{r7}
 8007002:	b083      	sub	sp, #12
 8007004:	af00      	add	r7, sp, #0
 8007006:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8007008:	4b06      	ldr	r3, [pc, #24]	@ (8007024 <vTaskInternalSetTimeOutState+0x24>)
 800700a:	681a      	ldr	r2, [r3, #0]
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8007010:	4b05      	ldr	r3, [pc, #20]	@ (8007028 <vTaskInternalSetTimeOutState+0x28>)
 8007012:	681a      	ldr	r2, [r3, #0]
 8007014:	687b      	ldr	r3, [r7, #4]
 8007016:	605a      	str	r2, [r3, #4]
}
 8007018:	bf00      	nop
 800701a:	370c      	adds	r7, #12
 800701c:	46bd      	mov	sp, r7
 800701e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007022:	4770      	bx	lr
 8007024:	20000f84 	.word	0x20000f84
 8007028:	20000f70 	.word	0x20000f70

0800702c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800702c:	b580      	push	{r7, lr}
 800702e:	b088      	sub	sp, #32
 8007030:	af00      	add	r7, sp, #0
 8007032:	6078      	str	r0, [r7, #4]
 8007034:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8007036:	687b      	ldr	r3, [r7, #4]
 8007038:	2b00      	cmp	r3, #0
 800703a:	d10b      	bne.n	8007054 <xTaskCheckForTimeOut+0x28>
	__asm volatile
 800703c:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007040:	f383 8811 	msr	BASEPRI, r3
 8007044:	f3bf 8f6f 	isb	sy
 8007048:	f3bf 8f4f 	dsb	sy
 800704c:	613b      	str	r3, [r7, #16]
}
 800704e:	bf00      	nop
 8007050:	bf00      	nop
 8007052:	e7fd      	b.n	8007050 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 8007054:	683b      	ldr	r3, [r7, #0]
 8007056:	2b00      	cmp	r3, #0
 8007058:	d10b      	bne.n	8007072 <xTaskCheckForTimeOut+0x46>
	__asm volatile
 800705a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 800705e:	f383 8811 	msr	BASEPRI, r3
 8007062:	f3bf 8f6f 	isb	sy
 8007066:	f3bf 8f4f 	dsb	sy
 800706a:	60fb      	str	r3, [r7, #12]
}
 800706c:	bf00      	nop
 800706e:	bf00      	nop
 8007070:	e7fd      	b.n	800706e <xTaskCheckForTimeOut+0x42>

	taskENTER_CRITICAL();
 8007072:	f000 fe91 	bl	8007d98 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8007076:	4b1d      	ldr	r3, [pc, #116]	@ (80070ec <xTaskCheckForTimeOut+0xc0>)
 8007078:	681b      	ldr	r3, [r3, #0]
 800707a:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	685b      	ldr	r3, [r3, #4]
 8007080:	69ba      	ldr	r2, [r7, #24]
 8007082:	1ad3      	subs	r3, r2, r3
 8007084:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8007086:	683b      	ldr	r3, [r7, #0]
 8007088:	681b      	ldr	r3, [r3, #0]
 800708a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800708e:	d102      	bne.n	8007096 <xTaskCheckForTimeOut+0x6a>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8007090:	2300      	movs	r3, #0
 8007092:	61fb      	str	r3, [r7, #28]
 8007094:	e023      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681a      	ldr	r2, [r3, #0]
 800709a:	4b15      	ldr	r3, [pc, #84]	@ (80070f0 <xTaskCheckForTimeOut+0xc4>)
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	429a      	cmp	r2, r3
 80070a0:	d007      	beq.n	80070b2 <xTaskCheckForTimeOut+0x86>
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	685b      	ldr	r3, [r3, #4]
 80070a6:	69ba      	ldr	r2, [r7, #24]
 80070a8:	429a      	cmp	r2, r3
 80070aa:	d302      	bcc.n	80070b2 <xTaskCheckForTimeOut+0x86>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80070ac:	2301      	movs	r3, #1
 80070ae:	61fb      	str	r3, [r7, #28]
 80070b0:	e015      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	697a      	ldr	r2, [r7, #20]
 80070b8:	429a      	cmp	r2, r3
 80070ba:	d20b      	bcs.n	80070d4 <xTaskCheckForTimeOut+0xa8>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80070bc:	683b      	ldr	r3, [r7, #0]
 80070be:	681a      	ldr	r2, [r3, #0]
 80070c0:	697b      	ldr	r3, [r7, #20]
 80070c2:	1ad2      	subs	r2, r2, r3
 80070c4:	683b      	ldr	r3, [r7, #0]
 80070c6:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80070c8:	6878      	ldr	r0, [r7, #4]
 80070ca:	f7ff ff99 	bl	8007000 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80070ce:	2300      	movs	r3, #0
 80070d0:	61fb      	str	r3, [r7, #28]
 80070d2:	e004      	b.n	80070de <xTaskCheckForTimeOut+0xb2>
		}
		else
		{
			*pxTicksToWait = 0;
 80070d4:	683b      	ldr	r3, [r7, #0]
 80070d6:	2200      	movs	r2, #0
 80070d8:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80070da:	2301      	movs	r3, #1
 80070dc:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80070de:	f000 fe8d 	bl	8007dfc <vPortExitCritical>

	return xReturn;
 80070e2:	69fb      	ldr	r3, [r7, #28]
}
 80070e4:	4618      	mov	r0, r3
 80070e6:	3720      	adds	r7, #32
 80070e8:	46bd      	mov	sp, r7
 80070ea:	bd80      	pop	{r7, pc}
 80070ec:	20000f70 	.word	0x20000f70
 80070f0:	20000f84 	.word	0x20000f84

080070f4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 80070f4:	b480      	push	{r7}
 80070f6:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 80070f8:	4b03      	ldr	r3, [pc, #12]	@ (8007108 <vTaskMissedYield+0x14>)
 80070fa:	2201      	movs	r2, #1
 80070fc:	601a      	str	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	46bd      	mov	sp, r7
 8007102:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007106:	4770      	bx	lr
 8007108:	20000f80 	.word	0x20000f80

0800710c <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800710c:	b580      	push	{r7, lr}
 800710e:	b082      	sub	sp, #8
 8007110:	af00      	add	r7, sp, #0
 8007112:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8007114:	f000 f852 	bl	80071bc <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8007118:	4b06      	ldr	r3, [pc, #24]	@ (8007134 <prvIdleTask+0x28>)
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	2b01      	cmp	r3, #1
 800711e:	d9f9      	bls.n	8007114 <prvIdleTask+0x8>
			{
				taskYIELD();
 8007120:	4b05      	ldr	r3, [pc, #20]	@ (8007138 <prvIdleTask+0x2c>)
 8007122:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007126:	601a      	str	r2, [r3, #0]
 8007128:	f3bf 8f4f 	dsb	sy
 800712c:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8007130:	e7f0      	b.n	8007114 <prvIdleTask+0x8>
 8007132:	bf00      	nop
 8007134:	20000a9c 	.word	0x20000a9c
 8007138:	e000ed04 	.word	0xe000ed04

0800713c <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800713c:	b580      	push	{r7, lr}
 800713e:	b082      	sub	sp, #8
 8007140:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8007142:	2300      	movs	r3, #0
 8007144:	607b      	str	r3, [r7, #4]
 8007146:	e00c      	b.n	8007162 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8007148:	687a      	ldr	r2, [r7, #4]
 800714a:	4613      	mov	r3, r2
 800714c:	009b      	lsls	r3, r3, #2
 800714e:	4413      	add	r3, r2
 8007150:	009b      	lsls	r3, r3, #2
 8007152:	4a12      	ldr	r2, [pc, #72]	@ (800719c <prvInitialiseTaskLists+0x60>)
 8007154:	4413      	add	r3, r2
 8007156:	4618      	mov	r0, r3
 8007158:	f7fe fc72 	bl	8005a40 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	3301      	adds	r3, #1
 8007160:	607b      	str	r3, [r7, #4]
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	2b37      	cmp	r3, #55	@ 0x37
 8007166:	d9ef      	bls.n	8007148 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8007168:	480d      	ldr	r0, [pc, #52]	@ (80071a0 <prvInitialiseTaskLists+0x64>)
 800716a:	f7fe fc69 	bl	8005a40 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800716e:	480d      	ldr	r0, [pc, #52]	@ (80071a4 <prvInitialiseTaskLists+0x68>)
 8007170:	f7fe fc66 	bl	8005a40 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8007174:	480c      	ldr	r0, [pc, #48]	@ (80071a8 <prvInitialiseTaskLists+0x6c>)
 8007176:	f7fe fc63 	bl	8005a40 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800717a:	480c      	ldr	r0, [pc, #48]	@ (80071ac <prvInitialiseTaskLists+0x70>)
 800717c:	f7fe fc60 	bl	8005a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8007180:	480b      	ldr	r0, [pc, #44]	@ (80071b0 <prvInitialiseTaskLists+0x74>)
 8007182:	f7fe fc5d 	bl	8005a40 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8007186:	4b0b      	ldr	r3, [pc, #44]	@ (80071b4 <prvInitialiseTaskLists+0x78>)
 8007188:	4a05      	ldr	r2, [pc, #20]	@ (80071a0 <prvInitialiseTaskLists+0x64>)
 800718a:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800718c:	4b0a      	ldr	r3, [pc, #40]	@ (80071b8 <prvInitialiseTaskLists+0x7c>)
 800718e:	4a05      	ldr	r2, [pc, #20]	@ (80071a4 <prvInitialiseTaskLists+0x68>)
 8007190:	601a      	str	r2, [r3, #0]
}
 8007192:	bf00      	nop
 8007194:	3708      	adds	r7, #8
 8007196:	46bd      	mov	sp, r7
 8007198:	bd80      	pop	{r7, pc}
 800719a:	bf00      	nop
 800719c:	20000a9c 	.word	0x20000a9c
 80071a0:	20000efc 	.word	0x20000efc
 80071a4:	20000f10 	.word	0x20000f10
 80071a8:	20000f2c 	.word	0x20000f2c
 80071ac:	20000f40 	.word	0x20000f40
 80071b0:	20000f58 	.word	0x20000f58
 80071b4:	20000f24 	.word	0x20000f24
 80071b8:	20000f28 	.word	0x20000f28

080071bc <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071c2:	e019      	b.n	80071f8 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80071c4:	f000 fde8 	bl	8007d98 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80071c8:	4b10      	ldr	r3, [pc, #64]	@ (800720c <prvCheckTasksWaitingTermination+0x50>)
 80071ca:	68db      	ldr	r3, [r3, #12]
 80071cc:	68db      	ldr	r3, [r3, #12]
 80071ce:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	3304      	adds	r3, #4
 80071d4:	4618      	mov	r0, r3
 80071d6:	f7fe fcbd 	bl	8005b54 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80071da:	4b0d      	ldr	r3, [pc, #52]	@ (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071dc:	681b      	ldr	r3, [r3, #0]
 80071de:	3b01      	subs	r3, #1
 80071e0:	4a0b      	ldr	r2, [pc, #44]	@ (8007210 <prvCheckTasksWaitingTermination+0x54>)
 80071e2:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80071e4:	4b0b      	ldr	r3, [pc, #44]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071e6:	681b      	ldr	r3, [r3, #0]
 80071e8:	3b01      	subs	r3, #1
 80071ea:	4a0a      	ldr	r2, [pc, #40]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071ec:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 80071ee:	f000 fe05 	bl	8007dfc <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 80071f2:	6878      	ldr	r0, [r7, #4]
 80071f4:	f000 f810 	bl	8007218 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80071f8:	4b06      	ldr	r3, [pc, #24]	@ (8007214 <prvCheckTasksWaitingTermination+0x58>)
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	2b00      	cmp	r3, #0
 80071fe:	d1e1      	bne.n	80071c4 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8007200:	bf00      	nop
 8007202:	bf00      	nop
 8007204:	3708      	adds	r7, #8
 8007206:	46bd      	mov	sp, r7
 8007208:	bd80      	pop	{r7, pc}
 800720a:	bf00      	nop
 800720c:	20000f40 	.word	0x20000f40
 8007210:	20000f6c 	.word	0x20000f6c
 8007214:	20000f54 	.word	0x20000f54

08007218 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8007218:	b580      	push	{r7, lr}
 800721a:	b084      	sub	sp, #16
 800721c:	af00      	add	r7, sp, #0
 800721e:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	3354      	adds	r3, #84	@ 0x54
 8007224:	4618      	mov	r0, r3
 8007226:	f001 fae9 	bl	80087fc <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 8007230:	2b00      	cmp	r3, #0
 8007232:	d108      	bne.n	8007246 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8007238:	4618      	mov	r0, r3
 800723a:	f000 ff9d 	bl	8008178 <vPortFree>
				vPortFree( pxTCB );
 800723e:	6878      	ldr	r0, [r7, #4]
 8007240:	f000 ff9a 	bl	8008178 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8007244:	e019      	b.n	800727a <prvDeleteTCB+0x62>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800724c:	2b01      	cmp	r3, #1
 800724e:	d103      	bne.n	8007258 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8007250:	6878      	ldr	r0, [r7, #4]
 8007252:	f000 ff91 	bl	8008178 <vPortFree>
	}
 8007256:	e010      	b.n	800727a <prvDeleteTCB+0x62>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	f893 30a5 	ldrb.w	r3, [r3, #165]	@ 0xa5
 800725e:	2b02      	cmp	r3, #2
 8007260:	d00b      	beq.n	800727a <prvDeleteTCB+0x62>
	__asm volatile
 8007262:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007266:	f383 8811 	msr	BASEPRI, r3
 800726a:	f3bf 8f6f 	isb	sy
 800726e:	f3bf 8f4f 	dsb	sy
 8007272:	60fb      	str	r3, [r7, #12]
}
 8007274:	bf00      	nop
 8007276:	bf00      	nop
 8007278:	e7fd      	b.n	8007276 <prvDeleteTCB+0x5e>
	}
 800727a:	bf00      	nop
 800727c:	3710      	adds	r7, #16
 800727e:	46bd      	mov	sp, r7
 8007280:	bd80      	pop	{r7, pc}
	...

08007284 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8007284:	b480      	push	{r7}
 8007286:	b083      	sub	sp, #12
 8007288:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800728a:	4b0c      	ldr	r3, [pc, #48]	@ (80072bc <prvResetNextTaskUnblockTime+0x38>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	681b      	ldr	r3, [r3, #0]
 8007290:	2b00      	cmp	r3, #0
 8007292:	d104      	bne.n	800729e <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8007294:	4b0a      	ldr	r3, [pc, #40]	@ (80072c0 <prvResetNextTaskUnblockTime+0x3c>)
 8007296:	f04f 32ff 	mov.w	r2, #4294967295
 800729a:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800729c:	e008      	b.n	80072b0 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800729e:	4b07      	ldr	r3, [pc, #28]	@ (80072bc <prvResetNextTaskUnblockTime+0x38>)
 80072a0:	681b      	ldr	r3, [r3, #0]
 80072a2:	68db      	ldr	r3, [r3, #12]
 80072a4:	68db      	ldr	r3, [r3, #12]
 80072a6:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80072a8:	687b      	ldr	r3, [r7, #4]
 80072aa:	685b      	ldr	r3, [r3, #4]
 80072ac:	4a04      	ldr	r2, [pc, #16]	@ (80072c0 <prvResetNextTaskUnblockTime+0x3c>)
 80072ae:	6013      	str	r3, [r2, #0]
}
 80072b0:	bf00      	nop
 80072b2:	370c      	adds	r7, #12
 80072b4:	46bd      	mov	sp, r7
 80072b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ba:	4770      	bx	lr
 80072bc:	20000f24 	.word	0x20000f24
 80072c0:	20000f8c 	.word	0x20000f8c

080072c4 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80072c4:	b480      	push	{r7}
 80072c6:	b083      	sub	sp, #12
 80072c8:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80072ca:	4b0b      	ldr	r3, [pc, #44]	@ (80072f8 <xTaskGetSchedulerState+0x34>)
 80072cc:	681b      	ldr	r3, [r3, #0]
 80072ce:	2b00      	cmp	r3, #0
 80072d0:	d102      	bne.n	80072d8 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80072d2:	2301      	movs	r3, #1
 80072d4:	607b      	str	r3, [r7, #4]
 80072d6:	e008      	b.n	80072ea <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80072d8:	4b08      	ldr	r3, [pc, #32]	@ (80072fc <xTaskGetSchedulerState+0x38>)
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	2b00      	cmp	r3, #0
 80072de:	d102      	bne.n	80072e6 <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80072e0:	2302      	movs	r3, #2
 80072e2:	607b      	str	r3, [r7, #4]
 80072e4:	e001      	b.n	80072ea <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80072e6:	2300      	movs	r3, #0
 80072e8:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80072ea:	687b      	ldr	r3, [r7, #4]
	}
 80072ec:	4618      	mov	r0, r3
 80072ee:	370c      	adds	r7, #12
 80072f0:	46bd      	mov	sp, r7
 80072f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f6:	4770      	bx	lr
 80072f8:	20000f78 	.word	0x20000f78
 80072fc:	20000f94 	.word	0x20000f94

08007300 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8007300:	b580      	push	{r7, lr}
 8007302:	b086      	sub	sp, #24
 8007304:	af00      	add	r7, sp, #0
 8007306:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800730c:	2300      	movs	r3, #0
 800730e:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2b00      	cmp	r3, #0
 8007314:	d058      	beq.n	80073c8 <xTaskPriorityDisinherit+0xc8>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8007316:	4b2f      	ldr	r3, [pc, #188]	@ (80073d4 <xTaskPriorityDisinherit+0xd4>)
 8007318:	681b      	ldr	r3, [r3, #0]
 800731a:	693a      	ldr	r2, [r7, #16]
 800731c:	429a      	cmp	r2, r3
 800731e:	d00b      	beq.n	8007338 <xTaskPriorityDisinherit+0x38>
	__asm volatile
 8007320:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007324:	f383 8811 	msr	BASEPRI, r3
 8007328:	f3bf 8f6f 	isb	sy
 800732c:	f3bf 8f4f 	dsb	sy
 8007330:	60fb      	str	r3, [r7, #12]
}
 8007332:	bf00      	nop
 8007334:	bf00      	nop
 8007336:	e7fd      	b.n	8007334 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 8007338:	693b      	ldr	r3, [r7, #16]
 800733a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800733c:	2b00      	cmp	r3, #0
 800733e:	d10b      	bne.n	8007358 <xTaskPriorityDisinherit+0x58>
	__asm volatile
 8007340:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007344:	f383 8811 	msr	BASEPRI, r3
 8007348:	f3bf 8f6f 	isb	sy
 800734c:	f3bf 8f4f 	dsb	sy
 8007350:	60bb      	str	r3, [r7, #8]
}
 8007352:	bf00      	nop
 8007354:	bf00      	nop
 8007356:	e7fd      	b.n	8007354 <xTaskPriorityDisinherit+0x54>
			( pxTCB->uxMutexesHeld )--;
 8007358:	693b      	ldr	r3, [r7, #16]
 800735a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800735c:	1e5a      	subs	r2, r3, #1
 800735e:	693b      	ldr	r3, [r7, #16]
 8007360:	651a      	str	r2, [r3, #80]	@ 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8007362:	693b      	ldr	r3, [r7, #16]
 8007364:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007366:	693b      	ldr	r3, [r7, #16]
 8007368:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800736a:	429a      	cmp	r2, r3
 800736c:	d02c      	beq.n	80073c8 <xTaskPriorityDisinherit+0xc8>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800736e:	693b      	ldr	r3, [r7, #16]
 8007370:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8007372:	2b00      	cmp	r3, #0
 8007374:	d128      	bne.n	80073c8 <xTaskPriorityDisinherit+0xc8>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8007376:	693b      	ldr	r3, [r7, #16]
 8007378:	3304      	adds	r3, #4
 800737a:	4618      	mov	r0, r3
 800737c:	f7fe fbea 	bl	8005b54 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8007380:	693b      	ldr	r3, [r7, #16]
 8007382:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 8007384:	693b      	ldr	r3, [r7, #16]
 8007386:	62da      	str	r2, [r3, #44]	@ 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007388:	693b      	ldr	r3, [r7, #16]
 800738a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800738c:	f1c3 0238 	rsb	r2, r3, #56	@ 0x38
 8007390:	693b      	ldr	r3, [r7, #16]
 8007392:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8007394:	693b      	ldr	r3, [r7, #16]
 8007396:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8007398:	4b0f      	ldr	r3, [pc, #60]	@ (80073d8 <xTaskPriorityDisinherit+0xd8>)
 800739a:	681b      	ldr	r3, [r3, #0]
 800739c:	429a      	cmp	r2, r3
 800739e:	d903      	bls.n	80073a8 <xTaskPriorityDisinherit+0xa8>
 80073a0:	693b      	ldr	r3, [r7, #16]
 80073a2:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80073a4:	4a0c      	ldr	r2, [pc, #48]	@ (80073d8 <xTaskPriorityDisinherit+0xd8>)
 80073a6:	6013      	str	r3, [r2, #0]
 80073a8:	693b      	ldr	r3, [r7, #16]
 80073aa:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80073ac:	4613      	mov	r3, r2
 80073ae:	009b      	lsls	r3, r3, #2
 80073b0:	4413      	add	r3, r2
 80073b2:	009b      	lsls	r3, r3, #2
 80073b4:	4a09      	ldr	r2, [pc, #36]	@ (80073dc <xTaskPriorityDisinherit+0xdc>)
 80073b6:	441a      	add	r2, r3
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	3304      	adds	r3, #4
 80073bc:	4619      	mov	r1, r3
 80073be:	4610      	mov	r0, r2
 80073c0:	f7fe fb6b 	bl	8005a9a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 80073c4:	2301      	movs	r3, #1
 80073c6:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80073c8:	697b      	ldr	r3, [r7, #20]
	}
 80073ca:	4618      	mov	r0, r3
 80073cc:	3718      	adds	r7, #24
 80073ce:	46bd      	mov	sp, r7
 80073d0:	bd80      	pop	{r7, pc}
 80073d2:	bf00      	nop
 80073d4:	20000a98 	.word	0x20000a98
 80073d8:	20000f74 	.word	0x20000f74
 80073dc:	20000a9c 	.word	0x20000a9c

080073e0 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 80073e0:	b580      	push	{r7, lr}
 80073e2:	b084      	sub	sp, #16
 80073e4:	af00      	add	r7, sp, #0
 80073e6:	6078      	str	r0, [r7, #4]
 80073e8:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 80073ea:	4b21      	ldr	r3, [pc, #132]	@ (8007470 <prvAddCurrentTaskToDelayedList+0x90>)
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80073f0:	4b20      	ldr	r3, [pc, #128]	@ (8007474 <prvAddCurrentTaskToDelayedList+0x94>)
 80073f2:	681b      	ldr	r3, [r3, #0]
 80073f4:	3304      	adds	r3, #4
 80073f6:	4618      	mov	r0, r3
 80073f8:	f7fe fbac 	bl	8005b54 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80073fc:	687b      	ldr	r3, [r7, #4]
 80073fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007402:	d10a      	bne.n	800741a <prvAddCurrentTaskToDelayedList+0x3a>
 8007404:	683b      	ldr	r3, [r7, #0]
 8007406:	2b00      	cmp	r3, #0
 8007408:	d007      	beq.n	800741a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800740a:	4b1a      	ldr	r3, [pc, #104]	@ (8007474 <prvAddCurrentTaskToDelayedList+0x94>)
 800740c:	681b      	ldr	r3, [r3, #0]
 800740e:	3304      	adds	r3, #4
 8007410:	4619      	mov	r1, r3
 8007412:	4819      	ldr	r0, [pc, #100]	@ (8007478 <prvAddCurrentTaskToDelayedList+0x98>)
 8007414:	f7fe fb41 	bl	8005a9a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8007418:	e026      	b.n	8007468 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800741a:	68fa      	ldr	r2, [r7, #12]
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	4413      	add	r3, r2
 8007420:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 8007422:	4b14      	ldr	r3, [pc, #80]	@ (8007474 <prvAddCurrentTaskToDelayedList+0x94>)
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	68ba      	ldr	r2, [r7, #8]
 8007428:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800742a:	68ba      	ldr	r2, [r7, #8]
 800742c:	68fb      	ldr	r3, [r7, #12]
 800742e:	429a      	cmp	r2, r3
 8007430:	d209      	bcs.n	8007446 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007432:	4b12      	ldr	r3, [pc, #72]	@ (800747c <prvAddCurrentTaskToDelayedList+0x9c>)
 8007434:	681a      	ldr	r2, [r3, #0]
 8007436:	4b0f      	ldr	r3, [pc, #60]	@ (8007474 <prvAddCurrentTaskToDelayedList+0x94>)
 8007438:	681b      	ldr	r3, [r3, #0]
 800743a:	3304      	adds	r3, #4
 800743c:	4619      	mov	r1, r3
 800743e:	4610      	mov	r0, r2
 8007440:	f7fe fb4f 	bl	8005ae2 <vListInsert>
}
 8007444:	e010      	b.n	8007468 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8007446:	4b0e      	ldr	r3, [pc, #56]	@ (8007480 <prvAddCurrentTaskToDelayedList+0xa0>)
 8007448:	681a      	ldr	r2, [r3, #0]
 800744a:	4b0a      	ldr	r3, [pc, #40]	@ (8007474 <prvAddCurrentTaskToDelayedList+0x94>)
 800744c:	681b      	ldr	r3, [r3, #0]
 800744e:	3304      	adds	r3, #4
 8007450:	4619      	mov	r1, r3
 8007452:	4610      	mov	r0, r2
 8007454:	f7fe fb45 	bl	8005ae2 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8007458:	4b0a      	ldr	r3, [pc, #40]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xa4>)
 800745a:	681b      	ldr	r3, [r3, #0]
 800745c:	68ba      	ldr	r2, [r7, #8]
 800745e:	429a      	cmp	r2, r3
 8007460:	d202      	bcs.n	8007468 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 8007462:	4a08      	ldr	r2, [pc, #32]	@ (8007484 <prvAddCurrentTaskToDelayedList+0xa4>)
 8007464:	68bb      	ldr	r3, [r7, #8]
 8007466:	6013      	str	r3, [r2, #0]
}
 8007468:	bf00      	nop
 800746a:	3710      	adds	r7, #16
 800746c:	46bd      	mov	sp, r7
 800746e:	bd80      	pop	{r7, pc}
 8007470:	20000f70 	.word	0x20000f70
 8007474:	20000a98 	.word	0x20000a98
 8007478:	20000f58 	.word	0x20000f58
 800747c:	20000f28 	.word	0x20000f28
 8007480:	20000f24 	.word	0x20000f24
 8007484:	20000f8c 	.word	0x20000f8c

08007488 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8007488:	b580      	push	{r7, lr}
 800748a:	b08a      	sub	sp, #40	@ 0x28
 800748c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800748e:	2300      	movs	r3, #0
 8007490:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 8007492:	f000 fb13 	bl	8007abc <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8007496:	4b1d      	ldr	r3, [pc, #116]	@ (800750c <xTimerCreateTimerTask+0x84>)
 8007498:	681b      	ldr	r3, [r3, #0]
 800749a:	2b00      	cmp	r3, #0
 800749c:	d021      	beq.n	80074e2 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800749e:	2300      	movs	r3, #0
 80074a0:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 80074a2:	2300      	movs	r3, #0
 80074a4:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 80074a6:	1d3a      	adds	r2, r7, #4
 80074a8:	f107 0108 	add.w	r1, r7, #8
 80074ac:	f107 030c 	add.w	r3, r7, #12
 80074b0:	4618      	mov	r0, r3
 80074b2:	f7fe faab 	bl	8005a0c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 80074b6:	6879      	ldr	r1, [r7, #4]
 80074b8:	68bb      	ldr	r3, [r7, #8]
 80074ba:	68fa      	ldr	r2, [r7, #12]
 80074bc:	9202      	str	r2, [sp, #8]
 80074be:	9301      	str	r3, [sp, #4]
 80074c0:	2302      	movs	r3, #2
 80074c2:	9300      	str	r3, [sp, #0]
 80074c4:	2300      	movs	r3, #0
 80074c6:	460a      	mov	r2, r1
 80074c8:	4911      	ldr	r1, [pc, #68]	@ (8007510 <xTimerCreateTimerTask+0x88>)
 80074ca:	4812      	ldr	r0, [pc, #72]	@ (8007514 <xTimerCreateTimerTask+0x8c>)
 80074cc:	f7ff f8a2 	bl	8006614 <xTaskCreateStatic>
 80074d0:	4603      	mov	r3, r0
 80074d2:	4a11      	ldr	r2, [pc, #68]	@ (8007518 <xTimerCreateTimerTask+0x90>)
 80074d4:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 80074d6:	4b10      	ldr	r3, [pc, #64]	@ (8007518 <xTimerCreateTimerTask+0x90>)
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d001      	beq.n	80074e2 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 80074de:	2301      	movs	r3, #1
 80074e0:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 80074e2:	697b      	ldr	r3, [r7, #20]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d10b      	bne.n	8007500 <xTimerCreateTimerTask+0x78>
	__asm volatile
 80074e8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80074ec:	f383 8811 	msr	BASEPRI, r3
 80074f0:	f3bf 8f6f 	isb	sy
 80074f4:	f3bf 8f4f 	dsb	sy
 80074f8:	613b      	str	r3, [r7, #16]
}
 80074fa:	bf00      	nop
 80074fc:	bf00      	nop
 80074fe:	e7fd      	b.n	80074fc <xTimerCreateTimerTask+0x74>
	return xReturn;
 8007500:	697b      	ldr	r3, [r7, #20]
}
 8007502:	4618      	mov	r0, r3
 8007504:	3718      	adds	r7, #24
 8007506:	46bd      	mov	sp, r7
 8007508:	bd80      	pop	{r7, pc}
 800750a:	bf00      	nop
 800750c:	20000fc8 	.word	0x20000fc8
 8007510:	08009ed4 	.word	0x08009ed4
 8007514:	08007655 	.word	0x08007655
 8007518:	20000fcc 	.word	0x20000fcc

0800751c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b08a      	sub	sp, #40	@ 0x28
 8007520:	af00      	add	r7, sp, #0
 8007522:	60f8      	str	r0, [r7, #12]
 8007524:	60b9      	str	r1, [r7, #8]
 8007526:	607a      	str	r2, [r7, #4]
 8007528:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800752a:	2300      	movs	r3, #0
 800752c:	627b      	str	r3, [r7, #36]	@ 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800752e:	68fb      	ldr	r3, [r7, #12]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <xTimerGenericCommand+0x30>
	__asm volatile
 8007534:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007538:	f383 8811 	msr	BASEPRI, r3
 800753c:	f3bf 8f6f 	isb	sy
 8007540:	f3bf 8f4f 	dsb	sy
 8007544:	623b      	str	r3, [r7, #32]
}
 8007546:	bf00      	nop
 8007548:	bf00      	nop
 800754a:	e7fd      	b.n	8007548 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800754c:	4b19      	ldr	r3, [pc, #100]	@ (80075b4 <xTimerGenericCommand+0x98>)
 800754e:	681b      	ldr	r3, [r3, #0]
 8007550:	2b00      	cmp	r3, #0
 8007552:	d02a      	beq.n	80075aa <xTimerGenericCommand+0x8e>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 8007554:	68bb      	ldr	r3, [r7, #8]
 8007556:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800755c:	68fb      	ldr	r3, [r7, #12]
 800755e:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 8007560:	68bb      	ldr	r3, [r7, #8]
 8007562:	2b05      	cmp	r3, #5
 8007564:	dc18      	bgt.n	8007598 <xTimerGenericCommand+0x7c>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 8007566:	f7ff fead 	bl	80072c4 <xTaskGetSchedulerState>
 800756a:	4603      	mov	r3, r0
 800756c:	2b02      	cmp	r3, #2
 800756e:	d109      	bne.n	8007584 <xTimerGenericCommand+0x68>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 8007570:	4b10      	ldr	r3, [pc, #64]	@ (80075b4 <xTimerGenericCommand+0x98>)
 8007572:	6818      	ldr	r0, [r3, #0]
 8007574:	f107 0110 	add.w	r1, r7, #16
 8007578:	2300      	movs	r3, #0
 800757a:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800757c:	f7fe fc5a 	bl	8005e34 <xQueueGenericSend>
 8007580:	6278      	str	r0, [r7, #36]	@ 0x24
 8007582:	e012      	b.n	80075aa <xTimerGenericCommand+0x8e>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 8007584:	4b0b      	ldr	r3, [pc, #44]	@ (80075b4 <xTimerGenericCommand+0x98>)
 8007586:	6818      	ldr	r0, [r3, #0]
 8007588:	f107 0110 	add.w	r1, r7, #16
 800758c:	2300      	movs	r3, #0
 800758e:	2200      	movs	r2, #0
 8007590:	f7fe fc50 	bl	8005e34 <xQueueGenericSend>
 8007594:	6278      	str	r0, [r7, #36]	@ 0x24
 8007596:	e008      	b.n	80075aa <xTimerGenericCommand+0x8e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 8007598:	4b06      	ldr	r3, [pc, #24]	@ (80075b4 <xTimerGenericCommand+0x98>)
 800759a:	6818      	ldr	r0, [r3, #0]
 800759c:	f107 0110 	add.w	r1, r7, #16
 80075a0:	2300      	movs	r3, #0
 80075a2:	683a      	ldr	r2, [r7, #0]
 80075a4:	f7fe fd48 	bl	8006038 <xQueueGenericSendFromISR>
 80075a8:	6278      	str	r0, [r7, #36]	@ 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 80075aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
}
 80075ac:	4618      	mov	r0, r3
 80075ae:	3728      	adds	r7, #40	@ 0x28
 80075b0:	46bd      	mov	sp, r7
 80075b2:	bd80      	pop	{r7, pc}
 80075b4:	20000fc8 	.word	0x20000fc8

080075b8 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 80075b8:	b580      	push	{r7, lr}
 80075ba:	b088      	sub	sp, #32
 80075bc:	af02      	add	r7, sp, #8
 80075be:	6078      	str	r0, [r7, #4]
 80075c0:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80075c2:	4b23      	ldr	r3, [pc, #140]	@ (8007650 <prvProcessExpiredTimer+0x98>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	68db      	ldr	r3, [r3, #12]
 80075c8:	68db      	ldr	r3, [r3, #12]
 80075ca:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 80075cc:	697b      	ldr	r3, [r7, #20]
 80075ce:	3304      	adds	r3, #4
 80075d0:	4618      	mov	r0, r3
 80075d2:	f7fe fabf 	bl	8005b54 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80075d6:	697b      	ldr	r3, [r7, #20]
 80075d8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80075dc:	f003 0304 	and.w	r3, r3, #4
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d023      	beq.n	800762c <prvProcessExpiredTimer+0x74>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 80075e4:	697b      	ldr	r3, [r7, #20]
 80075e6:	699a      	ldr	r2, [r3, #24]
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	18d1      	adds	r1, r2, r3
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	683a      	ldr	r2, [r7, #0]
 80075f0:	6978      	ldr	r0, [r7, #20]
 80075f2:	f000 f8d5 	bl	80077a0 <prvInsertTimerInActiveList>
 80075f6:	4603      	mov	r3, r0
 80075f8:	2b00      	cmp	r3, #0
 80075fa:	d020      	beq.n	800763e <prvProcessExpiredTimer+0x86>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 80075fc:	2300      	movs	r3, #0
 80075fe:	9300      	str	r3, [sp, #0]
 8007600:	2300      	movs	r3, #0
 8007602:	687a      	ldr	r2, [r7, #4]
 8007604:	2100      	movs	r1, #0
 8007606:	6978      	ldr	r0, [r7, #20]
 8007608:	f7ff ff88 	bl	800751c <xTimerGenericCommand>
 800760c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800760e:	693b      	ldr	r3, [r7, #16]
 8007610:	2b00      	cmp	r3, #0
 8007612:	d114      	bne.n	800763e <prvProcessExpiredTimer+0x86>
	__asm volatile
 8007614:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007618:	f383 8811 	msr	BASEPRI, r3
 800761c:	f3bf 8f6f 	isb	sy
 8007620:	f3bf 8f4f 	dsb	sy
 8007624:	60fb      	str	r3, [r7, #12]
}
 8007626:	bf00      	nop
 8007628:	bf00      	nop
 800762a:	e7fd      	b.n	8007628 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007632:	f023 0301 	bic.w	r3, r3, #1
 8007636:	b2da      	uxtb	r2, r3
 8007638:	697b      	ldr	r3, [r7, #20]
 800763a:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800763e:	697b      	ldr	r3, [r7, #20]
 8007640:	6a1b      	ldr	r3, [r3, #32]
 8007642:	6978      	ldr	r0, [r7, #20]
 8007644:	4798      	blx	r3
}
 8007646:	bf00      	nop
 8007648:	3718      	adds	r7, #24
 800764a:	46bd      	mov	sp, r7
 800764c:	bd80      	pop	{r7, pc}
 800764e:	bf00      	nop
 8007650:	20000fc0 	.word	0x20000fc0

08007654 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 8007654:	b580      	push	{r7, lr}
 8007656:	b084      	sub	sp, #16
 8007658:	af00      	add	r7, sp, #0
 800765a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800765c:	f107 0308 	add.w	r3, r7, #8
 8007660:	4618      	mov	r0, r3
 8007662:	f000 f859 	bl	8007718 <prvGetNextExpireTime>
 8007666:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 8007668:	68bb      	ldr	r3, [r7, #8]
 800766a:	4619      	mov	r1, r3
 800766c:	68f8      	ldr	r0, [r7, #12]
 800766e:	f000 f805 	bl	800767c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 8007672:	f000 f8d7 	bl	8007824 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 8007676:	bf00      	nop
 8007678:	e7f0      	b.n	800765c <prvTimerTask+0x8>
	...

0800767c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800767c:	b580      	push	{r7, lr}
 800767e:	b084      	sub	sp, #16
 8007680:	af00      	add	r7, sp, #0
 8007682:	6078      	str	r0, [r7, #4]
 8007684:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 8007686:	f7ff fa29 	bl	8006adc <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800768a:	f107 0308 	add.w	r3, r7, #8
 800768e:	4618      	mov	r0, r3
 8007690:	f000 f866 	bl	8007760 <prvSampleTimeNow>
 8007694:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8007696:	68bb      	ldr	r3, [r7, #8]
 8007698:	2b00      	cmp	r3, #0
 800769a:	d130      	bne.n	80076fe <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800769c:	683b      	ldr	r3, [r7, #0]
 800769e:	2b00      	cmp	r3, #0
 80076a0:	d10a      	bne.n	80076b8 <prvProcessTimerOrBlockTask+0x3c>
 80076a2:	687a      	ldr	r2, [r7, #4]
 80076a4:	68fb      	ldr	r3, [r7, #12]
 80076a6:	429a      	cmp	r2, r3
 80076a8:	d806      	bhi.n	80076b8 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 80076aa:	f7ff fa25 	bl	8006af8 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 80076ae:	68f9      	ldr	r1, [r7, #12]
 80076b0:	6878      	ldr	r0, [r7, #4]
 80076b2:	f7ff ff81 	bl	80075b8 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 80076b6:	e024      	b.n	8007702 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d008      	beq.n	80076d0 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 80076be:	4b13      	ldr	r3, [pc, #76]	@ (800770c <prvProcessTimerOrBlockTask+0x90>)
 80076c0:	681b      	ldr	r3, [r3, #0]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d101      	bne.n	80076cc <prvProcessTimerOrBlockTask+0x50>
 80076c8:	2301      	movs	r3, #1
 80076ca:	e000      	b.n	80076ce <prvProcessTimerOrBlockTask+0x52>
 80076cc:	2300      	movs	r3, #0
 80076ce:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 80076d0:	4b0f      	ldr	r3, [pc, #60]	@ (8007710 <prvProcessTimerOrBlockTask+0x94>)
 80076d2:	6818      	ldr	r0, [r3, #0]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	68fb      	ldr	r3, [r7, #12]
 80076d8:	1ad3      	subs	r3, r2, r3
 80076da:	683a      	ldr	r2, [r7, #0]
 80076dc:	4619      	mov	r1, r3
 80076de:	f7fe ff65 	bl	80065ac <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 80076e2:	f7ff fa09 	bl	8006af8 <xTaskResumeAll>
 80076e6:	4603      	mov	r3, r0
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d10a      	bne.n	8007702 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 80076ec:	4b09      	ldr	r3, [pc, #36]	@ (8007714 <prvProcessTimerOrBlockTask+0x98>)
 80076ee:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 80076f2:	601a      	str	r2, [r3, #0]
 80076f4:	f3bf 8f4f 	dsb	sy
 80076f8:	f3bf 8f6f 	isb	sy
}
 80076fc:	e001      	b.n	8007702 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 80076fe:	f7ff f9fb 	bl	8006af8 <xTaskResumeAll>
}
 8007702:	bf00      	nop
 8007704:	3710      	adds	r7, #16
 8007706:	46bd      	mov	sp, r7
 8007708:	bd80      	pop	{r7, pc}
 800770a:	bf00      	nop
 800770c:	20000fc4 	.word	0x20000fc4
 8007710:	20000fc8 	.word	0x20000fc8
 8007714:	e000ed04 	.word	0xe000ed04

08007718 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8007718:	b480      	push	{r7}
 800771a:	b085      	sub	sp, #20
 800771c:	af00      	add	r7, sp, #0
 800771e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8007720:	4b0e      	ldr	r3, [pc, #56]	@ (800775c <prvGetNextExpireTime+0x44>)
 8007722:	681b      	ldr	r3, [r3, #0]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d101      	bne.n	800772e <prvGetNextExpireTime+0x16>
 800772a:	2201      	movs	r2, #1
 800772c:	e000      	b.n	8007730 <prvGetNextExpireTime+0x18>
 800772e:	2200      	movs	r2, #0
 8007730:	687b      	ldr	r3, [r7, #4]
 8007732:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	2b00      	cmp	r3, #0
 800773a:	d105      	bne.n	8007748 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800773c:	4b07      	ldr	r3, [pc, #28]	@ (800775c <prvGetNextExpireTime+0x44>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	68db      	ldr	r3, [r3, #12]
 8007742:	681b      	ldr	r3, [r3, #0]
 8007744:	60fb      	str	r3, [r7, #12]
 8007746:	e001      	b.n	800774c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 8007748:	2300      	movs	r3, #0
 800774a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800774c:	68fb      	ldr	r3, [r7, #12]
}
 800774e:	4618      	mov	r0, r3
 8007750:	3714      	adds	r7, #20
 8007752:	46bd      	mov	sp, r7
 8007754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007758:	4770      	bx	lr
 800775a:	bf00      	nop
 800775c:	20000fc0 	.word	0x20000fc0

08007760 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 8007760:	b580      	push	{r7, lr}
 8007762:	b084      	sub	sp, #16
 8007764:	af00      	add	r7, sp, #0
 8007766:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 8007768:	f7ff fa64 	bl	8006c34 <xTaskGetTickCount>
 800776c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800776e:	4b0b      	ldr	r3, [pc, #44]	@ (800779c <prvSampleTimeNow+0x3c>)
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	68fa      	ldr	r2, [r7, #12]
 8007774:	429a      	cmp	r2, r3
 8007776:	d205      	bcs.n	8007784 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 8007778:	f000 f93a 	bl	80079f0 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800777c:	687b      	ldr	r3, [r7, #4]
 800777e:	2201      	movs	r2, #1
 8007780:	601a      	str	r2, [r3, #0]
 8007782:	e002      	b.n	800778a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	2200      	movs	r2, #0
 8007788:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800778a:	4a04      	ldr	r2, [pc, #16]	@ (800779c <prvSampleTimeNow+0x3c>)
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8007790:	68fb      	ldr	r3, [r7, #12]
}
 8007792:	4618      	mov	r0, r3
 8007794:	3710      	adds	r7, #16
 8007796:	46bd      	mov	sp, r7
 8007798:	bd80      	pop	{r7, pc}
 800779a:	bf00      	nop
 800779c:	20000fd0 	.word	0x20000fd0

080077a0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 80077a0:	b580      	push	{r7, lr}
 80077a2:	b086      	sub	sp, #24
 80077a4:	af00      	add	r7, sp, #0
 80077a6:	60f8      	str	r0, [r7, #12]
 80077a8:	60b9      	str	r1, [r7, #8]
 80077aa:	607a      	str	r2, [r7, #4]
 80077ac:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 80077ae:	2300      	movs	r3, #0
 80077b0:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 80077b2:	68fb      	ldr	r3, [r7, #12]
 80077b4:	68ba      	ldr	r2, [r7, #8]
 80077b6:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	68fa      	ldr	r2, [r7, #12]
 80077bc:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 80077be:	68ba      	ldr	r2, [r7, #8]
 80077c0:	687b      	ldr	r3, [r7, #4]
 80077c2:	429a      	cmp	r2, r3
 80077c4:	d812      	bhi.n	80077ec <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80077c6:	687a      	ldr	r2, [r7, #4]
 80077c8:	683b      	ldr	r3, [r7, #0]
 80077ca:	1ad2      	subs	r2, r2, r3
 80077cc:	68fb      	ldr	r3, [r7, #12]
 80077ce:	699b      	ldr	r3, [r3, #24]
 80077d0:	429a      	cmp	r2, r3
 80077d2:	d302      	bcc.n	80077da <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 80077d4:	2301      	movs	r3, #1
 80077d6:	617b      	str	r3, [r7, #20]
 80077d8:	e01b      	b.n	8007812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 80077da:	4b10      	ldr	r3, [pc, #64]	@ (800781c <prvInsertTimerInActiveList+0x7c>)
 80077dc:	681a      	ldr	r2, [r3, #0]
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	3304      	adds	r3, #4
 80077e2:	4619      	mov	r1, r3
 80077e4:	4610      	mov	r0, r2
 80077e6:	f7fe f97c 	bl	8005ae2 <vListInsert>
 80077ea:	e012      	b.n	8007812 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 80077ec:	687a      	ldr	r2, [r7, #4]
 80077ee:	683b      	ldr	r3, [r7, #0]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d206      	bcs.n	8007802 <prvInsertTimerInActiveList+0x62>
 80077f4:	68ba      	ldr	r2, [r7, #8]
 80077f6:	683b      	ldr	r3, [r7, #0]
 80077f8:	429a      	cmp	r2, r3
 80077fa:	d302      	bcc.n	8007802 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 80077fc:	2301      	movs	r3, #1
 80077fe:	617b      	str	r3, [r7, #20]
 8007800:	e007      	b.n	8007812 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007802:	4b07      	ldr	r3, [pc, #28]	@ (8007820 <prvInsertTimerInActiveList+0x80>)
 8007804:	681a      	ldr	r2, [r3, #0]
 8007806:	68fb      	ldr	r3, [r7, #12]
 8007808:	3304      	adds	r3, #4
 800780a:	4619      	mov	r1, r3
 800780c:	4610      	mov	r0, r2
 800780e:	f7fe f968 	bl	8005ae2 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8007812:	697b      	ldr	r3, [r7, #20]
}
 8007814:	4618      	mov	r0, r3
 8007816:	3718      	adds	r7, #24
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}
 800781c:	20000fc4 	.word	0x20000fc4
 8007820:	20000fc0 	.word	0x20000fc0

08007824 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8007824:	b580      	push	{r7, lr}
 8007826:	b08e      	sub	sp, #56	@ 0x38
 8007828:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800782a:	e0ce      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	2b00      	cmp	r3, #0
 8007830:	da19      	bge.n	8007866 <prvProcessReceivedCommands+0x42>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8007832:	1d3b      	adds	r3, r7, #4
 8007834:	3304      	adds	r3, #4
 8007836:	62fb      	str	r3, [r7, #44]	@ 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8007838:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800783a:	2b00      	cmp	r3, #0
 800783c:	d10b      	bne.n	8007856 <prvProcessReceivedCommands+0x32>
	__asm volatile
 800783e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007842:	f383 8811 	msr	BASEPRI, r3
 8007846:	f3bf 8f6f 	isb	sy
 800784a:	f3bf 8f4f 	dsb	sy
 800784e:	61fb      	str	r3, [r7, #28]
}
 8007850:	bf00      	nop
 8007852:	bf00      	nop
 8007854:	e7fd      	b.n	8007852 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8007856:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800785c:	6850      	ldr	r0, [r2, #4]
 800785e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8007860:	6892      	ldr	r2, [r2, #8]
 8007862:	4611      	mov	r1, r2
 8007864:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	2b00      	cmp	r3, #0
 800786a:	f2c0 80ae 	blt.w	80079ca <prvProcessReceivedCommands+0x1a6>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800786e:	68fb      	ldr	r3, [r7, #12]
 8007870:	62bb      	str	r3, [r7, #40]	@ 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8007872:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007874:	695b      	ldr	r3, [r3, #20]
 8007876:	2b00      	cmp	r3, #0
 8007878:	d004      	beq.n	8007884 <prvProcessReceivedCommands+0x60>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800787a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800787c:	3304      	adds	r3, #4
 800787e:	4618      	mov	r0, r3
 8007880:	f7fe f968 	bl	8005b54 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8007884:	463b      	mov	r3, r7
 8007886:	4618      	mov	r0, r3
 8007888:	f7ff ff6a 	bl	8007760 <prvSampleTimeNow>
 800788c:	6278      	str	r0, [r7, #36]	@ 0x24

			switch( xMessage.xMessageID )
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	2b09      	cmp	r3, #9
 8007892:	f200 8097 	bhi.w	80079c4 <prvProcessReceivedCommands+0x1a0>
 8007896:	a201      	add	r2, pc, #4	@ (adr r2, 800789c <prvProcessReceivedCommands+0x78>)
 8007898:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800789c:	080078c5 	.word	0x080078c5
 80078a0:	080078c5 	.word	0x080078c5
 80078a4:	080078c5 	.word	0x080078c5
 80078a8:	0800793b 	.word	0x0800793b
 80078ac:	0800794f 	.word	0x0800794f
 80078b0:	0800799b 	.word	0x0800799b
 80078b4:	080078c5 	.word	0x080078c5
 80078b8:	080078c5 	.word	0x080078c5
 80078bc:	0800793b 	.word	0x0800793b
 80078c0:	0800794f 	.word	0x0800794f
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 80078c4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078c6:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078ca:	f043 0301 	orr.w	r3, r3, #1
 80078ce:	b2da      	uxtb	r2, r3
 80078d0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078d2:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 80078d6:	68ba      	ldr	r2, [r7, #8]
 80078d8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078da:	699b      	ldr	r3, [r3, #24]
 80078dc:	18d1      	adds	r1, r2, r3
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80078e2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078e4:	f7ff ff5c 	bl	80077a0 <prvInsertTimerInActiveList>
 80078e8:	4603      	mov	r3, r0
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d06c      	beq.n	80079c8 <prvProcessReceivedCommands+0x1a4>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80078ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f0:	6a1b      	ldr	r3, [r3, #32]
 80078f2:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80078f4:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 80078f6:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80078f8:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80078fc:	f003 0304 	and.w	r3, r3, #4
 8007900:	2b00      	cmp	r3, #0
 8007902:	d061      	beq.n	80079c8 <prvProcessReceivedCommands+0x1a4>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8007904:	68ba      	ldr	r2, [r7, #8]
 8007906:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007908:	699b      	ldr	r3, [r3, #24]
 800790a:	441a      	add	r2, r3
 800790c:	2300      	movs	r3, #0
 800790e:	9300      	str	r3, [sp, #0]
 8007910:	2300      	movs	r3, #0
 8007912:	2100      	movs	r1, #0
 8007914:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007916:	f7ff fe01 	bl	800751c <xTimerGenericCommand>
 800791a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800791c:	6a3b      	ldr	r3, [r7, #32]
 800791e:	2b00      	cmp	r3, #0
 8007920:	d152      	bne.n	80079c8 <prvProcessReceivedCommands+0x1a4>
	__asm volatile
 8007922:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007926:	f383 8811 	msr	BASEPRI, r3
 800792a:	f3bf 8f6f 	isb	sy
 800792e:	f3bf 8f4f 	dsb	sy
 8007932:	61bb      	str	r3, [r7, #24]
}
 8007934:	bf00      	nop
 8007936:	bf00      	nop
 8007938:	e7fd      	b.n	8007936 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800793a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800793c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007940:	f023 0301 	bic.w	r3, r3, #1
 8007944:	b2da      	uxtb	r2, r3
 8007946:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007948:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 800794c:	e03d      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800794e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007950:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007954:	f043 0301 	orr.w	r3, r3, #1
 8007958:	b2da      	uxtb	r2, r3
 800795a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800795c:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8007960:	68ba      	ldr	r2, [r7, #8]
 8007962:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007964:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8007966:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007968:	699b      	ldr	r3, [r3, #24]
 800796a:	2b00      	cmp	r3, #0
 800796c:	d10b      	bne.n	8007986 <prvProcessReceivedCommands+0x162>
	__asm volatile
 800796e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007972:	f383 8811 	msr	BASEPRI, r3
 8007976:	f3bf 8f6f 	isb	sy
 800797a:	f3bf 8f4f 	dsb	sy
 800797e:	617b      	str	r3, [r7, #20]
}
 8007980:	bf00      	nop
 8007982:	bf00      	nop
 8007984:	e7fd      	b.n	8007982 <prvProcessReceivedCommands+0x15e>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8007986:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8007988:	699a      	ldr	r2, [r3, #24]
 800798a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800798c:	18d1      	adds	r1, r2, r3
 800798e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8007990:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8007992:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 8007994:	f7ff ff04 	bl	80077a0 <prvInsertTimerInActiveList>
					break;
 8007998:	e017      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800799a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800799c:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079a0:	f003 0302 	and.w	r3, r3, #2
 80079a4:	2b00      	cmp	r3, #0
 80079a6:	d103      	bne.n	80079b0 <prvProcessReceivedCommands+0x18c>
						{
							vPortFree( pxTimer );
 80079a8:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 80079aa:	f000 fbe5 	bl	8008178 <vPortFree>
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 80079ae:	e00c      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80079b0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079b2:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 80079b6:	f023 0301 	bic.w	r3, r3, #1
 80079ba:	b2da      	uxtb	r2, r3
 80079bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80079be:	f883 2028 	strb.w	r2, [r3, #40]	@ 0x28
					break;
 80079c2:	e002      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>

				default	:
					/* Don't expect to get here. */
					break;
 80079c4:	bf00      	nop
 80079c6:	e000      	b.n	80079ca <prvProcessReceivedCommands+0x1a6>
					break;
 80079c8:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 80079ca:	4b08      	ldr	r3, [pc, #32]	@ (80079ec <prvProcessReceivedCommands+0x1c8>)
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	1d39      	adds	r1, r7, #4
 80079d0:	2200      	movs	r2, #0
 80079d2:	4618      	mov	r0, r3
 80079d4:	f7fe fbce 	bl	8006174 <xQueueReceive>
 80079d8:	4603      	mov	r3, r0
 80079da:	2b00      	cmp	r3, #0
 80079dc:	f47f af26 	bne.w	800782c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 80079e0:	bf00      	nop
 80079e2:	bf00      	nop
 80079e4:	3730      	adds	r7, #48	@ 0x30
 80079e6:	46bd      	mov	sp, r7
 80079e8:	bd80      	pop	{r7, pc}
 80079ea:	bf00      	nop
 80079ec:	20000fc8 	.word	0x20000fc8

080079f0 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 80079f0:	b580      	push	{r7, lr}
 80079f2:	b088      	sub	sp, #32
 80079f4:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 80079f6:	e049      	b.n	8007a8c <prvSwitchTimerLists+0x9c>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80079f8:	4b2e      	ldr	r3, [pc, #184]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 80079fa:	681b      	ldr	r3, [r3, #0]
 80079fc:	68db      	ldr	r3, [r3, #12]
 80079fe:	681b      	ldr	r3, [r3, #0]
 8007a00:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007a02:	4b2c      	ldr	r3, [pc, #176]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	68db      	ldr	r3, [r3, #12]
 8007a08:	68db      	ldr	r3, [r3, #12]
 8007a0a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8007a0c:	68fb      	ldr	r3, [r7, #12]
 8007a0e:	3304      	adds	r3, #4
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7fe f89f 	bl	8005b54 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8007a16:	68fb      	ldr	r3, [r7, #12]
 8007a18:	6a1b      	ldr	r3, [r3, #32]
 8007a1a:	68f8      	ldr	r0, [r7, #12]
 8007a1c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8007a1e:	68fb      	ldr	r3, [r7, #12]
 8007a20:	f893 3028 	ldrb.w	r3, [r3, #40]	@ 0x28
 8007a24:	f003 0304 	and.w	r3, r3, #4
 8007a28:	2b00      	cmp	r3, #0
 8007a2a:	d02f      	beq.n	8007a8c <prvSwitchTimerLists+0x9c>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8007a2c:	68fb      	ldr	r3, [r7, #12]
 8007a2e:	699b      	ldr	r3, [r3, #24]
 8007a30:	693a      	ldr	r2, [r7, #16]
 8007a32:	4413      	add	r3, r2
 8007a34:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8007a36:	68ba      	ldr	r2, [r7, #8]
 8007a38:	693b      	ldr	r3, [r7, #16]
 8007a3a:	429a      	cmp	r2, r3
 8007a3c:	d90e      	bls.n	8007a5c <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	68ba      	ldr	r2, [r7, #8]
 8007a42:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	68fa      	ldr	r2, [r7, #12]
 8007a48:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8007a4a:	4b1a      	ldr	r3, [pc, #104]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007a4c:	681a      	ldr	r2, [r3, #0]
 8007a4e:	68fb      	ldr	r3, [r7, #12]
 8007a50:	3304      	adds	r3, #4
 8007a52:	4619      	mov	r1, r3
 8007a54:	4610      	mov	r0, r2
 8007a56:	f7fe f844 	bl	8005ae2 <vListInsert>
 8007a5a:	e017      	b.n	8007a8c <prvSwitchTimerLists+0x9c>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8007a5c:	2300      	movs	r3, #0
 8007a5e:	9300      	str	r3, [sp, #0]
 8007a60:	2300      	movs	r3, #0
 8007a62:	693a      	ldr	r2, [r7, #16]
 8007a64:	2100      	movs	r1, #0
 8007a66:	68f8      	ldr	r0, [r7, #12]
 8007a68:	f7ff fd58 	bl	800751c <xTimerGenericCommand>
 8007a6c:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d10b      	bne.n	8007a8c <prvSwitchTimerLists+0x9c>
	__asm volatile
 8007a74:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007a78:	f383 8811 	msr	BASEPRI, r3
 8007a7c:	f3bf 8f6f 	isb	sy
 8007a80:	f3bf 8f4f 	dsb	sy
 8007a84:	603b      	str	r3, [r7, #0]
}
 8007a86:	bf00      	nop
 8007a88:	bf00      	nop
 8007a8a:	e7fd      	b.n	8007a88 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8007a8c:	4b09      	ldr	r3, [pc, #36]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681b      	ldr	r3, [r3, #0]
 8007a92:	2b00      	cmp	r3, #0
 8007a94:	d1b0      	bne.n	80079f8 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8007a96:	4b07      	ldr	r3, [pc, #28]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007a98:	681b      	ldr	r3, [r3, #0]
 8007a9a:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8007a9c:	4b06      	ldr	r3, [pc, #24]	@ (8007ab8 <prvSwitchTimerLists+0xc8>)
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	4a04      	ldr	r2, [pc, #16]	@ (8007ab4 <prvSwitchTimerLists+0xc4>)
 8007aa2:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8007aa4:	4a04      	ldr	r2, [pc, #16]	@ (8007ab8 <prvSwitchTimerLists+0xc8>)
 8007aa6:	697b      	ldr	r3, [r7, #20]
 8007aa8:	6013      	str	r3, [r2, #0]
}
 8007aaa:	bf00      	nop
 8007aac:	3718      	adds	r7, #24
 8007aae:	46bd      	mov	sp, r7
 8007ab0:	bd80      	pop	{r7, pc}
 8007ab2:	bf00      	nop
 8007ab4:	20000fc0 	.word	0x20000fc0
 8007ab8:	20000fc4 	.word	0x20000fc4

08007abc <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b082      	sub	sp, #8
 8007ac0:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8007ac2:	f000 f969 	bl	8007d98 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8007ac6:	4b15      	ldr	r3, [pc, #84]	@ (8007b1c <prvCheckForValidListAndQueue+0x60>)
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	2b00      	cmp	r3, #0
 8007acc:	d120      	bne.n	8007b10 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8007ace:	4814      	ldr	r0, [pc, #80]	@ (8007b20 <prvCheckForValidListAndQueue+0x64>)
 8007ad0:	f7fd ffb6 	bl	8005a40 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8007ad4:	4813      	ldr	r0, [pc, #76]	@ (8007b24 <prvCheckForValidListAndQueue+0x68>)
 8007ad6:	f7fd ffb3 	bl	8005a40 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8007ada:	4b13      	ldr	r3, [pc, #76]	@ (8007b28 <prvCheckForValidListAndQueue+0x6c>)
 8007adc:	4a10      	ldr	r2, [pc, #64]	@ (8007b20 <prvCheckForValidListAndQueue+0x64>)
 8007ade:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8007ae0:	4b12      	ldr	r3, [pc, #72]	@ (8007b2c <prvCheckForValidListAndQueue+0x70>)
 8007ae2:	4a10      	ldr	r2, [pc, #64]	@ (8007b24 <prvCheckForValidListAndQueue+0x68>)
 8007ae4:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8007ae6:	2300      	movs	r3, #0
 8007ae8:	9300      	str	r3, [sp, #0]
 8007aea:	4b11      	ldr	r3, [pc, #68]	@ (8007b30 <prvCheckForValidListAndQueue+0x74>)
 8007aec:	4a11      	ldr	r2, [pc, #68]	@ (8007b34 <prvCheckForValidListAndQueue+0x78>)
 8007aee:	2110      	movs	r1, #16
 8007af0:	200a      	movs	r0, #10
 8007af2:	f7fe f8c3 	bl	8005c7c <xQueueGenericCreateStatic>
 8007af6:	4603      	mov	r3, r0
 8007af8:	4a08      	ldr	r2, [pc, #32]	@ (8007b1c <prvCheckForValidListAndQueue+0x60>)
 8007afa:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8007afc:	4b07      	ldr	r3, [pc, #28]	@ (8007b1c <prvCheckForValidListAndQueue+0x60>)
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d005      	beq.n	8007b10 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8007b04:	4b05      	ldr	r3, [pc, #20]	@ (8007b1c <prvCheckForValidListAndQueue+0x60>)
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	490b      	ldr	r1, [pc, #44]	@ (8007b38 <prvCheckForValidListAndQueue+0x7c>)
 8007b0a:	4618      	mov	r0, r3
 8007b0c:	f7fe fd24 	bl	8006558 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007b10:	f000 f974 	bl	8007dfc <vPortExitCritical>
}
 8007b14:	bf00      	nop
 8007b16:	46bd      	mov	sp, r7
 8007b18:	bd80      	pop	{r7, pc}
 8007b1a:	bf00      	nop
 8007b1c:	20000fc8 	.word	0x20000fc8
 8007b20:	20000f98 	.word	0x20000f98
 8007b24:	20000fac 	.word	0x20000fac
 8007b28:	20000fc0 	.word	0x20000fc0
 8007b2c:	20000fc4 	.word	0x20000fc4
 8007b30:	20001074 	.word	0x20001074
 8007b34:	20000fd4 	.word	0x20000fd4
 8007b38:	08009edc 	.word	0x08009edc

08007b3c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8007b3c:	b480      	push	{r7}
 8007b3e:	b085      	sub	sp, #20
 8007b40:	af00      	add	r7, sp, #0
 8007b42:	60f8      	str	r0, [r7, #12]
 8007b44:	60b9      	str	r1, [r7, #8]
 8007b46:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8007b48:	68fb      	ldr	r3, [r7, #12]
 8007b4a:	3b04      	subs	r3, #4
 8007b4c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	f04f 7280 	mov.w	r2, #16777216	@ 0x1000000
 8007b54:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b56:	68fb      	ldr	r3, [r7, #12]
 8007b58:	3b04      	subs	r3, #4
 8007b5a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8007b5c:	68bb      	ldr	r3, [r7, #8]
 8007b5e:	f023 0201 	bic.w	r2, r3, #1
 8007b62:	68fb      	ldr	r3, [r7, #12]
 8007b64:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	3b04      	subs	r3, #4
 8007b6a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8007b6c:	4a0c      	ldr	r2, [pc, #48]	@ (8007ba0 <pxPortInitialiseStack+0x64>)
 8007b6e:	68fb      	ldr	r3, [r7, #12]
 8007b70:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	3b14      	subs	r3, #20
 8007b76:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8007b78:	687a      	ldr	r2, [r7, #4]
 8007b7a:	68fb      	ldr	r3, [r7, #12]
 8007b7c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	3b04      	subs	r3, #4
 8007b82:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	f06f 0202 	mvn.w	r2, #2
 8007b8a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8007b8c:	68fb      	ldr	r3, [r7, #12]
 8007b8e:	3b20      	subs	r3, #32
 8007b90:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8007b92:	68fb      	ldr	r3, [r7, #12]
}
 8007b94:	4618      	mov	r0, r3
 8007b96:	3714      	adds	r7, #20
 8007b98:	46bd      	mov	sp, r7
 8007b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9e:	4770      	bx	lr
 8007ba0:	08007ba5 	.word	0x08007ba5

08007ba4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8007ba4:	b480      	push	{r7}
 8007ba6:	b085      	sub	sp, #20
 8007ba8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8007baa:	2300      	movs	r3, #0
 8007bac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8007bae:	4b13      	ldr	r3, [pc, #76]	@ (8007bfc <prvTaskExitError+0x58>)
 8007bb0:	681b      	ldr	r3, [r3, #0]
 8007bb2:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007bb6:	d00b      	beq.n	8007bd0 <prvTaskExitError+0x2c>
	__asm volatile
 8007bb8:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bbc:	f383 8811 	msr	BASEPRI, r3
 8007bc0:	f3bf 8f6f 	isb	sy
 8007bc4:	f3bf 8f4f 	dsb	sy
 8007bc8:	60fb      	str	r3, [r7, #12]
}
 8007bca:	bf00      	nop
 8007bcc:	bf00      	nop
 8007bce:	e7fd      	b.n	8007bcc <prvTaskExitError+0x28>
	__asm volatile
 8007bd0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007bd4:	f383 8811 	msr	BASEPRI, r3
 8007bd8:	f3bf 8f6f 	isb	sy
 8007bdc:	f3bf 8f4f 	dsb	sy
 8007be0:	60bb      	str	r3, [r7, #8]
}
 8007be2:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8007be4:	bf00      	nop
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	2b00      	cmp	r3, #0
 8007bea:	d0fc      	beq.n	8007be6 <prvTaskExitError+0x42>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8007bec:	bf00      	nop
 8007bee:	bf00      	nop
 8007bf0:	3714      	adds	r7, #20
 8007bf2:	46bd      	mov	sp, r7
 8007bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf8:	4770      	bx	lr
 8007bfa:	bf00      	nop
 8007bfc:	2000000c 	.word	0x2000000c

08007c00 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8007c00:	4b07      	ldr	r3, [pc, #28]	@ (8007c20 <pxCurrentTCBConst2>)
 8007c02:	6819      	ldr	r1, [r3, #0]
 8007c04:	6808      	ldr	r0, [r1, #0]
 8007c06:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007c0a:	f380 8809 	msr	PSP, r0
 8007c0e:	f3bf 8f6f 	isb	sy
 8007c12:	f04f 0000 	mov.w	r0, #0
 8007c16:	f380 8811 	msr	BASEPRI, r0
 8007c1a:	4770      	bx	lr
 8007c1c:	f3af 8000 	nop.w

08007c20 <pxCurrentTCBConst2>:
 8007c20:	20000a98 	.word	0x20000a98
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8007c24:	bf00      	nop
 8007c26:	bf00      	nop

08007c28 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8007c28:	4808      	ldr	r0, [pc, #32]	@ (8007c4c <prvPortStartFirstTask+0x24>)
 8007c2a:	6800      	ldr	r0, [r0, #0]
 8007c2c:	6800      	ldr	r0, [r0, #0]
 8007c2e:	f380 8808 	msr	MSP, r0
 8007c32:	f04f 0000 	mov.w	r0, #0
 8007c36:	f380 8814 	msr	CONTROL, r0
 8007c3a:	b662      	cpsie	i
 8007c3c:	b661      	cpsie	f
 8007c3e:	f3bf 8f4f 	dsb	sy
 8007c42:	f3bf 8f6f 	isb	sy
 8007c46:	df00      	svc	0
 8007c48:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8007c4a:	bf00      	nop
 8007c4c:	e000ed08 	.word	0xe000ed08

08007c50 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b086      	sub	sp, #24
 8007c54:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8007c56:	4b47      	ldr	r3, [pc, #284]	@ (8007d74 <xPortStartScheduler+0x124>)
 8007c58:	681b      	ldr	r3, [r3, #0]
 8007c5a:	4a47      	ldr	r2, [pc, #284]	@ (8007d78 <xPortStartScheduler+0x128>)
 8007c5c:	4293      	cmp	r3, r2
 8007c5e:	d10b      	bne.n	8007c78 <xPortStartScheduler+0x28>
	__asm volatile
 8007c60:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c64:	f383 8811 	msr	BASEPRI, r3
 8007c68:	f3bf 8f6f 	isb	sy
 8007c6c:	f3bf 8f4f 	dsb	sy
 8007c70:	60fb      	str	r3, [r7, #12]
}
 8007c72:	bf00      	nop
 8007c74:	bf00      	nop
 8007c76:	e7fd      	b.n	8007c74 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8007c78:	4b3e      	ldr	r3, [pc, #248]	@ (8007d74 <xPortStartScheduler+0x124>)
 8007c7a:	681b      	ldr	r3, [r3, #0]
 8007c7c:	4a3f      	ldr	r2, [pc, #252]	@ (8007d7c <xPortStartScheduler+0x12c>)
 8007c7e:	4293      	cmp	r3, r2
 8007c80:	d10b      	bne.n	8007c9a <xPortStartScheduler+0x4a>
	__asm volatile
 8007c82:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007c86:	f383 8811 	msr	BASEPRI, r3
 8007c8a:	f3bf 8f6f 	isb	sy
 8007c8e:	f3bf 8f4f 	dsb	sy
 8007c92:	613b      	str	r3, [r7, #16]
}
 8007c94:	bf00      	nop
 8007c96:	bf00      	nop
 8007c98:	e7fd      	b.n	8007c96 <xPortStartScheduler+0x46>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8007c9a:	4b39      	ldr	r3, [pc, #228]	@ (8007d80 <xPortStartScheduler+0x130>)
 8007c9c:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8007c9e:	697b      	ldr	r3, [r7, #20]
 8007ca0:	781b      	ldrb	r3, [r3, #0]
 8007ca2:	b2db      	uxtb	r3, r3
 8007ca4:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8007ca6:	697b      	ldr	r3, [r7, #20]
 8007ca8:	22ff      	movs	r2, #255	@ 0xff
 8007caa:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8007cac:	697b      	ldr	r3, [r7, #20]
 8007cae:	781b      	ldrb	r3, [r3, #0]
 8007cb0:	b2db      	uxtb	r3, r3
 8007cb2:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8007cb4:	78fb      	ldrb	r3, [r7, #3]
 8007cb6:	b2db      	uxtb	r3, r3
 8007cb8:	f003 0350 	and.w	r3, r3, #80	@ 0x50
 8007cbc:	b2da      	uxtb	r2, r3
 8007cbe:	4b31      	ldr	r3, [pc, #196]	@ (8007d84 <xPortStartScheduler+0x134>)
 8007cc0:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8007cc2:	4b31      	ldr	r3, [pc, #196]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007cc4:	2207      	movs	r2, #7
 8007cc6:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cc8:	e009      	b.n	8007cde <xPortStartScheduler+0x8e>
		{
			ulMaxPRIGROUPValue--;
 8007cca:	4b2f      	ldr	r3, [pc, #188]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	4a2d      	ldr	r2, [pc, #180]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007cd2:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8007cd4:	78fb      	ldrb	r3, [r7, #3]
 8007cd6:	b2db      	uxtb	r3, r3
 8007cd8:	005b      	lsls	r3, r3, #1
 8007cda:	b2db      	uxtb	r3, r3
 8007cdc:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8007cde:	78fb      	ldrb	r3, [r7, #3]
 8007ce0:	b2db      	uxtb	r3, r3
 8007ce2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8007ce6:	2b80      	cmp	r3, #128	@ 0x80
 8007ce8:	d0ef      	beq.n	8007cca <xPortStartScheduler+0x7a>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8007cea:	4b27      	ldr	r3, [pc, #156]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f1c3 0307 	rsb	r3, r3, #7
 8007cf2:	2b04      	cmp	r3, #4
 8007cf4:	d00b      	beq.n	8007d0e <xPortStartScheduler+0xbe>
	__asm volatile
 8007cf6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007cfa:	f383 8811 	msr	BASEPRI, r3
 8007cfe:	f3bf 8f6f 	isb	sy
 8007d02:	f3bf 8f4f 	dsb	sy
 8007d06:	60bb      	str	r3, [r7, #8]
}
 8007d08:	bf00      	nop
 8007d0a:	bf00      	nop
 8007d0c:	e7fd      	b.n	8007d0a <xPortStartScheduler+0xba>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8007d0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007d10:	681b      	ldr	r3, [r3, #0]
 8007d12:	021b      	lsls	r3, r3, #8
 8007d14:	4a1c      	ldr	r2, [pc, #112]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007d16:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8007d18:	4b1b      	ldr	r3, [pc, #108]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	f403 63e0 	and.w	r3, r3, #1792	@ 0x700
 8007d20:	4a19      	ldr	r2, [pc, #100]	@ (8007d88 <xPortStartScheduler+0x138>)
 8007d22:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	b2da      	uxtb	r2, r3
 8007d28:	697b      	ldr	r3, [r7, #20]
 8007d2a:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8007d2c:	4b17      	ldr	r3, [pc, #92]	@ (8007d8c <xPortStartScheduler+0x13c>)
 8007d2e:	681b      	ldr	r3, [r3, #0]
 8007d30:	4a16      	ldr	r2, [pc, #88]	@ (8007d8c <xPortStartScheduler+0x13c>)
 8007d32:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8007d36:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8007d38:	4b14      	ldr	r3, [pc, #80]	@ (8007d8c <xPortStartScheduler+0x13c>)
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	4a13      	ldr	r2, [pc, #76]	@ (8007d8c <xPortStartScheduler+0x13c>)
 8007d3e:	f043 4370 	orr.w	r3, r3, #4026531840	@ 0xf0000000
 8007d42:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8007d44:	f000 f8da 	bl	8007efc <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8007d48:	4b11      	ldr	r3, [pc, #68]	@ (8007d90 <xPortStartScheduler+0x140>)
 8007d4a:	2200      	movs	r2, #0
 8007d4c:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8007d4e:	f000 f8f9 	bl	8007f44 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8007d52:	4b10      	ldr	r3, [pc, #64]	@ (8007d94 <xPortStartScheduler+0x144>)
 8007d54:	681b      	ldr	r3, [r3, #0]
 8007d56:	4a0f      	ldr	r2, [pc, #60]	@ (8007d94 <xPortStartScheduler+0x144>)
 8007d58:	f043 4340 	orr.w	r3, r3, #3221225472	@ 0xc0000000
 8007d5c:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8007d5e:	f7ff ff63 	bl	8007c28 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8007d62:	f7ff f831 	bl	8006dc8 <vTaskSwitchContext>
	prvTaskExitError();
 8007d66:	f7ff ff1d 	bl	8007ba4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8007d6a:	2300      	movs	r3, #0
}
 8007d6c:	4618      	mov	r0, r3
 8007d6e:	3718      	adds	r7, #24
 8007d70:	46bd      	mov	sp, r7
 8007d72:	bd80      	pop	{r7, pc}
 8007d74:	e000ed00 	.word	0xe000ed00
 8007d78:	410fc271 	.word	0x410fc271
 8007d7c:	410fc270 	.word	0x410fc270
 8007d80:	e000e400 	.word	0xe000e400
 8007d84:	200010c4 	.word	0x200010c4
 8007d88:	200010c8 	.word	0x200010c8
 8007d8c:	e000ed20 	.word	0xe000ed20
 8007d90:	2000000c 	.word	0x2000000c
 8007d94:	e000ef34 	.word	0xe000ef34

08007d98 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8007d98:	b480      	push	{r7}
 8007d9a:	b083      	sub	sp, #12
 8007d9c:	af00      	add	r7, sp, #0
	__asm volatile
 8007d9e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007da2:	f383 8811 	msr	BASEPRI, r3
 8007da6:	f3bf 8f6f 	isb	sy
 8007daa:	f3bf 8f4f 	dsb	sy
 8007dae:	607b      	str	r3, [r7, #4]
}
 8007db0:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8007db2:	4b10      	ldr	r3, [pc, #64]	@ (8007df4 <vPortEnterCritical+0x5c>)
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	3301      	adds	r3, #1
 8007db8:	4a0e      	ldr	r2, [pc, #56]	@ (8007df4 <vPortEnterCritical+0x5c>)
 8007dba:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8007dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8007df4 <vPortEnterCritical+0x5c>)
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	2b01      	cmp	r3, #1
 8007dc2:	d110      	bne.n	8007de6 <vPortEnterCritical+0x4e>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8007dc4:	4b0c      	ldr	r3, [pc, #48]	@ (8007df8 <vPortEnterCritical+0x60>)
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	b2db      	uxtb	r3, r3
 8007dca:	2b00      	cmp	r3, #0
 8007dcc:	d00b      	beq.n	8007de6 <vPortEnterCritical+0x4e>
	__asm volatile
 8007dce:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007dd2:	f383 8811 	msr	BASEPRI, r3
 8007dd6:	f3bf 8f6f 	isb	sy
 8007dda:	f3bf 8f4f 	dsb	sy
 8007dde:	603b      	str	r3, [r7, #0]
}
 8007de0:	bf00      	nop
 8007de2:	bf00      	nop
 8007de4:	e7fd      	b.n	8007de2 <vPortEnterCritical+0x4a>
	}
}
 8007de6:	bf00      	nop
 8007de8:	370c      	adds	r7, #12
 8007dea:	46bd      	mov	sp, r7
 8007dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007df0:	4770      	bx	lr
 8007df2:	bf00      	nop
 8007df4:	2000000c 	.word	0x2000000c
 8007df8:	e000ed04 	.word	0xe000ed04

08007dfc <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8007dfc:	b480      	push	{r7}
 8007dfe:	b083      	sub	sp, #12
 8007e00:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8007e02:	4b12      	ldr	r3, [pc, #72]	@ (8007e4c <vPortExitCritical+0x50>)
 8007e04:	681b      	ldr	r3, [r3, #0]
 8007e06:	2b00      	cmp	r3, #0
 8007e08:	d10b      	bne.n	8007e22 <vPortExitCritical+0x26>
	__asm volatile
 8007e0a:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007e0e:	f383 8811 	msr	BASEPRI, r3
 8007e12:	f3bf 8f6f 	isb	sy
 8007e16:	f3bf 8f4f 	dsb	sy
 8007e1a:	607b      	str	r3, [r7, #4]
}
 8007e1c:	bf00      	nop
 8007e1e:	bf00      	nop
 8007e20:	e7fd      	b.n	8007e1e <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8007e22:	4b0a      	ldr	r3, [pc, #40]	@ (8007e4c <vPortExitCritical+0x50>)
 8007e24:	681b      	ldr	r3, [r3, #0]
 8007e26:	3b01      	subs	r3, #1
 8007e28:	4a08      	ldr	r2, [pc, #32]	@ (8007e4c <vPortExitCritical+0x50>)
 8007e2a:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8007e2c:	4b07      	ldr	r3, [pc, #28]	@ (8007e4c <vPortExitCritical+0x50>)
 8007e2e:	681b      	ldr	r3, [r3, #0]
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	d105      	bne.n	8007e40 <vPortExitCritical+0x44>
 8007e34:	2300      	movs	r3, #0
 8007e36:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007e38:	683b      	ldr	r3, [r7, #0]
 8007e3a:	f383 8811 	msr	BASEPRI, r3
}
 8007e3e:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8007e40:	bf00      	nop
 8007e42:	370c      	adds	r7, #12
 8007e44:	46bd      	mov	sp, r7
 8007e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e4a:	4770      	bx	lr
 8007e4c:	2000000c 	.word	0x2000000c

08007e50 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8007e50:	f3ef 8009 	mrs	r0, PSP
 8007e54:	f3bf 8f6f 	isb	sy
 8007e58:	4b15      	ldr	r3, [pc, #84]	@ (8007eb0 <pxCurrentTCBConst>)
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	f01e 0f10 	tst.w	lr, #16
 8007e60:	bf08      	it	eq
 8007e62:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8007e66:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e6a:	6010      	str	r0, [r2, #0]
 8007e6c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8007e70:	f04f 0050 	mov.w	r0, #80	@ 0x50
 8007e74:	f380 8811 	msr	BASEPRI, r0
 8007e78:	f3bf 8f4f 	dsb	sy
 8007e7c:	f3bf 8f6f 	isb	sy
 8007e80:	f7fe ffa2 	bl	8006dc8 <vTaskSwitchContext>
 8007e84:	f04f 0000 	mov.w	r0, #0
 8007e88:	f380 8811 	msr	BASEPRI, r0
 8007e8c:	bc09      	pop	{r0, r3}
 8007e8e:	6819      	ldr	r1, [r3, #0]
 8007e90:	6808      	ldr	r0, [r1, #0]
 8007e92:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007e96:	f01e 0f10 	tst.w	lr, #16
 8007e9a:	bf08      	it	eq
 8007e9c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8007ea0:	f380 8809 	msr	PSP, r0
 8007ea4:	f3bf 8f6f 	isb	sy
 8007ea8:	4770      	bx	lr
 8007eaa:	bf00      	nop
 8007eac:	f3af 8000 	nop.w

08007eb0 <pxCurrentTCBConst>:
 8007eb0:	20000a98 	.word	0x20000a98
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8007eb4:	bf00      	nop
 8007eb6:	bf00      	nop

08007eb8 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8007eb8:	b580      	push	{r7, lr}
 8007eba:	b082      	sub	sp, #8
 8007ebc:	af00      	add	r7, sp, #0
	__asm volatile
 8007ebe:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007ec2:	f383 8811 	msr	BASEPRI, r3
 8007ec6:	f3bf 8f6f 	isb	sy
 8007eca:	f3bf 8f4f 	dsb	sy
 8007ece:	607b      	str	r3, [r7, #4]
}
 8007ed0:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8007ed2:	f7fe febf 	bl	8006c54 <xTaskIncrementTick>
 8007ed6:	4603      	mov	r3, r0
 8007ed8:	2b00      	cmp	r3, #0
 8007eda:	d003      	beq.n	8007ee4 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8007edc:	4b06      	ldr	r3, [pc, #24]	@ (8007ef8 <xPortSysTickHandler+0x40>)
 8007ede:	f04f 5280 	mov.w	r2, #268435456	@ 0x10000000
 8007ee2:	601a      	str	r2, [r3, #0]
 8007ee4:	2300      	movs	r3, #0
 8007ee6:	603b      	str	r3, [r7, #0]
	__asm volatile
 8007ee8:	683b      	ldr	r3, [r7, #0]
 8007eea:	f383 8811 	msr	BASEPRI, r3
}
 8007eee:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8007ef0:	bf00      	nop
 8007ef2:	3708      	adds	r7, #8
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	bd80      	pop	{r7, pc}
 8007ef8:	e000ed04 	.word	0xe000ed04

08007efc <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8007efc:	b480      	push	{r7}
 8007efe:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8007f00:	4b0b      	ldr	r3, [pc, #44]	@ (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f02:	2200      	movs	r2, #0
 8007f04:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8007f06:	4b0b      	ldr	r3, [pc, #44]	@ (8007f34 <vPortSetupTimerInterrupt+0x38>)
 8007f08:	2200      	movs	r2, #0
 8007f0a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8007f0c:	4b0a      	ldr	r3, [pc, #40]	@ (8007f38 <vPortSetupTimerInterrupt+0x3c>)
 8007f0e:	681b      	ldr	r3, [r3, #0]
 8007f10:	4a0a      	ldr	r2, [pc, #40]	@ (8007f3c <vPortSetupTimerInterrupt+0x40>)
 8007f12:	fba2 2303 	umull	r2, r3, r2, r3
 8007f16:	099b      	lsrs	r3, r3, #6
 8007f18:	4a09      	ldr	r2, [pc, #36]	@ (8007f40 <vPortSetupTimerInterrupt+0x44>)
 8007f1a:	3b01      	subs	r3, #1
 8007f1c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8007f1e:	4b04      	ldr	r3, [pc, #16]	@ (8007f30 <vPortSetupTimerInterrupt+0x34>)
 8007f20:	2207      	movs	r2, #7
 8007f22:	601a      	str	r2, [r3, #0]
}
 8007f24:	bf00      	nop
 8007f26:	46bd      	mov	sp, r7
 8007f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f2c:	4770      	bx	lr
 8007f2e:	bf00      	nop
 8007f30:	e000e010 	.word	0xe000e010
 8007f34:	e000e018 	.word	0xe000e018
 8007f38:	20000000 	.word	0x20000000
 8007f3c:	10624dd3 	.word	0x10624dd3
 8007f40:	e000e014 	.word	0xe000e014

08007f44 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8007f44:	f8df 000c 	ldr.w	r0, [pc, #12]	@ 8007f54 <vPortEnableVFP+0x10>
 8007f48:	6801      	ldr	r1, [r0, #0]
 8007f4a:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8007f4e:	6001      	str	r1, [r0, #0]
 8007f50:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8007f52:	bf00      	nop
 8007f54:	e000ed88 	.word	0xe000ed88

08007f58 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8007f58:	b480      	push	{r7}
 8007f5a:	b085      	sub	sp, #20
 8007f5c:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8007f5e:	f3ef 8305 	mrs	r3, IPSR
 8007f62:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8007f64:	68fb      	ldr	r3, [r7, #12]
 8007f66:	2b0f      	cmp	r3, #15
 8007f68:	d915      	bls.n	8007f96 <vPortValidateInterruptPriority+0x3e>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8007f6a:	4a18      	ldr	r2, [pc, #96]	@ (8007fcc <vPortValidateInterruptPriority+0x74>)
 8007f6c:	68fb      	ldr	r3, [r7, #12]
 8007f6e:	4413      	add	r3, r2
 8007f70:	781b      	ldrb	r3, [r3, #0]
 8007f72:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8007f74:	4b16      	ldr	r3, [pc, #88]	@ (8007fd0 <vPortValidateInterruptPriority+0x78>)
 8007f76:	781b      	ldrb	r3, [r3, #0]
 8007f78:	7afa      	ldrb	r2, [r7, #11]
 8007f7a:	429a      	cmp	r2, r3
 8007f7c:	d20b      	bcs.n	8007f96 <vPortValidateInterruptPriority+0x3e>
	__asm volatile
 8007f7e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007f82:	f383 8811 	msr	BASEPRI, r3
 8007f86:	f3bf 8f6f 	isb	sy
 8007f8a:	f3bf 8f4f 	dsb	sy
 8007f8e:	607b      	str	r3, [r7, #4]
}
 8007f90:	bf00      	nop
 8007f92:	bf00      	nop
 8007f94:	e7fd      	b.n	8007f92 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8007f96:	4b0f      	ldr	r3, [pc, #60]	@ (8007fd4 <vPortValidateInterruptPriority+0x7c>)
 8007f98:	681b      	ldr	r3, [r3, #0]
 8007f9a:	f403 62e0 	and.w	r2, r3, #1792	@ 0x700
 8007f9e:	4b0e      	ldr	r3, [pc, #56]	@ (8007fd8 <vPortValidateInterruptPriority+0x80>)
 8007fa0:	681b      	ldr	r3, [r3, #0]
 8007fa2:	429a      	cmp	r2, r3
 8007fa4:	d90b      	bls.n	8007fbe <vPortValidateInterruptPriority+0x66>
	__asm volatile
 8007fa6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8007faa:	f383 8811 	msr	BASEPRI, r3
 8007fae:	f3bf 8f6f 	isb	sy
 8007fb2:	f3bf 8f4f 	dsb	sy
 8007fb6:	603b      	str	r3, [r7, #0]
}
 8007fb8:	bf00      	nop
 8007fba:	bf00      	nop
 8007fbc:	e7fd      	b.n	8007fba <vPortValidateInterruptPriority+0x62>
	}
 8007fbe:	bf00      	nop
 8007fc0:	3714      	adds	r7, #20
 8007fc2:	46bd      	mov	sp, r7
 8007fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fc8:	4770      	bx	lr
 8007fca:	bf00      	nop
 8007fcc:	e000e3f0 	.word	0xe000e3f0
 8007fd0:	200010c4 	.word	0x200010c4
 8007fd4:	e000ed0c 	.word	0xe000ed0c
 8007fd8:	200010c8 	.word	0x200010c8

08007fdc <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b08a      	sub	sp, #40	@ 0x28
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8007fe4:	2300      	movs	r3, #0
 8007fe6:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8007fe8:	f7fe fd78 	bl	8006adc <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8007fec:	4b5c      	ldr	r3, [pc, #368]	@ (8008160 <pvPortMalloc+0x184>)
 8007fee:	681b      	ldr	r3, [r3, #0]
 8007ff0:	2b00      	cmp	r3, #0
 8007ff2:	d101      	bne.n	8007ff8 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8007ff4:	f000 f924 	bl	8008240 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8007ff8:	4b5a      	ldr	r3, [pc, #360]	@ (8008164 <pvPortMalloc+0x188>)
 8007ffa:	681a      	ldr	r2, [r3, #0]
 8007ffc:	687b      	ldr	r3, [r7, #4]
 8007ffe:	4013      	ands	r3, r2
 8008000:	2b00      	cmp	r3, #0
 8008002:	f040 8095 	bne.w	8008130 <pvPortMalloc+0x154>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	2b00      	cmp	r3, #0
 800800a:	d01e      	beq.n	800804a <pvPortMalloc+0x6e>
			{
				xWantedSize += xHeapStructSize;
 800800c:	2208      	movs	r2, #8
 800800e:	687b      	ldr	r3, [r7, #4]
 8008010:	4413      	add	r3, r2
 8008012:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	f003 0307 	and.w	r3, r3, #7
 800801a:	2b00      	cmp	r3, #0
 800801c:	d015      	beq.n	800804a <pvPortMalloc+0x6e>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	f023 0307 	bic.w	r3, r3, #7
 8008024:	3308      	adds	r3, #8
 8008026:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	f003 0307 	and.w	r3, r3, #7
 800802e:	2b00      	cmp	r3, #0
 8008030:	d00b      	beq.n	800804a <pvPortMalloc+0x6e>
	__asm volatile
 8008032:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008036:	f383 8811 	msr	BASEPRI, r3
 800803a:	f3bf 8f6f 	isb	sy
 800803e:	f3bf 8f4f 	dsb	sy
 8008042:	617b      	str	r3, [r7, #20]
}
 8008044:	bf00      	nop
 8008046:	bf00      	nop
 8008048:	e7fd      	b.n	8008046 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	2b00      	cmp	r3, #0
 800804e:	d06f      	beq.n	8008130 <pvPortMalloc+0x154>
 8008050:	4b45      	ldr	r3, [pc, #276]	@ (8008168 <pvPortMalloc+0x18c>)
 8008052:	681b      	ldr	r3, [r3, #0]
 8008054:	687a      	ldr	r2, [r7, #4]
 8008056:	429a      	cmp	r2, r3
 8008058:	d86a      	bhi.n	8008130 <pvPortMalloc+0x154>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800805a:	4b44      	ldr	r3, [pc, #272]	@ (800816c <pvPortMalloc+0x190>)
 800805c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800805e:	4b43      	ldr	r3, [pc, #268]	@ (800816c <pvPortMalloc+0x190>)
 8008060:	681b      	ldr	r3, [r3, #0]
 8008062:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008064:	e004      	b.n	8008070 <pvPortMalloc+0x94>
				{
					pxPreviousBlock = pxBlock;
 8008066:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008068:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800806a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800806c:	681b      	ldr	r3, [r3, #0]
 800806e:	627b      	str	r3, [r7, #36]	@ 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8008070:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008072:	685b      	ldr	r3, [r3, #4]
 8008074:	687a      	ldr	r2, [r7, #4]
 8008076:	429a      	cmp	r2, r3
 8008078:	d903      	bls.n	8008082 <pvPortMalloc+0xa6>
 800807a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d1f1      	bne.n	8008066 <pvPortMalloc+0x8a>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8008082:	4b37      	ldr	r3, [pc, #220]	@ (8008160 <pvPortMalloc+0x184>)
 8008084:	681b      	ldr	r3, [r3, #0]
 8008086:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8008088:	429a      	cmp	r2, r3
 800808a:	d051      	beq.n	8008130 <pvPortMalloc+0x154>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800808c:	6a3b      	ldr	r3, [r7, #32]
 800808e:	681b      	ldr	r3, [r3, #0]
 8008090:	2208      	movs	r2, #8
 8008092:	4413      	add	r3, r2
 8008094:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8008096:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008098:	681a      	ldr	r2, [r3, #0]
 800809a:	6a3b      	ldr	r3, [r7, #32]
 800809c:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800809e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080a0:	685a      	ldr	r2, [r3, #4]
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	1ad2      	subs	r2, r2, r3
 80080a6:	2308      	movs	r3, #8
 80080a8:	005b      	lsls	r3, r3, #1
 80080aa:	429a      	cmp	r2, r3
 80080ac:	d920      	bls.n	80080f0 <pvPortMalloc+0x114>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 80080ae:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	4413      	add	r3, r2
 80080b4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 80080b6:	69bb      	ldr	r3, [r7, #24]
 80080b8:	f003 0307 	and.w	r3, r3, #7
 80080bc:	2b00      	cmp	r3, #0
 80080be:	d00b      	beq.n	80080d8 <pvPortMalloc+0xfc>
	__asm volatile
 80080c0:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80080c4:	f383 8811 	msr	BASEPRI, r3
 80080c8:	f3bf 8f6f 	isb	sy
 80080cc:	f3bf 8f4f 	dsb	sy
 80080d0:	613b      	str	r3, [r7, #16]
}
 80080d2:	bf00      	nop
 80080d4:	bf00      	nop
 80080d6:	e7fd      	b.n	80080d4 <pvPortMalloc+0xf8>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80080d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080da:	685a      	ldr	r2, [r3, #4]
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	1ad2      	subs	r2, r2, r3
 80080e0:	69bb      	ldr	r3, [r7, #24]
 80080e2:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80080e4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080e6:	687a      	ldr	r2, [r7, #4]
 80080e8:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80080ea:	69b8      	ldr	r0, [r7, #24]
 80080ec:	f000 f90a 	bl	8008304 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80080f0:	4b1d      	ldr	r3, [pc, #116]	@ (8008168 <pvPortMalloc+0x18c>)
 80080f2:	681a      	ldr	r2, [r3, #0]
 80080f4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80080f6:	685b      	ldr	r3, [r3, #4]
 80080f8:	1ad3      	subs	r3, r2, r3
 80080fa:	4a1b      	ldr	r2, [pc, #108]	@ (8008168 <pvPortMalloc+0x18c>)
 80080fc:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80080fe:	4b1a      	ldr	r3, [pc, #104]	@ (8008168 <pvPortMalloc+0x18c>)
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b1b      	ldr	r3, [pc, #108]	@ (8008170 <pvPortMalloc+0x194>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d203      	bcs.n	8008112 <pvPortMalloc+0x136>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800810a:	4b17      	ldr	r3, [pc, #92]	@ (8008168 <pvPortMalloc+0x18c>)
 800810c:	681b      	ldr	r3, [r3, #0]
 800810e:	4a18      	ldr	r2, [pc, #96]	@ (8008170 <pvPortMalloc+0x194>)
 8008110:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8008112:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008114:	685a      	ldr	r2, [r3, #4]
 8008116:	4b13      	ldr	r3, [pc, #76]	@ (8008164 <pvPortMalloc+0x188>)
 8008118:	681b      	ldr	r3, [r3, #0]
 800811a:	431a      	orrs	r2, r3
 800811c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800811e:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8008120:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8008122:	2200      	movs	r2, #0
 8008124:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 8008126:	4b13      	ldr	r3, [pc, #76]	@ (8008174 <pvPortMalloc+0x198>)
 8008128:	681b      	ldr	r3, [r3, #0]
 800812a:	3301      	adds	r3, #1
 800812c:	4a11      	ldr	r2, [pc, #68]	@ (8008174 <pvPortMalloc+0x198>)
 800812e:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8008130:	f7fe fce2 	bl	8006af8 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8008134:	69fb      	ldr	r3, [r7, #28]
 8008136:	f003 0307 	and.w	r3, r3, #7
 800813a:	2b00      	cmp	r3, #0
 800813c:	d00b      	beq.n	8008156 <pvPortMalloc+0x17a>
	__asm volatile
 800813e:	f04f 0350 	mov.w	r3, #80	@ 0x50
 8008142:	f383 8811 	msr	BASEPRI, r3
 8008146:	f3bf 8f6f 	isb	sy
 800814a:	f3bf 8f4f 	dsb	sy
 800814e:	60fb      	str	r3, [r7, #12]
}
 8008150:	bf00      	nop
 8008152:	bf00      	nop
 8008154:	e7fd      	b.n	8008152 <pvPortMalloc+0x176>
	return pvReturn;
 8008156:	69fb      	ldr	r3, [r7, #28]
}
 8008158:	4618      	mov	r0, r3
 800815a:	3728      	adds	r7, #40	@ 0x28
 800815c:	46bd      	mov	sp, r7
 800815e:	bd80      	pop	{r7, pc}
 8008160:	20004cd4 	.word	0x20004cd4
 8008164:	20004ce8 	.word	0x20004ce8
 8008168:	20004cd8 	.word	0x20004cd8
 800816c:	20004ccc 	.word	0x20004ccc
 8008170:	20004cdc 	.word	0x20004cdc
 8008174:	20004ce0 	.word	0x20004ce0

08008178 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8008178:	b580      	push	{r7, lr}
 800817a:	b086      	sub	sp, #24
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8008184:	687b      	ldr	r3, [r7, #4]
 8008186:	2b00      	cmp	r3, #0
 8008188:	d04f      	beq.n	800822a <vPortFree+0xb2>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800818a:	2308      	movs	r3, #8
 800818c:	425b      	negs	r3, r3
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	4413      	add	r3, r2
 8008192:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8008194:	697b      	ldr	r3, [r7, #20]
 8008196:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8008198:	693b      	ldr	r3, [r7, #16]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	4b25      	ldr	r3, [pc, #148]	@ (8008234 <vPortFree+0xbc>)
 800819e:	681b      	ldr	r3, [r3, #0]
 80081a0:	4013      	ands	r3, r2
 80081a2:	2b00      	cmp	r3, #0
 80081a4:	d10b      	bne.n	80081be <vPortFree+0x46>
	__asm volatile
 80081a6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081aa:	f383 8811 	msr	BASEPRI, r3
 80081ae:	f3bf 8f6f 	isb	sy
 80081b2:	f3bf 8f4f 	dsb	sy
 80081b6:	60fb      	str	r3, [r7, #12]
}
 80081b8:	bf00      	nop
 80081ba:	bf00      	nop
 80081bc:	e7fd      	b.n	80081ba <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 80081be:	693b      	ldr	r3, [r7, #16]
 80081c0:	681b      	ldr	r3, [r3, #0]
 80081c2:	2b00      	cmp	r3, #0
 80081c4:	d00b      	beq.n	80081de <vPortFree+0x66>
	__asm volatile
 80081c6:	f04f 0350 	mov.w	r3, #80	@ 0x50
 80081ca:	f383 8811 	msr	BASEPRI, r3
 80081ce:	f3bf 8f6f 	isb	sy
 80081d2:	f3bf 8f4f 	dsb	sy
 80081d6:	60bb      	str	r3, [r7, #8]
}
 80081d8:	bf00      	nop
 80081da:	bf00      	nop
 80081dc:	e7fd      	b.n	80081da <vPortFree+0x62>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80081de:	693b      	ldr	r3, [r7, #16]
 80081e0:	685a      	ldr	r2, [r3, #4]
 80081e2:	4b14      	ldr	r3, [pc, #80]	@ (8008234 <vPortFree+0xbc>)
 80081e4:	681b      	ldr	r3, [r3, #0]
 80081e6:	4013      	ands	r3, r2
 80081e8:	2b00      	cmp	r3, #0
 80081ea:	d01e      	beq.n	800822a <vPortFree+0xb2>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80081ec:	693b      	ldr	r3, [r7, #16]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d11a      	bne.n	800822a <vPortFree+0xb2>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80081f4:	693b      	ldr	r3, [r7, #16]
 80081f6:	685a      	ldr	r2, [r3, #4]
 80081f8:	4b0e      	ldr	r3, [pc, #56]	@ (8008234 <vPortFree+0xbc>)
 80081fa:	681b      	ldr	r3, [r3, #0]
 80081fc:	43db      	mvns	r3, r3
 80081fe:	401a      	ands	r2, r3
 8008200:	693b      	ldr	r3, [r7, #16]
 8008202:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8008204:	f7fe fc6a 	bl	8006adc <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8008208:	693b      	ldr	r3, [r7, #16]
 800820a:	685a      	ldr	r2, [r3, #4]
 800820c:	4b0a      	ldr	r3, [pc, #40]	@ (8008238 <vPortFree+0xc0>)
 800820e:	681b      	ldr	r3, [r3, #0]
 8008210:	4413      	add	r3, r2
 8008212:	4a09      	ldr	r2, [pc, #36]	@ (8008238 <vPortFree+0xc0>)
 8008214:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8008216:	6938      	ldr	r0, [r7, #16]
 8008218:	f000 f874 	bl	8008304 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800821c:	4b07      	ldr	r3, [pc, #28]	@ (800823c <vPortFree+0xc4>)
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	3301      	adds	r3, #1
 8008222:	4a06      	ldr	r2, [pc, #24]	@ (800823c <vPortFree+0xc4>)
 8008224:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 8008226:	f7fe fc67 	bl	8006af8 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800822a:	bf00      	nop
 800822c:	3718      	adds	r7, #24
 800822e:	46bd      	mov	sp, r7
 8008230:	bd80      	pop	{r7, pc}
 8008232:	bf00      	nop
 8008234:	20004ce8 	.word	0x20004ce8
 8008238:	20004cd8 	.word	0x20004cd8
 800823c:	20004ce4 	.word	0x20004ce4

08008240 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8008240:	b480      	push	{r7}
 8008242:	b085      	sub	sp, #20
 8008244:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 8008246:	f44f 5370 	mov.w	r3, #15360	@ 0x3c00
 800824a:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800824c:	4b27      	ldr	r3, [pc, #156]	@ (80082ec <prvHeapInit+0xac>)
 800824e:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	f003 0307 	and.w	r3, r3, #7
 8008256:	2b00      	cmp	r3, #0
 8008258:	d00c      	beq.n	8008274 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800825a:	68fb      	ldr	r3, [r7, #12]
 800825c:	3307      	adds	r3, #7
 800825e:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	f023 0307 	bic.w	r3, r3, #7
 8008266:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 8008268:	68ba      	ldr	r2, [r7, #8]
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	1ad3      	subs	r3, r2, r3
 800826e:	4a1f      	ldr	r2, [pc, #124]	@ (80082ec <prvHeapInit+0xac>)
 8008270:	4413      	add	r3, r2
 8008272:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 8008278:	4a1d      	ldr	r2, [pc, #116]	@ (80082f0 <prvHeapInit+0xb0>)
 800827a:	687b      	ldr	r3, [r7, #4]
 800827c:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800827e:	4b1c      	ldr	r3, [pc, #112]	@ (80082f0 <prvHeapInit+0xb0>)
 8008280:	2200      	movs	r2, #0
 8008282:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	68ba      	ldr	r2, [r7, #8]
 8008288:	4413      	add	r3, r2
 800828a:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800828c:	2208      	movs	r2, #8
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	1a9b      	subs	r3, r3, r2
 8008292:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8008294:	68fb      	ldr	r3, [r7, #12]
 8008296:	f023 0307 	bic.w	r3, r3, #7
 800829a:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800829c:	68fb      	ldr	r3, [r7, #12]
 800829e:	4a15      	ldr	r2, [pc, #84]	@ (80082f4 <prvHeapInit+0xb4>)
 80082a0:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80082a2:	4b14      	ldr	r3, [pc, #80]	@ (80082f4 <prvHeapInit+0xb4>)
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	2200      	movs	r2, #0
 80082a8:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80082aa:	4b12      	ldr	r3, [pc, #72]	@ (80082f4 <prvHeapInit+0xb4>)
 80082ac:	681b      	ldr	r3, [r3, #0]
 80082ae:	2200      	movs	r2, #0
 80082b0:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 80082b6:	683b      	ldr	r3, [r7, #0]
 80082b8:	68fa      	ldr	r2, [r7, #12]
 80082ba:	1ad2      	subs	r2, r2, r3
 80082bc:	683b      	ldr	r3, [r7, #0]
 80082be:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 80082c0:	4b0c      	ldr	r3, [pc, #48]	@ (80082f4 <prvHeapInit+0xb4>)
 80082c2:	681a      	ldr	r2, [r3, #0]
 80082c4:	683b      	ldr	r3, [r7, #0]
 80082c6:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	685b      	ldr	r3, [r3, #4]
 80082cc:	4a0a      	ldr	r2, [pc, #40]	@ (80082f8 <prvHeapInit+0xb8>)
 80082ce:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80082d0:	683b      	ldr	r3, [r7, #0]
 80082d2:	685b      	ldr	r3, [r3, #4]
 80082d4:	4a09      	ldr	r2, [pc, #36]	@ (80082fc <prvHeapInit+0xbc>)
 80082d6:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80082d8:	4b09      	ldr	r3, [pc, #36]	@ (8008300 <prvHeapInit+0xc0>)
 80082da:	f04f 4200 	mov.w	r2, #2147483648	@ 0x80000000
 80082de:	601a      	str	r2, [r3, #0]
}
 80082e0:	bf00      	nop
 80082e2:	3714      	adds	r7, #20
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr
 80082ec:	200010cc 	.word	0x200010cc
 80082f0:	20004ccc 	.word	0x20004ccc
 80082f4:	20004cd4 	.word	0x20004cd4
 80082f8:	20004cdc 	.word	0x20004cdc
 80082fc:	20004cd8 	.word	0x20004cd8
 8008300:	20004ce8 	.word	0x20004ce8

08008304 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8008304:	b480      	push	{r7}
 8008306:	b085      	sub	sp, #20
 8008308:	af00      	add	r7, sp, #0
 800830a:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800830c:	4b28      	ldr	r3, [pc, #160]	@ (80083b0 <prvInsertBlockIntoFreeList+0xac>)
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	e002      	b.n	8008318 <prvInsertBlockIntoFreeList+0x14>
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	681b      	ldr	r3, [r3, #0]
 8008316:	60fb      	str	r3, [r7, #12]
 8008318:	68fb      	ldr	r3, [r7, #12]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	687a      	ldr	r2, [r7, #4]
 800831e:	429a      	cmp	r2, r3
 8008320:	d8f7      	bhi.n	8008312 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8008322:	68fb      	ldr	r3, [r7, #12]
 8008324:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	685b      	ldr	r3, [r3, #4]
 800832a:	68ba      	ldr	r2, [r7, #8]
 800832c:	4413      	add	r3, r2
 800832e:	687a      	ldr	r2, [r7, #4]
 8008330:	429a      	cmp	r2, r3
 8008332:	d108      	bne.n	8008346 <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	685a      	ldr	r2, [r3, #4]
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	685b      	ldr	r3, [r3, #4]
 800833c:	441a      	add	r2, r3
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8008342:	68fb      	ldr	r3, [r7, #12]
 8008344:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800834a:	687b      	ldr	r3, [r7, #4]
 800834c:	685b      	ldr	r3, [r3, #4]
 800834e:	68ba      	ldr	r2, [r7, #8]
 8008350:	441a      	add	r2, r3
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	429a      	cmp	r2, r3
 8008358:	d118      	bne.n	800838c <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	681a      	ldr	r2, [r3, #0]
 800835e:	4b15      	ldr	r3, [pc, #84]	@ (80083b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008360:	681b      	ldr	r3, [r3, #0]
 8008362:	429a      	cmp	r2, r3
 8008364:	d00d      	beq.n	8008382 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	685a      	ldr	r2, [r3, #4]
 800836a:	68fb      	ldr	r3, [r7, #12]
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	685b      	ldr	r3, [r3, #4]
 8008370:	441a      	add	r2, r3
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 8008376:	68fb      	ldr	r3, [r7, #12]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	601a      	str	r2, [r3, #0]
 8008380:	e008      	b.n	8008394 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 8008382:	4b0c      	ldr	r3, [pc, #48]	@ (80083b4 <prvInsertBlockIntoFreeList+0xb0>)
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	601a      	str	r2, [r3, #0]
 800838a:	e003      	b.n	8008394 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800838c:	68fb      	ldr	r3, [r7, #12]
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 8008394:	68fa      	ldr	r2, [r7, #12]
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	429a      	cmp	r2, r3
 800839a:	d002      	beq.n	80083a2 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800839c:	68fb      	ldr	r3, [r7, #12]
 800839e:	687a      	ldr	r2, [r7, #4]
 80083a0:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80083a2:	bf00      	nop
 80083a4:	3714      	adds	r7, #20
 80083a6:	46bd      	mov	sp, r7
 80083a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ac:	4770      	bx	lr
 80083ae:	bf00      	nop
 80083b0:	20004ccc 	.word	0x20004ccc
 80083b4:	20004cd4 	.word	0x20004cd4

080083b8 <std>:
 80083b8:	2300      	movs	r3, #0
 80083ba:	b510      	push	{r4, lr}
 80083bc:	4604      	mov	r4, r0
 80083be:	e9c0 3300 	strd	r3, r3, [r0]
 80083c2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80083c6:	6083      	str	r3, [r0, #8]
 80083c8:	8181      	strh	r1, [r0, #12]
 80083ca:	6643      	str	r3, [r0, #100]	@ 0x64
 80083cc:	81c2      	strh	r2, [r0, #14]
 80083ce:	6183      	str	r3, [r0, #24]
 80083d0:	4619      	mov	r1, r3
 80083d2:	2208      	movs	r2, #8
 80083d4:	305c      	adds	r0, #92	@ 0x5c
 80083d6:	f000 f9f9 	bl	80087cc <memset>
 80083da:	4b0d      	ldr	r3, [pc, #52]	@ (8008410 <std+0x58>)
 80083dc:	6263      	str	r3, [r4, #36]	@ 0x24
 80083de:	4b0d      	ldr	r3, [pc, #52]	@ (8008414 <std+0x5c>)
 80083e0:	62a3      	str	r3, [r4, #40]	@ 0x28
 80083e2:	4b0d      	ldr	r3, [pc, #52]	@ (8008418 <std+0x60>)
 80083e4:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80083e6:	4b0d      	ldr	r3, [pc, #52]	@ (800841c <std+0x64>)
 80083e8:	6323      	str	r3, [r4, #48]	@ 0x30
 80083ea:	4b0d      	ldr	r3, [pc, #52]	@ (8008420 <std+0x68>)
 80083ec:	6224      	str	r4, [r4, #32]
 80083ee:	429c      	cmp	r4, r3
 80083f0:	d006      	beq.n	8008400 <std+0x48>
 80083f2:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80083f6:	4294      	cmp	r4, r2
 80083f8:	d002      	beq.n	8008400 <std+0x48>
 80083fa:	33d0      	adds	r3, #208	@ 0xd0
 80083fc:	429c      	cmp	r4, r3
 80083fe:	d105      	bne.n	800840c <std+0x54>
 8008400:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8008404:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008408:	f000 bab6 	b.w	8008978 <__retarget_lock_init_recursive>
 800840c:	bd10      	pop	{r4, pc}
 800840e:	bf00      	nop
 8008410:	0800861d 	.word	0x0800861d
 8008414:	0800863f 	.word	0x0800863f
 8008418:	08008677 	.word	0x08008677
 800841c:	0800869b 	.word	0x0800869b
 8008420:	20004cec 	.word	0x20004cec

08008424 <stdio_exit_handler>:
 8008424:	4a02      	ldr	r2, [pc, #8]	@ (8008430 <stdio_exit_handler+0xc>)
 8008426:	4903      	ldr	r1, [pc, #12]	@ (8008434 <stdio_exit_handler+0x10>)
 8008428:	4803      	ldr	r0, [pc, #12]	@ (8008438 <stdio_exit_handler+0x14>)
 800842a:	f000 b869 	b.w	8008500 <_fwalk_sglue>
 800842e:	bf00      	nop
 8008430:	20000010 	.word	0x20000010
 8008434:	08009231 	.word	0x08009231
 8008438:	20000020 	.word	0x20000020

0800843c <cleanup_stdio>:
 800843c:	6841      	ldr	r1, [r0, #4]
 800843e:	4b0c      	ldr	r3, [pc, #48]	@ (8008470 <cleanup_stdio+0x34>)
 8008440:	4299      	cmp	r1, r3
 8008442:	b510      	push	{r4, lr}
 8008444:	4604      	mov	r4, r0
 8008446:	d001      	beq.n	800844c <cleanup_stdio+0x10>
 8008448:	f000 fef2 	bl	8009230 <_fflush_r>
 800844c:	68a1      	ldr	r1, [r4, #8]
 800844e:	4b09      	ldr	r3, [pc, #36]	@ (8008474 <cleanup_stdio+0x38>)
 8008450:	4299      	cmp	r1, r3
 8008452:	d002      	beq.n	800845a <cleanup_stdio+0x1e>
 8008454:	4620      	mov	r0, r4
 8008456:	f000 feeb 	bl	8009230 <_fflush_r>
 800845a:	68e1      	ldr	r1, [r4, #12]
 800845c:	4b06      	ldr	r3, [pc, #24]	@ (8008478 <cleanup_stdio+0x3c>)
 800845e:	4299      	cmp	r1, r3
 8008460:	d004      	beq.n	800846c <cleanup_stdio+0x30>
 8008462:	4620      	mov	r0, r4
 8008464:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8008468:	f000 bee2 	b.w	8009230 <_fflush_r>
 800846c:	bd10      	pop	{r4, pc}
 800846e:	bf00      	nop
 8008470:	20004cec 	.word	0x20004cec
 8008474:	20004d54 	.word	0x20004d54
 8008478:	20004dbc 	.word	0x20004dbc

0800847c <global_stdio_init.part.0>:
 800847c:	b510      	push	{r4, lr}
 800847e:	4b0b      	ldr	r3, [pc, #44]	@ (80084ac <global_stdio_init.part.0+0x30>)
 8008480:	4c0b      	ldr	r4, [pc, #44]	@ (80084b0 <global_stdio_init.part.0+0x34>)
 8008482:	4a0c      	ldr	r2, [pc, #48]	@ (80084b4 <global_stdio_init.part.0+0x38>)
 8008484:	601a      	str	r2, [r3, #0]
 8008486:	4620      	mov	r0, r4
 8008488:	2200      	movs	r2, #0
 800848a:	2104      	movs	r1, #4
 800848c:	f7ff ff94 	bl	80083b8 <std>
 8008490:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8008494:	2201      	movs	r2, #1
 8008496:	2109      	movs	r1, #9
 8008498:	f7ff ff8e 	bl	80083b8 <std>
 800849c:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80084a0:	2202      	movs	r2, #2
 80084a2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084a6:	2112      	movs	r1, #18
 80084a8:	f7ff bf86 	b.w	80083b8 <std>
 80084ac:	20004e24 	.word	0x20004e24
 80084b0:	20004cec 	.word	0x20004cec
 80084b4:	08008425 	.word	0x08008425

080084b8 <__sfp_lock_acquire>:
 80084b8:	4801      	ldr	r0, [pc, #4]	@ (80084c0 <__sfp_lock_acquire+0x8>)
 80084ba:	f000 ba5e 	b.w	800897a <__retarget_lock_acquire_recursive>
 80084be:	bf00      	nop
 80084c0:	20004e2d 	.word	0x20004e2d

080084c4 <__sfp_lock_release>:
 80084c4:	4801      	ldr	r0, [pc, #4]	@ (80084cc <__sfp_lock_release+0x8>)
 80084c6:	f000 ba59 	b.w	800897c <__retarget_lock_release_recursive>
 80084ca:	bf00      	nop
 80084cc:	20004e2d 	.word	0x20004e2d

080084d0 <__sinit>:
 80084d0:	b510      	push	{r4, lr}
 80084d2:	4604      	mov	r4, r0
 80084d4:	f7ff fff0 	bl	80084b8 <__sfp_lock_acquire>
 80084d8:	6a23      	ldr	r3, [r4, #32]
 80084da:	b11b      	cbz	r3, 80084e4 <__sinit+0x14>
 80084dc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80084e0:	f7ff bff0 	b.w	80084c4 <__sfp_lock_release>
 80084e4:	4b04      	ldr	r3, [pc, #16]	@ (80084f8 <__sinit+0x28>)
 80084e6:	6223      	str	r3, [r4, #32]
 80084e8:	4b04      	ldr	r3, [pc, #16]	@ (80084fc <__sinit+0x2c>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d1f5      	bne.n	80084dc <__sinit+0xc>
 80084f0:	f7ff ffc4 	bl	800847c <global_stdio_init.part.0>
 80084f4:	e7f2      	b.n	80084dc <__sinit+0xc>
 80084f6:	bf00      	nop
 80084f8:	0800843d 	.word	0x0800843d
 80084fc:	20004e24 	.word	0x20004e24

08008500 <_fwalk_sglue>:
 8008500:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008504:	4607      	mov	r7, r0
 8008506:	4688      	mov	r8, r1
 8008508:	4614      	mov	r4, r2
 800850a:	2600      	movs	r6, #0
 800850c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8008510:	f1b9 0901 	subs.w	r9, r9, #1
 8008514:	d505      	bpl.n	8008522 <_fwalk_sglue+0x22>
 8008516:	6824      	ldr	r4, [r4, #0]
 8008518:	2c00      	cmp	r4, #0
 800851a:	d1f7      	bne.n	800850c <_fwalk_sglue+0xc>
 800851c:	4630      	mov	r0, r6
 800851e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008522:	89ab      	ldrh	r3, [r5, #12]
 8008524:	2b01      	cmp	r3, #1
 8008526:	d907      	bls.n	8008538 <_fwalk_sglue+0x38>
 8008528:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800852c:	3301      	adds	r3, #1
 800852e:	d003      	beq.n	8008538 <_fwalk_sglue+0x38>
 8008530:	4629      	mov	r1, r5
 8008532:	4638      	mov	r0, r7
 8008534:	47c0      	blx	r8
 8008536:	4306      	orrs	r6, r0
 8008538:	3568      	adds	r5, #104	@ 0x68
 800853a:	e7e9      	b.n	8008510 <_fwalk_sglue+0x10>

0800853c <iprintf>:
 800853c:	b40f      	push	{r0, r1, r2, r3}
 800853e:	b507      	push	{r0, r1, r2, lr}
 8008540:	4906      	ldr	r1, [pc, #24]	@ (800855c <iprintf+0x20>)
 8008542:	ab04      	add	r3, sp, #16
 8008544:	6808      	ldr	r0, [r1, #0]
 8008546:	f853 2b04 	ldr.w	r2, [r3], #4
 800854a:	6881      	ldr	r1, [r0, #8]
 800854c:	9301      	str	r3, [sp, #4]
 800854e:	f000 fb47 	bl	8008be0 <_vfiprintf_r>
 8008552:	b003      	add	sp, #12
 8008554:	f85d eb04 	ldr.w	lr, [sp], #4
 8008558:	b004      	add	sp, #16
 800855a:	4770      	bx	lr
 800855c:	2000001c 	.word	0x2000001c

08008560 <_puts_r>:
 8008560:	6a03      	ldr	r3, [r0, #32]
 8008562:	b570      	push	{r4, r5, r6, lr}
 8008564:	6884      	ldr	r4, [r0, #8]
 8008566:	4605      	mov	r5, r0
 8008568:	460e      	mov	r6, r1
 800856a:	b90b      	cbnz	r3, 8008570 <_puts_r+0x10>
 800856c:	f7ff ffb0 	bl	80084d0 <__sinit>
 8008570:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008572:	07db      	lsls	r3, r3, #31
 8008574:	d405      	bmi.n	8008582 <_puts_r+0x22>
 8008576:	89a3      	ldrh	r3, [r4, #12]
 8008578:	0598      	lsls	r0, r3, #22
 800857a:	d402      	bmi.n	8008582 <_puts_r+0x22>
 800857c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800857e:	f000 f9fc 	bl	800897a <__retarget_lock_acquire_recursive>
 8008582:	89a3      	ldrh	r3, [r4, #12]
 8008584:	0719      	lsls	r1, r3, #28
 8008586:	d502      	bpl.n	800858e <_puts_r+0x2e>
 8008588:	6923      	ldr	r3, [r4, #16]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d135      	bne.n	80085fa <_puts_r+0x9a>
 800858e:	4621      	mov	r1, r4
 8008590:	4628      	mov	r0, r5
 8008592:	f000 f8c5 	bl	8008720 <__swsetup_r>
 8008596:	b380      	cbz	r0, 80085fa <_puts_r+0x9a>
 8008598:	f04f 35ff 	mov.w	r5, #4294967295
 800859c:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800859e:	07da      	lsls	r2, r3, #31
 80085a0:	d405      	bmi.n	80085ae <_puts_r+0x4e>
 80085a2:	89a3      	ldrh	r3, [r4, #12]
 80085a4:	059b      	lsls	r3, r3, #22
 80085a6:	d402      	bmi.n	80085ae <_puts_r+0x4e>
 80085a8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80085aa:	f000 f9e7 	bl	800897c <__retarget_lock_release_recursive>
 80085ae:	4628      	mov	r0, r5
 80085b0:	bd70      	pop	{r4, r5, r6, pc}
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	da04      	bge.n	80085c0 <_puts_r+0x60>
 80085b6:	69a2      	ldr	r2, [r4, #24]
 80085b8:	429a      	cmp	r2, r3
 80085ba:	dc17      	bgt.n	80085ec <_puts_r+0x8c>
 80085bc:	290a      	cmp	r1, #10
 80085be:	d015      	beq.n	80085ec <_puts_r+0x8c>
 80085c0:	6823      	ldr	r3, [r4, #0]
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	6022      	str	r2, [r4, #0]
 80085c6:	7019      	strb	r1, [r3, #0]
 80085c8:	68a3      	ldr	r3, [r4, #8]
 80085ca:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80085ce:	3b01      	subs	r3, #1
 80085d0:	60a3      	str	r3, [r4, #8]
 80085d2:	2900      	cmp	r1, #0
 80085d4:	d1ed      	bne.n	80085b2 <_puts_r+0x52>
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	da11      	bge.n	80085fe <_puts_r+0x9e>
 80085da:	4622      	mov	r2, r4
 80085dc:	210a      	movs	r1, #10
 80085de:	4628      	mov	r0, r5
 80085e0:	f000 f85f 	bl	80086a2 <__swbuf_r>
 80085e4:	3001      	adds	r0, #1
 80085e6:	d0d7      	beq.n	8008598 <_puts_r+0x38>
 80085e8:	250a      	movs	r5, #10
 80085ea:	e7d7      	b.n	800859c <_puts_r+0x3c>
 80085ec:	4622      	mov	r2, r4
 80085ee:	4628      	mov	r0, r5
 80085f0:	f000 f857 	bl	80086a2 <__swbuf_r>
 80085f4:	3001      	adds	r0, #1
 80085f6:	d1e7      	bne.n	80085c8 <_puts_r+0x68>
 80085f8:	e7ce      	b.n	8008598 <_puts_r+0x38>
 80085fa:	3e01      	subs	r6, #1
 80085fc:	e7e4      	b.n	80085c8 <_puts_r+0x68>
 80085fe:	6823      	ldr	r3, [r4, #0]
 8008600:	1c5a      	adds	r2, r3, #1
 8008602:	6022      	str	r2, [r4, #0]
 8008604:	220a      	movs	r2, #10
 8008606:	701a      	strb	r2, [r3, #0]
 8008608:	e7ee      	b.n	80085e8 <_puts_r+0x88>
	...

0800860c <puts>:
 800860c:	4b02      	ldr	r3, [pc, #8]	@ (8008618 <puts+0xc>)
 800860e:	4601      	mov	r1, r0
 8008610:	6818      	ldr	r0, [r3, #0]
 8008612:	f7ff bfa5 	b.w	8008560 <_puts_r>
 8008616:	bf00      	nop
 8008618:	2000001c 	.word	0x2000001c

0800861c <__sread>:
 800861c:	b510      	push	{r4, lr}
 800861e:	460c      	mov	r4, r1
 8008620:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008624:	f000 f95a 	bl	80088dc <_read_r>
 8008628:	2800      	cmp	r0, #0
 800862a:	bfab      	itete	ge
 800862c:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 800862e:	89a3      	ldrhlt	r3, [r4, #12]
 8008630:	181b      	addge	r3, r3, r0
 8008632:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8008636:	bfac      	ite	ge
 8008638:	6563      	strge	r3, [r4, #84]	@ 0x54
 800863a:	81a3      	strhlt	r3, [r4, #12]
 800863c:	bd10      	pop	{r4, pc}

0800863e <__swrite>:
 800863e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008642:	461f      	mov	r7, r3
 8008644:	898b      	ldrh	r3, [r1, #12]
 8008646:	05db      	lsls	r3, r3, #23
 8008648:	4605      	mov	r5, r0
 800864a:	460c      	mov	r4, r1
 800864c:	4616      	mov	r6, r2
 800864e:	d505      	bpl.n	800865c <__swrite+0x1e>
 8008650:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008654:	2302      	movs	r3, #2
 8008656:	2200      	movs	r2, #0
 8008658:	f000 f92e 	bl	80088b8 <_lseek_r>
 800865c:	89a3      	ldrh	r3, [r4, #12]
 800865e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8008662:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8008666:	81a3      	strh	r3, [r4, #12]
 8008668:	4632      	mov	r2, r6
 800866a:	463b      	mov	r3, r7
 800866c:	4628      	mov	r0, r5
 800866e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008672:	f000 b945 	b.w	8008900 <_write_r>

08008676 <__sseek>:
 8008676:	b510      	push	{r4, lr}
 8008678:	460c      	mov	r4, r1
 800867a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800867e:	f000 f91b 	bl	80088b8 <_lseek_r>
 8008682:	1c43      	adds	r3, r0, #1
 8008684:	89a3      	ldrh	r3, [r4, #12]
 8008686:	bf15      	itete	ne
 8008688:	6560      	strne	r0, [r4, #84]	@ 0x54
 800868a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800868e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8008692:	81a3      	strheq	r3, [r4, #12]
 8008694:	bf18      	it	ne
 8008696:	81a3      	strhne	r3, [r4, #12]
 8008698:	bd10      	pop	{r4, pc}

0800869a <__sclose>:
 800869a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800869e:	f000 b89d 	b.w	80087dc <_close_r>

080086a2 <__swbuf_r>:
 80086a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80086a4:	460e      	mov	r6, r1
 80086a6:	4614      	mov	r4, r2
 80086a8:	4605      	mov	r5, r0
 80086aa:	b118      	cbz	r0, 80086b4 <__swbuf_r+0x12>
 80086ac:	6a03      	ldr	r3, [r0, #32]
 80086ae:	b90b      	cbnz	r3, 80086b4 <__swbuf_r+0x12>
 80086b0:	f7ff ff0e 	bl	80084d0 <__sinit>
 80086b4:	69a3      	ldr	r3, [r4, #24]
 80086b6:	60a3      	str	r3, [r4, #8]
 80086b8:	89a3      	ldrh	r3, [r4, #12]
 80086ba:	071a      	lsls	r2, r3, #28
 80086bc:	d501      	bpl.n	80086c2 <__swbuf_r+0x20>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	b943      	cbnz	r3, 80086d4 <__swbuf_r+0x32>
 80086c2:	4621      	mov	r1, r4
 80086c4:	4628      	mov	r0, r5
 80086c6:	f000 f82b 	bl	8008720 <__swsetup_r>
 80086ca:	b118      	cbz	r0, 80086d4 <__swbuf_r+0x32>
 80086cc:	f04f 37ff 	mov.w	r7, #4294967295
 80086d0:	4638      	mov	r0, r7
 80086d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80086d4:	6823      	ldr	r3, [r4, #0]
 80086d6:	6922      	ldr	r2, [r4, #16]
 80086d8:	1a98      	subs	r0, r3, r2
 80086da:	6963      	ldr	r3, [r4, #20]
 80086dc:	b2f6      	uxtb	r6, r6
 80086de:	4283      	cmp	r3, r0
 80086e0:	4637      	mov	r7, r6
 80086e2:	dc05      	bgt.n	80086f0 <__swbuf_r+0x4e>
 80086e4:	4621      	mov	r1, r4
 80086e6:	4628      	mov	r0, r5
 80086e8:	f000 fda2 	bl	8009230 <_fflush_r>
 80086ec:	2800      	cmp	r0, #0
 80086ee:	d1ed      	bne.n	80086cc <__swbuf_r+0x2a>
 80086f0:	68a3      	ldr	r3, [r4, #8]
 80086f2:	3b01      	subs	r3, #1
 80086f4:	60a3      	str	r3, [r4, #8]
 80086f6:	6823      	ldr	r3, [r4, #0]
 80086f8:	1c5a      	adds	r2, r3, #1
 80086fa:	6022      	str	r2, [r4, #0]
 80086fc:	701e      	strb	r6, [r3, #0]
 80086fe:	6962      	ldr	r2, [r4, #20]
 8008700:	1c43      	adds	r3, r0, #1
 8008702:	429a      	cmp	r2, r3
 8008704:	d004      	beq.n	8008710 <__swbuf_r+0x6e>
 8008706:	89a3      	ldrh	r3, [r4, #12]
 8008708:	07db      	lsls	r3, r3, #31
 800870a:	d5e1      	bpl.n	80086d0 <__swbuf_r+0x2e>
 800870c:	2e0a      	cmp	r6, #10
 800870e:	d1df      	bne.n	80086d0 <__swbuf_r+0x2e>
 8008710:	4621      	mov	r1, r4
 8008712:	4628      	mov	r0, r5
 8008714:	f000 fd8c 	bl	8009230 <_fflush_r>
 8008718:	2800      	cmp	r0, #0
 800871a:	d0d9      	beq.n	80086d0 <__swbuf_r+0x2e>
 800871c:	e7d6      	b.n	80086cc <__swbuf_r+0x2a>
	...

08008720 <__swsetup_r>:
 8008720:	b538      	push	{r3, r4, r5, lr}
 8008722:	4b29      	ldr	r3, [pc, #164]	@ (80087c8 <__swsetup_r+0xa8>)
 8008724:	4605      	mov	r5, r0
 8008726:	6818      	ldr	r0, [r3, #0]
 8008728:	460c      	mov	r4, r1
 800872a:	b118      	cbz	r0, 8008734 <__swsetup_r+0x14>
 800872c:	6a03      	ldr	r3, [r0, #32]
 800872e:	b90b      	cbnz	r3, 8008734 <__swsetup_r+0x14>
 8008730:	f7ff fece 	bl	80084d0 <__sinit>
 8008734:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008738:	0719      	lsls	r1, r3, #28
 800873a:	d422      	bmi.n	8008782 <__swsetup_r+0x62>
 800873c:	06da      	lsls	r2, r3, #27
 800873e:	d407      	bmi.n	8008750 <__swsetup_r+0x30>
 8008740:	2209      	movs	r2, #9
 8008742:	602a      	str	r2, [r5, #0]
 8008744:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8008748:	81a3      	strh	r3, [r4, #12]
 800874a:	f04f 30ff 	mov.w	r0, #4294967295
 800874e:	e033      	b.n	80087b8 <__swsetup_r+0x98>
 8008750:	0758      	lsls	r0, r3, #29
 8008752:	d512      	bpl.n	800877a <__swsetup_r+0x5a>
 8008754:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008756:	b141      	cbz	r1, 800876a <__swsetup_r+0x4a>
 8008758:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800875c:	4299      	cmp	r1, r3
 800875e:	d002      	beq.n	8008766 <__swsetup_r+0x46>
 8008760:	4628      	mov	r0, r5
 8008762:	f000 f91b 	bl	800899c <_free_r>
 8008766:	2300      	movs	r3, #0
 8008768:	6363      	str	r3, [r4, #52]	@ 0x34
 800876a:	89a3      	ldrh	r3, [r4, #12]
 800876c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008770:	81a3      	strh	r3, [r4, #12]
 8008772:	2300      	movs	r3, #0
 8008774:	6063      	str	r3, [r4, #4]
 8008776:	6923      	ldr	r3, [r4, #16]
 8008778:	6023      	str	r3, [r4, #0]
 800877a:	89a3      	ldrh	r3, [r4, #12]
 800877c:	f043 0308 	orr.w	r3, r3, #8
 8008780:	81a3      	strh	r3, [r4, #12]
 8008782:	6923      	ldr	r3, [r4, #16]
 8008784:	b94b      	cbnz	r3, 800879a <__swsetup_r+0x7a>
 8008786:	89a3      	ldrh	r3, [r4, #12]
 8008788:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 800878c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008790:	d003      	beq.n	800879a <__swsetup_r+0x7a>
 8008792:	4621      	mov	r1, r4
 8008794:	4628      	mov	r0, r5
 8008796:	f000 fd99 	bl	80092cc <__smakebuf_r>
 800879a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800879e:	f013 0201 	ands.w	r2, r3, #1
 80087a2:	d00a      	beq.n	80087ba <__swsetup_r+0x9a>
 80087a4:	2200      	movs	r2, #0
 80087a6:	60a2      	str	r2, [r4, #8]
 80087a8:	6962      	ldr	r2, [r4, #20]
 80087aa:	4252      	negs	r2, r2
 80087ac:	61a2      	str	r2, [r4, #24]
 80087ae:	6922      	ldr	r2, [r4, #16]
 80087b0:	b942      	cbnz	r2, 80087c4 <__swsetup_r+0xa4>
 80087b2:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 80087b6:	d1c5      	bne.n	8008744 <__swsetup_r+0x24>
 80087b8:	bd38      	pop	{r3, r4, r5, pc}
 80087ba:	0799      	lsls	r1, r3, #30
 80087bc:	bf58      	it	pl
 80087be:	6962      	ldrpl	r2, [r4, #20]
 80087c0:	60a2      	str	r2, [r4, #8]
 80087c2:	e7f4      	b.n	80087ae <__swsetup_r+0x8e>
 80087c4:	2000      	movs	r0, #0
 80087c6:	e7f7      	b.n	80087b8 <__swsetup_r+0x98>
 80087c8:	2000001c 	.word	0x2000001c

080087cc <memset>:
 80087cc:	4402      	add	r2, r0
 80087ce:	4603      	mov	r3, r0
 80087d0:	4293      	cmp	r3, r2
 80087d2:	d100      	bne.n	80087d6 <memset+0xa>
 80087d4:	4770      	bx	lr
 80087d6:	f803 1b01 	strb.w	r1, [r3], #1
 80087da:	e7f9      	b.n	80087d0 <memset+0x4>

080087dc <_close_r>:
 80087dc:	b538      	push	{r3, r4, r5, lr}
 80087de:	4d06      	ldr	r5, [pc, #24]	@ (80087f8 <_close_r+0x1c>)
 80087e0:	2300      	movs	r3, #0
 80087e2:	4604      	mov	r4, r0
 80087e4:	4608      	mov	r0, r1
 80087e6:	602b      	str	r3, [r5, #0]
 80087e8:	f7f9 fb8d 	bl	8001f06 <_close>
 80087ec:	1c43      	adds	r3, r0, #1
 80087ee:	d102      	bne.n	80087f6 <_close_r+0x1a>
 80087f0:	682b      	ldr	r3, [r5, #0]
 80087f2:	b103      	cbz	r3, 80087f6 <_close_r+0x1a>
 80087f4:	6023      	str	r3, [r4, #0]
 80087f6:	bd38      	pop	{r3, r4, r5, pc}
 80087f8:	20004e28 	.word	0x20004e28

080087fc <_reclaim_reent>:
 80087fc:	4b2d      	ldr	r3, [pc, #180]	@ (80088b4 <_reclaim_reent+0xb8>)
 80087fe:	681b      	ldr	r3, [r3, #0]
 8008800:	4283      	cmp	r3, r0
 8008802:	b570      	push	{r4, r5, r6, lr}
 8008804:	4604      	mov	r4, r0
 8008806:	d053      	beq.n	80088b0 <_reclaim_reent+0xb4>
 8008808:	69c3      	ldr	r3, [r0, #28]
 800880a:	b31b      	cbz	r3, 8008854 <_reclaim_reent+0x58>
 800880c:	68db      	ldr	r3, [r3, #12]
 800880e:	b163      	cbz	r3, 800882a <_reclaim_reent+0x2e>
 8008810:	2500      	movs	r5, #0
 8008812:	69e3      	ldr	r3, [r4, #28]
 8008814:	68db      	ldr	r3, [r3, #12]
 8008816:	5959      	ldr	r1, [r3, r5]
 8008818:	b9b1      	cbnz	r1, 8008848 <_reclaim_reent+0x4c>
 800881a:	3504      	adds	r5, #4
 800881c:	2d80      	cmp	r5, #128	@ 0x80
 800881e:	d1f8      	bne.n	8008812 <_reclaim_reent+0x16>
 8008820:	69e3      	ldr	r3, [r4, #28]
 8008822:	4620      	mov	r0, r4
 8008824:	68d9      	ldr	r1, [r3, #12]
 8008826:	f000 f8b9 	bl	800899c <_free_r>
 800882a:	69e3      	ldr	r3, [r4, #28]
 800882c:	6819      	ldr	r1, [r3, #0]
 800882e:	b111      	cbz	r1, 8008836 <_reclaim_reent+0x3a>
 8008830:	4620      	mov	r0, r4
 8008832:	f000 f8b3 	bl	800899c <_free_r>
 8008836:	69e3      	ldr	r3, [r4, #28]
 8008838:	689d      	ldr	r5, [r3, #8]
 800883a:	b15d      	cbz	r5, 8008854 <_reclaim_reent+0x58>
 800883c:	4629      	mov	r1, r5
 800883e:	4620      	mov	r0, r4
 8008840:	682d      	ldr	r5, [r5, #0]
 8008842:	f000 f8ab 	bl	800899c <_free_r>
 8008846:	e7f8      	b.n	800883a <_reclaim_reent+0x3e>
 8008848:	680e      	ldr	r6, [r1, #0]
 800884a:	4620      	mov	r0, r4
 800884c:	f000 f8a6 	bl	800899c <_free_r>
 8008850:	4631      	mov	r1, r6
 8008852:	e7e1      	b.n	8008818 <_reclaim_reent+0x1c>
 8008854:	6961      	ldr	r1, [r4, #20]
 8008856:	b111      	cbz	r1, 800885e <_reclaim_reent+0x62>
 8008858:	4620      	mov	r0, r4
 800885a:	f000 f89f 	bl	800899c <_free_r>
 800885e:	69e1      	ldr	r1, [r4, #28]
 8008860:	b111      	cbz	r1, 8008868 <_reclaim_reent+0x6c>
 8008862:	4620      	mov	r0, r4
 8008864:	f000 f89a 	bl	800899c <_free_r>
 8008868:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800886a:	b111      	cbz	r1, 8008872 <_reclaim_reent+0x76>
 800886c:	4620      	mov	r0, r4
 800886e:	f000 f895 	bl	800899c <_free_r>
 8008872:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8008874:	b111      	cbz	r1, 800887c <_reclaim_reent+0x80>
 8008876:	4620      	mov	r0, r4
 8008878:	f000 f890 	bl	800899c <_free_r>
 800887c:	6ba1      	ldr	r1, [r4, #56]	@ 0x38
 800887e:	b111      	cbz	r1, 8008886 <_reclaim_reent+0x8a>
 8008880:	4620      	mov	r0, r4
 8008882:	f000 f88b 	bl	800899c <_free_r>
 8008886:	6ca1      	ldr	r1, [r4, #72]	@ 0x48
 8008888:	b111      	cbz	r1, 8008890 <_reclaim_reent+0x94>
 800888a:	4620      	mov	r0, r4
 800888c:	f000 f886 	bl	800899c <_free_r>
 8008890:	6c61      	ldr	r1, [r4, #68]	@ 0x44
 8008892:	b111      	cbz	r1, 800889a <_reclaim_reent+0x9e>
 8008894:	4620      	mov	r0, r4
 8008896:	f000 f881 	bl	800899c <_free_r>
 800889a:	6ae1      	ldr	r1, [r4, #44]	@ 0x2c
 800889c:	b111      	cbz	r1, 80088a4 <_reclaim_reent+0xa8>
 800889e:	4620      	mov	r0, r4
 80088a0:	f000 f87c 	bl	800899c <_free_r>
 80088a4:	6a23      	ldr	r3, [r4, #32]
 80088a6:	b11b      	cbz	r3, 80088b0 <_reclaim_reent+0xb4>
 80088a8:	4620      	mov	r0, r4
 80088aa:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80088ae:	4718      	bx	r3
 80088b0:	bd70      	pop	{r4, r5, r6, pc}
 80088b2:	bf00      	nop
 80088b4:	2000001c 	.word	0x2000001c

080088b8 <_lseek_r>:
 80088b8:	b538      	push	{r3, r4, r5, lr}
 80088ba:	4d07      	ldr	r5, [pc, #28]	@ (80088d8 <_lseek_r+0x20>)
 80088bc:	4604      	mov	r4, r0
 80088be:	4608      	mov	r0, r1
 80088c0:	4611      	mov	r1, r2
 80088c2:	2200      	movs	r2, #0
 80088c4:	602a      	str	r2, [r5, #0]
 80088c6:	461a      	mov	r2, r3
 80088c8:	f7f9 fb44 	bl	8001f54 <_lseek>
 80088cc:	1c43      	adds	r3, r0, #1
 80088ce:	d102      	bne.n	80088d6 <_lseek_r+0x1e>
 80088d0:	682b      	ldr	r3, [r5, #0]
 80088d2:	b103      	cbz	r3, 80088d6 <_lseek_r+0x1e>
 80088d4:	6023      	str	r3, [r4, #0]
 80088d6:	bd38      	pop	{r3, r4, r5, pc}
 80088d8:	20004e28 	.word	0x20004e28

080088dc <_read_r>:
 80088dc:	b538      	push	{r3, r4, r5, lr}
 80088de:	4d07      	ldr	r5, [pc, #28]	@ (80088fc <_read_r+0x20>)
 80088e0:	4604      	mov	r4, r0
 80088e2:	4608      	mov	r0, r1
 80088e4:	4611      	mov	r1, r2
 80088e6:	2200      	movs	r2, #0
 80088e8:	602a      	str	r2, [r5, #0]
 80088ea:	461a      	mov	r2, r3
 80088ec:	f7f9 faee 	bl	8001ecc <_read>
 80088f0:	1c43      	adds	r3, r0, #1
 80088f2:	d102      	bne.n	80088fa <_read_r+0x1e>
 80088f4:	682b      	ldr	r3, [r5, #0]
 80088f6:	b103      	cbz	r3, 80088fa <_read_r+0x1e>
 80088f8:	6023      	str	r3, [r4, #0]
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	20004e28 	.word	0x20004e28

08008900 <_write_r>:
 8008900:	b538      	push	{r3, r4, r5, lr}
 8008902:	4d07      	ldr	r5, [pc, #28]	@ (8008920 <_write_r+0x20>)
 8008904:	4604      	mov	r4, r0
 8008906:	4608      	mov	r0, r1
 8008908:	4611      	mov	r1, r2
 800890a:	2200      	movs	r2, #0
 800890c:	602a      	str	r2, [r5, #0]
 800890e:	461a      	mov	r2, r3
 8008910:	f7f8 ffcc 	bl	80018ac <_write>
 8008914:	1c43      	adds	r3, r0, #1
 8008916:	d102      	bne.n	800891e <_write_r+0x1e>
 8008918:	682b      	ldr	r3, [r5, #0]
 800891a:	b103      	cbz	r3, 800891e <_write_r+0x1e>
 800891c:	6023      	str	r3, [r4, #0]
 800891e:	bd38      	pop	{r3, r4, r5, pc}
 8008920:	20004e28 	.word	0x20004e28

08008924 <__errno>:
 8008924:	4b01      	ldr	r3, [pc, #4]	@ (800892c <__errno+0x8>)
 8008926:	6818      	ldr	r0, [r3, #0]
 8008928:	4770      	bx	lr
 800892a:	bf00      	nop
 800892c:	2000001c 	.word	0x2000001c

08008930 <__libc_init_array>:
 8008930:	b570      	push	{r4, r5, r6, lr}
 8008932:	4d0d      	ldr	r5, [pc, #52]	@ (8008968 <__libc_init_array+0x38>)
 8008934:	4c0d      	ldr	r4, [pc, #52]	@ (800896c <__libc_init_array+0x3c>)
 8008936:	1b64      	subs	r4, r4, r5
 8008938:	10a4      	asrs	r4, r4, #2
 800893a:	2600      	movs	r6, #0
 800893c:	42a6      	cmp	r6, r4
 800893e:	d109      	bne.n	8008954 <__libc_init_array+0x24>
 8008940:	4d0b      	ldr	r5, [pc, #44]	@ (8008970 <__libc_init_array+0x40>)
 8008942:	4c0c      	ldr	r4, [pc, #48]	@ (8008974 <__libc_init_array+0x44>)
 8008944:	f000 fd30 	bl	80093a8 <_init>
 8008948:	1b64      	subs	r4, r4, r5
 800894a:	10a4      	asrs	r4, r4, #2
 800894c:	2600      	movs	r6, #0
 800894e:	42a6      	cmp	r6, r4
 8008950:	d105      	bne.n	800895e <__libc_init_array+0x2e>
 8008952:	bd70      	pop	{r4, r5, r6, pc}
 8008954:	f855 3b04 	ldr.w	r3, [r5], #4
 8008958:	4798      	blx	r3
 800895a:	3601      	adds	r6, #1
 800895c:	e7ee      	b.n	800893c <__libc_init_array+0xc>
 800895e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008962:	4798      	blx	r3
 8008964:	3601      	adds	r6, #1
 8008966:	e7f2      	b.n	800894e <__libc_init_array+0x1e>
 8008968:	08009fbc 	.word	0x08009fbc
 800896c:	08009fbc 	.word	0x08009fbc
 8008970:	08009fbc 	.word	0x08009fbc
 8008974:	08009fc0 	.word	0x08009fc0

08008978 <__retarget_lock_init_recursive>:
 8008978:	4770      	bx	lr

0800897a <__retarget_lock_acquire_recursive>:
 800897a:	4770      	bx	lr

0800897c <__retarget_lock_release_recursive>:
 800897c:	4770      	bx	lr

0800897e <memcpy>:
 800897e:	440a      	add	r2, r1
 8008980:	4291      	cmp	r1, r2
 8008982:	f100 33ff 	add.w	r3, r0, #4294967295
 8008986:	d100      	bne.n	800898a <memcpy+0xc>
 8008988:	4770      	bx	lr
 800898a:	b510      	push	{r4, lr}
 800898c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008990:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008994:	4291      	cmp	r1, r2
 8008996:	d1f9      	bne.n	800898c <memcpy+0xe>
 8008998:	bd10      	pop	{r4, pc}
	...

0800899c <_free_r>:
 800899c:	b538      	push	{r3, r4, r5, lr}
 800899e:	4605      	mov	r5, r0
 80089a0:	2900      	cmp	r1, #0
 80089a2:	d041      	beq.n	8008a28 <_free_r+0x8c>
 80089a4:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80089a8:	1f0c      	subs	r4, r1, #4
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	bfb8      	it	lt
 80089ae:	18e4      	addlt	r4, r4, r3
 80089b0:	f000 f8e0 	bl	8008b74 <__malloc_lock>
 80089b4:	4a1d      	ldr	r2, [pc, #116]	@ (8008a2c <_free_r+0x90>)
 80089b6:	6813      	ldr	r3, [r2, #0]
 80089b8:	b933      	cbnz	r3, 80089c8 <_free_r+0x2c>
 80089ba:	6063      	str	r3, [r4, #4]
 80089bc:	6014      	str	r4, [r2, #0]
 80089be:	4628      	mov	r0, r5
 80089c0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80089c4:	f000 b8dc 	b.w	8008b80 <__malloc_unlock>
 80089c8:	42a3      	cmp	r3, r4
 80089ca:	d908      	bls.n	80089de <_free_r+0x42>
 80089cc:	6820      	ldr	r0, [r4, #0]
 80089ce:	1821      	adds	r1, r4, r0
 80089d0:	428b      	cmp	r3, r1
 80089d2:	bf01      	itttt	eq
 80089d4:	6819      	ldreq	r1, [r3, #0]
 80089d6:	685b      	ldreq	r3, [r3, #4]
 80089d8:	1809      	addeq	r1, r1, r0
 80089da:	6021      	streq	r1, [r4, #0]
 80089dc:	e7ed      	b.n	80089ba <_free_r+0x1e>
 80089de:	461a      	mov	r2, r3
 80089e0:	685b      	ldr	r3, [r3, #4]
 80089e2:	b10b      	cbz	r3, 80089e8 <_free_r+0x4c>
 80089e4:	42a3      	cmp	r3, r4
 80089e6:	d9fa      	bls.n	80089de <_free_r+0x42>
 80089e8:	6811      	ldr	r1, [r2, #0]
 80089ea:	1850      	adds	r0, r2, r1
 80089ec:	42a0      	cmp	r0, r4
 80089ee:	d10b      	bne.n	8008a08 <_free_r+0x6c>
 80089f0:	6820      	ldr	r0, [r4, #0]
 80089f2:	4401      	add	r1, r0
 80089f4:	1850      	adds	r0, r2, r1
 80089f6:	4283      	cmp	r3, r0
 80089f8:	6011      	str	r1, [r2, #0]
 80089fa:	d1e0      	bne.n	80089be <_free_r+0x22>
 80089fc:	6818      	ldr	r0, [r3, #0]
 80089fe:	685b      	ldr	r3, [r3, #4]
 8008a00:	6053      	str	r3, [r2, #4]
 8008a02:	4408      	add	r0, r1
 8008a04:	6010      	str	r0, [r2, #0]
 8008a06:	e7da      	b.n	80089be <_free_r+0x22>
 8008a08:	d902      	bls.n	8008a10 <_free_r+0x74>
 8008a0a:	230c      	movs	r3, #12
 8008a0c:	602b      	str	r3, [r5, #0]
 8008a0e:	e7d6      	b.n	80089be <_free_r+0x22>
 8008a10:	6820      	ldr	r0, [r4, #0]
 8008a12:	1821      	adds	r1, r4, r0
 8008a14:	428b      	cmp	r3, r1
 8008a16:	bf04      	itt	eq
 8008a18:	6819      	ldreq	r1, [r3, #0]
 8008a1a:	685b      	ldreq	r3, [r3, #4]
 8008a1c:	6063      	str	r3, [r4, #4]
 8008a1e:	bf04      	itt	eq
 8008a20:	1809      	addeq	r1, r1, r0
 8008a22:	6021      	streq	r1, [r4, #0]
 8008a24:	6054      	str	r4, [r2, #4]
 8008a26:	e7ca      	b.n	80089be <_free_r+0x22>
 8008a28:	bd38      	pop	{r3, r4, r5, pc}
 8008a2a:	bf00      	nop
 8008a2c:	20004e34 	.word	0x20004e34

08008a30 <sbrk_aligned>:
 8008a30:	b570      	push	{r4, r5, r6, lr}
 8008a32:	4e0f      	ldr	r6, [pc, #60]	@ (8008a70 <sbrk_aligned+0x40>)
 8008a34:	460c      	mov	r4, r1
 8008a36:	6831      	ldr	r1, [r6, #0]
 8008a38:	4605      	mov	r5, r0
 8008a3a:	b911      	cbnz	r1, 8008a42 <sbrk_aligned+0x12>
 8008a3c:	f000 fca4 	bl	8009388 <_sbrk_r>
 8008a40:	6030      	str	r0, [r6, #0]
 8008a42:	4621      	mov	r1, r4
 8008a44:	4628      	mov	r0, r5
 8008a46:	f000 fc9f 	bl	8009388 <_sbrk_r>
 8008a4a:	1c43      	adds	r3, r0, #1
 8008a4c:	d103      	bne.n	8008a56 <sbrk_aligned+0x26>
 8008a4e:	f04f 34ff 	mov.w	r4, #4294967295
 8008a52:	4620      	mov	r0, r4
 8008a54:	bd70      	pop	{r4, r5, r6, pc}
 8008a56:	1cc4      	adds	r4, r0, #3
 8008a58:	f024 0403 	bic.w	r4, r4, #3
 8008a5c:	42a0      	cmp	r0, r4
 8008a5e:	d0f8      	beq.n	8008a52 <sbrk_aligned+0x22>
 8008a60:	1a21      	subs	r1, r4, r0
 8008a62:	4628      	mov	r0, r5
 8008a64:	f000 fc90 	bl	8009388 <_sbrk_r>
 8008a68:	3001      	adds	r0, #1
 8008a6a:	d1f2      	bne.n	8008a52 <sbrk_aligned+0x22>
 8008a6c:	e7ef      	b.n	8008a4e <sbrk_aligned+0x1e>
 8008a6e:	bf00      	nop
 8008a70:	20004e30 	.word	0x20004e30

08008a74 <_malloc_r>:
 8008a74:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a78:	1ccd      	adds	r5, r1, #3
 8008a7a:	f025 0503 	bic.w	r5, r5, #3
 8008a7e:	3508      	adds	r5, #8
 8008a80:	2d0c      	cmp	r5, #12
 8008a82:	bf38      	it	cc
 8008a84:	250c      	movcc	r5, #12
 8008a86:	2d00      	cmp	r5, #0
 8008a88:	4606      	mov	r6, r0
 8008a8a:	db01      	blt.n	8008a90 <_malloc_r+0x1c>
 8008a8c:	42a9      	cmp	r1, r5
 8008a8e:	d904      	bls.n	8008a9a <_malloc_r+0x26>
 8008a90:	230c      	movs	r3, #12
 8008a92:	6033      	str	r3, [r6, #0]
 8008a94:	2000      	movs	r0, #0
 8008a96:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008a9a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008b70 <_malloc_r+0xfc>
 8008a9e:	f000 f869 	bl	8008b74 <__malloc_lock>
 8008aa2:	f8d8 3000 	ldr.w	r3, [r8]
 8008aa6:	461c      	mov	r4, r3
 8008aa8:	bb44      	cbnz	r4, 8008afc <_malloc_r+0x88>
 8008aaa:	4629      	mov	r1, r5
 8008aac:	4630      	mov	r0, r6
 8008aae:	f7ff ffbf 	bl	8008a30 <sbrk_aligned>
 8008ab2:	1c43      	adds	r3, r0, #1
 8008ab4:	4604      	mov	r4, r0
 8008ab6:	d158      	bne.n	8008b6a <_malloc_r+0xf6>
 8008ab8:	f8d8 4000 	ldr.w	r4, [r8]
 8008abc:	4627      	mov	r7, r4
 8008abe:	2f00      	cmp	r7, #0
 8008ac0:	d143      	bne.n	8008b4a <_malloc_r+0xd6>
 8008ac2:	2c00      	cmp	r4, #0
 8008ac4:	d04b      	beq.n	8008b5e <_malloc_r+0xea>
 8008ac6:	6823      	ldr	r3, [r4, #0]
 8008ac8:	4639      	mov	r1, r7
 8008aca:	4630      	mov	r0, r6
 8008acc:	eb04 0903 	add.w	r9, r4, r3
 8008ad0:	f000 fc5a 	bl	8009388 <_sbrk_r>
 8008ad4:	4581      	cmp	r9, r0
 8008ad6:	d142      	bne.n	8008b5e <_malloc_r+0xea>
 8008ad8:	6821      	ldr	r1, [r4, #0]
 8008ada:	1a6d      	subs	r5, r5, r1
 8008adc:	4629      	mov	r1, r5
 8008ade:	4630      	mov	r0, r6
 8008ae0:	f7ff ffa6 	bl	8008a30 <sbrk_aligned>
 8008ae4:	3001      	adds	r0, #1
 8008ae6:	d03a      	beq.n	8008b5e <_malloc_r+0xea>
 8008ae8:	6823      	ldr	r3, [r4, #0]
 8008aea:	442b      	add	r3, r5
 8008aec:	6023      	str	r3, [r4, #0]
 8008aee:	f8d8 3000 	ldr.w	r3, [r8]
 8008af2:	685a      	ldr	r2, [r3, #4]
 8008af4:	bb62      	cbnz	r2, 8008b50 <_malloc_r+0xdc>
 8008af6:	f8c8 7000 	str.w	r7, [r8]
 8008afa:	e00f      	b.n	8008b1c <_malloc_r+0xa8>
 8008afc:	6822      	ldr	r2, [r4, #0]
 8008afe:	1b52      	subs	r2, r2, r5
 8008b00:	d420      	bmi.n	8008b44 <_malloc_r+0xd0>
 8008b02:	2a0b      	cmp	r2, #11
 8008b04:	d917      	bls.n	8008b36 <_malloc_r+0xc2>
 8008b06:	1961      	adds	r1, r4, r5
 8008b08:	42a3      	cmp	r3, r4
 8008b0a:	6025      	str	r5, [r4, #0]
 8008b0c:	bf18      	it	ne
 8008b0e:	6059      	strne	r1, [r3, #4]
 8008b10:	6863      	ldr	r3, [r4, #4]
 8008b12:	bf08      	it	eq
 8008b14:	f8c8 1000 	streq.w	r1, [r8]
 8008b18:	5162      	str	r2, [r4, r5]
 8008b1a:	604b      	str	r3, [r1, #4]
 8008b1c:	4630      	mov	r0, r6
 8008b1e:	f000 f82f 	bl	8008b80 <__malloc_unlock>
 8008b22:	f104 000b 	add.w	r0, r4, #11
 8008b26:	1d23      	adds	r3, r4, #4
 8008b28:	f020 0007 	bic.w	r0, r0, #7
 8008b2c:	1ac2      	subs	r2, r0, r3
 8008b2e:	bf1c      	itt	ne
 8008b30:	1a1b      	subne	r3, r3, r0
 8008b32:	50a3      	strne	r3, [r4, r2]
 8008b34:	e7af      	b.n	8008a96 <_malloc_r+0x22>
 8008b36:	6862      	ldr	r2, [r4, #4]
 8008b38:	42a3      	cmp	r3, r4
 8008b3a:	bf0c      	ite	eq
 8008b3c:	f8c8 2000 	streq.w	r2, [r8]
 8008b40:	605a      	strne	r2, [r3, #4]
 8008b42:	e7eb      	b.n	8008b1c <_malloc_r+0xa8>
 8008b44:	4623      	mov	r3, r4
 8008b46:	6864      	ldr	r4, [r4, #4]
 8008b48:	e7ae      	b.n	8008aa8 <_malloc_r+0x34>
 8008b4a:	463c      	mov	r4, r7
 8008b4c:	687f      	ldr	r7, [r7, #4]
 8008b4e:	e7b6      	b.n	8008abe <_malloc_r+0x4a>
 8008b50:	461a      	mov	r2, r3
 8008b52:	685b      	ldr	r3, [r3, #4]
 8008b54:	42a3      	cmp	r3, r4
 8008b56:	d1fb      	bne.n	8008b50 <_malloc_r+0xdc>
 8008b58:	2300      	movs	r3, #0
 8008b5a:	6053      	str	r3, [r2, #4]
 8008b5c:	e7de      	b.n	8008b1c <_malloc_r+0xa8>
 8008b5e:	230c      	movs	r3, #12
 8008b60:	6033      	str	r3, [r6, #0]
 8008b62:	4630      	mov	r0, r6
 8008b64:	f000 f80c 	bl	8008b80 <__malloc_unlock>
 8008b68:	e794      	b.n	8008a94 <_malloc_r+0x20>
 8008b6a:	6005      	str	r5, [r0, #0]
 8008b6c:	e7d6      	b.n	8008b1c <_malloc_r+0xa8>
 8008b6e:	bf00      	nop
 8008b70:	20004e34 	.word	0x20004e34

08008b74 <__malloc_lock>:
 8008b74:	4801      	ldr	r0, [pc, #4]	@ (8008b7c <__malloc_lock+0x8>)
 8008b76:	f7ff bf00 	b.w	800897a <__retarget_lock_acquire_recursive>
 8008b7a:	bf00      	nop
 8008b7c:	20004e2c 	.word	0x20004e2c

08008b80 <__malloc_unlock>:
 8008b80:	4801      	ldr	r0, [pc, #4]	@ (8008b88 <__malloc_unlock+0x8>)
 8008b82:	f7ff befb 	b.w	800897c <__retarget_lock_release_recursive>
 8008b86:	bf00      	nop
 8008b88:	20004e2c 	.word	0x20004e2c

08008b8c <__sfputc_r>:
 8008b8c:	6893      	ldr	r3, [r2, #8]
 8008b8e:	3b01      	subs	r3, #1
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	b410      	push	{r4}
 8008b94:	6093      	str	r3, [r2, #8]
 8008b96:	da08      	bge.n	8008baa <__sfputc_r+0x1e>
 8008b98:	6994      	ldr	r4, [r2, #24]
 8008b9a:	42a3      	cmp	r3, r4
 8008b9c:	db01      	blt.n	8008ba2 <__sfputc_r+0x16>
 8008b9e:	290a      	cmp	r1, #10
 8008ba0:	d103      	bne.n	8008baa <__sfputc_r+0x1e>
 8008ba2:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008ba6:	f7ff bd7c 	b.w	80086a2 <__swbuf_r>
 8008baa:	6813      	ldr	r3, [r2, #0]
 8008bac:	1c58      	adds	r0, r3, #1
 8008bae:	6010      	str	r0, [r2, #0]
 8008bb0:	7019      	strb	r1, [r3, #0]
 8008bb2:	4608      	mov	r0, r1
 8008bb4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008bb8:	4770      	bx	lr

08008bba <__sfputs_r>:
 8008bba:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008bbc:	4606      	mov	r6, r0
 8008bbe:	460f      	mov	r7, r1
 8008bc0:	4614      	mov	r4, r2
 8008bc2:	18d5      	adds	r5, r2, r3
 8008bc4:	42ac      	cmp	r4, r5
 8008bc6:	d101      	bne.n	8008bcc <__sfputs_r+0x12>
 8008bc8:	2000      	movs	r0, #0
 8008bca:	e007      	b.n	8008bdc <__sfputs_r+0x22>
 8008bcc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008bd0:	463a      	mov	r2, r7
 8008bd2:	4630      	mov	r0, r6
 8008bd4:	f7ff ffda 	bl	8008b8c <__sfputc_r>
 8008bd8:	1c43      	adds	r3, r0, #1
 8008bda:	d1f3      	bne.n	8008bc4 <__sfputs_r+0xa>
 8008bdc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08008be0 <_vfiprintf_r>:
 8008be0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008be4:	460d      	mov	r5, r1
 8008be6:	b09d      	sub	sp, #116	@ 0x74
 8008be8:	4614      	mov	r4, r2
 8008bea:	4698      	mov	r8, r3
 8008bec:	4606      	mov	r6, r0
 8008bee:	b118      	cbz	r0, 8008bf8 <_vfiprintf_r+0x18>
 8008bf0:	6a03      	ldr	r3, [r0, #32]
 8008bf2:	b90b      	cbnz	r3, 8008bf8 <_vfiprintf_r+0x18>
 8008bf4:	f7ff fc6c 	bl	80084d0 <__sinit>
 8008bf8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008bfa:	07d9      	lsls	r1, r3, #31
 8008bfc:	d405      	bmi.n	8008c0a <_vfiprintf_r+0x2a>
 8008bfe:	89ab      	ldrh	r3, [r5, #12]
 8008c00:	059a      	lsls	r2, r3, #22
 8008c02:	d402      	bmi.n	8008c0a <_vfiprintf_r+0x2a>
 8008c04:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c06:	f7ff feb8 	bl	800897a <__retarget_lock_acquire_recursive>
 8008c0a:	89ab      	ldrh	r3, [r5, #12]
 8008c0c:	071b      	lsls	r3, r3, #28
 8008c0e:	d501      	bpl.n	8008c14 <_vfiprintf_r+0x34>
 8008c10:	692b      	ldr	r3, [r5, #16]
 8008c12:	b99b      	cbnz	r3, 8008c3c <_vfiprintf_r+0x5c>
 8008c14:	4629      	mov	r1, r5
 8008c16:	4630      	mov	r0, r6
 8008c18:	f7ff fd82 	bl	8008720 <__swsetup_r>
 8008c1c:	b170      	cbz	r0, 8008c3c <_vfiprintf_r+0x5c>
 8008c1e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c20:	07dc      	lsls	r4, r3, #31
 8008c22:	d504      	bpl.n	8008c2e <_vfiprintf_r+0x4e>
 8008c24:	f04f 30ff 	mov.w	r0, #4294967295
 8008c28:	b01d      	add	sp, #116	@ 0x74
 8008c2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2e:	89ab      	ldrh	r3, [r5, #12]
 8008c30:	0598      	lsls	r0, r3, #22
 8008c32:	d4f7      	bmi.n	8008c24 <_vfiprintf_r+0x44>
 8008c34:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c36:	f7ff fea1 	bl	800897c <__retarget_lock_release_recursive>
 8008c3a:	e7f3      	b.n	8008c24 <_vfiprintf_r+0x44>
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c40:	2320      	movs	r3, #32
 8008c42:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008c46:	f8cd 800c 	str.w	r8, [sp, #12]
 8008c4a:	2330      	movs	r3, #48	@ 0x30
 8008c4c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008dfc <_vfiprintf_r+0x21c>
 8008c50:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008c54:	f04f 0901 	mov.w	r9, #1
 8008c58:	4623      	mov	r3, r4
 8008c5a:	469a      	mov	sl, r3
 8008c5c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008c60:	b10a      	cbz	r2, 8008c66 <_vfiprintf_r+0x86>
 8008c62:	2a25      	cmp	r2, #37	@ 0x25
 8008c64:	d1f9      	bne.n	8008c5a <_vfiprintf_r+0x7a>
 8008c66:	ebba 0b04 	subs.w	fp, sl, r4
 8008c6a:	d00b      	beq.n	8008c84 <_vfiprintf_r+0xa4>
 8008c6c:	465b      	mov	r3, fp
 8008c6e:	4622      	mov	r2, r4
 8008c70:	4629      	mov	r1, r5
 8008c72:	4630      	mov	r0, r6
 8008c74:	f7ff ffa1 	bl	8008bba <__sfputs_r>
 8008c78:	3001      	adds	r0, #1
 8008c7a:	f000 80a7 	beq.w	8008dcc <_vfiprintf_r+0x1ec>
 8008c7e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008c80:	445a      	add	r2, fp
 8008c82:	9209      	str	r2, [sp, #36]	@ 0x24
 8008c84:	f89a 3000 	ldrb.w	r3, [sl]
 8008c88:	2b00      	cmp	r3, #0
 8008c8a:	f000 809f 	beq.w	8008dcc <_vfiprintf_r+0x1ec>
 8008c8e:	2300      	movs	r3, #0
 8008c90:	f04f 32ff 	mov.w	r2, #4294967295
 8008c94:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008c98:	f10a 0a01 	add.w	sl, sl, #1
 8008c9c:	9304      	str	r3, [sp, #16]
 8008c9e:	9307      	str	r3, [sp, #28]
 8008ca0:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008ca4:	931a      	str	r3, [sp, #104]	@ 0x68
 8008ca6:	4654      	mov	r4, sl
 8008ca8:	2205      	movs	r2, #5
 8008caa:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008cae:	4853      	ldr	r0, [pc, #332]	@ (8008dfc <_vfiprintf_r+0x21c>)
 8008cb0:	f7f7 fa8e 	bl	80001d0 <memchr>
 8008cb4:	9a04      	ldr	r2, [sp, #16]
 8008cb6:	b9d8      	cbnz	r0, 8008cf0 <_vfiprintf_r+0x110>
 8008cb8:	06d1      	lsls	r1, r2, #27
 8008cba:	bf44      	itt	mi
 8008cbc:	2320      	movmi	r3, #32
 8008cbe:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008cc2:	0713      	lsls	r3, r2, #28
 8008cc4:	bf44      	itt	mi
 8008cc6:	232b      	movmi	r3, #43	@ 0x2b
 8008cc8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008ccc:	f89a 3000 	ldrb.w	r3, [sl]
 8008cd0:	2b2a      	cmp	r3, #42	@ 0x2a
 8008cd2:	d015      	beq.n	8008d00 <_vfiprintf_r+0x120>
 8008cd4:	9a07      	ldr	r2, [sp, #28]
 8008cd6:	4654      	mov	r4, sl
 8008cd8:	2000      	movs	r0, #0
 8008cda:	f04f 0c0a 	mov.w	ip, #10
 8008cde:	4621      	mov	r1, r4
 8008ce0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008ce4:	3b30      	subs	r3, #48	@ 0x30
 8008ce6:	2b09      	cmp	r3, #9
 8008ce8:	d94b      	bls.n	8008d82 <_vfiprintf_r+0x1a2>
 8008cea:	b1b0      	cbz	r0, 8008d1a <_vfiprintf_r+0x13a>
 8008cec:	9207      	str	r2, [sp, #28]
 8008cee:	e014      	b.n	8008d1a <_vfiprintf_r+0x13a>
 8008cf0:	eba0 0308 	sub.w	r3, r0, r8
 8008cf4:	fa09 f303 	lsl.w	r3, r9, r3
 8008cf8:	4313      	orrs	r3, r2
 8008cfa:	9304      	str	r3, [sp, #16]
 8008cfc:	46a2      	mov	sl, r4
 8008cfe:	e7d2      	b.n	8008ca6 <_vfiprintf_r+0xc6>
 8008d00:	9b03      	ldr	r3, [sp, #12]
 8008d02:	1d19      	adds	r1, r3, #4
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	9103      	str	r1, [sp, #12]
 8008d08:	2b00      	cmp	r3, #0
 8008d0a:	bfbb      	ittet	lt
 8008d0c:	425b      	neglt	r3, r3
 8008d0e:	f042 0202 	orrlt.w	r2, r2, #2
 8008d12:	9307      	strge	r3, [sp, #28]
 8008d14:	9307      	strlt	r3, [sp, #28]
 8008d16:	bfb8      	it	lt
 8008d18:	9204      	strlt	r2, [sp, #16]
 8008d1a:	7823      	ldrb	r3, [r4, #0]
 8008d1c:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d1e:	d10a      	bne.n	8008d36 <_vfiprintf_r+0x156>
 8008d20:	7863      	ldrb	r3, [r4, #1]
 8008d22:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d24:	d132      	bne.n	8008d8c <_vfiprintf_r+0x1ac>
 8008d26:	9b03      	ldr	r3, [sp, #12]
 8008d28:	1d1a      	adds	r2, r3, #4
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	9203      	str	r2, [sp, #12]
 8008d2e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d32:	3402      	adds	r4, #2
 8008d34:	9305      	str	r3, [sp, #20]
 8008d36:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e0c <_vfiprintf_r+0x22c>
 8008d3a:	7821      	ldrb	r1, [r4, #0]
 8008d3c:	2203      	movs	r2, #3
 8008d3e:	4650      	mov	r0, sl
 8008d40:	f7f7 fa46 	bl	80001d0 <memchr>
 8008d44:	b138      	cbz	r0, 8008d56 <_vfiprintf_r+0x176>
 8008d46:	9b04      	ldr	r3, [sp, #16]
 8008d48:	eba0 000a 	sub.w	r0, r0, sl
 8008d4c:	2240      	movs	r2, #64	@ 0x40
 8008d4e:	4082      	lsls	r2, r0
 8008d50:	4313      	orrs	r3, r2
 8008d52:	3401      	adds	r4, #1
 8008d54:	9304      	str	r3, [sp, #16]
 8008d56:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d5a:	4829      	ldr	r0, [pc, #164]	@ (8008e00 <_vfiprintf_r+0x220>)
 8008d5c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008d60:	2206      	movs	r2, #6
 8008d62:	f7f7 fa35 	bl	80001d0 <memchr>
 8008d66:	2800      	cmp	r0, #0
 8008d68:	d03f      	beq.n	8008dea <_vfiprintf_r+0x20a>
 8008d6a:	4b26      	ldr	r3, [pc, #152]	@ (8008e04 <_vfiprintf_r+0x224>)
 8008d6c:	bb1b      	cbnz	r3, 8008db6 <_vfiprintf_r+0x1d6>
 8008d6e:	9b03      	ldr	r3, [sp, #12]
 8008d70:	3307      	adds	r3, #7
 8008d72:	f023 0307 	bic.w	r3, r3, #7
 8008d76:	3308      	adds	r3, #8
 8008d78:	9303      	str	r3, [sp, #12]
 8008d7a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008d7c:	443b      	add	r3, r7
 8008d7e:	9309      	str	r3, [sp, #36]	@ 0x24
 8008d80:	e76a      	b.n	8008c58 <_vfiprintf_r+0x78>
 8008d82:	fb0c 3202 	mla	r2, ip, r2, r3
 8008d86:	460c      	mov	r4, r1
 8008d88:	2001      	movs	r0, #1
 8008d8a:	e7a8      	b.n	8008cde <_vfiprintf_r+0xfe>
 8008d8c:	2300      	movs	r3, #0
 8008d8e:	3401      	adds	r4, #1
 8008d90:	9305      	str	r3, [sp, #20]
 8008d92:	4619      	mov	r1, r3
 8008d94:	f04f 0c0a 	mov.w	ip, #10
 8008d98:	4620      	mov	r0, r4
 8008d9a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008d9e:	3a30      	subs	r2, #48	@ 0x30
 8008da0:	2a09      	cmp	r2, #9
 8008da2:	d903      	bls.n	8008dac <_vfiprintf_r+0x1cc>
 8008da4:	2b00      	cmp	r3, #0
 8008da6:	d0c6      	beq.n	8008d36 <_vfiprintf_r+0x156>
 8008da8:	9105      	str	r1, [sp, #20]
 8008daa:	e7c4      	b.n	8008d36 <_vfiprintf_r+0x156>
 8008dac:	fb0c 2101 	mla	r1, ip, r1, r2
 8008db0:	4604      	mov	r4, r0
 8008db2:	2301      	movs	r3, #1
 8008db4:	e7f0      	b.n	8008d98 <_vfiprintf_r+0x1b8>
 8008db6:	ab03      	add	r3, sp, #12
 8008db8:	9300      	str	r3, [sp, #0]
 8008dba:	462a      	mov	r2, r5
 8008dbc:	4b12      	ldr	r3, [pc, #72]	@ (8008e08 <_vfiprintf_r+0x228>)
 8008dbe:	a904      	add	r1, sp, #16
 8008dc0:	4630      	mov	r0, r6
 8008dc2:	f3af 8000 	nop.w
 8008dc6:	4607      	mov	r7, r0
 8008dc8:	1c78      	adds	r0, r7, #1
 8008dca:	d1d6      	bne.n	8008d7a <_vfiprintf_r+0x19a>
 8008dcc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008dce:	07d9      	lsls	r1, r3, #31
 8008dd0:	d405      	bmi.n	8008dde <_vfiprintf_r+0x1fe>
 8008dd2:	89ab      	ldrh	r3, [r5, #12]
 8008dd4:	059a      	lsls	r2, r3, #22
 8008dd6:	d402      	bmi.n	8008dde <_vfiprintf_r+0x1fe>
 8008dd8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008dda:	f7ff fdcf 	bl	800897c <__retarget_lock_release_recursive>
 8008dde:	89ab      	ldrh	r3, [r5, #12]
 8008de0:	065b      	lsls	r3, r3, #25
 8008de2:	f53f af1f 	bmi.w	8008c24 <_vfiprintf_r+0x44>
 8008de6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008de8:	e71e      	b.n	8008c28 <_vfiprintf_r+0x48>
 8008dea:	ab03      	add	r3, sp, #12
 8008dec:	9300      	str	r3, [sp, #0]
 8008dee:	462a      	mov	r2, r5
 8008df0:	4b05      	ldr	r3, [pc, #20]	@ (8008e08 <_vfiprintf_r+0x228>)
 8008df2:	a904      	add	r1, sp, #16
 8008df4:	4630      	mov	r0, r6
 8008df6:	f000 f879 	bl	8008eec <_printf_i>
 8008dfa:	e7e4      	b.n	8008dc6 <_vfiprintf_r+0x1e6>
 8008dfc:	08009f80 	.word	0x08009f80
 8008e00:	08009f8a 	.word	0x08009f8a
 8008e04:	00000000 	.word	0x00000000
 8008e08:	08008bbb 	.word	0x08008bbb
 8008e0c:	08009f86 	.word	0x08009f86

08008e10 <_printf_common>:
 8008e10:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008e14:	4616      	mov	r6, r2
 8008e16:	4698      	mov	r8, r3
 8008e18:	688a      	ldr	r2, [r1, #8]
 8008e1a:	690b      	ldr	r3, [r1, #16]
 8008e1c:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8008e20:	4293      	cmp	r3, r2
 8008e22:	bfb8      	it	lt
 8008e24:	4613      	movlt	r3, r2
 8008e26:	6033      	str	r3, [r6, #0]
 8008e28:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8008e2c:	4607      	mov	r7, r0
 8008e2e:	460c      	mov	r4, r1
 8008e30:	b10a      	cbz	r2, 8008e36 <_printf_common+0x26>
 8008e32:	3301      	adds	r3, #1
 8008e34:	6033      	str	r3, [r6, #0]
 8008e36:	6823      	ldr	r3, [r4, #0]
 8008e38:	0699      	lsls	r1, r3, #26
 8008e3a:	bf42      	ittt	mi
 8008e3c:	6833      	ldrmi	r3, [r6, #0]
 8008e3e:	3302      	addmi	r3, #2
 8008e40:	6033      	strmi	r3, [r6, #0]
 8008e42:	6825      	ldr	r5, [r4, #0]
 8008e44:	f015 0506 	ands.w	r5, r5, #6
 8008e48:	d106      	bne.n	8008e58 <_printf_common+0x48>
 8008e4a:	f104 0a19 	add.w	sl, r4, #25
 8008e4e:	68e3      	ldr	r3, [r4, #12]
 8008e50:	6832      	ldr	r2, [r6, #0]
 8008e52:	1a9b      	subs	r3, r3, r2
 8008e54:	42ab      	cmp	r3, r5
 8008e56:	dc26      	bgt.n	8008ea6 <_printf_common+0x96>
 8008e58:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8008e5c:	6822      	ldr	r2, [r4, #0]
 8008e5e:	3b00      	subs	r3, #0
 8008e60:	bf18      	it	ne
 8008e62:	2301      	movne	r3, #1
 8008e64:	0692      	lsls	r2, r2, #26
 8008e66:	d42b      	bmi.n	8008ec0 <_printf_common+0xb0>
 8008e68:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8008e6c:	4641      	mov	r1, r8
 8008e6e:	4638      	mov	r0, r7
 8008e70:	47c8      	blx	r9
 8008e72:	3001      	adds	r0, #1
 8008e74:	d01e      	beq.n	8008eb4 <_printf_common+0xa4>
 8008e76:	6823      	ldr	r3, [r4, #0]
 8008e78:	6922      	ldr	r2, [r4, #16]
 8008e7a:	f003 0306 	and.w	r3, r3, #6
 8008e7e:	2b04      	cmp	r3, #4
 8008e80:	bf02      	ittt	eq
 8008e82:	68e5      	ldreq	r5, [r4, #12]
 8008e84:	6833      	ldreq	r3, [r6, #0]
 8008e86:	1aed      	subeq	r5, r5, r3
 8008e88:	68a3      	ldr	r3, [r4, #8]
 8008e8a:	bf0c      	ite	eq
 8008e8c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8008e90:	2500      	movne	r5, #0
 8008e92:	4293      	cmp	r3, r2
 8008e94:	bfc4      	itt	gt
 8008e96:	1a9b      	subgt	r3, r3, r2
 8008e98:	18ed      	addgt	r5, r5, r3
 8008e9a:	2600      	movs	r6, #0
 8008e9c:	341a      	adds	r4, #26
 8008e9e:	42b5      	cmp	r5, r6
 8008ea0:	d11a      	bne.n	8008ed8 <_printf_common+0xc8>
 8008ea2:	2000      	movs	r0, #0
 8008ea4:	e008      	b.n	8008eb8 <_printf_common+0xa8>
 8008ea6:	2301      	movs	r3, #1
 8008ea8:	4652      	mov	r2, sl
 8008eaa:	4641      	mov	r1, r8
 8008eac:	4638      	mov	r0, r7
 8008eae:	47c8      	blx	r9
 8008eb0:	3001      	adds	r0, #1
 8008eb2:	d103      	bne.n	8008ebc <_printf_common+0xac>
 8008eb4:	f04f 30ff 	mov.w	r0, #4294967295
 8008eb8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008ebc:	3501      	adds	r5, #1
 8008ebe:	e7c6      	b.n	8008e4e <_printf_common+0x3e>
 8008ec0:	18e1      	adds	r1, r4, r3
 8008ec2:	1c5a      	adds	r2, r3, #1
 8008ec4:	2030      	movs	r0, #48	@ 0x30
 8008ec6:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8008eca:	4422      	add	r2, r4
 8008ecc:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8008ed0:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8008ed4:	3302      	adds	r3, #2
 8008ed6:	e7c7      	b.n	8008e68 <_printf_common+0x58>
 8008ed8:	2301      	movs	r3, #1
 8008eda:	4622      	mov	r2, r4
 8008edc:	4641      	mov	r1, r8
 8008ede:	4638      	mov	r0, r7
 8008ee0:	47c8      	blx	r9
 8008ee2:	3001      	adds	r0, #1
 8008ee4:	d0e6      	beq.n	8008eb4 <_printf_common+0xa4>
 8008ee6:	3601      	adds	r6, #1
 8008ee8:	e7d9      	b.n	8008e9e <_printf_common+0x8e>
	...

08008eec <_printf_i>:
 8008eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008ef0:	7e0f      	ldrb	r7, [r1, #24]
 8008ef2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8008ef4:	2f78      	cmp	r7, #120	@ 0x78
 8008ef6:	4691      	mov	r9, r2
 8008ef8:	4680      	mov	r8, r0
 8008efa:	460c      	mov	r4, r1
 8008efc:	469a      	mov	sl, r3
 8008efe:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8008f02:	d807      	bhi.n	8008f14 <_printf_i+0x28>
 8008f04:	2f62      	cmp	r7, #98	@ 0x62
 8008f06:	d80a      	bhi.n	8008f1e <_printf_i+0x32>
 8008f08:	2f00      	cmp	r7, #0
 8008f0a:	f000 80d1 	beq.w	80090b0 <_printf_i+0x1c4>
 8008f0e:	2f58      	cmp	r7, #88	@ 0x58
 8008f10:	f000 80b8 	beq.w	8009084 <_printf_i+0x198>
 8008f14:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f18:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8008f1c:	e03a      	b.n	8008f94 <_printf_i+0xa8>
 8008f1e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8008f22:	2b15      	cmp	r3, #21
 8008f24:	d8f6      	bhi.n	8008f14 <_printf_i+0x28>
 8008f26:	a101      	add	r1, pc, #4	@ (adr r1, 8008f2c <_printf_i+0x40>)
 8008f28:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008f2c:	08008f85 	.word	0x08008f85
 8008f30:	08008f99 	.word	0x08008f99
 8008f34:	08008f15 	.word	0x08008f15
 8008f38:	08008f15 	.word	0x08008f15
 8008f3c:	08008f15 	.word	0x08008f15
 8008f40:	08008f15 	.word	0x08008f15
 8008f44:	08008f99 	.word	0x08008f99
 8008f48:	08008f15 	.word	0x08008f15
 8008f4c:	08008f15 	.word	0x08008f15
 8008f50:	08008f15 	.word	0x08008f15
 8008f54:	08008f15 	.word	0x08008f15
 8008f58:	08009097 	.word	0x08009097
 8008f5c:	08008fc3 	.word	0x08008fc3
 8008f60:	08009051 	.word	0x08009051
 8008f64:	08008f15 	.word	0x08008f15
 8008f68:	08008f15 	.word	0x08008f15
 8008f6c:	080090b9 	.word	0x080090b9
 8008f70:	08008f15 	.word	0x08008f15
 8008f74:	08008fc3 	.word	0x08008fc3
 8008f78:	08008f15 	.word	0x08008f15
 8008f7c:	08008f15 	.word	0x08008f15
 8008f80:	08009059 	.word	0x08009059
 8008f84:	6833      	ldr	r3, [r6, #0]
 8008f86:	1d1a      	adds	r2, r3, #4
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	6032      	str	r2, [r6, #0]
 8008f8c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8008f90:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8008f94:	2301      	movs	r3, #1
 8008f96:	e09c      	b.n	80090d2 <_printf_i+0x1e6>
 8008f98:	6833      	ldr	r3, [r6, #0]
 8008f9a:	6820      	ldr	r0, [r4, #0]
 8008f9c:	1d19      	adds	r1, r3, #4
 8008f9e:	6031      	str	r1, [r6, #0]
 8008fa0:	0606      	lsls	r6, r0, #24
 8008fa2:	d501      	bpl.n	8008fa8 <_printf_i+0xbc>
 8008fa4:	681d      	ldr	r5, [r3, #0]
 8008fa6:	e003      	b.n	8008fb0 <_printf_i+0xc4>
 8008fa8:	0645      	lsls	r5, r0, #25
 8008faa:	d5fb      	bpl.n	8008fa4 <_printf_i+0xb8>
 8008fac:	f9b3 5000 	ldrsh.w	r5, [r3]
 8008fb0:	2d00      	cmp	r5, #0
 8008fb2:	da03      	bge.n	8008fbc <_printf_i+0xd0>
 8008fb4:	232d      	movs	r3, #45	@ 0x2d
 8008fb6:	426d      	negs	r5, r5
 8008fb8:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8008fbc:	4858      	ldr	r0, [pc, #352]	@ (8009120 <_printf_i+0x234>)
 8008fbe:	230a      	movs	r3, #10
 8008fc0:	e011      	b.n	8008fe6 <_printf_i+0xfa>
 8008fc2:	6821      	ldr	r1, [r4, #0]
 8008fc4:	6833      	ldr	r3, [r6, #0]
 8008fc6:	0608      	lsls	r0, r1, #24
 8008fc8:	f853 5b04 	ldr.w	r5, [r3], #4
 8008fcc:	d402      	bmi.n	8008fd4 <_printf_i+0xe8>
 8008fce:	0649      	lsls	r1, r1, #25
 8008fd0:	bf48      	it	mi
 8008fd2:	b2ad      	uxthmi	r5, r5
 8008fd4:	2f6f      	cmp	r7, #111	@ 0x6f
 8008fd6:	4852      	ldr	r0, [pc, #328]	@ (8009120 <_printf_i+0x234>)
 8008fd8:	6033      	str	r3, [r6, #0]
 8008fda:	bf14      	ite	ne
 8008fdc:	230a      	movne	r3, #10
 8008fde:	2308      	moveq	r3, #8
 8008fe0:	2100      	movs	r1, #0
 8008fe2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8008fe6:	6866      	ldr	r6, [r4, #4]
 8008fe8:	60a6      	str	r6, [r4, #8]
 8008fea:	2e00      	cmp	r6, #0
 8008fec:	db05      	blt.n	8008ffa <_printf_i+0x10e>
 8008fee:	6821      	ldr	r1, [r4, #0]
 8008ff0:	432e      	orrs	r6, r5
 8008ff2:	f021 0104 	bic.w	r1, r1, #4
 8008ff6:	6021      	str	r1, [r4, #0]
 8008ff8:	d04b      	beq.n	8009092 <_printf_i+0x1a6>
 8008ffa:	4616      	mov	r6, r2
 8008ffc:	fbb5 f1f3 	udiv	r1, r5, r3
 8009000:	fb03 5711 	mls	r7, r3, r1, r5
 8009004:	5dc7      	ldrb	r7, [r0, r7]
 8009006:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800900a:	462f      	mov	r7, r5
 800900c:	42bb      	cmp	r3, r7
 800900e:	460d      	mov	r5, r1
 8009010:	d9f4      	bls.n	8008ffc <_printf_i+0x110>
 8009012:	2b08      	cmp	r3, #8
 8009014:	d10b      	bne.n	800902e <_printf_i+0x142>
 8009016:	6823      	ldr	r3, [r4, #0]
 8009018:	07df      	lsls	r7, r3, #31
 800901a:	d508      	bpl.n	800902e <_printf_i+0x142>
 800901c:	6923      	ldr	r3, [r4, #16]
 800901e:	6861      	ldr	r1, [r4, #4]
 8009020:	4299      	cmp	r1, r3
 8009022:	bfde      	ittt	le
 8009024:	2330      	movle	r3, #48	@ 0x30
 8009026:	f806 3c01 	strble.w	r3, [r6, #-1]
 800902a:	f106 36ff 	addle.w	r6, r6, #4294967295
 800902e:	1b92      	subs	r2, r2, r6
 8009030:	6122      	str	r2, [r4, #16]
 8009032:	f8cd a000 	str.w	sl, [sp]
 8009036:	464b      	mov	r3, r9
 8009038:	aa03      	add	r2, sp, #12
 800903a:	4621      	mov	r1, r4
 800903c:	4640      	mov	r0, r8
 800903e:	f7ff fee7 	bl	8008e10 <_printf_common>
 8009042:	3001      	adds	r0, #1
 8009044:	d14a      	bne.n	80090dc <_printf_i+0x1f0>
 8009046:	f04f 30ff 	mov.w	r0, #4294967295
 800904a:	b004      	add	sp, #16
 800904c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009050:	6823      	ldr	r3, [r4, #0]
 8009052:	f043 0320 	orr.w	r3, r3, #32
 8009056:	6023      	str	r3, [r4, #0]
 8009058:	4832      	ldr	r0, [pc, #200]	@ (8009124 <_printf_i+0x238>)
 800905a:	2778      	movs	r7, #120	@ 0x78
 800905c:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8009060:	6823      	ldr	r3, [r4, #0]
 8009062:	6831      	ldr	r1, [r6, #0]
 8009064:	061f      	lsls	r7, r3, #24
 8009066:	f851 5b04 	ldr.w	r5, [r1], #4
 800906a:	d402      	bmi.n	8009072 <_printf_i+0x186>
 800906c:	065f      	lsls	r7, r3, #25
 800906e:	bf48      	it	mi
 8009070:	b2ad      	uxthmi	r5, r5
 8009072:	6031      	str	r1, [r6, #0]
 8009074:	07d9      	lsls	r1, r3, #31
 8009076:	bf44      	itt	mi
 8009078:	f043 0320 	orrmi.w	r3, r3, #32
 800907c:	6023      	strmi	r3, [r4, #0]
 800907e:	b11d      	cbz	r5, 8009088 <_printf_i+0x19c>
 8009080:	2310      	movs	r3, #16
 8009082:	e7ad      	b.n	8008fe0 <_printf_i+0xf4>
 8009084:	4826      	ldr	r0, [pc, #152]	@ (8009120 <_printf_i+0x234>)
 8009086:	e7e9      	b.n	800905c <_printf_i+0x170>
 8009088:	6823      	ldr	r3, [r4, #0]
 800908a:	f023 0320 	bic.w	r3, r3, #32
 800908e:	6023      	str	r3, [r4, #0]
 8009090:	e7f6      	b.n	8009080 <_printf_i+0x194>
 8009092:	4616      	mov	r6, r2
 8009094:	e7bd      	b.n	8009012 <_printf_i+0x126>
 8009096:	6833      	ldr	r3, [r6, #0]
 8009098:	6825      	ldr	r5, [r4, #0]
 800909a:	6961      	ldr	r1, [r4, #20]
 800909c:	1d18      	adds	r0, r3, #4
 800909e:	6030      	str	r0, [r6, #0]
 80090a0:	062e      	lsls	r6, r5, #24
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	d501      	bpl.n	80090aa <_printf_i+0x1be>
 80090a6:	6019      	str	r1, [r3, #0]
 80090a8:	e002      	b.n	80090b0 <_printf_i+0x1c4>
 80090aa:	0668      	lsls	r0, r5, #25
 80090ac:	d5fb      	bpl.n	80090a6 <_printf_i+0x1ba>
 80090ae:	8019      	strh	r1, [r3, #0]
 80090b0:	2300      	movs	r3, #0
 80090b2:	6123      	str	r3, [r4, #16]
 80090b4:	4616      	mov	r6, r2
 80090b6:	e7bc      	b.n	8009032 <_printf_i+0x146>
 80090b8:	6833      	ldr	r3, [r6, #0]
 80090ba:	1d1a      	adds	r2, r3, #4
 80090bc:	6032      	str	r2, [r6, #0]
 80090be:	681e      	ldr	r6, [r3, #0]
 80090c0:	6862      	ldr	r2, [r4, #4]
 80090c2:	2100      	movs	r1, #0
 80090c4:	4630      	mov	r0, r6
 80090c6:	f7f7 f883 	bl	80001d0 <memchr>
 80090ca:	b108      	cbz	r0, 80090d0 <_printf_i+0x1e4>
 80090cc:	1b80      	subs	r0, r0, r6
 80090ce:	6060      	str	r0, [r4, #4]
 80090d0:	6863      	ldr	r3, [r4, #4]
 80090d2:	6123      	str	r3, [r4, #16]
 80090d4:	2300      	movs	r3, #0
 80090d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80090da:	e7aa      	b.n	8009032 <_printf_i+0x146>
 80090dc:	6923      	ldr	r3, [r4, #16]
 80090de:	4632      	mov	r2, r6
 80090e0:	4649      	mov	r1, r9
 80090e2:	4640      	mov	r0, r8
 80090e4:	47d0      	blx	sl
 80090e6:	3001      	adds	r0, #1
 80090e8:	d0ad      	beq.n	8009046 <_printf_i+0x15a>
 80090ea:	6823      	ldr	r3, [r4, #0]
 80090ec:	079b      	lsls	r3, r3, #30
 80090ee:	d413      	bmi.n	8009118 <_printf_i+0x22c>
 80090f0:	68e0      	ldr	r0, [r4, #12]
 80090f2:	9b03      	ldr	r3, [sp, #12]
 80090f4:	4298      	cmp	r0, r3
 80090f6:	bfb8      	it	lt
 80090f8:	4618      	movlt	r0, r3
 80090fa:	e7a6      	b.n	800904a <_printf_i+0x15e>
 80090fc:	2301      	movs	r3, #1
 80090fe:	4632      	mov	r2, r6
 8009100:	4649      	mov	r1, r9
 8009102:	4640      	mov	r0, r8
 8009104:	47d0      	blx	sl
 8009106:	3001      	adds	r0, #1
 8009108:	d09d      	beq.n	8009046 <_printf_i+0x15a>
 800910a:	3501      	adds	r5, #1
 800910c:	68e3      	ldr	r3, [r4, #12]
 800910e:	9903      	ldr	r1, [sp, #12]
 8009110:	1a5b      	subs	r3, r3, r1
 8009112:	42ab      	cmp	r3, r5
 8009114:	dcf2      	bgt.n	80090fc <_printf_i+0x210>
 8009116:	e7eb      	b.n	80090f0 <_printf_i+0x204>
 8009118:	2500      	movs	r5, #0
 800911a:	f104 0619 	add.w	r6, r4, #25
 800911e:	e7f5      	b.n	800910c <_printf_i+0x220>
 8009120:	08009f91 	.word	0x08009f91
 8009124:	08009fa2 	.word	0x08009fa2

08009128 <__sflush_r>:
 8009128:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800912c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009130:	0716      	lsls	r6, r2, #28
 8009132:	4605      	mov	r5, r0
 8009134:	460c      	mov	r4, r1
 8009136:	d454      	bmi.n	80091e2 <__sflush_r+0xba>
 8009138:	684b      	ldr	r3, [r1, #4]
 800913a:	2b00      	cmp	r3, #0
 800913c:	dc02      	bgt.n	8009144 <__sflush_r+0x1c>
 800913e:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8009140:	2b00      	cmp	r3, #0
 8009142:	dd48      	ble.n	80091d6 <__sflush_r+0xae>
 8009144:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009146:	2e00      	cmp	r6, #0
 8009148:	d045      	beq.n	80091d6 <__sflush_r+0xae>
 800914a:	2300      	movs	r3, #0
 800914c:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8009150:	682f      	ldr	r7, [r5, #0]
 8009152:	6a21      	ldr	r1, [r4, #32]
 8009154:	602b      	str	r3, [r5, #0]
 8009156:	d030      	beq.n	80091ba <__sflush_r+0x92>
 8009158:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800915a:	89a3      	ldrh	r3, [r4, #12]
 800915c:	0759      	lsls	r1, r3, #29
 800915e:	d505      	bpl.n	800916c <__sflush_r+0x44>
 8009160:	6863      	ldr	r3, [r4, #4]
 8009162:	1ad2      	subs	r2, r2, r3
 8009164:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8009166:	b10b      	cbz	r3, 800916c <__sflush_r+0x44>
 8009168:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800916a:	1ad2      	subs	r2, r2, r3
 800916c:	2300      	movs	r3, #0
 800916e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8009170:	6a21      	ldr	r1, [r4, #32]
 8009172:	4628      	mov	r0, r5
 8009174:	47b0      	blx	r6
 8009176:	1c43      	adds	r3, r0, #1
 8009178:	89a3      	ldrh	r3, [r4, #12]
 800917a:	d106      	bne.n	800918a <__sflush_r+0x62>
 800917c:	6829      	ldr	r1, [r5, #0]
 800917e:	291d      	cmp	r1, #29
 8009180:	d82b      	bhi.n	80091da <__sflush_r+0xb2>
 8009182:	4a2a      	ldr	r2, [pc, #168]	@ (800922c <__sflush_r+0x104>)
 8009184:	40ca      	lsrs	r2, r1
 8009186:	07d6      	lsls	r6, r2, #31
 8009188:	d527      	bpl.n	80091da <__sflush_r+0xb2>
 800918a:	2200      	movs	r2, #0
 800918c:	6062      	str	r2, [r4, #4]
 800918e:	04d9      	lsls	r1, r3, #19
 8009190:	6922      	ldr	r2, [r4, #16]
 8009192:	6022      	str	r2, [r4, #0]
 8009194:	d504      	bpl.n	80091a0 <__sflush_r+0x78>
 8009196:	1c42      	adds	r2, r0, #1
 8009198:	d101      	bne.n	800919e <__sflush_r+0x76>
 800919a:	682b      	ldr	r3, [r5, #0]
 800919c:	b903      	cbnz	r3, 80091a0 <__sflush_r+0x78>
 800919e:	6560      	str	r0, [r4, #84]	@ 0x54
 80091a0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80091a2:	602f      	str	r7, [r5, #0]
 80091a4:	b1b9      	cbz	r1, 80091d6 <__sflush_r+0xae>
 80091a6:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80091aa:	4299      	cmp	r1, r3
 80091ac:	d002      	beq.n	80091b4 <__sflush_r+0x8c>
 80091ae:	4628      	mov	r0, r5
 80091b0:	f7ff fbf4 	bl	800899c <_free_r>
 80091b4:	2300      	movs	r3, #0
 80091b6:	6363      	str	r3, [r4, #52]	@ 0x34
 80091b8:	e00d      	b.n	80091d6 <__sflush_r+0xae>
 80091ba:	2301      	movs	r3, #1
 80091bc:	4628      	mov	r0, r5
 80091be:	47b0      	blx	r6
 80091c0:	4602      	mov	r2, r0
 80091c2:	1c50      	adds	r0, r2, #1
 80091c4:	d1c9      	bne.n	800915a <__sflush_r+0x32>
 80091c6:	682b      	ldr	r3, [r5, #0]
 80091c8:	2b00      	cmp	r3, #0
 80091ca:	d0c6      	beq.n	800915a <__sflush_r+0x32>
 80091cc:	2b1d      	cmp	r3, #29
 80091ce:	d001      	beq.n	80091d4 <__sflush_r+0xac>
 80091d0:	2b16      	cmp	r3, #22
 80091d2:	d11e      	bne.n	8009212 <__sflush_r+0xea>
 80091d4:	602f      	str	r7, [r5, #0]
 80091d6:	2000      	movs	r0, #0
 80091d8:	e022      	b.n	8009220 <__sflush_r+0xf8>
 80091da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80091de:	b21b      	sxth	r3, r3
 80091e0:	e01b      	b.n	800921a <__sflush_r+0xf2>
 80091e2:	690f      	ldr	r7, [r1, #16]
 80091e4:	2f00      	cmp	r7, #0
 80091e6:	d0f6      	beq.n	80091d6 <__sflush_r+0xae>
 80091e8:	0793      	lsls	r3, r2, #30
 80091ea:	680e      	ldr	r6, [r1, #0]
 80091ec:	bf08      	it	eq
 80091ee:	694b      	ldreq	r3, [r1, #20]
 80091f0:	600f      	str	r7, [r1, #0]
 80091f2:	bf18      	it	ne
 80091f4:	2300      	movne	r3, #0
 80091f6:	eba6 0807 	sub.w	r8, r6, r7
 80091fa:	608b      	str	r3, [r1, #8]
 80091fc:	f1b8 0f00 	cmp.w	r8, #0
 8009200:	dde9      	ble.n	80091d6 <__sflush_r+0xae>
 8009202:	6a21      	ldr	r1, [r4, #32]
 8009204:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 8009206:	4643      	mov	r3, r8
 8009208:	463a      	mov	r2, r7
 800920a:	4628      	mov	r0, r5
 800920c:	47b0      	blx	r6
 800920e:	2800      	cmp	r0, #0
 8009210:	dc08      	bgt.n	8009224 <__sflush_r+0xfc>
 8009212:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009216:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800921a:	81a3      	strh	r3, [r4, #12]
 800921c:	f04f 30ff 	mov.w	r0, #4294967295
 8009220:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009224:	4407      	add	r7, r0
 8009226:	eba8 0800 	sub.w	r8, r8, r0
 800922a:	e7e7      	b.n	80091fc <__sflush_r+0xd4>
 800922c:	20400001 	.word	0x20400001

08009230 <_fflush_r>:
 8009230:	b538      	push	{r3, r4, r5, lr}
 8009232:	690b      	ldr	r3, [r1, #16]
 8009234:	4605      	mov	r5, r0
 8009236:	460c      	mov	r4, r1
 8009238:	b913      	cbnz	r3, 8009240 <_fflush_r+0x10>
 800923a:	2500      	movs	r5, #0
 800923c:	4628      	mov	r0, r5
 800923e:	bd38      	pop	{r3, r4, r5, pc}
 8009240:	b118      	cbz	r0, 800924a <_fflush_r+0x1a>
 8009242:	6a03      	ldr	r3, [r0, #32]
 8009244:	b90b      	cbnz	r3, 800924a <_fflush_r+0x1a>
 8009246:	f7ff f943 	bl	80084d0 <__sinit>
 800924a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800924e:	2b00      	cmp	r3, #0
 8009250:	d0f3      	beq.n	800923a <_fflush_r+0xa>
 8009252:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8009254:	07d0      	lsls	r0, r2, #31
 8009256:	d404      	bmi.n	8009262 <_fflush_r+0x32>
 8009258:	0599      	lsls	r1, r3, #22
 800925a:	d402      	bmi.n	8009262 <_fflush_r+0x32>
 800925c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800925e:	f7ff fb8c 	bl	800897a <__retarget_lock_acquire_recursive>
 8009262:	4628      	mov	r0, r5
 8009264:	4621      	mov	r1, r4
 8009266:	f7ff ff5f 	bl	8009128 <__sflush_r>
 800926a:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800926c:	07da      	lsls	r2, r3, #31
 800926e:	4605      	mov	r5, r0
 8009270:	d4e4      	bmi.n	800923c <_fflush_r+0xc>
 8009272:	89a3      	ldrh	r3, [r4, #12]
 8009274:	059b      	lsls	r3, r3, #22
 8009276:	d4e1      	bmi.n	800923c <_fflush_r+0xc>
 8009278:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800927a:	f7ff fb7f 	bl	800897c <__retarget_lock_release_recursive>
 800927e:	e7dd      	b.n	800923c <_fflush_r+0xc>

08009280 <__swhatbuf_r>:
 8009280:	b570      	push	{r4, r5, r6, lr}
 8009282:	460c      	mov	r4, r1
 8009284:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8009288:	2900      	cmp	r1, #0
 800928a:	b096      	sub	sp, #88	@ 0x58
 800928c:	4615      	mov	r5, r2
 800928e:	461e      	mov	r6, r3
 8009290:	da0d      	bge.n	80092ae <__swhatbuf_r+0x2e>
 8009292:	89a3      	ldrh	r3, [r4, #12]
 8009294:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8009298:	f04f 0100 	mov.w	r1, #0
 800929c:	bf14      	ite	ne
 800929e:	2340      	movne	r3, #64	@ 0x40
 80092a0:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 80092a4:	2000      	movs	r0, #0
 80092a6:	6031      	str	r1, [r6, #0]
 80092a8:	602b      	str	r3, [r5, #0]
 80092aa:	b016      	add	sp, #88	@ 0x58
 80092ac:	bd70      	pop	{r4, r5, r6, pc}
 80092ae:	466a      	mov	r2, sp
 80092b0:	f000 f848 	bl	8009344 <_fstat_r>
 80092b4:	2800      	cmp	r0, #0
 80092b6:	dbec      	blt.n	8009292 <__swhatbuf_r+0x12>
 80092b8:	9901      	ldr	r1, [sp, #4]
 80092ba:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 80092be:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 80092c2:	4259      	negs	r1, r3
 80092c4:	4159      	adcs	r1, r3
 80092c6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80092ca:	e7eb      	b.n	80092a4 <__swhatbuf_r+0x24>

080092cc <__smakebuf_r>:
 80092cc:	898b      	ldrh	r3, [r1, #12]
 80092ce:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80092d0:	079d      	lsls	r5, r3, #30
 80092d2:	4606      	mov	r6, r0
 80092d4:	460c      	mov	r4, r1
 80092d6:	d507      	bpl.n	80092e8 <__smakebuf_r+0x1c>
 80092d8:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80092dc:	6023      	str	r3, [r4, #0]
 80092de:	6123      	str	r3, [r4, #16]
 80092e0:	2301      	movs	r3, #1
 80092e2:	6163      	str	r3, [r4, #20]
 80092e4:	b003      	add	sp, #12
 80092e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80092e8:	ab01      	add	r3, sp, #4
 80092ea:	466a      	mov	r2, sp
 80092ec:	f7ff ffc8 	bl	8009280 <__swhatbuf_r>
 80092f0:	9f00      	ldr	r7, [sp, #0]
 80092f2:	4605      	mov	r5, r0
 80092f4:	4639      	mov	r1, r7
 80092f6:	4630      	mov	r0, r6
 80092f8:	f7ff fbbc 	bl	8008a74 <_malloc_r>
 80092fc:	b948      	cbnz	r0, 8009312 <__smakebuf_r+0x46>
 80092fe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8009302:	059a      	lsls	r2, r3, #22
 8009304:	d4ee      	bmi.n	80092e4 <__smakebuf_r+0x18>
 8009306:	f023 0303 	bic.w	r3, r3, #3
 800930a:	f043 0302 	orr.w	r3, r3, #2
 800930e:	81a3      	strh	r3, [r4, #12]
 8009310:	e7e2      	b.n	80092d8 <__smakebuf_r+0xc>
 8009312:	89a3      	ldrh	r3, [r4, #12]
 8009314:	6020      	str	r0, [r4, #0]
 8009316:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800931a:	81a3      	strh	r3, [r4, #12]
 800931c:	9b01      	ldr	r3, [sp, #4]
 800931e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8009322:	b15b      	cbz	r3, 800933c <__smakebuf_r+0x70>
 8009324:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8009328:	4630      	mov	r0, r6
 800932a:	f000 f81d 	bl	8009368 <_isatty_r>
 800932e:	b128      	cbz	r0, 800933c <__smakebuf_r+0x70>
 8009330:	89a3      	ldrh	r3, [r4, #12]
 8009332:	f023 0303 	bic.w	r3, r3, #3
 8009336:	f043 0301 	orr.w	r3, r3, #1
 800933a:	81a3      	strh	r3, [r4, #12]
 800933c:	89a3      	ldrh	r3, [r4, #12]
 800933e:	431d      	orrs	r5, r3
 8009340:	81a5      	strh	r5, [r4, #12]
 8009342:	e7cf      	b.n	80092e4 <__smakebuf_r+0x18>

08009344 <_fstat_r>:
 8009344:	b538      	push	{r3, r4, r5, lr}
 8009346:	4d07      	ldr	r5, [pc, #28]	@ (8009364 <_fstat_r+0x20>)
 8009348:	2300      	movs	r3, #0
 800934a:	4604      	mov	r4, r0
 800934c:	4608      	mov	r0, r1
 800934e:	4611      	mov	r1, r2
 8009350:	602b      	str	r3, [r5, #0]
 8009352:	f7f8 fde4 	bl	8001f1e <_fstat>
 8009356:	1c43      	adds	r3, r0, #1
 8009358:	d102      	bne.n	8009360 <_fstat_r+0x1c>
 800935a:	682b      	ldr	r3, [r5, #0]
 800935c:	b103      	cbz	r3, 8009360 <_fstat_r+0x1c>
 800935e:	6023      	str	r3, [r4, #0]
 8009360:	bd38      	pop	{r3, r4, r5, pc}
 8009362:	bf00      	nop
 8009364:	20004e28 	.word	0x20004e28

08009368 <_isatty_r>:
 8009368:	b538      	push	{r3, r4, r5, lr}
 800936a:	4d06      	ldr	r5, [pc, #24]	@ (8009384 <_isatty_r+0x1c>)
 800936c:	2300      	movs	r3, #0
 800936e:	4604      	mov	r4, r0
 8009370:	4608      	mov	r0, r1
 8009372:	602b      	str	r3, [r5, #0]
 8009374:	f7f8 fde3 	bl	8001f3e <_isatty>
 8009378:	1c43      	adds	r3, r0, #1
 800937a:	d102      	bne.n	8009382 <_isatty_r+0x1a>
 800937c:	682b      	ldr	r3, [r5, #0]
 800937e:	b103      	cbz	r3, 8009382 <_isatty_r+0x1a>
 8009380:	6023      	str	r3, [r4, #0]
 8009382:	bd38      	pop	{r3, r4, r5, pc}
 8009384:	20004e28 	.word	0x20004e28

08009388 <_sbrk_r>:
 8009388:	b538      	push	{r3, r4, r5, lr}
 800938a:	4d06      	ldr	r5, [pc, #24]	@ (80093a4 <_sbrk_r+0x1c>)
 800938c:	2300      	movs	r3, #0
 800938e:	4604      	mov	r4, r0
 8009390:	4608      	mov	r0, r1
 8009392:	602b      	str	r3, [r5, #0]
 8009394:	f7f8 fdec 	bl	8001f70 <_sbrk>
 8009398:	1c43      	adds	r3, r0, #1
 800939a:	d102      	bne.n	80093a2 <_sbrk_r+0x1a>
 800939c:	682b      	ldr	r3, [r5, #0]
 800939e:	b103      	cbz	r3, 80093a2 <_sbrk_r+0x1a>
 80093a0:	6023      	str	r3, [r4, #0]
 80093a2:	bd38      	pop	{r3, r4, r5, pc}
 80093a4:	20004e28 	.word	0x20004e28

080093a8 <_init>:
 80093a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093aa:	bf00      	nop
 80093ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ae:	bc08      	pop	{r3}
 80093b0:	469e      	mov	lr, r3
 80093b2:	4770      	bx	lr

080093b4 <_fini>:
 80093b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80093b6:	bf00      	nop
 80093b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80093ba:	bc08      	pop	{r3}
 80093bc:	469e      	mov	lr, r3
 80093be:	4770      	bx	lr
